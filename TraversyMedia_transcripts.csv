video_id,transcript,,
oIx7ObcfdlU,"Hey guys. So, I've been getting a lot of
questions lately about what tech stack
I'm using for my own projects. And I
figured that this would be a good topic
for a video is going over my dev to
deployment stack. There's so many
options out there. And if you're kind of
struggling to to find a combination of
technologies that works for you, then
maybe this will help you out. And I I
also want to say that just because this
is what I'm using right now doesn't mean
this is what I'll use all you know
forever. And also it doesn't mean that
it's what will work for you either. It's
just what works for me and what I build.
So let's get into it.
[Music]
All right. So I've been a developer for
about 20 years or so and a content
creator for about half of that. So, I've
experimented with hundreds of of
different technologies from programming
languages to frameworks to smaller
libraries, tools, utilities, and and
just a lot of different technologies.
Some I've loved, some I've hated. Uh
I've changed my my main stack dozens of
times throughout the years as well. And
this is just what I'm using right now.
So, for my language, I'm using
Typescript with strict mode. And I do I
I do a lot of tutorials and courses in
JavaScript. But just about any project,
personal project that I create,
especially one of any size, is going to
be using TypeScript. And to tell you the
truth, I actually hated TypeScript at
first. I didn't think it was really a
good return on investment as far as, you
know, the extra code that I had to
write. But over time, especially as
projects got bigger and and more
complex, I started to really see the
value in Typescript. And I saw that it
was catching errors before they made it
to production. The IntelliSense is
great. It's self-documenting and and
makes your code more descriptive and uh
easier to read. Also, it's just really
become the norm. I mean, if you jump
into any goodsized either front end or
or Node.js project, it's probably going
to be using TypeScript. So, for my
framework, I'm using Nex.js, of course,
with React. Um, now I'm not saying that
React is above all. It's not I'm not
saying it's the best front-end framework
out there. I basically use it because
it's what I know the the most. I do know
Vue and Angular and some others, but I
would say I'm most comfortable with
React. So that's what I choose for most
of my my personal projects. Uh I also
love just the ecosystem that includes
the meta framework that I use which is
Nex.js. Um if it's a small tool that I'm
building uh I'll use React and Vit like
I like I just created a um a JavaScript
bundle analyzer which has like two
routes and I didn't need any SEO or
anything like that. I just needed a
something with a snappy UI. So, I built
it as a spa with React and V. But for
larger applications, as long as it's not
like a back-end API project where I'd
use Express, uh, I'll use Nex.js in most
cases and create API routes or server
actions. Um, all my pages are rendered
on the server unless it needs, you know,
hooks or events and some kind of
interactivity and then it'll be a client
component. But Nex.js is is very
performant. It's popular. It's easy to
use, so that's why I use it. Now, for
styling, I use Tailwind CSS, and
occasionally I'll use Shad CN UI, which
is a a UI library with style components
that you can install and customize. Uh,
I usually just use Tailwind, though.
Outside of tutorials and courses, I
don't think I've written CSS in maybe
two years or so. Tailwind just just
takes the load off. Uh I know you end up
with a lot of classes in your HTML and
your JSX and your templates but I I
think it's a small price to pay in my
opinion. All right, so let's get to the
database. Uh I'm using Postgres
specifically from Neon database which is
a cloud hosting service and they have
sponsored me in the past but that's only
because I approached them because I love
their product. Uh I did use MongoDB for
for years but the the charges just
became ridiculous. So for production
projects, I was getting build thousands
and even for the demo app for my my
Mstack course, which was the the Pro
Shop e-commerce app, um that was racking
up $600 per month. And and that was just
a demo for people to check out. It
wasn't even like a like a real
production app. So it just it just got
too expensive. And and Neon has steady
pricing and it's much easier to work
with. uh I use their branching so if I'm
in production I don't have to mess with
the main branch and risk screwing up my
data or anything like that. Now when it
comes to OMS and and connecting and
interacting with the Postgres database I
use Prisma. Now you could use a lot of
different tools here. Uh Drizzle is
another one that I like. I really just
ended up using Prisma kind of by chance.
Um I liked it and it's easy to use. So
that's that's just what I know best now.
And um it's easy to model your data, run
migrations. It has a tool called Prisma
Studio where you can see and manage all
your data. So it does just about
everything that I need it to. Now for
deployment, it depends on the project.
For the most part, I'm using Versell
when I'm using Nex.js. Uh Versell is
they're actually the creators of Nex.js,
and they just have a lot of different
features. They have built-in continuous
deployment. So all you have to do is
push to the main branch of your GitHub
repo or GitLab and it will run the build
process and if it passes it will get
deployed. It's just ridiculously simple,
you know, and and I come from the days
of of FileZilla, FTP, and and C panel.
And it's it's crazy to see how far we've
come from dragging and dropping your
entire project into an FTP window and
waiting 45 minutes for it to upload and
not having any backup, no version
control if something goes wrong. Now,
for testing, when I do write tests,
which isn't all that often, I'll use
justest. And for any automation like
running those tests, linting or or or
building before deployment, then I'll
use GitHub actions. So that's really the
my main stack that I'm using. As far as
AI assistance, I'm using Claude Code. Uh
I was using Cursor, but I think Claude
Code to me is is the best agentic AI
tool at the moment. So I went back to
just regular VS Code with the Claude
Code extension. Now, I try not to to
vibe code very much, meaning just let
the AI run wild and and give it a few
prompts here and there. Instead, I try
to really structure my context and my
rules and and do that through multiple
files and work with the agent rather
than just dictate what I want. And what
I mean by that is I'll create multiple
project context files that explain, you
know, my coding style, the architecture
I'm looking to use, uh, what I'm trying
to build, and then I'll work
collaboratively with Claude, and I'll
write code manually, I'll test manually,
and I'll also have the AI review it for
things like redundancy and and potential
bugs or or just better patterns that I
might have missed, and so on. Now, for
back-end deployment, I'll use
render.com. And I absolutely love this
service. They make deploying web
services and APIs as easy as the front
end. So, basically, you just import your
your GitHub repo just like you would
with with Versel or or Netlefi. And this
beats setting up and and maintaining a
Digital Ocean server big time. All
right. So, now let's look at some of the
projects that I've been working on. All
right. So, I have two production
projects that I want to announce that
both use this exact stack. The first is
webutills.io.
So the idea behind this was to really
just take all the little utilities that
I use around the web such as PDF
splitters and mergers, file compression,
favicon generation, um generating fake
data, all those little utilities that I
would go to different websites for. I
wanted to put that all into one
platform. And the tools are extremely
fast because 90% of them run client
side. Uh, I added a bunch of dev tools
like diffing, flexbox and grid
generation, uh, git ignore gener uh,
creation, typescript interface creation,
and a bunch more. And everything is
free. You can use it without
registering, but you can register if you
want to add any of the tools to your
favorites for easy access. Um, it uses
next off for authentication and you can
use Google to log in or just email and
password. Uh, I created an admin area to
manage users and tools and see my
analytics and stuff like that. Now, I
did use AI pretty extensively, but like
I said, lots of context engineering,
manual code, um, tons of manual review
and testing. So, that's webutils.io.
Now, the next project that I have is
devsheets.io. And this provides cheat
sheets for common technologies. And I
worked with Claude Code to shape these
cheat sheets in a way where you really
get the meat of the technology and what
I would have wanted to to to learn and
have on these sheets. And there's a
quick reference and a detailed example
for each concept or each thing that's
talked about. So we have sheets for Git,
TypeScript, Python, Express, DOM
manipulation, even things like AI
prompting. And I'll be adding many more
to this. I plan on having, you know,
hundreds of of cheat sheets and all
different languages, too, not just
JavaScript and Python. Uh, the next one
is a SAS in the health niche, and it's
far from done, but it it also runs on
the stack. It's a symptom tracker to
track health issues and symptoms with
all kinds of analytics and giving you
correlations and AI insights. I'm using
the GPT40 mini model right now for as
far as uh AI coming up with correlations
and patterns as well as suggestions. And
I just need to be careful because I
can't be diagnosing people with diseases
or anything like that. And there will be
a premium tier with extra functionality.
I don't expect this to be done for a few
months now. I started out vibe coding
this months ago and it didn't work out.
I got all kinds of errors that were
being suppressed and then when I would
try to fix them, more things broke and
it just ended up in just a mess. And it
taught me a lesson. So, I'm glad it
happened. It taught me that you can't
just stay within the prompt and build a
large application. It just it isn't
going to work out. You need to get in
there and manually run and write code
and test. So, sometimes I may have a
project that Nex.js doesn't fit. So for
instance, I created a fake REST API tool
similar to to JSON placeholder um which
you can use for CRUD resources and and
actually persist the data. So it's at
apiocker.com
and it's open source. You can contribute
to it if you want. And for this I used
Express and some other small libraries.
And the the front end that you see here
is is just simply an HTML page in the
public folder. So it's just a Node.js
Express project. Um, and the API is is
basically what you're working with. And
there's search, there's um delay
simulation, there's all kinds of
features. There's all kinds of resources
you can access like to-dos and users and
so on. And then I also created API
probe.dev, which is another open- source
tool similar to Postman where you can
make HTTP requests and include headers,
you can create different environments
and so on. Um, both of these tools, like
I said, are open source, so feel free to
add some features and make a PR. All
right, so that's what I'm using these
days. Uh, again, if you're using
something else, don't change that if
it's working for you. But if you're
struggling with your current stack and
you want to give these these tools a
try, um, you might find it useful. All
right, guys. So, that's it. Thanks for
watching and I'll see you next time.",,
NaIIqJaF4hM,"All right, guys. So, what the hell's
with this package-lock.json
file that keeps showing up in your
projects? So, you're working on a node
project. You install some packages with
npm and boom, this massive file appears.
Should you commit it, delete it? What's
it even doing? So, here's the deal. When
you run npm install, npm looks at your
package.json for dependencies. But
here's the problem. If I say I want
React version carrot 18.2.0,
that could install 18.2.5. 2.5, 18.2.8,
whatever the latest patch is. So,
package lock.json locks down the exact
version that got installed and every
single dependency, every subd dependency
gets pinned to a specific version. Why
does that matter? Because when your
teammate clones your repository, when
you deploy to production, npm reads this
lock file first. Everyone gets the
identical dependency tree, and there's
no more works on my machine nonsense.
And yes, always commit your package
lock.json.",,
1tF-vTlJ3xg,"[Music]
Hey, what's going on guys? So, I know
that some of you were a little worried
by my last video, but as far as my
health issues go, the vestibular
migraines, the tonitis, and all that,
I've been dealing with those issues for
close to two decades now. And I'm
actually doing better and and feeling
healthier now than I have in in a long
time. Uh the reason main reason I
brought Dennis on board is because I've
been uh kind of a one-man show since I
started and it's just getting too much
to juggle on my own. You know, there's a
lot that goes on behind the scenes that
you guys don't see even for like a
1-hour crash course. And I've known
Dennis for years and I know he's
talented. So, it just seemed like a good
idea, good fit to try and grow Traversy
Media because honestly, I feel like I
myself have brought it as far as I can
on my own, which is further than I ever
imagined. You know, it still baffles me
when I look at where I was at one point
in my life um to where I am now. Anyway,
the reason that the main reason I've
been quiet lately is because I've been
working on a new course to replace my
React fronttoback course, which is like
my my beginner to intermediate level
React course. So, I just finished modern
React from the beginning. It's a 25-hour
course that focuses on both the
fundamentals of React and how to use it
in modern environments like React Router
version 7 framework mode, tanstack
query, um the mer stack. I also
introduced TypeScript in this course
which many people have been requesting
for a while and I designed this course
so that someone with no experience at
all with React can start from scratch as
long as you know JavaScript. Um but also
developers with some experience can
deepen their understanding of how React
works in different real world setups.
And I'll have a link for it in the
description with a promo for just 15
bucks both my website and on Udemy. Um,
I also spent more time going indepth on
on key concepts like the component life
cycle. We even touch on how React works
under the hood. And instead of building,
you know, random throwaway projects,
each project has a specific learning
purpose. For example, when we learn
about the use ref hook, we build a
simple timer app that uh lets you or
shows you how to use the use ref hook to
persist a timer ID across multiple
rerenders without triggering a new re
render each time. Um to learn about use
effect, we build a crypto dash app that
interacts with the coin gecko API and
shows you pricing data with filters and
sorting. Um we implement react router in
the declarative mode which is kind of
the traditional routing structure and we
implement chartjs to show the price
changes over time. In addition to using
react router in declarative mode, we use
the the new framework mode with SSR
capabilities in a portfolio website
called the friendly dev. And we start
out by using JSON server for serving our
our projects and we use markdown files
with along with react markdown for the
blog posts. But once we get the front
end up and running, we then implement
strappy which is a headless content
management system. And this makes things
more scalable, more like a real world
project. And we create a product and and
a post content type in the strappy admin
area. We also use Cloudinary as our
image hosting service. Um, we hook up a
contact form with Formspree and we also
keep the front end and backend
decoupled. We deploy strappy to
render.com and React to Versell. To show
how the context API works, we build a
shopping cart UI with a product and cart
context so that we can access the cart
from any component by using the use
context hook. And we also use JSON
server here. um to kind of mock up an
API to serve the products. We build
another classic from past React courses
called GitHub Finder which interacts
with the GitHub REST API to search and
filter users and display their data. We
also show show your recent searches and
even follow and unfollow users. And the
focus of this project is Tanstack query
which handles all the data fetching,
caching, and background updates. It's a
powerful tool that replaces things like
use effect and use state for API calls
and gives you a much better dev
experience when working with server
state. And you'll also see how to
refactor your components to make them
leaner and more maintainable. This is
something that we do throughout the
entire course. And then the final
project is a merstack app for sharing
startup ideas and side projects. And in
the front end, we focus on Tanstack
router as well as using Tanstack query
here. Um, and again, we we start out
using JSON server, but then we move on
to create our own back-end API with
Node.js Express and MongoDB. And we also
implement authentication using JSON web
tokens. But unlike past courses where I
would store a long live token in local
storage, we use a combination of a
short-lived access token just kept in
state as well as a refresh token and an
HTTP only cookie. So this this is a much
more secure way of using JSON web
tokens. And this part does get a bit
advanced, but it's kind of a bonus with
this course because it's really out of
the scope of React. I just figured some
people would like to to take it further
and learn full stack. So, that's the
gist of the course. There's some other
projects in there. Um, if you want to
learn React or just deepen your
knowledge and do some fun projects,
check the links in the description. As
far as YouTube goes, Dennis and I are
brainstorming some new content for you
guys, including, of course, the the
classic crash course format, as well as
some new stuff. So stay tuned and I'll
see you in the next",,
NKiTlo_dgb8,"Hey, what's going on guys? So, I got a
cool project for you today and I'm
excited about this one. It's not so much
about the project itself, which is a
support ticket system, which I'll talk
about in a few minutes, but more so the
tools that we're going to use and how to
use them together. So, as far as the
tools, we're using Nex.js, which is an
SSR framework that uses React. We'll be
using Neon, so we'll have a a cloud
Postgres database. Prisma, which is an
OM. So, we'll use that to interact with
our database and create models and
migrations and stuff. And then I'd say
the main focus of this video is going to
be a tool called Sentry, which is an
error monitoring and tracking tool as
well as performance monitoring. So, the
reason you use something like Sentry is
because normally, you know, you have
your your website, your application,
your users are going to it, and it's
just it's just inevitable that you're
going to have bugs. you know, you're
going to have issues. Your users are
going to run into issues and they may or
may not tell you about them and it could
go days, weeks, months without you even
knowing that these problems are
happening and and turning away your
users. So, what Sentry does is it gives
you this this main dashboard, this
centralized location where you have all
all the events that happen in your
website. You know, you can log as as
many events as you want. Uh, and of
course your errors. You know, you're
going to see all your your errors that
that take priority as well as your just
custom logs. And this will allow you to
to, you know, pinpoint issues. So,
especially if you can't replicate them
yourself. Um, you can get email
notifications when your users run into
issues. And you're going to have all the
information that's available as far as
the stack trace goes, as far as your
user information. And then you also have
a screen recording of what the user was
doing, what happened uh on screen when
that error happened, which can help you,
you know, debug. So it's it's going to
help you not only find errors and know
about errors, but also debug them. Um,
and this is something that you would use
in a production project. It's something,
you know, often you'll use when you're
working for a large company. So it's
really valuable to to know how to use
this stuff. So, I'll show you how to use
that. We're going to get set up with the
Sentry Wizard and the SDK for Nex.js.
And then we're also going to be using a
or building a custom authentication
system rather than using something like
Next Off, which is great, you know, but
I wanted to do something a little lower
level for this project. So, we'll be
using a package called Jose that will
just generate JSON web tokens for us.
and uh and we'll be hooking up, you
know, the login, the the register, the
log out, managing sessions, etc. And
then as far as the the project itself,
we'll be able to, you know, log in and
create tickets. So, support tickets
where we can describe an issue. Um, and
then you'll be able to, you know,
obviously see a list of the tickets, see
the details view, you'll be able to
close the ticket, delete the ticket. So,
it's pretty simple as far as
functionality, but again, this isn't
about the project itself. It's about
learning how to use these tools so that
you can build your own projects with
them. All right, so grab a coffee, grab
a tea. I really suggest that you follow
along and let's get into
it. All right, guys. So, I'm really
excited for this project. I think you're
really going to like it. And again, I
would suggest that you follow along with
me, write the code with me, and I think
that that's just the best learning
experience you can get. So, I'm going to
just go through the phases so you have a
highle view of the tasks and how we'll
be doing this, the order of of um
functionality that we'll be creating.
So, there's four phases. The first one
is going to be setting up Sentry and our
database. Okay, we're using a Neon
Postgres database. So number one, we'll
get our next app up and going. So create
next app. Very simple. You guys know
that most of you. Uh number two, we'll
set up Sentry, which is really simple.
There's something called the Sentry
wizard that we can run with NPX, and it
gives us a sample error that we can fire
off. So we can go into the Sentry
dashboard and kind of see how it works,
see what it gives us, and then from
there, we can integrate it into all the
different functions throughout our
application. Then we're going to set up
our Neon database, which is very simple,
just a couple clicks. Uh add the
database URL to our environment
variables. And then for Prisma and Neon
adapter setup. So Prisma is the OM that
we're using. We're going to interact
with the database using that. And the
Neon adapter, we're going to use that um
to ena basically enable us to use um
Prisma and Neon together. Neon offers
serverless Postgres databases. So
there's just a couple extra steps we
need to take, especially if you're going
to deploy to Verscell. And then number
five, database ticket schema and
migration. So we're going to start off
with no authentication, no users. I just
want to get the ticketing system
working, which is, you know, submitting
the ticket and getting the tickets and
so on. And we what we do with Prisma is
we create a schema which is all the
different fields that we want like the
ticket uh the priority or the title
things like that the date. So we set up
a schema and then we run a migration
with Prisma and that will create our
database tables in our Neon database.
Okay so that's phase one. Phase two we
have some basic UI stuff and I also want
to handle creating new tickets. Okay, so
we'll set up Tailwind. Really, really
easy with version 4 uh and Nex.js. And
then we'll create the welcome screen,
which will just be a landing page with a
couple buttons to submit a ticket or
view your tickets. And then from there,
we'll create the ticket form. Okay. Um
we're going to be using Nex.js or uh
actions, so server actions, which you
can use in place of API routes from, you
know, older versions of Nex.js. So
basically our form will submit to a
server action and then from there we can
do all of our database tasks using
Prisma. All right. And we're going to be
using a hook in the form called use
action state which allows us to manage
that form state with what comes back
from the action. So it's the the most
modern way of doing this with
Nex.js. And of course we're going to
have our Sentry integration in the
ticket flow. Um, so we'll create a
custom log event function we can use
that that fires off a couple different
sentry methods. Um, we want to test it
and check the sentry reporting, look at
any playbacks, etc. So that's phase two,
just getting being able to submit new
tickets. And then phase three will be
the ticket display. So we'll have an
action once again a server action that
will fetch the tickets from the database
using Prisma. We'll have the tickets
index page which will list them all. the
details page which will list a single
ticket and then we'll have our sentry
reporting and tracking and just some UI
element styling like if it's a serious
priority we'll make it red or whatever
just little things like that uh we also
have like toast
notifications and then the final phase
phase four is users and authentication
because up to this point we can just
create tickets and see them but we want
to be able to log in right and we want
to be able to see only that user's
tickets. So, we'll start off with just
creating a simple navbar component with
a login and register link. Um, we want
to create a new user schema because
obviously when you have authentication,
you need somewhere to store your users.
Um, we'll have a custom authentication
flow with JSON web tokens. We're going
to be using a package called Jose, which
is kind of a more modern version of the
JSON web token package. We're going to
create some low-level functions like
encrypt and decrypt to deal with our
token and deal with cookies. You know,
saving our token and a cookie and HTTP
only cookie. And then highle functions
like register user, login user. These
will be called from our actual
components. And then the authorization
of course you want to have a
relationship between the tickets and
your users so that the user can only see
their own tickets and not everybody
else's. So that's kind of the the entire
flow of this project just so you can
have an idea. So let's go ahead and jump
into it and let's start to create our
next app. Okay. So we went over the kind
of the the workflow, the order that
we're going to do things. So I'm
assuming that most of you have at least
a little experience with Nex.js. If not,
that's okay. But what I would really
suggest is you at least know the basics
of React. If you don't know anything
about React, then you could watch my
React crash course or just any kind of
beginner React content just to get
familiar with state props, components,
things like that. All right, so let's
jump into it. I'm going to just open my
terminal, navigate to where I want to
create this project, and then we're
going to run npx and we want to do
create-next app at latest. And then I'm
going to call this project
quick-t. Now, as far as using
TypeScript, I'm going to use it, but if
you don't want to, you can say no.
There's not a ton of TypeScript we're
going to write, so you'll be fine if
even if you've never used it before, and
you click yes. Uh, ESLint, we'll click
yes. Tailwind, I'm going to use it. Um,
using the source directory. App router,
yes. Turboac for nextdev, I'm going to
say no. and a customize the import
alias. I'll say no to that as well. All
right, so that's going to go ahead and
install all these dependencies and just
scaffold up an Nex.js application for
us. So now that that's done, let's CD
into QuickT. And then from here, there's
a couple other um dependencies I want to
install. So Prisma, we want the Prisma
client, which is at
Prisma/Client. We're also using
React-icons. There's some other things
later, but this is all I want to install
at the moment. Um, and then I want to
once we get this the dev server up and
running, we'll start to integrate Sentry
as
well. Okay, so let's go ahead and open
this folder in Visual Studio Code or
whatever text editor you want to use.
I'm going to be using the integrated
terminal, so I'll close that up and then
open the integrated terminal. And we can
go ahead and run npm
rundev. And let's see. I want to open
that
here. So, let's go. It's going to be
localhost
3000. And we should just see the the
default Nex.js page. And we can do a
little bit of cleanup here. So, in the
source folder, we have our app folder.
And you may have chosen not to use a
source folder. That's fine. Your app
folder will just be in your root. And
from here, the page.tsx is the homepage.
And if you're new to Nex.js, it uses
filebased routing. So the app folder is
like your routing folder where the page
.tsx that's that's directly in it is
your homepage. If you wanted, let's say,
slashabout, you would create an about
folder with a page tsx in that about
folder and that would that would just
show up at slashabout and all the pages
are are react components. In fact, we're
going to wipe away this one, the page
tsx. I'm going to generate a component
with the react simple snippets extension
that I have. So, sfc enter or tab and
then it just scaffles out a component. I
like to use the arrow function syntax
with the export at the bottom, but
there's other, you know, formats as
well. And then for now, let's just do an
H1. And I'm going to give it a Tailwind
class just to show you that that works.
And we'll just say
welcome. Okay. So, you can see that the
heading, this class is working. Tailwind
just works right out of the box because
we, you know, we selected it when we
initialized the project. Okay. So, now
what I want to do is set Sentry up,
which is pretty simple. So, we're going
to go to um Sentry.io. IO. And as far as
pricing goes, absolutely free for a
single developer, one user, error
monitoring, tracing, you get uh session
replays, alerts, all kinds of stuff. So,
we're just going to sign in. You can use
Google or GitHub. I'm going to use
GitHub. All right. And then from here,
so for me, I have all these issues
because I already have a project, but
you won't see that. What you want to do
is create an a project. You can also
create a team as well. And then here you
want to select your platform. We're
going to select Nex.js. And then you can
set your alert frequency because it's
really cool. You can get emails and
alerts when you know a user runs into an
issue. Um, and it just notifies you
right away so you can get to the problem
and fix it as soon as possible. But for
me, I'm just going to choose I'll create
my own alerts later. And the project
name, I'm going to change that to
quick-t use my Traversy Media team, but
you can create a new one if you
want. And then it's going to give you
this npx sentry wizard command. So
basically, this will install all the
dependencies that we need and it will
create our config files and anything
else that Sentry needs to to, you know,
be integrated into our project. So just
copy that. I'm going to stop the server
and then just paste that in and run it.
And it has our project name and team
name as well. And then it's going to ask
some questions. So I have unttracked
files. Do you want to continue? We'll
say yes. And it's just going to validate
in the browser and then send you back to
the terminal. And we're going to just
pretty much select the defaults for the
rest of the
questions. So do you want to route
sentry requests in the browser through
your Nex.js server? We'll say yes.
enable tracing. Yes. Enable session
replay. And then it's asking if we want
to create an example page, which you
don't have to, but I'm going to just to
kind of show you how Sentry works. So,
I'll choose yes for that. It's going to
ask if you're using a CI/CD tool. So, if
you plan on deploying to to like Versell
or or GitHub, uh if you want to use
GitHub actions or whatever, we'll say
yes to that. And it's going to generate
this Sentry O token which you don't have
to copy because what happened is it
created this. Eenv
uh Sentry build plug-in file and it has
the token in there. In fact, what we can
do is just rename that to um Whoops. We
want to rename that to
env. And that will be our environment
variable file. Get rid of the comments.
Uh I also like to just add quotes
here. And now we have that O token in
there if we need it. So we'll just click
enter again and then we should be all
set. All right. Now I want to run the
server. So npm rundev. And I just want
to quickly show you before we set up our
Neon database and stuff. I want to show
you how to integrate how to how Sentry
works. Um so let's open our project back
up. And you'll notice that in your
project, if you chose to to show the
example page, you'll have this Sentry
example page folder in your app folder,
which means that that's an accessible
route. So, if I were to go to localhost
3000/entry example page, that should
load. And it has a button that says
throw sample error, but I'm not going to
click that just yet because I want to
show you that page. So, Sentry example
page page tsx and this we're going to
delete this after. So, you don't really
have to worry about this. I just want to
show you where the button clicks. So,
basically it first calls this
sentry.start span and this is if you
want to test performance of the page and
I'll show you this in the sentry
dashboard. Now, when we click it, it
runs a function and it makes a request
to slash
API/entry example API. And if we look in
our API folder, we can see that route
right here. All right. So, it makes a
request to that route. Let's take a look
at it. This is the route. And all it
does is it throws an error, just a kind
of a sample error, and passes in a
message sentry example API route error.
And then back in the page where it makes
the request, it checks to see if the
response is okay or if it's not okay.
And if it's not, then it throws an error
here. Okay. So, two errors are being
thrown. one in the back end or API and
one here in the front end. Now let's
jump over to the page. Let's click the
button that makes the request throws the
error and you can see sample error was
sent to Sentry. Now if we go over to
Sentry and go to issues make sure that
the right project is selected. So for me
quick ticket and we can see the example
front-end error and the API error. Okay,
so it tracks our errors and if we click
on the front-end error, it's going to
show you basically any information that
is possible to see. It shows the server
information, the IP address, which I
don't care if you guys see. I'm on a
VPN. Um, and then if you scroll down,
you can see what are called the
breadcrumbs, which is just kind of a
trail of what happened to get to that.
From the UI click to making the request
to the exception. Um, you have the
trace, you have the stack trace, you
have uh your HTTP information, so you'll
be able to see the the user's um device
and and operating system, things like
that, the browser they're using. So
again, just all the information that is
possible on a single request. And then
one really cool addition is this session
replay where you can see exactly what
happened in the browser prior to that
error being thrown. So in my case,
obviously I just clicked a button and
that's not very helpful in terms of
debugging. But if it was something
different like let's say a form that a
user was filling out, maybe we could see
that they missed a field or they filled
out something wrong or in the wrong
order. So anything any mistake in the UI
we would be able to see here, which is
is really cool. And then if we go back
to issues, you also have the API route
error. Um, there's no replay for this
because it's it's an API error. It's a
backend error. But we do have the
breadcrumbs. We have the stack trace,
HTTP info, and so on. All right. And
then if we go to traces, remember that
start span. So this will show you any
spans that were created and shows you
the performance. So you can see the page
loads, um, you know, the performance of
that page. So, and I I don't use this
too much, so I don't know too much about
it, but um but you can just test
performance of different routes and see
if you need to, you know, make any
adjustments. Okay, so that's kind of the
gist of Sentry. And of course, you can
make all types of logs and stuff. We'll
be doing that throughout our project so
you can see how it works. Okay, if we go
back to issues, you can, you know,
change the the priority to low, medium,
high. We can let's say that these are
resolved. We can just mark resolved and
then they'll go away. But it's just nice
to have one place where all of your
issues, all of your logs, warnings,
errors, everything is shown here. All
right. So, back to our project. We can
now
delete both of those pages. So, the
Sentry example page, we can delete that.
Sentry example API folder, we can delete
that as well.
and we'll just go back to uh yeah back
to the homepage here. Okay, so now we
want to set up our database which is
very very simple using Neon. So let's
jump over to neon.te and we're going to
log in. You can log in with GitHub or
Google and it's literally just like a a
couple fields. So new project, add a
project name. I'm going to call it quick
dash ticket database name let's say
quick dash ticket db going to keep AWS
as my provider create and now we have a
cloud database now to connect to it we
can click connect and then it gives us
this string where we want to say show
password and then copy the snippet and
we want to put that in thev file that we
already created. So here, let's say
database URL. And I'm going to set that
to that database string. Okay. And
Prisma when we set that up is going to
use this database string. And we'll be
able to run migrations, create some
schemas, and it'll create our database
tables. Okay. And you can see your
tables here, which right now, obviously,
we don't have any, but we will after we
run our migration.
Now to initialize
Prisma, let's uh let's go ahead and I'm
just going to open up a new
tab and I'm going to run Prisma or sorry
npx because we don't have Prisma
installed globally. So npx Prisma
init. All right. And what that does is
it creates a Prisma folder with a
schema.prisma Prisma file and it has our
client generator, our data source which
in our case is Postgres and this is
where it uses that database URL that we
just created. Now I would suggest that
you install the Prisma VS code extension
if you are using VS Code. So this right
here because this will give you you know
syntax highlighting, linting, code
completion. So definitely you know get
that installed and then let's open up
our schema file and from here we can
create what are called models and any
resource in your project like users
tickets in our case uh blog posts
products anything like that you're going
to create a model here and then run the
migration which will then create the
table. So there's no there's no logging
in in to your database and writing raw
SQL queries or anything like that. This
makes it really easy. So let's create a
model called
ticket. And in our ticket model, we want
to have uh an ID and the type for that
will be int. So these are Prisma
specific types. And then we can add
special options. In this case, I'm going
to use at id, which defines a custom
primary key. Okay, so in our database,
this will be uh you know a variable
character and it'll be marked as a
primary key. And then we can add
defaults. So at default and then I want
to add an auto increment parenthesis. So
that will mark it as auto increment. So
that when we create our first ticket,
it'll have an ID of one. Next will be
two and so on. Okay. After ID, let's do
a subject, which will be a
string. And then let's do description,
which will also be a
string. Then we'll do a
priority that will also be a string. And
then we're going to have a status.
Status will be a string. And I want to
give this a default.
So the default for status is going to be
a string of
open and then we want created at that
type is going to be a date
time. And let's do a
default for that which is going to be
now with parenthesis. So that'll just be
the current date and time. And then
we'll do an updated at and that will be
a date time. And we can do at updated at
which will just add whatever the current
date and time is for for that
update. So later on we'll have a user
model as well when we implement
authentication. But for now I just want
to be able to create and read tickets
through our project. So uh yeah we can
close this up. And there's two things we
have to do whenever we edit that file.
Whether we create a new model or we edit
fields in a current one, we have to run
the migration and we have to generate
the client. So let's come down to the
terminal and let's do our migration with
npx prisma. So whenever we run a prisma
command, we're going to do npx unless
it's you know installed globally. And
then we want to run migrate
dev-name and I'm going to call it init
since it's our first one.
And what this is going to do is is look
at that file. It's going to look at our
ticket model and it's going to create a
table in our database based on
that. So now it says your database is
now in sync with your schema which is
good. So now let's go to Neon and I'm
going to reload the
tables and you'll see a migrations table
as well because whenever you create a
migration it puts it in here. But we can
see ticket with an ID, subject,
description. So all the fields that we
put in our model. So it's as easy as
that to create tables. Now the second
thing we have to do is run npx prisma
generate. So that will generate the
client. So then when we, you know, we're
in our code and we use the client, we
can now work with
tickets. Now one other thing that we
need to do is in the package.json, JSON,
we want to add a post install script
because when you deploy this, whether
it's to Verscell or wherever, you want
to generate the client on the server. So
the way you do that is add a post
install script and from here just simply
add Prisma generate so that that runs
when you
install or when you
deploy. Okay. So yeah, so we should be
good as far as the database goes. Now in
this tab, so here I have my my npm
rundev. In this one, I want to run
Prisma Studio, which is going to be
NPX Prisma Studio. And this is a really
cool tool that will show you all your
all your tables, all your data. You can
see I have my ticket table, ID, subject.
So obviously I have no tickets, but if I
did, they would show here. So I'm going
to keep this open so that we can always
refer to our data if we need
to. So now that we've done that, I'm
going to start working on the the actual
UI. But I just want to initialize a git
repository. So I'm going to open up a
new tab here and let's just do git
and um you also want to make sure I
believe it's by default, but make sure
your git ignore has the
env. Yeah. So it does. All right. And
then let's do get. We'll say get add
all. And I'm g say get commit.
Obviously, you can do this whenever you
want. Uh
whoops. Shoot. Didn't mean to do that.
Uh so get commit. And let's see. We'll
say
initial initial
um I
guess initial
Prisma setup.
Yeah, we'll just do
that. All right. And I'll be making
commits off camera, but like I said, you
can, you know, obviously make whatever
uh commits you want. Okay. So, now we're
going to work on the welcome page, which
is app and then
page.tsx. And for this, it's just it's
going to be a welcome page with two
buttons. One is going to be to create a
new ticket. One is going to be to to to
see your tickets. Okay. So, we're going
to bring in a couple things here. Let's
import link from
nextlink. And then for I want to use an
icon here from React icon. So, fa ticket
alt. All right. And then for the JSX,
it's just a bunch of tags and classes.
So, I'm going to paste it
in. So, for the return in
parentheses, we'll go ahead and paste
that. Um, oh, now one thing I did forget
to do is in the global CSS, I want to
change the background to
EFF 6 FF, which is a light gray. Now,
the reason this is dark is because of
this block here. And since I'm not using
any kind of dark mode, I'm going to just
get rid of that block. Okay, which will
make the background light. And I haven't
used the ticket yet. So, let's add that.
I'm going to go right above the H1. And
again, you can copy this if you want.
You can type it out or you can get it
from the the
repo. But let's add
FA ticket
alt and then just a couple classes. So
MX auto
uh what else did I want to do? We'll do
margin bottom
four. And I'm going to make it red. So
text red 600. And then we can also add a
size for the icons. I'm going to do 60.
So, that will just add a little red
icon. Now, one other thing I wanted to
do is just something really simple, but
I figured that it's just a nice add-on
is to have these buttons fade in and up
when we come to the page. So, what I'm
going to do is the wrapper that is
around the two links. I'm going to add
to that uh a new class called animate.
We'll say animate dash slide. And then
I'm also going to add a Tailwind class
of opacity zero, which is going to make
them disappear at the moment, but then
we'll fade them back in. So we're going
to do that through our global CSS
file. So let's see, we'll go down here.
We're going to create a new key frame.
So let's say key frames, and we're going
to call this slide up.
And from here I want to say at 0%. So at
the start of the animation I want the
opacity to be zero which is just you
know not there invisible. And then we're
going to add a transform and then
translate on the yaxis because we want
it to fade up. So I want it to start 20
pixels below. So we'll say 20 pixels.
All right. Which means it's going to be
pushed that the buttons will be pushed
down 20 pixels. Then on 100% which is
when the animation
ends is where we want to add opacity one
which is you know full view um no no
fading at all and then transform we want
to do translate y and then put it back
to its original position which is zero.
Okay. And then all we have to do is take
our animate dash slide class that we
added onto the wrapper and add the key
frame into the animation property. We
want to use the slide up animation. The
duration will be 0.6 seconds. We'll do
an ease in and
forwards. Okay, we don't want it to to
repeat. We just want it to do it once.
And then animation delay. I'm just going
to put a very slight delay of 0.2 2
seconds. So now when I save that, you
can see that the buttons now fade in and
up. If I reload. Okay, so it's just a
nice little addition. That's, you know,
not a lot of code at all. So that's
that. Now I want to work on the submit
ticket page. If I click that, it takes
me to the route of, as you can see here,
slashtick slashnew. Now since Nex.js JS
is filebased routing. In the app folder,
we're going to have a folder called
tickets. And then in that, we'll have a
folder called new. And then in that,
we'll have a file called
page.tsx. And let's do sfc.
Oops. Sometimes this doesn't work. Like
now, sfc tab. Okay, there we go. And
let's call this new new ticket page.
Whenever it's a page component, I always
like to end it with page just to just
preference. And just to make sure this
is working, let's just say new. And then
this
should show this. There we go. So we
just see new on the page. And we're
going to add our form
here. Now to begin with, I'm just I'm
just going to add the JSX just tags and
classes. So I'm going to paste it in. So
the return let's add some parenthesis
and then paste this in. So basically we
just have a div flexbox. Uh we have
another div which is kind of like the
the wrapper the card or whatever. Then
h1 then we have a form with with an
input for the subject. Okay. Okay. So,
it has name, subject, uh text area,
which is going to be the description,
and then a select box, which is going to
be the priority of low priority, medium,
and high, and then the submit button.
So, let's save that. And that's what the
form is going to look like. Okay. So,
now we get to the fun part, which is
submitting the form and making it work.
Now, we're going to be doing this the
most modern way in Nex.js, which is
using server actions. Okay. So server
actions are just files where obviously
they run on the server and you can
submit directly to them. Like we can
have an action attribute and submit it
directly to the action just like you
would with like PHP which is really
cool. U and we're also going to be using
a new hook called use action state. So
let's start off by creating the action
file for tickets which is going to be in
source. Create a folder in source called
actions. And then let's create a file
called
ticket.actions.ts. Okay. So any actions
that have to do with tickets, whether
it's creating one or fetching them,
whatever, we're going to put that in
here. So this is the backend for
tickets. Now, when you create a server
action, the first thing you want to do
at the very top is say use server. Okay?
So that will mark it as a server action.
And all a server action is is an
asynchronous function. So, we're going
to say async
function create
ticket. And this you could do an arrow
function if you want, but it's it's up
to you. All right. Now, this is actually
going to take in the form data. And
we'll give it a type of uppercase F form
data because when you use an action
directly, that form data is available.
So what we'll do is get let's say con
subject and set that to that form data
and then there's going to be a get
method on that and that's how we get our
data. So we want to get the data or the
input that has the name of subject.
Okay. So this whatever we put here has
to match the name. So
this so get form subject and just to
please TypeScript we'll say uh let's say
as string and then I'm going to do the
same with the other fields. So we have
the
description description and then what do
we got the priority so I'll just select
this and
this. So, priority and then just to test
it out, let's do a console log. Again,
this is not There we go. Console log of
the subject of the
description and the priority. And then
I'm going to return from this an object
that has a success boolean. In this
case, I'm just going to say
true. So, true. And then we'll do a
message and let's say
ticket created successfully. I know it
wasn't, but we'll just respond with that
because I just want to show you how this
works if you've never used actions
before. And now in the new ticket page,
let's bring in so import. Let's bring in
cr",,
",,
eate,,,
uh create new ticket. Why isn't it,,,
showing here? Did I export it or just,,,
create,,,
ticket?,,,
Import. There it is. All right. So,,,
create ticket and then come down to the,,,
form and we should be able to just,,,
add action set that to the,,,
uh create,,,
ticket. And don't worry about this,,,
TypeScript error right now. So, let's go,,
ahead and try this. I'm just going to,,,
show the server uh console here because,,,
when we submit it should show it down,,,
here. And I have a form filler. I'm just,,,
going to use that and then submit. And,,,
there we go. So, we can see the subject,,
the um description, and then the,,
priority, which was,,
medium. So, that's that's just how a,,
basic action works. Now, we're not,,
handling the the response in any way.,,,
So, we're going to get to that, but need,
to use a hook that's relatively new,,,
called use action state. So, let's,,
import that. So, use action state. And,,
that's from React. And this is similar,,,
to use state, but instead of dealing,,
with component state, we're dealing with,,
the state that we get back from the,,,
action. Okay. So, the way that this is,,
going to work and and we have to make,,,
this a client component because we're,,,
using a hook and I don't like to,,,
particularly use client components for,,,
pages. So later on, we'll move the form,,
itself to a client component and keep,,,
this server rendered. But just for now,,,
we'll say use client. And then to use,,,
the use action state, we're going to,,
come up here above the return. Let's say,,,
const. We want to pass in state and form,,,
action. Okay, so we're destructuring,,
from use action,,,
state. And then what we pass into use,,,
action state is going to be one the the,,,
action we want to use which in our case,,,
is create ticket and then the initial,,,
state which is going to be success false,,,
and message just an empty string because,,,
remember that's what we're what we're,,,
getting back from here from the create,,,
ticket. So we're just setting that that,,,
initially before we actually submit the,,,
form. Success obviously will be false,,,
because it hasn't been submitted and,,,
message will just be empty. Now when we,,,
use an action in use action state we,,,
have to edit the the function signature.,,,
So basically what gets passed in here.,,,
So in addition to form data we need the,,,
previous state. Okay. So first we'll be,,,
we'll say pre state then we get the form,,,
data and the previous state as far as,,,
typing is just going to be success which,,,
is a,,,
boolean and the message which is a,,,
string and then let's add the return,,,
type here for this function. So the,,,
return is going to be a,,,
promise that will have an object with,,,
success which will be,,,
boolean and a message which will be a,,,
string. And again you don't have to if,,,
you're not using TypeScript then you,,,
don't have to uh have to add that. All,,,
right. So back over here now instead of,,,
passing create ticket in directly we,,,
want to pass this in form action because,,,
create ticket is being used through use,,,
action state. So let's change that to,,,
form action and that should clear up,,,
that error as well. Okay. And we should,,,
still be able to submit and console log.,,,
So let's try that real quick. I'm just,,,
going to add some stuff in here with the,,,
form filler. Submit it. And we're seeing,,,
that in the,,,
console. All right. Now, I want to check,,
I want to do some form validation. I,,,
know we used the HTML required here, but,,
let's actually get rid of that for the,,,
text u for the description and the,,,
subject because I want to validate here.,,,
And I also want to use sentry to log um,,,
if you know if it's not valid or not,,,
which might not be something you do in,,,
real life because you probably don't,,,
want you know for everybody that misses,,,
a field or whatever you probably don't,,,
want that logged but just to show you,,,
how we can capture messages with sentry.,,,
So let's do a check and let's say,,,
if not subject or,,,
not,,,
description or not,,,
priority. Then I want to first of all,,,
we're going to do our return and this,,,
all of our actions are always going to,,,
return a success and a message. Okay.,,,
And that's just by design. That's that's,,,
not like you don't have to do that.,,,
That's just what I'm choosing to do uh,,,
with my with my actions and how I'm,,,
handling things. So message let's,,,
say all fields are required. Okay. Now,,,
in addition to that to returning right,,,
above it I want to use sentry. So I need,,,
to,,,
import and the way we do this is we say,,,
import,,,
all as sentry from and then at,,,
sentry/next.js,,,
JS and then I'm going to do sentry and,,,
I'm going to use a method called capture,,,
message and for that message let's,,,
say validation error colon we'll say,,,
missing,,,
uh missing ticket,,,
fields. Okay.,,,
And then when when we get our,,,
um when we get back here with the state,,,
we can use that, right? So if there's an,,
error, if success is not true, we,
probably want to show it in the form,,,
right? So why don't we add this,,,
uh let's see, we'll go right below the,,
H1 and open up some curly braces and,,,
let's say state message. So if there's a,,,
message and if not,,,
state.success, okay, then we know it's,
an error. Then we want to show let's,,,
open up some parentheses. Then we want,,,
to show a paragraph. I'm just going to,,,
give it a class of text-,,,
red-500. And let's do margin bottom four,,,
and text,,,
uh text,,,
dash center. And then in the paragraph,,,
we can just add our state,,,
message. Okay. So whatever we're passing,,,
back here or here is going to be,,,
available in this state object and I'm,,,
using that down here. So now let's fill,,,
this in, but let's leave off the,,
subject. And we get all fields are,,,
required. Now this should also have,,,
gotten logged to sentry. So I'm going to,,,
go to my sentry issues. And since it's,,,
just a regular message, it's not going,,
to show under prioritize. It's going to,,,
be under for review. And you can see our,,,
validation error missing ticket fields.,,,
And it shows the the request. So post to,,,
tickets,,,
new and it just shows the uh the,,,
breadcrumbs that lead up to it stack,,,
trace. Um now when we capture a message,,,
if we don't add uh a level manually then,,,
it's going to be info which is just,,,
that's ex just what it is. It's just,,,
like a log. It's not looked at as an,,,
error. It's not an exception. Uh it's,,,
just a simple log. Now, we can change,,
that. So, let's say we want to log it as,,
a warning, which is probably what I do,,
because it's a little more than just,,,
information. Something did go wrong, but,,
it's not, you know, detrimental. So,
let's go back to where we have our,,,
capture message. And what we can do is,,,
just add u a second argument here. And,,,
this will be these are the different,,,
levels. So, debug error fatal info,,
which is what it is by default, log and,,
warning. So, I'm going to set it to,,
warning. So, now I'll go ahead and save,,
that. And then I'm going to go back,,,
to my project here. Let's refresh that.,,,
And this time, let's leave off the,,
description. Okay. So, we get all fields,,
are required.,,,
And let's go back to,,,
Sentry and I'm just going to re refresh,,,
this. So now if I go over to my,,,
validation error now you can see that,,,
the warning the level is now,,,
warning and you can attach data to this,,,
as well which I'll get into later but I,,,
just wanted to show you that how to,,,
capture a message. Now let's do uh u,,,
we're going to use capture exception. So,,,
if something really if a there's a,,,
problem with the server. So what we'll,,,
do is wrap everything here. We're going,,,
to do this anyway is wrap this in a try,,,
catch. So let's open a try catch and,,,
just take everything that's in the,,,
function. And we'll just cut that and,,,
then put this in the,,,
try. And then what I want to do in the,,,
catch is first off our return which I'll,,,
just copy,,,
this. So we're going to return,,,
false. Okay. And then for the message,,,
let's just,,,
say we'll just say an,,,
error an error,,,
[Music],,,
occurred while we'll say while,,,
creating creating the,,,
ticket. Okay. But before we do that,,,
before the return, we're going to do,,
sentry. And now we're going to use,,,
capture exception.,,,
And in the capture exception, we want to,,
pass in the error as an error. And then,,,
we can also pass data to this. So what,,,
I'm going to do is pass an object with,,,
extra. And I want the form data to be,,,
attached to this. So let's add an object,,,
with form data. And we can get that with,,,
let's say object dot and then we'll use,,,
from,,,
entries. and then we'll pass in our form,,,
data form data,,,
entries parenthesis. Okay, so that,,
should pass the actual form data. Now to,,,
fire this off, what we'll do is just,,
temporarily throw an exception. So in,,,
the try at the very top, let's say throw,,
new,,,
error. Okay. And then I'll just say,,,
simulated,,,
um simulated Prisma,,,
error for,,,
testing. And we'll save that. And then,,,
we're going to go ahead and submit our,,,
form. Let's just uh let's just refresh,,,
this. And and we don't it doesn't,,,
matter. You don't have to leave anything,,,
off or whatever. Just submit. And we get,,,
back an error occurred while creating,,,
the ticket because when we submitted it,,,
threw this error which then called the,,,
code and the catch which returns this,,,
and that this message was put in the the,,,
output. Now this also ran so it captured,,,
the exception with sentry. So let's try,,,
let's take a look at that and let's go,,,
to issues. So now we have this in,,,
prioritize right? It's not in the for,,,
review. It's in prioritize because it's,,,
an actual error. It's an actual,,,
exception. So, let's go ahead and click,,
on that. And we see our breadcrumbs. And,,,
then we should,,,
see, let's see, down at the,
bottom right here. So, additional data.,,
We have our form data. And you can see,,,
here the subject, the priority, the,
description, and then we have these,,
action keys, action ref. So this was,,
attached to to the exception and you can,,,
attach anything you want which will,,,
obviously help you in your you know your,,,
debugging process. Now before we do,,,
anything else I want to actually be able,,,
to submit a ticket and add it through,,,
Prisma. Now there's there's a step that,,,
maybe I should have did it earlier but,,,
we need to at least do it now and that,,,
is create,,,
uh a a special file for our Prisma,,,
client. Because if we use it as is the,,,
Prisma client asis, we could run into,,
some issues because of the way that,,,
server side rendering works and the way,,,
that um platforms like Burcell work with,,,
Neon, which is serverless, uh meaning,
there's not like a continuous,,,
connection. So we don't want a case,,,
where multiple Prisma instances are,,,
being created. Basically we want to,,,
create a global instance and then reuse,,,
that unless it's not created. Right? So,,,
we wanted to check to see if there's a a,,,
global Prisma instance. If there is, use,,
it. If there's not, then create it. So,,
what we're going to do is create a a new,,,
file in the source folder or new folder,,,
rather called DB. So, source db and then,,
a file in that called,,,
prisma.ts. And then I'm going to paste,,,
this in. And you can just you can either,,,
copy it or you can grab it from the from,,,
the repo, whatever. And it's doing what,,
I said. It's bringing in the client. And,,,
it's bringing it in from the generated,,,
file rather than just at,,,
Prismaclient. So, this should match,,
whatever you have in your schema. So,,,
right here let's see for this output,,,
right so source generated Prisma so,,,
that's what you want to bring the client,,,
in from here and then we're using the,,,
global this object with it which is a,,,
global JavaScript object like window for,,,
the browser or global for NodeJS and,,,
we're just assigning that Prisma client,,,
here we're checking to see if it exists,,,
so if it does set it to Prisma if it,,,
doesn't create a new Prisma instance and,,,
we're exporting it. So from now on when,,,
we want to when we want to use the,,,
Prisma client, we want to use this.,,
Okay, we want to bring it in from this,,
file,,,
db/prisma, not from Prisma client and,,
not from the generated. So let's save,,,
that. And now go back to our ticket,,,
actions where we're going to use Prisma,,,
and we're going to import let's say,,,
Prisma and that's going to be from and,,,
then at,,,
slashdb/prisma. Okay. So again whenever,,,
you're going to use the client bring it,,,
in from here and then I'm also going to,,,
import one more thing and that's going,,,
to be revalidate ca uh not cache,,,
revalidate path from next slashcache. So,,,
that will just make sure everything's up,,,
to date. When we submit a ticket, we,,
want to make sure our list of tickets,,,
includes that new ticket. All right. Uh,,,
for certain paths. So now let's uh let's,,,
get rid of this simulated,,,
error. So get rid of that. And then,,,
we're getting the data. We're checking,,,
it. We're sending the sentry if needed.,,,
Now what I'm going to do is go right,,,
above the return in the try block and,,,
let's,,,
say create ticket. So we'll say const,,,
ticket and set that equal to,,,
await,,,
prisma. dot and then we're going to use,,,
the create method and that's going to,,,
take in an object with data and for the,,,
data we want to send the data from the,,,
form. So,,,
subject, description, and,
priority. So, that'll create the ticket.,,
Now, I want to capture this in sentry,,
when we create a new ticket. And I want,,,
to create a breadcrumb, which is uh, you,
know, a trail of how that happens. So,,
we're going to say sentry dot and then,,,
add,,,
breadcrumb. And we can pass in a few,,,
things here. So, one is a category. So,,
this has to do with tickets. So we'll,,,
have a ticket category. Let's add a,,,
message. So I'm actually going to use,,,
back ticks here because I want to,,,
include the ID. So we'll say that the,,,
ticket was created. And then we'll just,,,
add in the,,,
ticket.,,,
ID. All right. And then we can add a,,,
level as well. So remember the different,,,
levels I showed you. This is not a,,,
warning or an error. It's just a log.,,,
So, we're going to use,,
info. And then I want to capture a,,,
message. So, let's say sentry dot,,
capture message. And again, we'll just,,
use back ticks and say ticket,,,
was,,,
created su um yeah, we'll say ticket was,,
created,,,
successfully. And then we'll have the,,,
ticket,,,
ID. And then the last thing we want to,,,
do before we return success is,,,
revalidate the path. So we want to,,,
revalidate the slash tickets path, which,,
doesn't exist yet, but it will. And,,
it'll list all of our tickets. So we,,,
want to make sure that it's up to date,,,
with this latest ticket. All right. So,,,
let's try this out. I'm going to come,,,
over to new, and I'm not going to use my,,
form filler. I'm going to type in here.,,,
Let's say ticket,,,
one. This is a sample ticket.,,,
and let's make it medium priority. Let's,,,
submit. Now, I have nothing happening,,
when we submit. So, don't worry about,,
that. We'll we'll redirect or show a,,,
message or something. But let's go to um,,,
Prisma Studio. You could also use just,,,
you could check Neon directly. But if we,,,
go to Prisma Studio and reload, there it,,
is. Ticket one. This is a sample ticket.,,,
medium for the priority and the status,,,
is open by default. And we can go to,,,
neon and reload our table and you can,,,
see that our ticket is there in the,,,
database. And we can go to,,,
uh sentry and we should have under for,,,
review ticket was created successfully.,,,
And we have our breadcrumbs here as,,,
well.,,,
And of course, this is optional, but,
again, it's nice to just know exactly,,
what's happening um throughout your,,,
application. All right. So, one thing,,
I'd like to do,,,
though before we move on is create a,,,
helper function for this sentry stuff,,,
because I want to just have one function,,,
called log event. And that will add a,,,
breadcrumb and it will add either a,,,
message or an exception depending on if,,,
there's an error or not. If there's an,,,
error, it'll be an exception. If not,,
it'll be a message. So, what we can do,,
is go into source and let's see, we'll,,
create a folder here called,,,
utills. And in utils, let's create a,,
file called sentry.ts.,,,
And we want to import all,,,
as sentry from at century.,,,
Whoops. At sentry,,,
next.js. And then uh I'm going to add a,,,
type of log,,,
level. Actually, let's make that an,,
uppercase L. So type log level. Again,,,
if you're not using TypeScript, you,,
don't have to do this, but it has to be,,
either fatal or error. Oops. Or,,,
error or what's the other ones? Um,,,
warning or,,,
info or,,,
debug. Okay, so it has to be one of,,
these. And then let's export our,,,
function.,,,
And function. And I'm going to call this,,,
log,,,
event. Okay. Now, this is going to take,,
in a few things. It's going to take in,,,
the message, which will be a string.,,
It's going to take in the,,,
category, which will be a string, and,
we'll give it a default of,,,
general. Okay. Then we'll do optional,,,
data. So, the question mark just means,,
it's optional. And for the type we're,,,
going to do we're going to use record.,,,
Um so record and then in angle brackets,,,
we're going to add,,,
string and any. Now this this record,,,
means that it can be an object with any,,,
number of properties and values of any,,,
type. So this is useful for logging,,,
additional information about the event.,,,
Um for example we can log the ticket ID,,,
or the user ID. Then we're going to take,,,
a log level. The type for that is going,,,
to be the type we just created above,,,
which is log level. And I'm going to set,,,
the uh the default to,,,
info. And then we'll have the error,,,
which will be optional because it could,,,
be just a message. There might not be an,,,
error. And I'm going to give that a type,,,
of,,,
unknown. All right. So now in the actual,,,
function, we're first going to create,,
our breadcrumb. So sentry.add add,,,
breadcrumb and then we're going to pass,,,
in an object with the category. So this,,,
stuff is all going to come from the the,,,
arguments. So category, the message, the,
data, and the,,
level. Okay, it may or may not have an,,
error. And then let's see. Um oh, you,,
know what? This should just be level,,,
like that. So we got our breadcrumb.,,,
Then we want whether it's going to be,,,
capture message or capture exception,,,
depends on if there's an error. So let's,,,
say if there's an,,,
error then we want to call,,,
sentry capture,,,
exception and pass in the error and then,,,
any extra data. So remember we can do,,,
this extra and then pass in our,,,
data and let's say else if it's if,,,
there's not an error then we want to,,,
just capture message. So capture message,,,
pass in message and pass in the level,,,
and that's it. Okay. So make sure that,,,
uh that this function is being exported,,,
so that we can use it and we'll close,,,
that up. And now we can use this in,,,
place of a lot of the stuff we did here.,,,
Just kind of clean it up a little bit.,,,
So in this right where we check for the,,,
fields instead of doing the capture,,,
message, let's get rid of that. And,,
let's say actually we have to bring in,,,
log event. So just make sure you bring,,,
that in right here. Import from utils,,,
sentry. Then we're going to log event,,,
and let's pass in the message which is,,,
going to be validation,,,
error colon and uh we'll say,,,
missing missing ticket,,,
data or not yeah we'll say missing data,,,
fields and then the second thing we're,,,
going to want to pass in is the category,,,
which is going to be,,,
ticket. Okay. Then we want to pass in,,,
the data which I'm going to pass an,,,
object with the subject, the,,
description and the,,,
priority. And then after that we want,,,
the level which is going to be in this,,,
case,,,
warning. Okay, so hopefully that makes,,
sense. So passing in the message, the,,
category, the data and the level and,,
that's going to you know it's going to,,,
call our log event which we just,,,
created. So now let's come down here,,,
where we do the breadcrumb and the,,,
message and we can replace both of,,,
those. So we'll get rid of that and then,,,
we can just do our log,,,
event and we'll pass in a message. I'm,,,
going to use back tick and say,,,
ticket,,,
created,,,
successfully and let's add the ticket,,,
ID. So ticket ID and then after that we,,,
want the category which is ticket. After,,,
that we want the data which I'm going to,,,
do ticket ID. set that to ticket id and,,,
then the level which we'll do,,,
info. Okay, so that'll log that. Then,,
let's come down to the,,,
uh where we do the capture,,,
exception and the way that we for we,,,
created it we can do log event for,,,
exceptions as well. So let's say an,,,
error,,,
occurred while,,,
creating the,,,
ticket. Okay. So that's the that's that.,,,
Then we want the category. So ticket.,,,
Then we want the data which again I'm,,,
going to do the form entries or form,,,
data. So an,,,
object and let's do from entries. And,,,
then we can pass in the form data dot,,,
entries. Okay. And then we want to pass,,,
let's see after that object. So, comma,,
here we want to pass in the level which,,,
is going to be an error. And then we,,,
want to pass in the error,,,
itself. Okay, which comes from here.,,
So now we can use just this one function,,,
we can use to add the breadcrumbs,,,
capture the message, um capture the,,
exception, add categories and all that,,
stuff. All that good,,,
stuff. Okay. So now let's just try this,,,
one more time. I'm going,,,
to first,,,
off try to do it without a field. So,,,
that that should throw an error or a,,,
warning rather. And then let's create,,,
another ticket. Let's say,,,
ticket ticket,,,
two. This is a,,,
sample ticket. And then I'll do low,,,
priority,,,
submit. All right. So now if we go,,,
back to,,,
Sentry should,,,
see should see created and sometimes it,,,
takes I've seen it take up to like a,,,
minute or,,,
so but we should see the next ticket.,,,
Let's just make sure it was actually,,,
submitted. So let's go to Prisma Studio,,,
and reload. Okay, so ticket two was,,
created.,,,
And there it is. So ticket created,,,
successfully and we can see it has an ID,,,
of two. So it took about 30 seconds to,,,
to be able to show up. So now I want to,,,
make it so that it redirects when we,,,
submit a ticket. So what we can do is,,,
we're going to do this in the in the,,,
page or the component, not the action,,
because the action is always going to,,,
return an object with true um not true,,,
but success and message. So what we'll,,,
do is come back to the the page. So this,,,
is the new page and I want to bring in,,,
use,,,
effect and basically we we want to check,,,
that success option right and if that,,,
changes then we want to redirect because,,,
when we get a a response back that it'll,,,
send a success message or not a success,,,
message but a,,,
value. So uh let's see we also want to,,,
bring in the use router hook. So let's,,,
import say use router and that's going,,,
to be from next navigation not from next,,,
router and then we'll go right above the,,,
return. Let's add our use effect and I'm,,,
assuming that you know how use effect,,,
works. Um we're going to pass in our,,,
dependency array and we want to look at,,,
the,,,
state.success or the router. So if,,,
either of those changes and I didn't,,,
initialize the router which we have to,,,
do. So let's say const router set that,,,
to use router. Okay. So if either of,,,
those changes then whatever I put in,,,
this use effect is going to run. And,,,
what I want to put is first of all just,,,
check for if,,,
state.success and then we want to,,,
redirect. So router.push,,,
push and we want to redirect to slash,,,
tickets. Okay, so I'm just going to,,
refresh this tickets new. And now if I,,,
submit a new ticket, so ticket,,
three, this is a sample ticket. And then,,
if I submit,,,
that, I get redirected to slash tickets,,
which of course doesn't exist yet. So,,,
let's create that. Now, we already have,,
in our app folder, we already have a,,
tickets folder with the new folder, but,,
we want to create a page.tsx directly in,,,
the app tickets folder. So let's create,,,
page.tsx. Let's do sfc.,,,
And let's call,,,
this tickets,,,
page. And for now, we'll just say,,
tickets. So that should,,,
render. All right. Now, before I add,,
anything to the tickets page, I want to,,
add a uh a toast notification when we,,,
submit a new ticket. And I'm going to,,,
use a package called Sauner. Sauner.,,,
Soner. It's s o n ne. And I've been,,,
using this lately. um rather than React,,,
Toastify, but you could use that if you,,
want to. I mean, they all do kind of the,,
same thing. But let's go to a terminal,,,
and I'm going to npm install s,,,
ner. Okay. And in order to use this,,,
we're going to add in our layout. So, if,,
you go to your layout tsx file, we're,,
going to import the,,,
toaster. So toaster from,,,
sauner and let's see we're going to go,,,
right,,,
under children. So right here and we're,,,
going to add,,,
toaster like that. And then I'm going to,,,
just add a position. And you can go to,,,
the documentation to see like the,,,
different attributes and positions and,,,
stuff. I'm going to do top center. Okay.,,,
So now we have an output for our,,,
toaster. Now let's go back into the new,,,
page. Right? So this is the new ticket,,,
page and we're going to import,,,
toast. So import toast,,,
from,,,
from,,,
sauner. Okay. And then all I'm going to,,,
do is go to the use effect. So, right,,
before we redirect, we're going to say,,
toast,,,
dot,,,
success and let's say um we'll say,,,
ticket,,,
submitted,,,
successfully. And yeah, that should do,,
it. So, I'm going to save that. And,,
let's change this title, this create,,
next app. So that's going to be in the,,,
layout.,,,
So where is it? Yeah, right here. Let's,,
change that,,,
to say,,,
quick ticket,,,
support and let's say get support for,,,
your product or whatever you want to,,,
put. Anything's better than create next,,,
app. Okay, so let's try this out. I'm,,
just going to put some dummy data and,,,
submit. And there we go. Tickets,,,
submitted successfully. So it shows the,,,
toast and then it goes away after a few,,,
seconds. Now before we actually work on,,,
this page, the tickets page, I want to,
move, like I said,,
earlier, I want to move the form from,,
the the new page here because I don't,,,
want this to be client uh client,,,
rendered. I want this to be server,,,
rendered and I think it's just better,,,
organization. So why don't we create a,,,
new file? And you you could put this in,,,
a components folder, but the way I like,,
to do this is if the form is is, you,,
know, so attached to the page and we're,,
not using this form anywhere else, I'm,,
going to put it in the the new folder,,,
next to the page. So I'll create a new,,,
file here and let's call this ticket. Uh,,,
we'll say,,,
ticket-form.tsx. All right. And then I'm,,,
basically going to just copy everything,,,
from the page.,,,
paste this in here and then I'm going to,,,
change the name. So, new ticket page,,
here and here at the bottom we're going,,,
to change to new ticket,,,
form. Okay, so change the name of that,,
and let's see, we're going to basically,,
keep all,,,
this.,,,
Um, so we have our use,,
[Music],,,
effect, and let's see what I don't want,,
to keep is this this div here. Let's get,,,
rid of this top div in the ticket form.,,,
So, right here, I'm going to delete,
that. And then, of course, we got to,
delete the ending,,,
div. Okay. So, we'll get rid of that.,,
And I think that's really all we need to,,,
do. everything else is is uh you know,,,
encapsulated in this this file. So let's,,,
save that and go back to our page. And,,,
now uh I'm just going to I'm just going,,,
to get rid of this whole thing. Let's,,,
regenerate this. So new new ticket page.,,,
And then what we can do is bring,,,
in is bring in the new ticket,,,
form, right? And let's see. I'm,,
gonna I want that wrapping div. So,,,
let's do some classes here. We're going,,,
to do,,,
min-h,,,
screen. And what else do we have? BG,,,
dash blue,,,
50 flex,,,
uh items dash,,,
center justify dash center and,,,
px-4. Okay. Okay. So, we have that,,
wrapping div. And then in there, we can,,
put the new ticket,,,
form. All right. So, let's save that.,,
Let's try to go to slash ticket slash,,,
new and then we should see our form. So,,,
the page itself is server rendered, but,,
then we're putting in a new ticket form,,,
which is client side. So, now we want to,,
work on getting the tickets and we're,,,
going to have an action for that. So,,,
let's go into our ticket,,,
actions and we'll go down to the bottom,,,
here and let's say,,,
export or export async function and,,,
we'll call this get,,,
tickets. Okay, we're going to add a try,,
catch and we're going to use Prisma,,,
here. So let's say con,,,
tickets and set that to,,,
await and we want prisma dot ticket dot,,,
and we're going to use the find many,,,
method and I want to order by the date.,,,
So we're going to pass in here order,,,
by and we want to set let's say created,,,
at that's the field we want to use and,,,
we want it to be descending.,,,
So that will get our tickets and then,,,
let's do a log,,,
event for sentry. So just log event pass,,,
in fetched fetch ticket,,,
list. And this is totally optional. And,,,
if you want to pick and choose some of,,,
this stuff to log, you can. Um I'm going,,
to pass in here the,,,
count of tickets. So we can get that,,,
with tickets.,,,
length. So that'll be the extra data.,,,
And then let's make it an info,,,
level. Okay. And then we just want to,,,
return the,,,
tickets. And then if there's an error,,,
let's log,,,
event. And we'll say,,,
error fetching,,,
tickets. And let's do the category of,,,
ticket. And I'm not going to send any,,,
data. So I'll just put an empty object.,,,
The level is error. And we want to send,,,
the actual error. And then what I want,,,
to return is just an empty,,,
array. And that's it. So that should get,,,
our tickets. Now we want to use that in,,,
our ticket page. So let's go to our app,,,
folder tickets and then,,,
page.tsx. And then from here we're going,,,
to bring,,,
in let's say import. We want to bring in,,,
that action. So get,,,
tickets. And then we're going to also,,,
bring in our log event,,,
utility. And then let's bring in,,,
link. Okay. And then we're going to come,,,
down into our function here. And we want,,,
to use that action. So we can just,,,
simply say get uh const and,,,
then tickets set that to,,,
await get tickets and we do have to make,,,
this,,,
asynchronous. Okay, so that'll get our,,
tickets and we can do a quick console,,,
log. I don't know why that's not,,,
working.,,,
So, console log of the tickets just to,,
make sure that that we're getting them.,,,
So, I'm going to go to,,
slash,,,
tickets.,,,
Oops. All right. And we should see that,,,
down,,,
here.,,,
Yep. So, there we go. We know that we're,,
getting them from our action, which is,,
good. So, let's get rid of that console,,
log. And then down here,,,
um, we're going to make this a div. And,,
let's give it some classes. We're going,,,
to do a min h screen bg,,,
dash blue 50. And let's do a padding,,,
padding of eight all around. Okay, let's,,
get rid of that. And then I want to have,,,
an H1. So we'll do text 3XL. Let's do,,,
font dashbold text,,,
blue,,,
600 margin bottom eight and let's do,,,
text dash center. And then in the H1,,,
we'll just say,,,
support,,,
tickets. Okay, let's see if that shows,,
up. There we go. Support tickets. I just,,,
want to make this smaller. Okay. Now,,,
under that H1, I want to,,
check to see if there are any tickets,,,
first. So what we can do is say if the,,,
tickets.length. So if that is equal to,,,
zero, then we'll show something else.,,
We'll show something else. So if it's,,,
equal to zero, then I'm going to have a,,
paragraph with let's say text dash,,,
center. Let's do text uh text dash gray,,,
600 and we'll just say no tickets,,,
yet. Okay, so that's if there's no,,
tickets. And then here in in these,,,
parentheses, if there are tickets, then,
we're going to have a class of let's do,,,
space dash on the yaxis 4. We're going,,,
to do a max width. So, max,,
W3XL and let's do margin on the X axis,,,
auto and we'll close that sidebar up.,,,
So, in here we want to take our tickets,,
and we wan",,,
t to create a list. So, we,,
want to map through those. So,,,
tickets.map pass in our function and,,,
we'll say for each ticket then we want,,,
to render some JSX. So open some,,,
parenthesis. We'll have uh a div. Let's,,,
do a class of flex. We'll do justify,,,
dash between. Let's do items items dash,,,
center. Background is going to be white.,,,
And I want some rounded corners. So,,,
rounded large. We'll do a shadow. We'll,,,
do a border. And let's do a border,,,
dash gray dash two uh 200 and padding,,,
six. Okay. So in this div um actually,,,
you know what we got to give this a key,,,
because it's a list. So for the key I'm,,,
going to use the ticket,,,
id. All right. And then just going to,,,
put a comment here. So we'll have the,,,
left,,,
side and we'll have the right side.,,,
Okay. So, for the left side, uh, we're
just going to have a div. And then in,,,
that, we'll have our,,
H2. Let's say,,,
text-XL for the size. And then font,,,
dash,,,
semibold. And let's do a text blue,,,
600. And this is going to be the ticket,,,
subject. So, we're going to say,,
ticket,,,
subject. See if that,,,
renders. There we go. Good. So, we see,,
all the,,,
subjects and then and that's all I want,,,
on the left side. So, the right side,,
let's do text dash write class. And,,,
let's add some space. So, space on the,,
yaxis too. And then let's have a div,,,
with text dash small and text dash gray-,,,
500,,,
And I want the,,,
priority. So we'll say priority. And,,,
then here I want to have a span. So,,,
we'll do a span with,,,
um actually we'll do the class after,,,
because I actually want it to be a,,,
dynamic class where it's a different,,,
color depending on the priority. But for,,,
now we'll just,,,
add ticket,,,
priority. Okay. If I save that, there we,,
go. We see the the different priorities.,,,
And then we want also want a link to go,,,
to the single individual ticket page. So,,,
that's going to go under this div, the,,
div that wraps the priority. And let's,,,
add a link. And this is going to be,,,
let's say href use some back ticks here.,,,
Uh well back ticks in curly,,,
braces. And that's going to be slash,,,
tickets. So slash tickets slash. And,,,
then we want the ID. So,,,
ticket.,,,
ID. And I also want to just add some,,,
classes on the this link. Let's uh let's,,,
close,,,
it. And it'll just say view,,,
ticket. Okay. Now, as far as the classes,,
go, I'm just going to grab them because,,
there's quite a,,,
bit. Okay. So, those are the classes.,,
Let's take a look.,,,
Okay, there we,,
go. Good. Now, again, I want to just,
make the priority a certain color. So,,,
I'm going to have a little helper,,,
function. I'll just put it in this file.,,,
So, I'm going to put it right here.,,
We'll say const and let's call this get,,,
priority class, which will take in,,
priority, which is going to be a,,
string. Okay. And uh Whoops. Get a,,,
set. Okay. And then I'm just going to,,,
use a switch,,,
here. So for the switch, we want to test,,
the,,,
priority. And let's say if there's a,,,
case of it being,,,
high, then,,
uh whoops, what am I doing?,,
case,,,
high. Then we want to return a class of,,,
text-,,,
red-600. And I'm also going to just add,,,
font,,,
dashbold. And then let's do a case where,,,
it's,,,
medium. Then we'll,,,
return let's say text dash yellow. Yeah,,,
we'll do yellow,,,
600 font,,,
bold. And then we want a case of,,,
low. And if it's low, we're going to,,
return text dash,,,
green-600 and font bold. All right. So,,,
we have our get priority class. Now, we,,
want to use,,,
this down,,,
here. So let's see. We want to use it on,,,
the span. So right here on the span, I'm,,
going to give it a class name. And that,,,
class name is going to be set to it's,,,
going to be dynamic. And it's going to,,,
be set to get priority class. And then,,,
we'll pass into that the,,,
ticket.,,,
priority. So if we save that now, you,,
can see the different colors. Okay.,,,
Okay. So, we have medium, low, right?
There's no high. I guess we can we can,,,
go to slash,,,
new. Create a new ticket. Uh, I'll just,,
say new,,,
ticket. This is a test. And we'll choose,,,
high. Submit. And there we,,,
go. So, yeah, this is starting to come,
together. Now, the next thing I want to,,
work on is the single ticket page. If I,,,
click on the view ticket, it takes me to,,
the route ticket slash and then the ID.,,,
So that's what we'll work on next. Now I,,,
I usually like to start with the action,,,
first. So let's create an action that,,,
will get an individual ticket. So let's,,,
export a function down here. So,,,
export async function and we're going to,,,
call this get ticket by ID.,,,
And it's going to take in an ID which is,,,
going to be a,,,
string. And then first thing we'll do,,,
let's add a try catch. And then we want,,,
to get the ticket using Prisma. So we'll,,,
say ticket set that to await on,,,
Prisma. And we're going to use the find,,,
unique,,,
method. And in find unique we're going,,,
to pass in an object. We want to find,,,
where the ID is equal to the ID. Now I,,,
want to uh cast this as a number. So I'm,,,
going to wrap,,,
this in number like that. All right. And,,,
then we'll check for the ticket. So,,,
we'll or check if not,,,
ticket. So if not ticket then I want to,,,
log a sentry event. So we'll call log,,,
event. And let's pass in a message.,,,
which will say that the,,,
ticket so ticket not,,,
found we'll give it a category of,,,
ticket and let's give it let's attach,,,
some we'll attach the ID so,,,
ticket ID set that to the ticket do ID,,,
and then we'll give it a warning,,,
type all right uh let's,,,
see oh I'm sorry this should not Ticket,,,
ID is just ID because it's getting,,,
passed in,,,
here and then we just want to return the,,,
ticket. Now in the catch I want to log,,,
event and I'm going to just say error,,,
fetching ticket,,,
details and we'll give it the category,,,
of ticket. We'll give,,,
it for,,,
data ticket ID which is going to be,,,
ID and the level is going to be error,,,
and we want to pass the actual error and,,,
then we want to return,,,
null like,,,
that. So for the page right so we need,,,
to create a page for an individual,,,
ticket. Now this is a dynamic route. So,,,
what we can do is go into tickets right,,,
because we want it to be for instance,,,
slashtick slash one which would be the,,,
ID of one. So we create a folder in,,,
tickets and we use brackets and then,,,
call it ID right so that's the name of,,,
the folder brackets ID the brackets just,,,
signifies that it's dynamic and this,,,
could be anything and then in that we,,,
have our page.tsx,,,
tsx. Okay. And then we're going to call,,,
this uh let's do,,,
sfc. Let's call,,,
this we'll call it ticket details,,,
page. And then for now we'll just say,,,
details. And then this should load if,,,
you go to ticket slash and then an ID,,,
like five or whatever. Okay. If I go to,,,
slash one that should still work.,,,
So we want to bring our action,,,
in. So up at the top here, let's import,,
get ticket by ID. Let's import our log,,,
event,,,
utility. And let's import link from next,,,
link. And then I want to also import not,,,
found. Um, so let's say not found and,,
that's going to be from next navigation.,,,
Okay. So it'll just load the 404 if we,,,
call that. And then I'm going to,,,
um we're going to have the same colors,,,
for the priority. So we can actually,,,
copy,,,
from let's see from this page the,,,
tickets page this get priority class. We,,,
could put this in I guess we could put,,,
this in a separate file rather than,,,
repeat ourselves. Yeah, I guess we could,,
do that. Why don't we just let's cut it,,,
and we'll we can put it in our utils.,,,
So, let's say utils. We'll create a new,,
file here. And I'll just call it uh,,,
we'll call it,,,
UI.ts just for little UI things like,,,
this. Okay. And then I'm going to paste,,,
that in. Let's export,,,
it. Okay. And then we'll bring that in,,,
here. This is the tickets page. So,,,
import what is it? Get priority,,,
class. And then we want to bring it in,,,
to this as well, our,,
ID. Okay. Now, we can use that when,,
needed. So, let's see this,,
um the ticket details page. we have to,,,
get the ID from the URL, right? So, if,
it's one, we have to be able to get,,
that. And the way we get that is by,,,
passing in uh first of all, let's make,,
this async and then we're going to pass,,,
in let's say,,,
props and it's going to be,,,
params. The type will be a promise and,,,
it'll be in brackets. It's going to be,,,
an object with ID which will be a,,,
string. Okay. And then we can dstructure,,,
from that. Let's say const from the,,,
params. So props params. We can,,,
dstructure the ID. So we're going to get,,,
that from and then await,,,
props params. That should give us the,,,
ID. In fact, we can test that out by,,
coming down here. Let's say details. And,,,
then I'll just,,,
add ID like that. And we should,,,
see details one. If I go to details /2,,,
then we see the two. Okay. So that's how,,,
we can get uh the ID that's in the URL.,,,
Now we want to get the ticket by using,,,
this action which takes in the ID. So,,,
right under that let's say,,,
const set that to await and then,,,
get ticket by ID and pass in that ID.,,,
And if it's not found, so let's say if,,
not,,,
ticket, then we're going to call not,,
found. Okay, so it'll just it load the,,
the default not found page. And then I,,,
also just want to,,,
log event and let's say,,,
uh viewing ticket,,,
details. Again, you don't have to do,,
this stuff. I'm just trying to get you,,,
comfortable with logging stuff to,,,
Sentry. just so you have it you know all,,,
the events that are happening. So ticket,,,
um let's add the ID as well. So ticket,,,
ID set that to and this time it is,,,
ticket,,,
ID and then we'll have info as the,,,
level. So now we want to obviously,,,
output the data. So, I'm going to copy,,
the JSX because it's mostly just uh just,,,
static, you know, tags and classes. So,
let's see. We'll,,,
return in parenthesis. I'll paste that,,,
in. Save it. See what that looks,,,
like. Okay. So, pretty simple. Uh we,,
just have a couple divs. An H1. The H1,,,
has the,,,
subject. And then we have the this div,,,
with an H2 for the description uh,,,
description label and then a paragraph,,,
with the actual description. We have our,,,
priority using the get priority class to,,,
color it. Then we have the date the,,,
created at,,,
um and then we have a link to go back to,,,
tickets. Okay, so that's ticket two. If,,
I go to ticket three, we see ticket,,
three. So pretty simple.,,,
So, next thing is the navbar because,,
right now there's not there's no way for,,,
me to get back to like the the submit,,,
page or the create page without typing,,,
it in the URL. So, we want to have some,,
kind of navbar. Also, when we start to,,
implement authentication, we need a,,
login link, a register, uh a logout,
link. That stuff's all going to go in,,,
the navbar. So, what we'll do is create,,
in source. I don't believe we have a,,,
components folder yet, do we? No. So in,,
source, I'm going to create a folder,,
called components. And this is for UI,,,
components that you know are are common,,,
and don't have anything to do with,,,
specific pages. So let's create a file,,,
here. We'll call it,,,
navbar.tsx and,,,
sfc,,,
navbar. Okay. And just for now, I'm just,,
going to just say nav. And where we're,,,
going to want to put this is in the,,,
layout because I want it on every single,,,
page. So, let's go into our app folder,,
and then the layout,,,
file. And then from here, I'm going to,,
import the,,,
navbar. And I'm going to put this just,,,
above the children line. So, right here,,
within the body. Let's say,,,
navbar. Save. Excuse me. Save that. And,,,
we should now see nav no matter what,,,
page we're on. So if I go to ticket,,,
slash new, we still see that nav. And,,
the nav stuff for now I'm just going to,,,
paste in because it's it's just links.,,,
So let's go into the return,,,
here. Put some parenthesis and I'm going,,,
to paste this in. Okay, we need to bring,,
in,,,
link. So up at the top, let's import,,
link from next link. And if we save,,,
that, we should see that render at the,,
top. Okay. Now this is all squished,,,
together on small screens. But later on,,,
when we have authentication, all of this,,
will not show at the same time. Right?,,,
If we're not logged in, then log out's,,
not going to show. These two links,,,
aren't going to show. If we are logged,,,
in, then register and login are not,,
going to show. So, even on small,,
screens, everything will fit. If you,,
wanted to to create like a hamburger,,,
menu, you could do that, but I don't,
want to really waste time on that,,,
because that's kind of not really what,,,
what this is about. Um, this is kind of,,
beyond that. So, I don't want to deal,,
with hamburger menus. It's going to look,,,
good when after we implement,,,
authentication, which is actually what I,,
want to do next. So, with,,
authentication, you have a lot of,,
different options. You can use something,,,
like next off which is very popular. Um,,,
you could use a library like Ozero,,,
um clerk. So these are are really great,,,
libraries but I wanted to do this kind,,,
of in just a custom authentication flow,,,
using JSON web tokens rather than using,,,
a library. U I think that that stuff is,,,
is fun to do. Uh and it's not this isn't,,,
going to be very difficult. We're going,,,
to use a package called Jose, which,,
allows us to, you know, create and sign,
JSON web tokens. It's very similar to,,,
the JSON web token library or package.,,,
So, we're going to use that. We're also,,
going to use brypt to encrypt our,,,
passwords and we'll be dealing with,,,
cookies as well. Um, because we'll have,,
the the JSON web token stored in an HTTP,,,
only cookie. So, let's get started with,,
that. All right. And first thing before,,,
we do anything to do with,,,
authentication, we need a user table. So,,
we're going to go back to our Prisma,,,
schema. All right. So Prisma schema. And,,,
if if you have these comments, you can,,
get rid of,,,
these. So we have our ticket model. Now,,,
we need to create a user model. But we,,,
also need to create a relationship,,,
between users and tickets. So let's go,,,
above ticket and let's create a model,,,
called user.,,,
All right. And then we're going to have,,,
an ID, which is going to be a,,
string. I want this to be the primary,,,
key. So I'm going to say at ID. And then,,,
for the default, I'm not going to pass,,
in auto increment. I actually want to,,,
pass in CUID, which is a what does this,,
stand for? It's collision. I think it's,,,
collision resistant unique identifier.,,,
So it'll generate uh a long random,,,
unique string uh that'll have numbers,,,
and letters and it's it's more secure.,,,
So that's why I'm using it for users.,,,
And I'm just using regular auto,,,
increment for tickets. And you could do,,,
auto increment for users as well, but I,,
think that this is a better idea. So,,,
we're going to do that for for users.,,,
And then let's add an email, which will,,
be a string. And I want emails to be,,,
unique. So we're going to add on to that,,,
unique. Then we have the name which will,,,
be string and names are going to be,,,
optional. So I'm going to put a question,,,
mark here. And then we get the password,,,
which will be,,,
string. Then we have the created at,,,
which will be a date time and let's do,,,
the default for,,,
now. All right. Then we have our updated,,,
at which is going to be date time and at,,,
updated at. Okay. Now we need to create,,,
a relationship between users and,,,
tickets. So the way we do this is down,,,
here in the ticket model we're going to,,,
add two things. One is going to be a,,,
user ID field which is going to be a,,,
string. And then we want to add user.,,,
And this is where we're adding the,,,
relationship. So here for the type we're,,,
going to say user uppercase u and we,,,
want to add onto this at relation and,,,
then pass in fields and for this fields,,,
we want to add in the user ID and then,,,
the reference to to to the field in the,,,
other table which is going to be the ID.,,,
So references ID. Okay. Okay. So, what,,
we're saying is that this user ID field,,,
in this table is going to reference the,,,
ID in the user table. Now, there's a red,,
line here because one other thing we,,,
need to do is in the user, we now need,,
to reference tickets and set that to,,,
ticket with brackets because it's it's,,,
going to be an array. Okay, so that's,,
how we create a relationship between,,,
users and tickets.,,,
Uh, one thing I want to do is just,,
delete any tickets that we have in there,,,
right now. So, I'm going to go to Prisma,,
Studio. And I'm going to just reload,,,
that and just delete all,,,
these. Okay. So, if we were to go,,
back to,,,
tickets, we see no tickets,,
yet. All right. Now, in order for any of,,
this to to matter to to be, you know,,
updated in the database, we have to run,,
the migration and generate the client,,,
again. So, I'm going to stop Prisma,,
Studio because sometimes that can that,,,
can interfere. And then I'm going to,,,
stop the the server and then we're going,,,
to do,,,
npx and let's say mig uh Prisma. So, npx,,
prisma,,,
migrate dev and then,,,
d-name and let's say add user model. So,,,
we're just giving a description of what,,,
we're doing. And let me just double,,,
check this before I actually run,,,
it.,,,
So, yeah, I think that that should be,
good. So, let's run that.,,
And what that should do is update the,,,
database where it'll create the user,,,
table and uh update the ticket table as,,,
well and add the user ID. And we can,,,
check that out. So let's go to,,,
uh we can go to Prisma Studio. Oh, let's,,
oh, you know what? We'll check it after.,,
We can check it in neon real quick. So,,,
if I reload the neon,,,
tables, there we go. So we got our,,
ticket and we should have a user ID,,,
field. Yep. Or user and user ID. And,,,
then we have the user table as well. All,,,
right. So now we want to generate. So,,,
npx prisma,,,
generate. All right. So that looks good.,,,
Now I'm going to run npm,,,
rundev here. And then I'll run prisma,,,
studio in this one.,,,
So now you can see here all models we,,,
have both ticket and,,,
user. All right. So we can see both of,,,
those. Good. Now we can continue on with,,,
our authentication. So there's a few,,,
dependencies that we need to install. So,,,
let's say npm install. We want,,,
bryptjs. So that's to to encrypt,,,
passwords. Jose for our JSON web tokens,,,
and,,,
cookie. All right. Now, we need to have,,
uh some kind of secret to sign our,,,
token. So, that's going to go in thev,,
file. So, let's open that,,
up.,,,
Env secret. Now, I mean, you can set,
this to whatever you want, but we can,,
generate a random key that's 32 bytes,,,
long with open,,,
SSL,,,
rand-base,,,
6432. Okay. And then I'm just going to,,,
grab that and I'm going to use that as,,,
my O secret. But, uh, again, that could
be anything. Now, I just want to go over,,
a couple things real quick in some,,,
slides. So, we're using JSON web tokens.,,
And if you're not familiar with them,,,
they're a compact URL safe means of,,,
representing claims to be transferred,,,
between parties. And it's formatted as a,,,
long string with three different parts.,,,
And those three parts are a header,,,
which says it's a JWT and also specifies,,,
the algorithm it uses to sign it. The,,,
payload, which is your your user info or,,
any data, you can encrypt any data into,,
a JSON web token. and then the signature,,,
which is a special hash to make sure,,,
that it hasn't been changed or tampered,,,
with. Okay. And if to give you an,,,
example, if we go to the,,
jwt.io website, there's an example here.,,
So this is what a token looks like and,,,
it highlights in different colors the,,,
different parts. So again, the first,,
part is the header has the algorithm and,,,
the second is the payload. So in this,,,
case like the name is encrypted in,,,
there. um the issued at date and then,,,
the signature. So that verifies it,,,
hasn't been tampered with. So that's,,,
what what the token actually looks like.,,,
Now to give you an idea of the,,,
authentication flow that we're using,,,
we're going to log in with our,,,
credentials, right? So we have a form,,
where it's going to match our our,,,
database uh email and password,,,
encrypted password of course, and we'll,,
have a register page as well. And then,,,
the server checks those credentials. it,,,
matches them. Um, if it fails, obviously,
we set have an error message and they,,,
can't go any further. Then if it does,,,
pass the credentials, then it stores the,,
token. It'll sign and create the token,,,
encrypt the data, and store it in a,,
cookie. And you could also store it in,,,
local storage. Then you're going to have,,,
that cookie on the client, and you send,,
it with future requests. And then when,,,
you send it, the server verifies the,,
token to make sure that it's not altered,,,
or anything. and it can see the,,,
encrypted data which in most cases is,,,
going to be uh at least your user ID so,,,
it knows who you are through that token.,,,
So that's our authentication flow. Now,,,
in order to do this we're going to have,,,
some low-level functions that we create,,,
and some higher level functions and,,,
actions. So our low-level functions are,,,
going to be sign off token which is,,,
going to generate encrypt and sign the,,,
token with that secret that we just,,,
created. verify O token which is going,,,
to decrypt and verify the token. So when,,,
you send it, it'll get verified. And,,
then set O cookie is going to store that,,,
token in the cookie. Get OC cookie will,,,
get the token from the cookie. Remove,,,
off cookie will remove the token from,,,
the cookie. So pretty simple, but these,,
are the low-level functions. Now the the,,,
higher level functions and most of these,,,
are going to be actions are going to be,,,
register user which is you know these,,,
are pretty self-explanatory. It's going,,,
to create a user login user which is,,,
going to authenticate the user with the,,,
credentials. Uh log out user we'll call,,,
that remove o token actually I think,,,
it's remove off cookie but we'll we'll,,,
fix that. Uh that clears the user and,,,
then get current user is going to get,,,
the logged in user. So if you want to,,,
obviously view your tickets, it needs to,,
know what user is logged in and that,,,
happens because you lo you authenticate,,,
the user that ID gets put into the token,,,
and then that cookie has that has the,,,
token gets sent to the server on every,,,
request and it validates the user and,,,
then you can return it in this function,,,
and do what you want with that user. you,,,
know, show their tickets or submit a,,
ticket from them or or whatever it might,,,
be. All right, so let's start off with,,
the low-level functions. And they're,,,
they're not huge functions, so we should,,
probably just create them all now, and,,
then we can just use them. We don't have,,,
to deal with going back into the file.,,,
So, I'm going to put this in, let's see,
I mean, you could put this in a number,,
of places. I want to have a lib folder,,,
because this is kind of like like an,,,
authentication library almost. So in,,,
source, let's create a new folder called,,
lib. And then in that I'm going to,,,
create a file called,,,
o.ts. Now there's a few things we need,,,
to import here. So from the Jose library,,,
we're going to want sign,,,
JWT and we also want JWT verify which,,,
they do just that. that signs the token,,,
and verifies the token. And then we're,,,
going to import cookies. Now, I think I,,
installed the cookies package, but I,,
don't think we're going to need that,,,
unless I installed it for another,,,
reason. I forget. Well, if if I did did,,
we'll get to it. But, um, we can bring,
in cookies from next headers. Okay,,,
because we're on the server side. And,,,
then let's import the log event from our,,,
Sentry utility. And then for the secret,,,
that's in the thev file, I'm going to,,
put that in a a variable. But in order,,,
for Jose to work with that, we need to,,
encode it in uh a certain format in uh,,,
unit 8 array format. So we're basically,,,
converting it to bytes. And we can do,,,
that with the text encoder function.,,,
So we're going to say new text encoder,,,
and then dot encode and then we can pass,,,
in our off secret which we can get from,,,
process.env because it's in thev file,,,
and then oc secret. Okay, so we're going,,
to need that in order to sign it. And,,,
then I'm also going to put the cookie,,,
name here because we're going to use it,,,
in a few different places. So cookie,,,
name I'm just going to call O- token. So,,,
when the when the cookie gets put on,,,
your browser, that's what it'll be,,
called. And now we can start to create,,,
our low-level functions. So let's uh and,,,
we're going to export them all. So we'll,,,
say export, and this is going to be,,
async function, and we're going to call,,
this,,,
sign sign off,,,
token. Now, this is going to take in a,,
payload, which is the data that we want,,
to encrypt. And for now, I'm just going,,
to use any as the type. And then let's,,,
do a try,,,
catch. And I'm going to close that up.,,,
So in the try, we want to create and,,
sign our token. We can do that with the,,,
sign JWT function that we brought in,,,
which is asynchronous. So we want to uh,,,
let's see, we want to equals await. And,,
then we're going to say,,,
new s uh sign JWT. Whoops, got that.,,
Sign JWT.,,,
and that that takes in the payload.,,,
Okay, because we're encrypting that,,
payload into the,,,
cookie. Then we're going to call set,,,
protected header and the algorithm that,,,
we want to use. So we're just going to,,,
use the H,,,
uh,,,
HS,,,
256,,,
algorithm. And then we want to also set,,,
the issued at. So let's say set issued,,,
at. That'll give it uh a field called I,,,
IAT. So issued at which will be the just,,,
a time stamp of when it was issued. And,,,
then we also want the expiration. So,,,
that'll be set expiration time. And you,,,
can set it to whatever you want. I'm,,,
going to say 7D, which would be 7 days.,,
And then we want to the last thing we,,,
want to do is sign it. So dot sign and,,,
we sign it with the,,,
secret. Okay. So that will create the,,,
token. And then we simply want to return,,,
the token from this function. And then,,,
if there's some something goes wrong,,,
then we're going to log that,,,
event. And let's say,,,
token token signing,,,
failed. And for the category, we're,,
going to say off. Okay, we're no longer,,
dealing with tickets. And then I'm going,,,
to actually add the payload as the extra,,,
data. It's going to be of the log level,,,
error. And we're going to pass in the,,,
error. And then what we want to do here,,,
is just throw let's say throw new,,,
error and just say,,,
token uh,,,
signing,,,
failed. Okay. So that's our sign off,,,
token. So it's it's pretty simple. We're,,,
just creating a token um setting the,,,
issued the ex expiration and we're,,,
signing it with the secret that's in our,,,
env. And this has nothing to do with the,,,
cookie yet. It's just it's creating the,,,
actual token. Now, we need a way to,,
verify it when that token gets sent in,,,
the cookie. So, uh, and let's just put a,
we'll put some comments here, I guess.,,
Let's just say this will,,,
encrypt and,,,
sign,,,
token. And then this is going to,,,
decrypt and,,,
verify token. So let's say export async,,,
function and we'll call this,,,
verify o,,,
token and let's see it's going to take,,,
in a,,,
token which is going to be a,,,
string and return a,,,
promise and we're going to use we're,,,
going to use um a generic type here. So,,,
in brackets we'll put this uppercase t.,,,
Same thing over here after the function,,,
name. So uppercase T. And this allows us,,,
to specify the type of the payload when,,,
we call this function. So for example,,,
if we want to return the user ID in the,,,
email, we can specify that type at the,,
time of calling the function. And then,,,
in the function body, this is where,,
we're going to get the payload. So let's,,,
just do try catch here. And we can,,,
dstructure the,,,
payload from the verify or,,,
JWT verify function. And that's,,,
asynchronous. So we do have to add a,,,
wait. And then this JW verify takes in,,,
the token and takes in the,,,
secret. Okay. And that token is going to,,,
get passed into this function. And then,,,
we want to just return the payload. And,,,
we're going to say as,,,
t. And then in the catch, let's do a log,,
event. And let's say,,,
token decryption,,,
failed. And category is going to be off.,,,
And for the,,,
data, we can send the let's send the the,,
actual token, but we'll just send the,,
first 10 characters. So we can do that.,,,
Uh, we're going to send an object with,,
token snippet and we can then take the,,,
token and just do dot slice and pass in,,,
from zero to 10. So that'll give us the,,,
first 10 characters and then we'll just,,,
add the error as the log level and the,,,
actual error,,,
message. Okay. And then I'm just going,,,
to,,,
throw new,,,
error. So throw a new error and let's,,,
say,,,
token decryption,,,
failed. So that's our verify O token.,,,
All right. And the next thing we want is,,,
the set O cookie. So this is where we,,,
have the token and then we want to put,,,
it we want to put it into a cookie so,,,
that we can then you know send it back,,,
to send it with every request to to get,,,
validated or decrypted.,,,
So let's say set,,,
the off cookie and we're going to export,,,
function or,,,
async function and we'll call this set,,,
off set off cookie or you could call it,,,
set off token whatever you want. So,,,
that's going to take in the,,,
token and we're going to wrap,,,
that. Okay, let's say const and let's,,
say cookie store and then,,,
await cookies which we brought in from,,,
from,,,
uh from next.js from this next,,,
headers. Okay, so we got our cookie,,
store and then we want to set the,,,
cookie. So we take our cookie store and,,,
then call set and then we pass the,,,
cookie name in which I described above.,,,
Right? So up above it's it's going to be,,,
O right here. O token is the cookie,,,
name. So I'm going to pass that in as,,,
the first argument. Then the token and,,,
then some options. So we're going to set,,,
the HTTP only. We want to set that to,,,
true. So this prevents JavaScript from,,,
accessing the cookie. So we want this is,,,
this makes it more secure. And then I'm,,,
going to set same site to lax. So string,,,
of lax which means that it can it's it's,,,
not strict to our domain but it it can,,,
only get set from top level get requests,,,
from other sites. Um there's no,,,
cross-sight post requests or anything,,,
like that. and for secure which means,,,
that it's only going to be used with,,,
HTTPS. I do want this to be true in,,,
production. So what we can do is set the,,,
process.vnode environment. We're going,,,
to look at that and say if it's equal to,,,
production then this will be true. And,,,
then the path which is going to be just,,,
slash. Then we have the max age. So when,,,
do we want this to expire? I want it to,,,
be 7 days. So, I'm going to do 60 * 60.,,
So, 60 minutes time 60 seconds. And then,,
we want to do times,,,
uh,,,
24, which would be 1 day. And then we,,
want to time seven. So, that'll be 7,,
days. And I'll just put a comment here,,,
saying that's seven,,,
days. And then in the catch, we're going,,
to do a log event. and we'll say failed,,,
to set,,,
cookie and that's going to be in the off,,,
category and we'll send the,,,
token and it's an error log level and,,,
send the,,,
error. All right, so that's our set o,,
cookie. Add the get o cookie. So this,,,
will let's say,,,
get O token from cookie. So export,,,
async function and let's call this,,,
get yeah we'll say get off,,,
cookie and first thing we'll do is get,,,
the cookie,,,
store and we want to await on,,,
cookies and then we'll create a variable,,,
called token and we'll get that from,,,
cookie,,,
door.get and we want to pass in the,,,
cookie,,,
name which is O token. We put that up,,,
above and then we just want to return,,,
the token. Now it's going to be in a,,,
value. So I'm going to say token do,,,
value and we're going to use the,,,
optional chaining here just so we don't,,,
get any weird error messages.,,,
Um that should give us the,,,
token. Okay. Okay. Then the last thing,,,
we want here is to,,,
remove O,,,
token,,,
cookie. So let's call,,,
this remove O,,,
cookie. Okay. And we'll go ahead,,,
and actually let's put this,,,
in try,,,
catch. So I want to uh get the cookie,,,
store. So,,,
await and then we're going to take the,,,
cookie,,,
store and we're going to call,,,
delete and pass in the cookie,,,
name. Okay, so that'll delete the,,
cookie. And then in the catch, I'm just,,
going to log,,,
event. We'll say that it failed to,,,
remove the,,,
cookie, the O,,
cookie. Set the category to O. And just,,,
send an empty object for data,,,
error and,,,
error. That's it. So that's our,,,
authentication core. And if I mess,,,
something up in here, we'll we'll, you,
know, we'll fix it later on when we use,,
it. But we have that. So, we can close,,
close that up now. And we want to work,,,
on the actions as well as obviously the,,,
UI. So, let's start off with the let's,,
start off with registering users. And,,,
I'm going to do the action first. So, in,,
the actions folder, we want to have a,,
new file here called let's call it,,,
o.action.,,,
actions.ts. I mean, you could call it,,
user actions or or whatever you want.,,,
Uh, so in this o actions, let's make,
this a server,,,
uh uh server action. So, userver and,,
then we're going to,,,
import prisma. And remember, we want to,,
bring that in from our file. So, it's,,
going to be at,,,
slashdb/prisma. And then we're also,,,
going to be encrypting the password,,,
here. So let's import brypt from,,,
bryptjs and then we'll also use our log,,,
event and then we want to bring in,,,
um the sign off,,,
token from our lib and also the,,,
set set o cookie. We're going to bring,,,
that in as,,,
well. And then let's create our,,,
function. And this is going to be to,,,
register a new,,,
user. And we're going to,,,
export a sync function. We'll call it,,,
register,,,
user. All right. Now, when we have our,,
form, we're going to be using the the,,
use action state hook like we did with,,,
the token when we, you know, not the,
token, the uh the ticket. When we submit,,
a ticket, remember, we use that that,
hook. So that means that this is going,,,
to be an action that takes in two things,,,
prestate. Okay. And also,,,
um the form data. So form data with the,,,
type is going to be form data. Now for,,,
the type for the state it's going to,,,
it's going to be a success and message.,,,
Uh so I'm actually going to create the,,,
type here. So we'll say type response.,,,
We can do this in the other file the,,,
tickets action as well. Um we'll just,,,
say response result which is going to be,,,
an object with the success which is a,,,
boolean and the message which is a,,,
string. Okay. So now we can just say for,,,
the previous state that type is going to,,,
be response result and also um what this,,,
function will return is a promise that,,,
will be,,,
the response,,,
result. Okay, which is going to be again,,
success and,,,
message. So let's get the form data,,,
first. So we'll say coname set that to,,,
form data.get get and we want to get by,,,
the name which is name and we'll say as,,,
string and then we also want to get the,,,
email. So let's take this and this,,,
change that to email. Then we want to,,,
get password. So this and this,,,
password. Okay, that'll get us the form,,
data. Then let's make sure there,,,
is all those fields. So if not name, if,,
not,,,
email and if not,,,
password then let's log,,,
event and we'll,,,
say validation,,,
error and missing registration. Our,,,
register,,,
fields type is going to be,,,
off and we'll send the name and,,,
email and log level is going to be,,,
warning. And that should do it for the,,,
for the log event. Uh actually I wanted,,,
to put this in a try catch. That's,,,
right. So let's go right here. Say try,,,
catch. And then I'm just going to move,,,
this stuff,,,
So, we'll just cut that and put that,,
into the,,,
try. All right. And then after that, we,,
just want to,,,
return the result, which is going to be,,
success.,,,
Um, wait a minute. I want to be in here.,,
So, this is going to be,,
return success,,,
false. And let's Oops. And let's do,,,
message.,,,
all fields are,,,
required. Okay. So now outside of that,,,
if statement I want to check if the user,,,
exists. So let's say conexisting user.,,,
We're going to set that to await. And,,,
then we're going to use our Prisma,,,
client and say Prisma user dot and then,,,
let's do find,,,
unique and pass in a,,,
wear and just match the email. Okay.,,,
Okay, so we're checking for that user,,
and then we want to,,,
um say,,,
if if the user exists. So if existing,,,
user then let's do a log. So log event,,,
and we'll say registration,,,
failed. Registration,,,
failed. User already,,,
exists. And I want to put the email,,,
actually. So I'll use back tick,,,
here. So back tick. And then we'll put,,,
the,,,
email. Okay. And then we're going to,,,
pass the,,,
category. And I mean I guess we don't,,,
have to put the email there. We could,,,
put it here, but I'll just put it in,,
both places. And then we'll make that a,,,
warning.,,,
So if the user exists that then we want,,,
to return. So I'll just grab,,,
this here and we're going to return,,,
false and just change the message up to,,,
user already,,,
exists. Right? And then we want to go,,,
outside of that. So if those pass,,,
right? If the fields are are filled in,,,
and the user email matches, now we want,,
to,,,
hash the,,,
password. So we'll say const hashed,,,
password. Set that to,,,
uh await and then we're going to use,,,
brypt.hash. Pass in the plain text,,,
password and the number of rounds. So,,,
we'll do uh,,,
10 and,,,
uh let's see we got the hash password.,,,
Now we want to create the,,,
user. So we can do that. Let's say con,,,
user set that to await and then we'll,,,
take the,,,
Prisma client and user and then the,,,
create,,,
method and we want to pass into that,,,
takes in data which is going to be the,,,
name,,,
email password but we want to make sure,,,
that we set the password to the hash,,,
password. All right. So, we'll do that.,,
And the way I want this to work is after,,,
the user is registered, I want them to,,
to be logged in. So, that means we're,,
going to set and sign the token and set,,,
set the cookie. So, uh let's actually,,
put a comment here. We'll say sign and,,,
set off token. So, we'll say con token,,
set that to a wait. And this is where we,,,
want to call our sign off token function,,,
that we created in our lib off file. And,,,
then we're going to pass the payload in,,,
which is going to be the user ID. And we,,,
set that here to the user ID. Okay?,,,
Because we got we're getting the user,,,
here. We're creating it. The user gets,,,
put here. And then we're setting the ID,,,
to the user ID in the payload of the,,,
token. All right. And then we want to,,,
await and then set off cookie. Okay, so,,
the first this one signs creates,,,
encrypts and the payload and signs the,,,
token. This one is going to set it to,,,
the cookie. So we want to pass in the,,,
token and then we'll just go ahead and,,,
log,,,
it. So let's put back. We'll say,,,
user,,,
registered successfully.,,,
user registered successfully and I'll,,,
put,,,
the,,,
email of um let's pass in the user,,,
ID. So it's going to be user ID and,,,
let's pass in,,,
email and let's make it,,,
info. Okay. And then for the return, we,,
just want the success. Success is going,,,
to be true. And the message,,,
uh we'll say,,,
registration,,,
registration,,,
successful. And then in the error, let's,,
return success is going to be false. and,,,
message. We'll just say something went,,,
wrong. Please try,,,
again. And we'll do a log event as,,,
well. So log event and let's do,,,
unexpected,,,
uh unexpected error during,,,
registration. Okay. Okay. And that's,,,
going to have a,,,
category of off. And then I don't want,,,
there's no data that I'm going to pass.,,,
And then error level and the,,,
error. Okay. So we have our register,,,
action. And just to kind of go through,,,
it again, we get the form data. We check,,
the form data. We check if the user,,,
exists. If it does, we log it. And then,,
we send a message saying they already,,,
exist. If they don't exist, we go and we,,
hash the password. We create the user,,,
with that new hash password, the name,,
and email. We then sign the token,,,
create and sign the token, set it in the,,
cookie. So we're essentially logging in,,,
log the event, and then we return,,
success true. So now we have to create,,,
the the front end of this, the the,,
register form. So let's go,,,
to the register page. Actually we have,,,
to create it. So in app I'm going to,,,
create a,,,
folder. I'm going to create a folder,,,
with parentheses called off. So this is,,,
just a group meaning that it's not,,,
actually going to be part of the URL.,,,
It's not going to be slash,,,
offregister. It'll still just be,,,
slashregister if I put a folder in here,,,
called register. And again, this is for,,
people that aren't really familiar with,,,
Nex.js. Um, but it won't be part of it.,,
If you do want it to be part of the,,,
route and you want it to be slash,,,
offregister, then you could remove the,,
parenthesis. But the parenthesis just,,,
makes it a group for organization. So,,,
I'm going to create a file in here,,,
called,,,
page.tsx. And,,,
let's write this out. So, this is going,,
to be the register page.,,,
And just for now, we'll just say,,
register. And then if I go and I click,,,
on the register button, now we see our,,
register page. Okay. So, we're going to,,
bring some packages into this uh and,,,
some hooks. I want to use the use action,,,
state hook like we did in the other,,,
form. And we're also going to bring in,,,
use effect. And since we're using hooks,,,
we're going to make this a client,,,
component at least at the,,,
moment. And then let's also import toast,,,
because I do want to show a toast,,,
notification. So that's going to come in,,,
from sauner. And then also the use,,,
router,,,
hook because we're going to want to,,,
redirect. And we want to bring in of,,,
course our register user action that we,,,
just created. And that's going to be,,,
from off,,,
actions. Okay.,,,
Now, since we're using uh since we're,,
using use action,,,
state, we need to pass in our initial,,
state. And I'm going to put that into a,,,
variable into an object called initial,,,
state. And just like with the when we,,,
create a ticket, the response we're,,
going to get is going to have a success,,,
boolean and a message string. So the,,,
initial state is going to be,,,
success false and then message will just,,,
be an empty string. Okay. And then we,,,
want to go ahead and use the use state,,,
hook. So that's going to we're going to,,,
pass in here state and then the form,,,
action and use action state. That's,,,
going to take in the action we want to,,,
call which is going to be register user,,,
and then also our initial,,,
state. All right. And then let's,,,
um let's just let's just start to output,,,
the the form before we do anything else.,,,
So for that I think I'm just going to,,,
paste in. So let me just grab that real,,,
quick and let's return parentheses. And,,,
then I'm going to paste that,,,
in. Save it. And that should There we,,,
go. So we now have our register form.,,,
And just to kind of go over it real,,,
quick, we just have a div. We're using,,
flexbox. Same as the other form. We have,,,
an H1. We have our form, which is uh I,,
have form action here, which obviously,,
is coming from here. And then let's see,,,
we have our our input for the name. We,,,
have an input for the email and for the,,,
password and then a button. So you can,,,
either copy this or you can grab it from,,,
the the final repo. Now I want to,,,
redirect once they log in I want them to,,,
redirect to slash tickets. And if,,,
there's an error I want to show a toast.,,,
So what we'll do is we'll use use effect,,,
for that. Um actually before we do that,,,
we have to initialize our router. So,,,
let's say con,,,
router set that to use router and then,,,
the use effect I'm going to put right,,,
above the return down here. So let's say,,,
use effect and let's pass in our,,,
function and then as far as the,,,
dependencies go. So we want this to fire,,,
off when the state or router,,,
changes. Okay. And then in the use state,,,
let's check for success. So if the state,,,
success then that means it's successful.,,,
So I'm going to show a,,,
toast.uccess and say uh,,,
registration. So,,,
registration,,,
successful and then let's redirect. So,,,
we're going to take our router and we're,,,
going to call,,,
push and we want to push to slash,,,
tickets. And then I just want to do a,,,
refresh. So,,,
router.refresh. Yeah,,,
refresh. Did I bring router in from the,,,
right thing?,,,
Yeah, I think. Right. Next. No, I'm,
sorry. This is next navigation.,,,
There we go. All right. So, we want to,,
do an else. So, if it's not successful,,
then let's just show a an error in the,,,
toast. And that's going to be toast,,,
error. And we want to show the message.,,,
So, state,,
dossage. In fact, let's do else,,
if,,,
state. All right. So, we can try that,,
out. Let's see. We got an error going on,,,
here. Oh yeah, this is a last pass,,
error. So I have the the last pass,,,
extension which puts these uh you know,,,
these blocks in here for your past you,,,
know your uh your fields or whatever. So,,,
that's going to it's not matching what,,,
Nex.js is giving us. So it's,,,
complaining. So if you want to get rid,,,
of that you can just,,,
disable LastPass if you have that,,,
installed.,,,
So, I'm just going to find that here and,,
just shut that off. If I reload, then,,
that error should go,,,
away. So, now we'll try it out. Let's,,
register. I'll just put my own name,,,
here. And let's say,,,
[Music],,,
Bradgmail. And let's Whoops.,,,
and let's put a,,,
password. Okay, so I get registration,,
successful and then it brings us to,,,
tickets. Now to check that we can go to,,,
Prisma Studio. I'm just going to refresh,,,
this and we should see under user. So it,,,
sees one user and there it is. Brad at,,,
Gmail. It generates a CU ID or C ID,,,
whatever it's called. hashed password.,,,
Good. So, we're now able to register,,
user. So, now what I'd like to do is,,
show the correct links in the navbar,,,
right? Because I'm logged in, I,,
shouldn't be seeing login and register.,,,
So, I want to create uh I guess a helper,,
to get the current user. And we can do,,,
that through the O token. So, let's,,
let's jump into our file structure here.,,,
And I'm going to put this in the let's,,,
put it in the lib folder. I'm going to,,,
create a new file and we're going to,,,
call it,,,
current-user.ts. And then from here,,,
we're going to import a couple things.,,,
We want to bring in the uh let's bring,,,
in the,,,
verify what did I call it? Uh verif I,,,
think it's yeah verify o token because,,,
that's what'll decrypt it. So verify O,,,
token and then we want to be able to get,,,
it from the cookie. So get O cookie.,,,
We're bringing that in from our O file,,,
which is in the same folder. It's in the,,,
lib folder. And then let's also bring in,,,
the Prisma client. So I'm going to,,,
import Prisma. And remember that's going,,,
to be from the,,,
uh at,,,
slashdbrisma. And then let's create a,,,
type for the payload because remember,,,
the the the JSON web token has uh a user,,,
ID as getting sent as the payload. So,,,
I'm just going to put that here. We'll,,,
say type and let's call this,,,
off,,,
payload and we're just going to have a,,,
user ID which is going to be a,,,
string. Okay. Now we're going to export,,,
an async function and let's call it get,,,
current,,,
user. And the way we can do this first,,,
off let's do a try catch. The way we can,,,
do this is get the token from the um,,,
from the cookie. So let's say const,,,
token set that to await and then our get,,,
off,,,
cookie and let's just say if there's no,,,
token. So if there's no token I just,,,
want to return,,,
null. Then we want to get the payload,,,
from that token and we can do that with,,,
the verify o token function. So let's,,,
say payload and let's set that to I'm,,,
going to put this in parenthesis and,,,
we're going to say await and then verify,,,
O token pass in the,,,
token and I just want to add to this as,,,
the O payload. So we're using that,,,
type. Then let's say if not payload and,,,
I want to check for the user ID. I'm and,,,
I'm going to use optional chaining here.,,,
So if not payload user ID, we also want,,
to return null. So if there's no token,,,
or there's no payload or I'm sorry, no,,
user ID in the payload, then we're going,,
to return null. And then let's go under,,,
that. And then we want to get the user.,,,
So we'll say con user set that to await,,,
Prisma. So we're using the Prisma,,,
client, the user,,
model. I can't see user model. And then,,,
let's do find unique. And we'll pass in,,,
our,,,
where. And let's say where the ID is,,,
equal to the,,,
payload user ID. Okay. So we're just,,,
matching the payload that's sent in the,,,
token with the ID of the user in the,,,
database. And then I don't want to get,,,
all the fields like I don't want the,,,
password hash obviously. So what we can,,,
do is pass in a select and I can say I,,,
only want to select the ID. So we do ID,,,
true and I want the email. So email true,,,
and then the,,,
name and that should get the user. Then,,,
we just want to return that user. So,,,
right under here let's just return the,,,
user. Okay. Now in the catch I'm just,,,
going to do uh console log,,,
And we'll just we'll just say that,,,
there's an error getting the current,,,
user. And let's also just pass the,,,
error. And then we want to just return,,,
null. So that's our our get current user,,,
function. Now let's use that in the,,,
navbar. So I'm going to close that up,,,
and then open the let's see,,,
components,,,
navbar. All right. Okay. And then we'll,,,
bring that in. So let's import get,,,
current user from our current user,,,
file. And let's see, remember that,,
returns the user which is either going,,,
to be the user or null based on if the,,,
token is valid or not. So let's say con,,,
user set that to await get current,,,
user. And then uh oh and this has to be,,,
asynchronous. So let's say,,,
async. And then let's see. We're going,,,
to we're going to go in this first in,,,
this div right,,,
here. And what I'm going to do is add in,,,
some curly braces and we're going to say,,,
if user then show something else show,,,
something else. And what I want to show,,,
if the user is there is going to be,,,
first of all these two links, right? The,,
new ticket and the my tickets. Okay. So,,,
I'm just going to cut those and let's go,,,
into this first one. So this is if there,,,
is a user. So I'm going to put a,,,
fragment and then in that I'll paste the,,,
two,,,
links. Okay. And then let's grab the,,,
other ones. So we get the login, we get,,
the register, and we get the log out,,
which is a form with a button. So we're,,,
going to cut those and that's going to,,,
go in the else.,,,
So, we'll put a,,
fragment and then paste those in. And,,,
then I'll,,,
save. And now we see new ticket and my,,,
tickets. We should Oh, the logout should,,
should go in the other one. So, this log,,
out form right here, let's just cut,,
that. And then we're going to put that,,,
under the link for my tickets so that,,,
that,,,
shows. Okay. And now if it's on smaller,,,
screens, it fits,,
right. So the next thing I want to do is,,,
is a log out. We need to be able to log,,,
the user out, which will consist of,,
removing the O cookie, which we already,,
have a function for. So let's create our,,,
logout user. That's going to be an,,,
action. So we can go into our O actions,,,
file. And let's go down at the bottom,,,
here. We'll just say log user out. and,,,
remove,,,
uh remove off,,,
cookie. So let's say export function or,,,
async,,,
function and we'll call this logout,,,
user. And as far as what it's going to,,,
return, let's say promise and it's going,,
to be that that object with success and,,,
message. So we'll pass in here um going,,,
to go on the next line here. Let's say,,,
success which is going to be a,,,
boolean and then we have message which,,,
will be a,,,
string. All right. So that's what we,,,
return. Now let's go into the function,,,
body and we'll open up a try,,,
catch and we want to call the the remove,,,
o cookie. So let's await on that. So,,,
remove o cookie which should be autoimp,,,
imported. Let's just make sure. Yep. So,,,
that was brought in from our lib off,,,
file. Okay. So we're removing that. And,,,
then I'm going to log the event to,,,
Sentry. So user,,,
uh user logged out,,,
successfully. And again it's up to you,,,
if you want to do logs for stuff like,,,
this. If you have a huge site and a ton,,,
of users, you probably don't. But I the,,
point is just to show you, you know, how,
this works. It's up to you on what you,,,
want to actually,,,
log. And I missed the data. So after the,,,
what is it? After the category is going,,,
to be the data, which in this case is,,
just going to be an empty object.,,,
So after the log event we just want to,,,
return our object with,,,
success is going to be true and,,,
message we'll say,,,
logout,,,
successful. Now in the catch I'm going,,,
to log,,,
event for the message we'll say,,,
unexpected,,,
error. uh we'll say unexpected error,,,
during,,,
logout. So that's going to be an off,,,
category and then for the data I'm just,,,
going to attach just an empty object,,,
error for the log level and then pass,,,
the actual error. Okay. And then what,,,
we're going to return is going to be our,,,
object with success which in this case,,,
is going to be false. And then we have,,,
our message which I'll say log out,,,
failed and we'll say please please try,,,
again. Now we want to use this in the,,,
the navbar but we're going to be using,,,
some hooks um such as get uh such as use,,,
action state and use effect. So I don't,,,
want to make the navbar a client,,,
component in order to use those hooks.,,,
So what we'll do is create a component,,,
for the logout button and then bring it,,,
in. So let's go to components and let's,,,
create a new file here called logout,,,
button.tsx. And let's create a component,,,
called logout,,,
button. And let's see, I'm going to,,
grab from the navbar. I'm going to grab,,,
the,,,
form. So, right here, this logout form,
I'm going to just cut that. And then,,,
we're going to paste that in,,,
here. And let's just save that as is for,,,
now and bring it into the,,,
navbar. So, we'll say import logout,,
button. And then we're going to just go,,,
to where that form just was, and we're,,
going to add that here. Log out button.,,,
And it should still just look the same.,,,
Okay. Now, in the logout button, we're,
going to make this a client,,,
component. So, let's say use,,
client. And a few things I want to bring,,,
in. We want the use action state because,,,
we're treating the logout form just like,,,
any other form where we have it's going,,,
to hit an action that returns a success,,,
and a message. I also want to bring the,,,
use effect so we can do the redirect.,,,
And if we're going to redirect, we need,,
to also bring in use router. And it's,,,
going to be from next navigation, not,,
next router. And let's import the action,,,
that we just created, the logout user.,,
And also the toast from,,,
sonner. Toast,,,
from just toast. Okay. Now we're going,,,
to initialize the router. So let's say,,,
const,,,
router and then let's create our initial,,,
state. You don't have to put this in a,,,
variable but just I think it makes it a,,,
little cleaner. So let's say success,,,
initially is going to be false and,,,
message initially is going to be an,,,
empty,,,
string. Then we want to use the use,,,
state hook. So that's going to be state,,,
and form,,,
action from use action state and that's,,,
going to take in our action that we're,,,
going to call which is logout user and,,,
it's going to take in our initial state.,,,
So you should see the pattern that that,,,
we're doing here for for any form that,,,
deals with an action. And then on the,,,
form tag we want to add the action,,,
attribute and set that to the form,,,
action. And then to take care of the the,,,
redirect, let's create our use effect.,,
We'll go right above the,,,
return. So use effect.,,,
And just like with the others, we want,,
to look at the state and the,,,
router. Okay. Then we're going to check,,,
for success. So if the state,,,
success so if that's true then let's,,,
show a success message. So toasts,,,
success,,,
uh and then we're going to say log,,,
out log out,,,
successful and then we want to redirect.,,,
So let's take the router and call push,,,
and I'm going to redirect to slash,,,
login and then let's do an else or an,,,
else if and check for the state,,,
statessage. Okay, so if if state success,,
is false and there's a message, we know,,
that message is the error. So we'll say,,,
toast. And pass in the state,,,
dossage. And that's it.,,,
So, I'm just going to refresh this. And,,
we're logged in right now because I,,,
registered, which also logs you in.,,
Click log out. And now we're logged out.,,,
It killed the cookie. And now we see,,,
login and register in the,,,
navbar. Okay, cool. So, the next thing,
we're going to do is uh the login,,,
right? So, we have this login page,,
which right now doesn't exist. If I go,,,
to it, we get a 404. So let's start off,,
with um let's just get the form showing.,,,
So we'll go to our app and then our o,,,
group and create a new folder called,,,
login. And in that we'll create a file,,,
called,,,
page.tsx. And we'll create our,,,
component. Let's call this we'll call it,,,
login. Login,,,
page. And for now I'm just going to say,,,
login just to show,,,
something. All right. Okay. And before,,,
we do this the the login page, I want to,,
add the action. So let's go into our O,,,
actions and go down to the bottom. We'll,,,
say log user,,,
in. So export,,,
async call it login,,,
user. Okay. Now, this is going to take,,
in the previous,,,
state. Notice on the log out, so log,,
out, we didn't pass in like pre state,,
and form data because we didn't need it,,,
right? We don't there's no form data.,,,
There's no fields that they're filling,,,
out. They just click the button. But,,,
here, login user, we're taking in data.,
So, we need the pre state. And I'm going,,
to set that to our response result that,,,
we have up above that we did earlier.,,,
And then form data will be set to,,,
uppercase F form data. And then what,,,
this will return is going to be a,,,
promise with the,,,
response response,,,
result. And let's open up a try catch.,,,
And then in there we're going to get the,,,
the fields. So we have an email that we,,,
need to get which we can use form,,,
data.get,,,
get the name of it will be email and,,,
let's just say as,,,
string and then we also want the,,,
password. So let's take this and this,,,
change it to,,,
password. So that'll get our our fields,,,
and then I'm just going to do a quick,,,
check. So if not email or not,,,
password then let's log event,,,
And we'll just say,,,
validation validation error and,,,
missing missing login,,,
fields. And it's going to be the off,,,
category. And for data, we'll send the,,
email and we'll make the log level a,,,
warning.,,,
And then as far as what we want to,,,
return if if we have that error is going,,,
to be success,,,
false and,,,
message will be email and,,,
password are,,,
required. Okay. So that's if they they,,,
miss the email password. Now if it,,,
passes or if they fill in the fields,,,
then we want to get the user right or we,,,
want to match the user with the email,,,
that's passed in. Okay, user in the,,
database to email that's passed in. So,,,
let's await prisma user and we'll use,,,
find find,,,
unique and we want to find where the,,,
email right so where email equals email,,,
which this is the same as doing,,,
this and then underneath that we want to,,,
check to see if the user was found. So,,,
we'll say or if it wasn't found and if,,,
it wasn't then we'll log the event.,,,
say uh actually I'm going to use back,,,
ticks here and say,,,
login,,,
failed. We'll say user not,,,
found and uh I'm just going to put the,,,
email in as well. So we'll just put a,,,
dash and then the,,,
email. Okay. And it's the O,,,
category. I'll also pass the email in,,,
here as,,,
data. And we'll set it to warning.,,,
And then let's return we want uh success,,,
false. And for the,,,
message we'll just say,,,
invalid email. Actually, you know what?,,
Let's check for the password as well. So,,,
if not user,,,
or not user,,,
dot,,,
password then we'll say invalid email,,,
or,,,
password. All right.,,,
Now we need to compare the the the plain,,,
text password to the hash password in,,,
the database and that's where brypt,,,
comes in. There's a um there's a method,,,
called compare that we can do to you,,,
that we can use to do this. So let's,,,
create a variable called is,,,
match and we'll set that to await and,,,
then let's use brypt.compare,,,
compare. And then you want to pass in,,,
two things. You want the the plain text,,,
password, which is just password, right?,
Because that's the up here that's coming,,,
in from the form. And then you want to,,,
pass in the hashed password, which we,,
can get from the user from,,,
user. So that's going to be what we,,,
passed in second is,,,
user. Okay. Okay. And that will give us,,,
a a true or false based on if it,,,
matches. So if it doesn't match, so if,,
not if not is,,,
match then they have the wrong password.,,,
So let's just do a log event. I'll just,,,
copy this,,,
one and let's say we'll do login failed,,,
and we'll just change this,,,
to,,,
incorrect password. And we can make this,,,
quotes or leave it back tick. It's up to,,,
you. And then off. And then let's see.,,,
We'll send the email warning. So that's,,,
all good. And then let's do our return,,,
which I'm going to do the same return I,,,
did,,,
here. Okay. So after the log event, I'm,,
going to say invalid email or password.,,,
Now, this is kind of a a security thing.,,
You don't want to let the user know that,,,
the email exists, but the password was,,
wrong because that tells the user if,,,
that email is an actual user of that,,,
website of that that application.,,,
So, if the email matches and the,,
password is wrong or if there's no email,,,
and the user isn't found, you still want,,
to say the same thing. You still want to,,,
say invalid email or password. Okay?,,,
That's why I put it in both places here.,,,
So, uh I think that that's just it's,,
just a security issue. You don't want,,,
people seeing like who's registered and,,,
who's not. So, now after we pass, right?,
So, we'll go under the is if is not ma,,
or not is match. Then we want to get the,,,
token or I should say create the token,,,
which we're going to use the,,,
sign sign off,,,
token which I think was brought,,,
in. Yeah. So we brought that in from our,,,
O library. So sign off token and that's,,,
going to take in the payload which is,,,
going to be the user. We're going to set,,,
user ID to user,,,
ID. Okay. So that will pass the payload,,,
in and encrypt it. And then we want to,,,
set the cookie. So let's say await and,,,
then set off cookie and pass in the,,,
token. All right. And then let's return,,,
from,,,
that success,,,
true and,,,
message we'll say,,,
login,,,
successful. And then if there's an,,,
error, let's log,,
event and we'll just say unexpected,,,
oops unexpected,,,
error during,,,
login for the data just be it just be,,,
empty and the error log level and then,,,
pass the actual error. Okay. And then,,,
we're going to return from this,,,
success,,,
false message,,,
uh login. We'll just say,,,
uh what do I want to say?,,,
Error during,,,
login. All right. And yeah, I think that,,
should do it. Save it. So now we have,,,
the the login action. And now we need to,,,
create the the actual login page. So,,,
let's do that next. Now I don't I don't,,,
want to make the login,,,
page client rendered and the form has to,,,
be because it has hooks. So I think what,,,
we'll do is just create a form a form,,,
component for the login as well as the,,,
register because right now if we look at,,,
the register page it's client rendered.,,,
So why don't we do this? Why don't we,,,
copy everything that's in the register,,,
page and then in addition to the page,,,
I'm going to create,,,
form.tsx or we could call,,,
it,,,
register-form,,,
tsx. And then I'm going to paste in the,,,
whole page and change this and the,,,
bottom where it exports. Let's change it,,,
to register,,,
form. Okay. And then what we'll do is,,,
just bring that into the page. So the,,,
register page, we can just get rid of,,
all this, generate a new,,
uh new component and call it register,,,
page like it was. And now we just want,,,
to bring,,,
in the form that I just created. So,,,
register form. And then we're just going,,,
to render,,,
that. So register form. So that way the,,,
page is server rendered but the form is,,,
client rendered and we should still see,,,
it no problem if I go to register. So,,,
now we'll do the same thing with the,,,
login. So let's see close that up. So,,,
for login page we have that but let's,,,
create an addition. Let's say login,,,
form.tsx and then we'll create our,,,
component. Uh yeah, login,,
form and for now I'll just say,,,
form and then we're going to bring that,,,
into the login page like we did the,,,
register. So import the login form and,,,
then we'll just render that,,,
here. Okay. And then we should still see,,,
Yep, we should see form. All right. So,,
we can close up the page. Let's go back,,,
to the login form. And now we want to,,,
want to do a lot of the same stuff we,,,
did on the register page. So, why don't,,
we just copy the the or I should say the,,,
register form. So, why don't we just,,
copy that the whole thing and in the,,,
login form I'll just paste that in. And,,,
then we'll change register form here and,,,
at the bottom to login form. And then,,,
just go through and change a few things,,,
like the button. We'll say,,,
login. Um let's go to up to the top,,,
here. So all this will stay the same.,,,
We're still getting the same initial,,,
state. Um we're going to bring in login,,,
user action instead of,,,
register. And then we're going to pass,,,
in login user right,,,
here. Instead of,,,
register and then let's see here we'll,,,
say login successful. And then when we,,,
redirect, it'll be still be to,,
tickets. Uh let's see. This is all going,,,
to stay the same. The header here,,,
register, we'll change that to login.,,
And then we don't need the name field.,,,
We just want the email and password. So,,,
we'll get rid of that name,,,
field. And the form should go to form,,,
action. So yeah, I think the rest of,,
this can stay the same. Let's go ahead,,,
and save that. And now we have our login,,,
form. All right. and it should connect.,,,
It's going to the action is set to form,,,
action which we have the login user,,,
action pasted into or put into. So let's,,,
try it out. I'm going to try with,,,
something that doesn't exist first. Like,,,
I'll do,,,
brad1gmail.com. Okay, so invalid email,,
or password. Now let's try,,,
bradgmail.com.,,,
log in. And now we get login successful.,,,
We can see the correct links in the,,,
navbar and we get redirected to our,,,
tickets page. Now before we move on, I,,
just want to take a second and look at,,,
Sentry. So I'm just going to refresh,,,
this. So these are Let's see. I'm on the,,,
issues,,,
page and let's go to prioritize. So this,,,
is any error that was thrown. So fet,,,
fetch ticket list,,,
um login failed,,,
error the default export is not a react,,,
component. So anything in you know in,,,
the process of development is going to,,,
show here. So a lot of these like the,,,
default export that's not that's fixed.,,,
So we could mark that resolved. This,,,
other stuff these are just logs. fetch,,,
ticket,,,
list and we can just see what happened,,,
before which is nothing really because,,,
it's just fetching the the,,,
tickets. Yeah. So it's just showing me,,,
on the page um hydration error. So that,,,
was when I had to disable last pass. So,,,
we know that that's,,,
resolved. All these hydration this one,,,
here and then next router was not,,,
mounted. So that's not exist. So all of,,,
these are taken care of. Scheduled,,,
Prisma error for testing that was just a,,,
simulation. Yeah. So we could mark all,,,
of these as solved. And then for review,,,
this is going to be just like regular,,,
logs. So user registered successfully,,,
viewing ticket details.,,,
So yeah, I,,
mean again, you don't have to do this,,
stuff, but it it can be helpful just to,,
see everything that happened on your,,,
site and who did,,,
it. But yeah, you can mark all these,,
resolved. So I just wanted to just take,,,
a look at that. And then you can check,,,
out any performance. So if you want to,,,
look at you know durations and page,,,
loads and the different routes how they,,,
perform and so on you can do that. All,,,
right. Now the next thing I want to do,,,
now that we can log in I want to make it,,,
so that when we submit a ticket right if,,,
we go to new tickets we need to attach,,,
the user to the ticket because right now,,,
it's just going to submit a ticket and,,,
and we don't know who who did it right,,,
who submitted it. So we have to attach,,,
the user to it. So let's open up the,,,
actions for the ticket. So action uh,,,
ticket.actions,,,
actions and let's go to the create,,,
ticket which I believe is at the top and,,,
and you'll see this um we're getting a,,,
TypeScript error here because now the,,,
ticket is expecting a user because of,,,
the Prisma schema right if we look at,,,
our Prisma schema you should have the,,,
user ID and user in here so it's,,,
expecting that um so first thing I'm,,,
going to do is bring in at the,,,
top I'm going to bring in the the get,,,
current user because we to know which,,,
user is is being is using the form. So,,,
we'll bring that in and then let's go to,,,
the create ticket and at the top of the,,,
try block let's check for the user. So,,,
we'll say if well actually let's,,,
uh yeah we'll just get the user first.,,,
So const user set that equal to a,,,
wait get current user and then we'll,,,
check the,,,
user. So if there's not a user, I'm,,
going to first of all log the,,,
event and I'll say,,,
unauthorized unauthorized,,,
ticket creation,,,
attempt. And this is going to be of the,,,
type ticket. I guess it could be off,,,
too. Depends on how you look at it. And,,,
we'll make that a,,,
warning. Okay. And then what we're going,,,
to do is,,,
return success. Return that as false.,,,
And then the message will say you must,,,
be logged in to create a,,,
ticket. Okay. So that's first thing we,,,
want to do. Then when you create the,,,
ticket, we want to add the user ID. So,,
let's go down to where we see that,,,
TypeScript error. So we have subject,,,
description, priority. Now we're also,,
going to add in let's say user and we're,,,
going to set that to an object and since,,,
it's a relationship we're going to add,,,
here connect and we want to set in the,,,
in the connect we want to set the ID to,,,
the user,,,
id. Okay so that will connect the user,,,
to this,,,
ticket and that should be all we have to,,,
do to connect a user to a ticket. Now,,,
before we test that out there's one,,,
thing I I want to do. So in the log out,,,
button, I have it right now where I'm,,
bringing in the router and if success,,,
then we're pushing to the login page. I,,,
don't want to do that here. What I want,,,
to do is make it so that the tickets,,,
page, right? So my tickets, if you're,
not logged in, it should redirect you to,,
the to the login page. So let's not do,,,
this here. Let's get rid of the,,,
router.push. And we can get rid of,,,
anything to do with the router in the,,,
login button. So we don't need to pass,,,
it in here. And then we don't need to,,,
initialize it. And then we don't need to,,,
bring it in the use router. Okay. What I,,,
do want to do though is go to the ticket,,,
page which is source app,,,
uh tickets and then page.tsx. And I want,,,
to get the user. So I'm going to import,,,
get current,,,
user. And then we're going to go right,,,
above where we get the tickets and we're,,,
going to get the user with await and,,,
then get current,,,
user. And then we're just going to do a,,,
check here on the tickets page. If not,,,
user, then we're going to use redirect,,
from next navigation and redirect to,,,
/lo. Okay. So if I'm not logged in,,,
which I am right now, but if I'm not, I,
shouldn't. This should redirect me. So,,,
let's test out adding the ticket first.,,,
So, I'm going to call this Brad's,,
ticket. I'll just say this is a sample,,,
ticket from,,,
Brad. And then let's submit,,,
that. Okay. So, tickets successfully,,
submitted. And I see Brad's ticket. And,,,
if I go to Prisma Studio and I look at,,,
the tickets, now that user is connected.,,
You can see the user ID as well as the,,,
just the entire user. If I click on it,,,
we have the Brad at,,,
Gmail. All right. So,,,
now the problem that we still have,,,
though is anyone can see this Brad's,,,
ticket. And I'm going to log out, which,,
you can see redirects me to the login,,,
because I can't be on that tickets page,,,
if I'm not logged in. But let's actually,,,
register a new user. So, John Doe and,,
John,,,
atgmail. And this this not only,,,
registers but also logs me in. And I'm,,,
logged in as John, but I see Brad's,,
ticket. So, obviously, we don't want,
that. We want to limit it to that user's,,,
tickets. So, we're going to do that in,,
the actions. So, the ticket actions and,,
go down to our get,,,
tickets. And from here, we want to get,,
the user. So let's go right in the try,,,
here and say const,,,
user and we want to await get current,,,
uh get current user and then if there's,,,
not a,,,
user so if there's not a user,,,
then I want to first of all log,,,
that so we'll log an event and let's say,,,
unauthorized unauthorized is access,,,
to ticket,,,
list. And for the for the category, you,,
could say t o or ticket. I'm going to,,,
say ticket just because we're in the,,,
ticket actions. And just an empty object,,,
for the data. And let's do a,,,
warning. Not a warning, but,,
warning. And then we'll just return an,,,
an empty array if there's no user,,,
because we don't want them seeing any,,,
tickets even though they can't get to,,,
this page anyway from the front end.,,,
Now to limit the tickets to the user,,,
tickets, we need to go right here where,,
we call this Prisma ticket find many.,,,
And we're going to limit it by saying,,,
where the user ID because now the,,,
tickets have a user ID field match it to,,,
or it has to match the user ID and that,,,
user is coming from the the get current,,,
user which ultimately that user ID comes,,,
from the token. So hopefully you can see,,,
the whole flow of this application. And,,,
now you'll see that it disappears,,,
because I'm logged in as John. So I,,,
can't see Brad's ticket. Now I'm going,,,
to create a new ticket as John. Let's,,,
say John's,,,
ticket. This is a sample ticket from,,,
John. And we'll do medium and submit.,,,
Now I get that submitted successfully,,,
and I can see it on the listing page. So,,,
I'm going to go ahead and log out.,,,
Redirects me to login. Now I'm going to,,,
log in as,,,
Brad. And as you probably guessed, I see,,
Brad's ticket and I don't see John's,,,
ticket. So now now it's user,,,
specific. So our project is pretty much,,,
done. We can log in and register. So we,,,
have authentication. We can create new,,,
tickets. So we can see our our tickets,,,
and only our tickets. So that's kind of,,,
the gist of what I wanted to do, but,,
we'll do a couple more things. So I want,,,
to make this its own component, the,,
ticket item, and we can also do,,
something with the status. Like if it's,,,
closed, we can fade it out, something,
like that. Um, but there's a lot of,,
things you could add on to this project.,,,
So I would suggest that you do that. I,,,
think that that's the best way to learn,,,
is to just jump in and start doing,,,
things yourself and getting your hands,,,
dirty. So, this just gives you a good,,
start. So, let's close off or close up,,
all this stuff. And I want to create a,,,
new component in the components folder.,,,
And we'll call this, let's call it,,
ticket,,,
item. and let's say,,,
SFC ticket item. And then it's going to,,,
take in a prop,,,
of of,,,
ticket and then for the type let's set,,,
that to we'll say ticket,,,
uh what do we want to call this ticket,,,
item props and then I'll just create,,,
that right here. So type will be ticket,,,
item,,,
props and that's just going to be an,,,
object with a ticket and that's going to,,,
have a type of ticket which I can,,,
actually bring in from generated Prisma,,,
and when I bring in type usually like to,,,
add import type so we know what it is.,,,
All right.,,,
Now as far as uh what I want to put in,,,
the return let's go to the tickets page.,,,
So app tickets page,,,
tsx and what we have inside of this,,,
tickets.m mapap is what I want. So this,,,
div which ends right here. I'm going to,,,
just go ahead and cut that and then I'm,,,
going to paste that in to the return,,,
here. Now this uses the get priority,,,
class and a link. So those are two,,,
things we need to bring in as well. So,,,
up at the top here, let's say import,,
link and let's,,,
import get priority,,,
class. All right. Now, this ticket item,,
we're going to bring into the ticket,,,
page. So, we no longer need this,,
link and or the get priority,,,
class. And it looks like I'm not using,,,
log event here either. So, we can get,,
rid of that. And then we're going to,,,
bring in the ticket,,,
item. And I'm going to just add that,,,
into the map here.,,,
So ticket item. And we want to add on a,,,
key to that which will be the ticket ID,,,
and then the ticket,,,
itself. There we go. Let's save it. And,,,
it should just show us the same,,,
thing except now it's a little cleaner,,,
and it's in its own component. All right,,,
guys, so now I want to do the close,,
ticket functionality. So if we view it,,,
we should have a close button down here.,,,
So that means we have to create an,,,
action and then we'll add a a close,,,
ticket button component to uh to this,,,
page here. So let's go ahead and jump,,,
into our ticket actions. And then down,,,
at the very bottom, we'll say this is,,
going to close ticket. And we want to,,,
export an async function called close,,,
ticket. Okay. Now, we're going to be,,
using the use action state. So, just,,
like with all of our other actions, it's,,
this is going to take in actually it's,,,
not going to be an object. It's going to,,,
take in pre state. And that's going to,,,
be as far as the type it'll be an object,,,
with success which will be a,,,
boolean and also a message which will be,,,
a,,,
string. So that's pre state. Then we,,,
want uh form data which will have a type,,,
of form,,,
data. And then as far as what it's going,,,
to return, so the function will return a,,
promise and that promise is going to be,,,
again success which will be a,,,
boolean and,,,
message which will be a,,,
string. All right. And then I'm going to,,,
get the ticket ID. So let's say ticket,,,
ID set that to,,,
uh we're going to get it from the form,,,
data. So form,,,
data.get and ticket ID, but I'm going to,,
cast that as a number. So we're just,,,
going to wrap that in,,,
number. Once we do that, we're going to,,
check if,,,
not ticket ID. Okay. So if there's no,,,
ticket ID then let's just do a return,,,
success,,,
um return an object with,,,
success false and,,,
message will be,,,
ticket ID is,,,
required and if there is a ticket ID,,,
then we want to get the user so that'll,,,
be await wait get current,,,
user and we'll check for the user. So if,,,
not,,,
user then let's,,,
return success,,,
false and,,,
message we'll just say,,,
unauthorized. Okay. And then for both of,,,
these we should probably do a sentry log,,,
event. So before the return,,,
oops, let's see. So right here, before,
the return, let's say log,,
event. And for that, we'll say,,
ticket or missing ticket ID. I guess,,,
we'll say,,,
missing ticket ID. And it'll be,,,
ticket just an object for the data. And,,,
the type will be a,,,
warning. All right. And then I'll just,,,
copy that. We'll do the same thing here,,,
for the user. We'll say missing user,,,
ID.,,,
Yeah. So if there is a ticket and there,,,
is a user, we now we want to get the,,
ticket and make sure it it belongs to,,,
that user. So we get the ticket by,,,
using prisma.t and we'll use the find,,,
let's use find,,,
unique and we want to find,,,
where where the ID of the ticket equals,,,
the ticket,,,
ID. Yeah. And then we're going to,,,
check. So if not the ticket,,,
or if the ticket um dot user id. So this,,,
is where we check for the user. If that,,,
is not equal to the user id. Okay. And,,,
this user is coming from get current,,,
user which is the logged in user. So it,,,
needs to match. So if it doesn't then,,,
let's do uh log,,,
event and we'll say,,,
unauthorized ticket close,,,
attempt. Okay. And then,,,
uh it's going to,,,
be the ticket category. And for the data,,,
that we send, let's send the ticket,,
ID. And let's send the user ID, which we,,
would set to user,,,
ID. And then we'll do,,,
warning. All right. Okay. And then as,,,
far as what we want to,,,
return, so that'll be,,
success will be,,,
false. Message,,,
um again we'll just we'll just say this,,,
or this is to the user. So we'll say,,,
you are not,,,
authorized to close this,,,
ticket. Okay. So now that we've done,,,
that, let's do the actual update. So,,
we'll say await prisma dot,,,
ticket.update. And we want to update,,,
where the ID of the ticket is equal to,,,
ticket ID. And then the data that we,,,
want to send. Did I do that right? Uh,,,
this should have curly,,,
braces. And then the data that we want,,,
to send is going to be the status and,,,
that's going to be set to,,,
closed. I think that's,,,
right. So data set the step. Oh, it,,
needs to be set to a string of closed,,,
with uppercase C. Okay. So that'll do,,,
the actual update. Then I just want to,,,
revalidate path for two paths. One is,,,
going to be for the tickets page itself,,,
and then one is going to be for the,,,
specific ticket. So let's do back ticks,,,
here and then we'll do slash and,,,
then ticket ID. So just to make sure,,,
that those now have the you know the up,,,
the most recent ticket which would be,,,
this one setting the status and then,,,
we'll,,,
return success,,,
true and,,,
message will say that the ticket has,,,
closed,,,
uh ticket has closed,,,
successfully. All right so that's our,,,
action.,,,
Now, we want to use this in obviously in,,
our front end. So, I'm going to create a,,
new component for the close button. So,,,
under components, let's create a new,,
file. We'll call this,,,
close close ticket,,,
button.tsx. And this will be close,,,
ticket,,,
button. And then I just want to have a,,,
couple imports here. So, we're going to,,
be using use action,,,
state. So, that's from React. And we're,,
going to be using use,,,
effect. And then we want our action of,,,
course that we just created. So, close,,
ticket from the actions file. And then,,,
I'm also using the sauner toast. So,,,
let's bring in uh toast. That's going to,,,
be from,,,
sauner. All right. And then let's see.,,,
I'm just going to put the initial state,,,
in a variable. Actually, we can put it,,
right here. Const initial,,,
state success false by default and,,,
message,,,
empty. Okay.,,,
Now, let's get let's say state and form,,
action. So, state and form action. Um,,
we're going to get,,,
that from use action state and that's,,,
going to get passed in the actual action,,,
which is close ticket and then it's,,,
going to be the initial,,,
state. Um, now this close ticket button,,
it is going to take some props. So, we,,
should probably add those in here. So,,,
for props, it'll have the ticket ID and,,
also is closed. And as far as the type,,,
for that, it's going to be an object,,
with ticket,,,
ID, which is going to be a,,
number. And the is,,,
closed, of course, is going to be a,
boolean. All right. Now, let's create,,
down. Well, actually, before the return,
let's just check to see if it's closed.,,,
So, we'll say if it is closed, then,
we're just going to return null because,,,
I don't want to show this close ticket,,,
button. if it's already,,,
closed. And then in the return, since,,
we're using uh this form action here,,,
we're going to be we're going to have an,,,
actual form with a button, not just a,,
link. So, let's create our form and add,,
the action and set that to the form,,,
action. Okay. And then in that form,,,
we'll have an input. Let's give it a,,,
Let's give it a type of hidden because,,,
this is going to be the ticket ID. And,,,
we need a way to send that. It's not,,,
going to be obviously an input that that,,,
the user can see. So, it's going to be,,
hidden. And let's call this ticket ID.,,,
And then the value will be the ticket,,,
ID. All right. Then we're going to have,,,
our button. And I just want to give this,,,
button some classes. So class name,,,
let's do background. We'll do background,,,
red,,,
500. And let's do text dash,,,
white and padding x3. Padding,,,
y3. And what else? We're going to make,,,
this full. So width or,,,
wful. We'll make rounded corners. On,,,
hover, I want to make the background a,,
little darker. So let's say hover BG red,,,
uh do,,,
600 and also,,,
transition and then inside the button,,,
we'll just have close,,,
ticket. Okay. And also make sure that,,,
you add a type on this and set that to,,,
submit.,,,
So now the last thing we have to do is,,,
once we submit,,,
it, we want to run the use effect and,,
check for the success. If it's,,,
successful, we'll show the the toast,,
success message. If not, we'll show the,,
error. So let's put that um we'll go,,,
right,,,
above where do I want to put this? Yeah,,,
we'll go right above this if is closed,,,
and let's say use,,,
effect and we pass,,,
in a function. And then as far as the,,,
dependencies, we just want to look at,,
the state. So when state changes, this,,
will run. And we're going to then check,,,
for,,,
state.uccess. And then let's do,,,
toast.uccess. Uh and then for the,,,
message that's going to be whatever is,,,
coming from the action. So state,,,
message and then let's say else,,,
uh else,,,
if else if the state message. So if it,,,
has a message but it's not successful.,,,
So,,,
state.uccuess then obviously that means,,,
there's an error. So we're going to,,,
toast.,,,
and still show the state message which,,,
should be an error,,,
message. Okay. So now we want to use,,,
this close button and it's going to be,,,
on the single page which is going to be,,,
in the app folder tickets and then the,,,
brackets ID page. So from here let's,,,
import the close ticket button and then,,,
we're going to put this down at the,,,
bottom. So underneath the link and I,,,
only want to show if the ticket is is,,,
open. So let's say if the ticket status,,,
if it's not,,,
equal to closed,,,
then we're going to show,,,
uh let's say,,,
close close ticket button and then,,,
that's just going to take in the ticket,,,
ID.,,,
So set that to the ticket. ID and then,,,
we also want to set it or set pass in is,,,
closed which will set that to an,,,
expression of,,,
ticket.status,,,
equals closed. Okay. So if it's closed,,,
that'll be true. If not it'll be false.,,,
So now let's save that. Um you're,,,
importing these action state. Oh, so I,,
forgot to make the client ticket button,,,
a client component. Our close ticket,,,
button a client component. So we just,,,
want to do use client at the top because,,,
we are using,,,
hooks. All right. So now we should see,,,
the button. There it is. Close ticket.,,,
So I'm going to go ahead and click that.,,,
And now the button goes away. Okay. So,,,
we're able to close it. And just to,,,
double check, I'm going to go to Prisma,,
Studio and reload. And let's check out,,,
the status field. And you can see Brad's,,,
ticket, the status is,,
closed. Now, you can handle this how you,,
want. What I'm going to do is when we,,,
list out the tickets, if it's closed, I,
want it to be like faded out. In fact,,,
I'll add a new ticket just so we can see,,,
the difference. So, let's say Brad's,,
Brad's ticket two.,,,
This is a sample ticket and I'll make,,,
this medium submit. Okay. So now this,,,
one's closed,,,
right? So what I'll do is go to where do,,,
we want to handle this? It's going to be,,,
in the ticket,,,
item component, right? So ticket item,,
because that's what each one of these is,,,
a ticket item. And what we can do is go,,,
right above the return and let's create,,,
a variable called is uh is closed. And,,,
we'll set that to let's say ticket dot,,,
oops,,,
ticket.status and set that to close. So,,,
if it's closed then this is closed will,,,
be true. Now we can use this to add some,,,
dynamic styles. So for instance uh the,,,
the div that wraps it like I said I want,,,
to set the opacity to uh to,,,
50. So in order to do that instead of,,,
for the class name instead of for using,,,
quotes let's do a curly brace and then,,,
brackets end it with um no not curly,,,
brace curly brace and back tick and then,,,
end it the same way. And then what we'll,,,
do is add let's see I'll just go on to,,,
the end here and use our template,,,
literal syntax and say if is,,,
closed then I want to have a class of,,,
opacity- 50 else then just,,,
nothing. So now if I save that and we,,,
take a,,,
look now this is faded out right because,,,
it's closed. However I can still click,,,
the view ticket button. and I don't even,,,
want to be able to do that. So, let's uh,,
and it's up to you on how you want to,,,
handle this. Right now, we're getting,,
into UX stuff. So, it's really up to,,
you, but I'm choosing to to make this,,
button gray and,,,
disabled. So, we'll come down to where,,
we have the,,,
link and let's see. I'm,,,
gonna for the class name, same thing.,,
I'm going to use curly brace back tick,,,
and then where it ends instead of a,,,
quote we'll do back tick curly brace and,,,
I want to take this bg blue and the text,,,
white I'm going to cut,,,
that and then at the the end here again,,,
we'll open up our this syntax here and,,,
say if is closed then show something,,,
show a class else show something else,,,
now in the something else if it's not,,,
closed is where I want to have that BG,,,
blue and text white and also this hover,,,
BG blue which I'm going to cut and put,,,
into,,,
that. Okay. Now, if it is closed, then,
I'm going to add a BG-,,,
gray-400 and,,,
text-g,,,
gray- a to click it. And I don't want,,,
the pointer the you know the cursor to,,,
be a pointer. So we can use the class,,,
cursor,,,
dashnot dash allowed and also the,,,
pointer dashvents,,,
dashnone. So these tailwind classes will,,,
make it so that we can't click on it and,,,
it doesn't turn to you know the hand to,,,
the pointer. So now I can't I can't open,,,
this. I mean, you could still,,
technically go to type in the URL to go,,,
to the page, but it's not a big deal.,,
Uh, I just want something to show that,,
the ticket is closed. Now, the last,,
thing I want to do is this new ticket,,,
page. If I log out, I can still go to,,
the page, which obviously we don't want,,
that. So, to fix that, we're going to go,
to the app folder, tickets, and then the,
ID folder and page tsx. And from here we,,,
want to bring in no not this. This is,,,
the details page. Sorry. We want to go,,,
to new page,,,
tsx. And from here we're going to import,,,
get current user. And then we're just,,,
going to go right above the return con,,,
user set that to await get current,,,
user. And then we're just going to check,,,
if not user. Okay. Okay. So if the user,,,
is not logged in then I'm going to call,,,
redirect from next navigation and I want,,,
to redirect to the slash,,,
login. So if I save,,,
that and come back over here now you can,,,
see I get,,,
redirected. So now I can't visit that,,,
page if I'm logged in. I mean if I'm not,,,
logged in. And if I log in we'll log in,,,
as John this time.,,,
Now I go to new ticket and it works. And,,,
that's it. So hopefully you guys learned,,,
a lot from this. And just to show you,,,
what our Sentry dashboard looks like. So,,,
it just gives us a full history of,,,
everything that's happened in our,,,
project, whether it's an error, whether,
it's a log that we added. So um you can,,,
see here we got this element type is,,,
invalid expected string. So, I mean, we,
we were able to fix this stuff as we,,,
went along, but if it's something that,,
you really get stuck with, then this can,,
really help. Uh, and again, it just,
shows it just shows everything that,,,
happened. So, unauthorized ticket,,
access, viewing ticket details. I mean,,
it's up to you on what you want to log.,,,
You probably wouldn't log as much as we,,,
did because for every user, you're,,
probably not going to want to just like,,,
show if they viewed the ticket details,,,
but uh but you can, you know, and,
there's a whole bunch of other stuff,,,
that we didn't get to. I just basically,,,
showed you the basics. So, yeah, I mean,
I would suggest taking this project and,,,
and just run with it. Add some more,,,
features. You could even create a whole,,,
admin area where, you know, you could,
respond to the tickets and maybe add,,,
file uploading. There's just so many,,,
different features you could add and and,,,
just have a really good learning,,,
experience. But I appreciate you guys,,,
sticking around, watching it, following,
along with me, and I'll see you in the,,
next",,,
VR3p7almo_c,"hey what's going on guys so I got a
really cool project for you today we're
going to be building a full stack AI
powered chat app called chat Ai and I'm
just going to give you a quick demo
before I explain anything so we just log
in and and you just have to put your
name and email and then we can go ahead
and say something we'll say like um
we'll say who we'll say who was the 10th
president of the
US okay so it says AI is thinking and
get back the 10th president of the US
was John Tyler now it's going to keep
the context so if I just say simply who
was the 12th it's going to know what I'm
talking about so the 12th President uh
was Zachary Taylor all right and if I
were to log out or leave the chat and
then come back with the same email my
chat will be saved all right now to
achieve this we're going to be using VJs
and pinea for State Management on the
front end and no. JS and Express on the
back end and we're using typescript on
both the front end and backend now
there's a bunch of technologies that we
need to incorporate to achieve this for
the whole artificial intelligence aspect
we're using the open AI API uh the
completions API using
gp4 and then for the whole chat aspect
we're using stream chat at getstream.io
so stream offers sdks for powerful
applications that Implement real-time
chat as well as video and audio and and
this is just one of the many ways to use
stream chat so like I said it's going to
handle the whole messaging aspect the
users the channels now even though
stream does store your chat logs and
stuff we're going to set up our own
database our postgres database with neon
so neon offers serverless postgres
databases that you can literally set up
in like 10 seconds and there's features
like branching it's extremely scalable
and we're going to set it up so that our
our project saves the users and the
chats in the neon database and then
we'll be using the drizzle orm to
interact with the database uh as well as
create schemas run migrations and so on
and then at the very end we're going to
deploy the back end is going to go to
render so render doc um and then the
front end The View application will go
to versel all right so this is just an
all-in-one Dev to deployment project I
have the repositories for both the front
end UI and the back backend API in the
description so I would suggest you
follow along with me I think that's the
best way to learn so let's jump into
it all right so I just want to quickly
go over some of the websites where you
can find the documentation for different
parts of this project so first off we
have stream chat which we'll be using
for all the chat aspects and you can
find the docs at getstream.io if you go
to Developers and we're using the chat
messaging there's also video and audio
capabilities if you want to check that
out but if we go to chat messaging
there's all these platforms that we can
choose from and we're using it on the
back end so you want to choose the the
node.js option and then from here you
have all different topics like users
tokens permissions um creating channels
and all that good stuff so that's for
stream chat and then for neon which is
our Cloud postgres database you can go
to
neon.pdf
here and then finally we have openai
which is at platform.
open.com and this is what we're using
for the whole AI aspect of it and we are
going to have to generate API keys for
open AI for neon and for stream so you
might want to just just keep these
websites open so let's go ahead and just
open up a terminal and just navigate to
wherever you want to create this project
and we're going to have two separate
folders for the back end and front end
the back end will be chat AI API and the
front end will be chat AI UI that'll be
the vue.js back end will be the node and
expr Express so I'm going to put both in
a parent folder so let's create that so
I'm going to say make directory and chat
Ai and then CD into that chat AI folder
and make another directory called chat
AI uh- API and that will be our back end
and I want to open that up in in vs code
so I'm going to say code and then chat
AI API and of course if you want to use
a a different text editor that's
absolutely fine
okay I'm going to be using my integrated
terminal so I'll go ahead and open that
up and we just want to run npm in nit of
course you need to have no JS installed
and let's go through this so package
name version that's good description
let's say this is going to be a backend
for uh we say for an AI chat application
and then s uh entry point I'm going to
call server say
server.js and then
author you can put your own name if you
want and MIT for the license so type I'm
going to be using ES module so we want
to put module instead of commonjs I mean
if you want to use commonjs you can but
um we'll be using import all right so
now that we've done that let's install
our dependencies and I just want to
quickly go over what our backend
dependencies are going to be so we have
Express of course which is our backend
web framework cores which which allows
access to resources from a different
origin that's because our front end and
back end will be on different domains
EnV allows us to use environment
variables from a EnV file stream chat is
the official JavaScript client to work
with stream chat in nodejs or in
JavaScript and then open AI is the
client to work with the open AI API
typescript we're going to be using on
both the back end and front end a little
bit more to the setup in the the back
end but it's not too bad we're going to
be using something called TSX to execute
our typescript because even though with
node.js version I think 23 um typescript
is supported but all it really does is
is strip your types it doesn't actually
compile it doesn't execute it so that's
where TSX comes in if you want to use TS
node or something else you can and then
drizzle is the OM to interact with our
postgis database and then drizzle kit is
a CLI for drizzle and we'll install the
drizzle stuff a little later but let's
install some of these dependencies now
so let's say npm install Express we want
what else cores we want
EnV um stream
chat so stream Das chat and also open AI
I think that's I think that's all I want
right now as far as regular
dependencies now for for Dev
dependencies let's say npm install D-
uppercase D and we want
typescript and I'm also going to install
TSX to execute the typescript and then
for types we'll do types SL node let's
say at types SL
Express and also types slash
cores now as far as uh as our typescript
config goes we're going to create our TS
conf fig with npx and let's say TSC D-
init and I'm going to open that up and
there's I have a configuration that I'm
going to use if you want to use the same
one you can just get it from the link in
the description the the GitHub repo but
I'm going to paste this in so it's
pretty simple we're going to I want to
use es modules and all that all the
latest features so using node next for
module and module resolution and Es next
for the Target our output directory when
we compile our typescript is going to be
slash and then our root directory where
we write our code is going to be SL
Source okay we're using strict mode or
strict type checking U and then we're
allowing importing commonjs modules
we're allowing importing of Json files
as modules and we're skipping the
Declaration files in the node modules
folder to speed up compilation so pretty
simple setup we'll go ahead and save
that file and and then we want to create
our scripts in package.json so we want a
Dev
script and of course with our Dev script
we want to compile our typescript so
we're going to use TSC so the typescript
compiler and then we're going to add--
no emit because we don't actually want
to produce JavaScript files when we run
this we're just running our Dev server
and we just want to compile our
typescript and we also need to run
TSX as well and we're going to run that
in watch mode okay so no need for like
node Monon or anything like that and
then that's going to be source and then
server. TS will be the entry point so
that's what we want to run okay and then
to build our project out to just compile
we want to run just
TSC and then the start script so to run
in production is just going to be node
and then it'll be in a disc folder and
it'll be called
server.js so that's all we need for uh
for our npm scripts all right so now
let's create a folder in the rout called
Source that's where we will write all of
our code and let's create our entry
point which is going to be
server.
TS I mean if you don't want to use
typescript that's fine we're not doing
too much as far as typescript goes so
even if you're not familiar with it you
should be all right Honestly though it's
really becoming the standard so I mean
you're going to be creating TS files and
TSX files all the time so I mean I would
suggest learning the basics of
typescript if you don't know it so let's
just create a basic Express server so we
want to import Express
from
Express and we want to
import uh let's see we want to import
cores as
well and we also want to import EnV and
then we want to call env. config
and then we'll initialize our Express
app so set that to
express okay we need have some
middleware to add so cores requires us
to add an
app.use and we're also going to do
app.use
express. Json because we want to be able
to um when we send a request we want to
be able to send Json in the body we also
want to be able to send form data so
let's also do app.use and say Express
and then URL encoded and then just pass
in an object with
extended and set that to
false all right and then we want to
create our Port variable and I'm going
to set the port in the EnV so I'll say
process. env. port or then use
5000 and then let's just uh take our app
and let's listen on that Port whoops
listen on Port and then when that
happens we'll just run a
console.log and put in some btics here
and we'll say the
server server running on and then output
that Port variable all right so let's um
let's create ourv so that's going to go
in the rout not in the source
folder and from here we'll say port and
for now I'm just going to set it to
8,000 because I want to make sure that
it's actually reading this value so down
at the bottom here at the terminal or
wherever your terminal is let's run npm
run
Dev okay so server running on 8,000 and
it'll compile any typescript we have
obviously we don't have any right now
and before we start to add our route I
just want to make my my first commit so
I'm going to open up a new terminal here
and let's run and get a
knit and then we'll create our
do get
ignore uh CU you definitely don't want
to push thatv so let's add not node
modules and Dot
EnV all right so I'll say get add
all get commit oh what's this don't care
get commit and we'll just say initial
Express setup set up our initial Express
and TS
setup all right so now what we want to
do is have make our first route and what
this is going to do is it's going to
reach out to to stream chat and it's
going to register a user with stream
okay because you can actually log into
to your stream dashboard and you can see
the users that were registered for um
what is this doing here for your for
your application
and it when I say register it's not
traditional authentication where you're
going to have a password and stuff
basically you come to the the app and
you put in your name and email and then
from there you get sent to the you know
the the form to interact with the AI so
let's start by just creating a route now
since we're using typescript we're also
going to bring in from Express we want
to bring in uh request and response
uppercase R and let's create our first
route we'll go down here let's say I'll
put a comment let's say register user
with stream
chat and it's going to be a post request
so app post and for the endpoint we'll
call this excuse me we'll say SL
register D
user and then we're going to have an
async function
here okay and then as far as what this
returns will be a
promise and we're just going to add any
to this and then it's going to take in
the request and response and we want to
set those to those types so request and
then res which will be
response and then just to test it I'll
do a res. send and we'll just say test
okay so now we have our first
endpoint now as far as how you test your
endpoints it's it's really up to you I I
like to use Postman and I have the
postman extension for vs code so if I
click on this icon right here I can make
a a new HTTP request and it just opens
up in a new tab which is nice so I'm
going to make a post request to
http and we want Local Host and I have
it running on 8,000 and we want to do
register Das
user and you'll see I get a 200 response
and I get test so we know that that that
route is working we also want to send an
a name and email so why don't we do a
little bit of validation here we'll say
if or first of all let's get the name
and email so that'll be in the request
body so let's say cons and then we'll
destructure the
name and email from
requestbody and then we'll say if not
name or not
email then we want to send back an error
so so we'll return res Dot and let's do
a status of 400 which is a user error
and then we'll attach the
Json uh let's just put an error here and
we'll
say
name name and email
are
required and then after the if I'll just
do a res.
status say 200 and Json
message
success all right so let's try that out
so if I just send as is I get the error
but if I send a name and email in the
body I can either do Json data or I can
use the form URL encoded so I'm just
going to add
name and
email and then send and I get success
all right so now we want to start to
work with stream we installed that you
should have the
stream client so if you just look in
your dependencies you should have stream
chat that's what we're going to use now
in order to create an instance we have
to we we need our API key so we're going
to have to go to the getstream.io and
just you can log in with with either
GitHub or Google so I'm already logged
in I'm going to go to my dashboard and
you don't have to pay anything or enter
any credit card info for this we want to
create a new app and this has to be
unique so I'm just going to say chat
Dash uh we'll say chat Ai and I'll just
do das Brad you could put your own name
whatever it just it has to be unique and
then just choose the locations for the
the chat and video storage and feed
storage that's closest to you and click
create app and then you'll have your
keys right here we have a key and a
secret we need both of these so I'm
going to copy the key I'm going to go
into myv and we're going to add stream
API key and set that to the key and then
we also want the stream API
secret which we can get from right here
just going to copy
that okay so I'll paste that in now that
we have that we should be able to create
an instance so let's bring in the
library so import or the client and
that's called stream chat
and then we're going to create it or
initialize it right above our row let's
say
initialize initialize the
stream stream chat or
stream client so we'll say
const we'll call this chat client and
I'm going to set that to the the stream
chat stream chat Dot and then it's get
instance and then that's going to take
in your API key and your API secret so
let's say process
Dov Dot and then stream API
key and I'm going to put a bang on the
end of this which is a nonnull assertion
so I'm basically telling typescript that
this is it's not going to be null or
undefined it's definitely there and then
we'll do the same with the secret that
gets passed in as
well okay so now we should have our chat
client initialize now we can use it in
our route and the first thing I want to
do is is create an ID because when you
create a user it needs to have a unique
ID and it's up to you on what you want
that ID to be I mean you could install a
package like uuid but what I want to do
is take the email you don't have to type
this out but let's say that the email is
Brad
gmail.com then I want the ID to be
brador gmailcom
so that way we have a unique ID but it's
also readable it's understandable all
right so let's
um let's do that so I actually want
to after we do the if here let's wrap
this in a TR
catch and I'll move this this success
I'm going to move that into the try and
then let's copy it and then in the catch
if something goes wrong then I'm going
to send a 500 error so let's change the
status to
500 and for the message we'll just say
or it's actually going to be
error so
error we'll say internal server
error all right now in the try let's
generate the ID so we want to say user
ID and we have access to the email that
they enter so we're going to use replace
and replace takes in it'll take in what
we want to replace and what we want to
replace it with so and we pass in a
regular expression I know a lot of you
guys and including myself hate regular
Expressions but this is pretty simple so
in Brackets we're going to use the uh
the carrot so basically we're saying if
not if it doesn't match whatever I type
here which is going to be a lowercase A
to Z so a low lowercase letter or an
uppercase A to Z or 0
to9 or an underscore or a dash if it's
anything other than that I want to
replace it with an underscore and I want
this I want it to be Global so I'm going
to put SLG so the second argument you
pass in is what you want to replace it
with which in our case is going to be an
underscore okay so that'll generate the
user ID in fact we can go ahead and do a
console log of user ID just to check and
then if I make a request again with this
Brad at Gmail and I send if we look down
in the console brador gmailcom
and again if you want to do something
different for IDs you
can so yeah let's get rid of the console
log and now I want to check to see if
the user exists in stream chat so let's
say check if user exists and we can do
that let's put this in user
response and this is a synchronous so we
want to do await and then chat client
and then there's a method called query
users so we want to use that and then
what we can do is pass in an object
where we want to match the ID and we set
that to an object with this money sign
EQ so we're saying if it equals the user
ID and we can do a console log of that
as
well and then just go ahead and send
and if we look down here you see it
gives us an object with a duration and
the user's array which is empty because
that the user doesn't exist that um in
my case it would be the Brad gmailcom
doesn't exist so what we can do after
that after we check if the user
exists or after we set that variable
we'll say if not user response. users.
length so we're saying if that array is
empty then we want to add new user
to
stream so we can do that with the uh
there's a few different methods we can
use I'm going to use upsert user which
will create or update a user so let's
say chat
client.
upsert we want to do it's just a single
user so upsert user and then we're going
to pass in an object I'm going to assign
the ID to the user ID which will be that
formatted email the name set that to
name and the
email and then I'm also going to add the
role of user because there's there's
different roles there's an admin user as
well in fact if we look at
the the docs here if I search for
roll permissions let's see yeah so right
here buil-in roles so user is a default
user role you have guest um you have
admin which is a role for users that can
perform administrative tasks with
elevated permissions so we just want a a
regular user now I should also mention
that this is where you you can also
generate a token so let's
see um we could
call right here create token however
we're we're using this on the server
side with an API key so we don't need to
do this but if you were using this from
you know react or view or some kind of
front end then you would want to create
a token and you'd want to save that and
then send that with your um you know the
rest of your requests so but we don't
have to do
that so yeah I just want to return now
basically just return the user ID the
name and the email so let's go right
under that if actually we already have
this we might as well just use that um
yeah we'll get rid of the message and
let's send the user
ID the name and
email and I think that should do it so
we can try it out now so I'm going to
come back here I'm going to register the
user Brad gmail.com let's click Send and
I get back a 200 I get back my that's my
user id formatted from my email my name
and the actual email now you should be
able to actually log into your dashboard
so if I go to my chat AI app here and
under chat messaging if I go to Explorer
you can see I have my chat AI Brad app
has an app ID app name if I click
users I got Brad 90 not sure where that
came from but right here is the the user
that I just created and it has all these
fields it has the ID the name language
role created at updated that if the user
banned if they're online if they're
invisible so lots of information uh and
you can delete users too in fact I'll
delete that Brad 90
user oh it's an original dashboard user
okay so I can't delete
that all right so we're able to to
register users now for the chat and
later on we're also going to implement
our neon postgres database so that it
saves users there as well and it also
saves all the chats all the logs but
before we do that let's create our chat
route chat route so that we can send a
question or or whatever it is we want to
send to the AI and use the open AI API
to respond to that so let's first of all
bring in the open AI client so up at the
top here we'll say import and it's going
to be open AI from open Ai and then we
need to
initialize open AI here as well just
like we did with stream so right here
I'll say
initialize open AI now we are going to
need an API key so why don't we do that
real quick I'm going to jump over to
platform. openai
and log
in so from here if we click on settings
go to API
Keys you should see them here um I'll
just create a new
one let's say
chat and for project I'll just use um
project one
okay so I'm going to copy that and then
I'm going to go ahead and add that to
myv so here let's say opencore
AI uh actually no let's do open AI
underscore and then API uncore key and
then set
that okay so now what we can do is
initialize here let's say
const open a excuse me open AI set that
to new uppercase o Open Ai and then pass
in our API key which is going to be
process.env
do open aore API key okay so that'll
initialize that now let's create our our
chat route so I'm going to go under the
register
user and let's say
um what should I say here let's say send
message
to Ai and this is going to be a post
request as well so app post and the
route is going to be just slash
chat and then let's say
async okay I'm going to return say
promise and
any and then we're going to pass in the
request and
res
response all right so the first thing I
want to do is get from the body there
should be a message and there should be
the user ID because when you register a
user you get the ID and then you're
going to send that along to the chat
route so let's say const and let's get
the
message and the user ID from the
request.
body and then we want to just make sure
that that exists so we'll say if
not message or
not user ID then we're going to want
to return let's say status
400 and
Json we'll say
message and
user are
required all right then we're going to
go under that if statement and let's
open up a TR
catch and in the catch we're going to
I'll just copy this response
here except we're going to change this
to a
500 and then for the
[Music]
error for the error we'll just say
internal server error
and in the try first thing we're going
to do is let's say
verify user
exists so we'll say const
user response we want to set that to a
wait on the chat client and then we're
going to use Query query
users pass in an object we want the ID
to match the user ID
okay after we do that let's check that
response we'll say if not user response
remember it has an array called users so
we're going to check that we're going to
check the
length and basically if it's an empty
array then we know the user isn't hasn't
been found it doesn't exist so let's
return res. status and four we'll do 404
because it's a not the user's not found
and then we'll we'll do
Json and let's pass in an
error and for the error we'll say user
not
[Music]
found and we'll say please register
first all
right now before we do anything else
let's just let's just check if that
works so we'll just do a simple res.
send and just say success
okay so when we make our request now to
slash
chat it should reach out to stream and
uh in the body I don't
have uh I don't have anything so I
should get this message and user are
required so let's add in the message I'm
going to say what
is the capital
of
Massachusetts and then for the user
ID for the user ID I'm going to put a
user that doesn't exist I'll just do one
two three and if I send that I get user
not found please register first now we
know that the user ID for me
brador gmailcom we know that that exists
so let's try that out and we get success
so so far so good now what we want to do
is start to work with open Ai and we're
going to use the chat completions API
which will work like chat GPT you send
it a prompt and it sends you a response
so let's go right here where I have the
res. send and delete that and let's send
the message
to open Ai and we're going to be using
the gp4
model so we'll say con
response and set that to
await open AI and it's going to be chat
dot completions Dot and then
create and then we want to pass in an
object that has the model that we want
to use which in this case is going to be
GPT you have all these different options
we're going to do
gp-4 so that's the model we want and
then we send messages which is going to
be an
array and we're going to pass in an
object here with a rle of the user
and then the content is going to be the
message all right so whatever we add in
the message which in my request is just
what's the capital of Massachusetts now
I want to show you what that gives us so
why don't we just do a console log of
the response and then as far as what we
return I'll just let's just do uh yeah
we'll just say res. send
success okay I just want to see what
what this gives us so let's come back
over here and I'm going to send the same
response with the message and the
correct user
ID we get success but let's take a look
in the in the console here and we get
this
object has an ID blah blah blah what we
care
about is this right here this a choices
array and there's an one object in there
with a message and we can't see it here
we just see object
um yeah I don't think we can see that so
why don't we log that so we got console
log
response and then it's going to be dot
choices which is an array we want the
first and only item in that array and we
want the
message okay let's send it
again and there we go so we get an
object with the role is assistant okay
so it's the the AI That's responding has
a role of assistant and then content is
what we're looking for the capital of
Massachusetts is
Boston all right so it's as easy as that
to to create a prompt and get back a
response so now obviously we want to
return that response from the endpoint
so let's come back in here we know how
to access it now right with this it's
actually
message. content that will give us the
exact you you know what we're looking
for so let's get rid of the console log
here around
this and let's put this into a variable
we'll say const
AI
message and um let's type that it's
going to be a
string and set it to that so response
choices message content now I am going
to use um optional chaining here
for for uh message
so just add a question mark there and
then we also want to use a nullish
coalescing operator because if that
happens to be null or whatever then
we're just going to make it no
response from AI that'll get rid of any
typescript errors now before we actually
send this AI message back from this
endpoint we need to create a channel
which is used for managing conversations
in fact if we go to the docs here and we
search for Channel
and then creating
channels so it shows us how to do that
we store a reference in a variable using
our client and then. channel pass in the
type which is going to be messaging okay
there's different types if we come down
here and look at type you have um live
stream messaging team gaming Commerce
messaging is is for like you know
one-on-one conversations or group chats
um that's uh typical type for things
like that and we're having a one-on-one
chat with it's just not with a user it's
with the AI so that's what we're going
to use and then once we store the
reference we can then call channel.
create and then we can actually do
channel. send message as well which will
send the message through through the
channel it'll get stored and so on so
let's um let's do that let's go right
below the AI message and let's say
actually I'm going to just put a comment
here let's say
create channel or it's actually create
or
get
channel and we're going to create the
reference with our chat
client. channel the type is going to be
messaging and we can also pass in a
unique ID which I'm going to use back
ticks and then just say chat Dash and
then the um
the user
ID so that'll be a unique identifier and
then we want to pass in an object with
the name of the channel which I'm going
to call we'll call it AI
chat and then we also need to add this
created uncore byor ID which if you were
chatting with another user then it would
be that user but since we're using an AI
we're going to call it AI
bot all right so that will will create
the reference now we need to call
channel. create like I just showed you
in the docs and then after that we can
do uh sorry this needs a
wait and then after that we can do await
channel.
send
message and pass in an object with the
text which will be the AI message so AI
message and then the user ID and make
sure you do user uncore ID that's what
the key is it's not camel case it's
underscore and then that's going to be
the AI bot that sends this message okay
now as far as what we want to respond
with let's do res. J actually we'll do
status 200. Json and
then pass
in um an object oops passing an object
with a reply and that reply will be the
AI
AI message
oops not Al message
AI okay so yeah that should do it and
then I just want to do a console log
here as well if there is an error let's
put um error
generating AI
response and then also the
error all right cool so let's try that
out I'm going to come over here and I
have I have my message I have my user id
let's go ahead and
send and we get an object with the reply
the capital of Massachusetts is Boston
and what's cool is now if we go back to
the stream
dashboard and if we go to you know chat
messaging Explorer we have the AI bot
user here and you can see under channels
we have messaging so it's that's the
type and then we have the unique
identifier which is chat D Brad Gmail
com because I set that right here right
that's the unique identifier and then we
should be able to see any messages that
are in through that channel so we have
one message here and it shows the text
which is the capital of Massachusetts is
Boston so whatever the AI sent us
back so pretty cool now what I'd like to
do is Implement our own database I mean
we do have the the you know you can see
the chats and using stuff through stream
but a lot of times you want to do more
with it so you'll want to store the chat
logs in your own database so I want to
expand this to to do that and also store
our users so you want to create uh a
postgres database through neon so I'm
going to go ahead and log in
here all right and then we're going to
go to well yeah I guess we'll create a
new project so once you log in and this
interface is is so easy to use and it's
so easy to set up a database it's
basically just a couple clicks so I do
want to create a new project I'll call
this
uh
tutorial and you can choose your postr G
version I'm going to stick with 17 your
database name I'm going to call this
chat chat Aid
DB and I'll just choose AWS and then
create and you can do a lot from this
interface I mean you can run straight
SQL queries there's branching so just
like you have branching with GitHub with
your code you have branching with your
databases so if you want to whatever add
a new feature and you don't want to
affect the main branch you can just
create a new Branch work with that once
that's all set and you know that's what
you want to use then you can merge the
branches so really cool and what we",,
",,
 want,,,
to do now is just click connect and that,,,
will give us our connection string so,,,
right here we want to copy,,,
this and actually let's click show,,,
password too and then copy and we want,,,
to store that that uh reference to the,,,
the database the database string in ourv,,,
so let's go in there and let's call this,,,
database uncore URL and go ahead and,,,
paste that,,,
in all right right so now that we have,,,
that we need a way to interact with our,,,
database and that's where drizzle comes,,,
in drizzle is an OM it's typescript base,,,
it's really easy to use um but one thing,,,
we do have to do since we're using neon,,,
is use the neon database serverless,,,
adapter so we do have to install that as,,,
well so let's come down to the terminal,,,
here and let's run npm install and we,,,
want,,,
drizzle Das omm and then we also want to,,,
install at neon database,,,
SL,,,
serverless okay so it just allows us to,,,
to use um drizzle and to use this with,,,
with uh neon's,,,
infrastructure and then we also want to,,,
install drizzle kit as a a Dev,,,
dependency so let's say npm install Das,,,
uppercase D and then drizzle dkit and,,,
this is a CLI and we can run migrations,,,
from it and stuff okay so now that those,,,
are installed a couple things we have to,,,
do a few files we need to create so one,,,
is going to be our database config file,,,
which I'm going to put in the source,,,
folder I'll create a new folder called,,,
config and then in that config we'll,,,
have a database. TS file and this is,,,
where we configure That Neon database,,,
adapter so let's go ahead and import a,,,
couple things here first one is going to,,,
be Neon and that's going to be,,,
from this right here neon database SLS,,,
serverless then we want drizzle so,,,
import,,,
drizzle and let's see we're going to,,,
bring that in,,,
from drizzle omm and then it's going to,,,
be slash neon,,,
HTTP and then we want to bring in from,,,
the,,,
dotv package we want to bring in the,,,
config function because we're going to,,,
be using environment variables so let's,,,
go ahead and,,,
load environment variables and we do,,,
that by calling config and then since I,,,
have this in you know in the source,,,
folder than in the config folder I'm,,,
just going to specify the path to the,,,
EnV file you can do that by passing in,,,
an object like this just say the path,,,
and it's justv because it's in the root,,,
okay cuz that's going to start in the,,,
root all right then we just want to,,,
check for the database URL so if not,,,
process.,,,
env.,,,
database uncore,,,
URL then let's,,,
throw a new,,,
error and we'll say,,,
database uncore URL is,,,
undefined okay so we got that um next,,,
thing we want to initialize the neon,,,
client so actually going to put a,,,
comment here so init the neon client and,,,
we're going to put that in a variable,,,
called,,,
SQL so we set that to,,,
Neon and that's going to get passed in,,,
the database URL so,,,
process. EnV do database URL and then we,,,
need to initialize,,,
drizzle and that's going to be exported,,,
because we're going to be using this in,,,
other files so we're going to call this,,,
uh variable of DB and then we set that,,,
to drizzle and that gets passed in the,,,
SQL variable which is the neon client so,,,
we can close that file up and now we,,,
want to create our schema and if you've,,,
used like Mongoose or SQL eyes or Prisma,,,
we create a a model or a schema of our,,,
data and then we can use drizzle kit to,,,
run the migration looking at that schema,,,
and it will create the tables for us so,,,
I'm going to put this um in let's see,,,
we'll have in the source folder I'll,,,
have a folder called DB and then in DB,,,
will have a schema. TS,,,
file all right so let's start off by,,,
importing what we need from drizzle so,,,
we need PG table which is going to,,,
create post postres tables for us and,,,
that's going to come in from drizzle o/,,,
PG core so in addition to that any,,,
Fields any field types that you want to,,,
use you bring in here so for instance,,,
serial which is what our primary key IDs,,,
are going to be and then text and then,,,
timestamp I believe those are the only,,,
ones we,,,
need so what we do now is export for any,,,
any table we want to create we export uh,,,
uh PG table function that takes in the,,,
name of the table and then all the,,,
fields we want to use so for instance,,,
for the chats let's say const,,,
chats and we want to set that to PG,,,
table and the name of the table will be,,,
chats and then we pass in an object with,,,
all the fields that we want so for,,,
instance the ID is Going to Be A Serial,,,
type serial field and that's going to be,,,
named ID and then I want that to be the,,,
primary key so we can tack on do primary,,,
key next thing we want is the user ID so,,,
that's going to be text and user undor,,,
ID uh and then let's see we're that's,,,
going to also be not null so we'll tack,,,
that on then we have the message so,,,
let's say message of the,,,
chat and this will be message as well,,,
then we want the reply which will be the,,,
you know the message that's sent back,,,
from um from the the AI so that'll be,,,
text as well,,,
and,,,
reply and not,,,
null all right and then the last thing I,,,
want here is created,,,
at so created at is going to be a Tim,,,
stamp and that's going to also be,,,
called Crea underscore uh,,,
at and let's add on to that I'm going to,,,
use default now which will do the,,,
current time stamp and that should also,,,
be any parenthesis there that should,,,
also be not,,,
null all right so that's our our chats,,,
now let's do the users because I want to,,,
store users as well so we'll say con,,,
users not,,,
exports so cons user set that to um PG,,,
table,,,
and the name of the table will also be,,,
users and then we want to pass in all of,,,
our Fields so first thing is going to be,,,
the user,,,
ID which will be,,,
text and user ID for the column name and,,,
this is going to be the primary key so,,,
we want to add that all right then we,,,
get the,,,
name so name will be text as well name,,,
for the column name and not,,,
null all right then we got,,,
email so let's change this and this to,,,
email and then we want a created at so,,,
I'm just going to copy this,,,
one because it's the same,,,
thing okay so that those are the two,,,
schemas and the two tables we want to,,,
create now drizzle is is really great,,,
when it comes to typescript we can have,,,
our type,,,
inference,,,
in inference,,,
for drizzle,,,
queries so basically when we insert a,,,
chat for instance it's going to be,,,
structured in a specific way with a,,,
specific type and we can add that here,,,
the type inference for the chat insert,,,
for the chat select for the user insert,,,
and for the user select so we want to,,,
export the so we can use them outside of,,,
this file and we're going to say type,,,
and then chat,,,
insert and we want to set that to type,,,
of and then chats and we want this infer,,,
insert okay money sign infer insert and,,,
then we want to do the same for the chat,,,
select which is going to be infer,,,
select and change this to,,,
chat select okay and then we want to do,,,
the same thing for users so what I'll do,,,
is just uh whoops what I'll do is just,,,
grab both of these and copy those down,,,
and then we're going to change this,,,
first one here to,,,
user insert and make sure we change this,,,
to,,,
users and then this one here change that,,,
to users and this one is going to be,,,
users,,,
select like,,,
that okay so that takes care of the type,,,
inference for those types for insert and,,,
selects now we want to create a config,,,
file for for drizzle or for drizzle kit,,,
because it needs to know where the,,,
scheme is are it needs to know um where,,,
the migrations will go things like that,,,
so that this is going to go in the root,,,
because that's where it looks so in the,,,
root not in the source but in the root,,,
we're going to create a,,,
drizzle. config,,,
dots all right and we want to import,,,
let's see we're going to be using EnV so,,,
we want to bring in the config from that,,,
so that's going to be from EnV and then,,,
we're going to,,,
import Define config and that's going to,,,
come from drizzle,,,
kit and then let's just run uh let's say,,,
config because we're going to be using,,,
the environment variables to get the,,,
database URL and again I'm just going to,,,
specify path and it's just in the root.,,,
the,,,
EnV okay and then we want to,,,
export as default Define config and then,,,
that's going to get passed in a couple,,,
things so first is going to be,,,
schema and that's going to point to what,,,
we just created which is going to be,,,
from the root in the source folder and,,,
then in the DB and then,,,
schema schema.,,,
TS okay so that's our schema um then we,,,
have out so this is going to be the,,,
migrations folder so just uh it's going,,,
to be slash,,,
migrations all right then we have the,,,
dialect so dialect I mean you can use,,,
drizzle with different databases MySQL,,,
Etc we're using postgres in fact you can,,,
see the options here so we're going to,,,
use postgres and then the for the DB,,,
credentials that that's going to be an,,,
object and we just need to provide the,,,
URL which is going to be our,,,
process uh,,,
process.,,,
env. database,,,
URL and let's just add a bang on the end,,,
of,,,
that all right so that's our config so,,,
we can close that up now since that,,,
drizzle config is in the root directory,,,
we are probably going to have an issue,,,
with typescript because it's compiling,,,
the The Source folder right so we can,,,
run into an issue there so what we can,,,
do is exclude that file so under,,,
compiler,,,
options right so it ends right here so,,,
under compile options we're going to add,,,
exclude and it's going to be an array,,,
and we just want to add in that file so,,,
we want uh,,,
drizzle what is it drizzle. config dotx,,,
yes and that just cleared up that error,,,
that was there okay so now we have our,,,
schema created so that means that we're,,,
ready to create our migration and when,,,
we create our migration we first,,,
generate it and then we we do drizzle,,,
kit generate and then drizzle kit,,,
migrate and that should actually create,,,
our tables for US based on this based on,,,
the schema so let's try that let's come,,,
down here and let's run or we need,,,
npx and drizzle dkit and then we want to,,,
do generate,,,
first okay so your your SQL migration,,,
file so it created that here and then,,,
and you'll see there's a migrations,,,
folder here now then to actually migrate,,,
we want to do npx drizzle kit,,,
migrate all right so let's see you can,,,
only connect to remote super B instances,,,
through web,,,
socket not exactly sure why it's saying,,,
that it is a warning so let's go to our,,,
neon dashboard and let's check it out so,,,
if we go to,,,
tables and we have our chats yep chats,,,
table you can see the fields here ID,,,
user ID message and we have our users,,,
table okay so that worked I'm not,,,
exactly sure can only connect to remote,,,
neon versel postgress through a web,,,
socket um I guess I'm just not going to,,,
worry about that right now because it,,,
did work it created our tables from our,,,
schema which is what should have,,,
happened so now let's integrate the,,,
database into our endpoints into the,,,
register user and into the chats because,,,
again we want to save the users we want,,,
to save the chats actually let's bring,,,
in up top what we need to First,,,
okay so we're going to import we want,,,
our DB right so DB which is going to,,,
come from our database now this is,,,
something that I want to mention when,,,
you're using typescript with node with,,,
with TSX and you have the configuration,,,
that we do when you import a file,,,
because this is the first file that,,,
we've imported the rest have just been,,,
you know package modules so you it says,,,
JS even though it's a TS file okay you,,,
can't do import TS that's not going to,,,
work it's going to give you an error so,,,
even though it says JS everything to do,,,
with typescript compilation everything,,,
is just it still works fine this is just,,,
the syntax we have to use so in addition,,,
to that we want to bring in our schemas,,,
so,,,
chats and,,,
users and that's going to come in from,,,
slash DB and then slash schema and again,,,
we're going to do schema JS even though,,,
it's a TS file,,,
and then let's see what else do we need,,,
um there's a utility called EQ to to,,,
basically compare values to compare the,,,
users and so on so that's going to be EQ,,,
from drizzle,,,
omm and then what else do we have here,,,
uh the oh the chat completion message,,,
pram type so we're going to bring that,,,
in as well so,,,
chat,,,
completion I don't see it here,,,
completion message right,,,
here so that's going to come from openai,,,
resources MJS actually we don't need the,,,
MJS I don't,,,
think yeah that should work okay so now,,,
that we we have our Imports let's figure,,,
out where we actually want to use the,,,
database so we have our register user,,,
right so that creates a user with stream,,,
but again we want to also save the users,,,
in our own database so I'm going to go,,,
down right above the the response okay,,,
after we deal with all the stream stuff,,,
and let's check,,,
for existing user in the,,,
database I know we checked for if it's,,,
in stream but we also want to check in,,,
our own database so let's say,,,
const existing,,,
user and I'm just going to close that up,,,
and we want to set that to a wait and,,,
this is where use the DB right so DB,,,
from our config file database config and,,,
then I'm going to call a few different,,,
methods on this one is Select so I want,,,
to select,,,
from the users table where so do where,,,
this is just the syntax of drizzle which,,,
I I like pretty clean so where now this,,,
is where we use that EQ utility so we,,,
want to pass in EQ and we want to see,,,
where users do user ID is equal to the,,,
user,,,
ID okay and that the user ID would be,,,
you know what we create from the email,,,
when a user is registered so it's going,,,
to check for that and well it's going to,,,
put it in this variable now let's come,,,
down under it and let's say if,,,
not existing user uh we'll say if not,,,
existing user.,,,
length then let's just um we'll first,,,
off we'll just do a console log and I'll,,,
put some back ticks in here and we'll,,,
say user and then the user,,,
ID uh we'll say does,,,
not exist in the,,,
database and we'll say adding them,,,
because that's what we're going to,,,
do all right so under that line let's,,,
await DB and then we're going to call,,,
insert,,,
and we want to insert into users where,,,
values okay so the values we want to add,,,
pass in an object here with the user ID,,,
the name and the,,,
email all,,,
right and that should be,,,
it so let's save it now and I'm going to,,,
come back to uh to postman,,,
so let's send a,,,
request so I'm going to make a post,,,
request to http we want to do register,,,
user and in the,,,
body for form data let's add a,,,
name and an,,,
email okay so I'm going to go ahead and,,,
send,,,
that all right so I get back what I'm,,,
supposed to to now we want to check the,,,
database so let's go to uh to Neon just,,,
going to reload,,,
this and there's the user so user ID,,,
which is also the primary key the name,,,
email and the created ad so now not only,,,
are we do we have the users in the chat,,,
Explorer and stream we have it in our,,,
own database which we can do whatever we,,,
want with right and I had deleted the,,,
the user before so there it is again,,,
all right so in addition to the users in,,,
the database we also want to store the,,,
chats so let's go back to server TS and,,,
let's go down to the chat endpoint and,,,
figure out where we want to use the,,,
database,,,
here so let's see we're getting the user,,,
response here right then we check the,,,
user response so let's go right under,,,
that and we'll say,,,
check check user in,,,
database so again we're going to do,,,
const actually I can just copy the the,,,
line of code I just put,,,
here okay so we'll add that here and,,,
then,,,
um actually we can take what we put,,,
after that too which is,,,
this except we're not going to create,,,
the user so we do have to change that so,,,
right under where we check the user,,,
let's paste that and uh we're going to,,,
get rid of this insert we don't want to,,,
do,,,
that and then for the actually we're not,,,
even going to do a console log we want,,,
to return an error if the user isn't,,,
there so let's say,,,
return and then res. status and we'll do,,,
uh,,,
404 and let's do,,,
Json,,,
error and we'll set the error we'll say,,,
user not found in,,,
database please register first okay so,,,
we're making it so that if the user,,,
isn't in our postres database our neon,,,
database then it's still it's not going,,,
to let it happen right it has the user,,,
has to exist in stream and it has to,,,
exist in our database so now let's go,,,
under where we get the AI message,,,
message and store,,,
that and let's say save we'll say save,,,
chat to,,,
database so to do that we can just say,,,
await db. insert we want to insert into,,,
the,,,
chats or the chats U table and then for,,,
values we're going to add the user,,,
ID we want the,,,
message the reply,,,
uh actually reply we're going to set,,,
that to AI,,,
message okay so we're just taking,,,
whatever this is right and we're just,,,
storing it as,,,
reply and that's it so now we can try,,,
that out so I'm going to come over here,,,
and let's go let's make a request to,,,
slash,,,
chat and we're going to change the stuff,,,
here so let's say,,,
message and let's do something different,,,
um Let's do let's do something a little,,,
more difficult like,,,
create a,,,
[Music],,,
simple let's see what should we do we'll,,,
say create a simple rest,,,
API with,,,
python so that's our message and then,,,
for the user ID,,,
I'm going to put my user which is going,,,
to be,,,
brador,,,
gmailcom,,,
so let's try that,,,
out and it might take a couple,,,
seconds obviously the the more difficult,,,
the the answer the longer it's going to,,,
take,,,
okay so we got our reply and it has a,,,
bunch of you know new line characters,,,
and stuff for formatting and we'll we'll,,,
when we create our UI with view we'll,,,
have this displaying nicely so here's a,,,
simple example on how to create a rest,,,
API using flask a microweb web framework,,,
in Python and it goes through and gives,,,
us the steps all right so we know that's,,,
working now let's make sure that that,,,
got saved to the database so we'll go to,,,
Neon and I'm going to go to,,,
chats and there it is message create a,,,
simple rest API reply there's the,,,
reply now since we implemented a,,,
database I'd like to add one more route,,,
to to get the messages of a specific,,,
user okay and we're going to need that,,,
for our UI because obviously when you're,,,
you know sending messages as a user you,,,
only want your messages so let's create,,,
a new route we're going to come down,,,
here and let's say we want to,,,
get chat history,,,
for a user so app.,,,
poost and let's see the the endpoint is,,,
going to be SLG get-,,,
messages and we want to do a,,,
sync return promise any,,,
okay I'll pass in here our request so,,,
request,,,
Andre which will be,,,
response all right so what I'm going to,,,
do first is get it's going to take a,,,
user ID so we'll destructure the user ID,,,
from request. body because that needs to,,,
be sent with the body and then let's,,,
check for the user ID or check if not,,,
you user ID and if not then we're going,,,
to return res.,,,
status and we'll do,,,
400 and we'll pass in an error and say,,,
user ID is,,,
required all right so if the user ID is,,,
there then let's open up a try catch and,,,
let's create a variable here we'll call,,,
it chat,,,
history so chat history and then we want,,,
to await DB and then we're going to,,,
select I'm going to go on the next line,,,
here so db.,,,
select and,,,
from okay we want to select from,,,
chats and let's say,,,
where so where and we're going to use EQ,,,
here CU we're comparing so we want to to,,,
say where the chats. user ID is equal to,,,
the user,,,
ID and,,,
then we're going to,,,
return actually we can just do,,,
res res. status,,,
200. Json and let's pass in we'll do,,,
messages messages and set that to the,,,
chat,,,
history okay and then if there's an,,,
error then we're going to res. status,,,
500 and,,,
let's uh we'll pass in an,,,
error and we'll say internal server,,,
error and then I do want to just do a a,,,
console log as well so we'll say,,,
um actually let's do quotes and say,,,
error fetching,,,
chat,,,
history and we'll output the,,,
error okay so that's our get messages so,,,
let's try that out I'm going to come,,,
over here post request to SLG,,,
get- messages and then we just want the,,,
user ID in the body so I'm going to go,,,
ahead and send and now it gives me back,,,
an array and you see we have id1 user ID,,,
message and then the apply I should have,,,
my other one here actually no I deleted,,,
the other one so let's make,,,
another um let's do another,,,
chat and then for the message make sure,,,
we check that let's say what is the most,,,
popular JS,,,
framework,,,
send as of 20 okay so the 2021 is the,,,
cut off for this um it says the most,,,
popular JavaScript framework is,,,
react all right so now if I were to go,,,
back,,,
to get Dash,,,
messages with the user ID I should have,,,
both so create a simple rest API and,,,
what is the most popular JS,,,
framework okay so we have three routes,,,
we can we register a user we use that,,,
user to to chat to ask a question to the,,,
AI and then we have a an endpoint to to,,,
get all the messages of a specific user,,,
so that's pretty much it as far as the,,,
back end there there's a couple things,,,
later on while we're doing the front end,,,
that I want to add to the back end but I,,,
think that I'll be able to explain it,,,
better once we have the UI and I know,,,
that backend development like this can,,,
be a little tricky and can be a little,,,
weird because you don't you're not,,,
looking at like a user interface for,,,
your are the results of what you're,,,
doing you're just seeing a bunch of data,,,
so it can be can be tough for for some,,,
people so um if you if you've been,,,
confused through this don't worry about,,,
it I mean it happens as you do more of,,,
it it'll kind of Click but now what I'd,,,
like to do is jump into the front end,,,
create a whole new folder for our our,,,
chat AI UI and start to use,,,
vuejs okay so now we're going to get,,,
into our front end and like I said we're,,,
going to be using vue.js version three,,,
um we're going to be using a couple,,,
other dependencies so let me just show,,,
you those real quick so view we're using,,,
vit for our Dev server and environment,,,
we're using pinf for our state,,,
management Library so we'll be able to,,,
create a store for our users for our,,,
chats uh we'll be able to have our,,,
actions and our state in those stores,,,
axios I'm using for my HTP Library,,,
although if you want to use fetch that's,,,
fine too really doesn't matter it's just,,,
preference and then Tailwind CSS I'm,,,
using for The Styling so we will be be,,,
adding quite a bit of Tailwind classes,,,
to make it look nice view router we're,,,
using the official router for view uh,,,
and we're just going to have two routes,,,
two pages one is going to be the,,,
homepage with the form that has the,,,
email and the name so that you can you,,,
know enter your name to start chatting,,,
and then of course the chat route chat,,,
page where you interact with the AI and,,,
then typescript which we don't have to,,,
set up at all it just works out of the,,,
box with vit so those are our frontend,,,
dependencies now I have the backend,,,
running so you definitely want to have,,,
that um this is just something I was,,,
testing out but you can see it's mine's,,,
running on Port 8000 and then I'm going,,,
to go into the chat AI folder and you,,,
can see I have the the back end that's,,,
what's running over here I want to,,,
create a folder alongside of this in my,,,
chat AI folder not inside the API folder,,,
that's the back end this is completely,,,
separ separate so alongside that let's,,,
go ahead and run npx and then I'm going,,,
to use create V and let's call this chat,,,
D ai- UI okay this is the user interface,,,
part of our application and then we're,,,
going to choose view I'm going to choose,,,
typescript although if you you want to,,,
use JavaScript that's fine too and I,,,
mean even if you don't know typescript,,,
it's we're not doing that much so you,,,
should be fine and and we already used,,,
it in the back end um and it's much,,,
easier to set up I mean there really is,,,
no setup in the front end it just works,,,
so now let's go ahead and CD into chat,,,
ai- UI and then let's run our npm npm,,,
install to install our initial,,,
dependencies that come with v and then,,,
we'll install a couple other,,,
dependencies as,,,
well all right so let's go npm install,,,
and view- router we want pinf for our,,,
state management and there's also a,,,
plugin called uh persisted State and we,,,
want to use this because we want our,,,
state our user to persist across page,,,
loads so we're going to install pinea,,,
Das plugin Das persisted State and then,,,
also axios so those are our front end,,,
those are our regular,,,
dependencies and then for Dev,,,
dependencies it's just tailwind and the,,,
plug-in for V for Tailwind so let's do,,,
Dash uppercase D and then Tailwind CSS,,,
and then also at uh what is it at,,,
Tailwind CSS,,,
SLV and Tailwind version 4 is super easy,,,
to get set up with v okay so now that we,,,
have our dependency set up I'm going to,,,
actually just open this folder up in vs,,,
code and I'm going to run the dev server,,,
from the integrated terminal so from,,,
here let's say,,,
NP say npm run,,,
Dev and it's going to be 5173 for the,,,
port by,,,
default and I'm just going to make,,,
this going to just bring this over here,,,
make this a little,,,
smaller okay so this is just a landing,,,
page we're going to get rid of the the,,,
boiler plate um what I do want to do is,,,
set up Tailwind which is really easy we,,,
just need to go into our V config first,,,
and we're going to,,,
import uh,,,
Tailwind CSS from and then it's going to,,,
be this at tailwind cssv and then we,,,
just need to add the plugin to the array,,,
here so Tailwind CSS,,,
parentheses and then the only other,,,
thing we need to do is go into our main,,,
stylesheet so in the source folder I,,,
want to go into style CSS and we can get,,,
rid of all this other stuff and just,,,
simply do at import and then in quotes,,,
take Tailwind,,,
CSS and that's it and you can see,,,
Tailwinds working because there's it's,,,
all the same font size there's no,,,
padding or or margin on the body so,,,
Tailwind is working all right now let's,,,
just clear this up a little bit I don't,,,
want the hello world component so we can,,,
completely delete,,,
that okay and then in the app. view we,,,
don't want that I'll leave the script,,,
tag there and then in the template uh,,,
actually we can get rid of this the,,,
scope,,,
style and then in the template for now,,,
let's just have oops let's just have an,,,
H1 and we'll just say my,,,
app okay so just kind of clear,,,
everything out and in the assets we,,,
don't need the view SVG you can get rid,,,
of that now I do have a little robot,,,
icon and logo that I want to use so let,,,
me just find that real quick you guys,,,
can get this from the the GitHub,,,
repository that that's in the,,,
description let me just find it real,,,
quick uh let's see,,,
[Music],,,
Dev I'm just trying to find it off,,,
screen where we chat AI UI all right so,,,
it's going to be in you have the fabicon,,,
which is in the root so just bring that,,,
over to your root and then you have um,,,
in the,,,
source assets folder there's a robot PNG,,,
you're going to bring that into your,,,
assets,,,
folder so it's just this little robot,,,
guy all right now to add the fabcon we,,,
can go into the index HTML in our um in,,,
the root and I'm just going to change,,,
the page title to let's do chat,,,
Ai and then for the fabicon we'll just,,,
add a,,,
link and let's change the real to Icon,,,
We'll add a type of image slash it's an,,,
Ico and then slash favicon Ico and then,,,
you should see the little robot in the,,,
tab all right,,,
so right off the bat I just want to set,,,
up routing okay because we're using view,,,
router we're going to have the home,,,
route we're going to have a chat route,,,
so let's start by creating those pages,,,
or those views so in the source we're,,,
going to create a folder called views,,,
and then in there we're going to create,,,
a file file called home let's call it,,,
home,,,
view. viw,,,
Vue and then let's create another file,,,
called chat,,,
view.,,,
viw okay and then I'm just going to have,,,
a script tag and then we're going to add,,,
our setup so as far as vuejs goes this,,,
is not an intro to view I'm not going to,,,
explain the the basics um I have a view,,,
course A View crash course on YouTube,,,
that I just did it like a couple months,,,
ago so it's really up to date if you,,,
don't know anything or you know very,,,
little about VJs I would suggest,,,
watching that I mean you can watch it,,,
after if you want so you can kind of,,,
understand what you did but I would,,,
suggest watching it before but basically,,,
with the composition API which is a kind,,,
of a more Modern Way of of building view,,,
components you basically have to have in,,,
your script you would,,,
export uh a setup function,,,
right and then you do all your,,,
JavaScript all your state stuff you,,,
would do in here but you can do a,,,
shortcut by just adding setup here,,,
that's why I'm doing that and then I'm,,,
also just going to add Lang and since,,,
I'm using typescript I'm going to add,,,
Lang TS and then I'm not even going to,,,
put anything in there for now then we,,,
have our template so basically the HTML,,,
we want to show on this in this,,,
component or in this page which right,,,
now I don't really care we'll just do an,,,
H1 and we'll just say chat or chat page,,,
all right and then for the home view I'm,,,
just going to grab that and we'll just,,,
change this to homepage all right,,,
because I I just want to get these,,,
created so that we can create set up our,,,
router so we can close those up for now,,,
and then for the router we're going to,,,
have a folder in the source folder,,,
called router and then in that will have,,,
a file called,,,
index.ts and this is where we set up our,,,
routes,,,
now to do that we need to import a,,,
couple,,,
things so first off we need create,,,
router from view router and then we also,,,
want a function called create web,,,
history which allows us to use the the,,,
HTML 5 history API to to do routing,,,
instead of you know actual page loads,,,
and then we also want to bring in any,,,
views or any components that we want to,,,
load so that would be the home View and,,,
that would be the chat,,,
view okay then what then what we do is,,,
create an array for our,,,
routes so we'll set that to an array and,,,
each route will have an object with a a,,,
path so in this case I want this to be,,,
just slash for the homepage and then we,,,
can load a component which our views are,,,
our components so let's set that to the,,,
home View,,,
all right and then we'll do the same,,,
thing for the chat view so let's make,,,
this slash,,,
chat and this will be for the component,,,
chat,,,
view then what we want to do is,,,
export const router so this is what we,,,
bring into other files and this is where,,,
we want to set this to create router,,,
which is going to take in an object with,,,
history and we want to set that to the,,,
create web history again that's going to,,,
use the the HTML 5 history API and,,,
that's a function so you want your,,,
parenthesis and then you just want to,,,
pass in your routes as,,,
well all right and that's it for that,,,
file now couple other things we need to,,,
do before we can actually use our router,,,
we need to initialize it in the main.ts,,,
file which is basically our entry point,,,
so in this,,,
file uh let's see we're going to bring,,,
in let's bring in in and we want,,,
create router uh I'm sorry not create,,,
router just router we already used that,,,
in our router file that we just created,,,
",,,
and that's what we're bringing in here,,,
so router from. SL,,,
router now we have to use that so where,,,
we have this create app which bootstraps,,,
the entire application it mounts it to,,,
this this element with app um I'm going,,,
to just put this in a variable and then,,,
we'll mount it down below so we'll take,,,
this and we'll do app. Mount here,,,
instead and that way we can take that,,,
app that app object and we can call use,,,
and then we can use the,,,
router okay so we got that done now the,,,
last thing to be able to see the routes,,,
on the page in the main app. view where,,,
we have this H1 we want to replace that,,,
with router View,,,
save that and now we see homepage,,,
because we're on the the Home Route if I,,,
go to SL chat then we're on the chat,,,
page and if you want to create just a,,,
quick navigation we can do nav and then,,,
we can use router link okay so router,,,
link we can add a two attribute here to,,,
slash and then we'll have one to chat,,,
slash,,,
chat and then we should be able to click,,,
on chat takes us to the chat page home,,,
takes us to the the homepage now we do,,,
need to set up our store but before we,,,
do that let's just get the form,,,
displayed on the hom page uh and we can,,,
get rid of this nav we don't need,,,
that okay so let's go into Let's see we,,,
want to go into the home View and I'm,,,
going to bring in the that robot image,,,
because that's going to be our logo so,,,
let's import robot image from and then,,,
it's going to be dot dot slass assets,,,
slash and then,,,
robot.png,,,
okay so we'll bring that in and then,,,
let's just start to add some of the the,,,
elements down here and use our Tailwind,,,
classes so we're going to have a div,,,
that wraps everything get rid of,,,
this um div and then for classes here,,,
we're going to do h- screen let's make,,,
this a flex box and align everything to,,,
the center so items Das Center and,,,
justify Center I'm not going to explain,,,
what every Tailwind class does I have,,,
Tailwind crash courses I have a premium,,,
course if you want that but it's pretty,,,
obvious what most of these classes do,,,
background we're going to make gray,,,
let's do 900 for the,,,
shade and then we're going to do text,,,
white okay so that just gives us this,,,
dark background then inside that I'm,,,
going to have another div with a class,,,
of pad let's do padding 8 and I'm going,,,
to do BG gray 800 make get a little,,,
lighter and rounded large let's do,,,
shadow shadow,,,
large and let's make it width Dash full,,,
and a Max width of,,,
medium all right whoops I don't know,,,
what what happened,,,
oh need to do,,,
this all right so there's our container,,,
for the form so in that div let's have,,,
an H1 we'll do text Dash let's do 2XL,,,
for the sizing we'll say font Das,,,
semibold let's do uh margin bottom four,,,
and text,,,
Center and in that we'll say welcome,,,
to chat,,,
AI all right oh I forgot the robot so,,,
let's actually put above the the H1 I'm,,,
gonna have my image now since the source,,,
is going to be pointed to a variable,,,
right it's Dynamic we need to bind it so,,,
we could either do a v-h on or we can,,,
just put a colon here and then set it to,,,
something Dynamic such as the robot,,,
image variable and then I'm just going,,,
to add a couple classes on this as well,,,
so let's do MX so margin on the X Access,,,
Auto width 24 height 24 and then let's,,,
do a,,,
margin bottom,,,
four and there we go so now I have the,,,
little robot guy and then let's go under,,,
the H1 and we want to have our inputs so,,,
for the classes here we're going to do,,,
Dash uh with Dash full let's do padding,,,
two for margin bottom two and then I'm,,,
going to do a BG gray 700 so make it a,,,
little lighter the text will be white um,,,
let's say round rounded Das large and,,,
then I'm also going to add a focus style,,,
so on Focus I want outline Das,,,
none okay uh yeah and then let's add a,,,
couple other things so in addition,,,
to whoops what did I do,,,
here that should be there so I want to,,,
add a placeholder and it's going to say,,,
name and then we want to buy,,,
this name to uh a reactive variable we,,,
want to we want to have a a piece of,,,
component State called name and we do,,,
that with v- model and we we'll set that,,,
to,,,
name and we want to create that name,,,
variable up top here in the script so,,,
let's say con name and we set that to,,,
ref okay we're creating a reactive value,,,
so ref and then whatever the default is,,,
will go in here which is going to be an,,,
empty string,,,
now that ref we do have to import that,,,
from view so let's bring that in that,,,
should be lowercase,,,
R okay there we go so now that gets,,,
bound to that if I put in you know hello,,,
here it's going to show here because,,,
that is bound to that,,,
input okay and then we'll have some,,,
other values here as well like the the,,,
uh,,,
email and let's see do I want to add the,,,
rest of the stuff now,,,
um yeah uh might as well just copy this,,,
down so we're going to have a loading,,,
state so basically when we reach out to,,,
our API we're going to set loading to,,,
true and then when we get the result,,,
it'll be set to back to false so let's,,,
set this to ref default value will be,,,
false um and then I also want for ER if,,,
we have an error I want to have that in,,,
our state as well that'll just be an,,,
empty string by default as well and then,,,
let's come back down let's create our,,,
email input so I'm going to take this,,,
copy it down let's change the type to,,,
email and let's see we'll,,,
change,,,
placeholder to email and the V model to,,,
email so now this input is going to,,,
pertain or is going to be bound to this,,,
variable if I save it we see the email,,,
and then let's create the,,,
button okay so right here let's say say,,,
button and as far as classes go let's do,,,
with- full let's do padding to we'll do,,,
BG blue Das 500 and rounded,,,
large all right and inside that I want,,,
it to say start chat but if it's,,,
loading then I want it to show logging,,,
in okay and it's not actually a login,,,
but you know what I mean creating the,,,
user or just getting the user so if you,,,
want to show something,,,
Dynamic uh within your view template you,,,
use double curly braces so here I can,,,
put a JavaScript expression like if it's,,,
loading then,,,
show logging in dot dot dot else then,,,
show start,,,
chat so now we have our start chat,,,
button and then I also want to make this,,,
button disabled if loading is true so,,,
it's going to be um Dynamic so I'm going,,,
to do colon disabled because what I'm,,,
setting this to is a is a variable right,,,
it's,,,
loading so if I were to set loading up,,,
here I know a lot of you guys know this,,,
stuff but for those of you that are kind,,,
of new to view if I set that now it's,,,
disabled and it says logging in so I'll,,,
set that back to,,,
false all right now let's see um for the,,,
error I want to show that down here in a,,,
paragraph So in the paragraph we can use,,,
a v if directive which is just like an,,,
if statement whatever I put in here in,,,
here will only show if this is true so,,,
for V if we just want to set that to,,,
error so if error is true then I just,,,
want to show the actual error and we'll,,,
just add a,,,
class uh let's add a class of text Dash,,,
red we'll do red,,,
400 and text,,,
Center and let's do margin top two okay,,,
so if I have an error which we can test,,,
out by just putting something in here,,,
then it will show like,,,
that all right cool now that button is,,,
going to call a function so let's go to,,,
the button here we'll say at click so,,,
when we click this we're going to call,,,
call a function called create user which,,,
doesn't exist yet so we're going to go,,,
up,,,
here and we want to create we want to,,,
create the create user function so here,,,
let's say const create user we'll set,,,
that to async an async,,,
function and,,,
let's let's check for the the name and,,,
email so we'll say if not name and we,,,
can access the value with DOT value or,,,
if not email.,,,
value okay so if either one of those are,,,
not you know not added then I want to,,,
set an error so we'll say error. value,,,
and we'll set that to let's say name and,,,
email are,,,
required and then we'll just,,,
return okay and,,,
then I think you know what what I think,,,
that's as far as I want to go because we,,,
don't have our store yet cuz what we're,,,
going to do is send a request to well we,,,
could you know what we'll send the,,,
request I'm trying to think of how I,,,
want how the order I want to do this in,,,
do we want to do the store,,,
first yeah you know what before we do,,,
the request let's do the store I mean we,,,
can test out this little validation if I,,,
were to click Start chat without putting,,,
anything then it's going to give us an,,,
error but yeah let's create our store so,,,
so basically when the data comes back,,,
from SL register user from our back end,,,
it's going to be stored in our user,,,
store which we have yet to create so,,,
we're using pinea which means we have to,,,
initialize it so we're going to go into,,,
our,,,
main.ts which is right here and couple,,,
things we need to,,,
do um yeah we'll go right here and let's,,,
import here,,,
create,,,
pinea from pinea and then we also need,,,
that plugin which,,,
is,,,
pinea plugin,,,
persisted State that's going to come,,,
from oops it's going to come,,,
from uh this right,,,
here okay so we want to bring those in,,,
and then let's go above this app let's,,,
say const pinea set that to the create,,,
pinea function and then we should be,,,
able to take that pinea object and say,,,
do use and we can use the plugin so,,,
pinea plugin persisted State we want to,,,
pass that in and then the only other,,,
thing we need to do is use it just like,,,
we did the router so copy that down and,,,
pass in,,,
pinea okay I don't have the code right,,,
in front of me but I'm pretty sure,,,
that's that's right all right so we'll,,,
close that up now to create our store,,,
let's go into the source folder create a,,,
folder called stores and for each,,,
resource we'll have a file so I want to,,,
create a file called,,,
user. TS so this is where our Global,,,
State goes as well as any actions which,,,
are going to be functions that mutate,,,
the state in some way um so what we're,,,
going to do is,,,
import Define,,,
store and that's going to be from pinea,,,
all right and then we're going to,,,
export let's export const and we're,,,
going to call this use user,,,
store and we want to set that to that,,,
defined store and then that's going to,,,
take in a name of our of our store so,,,
user and then we pass in an object and,,,
this is where we can Define our state,,,
which is going to be set to an arrow,,,
function and some and it's going to be,,,
set to an OB it's going to return an,,,
object in that object we're going to,,,
have our user ID and we're using,,,
typescript so I'm going to say null as,,,
string or null so what we're doing is,,,
using a type assertion and we're,,,
defining it as null to begin with but,,,
we're saying it can be null or string,,,
and then we're going to do the same,,,
thing with the,,,
name okay so if you remember when we hit,,,
that register user route it sends back,,,
the user ID the name and the email we,,,
don't need the email um in the the the,,,
project so I'm not going to store it in,,,
the in the store if you want to you can,,,
but I'm just going to leave it out for,,,
now so in addition to our state we want,,,
to have our actions so let's put a comma,,,
here and then actions and actions is an,,,
object with functions in it to,,,
manipulate the state in some way so,,,
let's create a function called set user,,,
and set user is going to take in a,,,
data object so for the type it's going,,,
to be an object that has a user ID which,,,
will be a string and also name which,,,
will be a,,,
string and we can a access this right,,,
these values in our state we can access,,,
with this keyword so we can say this.,,,
user ID is going to be set to the user,,,
ID that's passed in here uh I'm sorry,,,
it's going to be be data. user,,,
ID okay and then we'll do the same thing,,,
with the name so,,,
this set that so this.name is going to,,,
equal data.,,,
name then let's go under set user,,,
because we also want to have a log out,,,
because we need we need a way to clear,,,
this state so here we'll say this. user,,,
ID is equal to,,,
null and then this do name is equal to,,,
null and then the last thing we're going,,,
to do is persist the state meaning that,,,
it's going to the user will stay even if,,,
the page refreshes or reloads so we're,,,
going to go right here put a comma and,,,
we can add in here persist and we're,,,
just going to set that to true and I'll,,,
put a little comment here and just say,,,
keep,,,
user logged in,,,
across um across page reloads,,,
and that yeah that should do it so,,,
that's our user store and we'll have a,,,
chat store later on so now let's go back,,,
to our home View and we're going to,,,
import the we want to import the use,,,
user store that we just created that's,,,
going to be from and then dot dot slash,,,
stores,,,
sluser okay and then we're going to be,,,
redirecting the user as well so we're,,,
also going to import use,,,
router from view router now we have to,,,
initialize these two things so right,,,
here let's say const user so user store,,,
set that,,,
to uh use user,,,
store um why is,,,
that oh it's just I just haven't used it,,,
right yeah okay so then also the router,,,
so let's say cons router set that to use,,,
router all right now we have access to,,,
the user store so let's make our request,,,
down here in the create user so after,,,
this if statement let's first off set,,,
the loading value and set that to true,,,
because we're now loading because we're,,,
we're making a request and let's just,,,
make sure the error value is,,,
clear and then I'm going to use a tri,,,
catch for the,,,
request now for as far as the URL that,,,
we make the request to for me it's going,,,
to be HTTP Local Host 8000 but when you,,,
go into production obviously that's,,,
going to change so we should put that in,,,
an environment variable so let's go into,,,
the root not the source but in the root,,,
and let's create a EnV and here we're,,,
going to say vit under so these are,,,
going to be prefixed with vit and then,,,
API URL and we'll set that to,,,
http Local,,,
Host 8000 if you ran it on a different,,,
port make sure you put,,,
that all right so that way we can just,,,
have one central place for that URL now,,,
let's make the request and I'm using,,,
axios by the way so I have to import,,,
that as well uh let's,,,
see so import axios,,,
and then let's say const I'm going to,,,
destructure the data if you're using,,,
fetch then you would do that here but,,,
I'm going to await on,,,
axios.com API URL okay so that's where,,,
we want to go and then slash so after,,,
the the closing curly brace SL register,,,
Das ususer so we're making a request to,,,
our backend now we also want to pass in,,,
after that backtick uh a comma and then,,,
we want to pass in the data that we're,,,
sending which is going to be our name,,,
and we remember we access that with,,,
name. value and then,,,
email so,,,
this will be email email.,,,
value and then once we do that we can,,,
then set the this the user data in our,,,
store to the data that we get back okay,,,
so let's do that we're going to say user,,,
store and then we're going to call our,,,
set user,,,
action we're going to pass in the user,,,
ID set that to the data. userid and then,,,
we want to do the same thing with the,,,
name so this will be,,,
name,,,
oops name and then it'll be,,,
data.,,,
name okay so we're setting it to our,,,
store and then the last thing we want to,,,
do in the try is just redirect so,,,
router. push and we want to go to slash,,,
chat and then in the catch let's do uh,,,
we'll say error. value and set that to,,,
we'll just say something went,,,
wrong and we'll say please try,,,
again okay uh let's see did I set,,,
this oh you know what this let's make,,,
this e r r because we can't have that,,,
being error and the state being error,,,
error all right and then we want to set,,,
the loading to false no matter what,,,
whether it's an error or not so we can,,,
add a,,,
finally so right here,,,
finally and then we'll set the loading,,,
do value to,,,
false okay so that should do it right so,,,
again just to kind of reiterate we click,,,
the button it calls create user and,,,
checks the name and value inputs sets,,,
loading to true then we make our request,,,
to our backend which we already created,,,
send the name and email we get back the,,,
user ID the name and email and we're,,,
storing the user ID and the name in our,,,
state right in our frontend UI State,,,
then we're just redirecting to chat and,,,
we're setting loading back to false so,,,
let's try this out uh I'm going to come,,,
over here I'm just going to refresh the,,,
page here and then let's do like,,,
I'll say John Doe or just,,,
John and John,,,
gmail.com start chat says logging in,,,
redirects me to the chat page right now,,,
I should be able to check I can check,,,
this in a few places I can check stream,,,
or I can check um uh neon so we'll do,,,
both going to go back here to my,,,
Explorer and,,,
stream and if we look look at users,,,
you'll see right here John gmailcom so,,,
that's what that's who I just registered,,,
as right and then if we go to our neon,,,
console and go to users John gmailcom so,,,
now our front end is connecting to our,,,
backend sending a request signing up,,,
with both you know setting it in stream,,,
sending it to our own database so that,,,
we have our own uh store of users for,,,
what whatever you want to do with them,,,
um,,,
sets a channel and that's it now what we,,,
need to do is create this chat page so,,,
that we can interact with the AI however,,,
before we do that I'd like to have a,,,
header at the top because we do need um,,,
we do need a way to log out I say log,,,
out but it's not actual authentication,,,
but you know what I mean,,,
just make the user know right the user,,,
ID and the email so let's create a,,,
component we're we going to go into the,,,
components folder and let's create a,,,
header. viw,,,
file okay and we're going to add our,,,
script let's add our,,,
setup so setup and for the Lang set that,,,
to,,,
TS and then we'll have our,,,
template okay so in our template I'm,,,
going to have a div with padding y let's,,,
do,,,
py4 px-6,,,
BG Das gray,,,
800 let's do Shadow,,,
DMD make this a flex box we want to,,,
justify uh justify,,,
between and let's do items Das,,,
Center all right so within that div I'm,,,
going to have the robot image which I,,,
need to bring in so up here just close,,,
that up so up here let's import that so,,,
import robot,,,
image and that's going to be from dot,,,
dot,,,
SL assets SL,,,
robot.png,,,
all,,,
right so for the source I'm going to,,,
just add a colon here since this is a,,,
dynamic variable it's a robot image and,,,
let's see just a couple classes on this,,,
so so class is going to be W so width d8,,,
and height,,,
-8 and we'll just say for the alt chat,,,
AI now we want to bring this header in,,,
uh it's not finished yet but I just want,,,
to be able to see it so it's only going,,,
to be on the chat page it doesn't have,,,
to be on the homepage so we're not going,,,
to put it in you know the main app file,,,
we'll put it right in chat so in the,,,
chat view let's go ahead and import,,,
header,,,
and let's see we'll just get rid of this,,,
uh H1 here I do want to have a div,,,
though with just a couple classes so,,,
let's do Flex I'm going to do,,,
flex-all h-,,,
screen BG let's do gray 900 and text-,,,
white and then in that we'll put our,,,
header and there we go so looks pretty,,,
good so back to let's see home view we,,,
can close up but back in the header,,,
let's finish this up I'm going to put,,,
under the image here an,,,
H1 with a class of text,,,
large and font,,,
semibold and we'll say AI or chat,,,
AI now it's way it's way over on the,,,
right because I have justify between so,,,
all the spaces in between but I'm going,,,
to put a log out button so this will be,,,
pushed over into the middle and the log,,,
out button will be on the end so let's,,,
add button and I'm going to do text Gray,,,
400 and also on,,,
Hover so hover will make,,,
text-,,,
white and inside of it will'll say log,,,
out okay so,,,
there's that now when we click it let's,,,
go ahead and add an event handler so we,,,
want to,,,
click so when we click it's going to,,,
call a function called,,,
logout now the log out function is the,,,
action in the store right if I go to my,,,
user store we have this log out action,,,
so we can bring this into to our our,,,
header and use it so up at the top here,,,
let's let's import and whenever you want,,,
to use the user store you need to bring,,,
in use user store,,,
all right so we're bringing that in um,,,
I'm also going to bring the the user use,,,
router,,,
in so use router from view router and,,,
then we need to initialize both of those,,,
so let's say const use or user,,,
store set that to,,,
use use user store and then let's say,,,
cons,,,
router set that to use,,,
router and then for the log,,,
out uh what we're going to do is if it,,,
first calls a logout function here so,,,
we'll create that and then from there we,,,
want to then take the user store and we,,,
want to call the logout action and we,,,
can do that just simply by doing Dot,,,
user store. logout then we just want to,,,
redirect so router. push and we want to,,,
redirect to the homepage the home,,,
view okay so when we call that log out,,,
it's going to clear the state because,,,
again in our user store it's going to,,,
set the user ID and the name to nulls so,,,
when we log in we hit our backend we get,,,
the data back it sets it when we log out,,,
it clears it so let's do it let's say,,,
log out and now there we go so now we,,,
want to do the the chat right we want to,,,
be able to actually interact with the AI,,,
so I'm going to log back in as John so I,,,
should be able to just do John,,,
on at,,,
gmail we want to work on getting the the,,,
messages which right now John is a new,,,
account so he doesn't have any so I'm,,,
just going to add some so I'm going to,,,
go to my to postman or open whatever,,,
HTTP client you want let's make a post,,,
request,,,
to chat and then in the,,,
body you want to include your user ID,,,
which for me is going to be,,,
johore gmailcom,,,
that should be lowercase ID and then we,,,
want to send a,,,
message and for the message I'll just,,,
say what is the capital,,,
of um say,,,
Maine and let's,,,
send okay so capital of main is Augusta,,,
let's send another,,,
another message,,,
here what do I want to ask it,,,
um say what is,,,
the what is the most,,,
popular programming,,,
language curious to see what it says oh,,,
most popular language is Javascript,,,
however it's very it it may vary based,,,
on the specific industry or use case,,,
Python and Java are also widely used all,,,
right so we have uh some chats now so we,,,
want to get these and we want those to,,,
display here so what I'm going to do is,,,
create a new store for chats so in,,,
stores let's create a file called chat.,,,
TS now you can set your store up in,,,
different ways in the user store we use,,,
the object style where we have a state,,,
you know State we have an object with,,,
State action,,,
and uh just any other options but we can,,,
also use the composition API and we can,,,
use reactive variables with ref like we,,,
did in our components so that's what I'm,,,
going to do with chat the chat store,,,
because it's a little more,,,
complicated so let's start off by,,,
importing Define,,,
store okay so we want to,,,
bring that in from paa,,,
and then let's also import ref because,,,
I'm going to be using reactive,,,
variables that'll be from View and then,,,
I'm going to bring in axios because I'm,,,
also going to do the the fetch from here,,,
or the HTTP,,,
request and then let's do what else we,,,
also want the user store okay because,,,
we're going to need the user ID the the,,,
user that's logged in so let's say use,,,
user store bring that in from do/ user,,,
all right now we're going to be,,,
formatting our chat messages a certain,,,
way so meaning the message that we send,,,
as well as the message we get back and,,,
I'm going to use an interface for that,,,
okay so this is a typescript interface,,,
and it's basically just like a type,,,
where we Define certain fields that it,,,
has to match so let's call this chat,,,
message and chat message has to have a,,,
message which is going to be a stream,,,
Str and has to have a,,,
reply which will be a string so that's,,,
our chat message let's do another,,,
interface of,,,
formatted,,,
message and formatted message is going,,,
to have a role because when we get our,,,
messages back we need to know which,,,
which one is the the user and which one,,,
is the AI so the role is going to be a,,,
string of either user or AI,,,
okay it has to be one of those and then,,,
we'll have the content which will be,,,
either the message or the reply so,,,
that's going to be a,,,
string so those are our interfaces and,,,
you could put those in separate files if,,,
you want but there's only two Fields so,,,
I'll just keep them here and then let's,,,
export const and let's say use chat,,,
store just like we did use user store,,,
set that to our Define store which is,,,
going to take in the name which which,,,
we'll call chat and then we'll have our,,,
function yeah actually this yeah we,,,
don't want an object here you can use an,,,
object like we did in the use uh user,,,
the user store but I'm going to have a,,,
function and we can use the composition,,,
API here so let's create a variable for,,,
messages and set that to ref so it's,,,
going to be a reactive variable and I'm,,,
going to use typescript generics here to,,,
Define what a message should be which is,,,
going to have a,,,
roll which will be a string and content,,,
which will be a,,,
string and it's going to be an array,,,
messages so we also want to have after,,,
the curly brace here our,,,
brackets and uh ref is a function so we,,,
want to have our parentheses and the,,,
default value goes in here which is an,,,
empty,,,
array okay and then the other thing that,,,
I want to have is is loading and and set,,,
that to ref which is going to be,,,
false by,,,
default then we want to initialize our,,,
user store because we need that user ID,,,
so let's say const user,,,
store and set that to,,,
use use user,,,
store right and then we need to have a,,,
function that will load previous chat,,,
messages so let's say load,,,
previous chat messages and we'll call,,,
this load chat,,,
history and this is going to be,,,
asynchronous okay and first thing I'm,,,
going to do here is check for the the,,,
user the user ID so we'll say if the,,,
user store do user ID or rather we want,,,
to say if,,,
not the user ID then we just want to,,,
return okay then we're going to open up,,,
a try,,,
catch and we want to make our request,,,
and the the end point we're making the,,,
request to is get messages right because,,,
we want to get our messages so let's say,,,
const and we're going to destructure the,,,
data from axios so let's say,,,
await axios Dot and it's going to be a,,,
post request,,,
and then we have our API URL which is in,,,
the the EnV file so let's use some back,,,
ticks here and we'll say um to access,,,
that we can do,,,
import. meta Dov and,,,
then Vore,,,
apiurl and then outside of the curly,,,
brace we want to do SLG get- messages,,,
okay so we're going to hit that endpoint,,,
and then we want to pass in an object,,,
because we need to send the user ID with,,,
it to get the user's messages so it's a,,,
user ID and then user,,,
store. user,,,
ID all right and,,,
then uh let's,,,
see so the way that the messages come,,,
back right in fact we can just we can,,,
just check this out so if I say new new,,,
request,,,
and I want to hit I want post and then,,,
the get,,,
messages and in the,,,
body I'm going to add my user id which,,,
is,,,
johore,,,
gmailcom if I do,,,
that I get back my messages the me the,,,
two that I just sent right so it comes,,,
back in an array called messages and,,,
then an object that has ID user ID,,,
message reply created at where message,,,
is what I sent reply is what the a sent,,,
now I want to I want to manipulate this,,,
data,,,
into basically into an array that has,,,
the role which will be either the AI or,,,
the user and the content which will be,,,
either the message or the reply based on,,,
if it's the AI or the user right we want,,,
to match this right here so this this,,,
interface so we have to uh basically map,,,
through and and return an array with,,,
those two,,,
Fields um and we also have to flatten it,,,
because what we what we can do by using,,,
map right if we map through we can get,,,
like an array with the the roll so it,,,
would be like user and then content,,,
would be just,,,
whatever right and then we'd have,,,
another array like that and we don't,,,
want that we want we want an array that,,,
has objects in it like,,,
this so we want to flatten it so the the,,,
method we can use to do that is called,,,
flat map okay which is just a JavaScript,,,
method so that's what we're going to do,,,
we're going to come down here and we're,,,
going to take messages which is our,,,
reactive variable that we set up above,,,
and I want to set the value of it it,,,
right so value and I want to set it to,,,
the data. messages which comes back,,,
which looks like this initially it's,,,
going to look like this an array of of,,,
those objects so on this we want to run,,,
our DOT our flat map just going to go on,,,
the next line here so let's say um flat,,,
map and then that takes,,,
in a function and for this we're going,,,
to say MSG so for each message which is,,,
going to be formatted as the chat,,,
message,,,
interface and then what that'll return,,,
so right here we want to put a colon and,,,
what that'll return is a formatted,,,
message array okay that has that matches,,,
this right here the U the role and the,,,
content okay so it gets passed in the,,,
chat message we want it to return the,,,
formatted message and the way we do that,,,
um actually we just want to set this,,,
right to an array,,,
and pass in an object and say roll so,,,
roll,,,
user and then the,,,
content will be the MSG Dot and then,,,
message because we the me remember what,,,
we're getting back here the message,,,
field is the user what the user says the,,,
reply is what the AI says so we want to,,,
do that and then let's copy that down,,,
and then the rooll for,,,
AI will be the reply so MSG do,,,
reply and then I want to just filter,,,
filter it because all I want is the,,,
content that's what we want to show,,,
right is the message and the replies,,,
which is now going to be in content we,,,
don't want to show the ruler so the,,,
ruler the role so I'm going to filter,,,
that out so let's go on the next line,,,
and say,,,
filter and pass in,,,
uh let's say,,,
MSG so MSG which will now be the,,,
formatted message okay no brackets,,,
because it's not an array we're we're,,,
going through each one so each one will,,,
be a formatted message and we just want,,,
to return from that we want to filter,,,
out just the content which will be the,,,
reply or the me and the message and then,,,
for the error so in the catch here let's,,,
just do a console do,,,
error and we'll say,,,
error loading chat history and then,,,
show show the,,,
error Okay cool so we have our chat,,,
store and we have our load chat history,,,
so now we want to call this right we,,,
want to call this within our um chat,,,
view so let's go to chat View and we,,,
want to bring,,,
in couple things here so up at the,,,
top let's import now we want this to,,,
happen when the component mounts and we,,,
can do that by using on mounted so I'm,,,
going to bring in on mounted I'm also,,,
going to bring in a function called Next,,,
tick and what that does is it allows us,,,
to wait until the Dom finishes loading,,,
before it does something so we're going,,,
to do that and that's going to both of,,,
those are going to be from View,,,
and then we want to bring in both stores,,,
so let's say use user store and then we,,,
also want to,,,
import the use chat store and while,,,
we're at it let's bring in use,,,
router from view,,,
router and I think that should do it for,,,
now now we need to,,,
initialize a couple things so the user,,,
store,,,
set that to use user,,,
store then we have the chat,,,
store set that to use chat store and,,,
then the router so,,,
const uh,,,
router set that to use,,,
router and then I want to make sure that,,,
the user is logged,,,
in so uh let's just say Ure,,,
user is logged,,,
in and again I know I've said this but,,,
if you want to incorporate actual,,,
authentication with a password you can,,,
do that but I didn't really want to,,,
focus on authentication because that's,,,
you know that's such a huge thing I,,,
wanted to focus on the whole AI aspect,,,
of,,,
it so yeah let's just check if,,,
not so if not user store.,,,
userid then,,,
we're just going to take the router and,,,
we're going to push to,,,
slash and then I also want to scroll to,,,
the bottom right so because we're going,,,
to be able to scroll through the chats I,,,
want it to to scroll to the bottom so,,,
let's say autoc,,,
scroll to,,,
bottom so I'm going to create a function,,,
here called scroll to bottom,,,
all right and then in that um this is,,,
where we're going to we're going to use,,,
next tick which again we'll wait until,,,
the Dom has been updated and that takes,,,
in a,,,
function and then to scroll to the,,,
bottom let's get the chat container,,,
which we haven't created yet we don't,,,
have that you know down in the output,,,
but we will so we'll say,,,
chat container and we're going to set,,,
that to document. getet element by D and,,,
it's going to have an ID of chat Dash,,,
container okay so then under that I'm,,,
going to just check,,,
for chat container and then we'll take,,,
chat container and we're going to set,,,
the scroll Top Value to the scroll,,,
height so chat container. scroll height,,,
okay now like I said when when we the,,,
component mounts right we come to the,,,
page the component mounts that's when we,,,
want to call the load chat history that,,,
we just created in the store so let's go,,,
under that scroll to bottom and let's,,,
say on mounted okay so this is how we,,,
use this we just pass in a function and,,,
then we're going to call chat store and,,,
then,,,
load chat history which returns a,,,
promise so I'll just use a DOT then um,,,
and then we want to scroll to the bottom,,,
so scroll to,,,
bottom like that all right and let's see,,,
why is this does not exist on type store,,,
did I not save,,,
it um oh I didn't return this oh so at,,,
the bottom,,,
here we want want to return an object,,,
and we're going to return the,,,
messages the is,,,
loading the load chat history and that's,,,
it for,,,
now okay good so now that error should,,,
go away now we want to add the output so,,,
let's go right under the header and I'll,,,
say chat,,,
messages so we're going to have an ID,,,
of chat Dash,,,
container and let's add a couple classes,,,
here as well so for classes we're going,,,
to do Flex,,,
das1 let's say,,,
overflow on the Y,,,
AIS Auto let's do padding so P4 and,,,
space-,,,
y-4 now in here we're going to have a,,,
div with a V4 so the V4 attribute will,,,
allow you to Loop over something in our,,,
case the the chat messages and output um,,,
elements based on you know on those,,,
messages so let's have um let's do a div,,,
I'm just going to add a class of flex,,,
onto this and then items Dash start okay,,,
so on this div I'm going to add a,,,
v-4,,,
directive and set that to the way we do,,,
this is open up some parentheses and say,,,
MSG so MSG we can also get the index in,,,
and then whatever we want to Loop over,,,
which is going to be this the chat,,,
store.,,,
messages so we Loop over those we also,,,
need to add a unique key so let's bind,,,
so colon key and we're going to use the,,,
index as the key and then uh let's see,,,
we're going to add we're going to have,,,
some we're going to have a a conditional,,,
class because if it's a user I want to,,,
align it a certain way and if it's a AI,,,
I want to align it a certain way so the,,,
way we do that is in addition to class,,,
we can do colon class to make this,,,
Dynamic and then we can put basically a,,,
JavaScript expression in here I'm going,,,
to say if the message. roll if that is,,,
equal to,,,
user then I want to add add the class of,,,
justify Das end else I want to add the,,,
class of,,,
justify Dash,,,
start okay so that'll add some,,,
conditional styling and then inside that,,,
div we're going to have another div and,,,
let's do a class of we'll say Max let's,,,
do Max with uh extra small so,,,
Xs and I'm going to do p padding on the,,,
xaxis 4 padding on the Y I 2 and let's,,,
do rounded large and then I also just,,,
want to add on medium screens and up,,,
then let's do a Max width of,,,
medium okay and then I want this to have,,,
a conditional class as well because I,,,
want to have a different color based on,,,
if it's the user or the AI so just like,,,
we did above we're going to do colon,,,
class for conditional uh styling and,,,
let's say If the message. roll is equal,,,
to,,,
user then I'm going to have the class BG,,,
Das,,,
blue-,,,
600 with text- white else then I'm going,,,
to have the class of BG Das,,,
gray-,,,
700 and text-,,,
white and then let's put in here we want,,,
the content so MSG do content which will,,,
be either the reply if it's the ai's,,,
message or message if it's the user's,,,
message okay so hopefully that makes,,,
sense,,,
um yeah let's go ahead and try that,,,
there we go so looks pretty good what's,,,
the capital main capital main is Augusta,,,
it's the most popular programming,,,
language gives us the answer cool,,,
now the next step is to be able to,,,
actually ask something because right now,,,
we're just seeing the messages that are,,,
there so let's go back to our chat store,,,
and we're going to have a new function,,,
to do this so let's see we're going to,,,
go under this one and let's say send,,,
new message to,,,
Ai and we're going to create a function,,,
called send,,,
message set that to,,,
async and it's going to take in a,,,
message which is going to be a,,,
string okay then in our function I'm,,,
going to check for let's say if we'll,,,
say if not message and I'm just going to,,,
add trim onto that to trim the whites,,,
space or not user,,,
store.,,,
userid then we want to return okay so if,,,
there's no message or if there's no user,,,
then we just want to return,,,
then we're going to take our messages,,,
right so messages is our reactive value,,,
up here right so our,,,
messages and I want to push onto that so,,,
let's say messages. value. push I want,,,
to add to that an array not an array an,,,
object with a rle of user because it's,,,
coming from the user and then the,,,
content of,,,
message okay okay and then this is where,,,
we're going to use that is loading so,,,
I'm going to set is,,,
loading to,,,
True okay because uh actually that needs,,,
to be is is loading.,,,
value set that to true because we're,,,
about to make our request all right so,,,
let's add a try,,,
catch and in the try we're going to make,,,
our request so we'll destructure the,,,
data from await,,,
axios,,,
dopost and the endpoint we're hitting is,,,
the chat,,,
endpoint so let's do our back ticks and,,,
then we're going to add the,,,
import. meta,,,
Dov we want the Vore API URL and then,,,
slash chat so that's the end point and,,,
then we want to pass in the data that we,,,
want to send which is going to be the,,,
message and the user,,,
ID which is going to be set from the,,,
user store.,,,
userid okay now let's come down here and,,,
let's take the,,,
messages value and push on to,,,
that and this time it's going to be the,,,
role of AI because this is the response,,,
right so role is going to be Ai and then,,,
content is going to be the data dot in,,,
the rep reply CU again the it's going to,,,
look like well this is get messages but,,,
when we send a chat it it's formatted,,,
the same way,,,
basically all right so we do that and,,,
then in the,,,
error let's let's just return a message,,,
we'll have a message but it'll just say,,,
like unable to process so let's take our,,,
messages and let's well first off you,,,
know what let's let's just,,,
console. error,,,
and we'll say error,,,
Sending,,,
message and we'll put the,,,
error okay and then as far as the,,,
messages go let's say value.,,,
push and we're going to pass in an,,,
object with the role which is going to,,,
be Ai and then the,,,
content which will say error,,,
unable to,,,
process,,,
request okay and we want to set the is,,,
loading to false so for that we can add,,,
a,,,
finally and then we'll set is,,,
loading the dot value set that to,,,
false and then we want to make sure that,,,
we,,,
return the um send,,,
message okay so now ready to use that so,,,
let's go back to our chat View and let's,,,
see we're going to,,,
go so we got our message content and we,,,
want to go,,,
under under the second closing div here,,,
and we're going to have uh a div let's,,,
do Flex so flex and justify Dash start,,,
and then this is going to have an if,,,
because I want to check for that loading,,,
state so let's say a,,,
vif and set that to chat store Dot and,,,
then is,,,
loading okay so if it's loading then I,,,
just want it to say AI the AI is,,,
thinking so let's actually put a div,,,
with a a background we'll do gray,,,
700 and,,,
text- white,,,
PX4 py 2 and let's do rounded,,,
large okay and then in that div we'll,,,
have a span and I'm going to use the,,,
animate Das pulse,,,
class and we'll say ai ai is,,,
thinking dot dot dot okay so that's if,,,
it's,,,
loading and then we want to put the,,,
input the chat,,,
input uh,,,
under Let's see we got one two 2 three,,,
so just above the last div is where I,,,
want to put the chat input now I want,,,
this to be in its own,,,
component so let's uh let's do that,,,
let's create a new component in the,,,
components folder and we'll call,,,
this chat input.,,,
view okay and then we're going to add,,,
our script and our,,,
setup and our Lang of TS,,,
okay and we're going to import we're,,,
going to import,,,
ref from,,,
View and I want to set a message,,,
variable here so let's say cons message,,,
set that to ref it's going to be empty,,,
by,,,
default and then we have to send this up,,,
a level right because we're embedding,,,
the chat input component into the chat,,,
View and we need the message to be sent,,,
up so we need to emit it so we're going,,,
to say const Emit and the way we do this,,,
is we can use Define,,,
emits and then we're going to pass in an,,,
array and it's going to be called,,,
send,,,
Okay um now here we want to have our,,,
send,,,
message and set that to an arrow,,,
function okay and then that's what we're,,,
going to call when we submit the input,,,
put so before we do that let's create,,,
our output our template so in our,,,
template we'll have a class of,,,
padding padding four let's do BG Das,,,
gray 800 and,,,
flex and then in that div we're going to,,,
have our input add a couple classes here,,,
Flex one padding,,,
to rounded,,,
large uh BG gray,,,
700 text,,,
white and then I want to have a focus,,,
class as,,,
well so at the end here we'll say Focus,,,
colon and I just don't want to have an,,,
outline so outline,,,
none all right and then in this input,,,
we're going to bind it to that message,,,
variable so we use V model for that so V,,,
model to,,,
message and then we'll add a placeholder,,,
as well so say send a,,,
message make that lowercase so send a,,,
message and then I want to be able to,,,
call the send message function when we,,,
hit enter with we're going to have a,,,
button too but I also want to be able to,,,
hit enter so I'm going to add here let's,,,
say at and then we can do key up and the,,,
key that I want is enter so we can just,,,
say do enter and then set that to send,,,
message all right and then underneath,,,
the,,,
input just going to put a slash there so,,,
underneath the input we'll have the,,,
button so here let's say button and give,,,
it some classes margin left we'll do,,,
margin left two PX -4,,,
py2 I'm going to do a color of BG blue,,,
500 and rounded,,,
large okay and the button will just say,,,
send,,,
and of course when we click this we want,,,
it to call send message so let's say at,,,
click set that to send,,,
message all right and that should do it,,,
now we just have to add our send message,,,
here and all we really need to do is,,,
emit the the message up to the to the,,,
chat view so let's first off check we'll,,,
say if not if not,,,
message. value and then we'll just trim,,,
it so if not message then we want to,,,
return okay and then we want to use that,,,
emit and we want to emit send and we,,,
want to send along with it the message.,,,
value and then we'll just clear the,,,
value so message. value set that to an,,,
empty string all right now we need to,,,
embed the chat uh the the chat input,,,
into the chat view so let's import it so,,,
right here we're going to import,,,
chat,,,
input and we're going to come down,,,
here and go right above the last div and,,,
let's embed it so chat input and then we,,,
want to pass here we want to say at send,,,
because remember we from the chat input,,,
we emitted a custom event called,,,
send so when that's called basically,,,
when we hit the button or we hit enter,,,
then that event is going to get called,,,
so we need to add a Handler to it and,,,
the Handler is simply going to be the,,,
chat store. send message,,,
whoops chat store. send,,,
message and that's it so now we have our,,,
input down at the bottom here so let's,,,
try it out we'll say who who was,,,
the who is the,,,
10th president of the,,,
us so AI is thinking and then it comes,,,
back 10th president was John,,,
Tyler so yeah I mean this is working now,,,
one thing that I'd like to add and we're,,,
going to have to do this in the back end,,,
is context because you'll see if I say,,,
now uh we'll say what,,,
year what years was he,,,
president okay so I'm going to send that,,,
a i is thinking to respond to your query,,,
I need to know the specific person so it,,,
doesn't have context right it doesn't,,,
know it doesn't look back and and see,,,
that I just asked about John Tyler so we,,,
have to add that functionality in the,,,
back end I'm actually going to go let's,,,
see so this is the back end here I'm,,,
going to open up vs,,,
code in the back end,,,
okay so this is now my my Express,,,
API and we're going to go to the uh,,,
let's see the,,,
server TS and the where we want to do,,,
this is going to be the chat,,,
endpoint and if you want to break these,,,
up into separate files you can I know,,,
that this is kind of a long file um but,,,
yeah so this is the chat,,,
endpoint and let me just figure out,,,
where where I want to put this um so we,,,
we check for the message the user ID we,,,
query users check make sure the user's,,,
there check the user in the,,,
database and let's see then we set our,,,
response so let's go after we check the,,,
user in the database and before we send,,,
the,,,
response so we're going to go right here,,,
and we what we want to do is fetch,,,
users past um p pass messages for,,,
context and what we want to do here is,,,
essentially instead of sending back,,,
because right now when we hit slash chat,,,
it sends back this it sends the the an,,,
object with the role the user rle and,,,
then whatever the message is all right,,,
uh I'm sorry that's not what it sends,,,
back that's what we're sending it and,,,
then it sends back,,,
down here it sends back the reply but,,,
what we want to do is instead of of us,,,
sending it only the current message we,,,
want to send it we want it to also have,,,
context of the last whatever 10 20,,,
messages however however many you want,,,
to set it you want to input that into,,,
open AI as well as the current message,,,
so that way it has context and it can,,,
look back and when we say you know what,,,
years did he serve then they can look,,,
back at the last few messages and,,,
respond with that,,,
context so to fetch the,,,
users um not fetch the users fetch the,,,
the users messages we can come down to,,,
get,,,
messages and right here the chat history,,,
we can just copy this this block of,,,
code okay and then we'll put that here,,,
so right before we send the the request,,,
to open Ai and we're just selecting from,,,
the chats where the user is the user ID,,,
I'm going to get rid of this semicolon,,,
because I also want to just add order,,,
by and we want to order by,,,
chats Dot and then create at and then,,,
I'm also going to limit it to the last,,,
10 messages if you want to put more,,,
that's fine but just remember the more,,,
you put the longer the request is going,,,
to,,,
take all right so we have that now like,,,
I said we need to send not just the,,,
current message but but the last the,,,
chat history so what I'm going to do is,,,
create a variable for actually let's put,,,
a comment here let's say format the chat,,,
history for open AI okay because it has,,,
to be formatted in a certain way so I'm,,,
going to call this,,,
conversation because that's what it is a,,,
bunch of messages in context is a,,,
conversation and for the type we're,,,
going to use,,,
this uh chat what is it chat completion,,,
message param so we want to use that and,,,
it's an array so put some brackets on,,,
there and uh I believe we have to bring,,,
that in so up at the top oh it was,,,
brought in okay so this comes in from,,,
open AI,,,
resources all right so back to where we,,,
were so we're going to set that and,,,
we're going to use flat map because it,,,
needs to be a flattened array so let's,,,
say chat history and then,,,
flatmap pass,,,
in our function and say for each chat we,,,
want to return an array so actually this,,,
can be just brackets so we want to,,,
return an array that has uh it should,,,
look like this right so it should have,,,
the,,,
role so the user R will have the,,,
content of chat.,,,
message and the AI role will have the,,,
chat,,,
reply because we need both we need our,,,
messages and the ai's messages in the,,,
conversation in order to have,,,
context so now let's go under that and,,,
let's say uh we'll put a comment here,,,
we'll say add latest user,,,
messages to the conversation,,,
okay so we can do that by,,,
saying conversation.,,,
push and we're going to push onto it the,,,
latest which is this right normally or,,,
or what we were doing is just passing,,,
this in we still want to pass that in,,,
along with this stuff so we're pushing,,,
this onto this so we'll just put that in,,,
there like,,,
that all right,,,
now we should be able to come down here,,,
and instead of for messages instead of,,,
doing this we'll say,,,
conversation as and then the chat,,,
completion message param,,,
array uh let's,,,
see content oh so this right here this,,,
this shouldn't be AI this should be,,,
assistant because when you're dealing,,,
with open AI there's a couple different,,,
types that you can use for role there's,,,
user um we're dealing with assistant,,,
here the AI is is the assistant so that,,,
should clear up that,,,
error all right so now that we've done,,,
that it should have the context we,,,
shouldn't have to change anything in the,,,
front end because it's still returning,,,
the same thing you know that's still,,,
returning the AI response but it should,,,
have context now so let's go ahead and,,,
run the back end because I did I stopped,,,
it so I'm going to do npm runev,,,
all right so now I'm going to come back,,,
over,,,
here and I'm going to say who was,,,
the who was the,,,
11th president,,,
of the,,,
US okay James K pul now let's,,,
say what years did he serve,,,
there we go James K poke served as the,,,
president March,,,
4th in 1845 1849 cool so now we have,,,
context and I think that's something,,,
that's you know really important you,,,
don't want to just ask one question and,,,
that's it you want to be able to,,,
conversate all right so we're we're just,,,
about done this one other thing I want,,,
to do so let's say I I was to do like um,,,
give,,,
me give me a list of the,,,
the,,,
top five cities in the US when it comes,,,
to crime,,,
rate and you could take I guess I could,,,
interpret that as low lowest crime or,,,
best or you know least crime it answers,,,
but it's not formatted very nicely we,,,
have number one here Albuquerque number,,,
two Baton Rouge so I want this to,,,
actually show in a nice list,,,
so what we can do is just add a simple,,,
format message function in our chat view,,,
so let's go to our chat View and we can,,,
use regular Expressions to replace,,,
certain um certain tags and so on so,,,
let's,,,
uh let's see where do I want to put this,,,
we'll put it right above the scroll to,,,
bottom and let's say,,,
format format AI messages for better,,,
display so we'll call this format,,,
message and that's going to take in text,,,
which is going to be a,,,
string okay and then we just want to,,,
check if there's no text if there's no,,,
text then we're just going to return an,,,
empty,,,
string all right and then we're going to,,,
return a bunch of replace methods with,,,
some regular expression and I'm not,,,
going to type this out I'm going to,,,
paste it in and you guys can get it from,,,
the repo if you don't want to type this,,,
stuff in but basically we're going to,,,
preserve line breaks we're going to bold,,,
text um so we're looking for like new,,,
lines and replacing it with a a line,,,
break HTML tag bold text inline code um,,,
bullet points Etc so the way that we use,,,
this is down here where we output the,,,
content instead of outputting it in the,,,
div inside of these curly braces we're,,,
going to use the the V HTML directive on,,,
the div right so this div right here,,,
let's add v-,,,
HTML and then we can just set that to,,,
the the,,,
format message function and then pass in,,,
our MSG do,,,
content and now as you can see the list,,,
is nice and,,,
clear all right all right so that's yeah,,,
that's pretty much it guys um if I were,,,
to log out and log in as I think I have,,,
some messages with this with uh what was,,,
it Brad at,,,
Gmail and you can see the code when I,,,
asked for a rest API I mean it's not the,,,
best if I make it a little bigger you,,,
can see it,,,
better it's not formatted the best but,,,
it's readable,,,
you know um but yeah so that's it we now,,,
have a an AI a AI chat bot that works,,,
pretty well and will give you you know,,,
gp4 powered data now the last thing I'd,,,
like to do is actually deploy this and,,,
since we have our back end and front end,,,
completely separate we're going to be,,,
hosting our back end with render and,,,
we're going to host our front end with,,,
versel all right so let's get into that,,,
all right guys so we're going to go,,,
ahead and deploy this project and we,,,
have the back end which we're going to,,,
be deploying to,,,
render.png all right so I'm going to go,,,
to,,,
render.jpg,,,
sub repos I'm going to choose chat AI,,,
API and then there's just some options,,,
that we need to add,,,
here so for one um the build Command,,,
right so if we look at our package.json,,,
we're using typescript and we need to,,,
compile that typescript so we're going,,,
to do that on the server so we need it,,,
to run this npm run build in addition to,,,
npm install so right here we're going to,,,
say and run npm run build and then the,,,
other thing is the the start it's the,,,
server.js is going to be in the disc,,,
folder so here instead of node server JS,,,
we're going to say node disc SL server,,,
JS all right then we just have some,,,
environment variables so in ourv,,,
copy everything but the port and then we,,,
can say add from. EnV paste that in add,,,
those variables and that's it now we'll,,,
click deploy web,,,
service and this can take like a minute,,,
or,,,
two all right so it says your uh build,,,
successful your server is live this is,,,
the domain here and we can test this,,,
real quick so I can go into,,,
Postman and make a new request,,,
post request to this that's not it it,,,
didn't copy there we go all right so we,,,
want to do this,,,
domain right and then we're going to do,,,
slash and let's do get Dash messages and,,,
then in the,,,
body we're going to add user ID and,,,
let's do,,,
johore gmailcom,,,
and send,,,
and there we go so we're getting the,,,
messages so we know that that the API is,,,
now live so now we want to do the front,,,
end so I'm going to go to verel and log,,,
in with,,,
GitHub okay and then we're going to,,,
click add new,,,
project we're going to select chat AI UI,,,
this,,,
time and let's see so,,,
V build and output settings I believe,,,
leave everything we can just leave as is,,,
um for environment variables though we,,,
want to add the Vore,,,
aior key not key what am I doing API,,,
underscore,,,
URL right because this is going to be,,,
our endpoint and we don't want to use,,,
Local Host 8000 or whatever we want to,,,
paste in the the render endpoint or the,,,
render URL,,,
and yeah I think that's it so let's,,,
click,,,
deploy again this can take like a minute,,,
or two all right so that took like 10,,,
seconds and then we're going to,,,
continue and let's check it out if we,,,
just click on that and you can see we're,,,
at the live site now and I'm going to,,,
log in as let's say,,,
John and,,,
John at,,,
Gmail start chat and I should see my,,,
chats because remember we're using the,,,
same database and let's try it out I'll,,,
say what is the,,,
capital of,,,
Texas AI is thinking the capital of,,,
Texas is Austin so we have this fully,,,
deployed and you can see just how easy,,,
that that was all right but that's it,,,
hopefully you guys enjoyed this I may do,,,
another video where we create a react,,,
front end uh or I might save it for my,,,
react course I'm really not sure yet um,,,
and I may add on to this we may add,,,
actual authentication with you know,,,
protect um protection of the actual,,,
messages and adding password,,,
authentication and so on but I think,,,
that this is a really good start and,,,
hopefully you guys learned quite a bit,,,
from this and thanks for watching if you,,,
liked it leave a like and I'll see you,,,
next time",,,
V0P3Opf-zUs,"hey guys so I have a pretty cool project
for you today that um that I would
suggest following along with and coding
with me but if you just want to watch it
that's fine too so we're going to create
a little application that will do TTS
it'll do text to speech and translation
to a different language now the main
focus of this is going to be serverless
functions because we're going to have
we're using the Google translate API and
you need to use an API key and that's
not something that you can put in your
client side JavaScript so what we're
going to do is use the versel CLI that
will allow us to create serverless
functions right on our you know on our
machine and we'll be able to hit a
specific endpoint and that will call the
serverless function all right then once
we get through all that we'll push to
verell and we'll have it live like it is
now as you can see here and just to give
you an example of what it does if I say
like hello world I can choose a language
so I'll just keep it at English for now
and I can choose all these different
voices and the the TTS and the voices
are using the web speech API so there's
actually a bunch of things you're going
to learn in this one little project
hello world so you can see that that
works if I wanted to say it in
Spanish right if I want to change the
voice okay so I mean it's a it's a
useful project you could use this if
you're trying to converse with someone
that you know speaks a different
language um but the actual project
itself isn't really the full you know
what I want you to get from it it's the
serverless functions because we don't
have to create a whole Express back end
or or whatever we just simply use the
versel CLI and we just create this one
file and this is where we can use our
API key and we can you know make the
request to the the Google translate API
and then in the client side JavaScript
which is in public this is where um
where we use the the web speech API okay
so yeah no framework just you know
vanilla JavaScript just dealing with the
Dom and and I think you're going to get
a lot from it so let's get
[Music]
started all right guys so we're going to
get started and you're going to learn
quite a bit in this little project
you're going to learn about the web
speech API you're going to learn about
Google Translate
you're going to learn about serverless
functions which I think is is probably
the most valuable thing that you're
going to learn in this project um we're
going to learn how to do it locally
using the versel CLI and we're also
going to push to to versel um so I just
want to show you the structure of the
the folders and files which is pretty
simple so we'll have the project folder
which you can see I have open in vs code
it's TTS translate app there's nothing
in it right now but we're going to have
a public folder with all of our our
public files like the index HTML the
script.js which is the client side
JavaScript so the event listeners and so
on style CSS for any additional styles
that you want uh you know aside from
tailwind and then an assets folder if
you want any images or icons now in
addition to public we have an API folder
and this is where your serverless
functions are going to go so any server
side logic is going to go here and we
have a translate. JS file that's where
we're going to you know hit the the
Google translate API and we need to
include our API key so that's why it's
important that this is in a serverless
function and not in the client side
JavaScript because you don't want that
key to be shown to you know users all
right so we'll have that there and then
in the root you'll just have a read me
which is optional a EnV for local
environment variables and then a get
ignore and vers sell ignore for anything
we don't want to to push all right so
that's our the the gist of our structure
so let's start off by just creating our
public folder okay so public and in that
we're going to have an
index.html it's our main interface we're
also going to have a oops we're going to
have a
style
styles.css file and we're also going to
have a
script.js which will be our frontend
JavaScript and then in addition to that
that will just have an assets folder if
you want any images or anything all
right so uh we're just going to stick to
the public stuff for now let's start off
by creating the interface so adding the
HTML so I'm going to add a boiler plate
here for the title we'll say TTS and
translation app and then I'm using um
Tailwind so I'm just going to use the
play CDN so that consists of just adding
the script tag and that's it we can use
TA in classes and then let's also add a
link to our stylesheet which I'm not
going to put anything in but again if
you want to add to it it's just good to
have it there okay now for the UI I'm
I'm going to type some stuff and paste
some stuff so on the body let's add a
few classes so I do want to have a gray
background so we'll do BG gray 100 just
very light and then I'm going to make it
a flex box where we align everything to
the center
so we want to do justify Center and item
Center and then let's do full height so
H screen and then in the body we'll add
uh a container actually before we do
that let's just put something there I'll
just put app and then for now I'm going
to open it with the live server
extension for vs code so I'll click go
live you can also just you know double
click on index HTML and open it on your
file system but ultimately we're going
to be using the versel CLI which will
run our project on Local Host 3000 and
when we use the versel CLI we can have
serverless functions on our local
machine and run them all right but for
now I'm just using uh live live server
so let's get rid of app and let's create
a little container here so we'll do BG
white let's do
shadow um Shadow
medium we'll do rounded Das large um
padding we'll do six and let's put a Max
width of medium and width Dash full so
it'll be really narrow layout and then
in that in that card or container
whatever you want to call it we'll have
an H1 let's do a size of text- 2XL let's
do font D
semibold and we'll do text- gray 800 for
the color and we want to center
it oops text Center
and then we also want to add a margin
bottom of four and then in the H1 we'll
say TTS and translation save that and
that's what we got so far so I'm going
to just paste in the the the different
inputs so first we have the text area
which I'm going to put right under the
H1 okay so we have just a text area with
some classes border and all that stuff
resize To None has a placeholder and
then the next thing is going to be the
voice selection because with the web
speech API which is what we're using for
the TTS you can select different voices
and different accents or locals so under
the text area I'm going to paste this in
it's a div with a label that says select
voice and then a select tag with an ID
of voice select because we're going to
bring it into the JavaScript and these
options here aren't going to show
ultimately um ultimately we're going to
get the voice from the web speech API
and fill those in here all right and
then the last thing we need for now is
just the button so I'm going to go under
that div that wraps the select and paste
in a button okay and this button has an
ID of play button and then a bunch of
classes that makes it look like that
okay and then the last thing we want to
do for now is just add a script and the
source is going to be the front-end
JavaScript script uh script Js and yeah
that should do it for now so now we're
going to jump into the
script.js and this is where we're going
to be using the web speech API all right
so we're going to use over here you'll
see under
interfaces um we're going to use the
speech synthesis utterance class or
interface and this represents a speech
request and that's what we want to do we
want to take the text that's typed into
the text input and we want to make a
speech request with that all right and
then we we can speak it with the speak
method so if I do a search for speak and
let's see so right here speech synthesis
speak so we're basically going to be
doing this we create a new instance of
an utterance and then we pass that
utterance into the speak method so let's
jump back
over to our script and we're going to
first bring in the things we need so
let's say const and we'll bring in the
voice select which is that select box
box so document oops forgot the equal
sign so document Dot and I'm going to
use Query selector and that has an ID of
voice
select okay and then we'll just copy
that down a few times next thing we're
going to need is the play button so that
has an ID of play button and we'll call
the
variable play button as well and then we
have the text we'll call this text input
and we're going to select that just by
the text tag of text
area all right so those are the three
things we need at the moment now I want
to um play the the TTS so let's say play
TTS and we'll do that by taking the play
button and let's add an event listener
onto that we want to listen for a click
and when that happens we'll fire off a
function and this is where we want to do
that use that web speech API so we'll
create an utterance
and set that to a new instance of
speech right here speech synthesis
utterance and that takes in what you
want it to utter or what you want it to
speak which is going to be our text
input but of course we want the value
from that text input all right then we
want to speak it so we can do that by
taking speech uh Speech synthesis and
then calling the speak method and
passing in the utterance
all right so just doing that we should
be able
to type in something like Hello World
hello world and it works okay so very
very simple next thing we want to do is
be able to have different voices so
before we can implement the The Voice
you know changing of the voice we need
to list them in this select box so
basically we need to get them using uh a
method called get voices so just to show
you that real quick uh if we go
to Let's see we should have let me just
search for it
get uh get
voices yeah so right here so voices get
voices and then we're basically going to
do this Loop through the voices and
we're going to create a new Option
element for each one okay so let's do
that so I'm going to go right above the
event listener and let's say
load available voices
I'm going to initialize an array called
voices and then I'm going to have a
function
called function is going to be called
load
voices all right and then in that
function first thing we'll do is get the
voices so let's take our voices
array and set that to speech
synthesis. get
voices okay so we'll have an array of
voic now we want to Output those as
options so and that's going to go in the
voice select box so take our voice
select and let's say enter HTML set that
to voices and then we're going to add
onto that map so this will basically uh
you know turn it into an array of of
whatever we want in this case it's going
to be option values or option tags so
let's pass in our function here and
we're going to say for each voice and we
also want to get the
index and let's use back ticks here
we're going to create an option oops
that should be lowercase so option and
the
value which we're going to set that to
the um index okay so the value is the
index and let's close up
option and then for what we want to
display in the option is going to be the
voice name so here let's say voice. name
and then we'll put a space and then some
parentheses and I want the Lang or the
it's the the language like en for
English es s for Spanish and it won't
change the language this this doesn't do
that that's where the translate comes in
but it will change the accent so here
let's say voice.
Lang okay now this will give us an array
of these and that's not what we want we
want it to be outputed as a string so we
just have to add on to that do
join and just pass in just empty quotes
we haven't called this function yet
which we do want to do but we also want
to call it when the onvo is changed
event is fired off so let's say trigger
we'll say trigger loading
voices when they become available
so we can just say speech synthesis Dot
and then on voices change and then set
it to our load
voices load voices function and then
also call it initially right here with
load
voices okay now if we take a look you'll
see that it shows all the voices okay
and it might be different depending on
the platform that you're you're using um
and if I type in
hello hello it works with Samantha if I
change it to Aaron hello it you notice
it didn't change it's still using that
same voice um that's because we need to
basically change that um down here when
we call that utterance so right under
the utterance variable let's say con
selected
voice okay so we'll have a variable
selected voice set that to the voices
array and then whatever the value is so
voice select which is that that select
box we want whatever that value is then
we're setting the SE that selected voice
to then we're just going to check for
that selected voice and then we'll
change the utterance because you can set
the utterance dovo like this and you can
set it to the selected voice so now
let's try it
again hello Samantha Aaron hello so
that's different Albert
hello I don't know what's up with Albert
he doesn't sound too healthy but it's
changed
Alice and you can see that this one has
a different accent because it has a
different uh language this that's the
voice Lang all right so that takes care
of the most of the client side stuff so
the language to change the language is
going to be more tricky because we need
to uh we need to use the the translate
API which uses an API key and we can't
just put the API key in this file
because everyone would be able to see it
and you know use it so that's where the
uh the serverless function is going to
come in now before we get to that though
let's just add the language dropdown so
I'm going to go back into the HTML and
I'm going to put this language selection
drop down right above the voices so
right here okay so it's just a again a
div with mt4 got the label select and
the ID of language select okay so you
can see it here and there's nothing
showing but what we can do is create the
languages we want in our JavaScript and
then fill the form fill that with that
with the languages so let's go back to
our script JS and up at the top here
below the you know where we selected
everything let's say we want an array
of um we'll say array array of supported
languages languages with their ISO
codes so like en for English es for
Spanish Etc so const languages that's
going to be an array of objects and the
object will have the code which will be
in this case en for English and then
it'll have the name which will be the
longer version of English all right and
I'm going to just paste in the rest of
these languages and you can use
different ones but these are the ones
I'm using English Spanish French German
Italian Japanese and Chinese simplified
all right so now we want to populate
this select box with those languages so
let's say
populate um
language select box so we can do that by
taking the languages array we want to
Loop through with four each and let's
pass in our
function okay now for the I don't want
to I want to get the code and the name
so I'm just going to destructure here
and get code and name so we have access
to those for each one and then we like I
said we need to create an option for
each language so let's say document do
um create ele element oops create not
attribute create
element and the element we want to
create is an option right then we want
to fill the option value and the value
is going to be the code so n ESF FR and
then the text we want to be the long
version which is the name so let's say
option. text
content is going to be equal to the name
all right then we we just need to add it
to the Dom so we'll say language or yeah
language select which is the the select
box which I didn't I didn't add yet did
I so up here let's just bring in let's
say ID language
select and that variable language
select okay so then we want to take that
select box and we just want to append
child and we want to append the
option so now we can see it shows all
the languages that we have in this
array so now we we're to the point where
we need to create our function our
serverless function to reach out to the
translate API um but before we do that
we need to set up an API key so we're
going to have to go to the the Google
console which I believe is like console
yeah console. cloud. gooogle and from
here you're going to want to if you
don't have a project already create one
this is my tutorials project and then go
to API and
services and then you're going to want
to enable API and services and then
search for translate and it's going to
be this Cloud translation API you'll see
a button here that says enable just
click that to enable it then you have to
create a key by going to API and
services credentials go to create
credentials API key
it'll generate a key for
you okay so you just want to grab that
and then what we'll do is put that into
a new file in the root called
EnV okay and that's going to be we're
going to call this Google
uncore translate API key and then paste
that in okay make sure you use your own
I'm going to delete this after anyway so
we have that
now we're going to have uh a new folder
in the root as well called API and in
that we're going to have a file called
translate. JS and this is where our
translate uh serverless function is
going to go now to be able to use
serverless functions locally while we're
in development we need to use the versel
CLI so what you're going to do is open
up a terminal and run npm install dasg
cuz we're installing the globally and
then
versel okay that way you can just use
the versel
command all right so
now next thing we want to do is
authenticate with versel so make sure
you have an account I'm going to say
versel login and I use GitHub so I'm
going to continue with
GitHub and you can see I get this
success message in the browser so now
I'm authenticated with forell in my
terminal so the next thing we want to do
is create a project okay we're going to
make this a versel project by saying
versel and then
Dev now it's going to ask us some
questions it's going to say setup and
develop whatever you know the location
and name of the app I'm going to say yes
and then where to save your project so I
have two I have the um the free tier
which is this and then I have traversy
media which is the a paid tier so I'm
going to use my free tier which is
probably what most of you guys are going
to use link to an existing project I'm
going to say no because I haven't
created one on versel yet my project
name I'll just keep that the directory
we want that to be the home so just
enter and do you want to modify these
settings I'm going to say
no all right so what it did is now it
created this versel uh folder for our
cache it also created a dog ignore which
has that versel folder in it now in
addition to that I'm going to add node
modules and I'm going to add EnV because
I don't want those to be added um
either okay now also in versell if you
go to your
dashboard I'm going to reload this
you'll see that it's been added here TTS
translate app now there's no deployments
um we'll do that after but it does it
does initialize the project inverse L
but now what we can do is is create
serverless functions so in this
translate JS the way that we create a
serverless function is
export default and async
function function called
Handler and that's going to take in
request and response so just like as if
you were you know using Express and you
were creating a route takes in the the
HTTP request and response object and
then for now just to test it out I'm
going to say return res. status of 200
and then I'm going to add on to that
adjacent object and just say
message and set that to hello world okay
so now what I should be able to do is on
my local machine you'll see it's
actually running on Local Host 3000 so
instead of using live server right I'm
going to shut off live server and then
I'm going to go to uh
local host or whatever my loop back and
then
3000 and I'm going to have my project
here and what I can do now is go to
slash API SL
translate and it should run my
serverless function and there it is so
we just get our message of hello
world okay so and in here we can do any
server side code and it's protected from
from users from the
client now I want this to be a post
request when we call this to do the
translation I want it to be a post
request so what we're going to do is
right here let's say if the request.
method if that is not equal to
post then let's actually just move this
in here but let's make this a status of
405 and then we're going to set instead
of message I'm going to set it to error
and I'm going to say method uh method
not allowed because it has to be a post
request all right then we want to be
able to get the um the body right that
we want to be able to get the text and
the target language from the body and we
can do request. body just like you would
with you know an Express back end and
I'm just going to destructure from that
the
text um the text and Target which is the
language okay then we want to just do a
little bit of validation and say if not
text or if
not
Target then I'll just copy this response
here paste that in except this is going
to be a 40
400 error and let's just say for the
error
missing text or
language all right now we want our API
key now remember that's in the EnV file
but by default this isn't going to we're
not going to be able to access it
because we need to use the EnV package
locally so what I'm going to do is
create a new terminal here and we're
going to npm install Das uppercase D
because I'm installing it as a Dev
dependency
EnV okay so that will install it that
will now have a a node modules folder
and we want to bring that in and call
the config method that's all you have to
do in order to use you know process.env
whatever so um I'm going to I only want
that to run locally the Dov package
because when we're deployed to verell we
add our environment variables right we
go here we go to settings environment
variables and we add them here I want to
use the file so I only want to use the
ENB package locally so I'm going to do a
conditional here and say if
process process. env. nodecore EnV so
our node environment if that is not
equal to
production right so if it's not equal to
production then I want to load the EnV
package and I want to use the um the
config method now I can't just simply do
import
EnV from. EnV because your Imports have
to be the very first thing in the file
and this isn't it's within here but we
can use what's called a dynamic import
and that's going to be asynchronous so I
could either do a DOT then or I could
use an async function which is what I'm
going to do and this is an iffy so it's
going to have parentheses after it as
well all right but what we can do is
just say async and then have a function
and in that I'm going to say con. EnV
set that to a weit and then import so
this is a dynamic import so
EnV right and then I simply want to call
the config method that's on that object
so Dov do and then
config all right so we just need to add
that in order to use the um the
variables in this
file so next thing let's actually create
a variable for the API key cuz we need
to send that with um with our request so
we can now get the API key with process.
EnV Dot and then
Google
translate um API key and then let's
create a variable for the API URL this
is the Google translate endpoint that we
need to hit so that's going to be
https and then
translation. googleapis.com
slash language SL translate SL verion 2
so V2 and then we want a query string of
key and set that to our API
key all right so we have the API key we
have the URL now let's make the request
so let's do a try catch and in the try
I'm going to create a
response variable and then make the
request with await fetch p pass in our
API URL and then some options and we
want to set the method to
post so method post we want to set
headers and set the content Dash
type to application SL
Json and then we want to send the body
and the way that this API works first of
all we're going to
stringify so stringify it takes an
adjacent object with a Q which is the
query which we have as our text variable
so text then it also takes a Target
which we also call the variable Target
right so we're talking about the stuff
we're getting from the body which
ultimately comes from the form and it's
called Target so we can just simply do
that and then also a format which is
always going to be text all right so
that is the request now let's check to
see if it's not okay okay so if not
response.
okay then let's get the the error
text which we can get from
await
response. text and then what we want to
send back is going to be res. status
it's going to be whatever the response
do status is and then
Json and we'll pass in
error set that to the error error
text all right now if it's okay if
everything works out then we want the
data which will be the translated text
so we can get that with await response.
Json right and then we'll want to send
back re status of 200 because
everything's okay and then
Jason pass in the data okay now in the
catch
I'm just going to do a console.
error and I'll just say error in API
call okay and then as far as what we
want to send back to the client let's
say status
500 and we'll send an
[Music]
error okay and that error will'll just
say internal server
error and that's it now we can test this
out so we can't do it with the browser
because remember it has to be a post
request so what I'm going to do is open
up my
Postman uh extension but you can use
anything you know any hdb client and say
new request and I'm going to make a post
request to http localhost 3000 API
translate I'm going to do it without
sending the body
first and I get missing text or language
so let's go to body for uh form URL
encoded and let's set the text to hello
world let's set the target to we can do
en which is
English and there we go we get back a
data object with a translations array
with one object in it with a translated
text of hello world if I change it to es
which is
Spanish then I get back the same thing
but it's I get the Spanish
language okay so we know that our
serverless function is working it's
doing what it's supposed to so now we
need to integrate that into our actual
application which is let's go back here
all right so we want to integrate that
into our client side JavaScript so let's
go into script
JS and let's see how do we want to let's
start off just by creating our translate
text function and that's what's going to
make the request to our serverless
function you're not going to make a
request to the translate API from your
client you make a request to your own
serverless function which then makes a
request to the client okay and that's
where you want your key you know you
don't want to put this into your client
side so let's create this function right
above the um the play play event
listener so let's say
translate uh translate text
with serverless
function so function actually let's make
this a
sync and we'll call this translate
text and it's going to take in the text
and it's going to take in the Target
Lang target
language all right and then we're going
to use a tri catch and we're going to do
the same thing just like we made a a
request to the Google translate API now
we're making a request to our serverless
functions API so const
response we want to await Fetch and we
want to pass into that slash API SL
translate okay and then as far as the
options needs to be a post
request um header
so content
type okay then we want the
body okay so the body is going to be um
json. stringify and then we want to send
the
text so
text uh which is going to be this text
that's passed in so we just do that and
then the
target so Target is going to be set to
the Target Lang that's passed in
here all right then we want to check it
so let's say if
not if not response.
okay then let's just throw we'll say
Throw new
error and some back ticks we'll say
error
and we can get the
response uh response.
status and then I want to show the
response text which is a synchronous so
we just going to do
await
response.
text okay now if it's if everything goes
okay let's get the
data so we want to await response.
Json and then remember how it looks when
it's returned it's a it's a data object
with a translations array and then an
object in that array with a translated
text so keep that in mind because now
what we need to do is
return uh return data so this is the the
data variable that I created but in that
is that other data object so data. data
and then in that we have a
translations array which we want the
first and only item and then from that
we want the translated text value so
that's what we're
returning okay and then in the catch
let's just do a console.
error and we'll say
um
translation
error and then I'm just going to do an
alert for the user we'll say failed to
translate
text and then we'll just return
text all right so that's the translate
function
now when we play right we don't want to
just play the text we also need to
translate it so let's move the stuff um
like
just you know initializing the utterance
and stuff we'll put that in uh its own
function so let's say
uh TTS we'll just say TTS and then
function function play
text and it's going to take in the
text and then also the voice
index all right and then let's say const
a actually we can just copy yeah we'll
copy
this except it's not going to be text
input value it's going to be the text
that's passed into the
function right and then let's just say
if in the voices array and we want the
voice index which is going to be passed
in so if that then let's change the
utterance
voice set that to the voices array and
that specific voice
Index right and then we'll just speak it
so just like we did here
here speech synthesis speak and then
utterance all right so we can get rid of
all this
now and then we need
to um call play text and we need to call
translate text so and this has to be
asynchronous so let's add an async here
right and then let's get the text to to
pass in which we have the text input
element but we want to get the value and
then I'm also going to trim it as well
so that's the text let's get the target
Lang which we get from the language
select element but we want the value and
then let's get the
selected voice index from the
voices uh what is it voice select.
value all right and then I'm just going
to do a just a check to make sure that
there's something in text so if there's
not then we'll just do an alert and say
please please enter some
text and
return okay and if there's text then
we're going to do a try
catch and in the try we want to
First translate the text before we speak
it so let's say const translated text
not translate because we already have
that function this is translated and
then we're going to use the translate
text and that's going to take in text
and Target
Lang all right then we want to play the
text so for that we call play
text pass in the translated
text and pass in the selected voice
index all right and then in the catch
console.
error we'll say
error uh I guess error during
processing all right and then we'll just
alert for the user we'll say an
error an error
occurred all right all
right so let's try it out so I'm going
to just do hello world let's try English
first hello world hello world okay and
then I'm going to change it to
Spanish there we go it did the
translation change the
voice I don't know what is wrong with
these voices
let's choose uh
Aaron okay so that's Spanish Let's Do
German hello well let's do
Italian Chia Mondo all right so yeah you
can see that it's working we can change
the voices we can change the language so
it does both TTS and
translation now if you want to push this
to
versel that's extremely simple but we do
need to add our environment
variable so let's grab this so we're
going to have this as the
key all right so what you do is go to
settings and then environment variables
pass in the key and then pass
in the
value okay so we can add
that uh yeah save so that gets added now
to push this we can just simply save or
sell and of course you can you know push
to GitHub as well you can do it that way
but um and I I will push to GitHub so
you guys have
this but yeah right here you can see
deploy to production so if I go to
project and we click on that there we go
we
have say um let's do something different
I'll
just what sh",,
",,
ould we put,,,
here this is a great little,,,
project that I,,,
enjoyed this is a great little project,,,
that I enjoyed and we'll try Spanish,,,
with a different,,,
voice,,,
Grand all right so there we go so you,,,
have a deployed useful full application,,,
I mean if you're you know if you're,,,
talking to someone that is speaking a,,,
different language um you can type what,,,
you want to say in here and then run it,,,
they can understand it they can do the,,,
same thing so it's actually a pretty,,,
useful little project so I really hope,,,
you guys enjoyed it if you did please,,,
leave a like and let me know what you,,,
think and I will see you next time",,,
vA5TTz6BXhY,"hey guys welcome to my git and GitHub
crash course for 2025 and Beyond so I
figured that this would be a good idea
for the first crash course of the year
because git is something that absolutely
every developer needs to know at least
the basics of and I do want to stress
that this is a crash course meaning that
we don't dive super deep into really
Advanced topics this is more for
beginners as well as intermediate
developers that may know just the very
basics of git and want to learn a little
bit more so we're going to cover all the
stuff that you need to know such as
creating a local repository staging
pushing to a remote GitHub repo pulling
branching and merging and more and we're
going to start with some slides just to
go over what git and GitHub is and just
some of the fundamentals and then we'll
jump in and we'll start using Git along
with GitHub and I'll even show you how
to deploy a project using cicd which is
continuous integration and continuous
deployment we'll do that with GitHub and
uh a company called versel all right so
let's get into
it all right guys so I just want to go
through some slides talk a little bit
about what git is what GitHub is and
look at some of the the key features and
so on so git is a distributed version
control system or VCS and it helps
developers track changes in their code
base also allows them to collaborate
with others and manage multiple versions
of a project project and in its absolute
simplest form and simplest use case it's
used to back up your code now unlike
other Version Control Systems some of
the older ones git is decentralized
meaning that you don't need a central
server to use it instead every developer
has a full copy of the repository on
their local machine and a repository you
can think of as a like a digital filing
cabinet that stores all your files and
all the changes that you've made so it's
kind of like a time machine for your
code and you can roll back to certain
versions when you need to so Version
Control is a musthave skill for any
developer it's used in almost every
software project and if you think about
big companies like Google Facebook
Microsoft they have thousands of
developers that are working on the same
giant code bases and they need a way to
to manage all the changes that are made
and that's where git comes in it allows
developers to work on the same Project
without stepping on each other's toes
and it also provides a way to track
changes roll back to to previous
versions and it's used for anywhere from
you know a one person to Giant companies
like Google and Facebook now just to go
over real quickly the key features of
git it's distributed it's decentralized
so there's no need for a central server
it keeps track of changes made to your
codebase multiple developers can work on
the same project you have branching
which we're going to talk about more in
a little bit but if you want to create a
separate Branch to work on outside of
your your main branch your main code to
either create a feature or fix a bug you
can do that and then when you're done
you can merge it into the main branch
into the main code you have the option
to work with uh remote repositories like
GitHub but there's others as well such
as gitlab and bitbucket um extensive
tooling so get is supported by many
tools including idees and we're going to
learn about the the workflow soon when
it comes to get but in addition to your
repository there's also a staging area
that you can utilize that you can put
files before you actually commit them to
your local repository the speed so git
is very fast and efficient uh it also
uses sha one hashing to ensure data
integrity and of course it's open source
and free it's it's widely available
without licensing costs it has a large
community and support for plugins and
things like that now there are are other
version control systems like sub verion
or S SPN but git is by far the most
popular version control system today for
the reasons that I mentioned it's fast
it's efficient decentralized now this
chart is from the stack Overflow
developer survey of 2022 and it shows
that almost 94% of developers use git
over other Version Control Systems which
is a huge number and they didn't even
have this this question in the 23 and 24
surveys because it's just so obvious
that you know everybody uses git now I
want to talk a little bit about GitHub
because some beginners can confuse git
with GitHub but GitHub is a web-based
platform designed for Version Control
and collaboration and it hosts G
repositories remote repositories and
provides a graphical interface within
the browser to manage your code and do
other things as well um in addition to
hosting your code GitHub offers you know
powerful collaboration tools like bug
tracking feature requests task
management there's wikis for your
projects so git is the tool that you use
to create these repositories and and
push your code to them but something
like GitHub because there's others as
well it's not just GitHub but these kind
of remote Services um this is where most
of your collaboration is going to happen
this is where people are going to pull
your code from and make poll requests
and add issues and things like that so
it's important to to note that git is
the version control system while GitHub
is the platform that hosts git
repositories all right so when it comes
to installing git there's there's
multiple ways to do this and it really
depends on the system you're on so if
you're on Mac OS you can use the
Homebrew package manager if you're on
Linux you can use whatever package
manager for whatever Dro you're using if
you're on Windows or or any platform for
that matter you can download get from
the official webs s it which is get-
scc.com and when you download the
installer on Windows you also get a
really cool terminal program called git
bash which is a Unix like terminal for
Windows and even though the windows
terminal has gotten a lot better over
the years I still prefer to use git bash
on Windows but that's just me so when it
comes to using git you have two options
you have the the terminal where you
write you know type commands and then
you also have tools with graphical user
interfaces now I recommend learning git
using the terminal it's it's more
powerful and you'll have a better
understanding of what's Happening behind
the scenes um when you use an interface
it's still doing the same thing that you
would do in a terminal but you're not
seeing what's actually happening and the
commands that are actually being run and
then I would say once you're comfortable
with the terminal you can try out a guy
um there's many available like GitHub
desktop Force tree git Kraken um if
you're using visual studio code or other
IDE there's usually well for visual
studio code there is built-in git
features and for many other idees there
are as well but again I would say get
comfortable with the terminal first now
when you start using git you do have to
configure it initially with your name
and email address this is important
because every git commit uses this
information and you can set this with
the these commands here get config and
then-- Global username and then your
name and then same with email now I want
to go over the workflow of git and and
you're going to learn more about this at
when we actually do it this is just kind
of an overview so if you look at the
boxes at the top you have your working
directory and this is on your local
machine you have your working directory
this is where you make changes to your
files you have the staging area where
you PR prepare your files for commit and
then you have the local repository where
git stores all the changes you've made
to your files and this will be all
stored in a hidden folder called dogit
in your project directory and then the
remote repository whether that's on
GitHub or gitlab or wherever that is
that's stored remote and people can then
pull that code down and so on so I just
want to go over kind of the workflow and
the commands that you'll run to move
files around to these different areas
and again we're going to be doing this
so this is just an overview so first off
you're going to run get and knit and
that will initialize a new repository in
your project folder or your working
directory and it'll be a hidden folder
called dogit then once you're ready to
add some files to the staging area let's
say it's your initial commit or you
added a a new feature or you fixed a bug
or whatever it might be you add it to
the staging area with the get add
command and then when you're ready to
commit it to your your local repository
you would run the get commit command and
you add a comment explaining what that
commit is okay once you're ready to push
to your remote repo whether that's on
GitHub or gitlab then you're going to
use the get push command and this is
after you configure your remote
repository because it has to know where
it's actually going to be pushed to and
I'll show you how to do that now when
you want to pull changes from a
repository you would use the git pull
command that's going to pull the files
down to your working directory all right
so let's say one person makes a commit
and they push to GitHub and then another
developer wants to get those changes and
they're already you know they already
cloned the repo or whatever then they
would just type get PLL and that will
get the latest changes now once you go
to a repository for the first time and
you want to get that get those files on
your machine there's a few ways you can
do it you can click the download button
and get the zip file but you don't
really want to do that if you're going
to continuously work on the the
repository so you would use the get
clone command and that would pull the
entire thing onto your local machine now
branching is a key feature of Git it
allows you to work on new features or
bug fixes without affecting the main
code base so you can create a new branch
make a change and then merge those
changes into the main branch and this is
a common workflow in git and you can
also create branch branches for
different environments like production
staging and development so let's say you
have a project that logs workouts and
you want to add a feature that
calculates the total calories burned so
you can create a new branch called
feature SLC calories and work on that
feature and then when you're done you
can then merge that Branch back into the
main branch and this is called a poll
request okay you're requesting that your
changes be merged into the main code
base so this is uh again a common
workflow in
git so I think that that's all I want to
talk about in the slides so kind of a
general overview now we're going to jump
in and I'm going to show you how to
actually run these commands how to
create a local repository how to create
a remote GitHub repository how to push
it how to pull make changes Etc so let's
get into it all right so first thing you
want to do is get get installed if you
don't have it already and you can check
by opening your terminal and just saying
get-- version that'll show you the
current version if you don't have it
then like I said there's a few ways you
can install it you can use home brew on
Mac or your Linux package manager or
just go to get- sc.com
downloads and download it for Windows
Mac or Linux all right so once you get
it installed we're going to have to
configure your your name and email and
this is something you do just once the
first time that you you're using git so
you just want to open up a terminal it
doesn't matter what folder you're in at
the moment I'll get into what this task
track tracker is in a minute but we want
to run two commands so you're going to
do get
config and then d-g
Global and then you want user.name and
then whatever you want to specify as
your name so I would say you know Brad
traversy okay I'm not going to run that
because I already have it set and you
can check what's that by just taking the
value away and just running this so
you'll see that's what I have as my name
all right then you're going to want to
do the same for email so that would be
user. email and then you would put in
you know whatever email that you're
using okay so that's how you can
configure that now there's one other
thing that I would suggest configuring
and that's your main the name of your
main branch because by default with Git
it's called Master but with GitHub they
changed it from Master to main so you
can check What It Is by doing dash dash
Global and then it's init do default
Branch okay and you'll see mine is main
because I changed it but yours might say
master so what you can do to change it
to match
githubsign to talk about the project
which doesn't really matter because
that's not the focus but I have a
download downlo uh a link to a download
in the description to this task tracker
zip file which has an index HTML a
script JS and a style CSS and it's just
an example of a project that we're going
to use to make changes commit to our
repository push to GitHub Etc if you
want to use some other files that you
create on your own that's absolutely
fine but I figured I'd just give you
something to work with and the reason
that I put it as a download and didn't
add it to you know its own repository
for you to clone is I don't want start
with cloning I want to start as if this
were your own project all right so just
download that and you can see I'm
already in the the task tracker folder
and I could do everything from here in
my terminal but I'm going to open this
folder up in vs code so that I can use
the terminal here and we can actually
see the files okay because there are
some some git Integrations with VSS code
and even though that's not the focus of
this tutorial the focus is the you know
the commands and the term
we still have that as like a you know
visual confirmation of what's happening
so just to kind of go over these real
quick very very simple I just have an H1
and a UL here so we have a script.js
with just a console log and then a
stylesheet with a little bit of CSS so
again this what's in here doesn't really
matter so the very first thing you're
going to do when you create a project
and you want to use git is you want to
initialize a local repository and you do
that with the command get ini it okay if
you remember if we look at this slide
here we run get in it that will
initialize a new repository and it
creates this hidden dogit folder right
so if I were to do an LS so list my
files and show hidden hidden files and
folders it shows this dogit that's my
git repository if you wanted to
completely get rid of it you could do
rm-rf and then doget and that would
completely delete it all right so and
you can see that a couple things
happened within VSS code one it shows my
Branch name down in the corner Main and
it also changed the colors of the file
names and put this U next to it so this
just represents files that are untracked
okay the U and the green coloring which
means that I haven't added them to my
staging area because remember there's a
a staging area right and then there's
our local repo where we commit to so we
haven't done anything with these files
yet so they're untracked
now there's also a source control tab
here and you can do everything that you
can do within the terminal with Git
commands you can do here as well but
this isn't a tutorial on vs code so I'm
not going to get too much into that but
it does show you which files you know
are untrack and it shows you the status
now to check the status within the
terminal you can do get status and that
shows us that we have three untracked
files okay so what we would do next if
we look at the workflow here
is we would run get add and add files to
the staging area so typically what
you'll do is you'll work on your project
get it to a place where you know you
want to save it essentially and then you
want to run get ad and typically you'll
add all so all your files but I just
want to show you you can add them
individually so if I do get ad index
HTML now in vs code just to show you as
a visual representation it has an a next
to it it says index added so this file
has been added to the staging area and
if I were to run G status it shows me
that okay so this here and then these
two are still untracked so if I run get
add dot or add all now they all have an
A next to them and if I run get
status status then you can see that
they're all now in the staging area to
be committed now to
commit let see so to commit we run get
commit and that will commit files to
your local repository not your remote
not GitHub or anything we haven't set
any of that up yet this is all local so
let's go ahead and run get commit and
what you're going to do is add the dhm
flag and add a message in quotes So
typically when it's your first one
you'll do something like initial commit
so if we run that now you can see the
files are no longer green over here
they're white with no letter because now
they're it everything's up to date the
everything's added to the local
repository if I run get status it says
nothing to commit working tree clean
because I've committed everything now
from here you have the option of either
adding your remote repository with
GitHub so you would need to create one
on GitHub or you could just keep working
locally for now so for instance if I
want to you know make a change and I'll
just do something silly here I'll just
add another task right so now if I save
that you can see that this has changed
color now to Orange which means that
this this file has been changed from the
what's in the local repository so you go
through you make some changes you add a
feature you fix something whatever it is
and then you're going to add again so
just say get add all which is only going
to add the index file because that's all
it's been changed right so now that gets
added now you want to commit it so let's
say get commit dasm and and I'll just
say added new
task okay so now that gets added and now
I have uh my repository up to date and
you can also run get log which will show
you your commits starting with the most
recent first which is added new task
shows me the author the date and the
commit hash and if I click the down
arrow you can see that it goes to the
next one which is initial commit and
then to to get out of this you just hit
Q to quit so that's going to be your
workflow as you make some changes you
add a new feature whatever the the
change might be you add the files to
your staging area and then you commit
them okay and we're not dealing with a
remote repository just yet but as far as
frequency goes it's really up to you
some people will will commit really
often some will only do it after major
features it's really just based on your
your
preference all right so now what we're
going to want to do is the next step
which is going to be git push where we
push to a remote repository and that
could be GitHub but it could also be
gitlab bit bucket or or something else
um so what we're going to do is set up a
GitHub repository because right now we
don't have one to actually push to so
you're going to want to go to GitHub if
you don't have an account create one and
um you can list all your repositories
that's what you see here um you also
have a profile that will show your most
popular repositories and also your
contribution grid here so basically the
lighter the green the more contributions
like this day November 30th I had seven
this day I had three and then the blank
ones I didn't have any contributions
meaning I didn't push to GitHub all
right so what you're going to want to do
is create a new repository with this
right here it's a plus sign and the new
repository you're going to name it
typically you're going to call it what
your project or your folder is called
which in my case would be task tracker
and I'm just going to say demo project
for tutorial I'm not going to keep this
now here is where you choose if it's
public or private if it's public anyone
can go to this repository and anyone can
see the code all right so keep that in
mind I'm going to make it private
because I don't want people seeing this
because it's just for this video um and
it's nothing that I want anybody to have
because it's just nothing really and
then you can also initialize a a read me
file I typically don't do this I create
it myself and then and then push it but
you can do that here you can also add a
do get ignore file which I'll talk about
in a little bit but again I add that
myself so let's say create
repository now it shows you basically
the steps if you're creating a new
repository or if you're pushing an
existing repository which is what we're
doing we've already done this the init
the commit the add so basically what we
need to do is first run this command so
this will add the um this this
repository as our remote so I'm just
going to paste that in here so it's get
remote add and then origin is just the
name of the or the Alias of the of the
repository so you can name it whatever
you want but typically I'll just keep it
as origin and then we're just adding the
the address to the repo which is my
username okay yours will obviously be
your username slash and then whatever
you called the Repository so I'm going
to run that it's not going to do
anything but it it did add the uh the
remote
repository so next uh let's go back here
so we want to make sure that we're using
the main branch I mean we don't really
have to run this but I usually do anyway
so we're just saying we want to use the
main branch um and then we want to
finally push so we're going to run this
get push dasu origin main now we only
have to add the dasu which stands for
Upstream and then origin main we only
have to add this this time any other
time that we push in the future we can
just simply run get push after we commit
to our local repository so keep that in
mind um so we run that and then you can
see that it gets pushed to GitHub now if
I go back to this page and I reload we
see our code so we have the three files
in the repository okay this is private
so nobody can see it unless I give them
permission if it was public anyone could
go to this link and they would see your
codee now what shows here is whatever is
in your readme file your readme.md which
is a markdown file and we don't have one
so that's why it says add a read me and
we can do it from here or we can what
I'll usually do is create it on my you
know create it on my machine and then
push it but I want to show you how we
can pull stuff from the repository so
I'm actually going to add the read me
from here so I'm going to click that
button and then I'm just going to add a
number sign and we'll say task tracker
now this uses markdown syntax and if you
use a a number sign that's going to be
an H1 right if I use two that would be
uh you know this heading would be an H2
if I use three that'll be an H3 and so
on and I have a full crash course on
markdown if you want to check that out
I'll I'll put try to remember to put
that link in the description so I'm just
going to say this is a demo project for
my git tutorial okay and this is where
you'll usually put things like the usage
so what do you have to do to run this if
you're building something with node.js
you would you would say you know run npm
install to install any
dependencies uh npm run Dev to run the
server you just want to give full
instructions on how to use this project
okay but this is something very simple
so I'm just going to add this and you
can see the preview as well as to what
it will look like which it will look
like like this so I'm going to commit
the changes and this does a commit just
like we did from the terminal and you
can add a description I'm just going to
do create readme and then we'll say
commit changes now we have a readme file
here however we don't have it here so
what we would do is we would pull the
changes from the remote repository all
right and we would do this if someone
else had um you know cloned the
repository made some changes and then
put push to it we would need those
changes so that would be this step here
which would be a get poll okay so let's
go ahead and run get
poll and now we have the read me here
okay because it pulled any changes from
the server now the next thing I want to
talk about is theg ignore file which is
really important because you're going to
have some things in your your project
that you're not going to want to push to
GitHub so for instance you might have a
EnV file that has environment variables
which can hold things like API keys and
stuff that you definitely don't want the
public to see so let's actually create a
EnV file and let's say we have something
like
API key and we have it set to whatever
one two three doesn't really matter so
you're not going to want this to be
available in your repository especially
if it's a public repo right so what you
would do is create a file called dotg
ignore make sure you have that dot and
then anything you put in here is going
to be safe and not push to the
repository so I'm going to add EnV all
right so I'm just specifying that I
don't want this file to be in the
repository right so now let's make um
another change we'll just go ahead and
add another task I guess and then I'm
going to say
get add all and get commit
and let's say added Task
5 and then if I want to push I can just
say get push I don't have to do the you
know the dasu origin or anything like
that so I'll go ahead and push and then
if we check out the geub repo I'm just
going to reload this you'll see that we
have our doget ignore we have the latest
commit which is added Task 5 but the
file is not here okay I have it in my in
my directory here but it's not included
in the actual repo now there's a couple
shortcuts that I want to show you as
well so if you if you want to add and
commit at the same time in one command
you can do that with the with the a flag
- A so let's say I add another task here
and when I'm adding these tasks this is
just an example U normally you would be
adding a whole new feature there'd be
multiple files changed but I just want
to make some kind of change so let's say
that I want to I want to add and commit
in one command so I can do get commit
remember I haven't added this the index
HTML to my local repository yet or I
sorry I haven't added it to the staging
area but I can do Dash a and then also M
for the the message here and then I'm
going to say
added added task six okay so if I run
that now say get status and it doesn't
show anything in the the the staging
area if your branch is ahead by one
commit so I can now just run get
push okay and now if we go back to our
repository we should see the new commit
you can see added task six all right so
that's how you can do it in one command
another thing you could do and I'll just
again add another task just to make a
change another thing you could do is say
get add and let's say index.html
and then we can do double Amper samp so
and get
commit dasm and let's say
added task 7 so here I'm doing the get
add and the get commit in one command as
well and then we'll do get
push check it out and we should see
added task
7 okay and it's only going to be on the
files where that were changed and this
case only the index HTML was changed now
while we're on the the the GitHub repo
here the interface just want to go over
a couple things and just to get you a
little bit more familiar so obviously it
shows our files it shows the commits and
it shows when they were made um here is
the branch Main Branch if I had other
branches then they would show here as
well um over here it says six commits so
that's what I've made so far and if I
click on that it'll show me all the
commits that that are made and it breaks
it up by day and if I want to see the
state of the code in one of these
commits I can do that so if I click on
add new task it shows me um what was
actually changed at that point and what
was changed was I added uh a new task I
added task four all right so you can
always go back and and check what was
actually added or or removed or whatever
was
changed okay and let's see we have up
here A bunch of tabs of course the code
tab that's what we're on the issues tab
so people can submit issues so if they
run into a bug or something they can do
that and they can add labels to them um
poll requests so if someone wants to
collaborate and they fix a bug or they
add a feature they can then make a poll
request for you to look at and approve
so all your poll requests will show up
here actions so here you can set up
continuous deployment and continuous
integration pipelines um that's beyond
the scope of this tutorial and then
projects so here you can manage your
your project using github's built-in
project management tools uh Wiki so if
you want to create a Wiki security has
to do with your security policies um
insights so you can see you know the
traffic and
analytics um settings so from here you
can do things like change the visibility
so if you want to change it from public
to private if you want to disable issues
if you want to delete the repository
arive it transfer it so all that stuff
is done in the settings
tab or and also add collaborators that's
another important one so if you want
someone else to be able to to work on
this repository you would just add their
their GitHub email here and that would
send an invite to them um you can do
more advanced stuff like web hooks there
there's a lot you can do here I'm just
scratching the surface just to you know
just to give you an introduction but
yeah there's a lot you can do it shows
here the languages so whatever
Technologies are actually used in the
repo um but yeah so that's kind of the
basics now let's talk about getting code
from GitHub okay and we've already
looked at PLL which is is one of the
ways now you can download an entire zip
of the the repository if you go to this
code button here and you just say
download zip but you're only going to do
that if you just want the codee and you
don't want anything else to do with the
repository you don't want to add to it
you don't want to you know do anything
with it it still I would say clone it
anyways uh because it's literally just a
command and you have the whole thing on
your machine rather than extracting a
zip file and so on and that's the next
one which is get clone you copy uh Co
you get a copy of the full repo onto
your machine right so to do that you
would run get clone and you can clone
with the SSH H link here or using htps
now to use SSH you're going to have to
generate some SSH keys and add them to
GitHub I'm going to show you how to do
that in a minute um another thing you
could do is get fetch which is going to
it's it's when you want to get the
latest changes from the remote
repository but you don't want to merge
them so you can use get fetch and then
forking is copying a repository from
GitHub onto GitHub within your own
account right so if someone else you'll
see I can't Fork my own repository but
if I was on uh if someone else was on
this and they wanted their own copy of
this on their GitHub account like let's
say my username was hello it would be
hello slask tracker okay and I could
Fork it by just clicking this button and
I'd have that automatically in my
account then I could clone that onto my
machine and I could work on that which
would be my own
repository all right so those are the
the main ways that you would get files
from GitHub now I want to go over
cloning so like I said before you can
clone using this SSH link right here you
need to generate some keys and put them
on GitHub so the way you would do that
let's just jump back into vs code here
just going to close that up so the way
you would do that
ssh-key gen that's what we use to
generate a new SSH ke pair and then
we'll do dasht so the type would be RSA
and then the bits so Das B would be
4096 so if I run that it's going to ask
me the location and the name of the key
and the default would be in my home
directory and then in a SSH folder which
is a hidden folder and it would call it
ID RSA and if you're fine with that you
can just hit enter but if you want to
change it then you would put the
location so for me let say users Brad
traversy obviously yours would be a
different location at least I hope so
and then SSH slash and I'll usually call
it like
idore GitHub we'll say GitHub
2 okay and you can add a passphrase if
you want I'm just going to hit enter for
no passphrase and now you can see that
it's created this so two things ID
GitHub 2 which is your private key and
ID GitHub 2. Pub which is your public
key all right now what you would do is
is put the public key on GitHub
so the way t",,
",,
hat we can read that public,,,
key to copy it to put it on GitHub is,,,
with the cat command so we'll say cat,,,
and then the tild day which is just an,,,
alias for your home directory slash. SSH,,,
and then SL,,,
idore GitHub 2 and then we want the pub,,,
public key so Pub and there it is so,,,
what you would do is copy,,,
this so from here the SSH RSA to the end,,,
so you copy that and then you'd go to,,,
GitHub go to your not your repository,,,
settings but your actual settings which,,,
are uh right here and then go to SSH and,,,
gpg keys and then new SSH key and then,,,
you just give this some kind of,,,
description like you could say I don't,,,
know,,,
basement um this isn't Windows basement,,,
Mac something like that that just,,,
describes your computer your machine ADD,,,
SSH key and then that would get added to,,,
your account all right and you can test,,,
to see if that works by doing SSH duper,,,
case T and then,,,
get github.com,,,
and I get this success message okay now,,,
if you get something that says like,,,
public key denied or something like that,,,
you usually what will fix that is to get,,,
your agent running so eval and then in,,,
back ticks SSH Das agent and then um,,,
whoops still within back ticks,,,
DS okay and you'll just see like this,,,
Agent P and some number then after that,,,
you would add the key so,,,
SSH Das add and then locate the key so,,,
home directory sl. SSH slash and then,,,
whatever you called it so ID,,,
GitHub GitHub 2 and you wouldn't put the,,,
pub here you're adding the private key,,,
and it says identity added so once you,,,
do that then you can try try that again,,,
and hopefully that works all right so,,,
now you're ready to clone if you want to,,,
get this like let's say we're on a,,,
different machine and we want this task,,,
tracker application we want to clone,,,
that Repository onto the machine so what,,,
I'm going to do is open up um let's see,,,
I'll just create a new folder I,,,
guess and I'll just call this let's say,,,
task I guess I'll say Tas tracker,,,
-2 and then I'm going to open that in my,,,
terminal okay so now I want to clone the,,,
repository into this folder,,,
so we'll say get clone and then you're,,,
going to grab's see we're going to go to,,,
repositories go to the task,,,
tracker and then I'm going to go to code,,,
and then get this right here copy,,,
that paste that now if I just run this,,,
as is it's going to create a new folder,,,
called task tracker if I want to take,,,
the files and put them into this folder,,,
of task Tracker 2 then I'll just put a,,,
dot at the end so now it says close,,,
cloning into now if I do an LS you can,,,
see I have those files and then you can,,,
continue to work in that folder on a,,,
different machine now I'm going to go,,,
back to where I was here in the first,,,
task tracker and I want to now talk,,,
about branching and merging so branching,,,
is a key feature of Git it allows you to,,,
work on new features or or bug fixes,,,
without affecting the main codebase and,,,
you can create a new Branch you can make,,,
changes and then you can merge those,,,
changes back into the main branch and,,,
this is a common workflow in git you can,,,
also create branches for different,,,
environments like say production staging,,,
development so let's let's go ahead and,,,
create a new Branch let's pretend that,,,
we're creating a login for this this,,,
project so what I might do is create a,,,
new Branch so I'm going to say get,,,
checkout so checkout dasb so I'm,,,
checking out creating and checking out a,,,
branch and I'm going to call it feature,,,
say feature and let's say slash login,,,
that's a common naming convention it's,,,
feature slash and whatever it is um you,,,
might also have like bug slash whatever,,,
bug you're fixing so let's do that and,,,
not only did it create the branch but it,,,
also switched us to the branch and you,,,
can see which branch you're on with get,,,
Branch so you can see that there's two,,,
there's Main and there's feature login,,,
and that's the one that I'm on all right,,,
so anything that I do from this point on,,,
on while I'm in this branch is only,,,
going to be on that Branch so I'm going,,,
to create a new file here called login.,,,
HTML and normally you'd create you know,,,
the whole login functionality not just,,,
the page but again we're not doing that,,,
that's not the focus of the tutorial but,,,
what I'm going to do here is just,,,
copy the index,,,
HTML and paste that in here and then,,,
we'll just change up some stuff like,,,
we'll just add login to thep title and,,,
let's change the H1 here to,,,
login and let's see we're going to get,,,
rid of this ul and we'll add a,,,
form and in that form let's do form,,,
Dash control and I do have some classes,,,
in the CSS to make this look somewhat,,,
decent we'll just have label uh label,,,
then an,,,
input and then let's go under well,,,
actually we'll just copy this down,,,
and then let's change this actually,,,
we'll change all these to,,,
password okay change the type to,,,
password as well and then we'll go under,,,
that div and we'll add a button give it,,,
a class of BTN and we'll say login all,,,
right and then just to check out what,,,
this looks like if we go to I'll show,,,
you the index page doesn't really matter,,,
again it's not about this project but it,,,
just looks like this right and if I go,,,
to the,,,
login so,,,
slash login. HTML then it looks like,,,
this all right so let's just say we just,,,
added the whole login,,,
functionality so I want to obviously add,,,
that to my staging area first so get add,,,
I'll just do get add all and then we,,,
want to get commit and let's do Dash M,,,
and,,,
say added,,,
added login,,,
page so now that's committed to my local,,,
repository now I'm going to push it to,,,
GitHub but it's still I'm going to push,,,
it in the feature Branch so let's say,,,
get push and then I'm going to do dashu,,,
origin and then the name of the branch,,,
which is feature SL login now when I go,,,
back to my my code here my sorry my repo,,,
we're going to see this window it says,,,
compare and poll request because we can,,,
make a poll request to merge this into,,,
the main branch and you can do that as a,,,
separate developer you know if you just,,,
if you're working on an open- source,,,
project and you create a feature or you,,,
fix a bug or whatever this is how you,,,
would create a poll request all right,,,
but if I don't want to merge that into,,,
the main then you're going to still see,,,
right here feature login so when I'm on,,,
the main branch we don't see the login.,,,
HTML right but if I switch to the,,,
feature login then we do see the login,,,
HTML so you can switch between branches,,,
here now let's actually make this a poll,,,
request so I'm going to click this,,,
button here and you just add a title to,,,
the poll request add a description and,,,
then,,,
create all right and then the owner of,,,
the repository will then go into they'll,,,
see that there's a poll request you can,,,
see there's one here and they can check,,,
it they can click on this and check the,,,
code and then they can choose if they,,,
want to merge that poll request so I'm,,,
going to say that I want to merge that,,,
poll request confirm,,,
merge and now pole requests success,,,
successfully merged and closed and then,,,
you can choose to delete the branch as,,,
well so I'll say delete Branch now if I,,,
go back to my,,,
code you can see that there's no there's,,,
no more branch on the remote repository,,,
and the login is now merged into the,,,
main branch,,,
all right now back on this machine what,,,
I can do is switch back to the main,,,
branch so we'll just get rid of that,,,
let's say get and then we want to check,,,
out that's how we can switch branches we,,,
want to check out uh,,,
main so now I'm on the main branch and,,,
then you can see that the login isn't,,,
here because I'm not up to date with the,,,
the latest changes on the remote repo so,,,
what I'll do is I'll say get poll,,,
origin and I want the main branch so,,,
I'll do that and now the login is now,,,
there okay so I'm up to date with the,,,
the latest uh the latest,,,
changes now if I say get Branch locally,,,
I still have that feature Branch right,,,
because I didn't delete it here and and,,,
you can actually you can merge it into,,,
the main branch on your local machine as,,,
well before you actually uh push it to,,,
the the repo so I could say get merge,,,
and then feature slash login I'm not,,,
going to run it because I've already,,,
pulled down the latest changes but that,,,
would merge it into the main and then I,,,
could push to the the remote repo so,,,
there's a lot of different ways to do,,,
things now I want to delete the feature,,,
login Branch locally so it's already,,,
deleted on the remote so let's say get,,,
branch and then we would do dasd and,,,
then the name of the branch which is,,,
feature SL login and now that Branch,,,
should be deleted if I say get,,,
Branch then we just have the main and,,,
we're all up to date so that's how you,,,
can not only create branches and and,,,
merge but also how you can create poll,,,
requests now the last thing I'd like to,,,
show you is how to set up a cicd,,,
pipeline with continuous integration,,,
continuous deployment with versel which,,,
is a great hosting company with a very,,,
generous free teer so there's nothing,,,
you have to pay or anything like that,,,
and this is great for hosting small,,,
projects so let's go to ver.com now I'm,,,
already logged in you're going to have,,,
to just log in with GitHub or whatever,,,
they offer I forget it's been so long um,,,
but you'll get this hobby package so I,,,
do have a pro package as well but I'm,,,
using my hobby which is the free one and,,,
all we have to do to get this task,,,
tracker deployed is simply click add new,,,
project and then since I'm I logged in,,,
with GitHub it there's they have access,,,
to it and I can choose the task tracker,,,
right and then down here since it's just,,,
a basic just it's basically just an HTML,,,
file with a little bit of styling,,,
there's nothing I have to add as far as,,,
you know build and output settings or,,,
environment variables um if I were using,,,
environment variables I would take the,,,
ones that are in the EnV and I would add,,,
them here on my server but I don't have,,,
any so I'm just going to click deploy,,,
all right so that was very quick because,,,
it's basically nothing and then I can,,,
say continue to dashboard this is the,,,
dashboard for my project if I click on,,,
the if I click on visit it takes me to,,,
the project which is now deployed,,,
publicly at this domain and if I go to,,,
SL login. HTML takes me to my login page,,,
okay so it's as easy as that now if I,,,
make a change right so let's look at the,,,
deployed version we have what five tasks,,,
so I'm going to come back here and I'm,,,
going to add another say six and then,,,
I'm going to go ahead and say get and,,,
I'll just do commit am and say added new,,,
task and then get,,,
push and of course you can use the The,,,
Source control tools as well maybe I'll,,,
do another tutorial on that but like I,,,
said for this I just wanted you to get,,,
comfortable with the terminal so if I go,,,
to versel and I go to deployments you,,,
can see that um add a new task is the,,,
latest deployment and it happened really,,,
quick because it's such a small project,,,
and then if I go back to the deployed,,,
version and reload there it is Task six,,,
so it's as easy as that now if if you,,,
guys have been around for a while and,,,
you know you remember using like,,,
filezilla and stuff like that it's it's,,,
a lot different now and it's a lot,,,
easier um you know once you know how to,,,
do it so uh yeah I mean versel is a,,,
great platform they're not sponsoring,,,
this in any way and there's a lot of,,,
different options and things you can do,,,
which I'm not going to get into but I,,,
just wanted to give you an example of,,,
how simple it is to um to deploy a,,,
project using GitHub and and um cicd,,,
with versel so that's it guys please,,,
give this a like if you enjoyed this if,,,
you learned something from it and I will,,,
see you next time",,,
XMu46BRPLqA,"hey what's going on guys so I recently
had to scrape a website and get some
data and it gave me the idea to do kind
of an ultimate web scraping guide so
what we're going to do is take a look at
some slides and just talk about what web
scraping is uh why you would do it we're
going to look at the steps to take and
then we're going to jump in and we're
going to scrape a e-commerce website for
some books so we're going to get a bunch
of data uh on these books and we're also
going to be scraping data from a site
that has pagination so we'll have to
basically use our tool to to go through
and go through each page scrape all the
data go to the next page and so on and
I'm going to do this both with nodejs
and python so with nodejs we're going to
use a tool called Puppeteer which is a
web scraping Library it allows us to use
a basically have a headless browser
within our code and then for python
we're going to use a library called
Beautiful soup and we're basically going
to do the same thing so if you want you
can watch both and you can kind of
compare and contrast or if you're just
interested in the the JavaScript you can
watch that part if you're just
interested in the python you can watch
that part all right but ultimately this
is going to give you a really good
understanding as to what web scraping is
why you would use it and also how to do
[Music]
it this web scraping guide is sponsored
by bright data their scrape off solution
allows companies to SC scale up their
web scraping and data collection with
their Global proxy Network browser
automation tools and web scraping apis
you can scrape data from any public
website bright data's tools offer
Universal compatibility with just about
every programming language and web
scraping tool you can run your pupper
selenium and playright scripts on full
hosted browsers with unlimited
scalability you also get 24/7 support
anytime anywhere so if you like this
guide and you want to take your web
scraping projects to the next level
click the link in the description visit
bright dat.com okay so we're going to
look at some slides talk a little bit
about web scraping why we do it how we
do it and then we're going to jump in
and I'm going to show you how we can
scrape a website using both node.js with
Puppeteer and Python and beautiful soup
all right so what is web scraping as I
mentioned web scraping is the process of
extracting data from websites this can
be done manually but it's often more
efficient to use a program to to
automate this process and web scraping
is is commonly used to collect data for
research for analysis and for other
purposes so for example you may want to
collect data on a job board or collect
product information from an e-commerce
website and web scraping allows you to
automate that process of collecting this
data so you can save time and effort now
obviously apis are one of the best ways
to get data from a website but not all
websites have apis so web scraping can
be a good alternative however that
brings me to my next point which is the
the legal and ethical considerations and
this is something that's really
important to understand when you're
getting into web scraping it can kind of
be a controversial topic because some
websites don't allow scraping at all of
their content they usually list this in
their policies some do allow it it just
you know fullon whatever scrape as much
as you want and some have certain
stipulations so it's important to be
aware of the the legal and ethical
considerations when you're scraping
websites and to make sure you have
permission to scrape those sites that
you're targeting and in this guide we're
going to be scraping a site called
books.to
scrap.tf it's been around for a long
time the the very first tool that was
used I guess you could put web scraping
in quotes here it was created in 1993
and that was the worldwide web Wanderer
which was a bot that would go from link
to link and index the content of pages
that it visited and although it wasn't a
scraper in the traditional sense it laid
the groundwork for automated web data
collection and search engine crawling so
it was kind of the origins of of search
engines and then in 2004 the first
traditional web scraper as far as I know
is was beautiful soup and that's a
python Library that's still used to this
day and we're going to use in this video
and allows developers to extract data
from HTML and XML files and since then
web scraping has become a common
practice for collecting data from the
web and they've gained even more
popularity recently due to the
increasing amount of data that's
available on the web now web scraping
has a lot of different uses so these are
just some of the more common ones so
first we have data collection so
obviously you know collecting data from
websites for research or analysis this
could be data on products jobs real
estate properties news articles and the
list just goes on and on price
monitoring so monitoring prices on
e-commerce websites to track changes in
prices over time you could do this just
for yourself to find the best deals or
for a business to track competitor
pricing uh content aggregation so you
can aggregate content from multiple
websites to create a new website service
you can build a news aggregator that
collects news articles from multiple
sources and display them on a single
website lead generation so collecting
contact information from websites for
sales or marketing purposes and uh just
keep in mind you know ethical and legal
considerations when you're doing stuff
like that and then market research so
collecting data on competitors or or
industry Trends from websites and then
social media marketing or social media
monitoring sorry to collect data from
social media websites to track Trends or
sentiment now I'm just going to give you
a quick summary of how web scraping
works and then we'll go a bit deeper
into the steps and then ultimately I'll
show you how to do it with code so web
scraping Works usually by sending a
request to a website downloading the
HTML content of the page and then
extracting the data that you're
interested in and you would obviously do
this through code and there's a few ways
to extract data from a web page
depending on the structure of the page
and the type of data that you're looking
for some common methods include using
regular Expressions parsing the HTML
content with a a library like beautiful
soup or using a tool like Puppeteer to
interact with the page in what we call a
headless browser and these are powerful
because we can interact with the page as
if we were a user in a browser so we can
do things like click buttons fill out
forms and we can extract data from the
page and many tools that are used for
web scraping are also used for just
testing in general and they allow you to
automate tasks in a headless browser and
you can do what you want with that data
such as save it in a file or save it in
a database now as far as the tools and
and libraries that we can use for web
scraping this is just a few of them and
these are mostly just JavaScript and and
python but you can do web scraping in
other languages as well so first we have
Puppeteer which is a node.js library
that provides a high level API to
control a headless Chrome or chromium
over the dev tools protocol and it's a
powerful tool for automating tasks in a
headless browser like I said clicking
buttons filling out forms things like
that and of course extracting data we
also o have Cheerio for JavaScript which
is a fast and flexible lean
implementation of core jQuery but it's
designed specifically for the server for
node.js so it's it's a popular tool for
web scraping in node um beautiful soup
is one of the the most popular libraries
for web scraping in general this is a
python library for parsing HTML and XML
documents it provides a simple API for
navigating and searching the HTML
content of a page making it easy to
extract data from web pages we also have
Scrappy which is another python
framework for web scraping and that also
Prov provides an API for extracting data
handling pagination following links
things like that and then selenium is a
popular tool for automating web browsers
and it provides a web driver API that
allows you to interact with a web page
in a headless browser now selenium is
often used for testing web applications
but it can also be used for web scraping
okay so now let's go through the the
main Steps to Web scraping and these are
kind of the the the general have to
steps and then after this I'm going to
go over some some other steps that you
may have to apply depending on the site
that you're scraping so of course the
first thing you're going to do is
identify the website and you want to
make sure you have permission to scrape
that website and scraping without
permission can be illegal and as I
mentioned there's legal and ethical
consider considerations when it comes to
web scraping so just be sure that you're
aware of all the rules and regulations
that surround that in your country and
for that specific website so you want to
inspect the page once you've identified
the website you want to inspect and
determine the structure of the page and
the data that you want to extract you
can do this by right clicking on the
page and selecting inspect in your
browser or use a tool like the the
browser Dev tools and you want to
examine the HTML structure of the page
to identify the data you're interested
in and this includes looking at things
like class names IDs and other
attributes of the elements on the page
okay once you do that once you've
identified the data and you've checked
out the structure you then want to write
your code to extract that data you want
to uh it'll have to make a request to
the website download the HTML content
extract the data and this usually works
similar to how you would select elements
within JavaScript or jQuery in fact
Cheerio is is actually a subset of
jQuery so it's very very similar and you
may have to handle things like
pagination and I'll talk a little bit
about that in the next slide and we will
be doing that in our code as well and
then once you write your code you want
to obviously run it and scrape the
website extract the data that you're
interested in and then you can save that
data to a file to you know a Json file
CSV file or you could save it to a
database I mean there's different things
that you can do with that data now these
are some additional steps and
considerations that you may or may not
have to deal with so first you want to
handle an pagination if the data that
you want to scrape is spread across
multiple Pages then you'll need to
handle that you can do this by following
the links that are on the the next page
so you know you have pagination you can
click on next see the next whatever 10
or 20 listings get that data click the
link get the next 20 10 or 20 however
many is on that page and specify how
many pages you actually want to scrape
and we're going to be doing that within
our scripts you want to handle any
Dynamic content so if the if the website
uses JavaScript to load the content
dynamically you might need to use a tool
like papaer to interact with the page in
a headless browser um handle errors so
web scraping can be error prone so
you'll need to handle any errors that
you know that you have in your code to
ensure that your scraper run smoothly
respecting robots.txt
so many websites have this robots txt
file that specifies which Pages can be
crawled and scraped and which Pages can
and these are typically used to tell
search engines whether to crawl that
page or not so just make sure you
respect whatever links are in that our
pages are in that robots file and then
rate limiting So to avoid overloading
the website you're scraping you should
add a rate limiter to your scraper so
that you're not sending tons and tons of
of requests and you know overloading the
we website but that's pretty much it as
far as just describing the the general
aspects of web scraping so now let's
jump into some code we're going to start
off with node.js and Puppeteer and then
we'll look at Python and beautiful soup
okay so now that we've talked about web
scraping let's get into it we're going
to start off with node.js and Puppeteer
and then we'll move on to Python and
beautiful sup so this is the website
we're going to scrape it's books.to
scrape.on as you can see it's it's meant
to be scraped so no legal or ethical
issues here um and that's something you
always want to look into before you
scrape any website for any data so it's
B it's set up just like a regular
e-commerce website we have a bunch of
books here for the products it has an
image a rating title price in stock add
to basket button and I believe there's
20 on the first page and then there's 50
pages so pagination is something we're
have to deal with we're going to have to
go to the second page thir how however
many pages we want and get the data from
each page and as you can see in the URL
it goes to SL catalog page- whatever the
page number so that's something we have
to use and take into account in our
script now as far as the data that I
want I just want to get basically
everything here but the image I want the
title the rating which is in the form of
stars and then the price and if it's in
stock so so we know what we want to
scrape we want to get the books I'm
going to save it to a a Json file and we
know the fields that we want the data so
next step is to look at the structure
and we can do that of course by right
clicking and inspect and then I'm going
to click this icon here and just select
the first item and you can see that
every book every item here is wrapped in
a li tag and in that is an article tag
with a class of productor pod okay so
they all have that that article with
that class so that's something to take
note of cuz that's what that's the class
we're going to basically use to grab on
to each product and in that we have an
image container which I'm not interested
in I don't care about the image the
rating you can see it has a class of
star rating with a bunch of icons but it
also has a class of whatever that rating
is in this case three if I were to look
at this one here you can see that this
this div uh or paragraph rather has a
class of one because it's a one star
rating okay so we get the rating and
then in the H3 is a link that has a
title attribute so that's how we can get
the title and then for the price there's
a product price div and then in that is
a price color uh class on this paragraph
that's where the actual price is and
then there's also a a class for if it's
in stock or not so that's the the
structure that we need to pay attention
to and I'm just going to kind of keep
this open while we uh while we write our
script all right so like I said we're
going to start with node.js so if you
have no interest in node and puppet tier
you can skip you know move on to the
python part but I'm going to open up my
terminal and first thing I'm going to do
is just create a new directory for this
I'm going to call it
web- scraper Das node and then CD into
web scraper node and then I'm just going
to open up vs code or open up whatever
text editor IDE that you want to use so
from here I'll open up my integrated
terminal and since we're using node
we're going to npm and knit a
package.json I'm going to use the Dy
flag to skip any
questions and I'm I'm assuming that you
guys have basic JavaScript knowledge and
a little bit of nodejs knowledge and for
puppeteer we can install that with npm
so let's do
that obviously you need to have node
installed on your computer to use npm
okay so that will set that up
package.json you can see now we have
Puppeteer installed all right so one
other thing I want to do I want to use
the es module syntax the import syntax
so to do that in node we need to go to
our package.json and we need to add in
here type and I'm going to set that to
module if you want to use common JS and
the require syntax then you don't need
to do this but I prefer to use import so
now I'm going to going to create a new
file I'm going to call it scrapee.net
you can use an iffy if you don't want to
use a named
function okay and then underneath that I
want to make sure that I call it before
I forget and then I'm just going to kind
of go step by step now Puppeteer has
what's called a headless browser so you
can think of it as like Chrome or
Firefox or whatever without the chromium
without the the UI you basically do it
from within your code so we want to
launch that browser and I'm going to put
the object that we get into a variable
called browser so we're going to set
that to Puppeteer and then there's a
method called launch all right now I
want to basically create a new page to
work in so we're going to say page and
set that to I'm sorry this needs to be
await because these are all asynchronous
so then we want to await on that browser
object we have uh a method called new
page okay so now we have this page to
work with and we need to go to a
specific URL so let's put the URL in a
variable so cons URL and we're going to
set that to
https and it's going to be
books. two scrap.tf
and I'll just put back ticks here and
just say page title and we'll put in the
title and then the last thing we need to
do after everything is close the browser
so we want to say await on
browser.
close so now let's run this so I'm going
to come down here and run node scrape
because I called the file
scrape.on and and books to scrape
sandbox so we know that we're we're able
to make the requests we're able to get
the website we create this this page and
we get the title now I don't care about
the title I just wanted to use that as
an example so let's get rid of this and
Puppeteer gives us a method called
evaluate that allows us to run
JavaScript in the context of the page
and we can then select data using just
like query selector and query selector
all so what we're going to do is create
a variable called books and I want to
set that to
await page do
evaluate and that evaluate is going to
take in a function just going to pass in
an arrow function here and we want to we
want to get the the element that
surrounds the data that we want to
select and again if we go back to the
structure here we have an article that
has the class of product _ pod So within
that is all the things we want so we'll
use that as our as our selector all
right so let's go back into evaluate and
then from here we'll go ahead and create
a variable called book elements and
we're going to set that to document Dot
and then we're going to use Query
selector
all because obviously there's there's
more than one book Element and the
selector we're going to use is the class
of of that article so product underscore
what was it
pod okay so that will give us our
elements now I'd like to show you what
that gives us but we don't want we can't
console log within the page. evaluate
because you can think of this as like a
like a a virtual page um but what we can
do is return from this book elements and
then outside of the evaluate we can then
console log books okay because that's we
have books that's set to the evaluate
from the evaluate we're returning book
elements and then we're logging books so
let's save that and then let's run this
node scrape and what we get back is
what's called a node list which is a an
array likee structure and you'll see
that we have 0 through 19 that's because
there's 20 pages on the first sorry 20
books on the first page and we're only
dealing with the first page which is
this URL now they reason that it's
giving us an empty object is because we
haven't specified any data that we want
to extract yet so it's just giving us an
empty object so what I want to do is
instead of returning book elements
directly let's convert it to an array by
using uh array. from and in that we're
going to pass in our book elements and
then let's use map so we're going to
Loop through each book okay so we'll say
for each book then I just want to to
return
book and then we're going to run this
again node scrape and now we get an
actual array of empty objects because I
still haven't selected any I haven't
extracted any data yet so the first
piece of data that I want to get is
going to be the title so let's get rid
of this return here and then let's say
cons title and then this is where the
structure comes into play you have to
know what you're selecting so we're
already in the the article with this
class of product pod and we want the H3
and in that is a link and that link has
a title attribute so why don't we use
that and we're just using you know
regular JavaScript code here so I'm
going to say book Dot and then query
selector and I want to select the H3 and
then the link inside the H3 and then I
want to get the
attribute of title
okay and then what I'm going to do next
is just return title so now let's run
web scrape again and see what that gives
us and you can see it gives me an array
of titles so we we've actually extracted
all the titles on the page of course
it's only the first page so in addition
to the title I want the price so let's
get rid of that return let's say cons
price and for the price we'll say book
do query SEL collector and we have that
class I think it's price color so if we
look right here we do have a a product
price div but in that is two paragraphs
and then a paragraph with a class of
price color so let's go back into the
query selector and let's select the
class of price uncore color and then we
want the text content within that and
then let's just return price and what we
should get if we run this next now is an
array of prices and there we go so we're
able to get the title we're able to get
the price let's get the the stock and
remember there's a a class of in stock
and availability so we can just check
for those classes so let's say stock and
let's say
book. query selector and I want to
select the class of
in stock and availability
okay and then in I just want to return
some text that says in stock if it is
and out of stock if it's not so what
we'll do is just add on a Turner here
and say in stock else then we'll say out
of
stock all right and then let's just do a
return of
stock and then we should get an array
and and you can see that they're all in
stock and then the last thing I want to
get is the rating and remember the
rating actually has a class of um uh
let's take a look again
here so
rating has a star rating class but then
it also has whatever it is one through
five it'll have that as a class name so
what we can do is just simply take the
class split it into an array where this
is zero and this is one as far as the
index and we'll get the the one index so
let's
go and say const and we'll call this
rating set that to
book. query selector and we want to
select the class of star Dash rating
okay they all have that and then get the
class
name so class name and then I'm going to
use split and I want to split by this
just a space because there's a space in
between both classes and I want the
second class which will be the one Index
right so if I do a console log of
rating and then we run node
scrape uh I'm sorry we need to return it
not log
it uh return
rating there we go so now we have just
all the the
ratings so all we have to do now is is
return all of that stuff not just one
which is what I've been doing so let's
return an object and in that object
we'll have the title we'll have the
price the
stock the rating oh you know what let's
get the link as well so up
here let's say cons link and set that to
book do query
selector and we just want to get the so
it's the 8 H3 has a link in it so we
want the a tag and then I want to get
the href attribute so we'll say get
attribute and we want the
HF okay so that should give us the link
so now down here let's just add in
link and then we'll console log that
let's run node
scrape and there we go so we make this a
little bigger and you can see now we
have uh just a bunch of objects that has
all the data for the books so we've
successfully scraped that the homepage
so now what I want to do is is save that
data into a Jason file you could save it
into a database whatever you want to do
with it so let's import the
fs module from FS so this is just the
node.js file system module and we're
going to go down to the bottom where we
have the console log and if you want to
still console log it you can I'm not but
I am just going to console log and say
data saved to and we'll call it books.
Json and then right above that we're
going to use the fs module and to keep
this simple I'm just going to use the
synchronous version because we don't
really need the
asynchronous and this takes in a file
name so it's going to be books.
Json and then I do want to just run it
through the Json stringify method cuz
the second argument is what we want to
put in that file so let's say
json.stringify
and we're going to pass in books that's
the data then we're going to pass in
null for the replacer and two for the
the space parameter so if it formats
nicely and we'll save that let's come
down here and let's run the file so node
scrape we see data save to books. Json
if we look over here it created a books.
Json file and in that is an array
with all the data so we could use this
for whatever we want if we wanted to you
know use it for an an API for our own
service our own website we could do that
um so yeah I mean that's that's pretty
much it that's how you use Puppeteer now
at the moment we're only getting the
data from this URL which is page one now
what if we want more than that what if
we want all the data or we want the
first five 10 pages whatever so now I'm
going to show you how we can handle
pagination so first thing let's let's go
right under where we create the page
variable and we're going to add a couple
variables here so the first is going to
be called all books which is going to be
set to an empty array and at the end of
this this will be this will is will be
what we actually save to our Json file
and then we're going to use let here and
we want the current page which is going
to start at one and you could start at
five or or 10 it doesn't really matter
it depends on the data you're looking
for but we're going to start at one I'm
using let because this will be
reassigned it'll be incremented and then
let's also add Max Pages which is the
number of pages we want to scrape in
this case I'm going to say 10 I think
there's 50 total but the more pages the
more data the longer it takes now the
URL we have to change this because again
this is only the first 20 books so I'm
actually going to change these quotes to
back ticks so we can have a dynamic
value in here and we want to change it
to if we go to the website here yeah so
I'm on page two right now so let's just
copy that or type it out whatever and
I'm going to put that in here except I'm
going to change the two to the dynamic
value of the current
page all right now we need to Loop over
the pages and do this stuff down here so
let's go right above the URL and I'm
going to use a while loop and I'm going
to say uh while the current page is less
than or equal to the max pages okay so
if there's any pages left then we're
going to keep on iterating and what
we're going to want to put in here is
basically everything except for where we
save the file so let's grab so basically
where this evaluate ends which is right
here so I'm going to take that and all
this stuff cut it and then put that that
into the while
loop all right now let's uh let's go
still within the while loop so let's see
the while loop ends right here I'm going
to go still within that and we're going
to then take our all books array and
we're going to push onto that I want to
push the books but keep the ones that
are there as well so let's use the
spread operator and books okay so every
time we iterate through a page we're
going to add the books and I I'll even
do a console log where we say let's put
some back ticks and we'll say books on
page and then whatever the current
page and then we'll put a colon right
here and then just a comma and then
books so basically it'll say books on
current on books on page two and then
it'll show an array of the books on page
two you don't have to do this but it's
just to to know what's going on and then
we'll just take the current page and
increment it so we just add one to it
and the last thing is down here where we
save our data instead of just books
we're going to be saving all
books and that should do it so I'm going
to save and let's go ahead and run node
scrape just going to make this a little
bigger so we can see what was actually
logged all right so you can see it's
logging all the objects and we get books
this is the last one books on page 10
and then it gives us that
array and and let's see we should have
right here books on page nine so it's
logging it all now let's check and see
if it was actually written to the file
and if we take a look here we
have a lot more than just 20
so yeah so we have 10 pages worth of
data and if you wanted to you could you
could get all 50 pages but yeah so
that's how we can not only scrape data
from a page but also use pagination
we're using our headless browser to
basically you know link click on the
link and go to the next page get the
data next page Etc and that's it so
that's scraping with node and Puppeteer
so now we're going to get into using
python with beautiful soup so now we're
going to scrape this website using
Python and beautiful soup so if you
watch the node and Puppeteer version
then this is very similar it's just
using different syntax obviously it's a
different language it's a different
framework um but the idea is is pretty
much the same so let's create uh a new
directory to work in I'm going to call
this web webscraper Das Python and then
I'm going to CD into webscraper Das
Python and then from here I'm just going
to open up visual studio code and open
up my integrated terminal now the very
first thing I want to do is create a
virtual environment because we're
installing packages I don't want to
install them globally and I'm assuming
you have basic basic knowledge of python
if you don't you can check out my python
crash course so let's say Python 3-m
venv and I'm going to call my
environment
EnV okay so that will create the
environment now we have to activate it
so let's say source and then uh EnV SL
bin SL
activate Okay so that's activated you
can see we have EnV in parenthesis here
now I'm going to install packages with
Pip so the two packages I want to
install are going to be requests so I
can make HTTP requests in my code and
then also beautiful
soup uh beautiful soup 4 is the package
name I spell that right B
yeah okay so now we have those installed
so let's now create a file and I'll call
this scrape
dopy and then I'll open up scrape dopy
and the first thing I'm going to do is
import what we need so we need
requests and then we also want to import
from bs4 we want to import beautiful
soup and then also um we need the Json
package so let's import that all right
now I'm going to Define my main function
which is going to be my just you know
the entry point to our application and
then before I do anything there I'm
going to run it so we'll say if Dore
name Dore
equals Dore
main then we're going to run main okay
and all I'm going to do in main right
now is call another function that I'm
going to create called Fetch books and
we're going to pass in the page number
which we'll pass in a one and then right
above that let's Define fetch uncore
books and that's going to take in uh
page number
and for now I'm just going to print the
page number and make sure oops make sure
everything's working so
far so then down here let's run Python 3
scrape and we get one good so let's get
rid of that print I I want to define a
couple variables first is going to be
the URL now in the node Puppeteer
version I just scraped the first page
first and then we added the pagination
I'm just going to include the pagination
right from the start here which means
that for our URL we need to use this
which has the slash catalog and then the
page number so I'm going to just grab
that and then I'm going to use an F
string here so F and then some quotes
and pass that in and instead of a two
that's going to be dynamic and that's
going to be our page number okay so
that's our URL variable now we need to
make the request I'm going to put the
response in a variable and we can make
the requests with
requests.get we're making a get request
to the
URL okay so that will get the the
response and then we want to have a a
beautiful soup object let's call this
soup set that to beautiful soup and we
pass in tha",,
",,
t response. text and then as,,,
a second argument we're going to pass in,,,
html. parser and then just to see what,,,
that gives us let's go ahead and print,,,
soup actually we'll add on to,,,
that,,,
printify so let's run that so you can,,,
see what it gives me is the entire thing,,,
all the HTML so now we need to specify,,,
the data that we want to extract just,,,
like we did in if you watch the the node,,,
in putia version so let's get rid of,,,
that print and I'm going to create an,,,
empty array or an empty list to start,,,
with and then ALS o a variable called,,,
book elements and from here on that,,,
beautiful soup object there's a find all,,,
or find underscore all method and that's,,,
going to take in basically the wrapper,,,
of the content we want which in this,,,
case is going to be this article tag,,,
with the class of product prod because,,,
that wraps around each one of these so,,,
let's add in here we want the article,,,
tag and then as far as the attributes we,,,
want class it's actually going to be,,,
class uncore equals and then,,,
productor,,,
pod now we can use this book elements to,,,
basically select what we want from it so,,,
I'm just going to close that up and,,,
let's do a for Loop here so I'm going to,,,
say for book in book,,,
elements and then we can select what we,,,
want and it's going to be the same stuff,,,
that we did with the node version the,,,
title the price stock rating and Link so,,,
let's do the title first so we can have,,,
on that book there's a find method and,,,
we can find the H3 and just to kind of,,,
look at the structure again so the title,,,
is going to be in the article this is,,,
right product prod and then the H3 and,,,
inside that is an a tag with a title,,,
attribute that's where we want to that's,,,
how we want to get this title so we'll,,,
find the H3 and then from that we can,,,
find again and find the a tag and we,,,
want the title attribute so this is the,,,
syntax we use all right and then let's,,,
just do a,,,
print of,,,
title and we'll run that and you can see,,,
now we have all the,,,
titles okay next thing I want is the,,,
price so let's say price let's do,,,
book. findind and it's in a paragraph,,,
graph with the class of price color so,,,
as a second argument we're going to pass,,,
in here class uncore equals and we want,,,
price uncore color and we want the text,,,
inside so do text which is just like,,,
text content in JavaScript and to check,,,
that out we can do print,,,
price run the file and there we go we,,,
have all the,,,
prices next is the stock so for the,,,
stock I want it to just say in stock if,,,
it is or out of stock if it's not there,,,
so let's uh let's do this let's say in,,,
stock if so in stock,,,
if,,,
in,,,
stock um yeah in stock if in stock in,,,
book.,,,
find and we want to find the paragraph,,,
with the class make sure you put an,,,
underscore so class and that has,,,
um what is it,,,
again so in stock and Avail availability,,,
are the classes,,,
so in stock,,,
and,,,
availability right is that formatted,,,
right no I have an extra quote here okay,,,
so in stock availability and then we,,,
want the text within it else then we,,,
want to have out of yeah out of,,,
stock I think that should do it and,,,
let's check that out so I'm going to,,,
just print stock and I believe that,,,
they're all in,,,
stock yep so we just see a bunch of in,,,
stocks and then we want the rating so,,,
let's say rating and and we want to find,,,
so book find and it's in uh paragraph So,,,
paragraph and then we want the class,,,
class uncore equals in its,,,
star-,,,
rating now in addition to the star,,,
rating class is the actual rating as a,,,
class you can see this one has has one,,,
so we can basically make this a list and,,,
select the second item which would be,,,
the one index,,,
so let's say star rating and then in,,,
Brackets we'll say class and we want the,,,
second one which would be the one index,,,
so now let's do a print of,,,
rating and we should get all the ratings,,,
there we go and then the last thing that,,,
we want to extract is the link so let's,,,
say book. find and,,,
that's in the H3 we want to find again,,,
again and find the a tag and we want the,,,
href attribute so let's print,,,
link let's run,,,
that and there we go so it doesn't it,,,
only has like the the actual route it,,,
doesn't have you know it book uh TW,,,
scrape or books.,,,
what the actual link,,,
is if I click,,,
on oh here we go yeah so it's slash,,,
catalog so it's only giving us this so,,,
why don't we prefix it with,,,
this all right so let's come back here,,,
and let's see we'll,,,
do how do I want to do this,,,
um you know what we'll leave that as is,,,
but then when we,,,
append the object will add that,,,
beginning part so let's do this let's,,,
say,,,
books. append and we're going to pass in,,,
here an object or a dictionary so title,,,
set that to title and then we have what,,,
price set that to price and we have,,,
stock and rating,,,
and we have link so what I'm going to do,,,
is set this to an F,,,
string and I'm going to paste in what I,,,
copied and then we can just say slash,,,
and then in curly braces,,,
link okay so that will create an array,,,
for us and then let's,,,
return let's return,,,
books all right and we want that return,,,
on the same level as the four four which,,,
is right there all right,,,
cool so well you know what before we,,,
return it why don't we just print,,,
because I want to make sure that,,,
everything is correct before we you know,,,
do the pagination and also save it to a,,,
file yeah so that looks good and that's,,,
the first page so you can see the last,,,
book is it's only the Himalayas so if we,,,
go to what's this page two let's go to,,,
page one and the last book is it's only,,,
in the Himalayas and the way we have it,,,
right now if we pass in two here we,,,
should get we should get the second page,,,
so I run that the last book is you you,,,
can't bury them all so let's go to the,,,
second page and the last book you can't,,,
bury them all so we know that this is up,,,
to this point is working perfectly so,,,
again we do want to,,,
um uh we want to return books from here,,,
and then we're going to move down to our,,,
main function so before we do anything,,,
here let's define I'm going to have an,,,
array of all books or a list of all,,,
books and then our Max Pages again if,,,
you watch the node version this is the,,,
exact pretty much the exact same thing,,,
so now we want to Loop over the pages so,,,
let's say,,,
four current uncore page in and we're,,,
going to use range here you want to,,,
rrange one and then,,,
maxcore Pages plus one and then within,,,
here let's create a variable called,,,
books books on page and we're going to,,,
set that and this is where we're going,,,
to use our fetch books so we can get rid,,,
of it from there and let's say fetch,,,
books and then pass in whatever that,,,
current page,,,
is and then we're going to take our all,,,
books array or list,,,
and let's extend so we're going to call,,,
extend and then we're going to add books,,,
on page so we're just going through each,,,
page and then adding those books to the,,,
array and then I'm just going to print,,,
just like we did in the node version if,,,
you watch that I'm going to say books on,,,
page and then the current page and we'll,,,
put a a colon and,,,
then the books on page so that'll just,,,
print it as it as it goes through each,,,
page then we want to save the data so,,,
let's go on the same level as the four,,,
let's say save data to file so we're,,,
going to say with and say with open and,,,
and with is used to just wrap the,,,
execution of a block of code and it just,,,
makes sure that resources are are,,,
properly managed um you know it,,,
guarantees that the file is is properly,,,
closed and stuff like that so we're,,,
going to say with and then open so open,,,
is a built-in python function to open a,,,
file and the file that I want to open,,,
and it will create if it's not there is,,,
books. Json and we want it in right mode,,,
so pass in W and I'm going to say as F,,,
so basically I'm assigning that to the a,,,
variable of f then we're going to use,,,
the Json package and a method called,,,
dump which does just that dumps the Json,,,
into the file and the data we want to,,,
dump is all books,,,
and um f is the name of the the file,,,
okay so basically the books. Json and,,,
then I'm going to set the indent to two,,,
and that should do it I believe that's,,,
yeah I believe that's all we need to do,,,
we should do some kind of console log uh,,,
after it's done so down here let's just,,,
do a print and we'll just say data is is,,,
saved to books.,,,
Json all right so here we go moment of,,,
truth let's go ahead and run,,,
it and it's going through and just,,,
showing each showing all the books for,,,
each,,,
page we could make it prettier but it,,,
doesn't really matter in the console,,,
what matters is a file here and there we,,,
go so we got what should be 10 pages of,,,
data 10 pages of,,,
books all right cool so that's going to,,,
do it guys that's how we can scrape a,,,
website and handle pagination using both,,,
node.js and python so I'll have all the,,,
code I'll have both versions in the,,,
description if you want that and that's,,,
it thanks for watching and I hope you,,,
learn something",,,
MQ00BUttqr0,"so web development is a very vast field
with a lot of myths and misconceptions
and in this video I just want to talk
about and even debunk some of the most
common myths when it comes to web
development now I know a lot of you guys
are developers so you might already know
a lot of the stuff but this is more for
beginners who are just starting out
learning to code and seeing a lot of
this stuff and seeing things that kind
of conflict with one another and just
having questions about what's true and
what isn't now some of these can be
debatable my goal isn't to claim
absolute Authority on what's true or not
most of us usually go off of our own
experiences but I did do a bunch of
research as well so it's not just my
experience and my goal is just to
provoke thought encourage a more nuanced
understanding and just provide Clarity
based on both P personal experience and
thorough research so let's jump in and
let's take a look at some of the common
myths or misconceptions when it comes to
web development
[Music]
all right so getting right into it myth
number one is that once you build a
website or web app that's it you're done
forever and many people think that
building a website or any software
project is kind of a one-time thing
which in most cases is objectively not
the case so launching your site is just
the beginning and a website is basically
a digital representation of your
business and as your business grows and
evolves so should your website and this
can pertain to different things like
design fun functionality content
security and in many cases you need
ongoing maintenance and this is a good
thing for web developers especially
Freelancers because there's always work
to be done and you can go back to the
client and offer to update their website
when I was freelancing I would always
offer a maintenance plan to my clients
and would include things like regular
updates adding content backups Security
checks and so on and this is a great way
to keep a steady St stream of income
coming in so myth number two is that you
need to learn everything and
technologies that are used for web
development are always changing and
evolving so it's literally impossible to
know everything and I actually recently
did a video on this um probably about
two months ago where I talk about
specialization and that's what I suggest
you pick a stack you pick a group of
Technologies specialize in that and
that'll make you more valuable to
employers and clients so you don't need
to learn everything but you need to
figure out what you do need to learn and
that can actually be pretty tricky in
itself so myth number three is that you
need a traditional college education and
degree while a degree in computer
science or a related field can be very
beneficial I'm definitely not saying
it's not I'm not saying it's a waste of
time or anything like that it just isn't
a strict requirement in many cases to
become a web developer and many
successful developers including myself
have built their careers through
alternative paths such as self learning
online courses boot camps or just
practical experience and the tech
industry values traditional education
but it also values skills portfolios and
just practical experience many times
over traditional education and being
able to demonstrate your ability to
build and maintain websites and
applications through a strong portfolio
can be just as effective if not more so
and there are of course companies that
do have that strict line where you do
have to have a degree but I feel like uh
or I know that those that's becoming
less common as time goes on so myth
number four is that web development is
easy and I've seen other types of
programmers kind of look down on web
development and say it's not true
software development which I think is
ridiculous of course there are other
roles that are more complex when getting
into you know lower level code but
webdev is still a complex field that
requires a lot of Knowledge and Skills
in fact I'd go as far as to say that you
need to learn more when it comes to web
development because there's so many
tools and Frameworks and they're
constantly changing so this is
especially true for for full stack
developers in addition to just you know
HTML CSS JavaScript you have front-end
Frameworks and tools you have backend
languages python Ruby no. JS PHP you
also need to to know how to manage
databases Version Control other build
tools you need to know how to optimize
your code and perform uh for performance
and for security you need to know how to
test code and fix bugs so you need to
know a lot of the the same things that
any other software developer needs to
know and software development in general
is is difficult unless you're some kind
of Genius so myth number five is that
front end and back end are are totally
separate while they are two distinct
areas of web development they're not
entirely separate the two sides of web
development work very closely together
to create a seamless and functional web
experience even if you're creating an
app with a completely separate front end
and backend you need to understand a lot
of the same stuff how rest apis work how
HTTP requests work you need to
understand how to pass data um from the
front end and back end and vice versa
sessions cookies everything is is very
intertwined I also think that SSR server
side rendering is kind of the future of
web Frameworks Like
nextjs Remix spell kit n Astro you can
build full stack applications with a
single code base and I actually just
updated my nextjs course where we
ditched the API routes and did
everything within server components and
actions so that line between front end
and back end is is really getting
blurrier and blurrier also if you work
with you know PHP and and tools like
WordPress you're doing both front-end
and backend development you're creating
themes and plugins which require both
front and backend
knowledge so myth number six is that web
development is dead and AI will replace
web developers and it's true that AI is
getting better and better and it's
definitely unknown and debatable as to
how much that's going to affect
developers and affect jobs I'm
definitely not saying there won't be an
effect already is however this isn't
exclusive to to software development you
can pretty much say that AI threatens
just about any job type web development
is um it's a very creative field and it
requires a lot of problem solving skills
and AI can help with that but it's not
just about writing code it's about
understanding the needs of the client
and the end user and just creating a
solution that meets those needs and AI
can't do better uh than humans at
understanding human emotion and I don't
know what's in store for the future I
nobody does but you in my opinion you
can't base all of your career decisions
on what may or may not happen you have
to focus on what you can do now and what
you enjoy doing also AI provides great
tools to help you become a better
developer so that that's just what I
choose to focus on and that's what I
would recommend so myth number seven is
web development is just about writing
code and while code cing is a critical
component it's it's part of a broader
process that includes aspects of design
planning user experience obviously
there's different roles in web
development front-end devs need to
understand design principles user
experience accessibility backend devs
need to understand databases service
side logic security and collaboration
and communication are also key skills in
web development especially these days
you need to be able to work with
designers project managers work with
clients if you you know you're
freelancing and you're dealing face Toof
face with clients there's a huge social
aspect to web development that many
people don't realize so just because
you're good at writing code doesn't
automatically mean that you're going to
be super
successful so myth number eight is that
WordPress developers are not real
developers and I've seen people say this
before that you know if if you work with
WordPress or or any CMS for that matter
you're not a real developer and I've
worked with a lot of Wordpress devs back
in the day and some of them were some of
the most talented people that I've ever
worked with and could create just about
anything in record time and most
professional WordPress developers they
know PHP JavaScript HTML CSS SQL they
know how to create custom themes and
plugins they know how to optimize a site
for performance and security they know
how to work with databases and apis they
know how to deploy a site to a server
and maintain it it they know how to test
their code fix bugs so they really know
the inside and out of a website and
they're real developers and sure you
might have some beginners that just
install themes and plugins but if they
keep working with WordPress they're
they're eventually going to need to
learn how to create those custom themes
and plugins otherwise they're not going
to be able to make a living and that's
pretty much where I started I started
out just being one of those people that
just installs themes and plugins but
eventually I I learned to code I learned
to customize and you know build things
that my clients needed and then it led
me down the path to like JavaScript and
node.js and and you know full stack
development so uh I definitely wouldn't
say that WordPress developers are not
real
developers so myth number nine is that
you need a fancy design I think a lot of
people think to you know to to have a a
website or application that's successful
it needs to be you know this this
fantastic design design while visually
appealing designs they can enhance user
experience but it doesn't even come
close to being the most important thing
in a successful website a website needs
to be functional easy to use
content uh responsive consistent and
accessible and it needs to load quickly
it needs to be optimized for search
engines all of these things are more
important than a pretty design and you
can have the most beautiful website in
the world but if it doesn't work
properly your users are going to leave
and you can have the ugliest website in
the world but if it works well users
will stay if you look at some of the
most popular websites like Google
Craigslist stack Overflow Reddit uh
Wikipedia these are not very visually
appealing right nothing really jumps out
you don't say wow this looks great but
they're some of the most successful
websites in the world because they're
functional and they're easy to use and
user experience is is more important
than design so although good you know
really fancy designs they can in some
ways enhance user experience and they
can attract people initially to to your
website but never give up functionality
for design so some people think that the
more features a website has the better
it is but that's not really true in fact
in many cases it's the opposite a
website should only have the features
that are necessary to meet the needs of
the client and the end user and adding
unnecessary features can really make a
website bloated and and slow as well as
just confuse the user so you should
focus on creating a website that's
simple intuitive and easy to use and
this will make the user experience much
better and and keep people coming back
and you can always add more features
later as you know the needs of the the
client and the enduser change so myth
number 11 you need a team to build a
successful website and I don't think
this is true I think that this myth can
make aspiring solo uh entrepreneurs or
small business owners feel like they
lack the resources to build highquality
sites on their own I'll be realistic and
say that a single person couldn't build
Google and maintain it you know on their
own for years and have the same type of
success however a lot of those platforms
did start with a single person or a
small team and I'd say that you can
start anything by yourself you just need
to be able to expand as the project
scales and there's also many types of
projects that you can run on your own
forever anything from a simple blog to a
powerful SAS or e-commerce company
especially with all all the tools that
are available from Frameworks to no code
tools it's definitely possible the next
myth is that not all websites need to be
responsive and I've been doing this for
a while and I I do remember when having
a mobile version of a website was kind
of an add-on now it's a requirement it
has been for years mobile usage is
increasing every year and it's not going
to stop so you need to make sure that
your website
are responsive that they look good on
all devices and this isn't this is not
just for use experience but also for SEO
Google ranks mobile friendly websites
higher in search results and CSS
Frameworks like tailwind and bootstrap
they make it really easy to create
responsive websites even if you're not
great with CSS and design and in my
opinion the only time you you don't need
to worry about responsiveness is if
you're building like an internal tool
that's only going to be used on desktops
by certain employees or even just by
yourself then it's okay but if it's a
public facing site and you're getting
new users then you're definitely going
to want it to be
responsive so myth number 13 a website
needs to be perfect before launching and
this is something that I've seen over
and over and have even done myself you
don't want to launch a project until
it's 100% complete but the truth is a
website is never complete and there's
always something that can be improved so
you should launch your website as soon
as it's functional and then iterate on
it you can always add new features and
improve the design and and fix bugs
after the launch and I'm not saying
launch a site that's you know just full
of errors but if everything seems to be
working then launch it if then problems
arise then you address it and in fact I
think it's better to launch early and
get feedback from users so that you can
make improvements based on that feedback
that's something called an MVP or a
minimum viable prod prod you launch the
smallest version of your product that's
still functional and then build it build
on it based on that user feedback and
this is a much better approach than
trying to build the perfect website
before launching because you're never
going to end up launching so myth 14 SEO
is just about keywords SEO is a very
complex field that involves much more
than just keywords keywords are
important you know they're they're just
one piece of the puzzle though SEO also
involves technical aspects such as site
speed mobile friendliness security it
also involves user experience content
quality and backlinks and SEO is always
changing and evolving so it's important
to stay up to date with the latest
trends and best practices there's a lot
of tools that you can use you know go uh
Google analytics Google search console
sem Rush Etc and you can also hire an
SEO expert to help with your websites
SEO and I'd say another misconception is
that SEO is a one-time thing it's it's
not it's an ongoing process that
requires regular monitoring and updates
and then the last myth is that you need
to use the latest Technologies the
choice of Technologies should be based
on the specific needs of the project
older stable Technologies can be just as
effective if they meet the requirements
and they're well supported and I'd also
say that
prioritizing um stable proven
Technologies and Frameworks can be more
beneficial in terms of long-term
maintenance and compatibility and I see
a lot of people get worked up because
the framework version they're using is
is one or two versions behind if it
works it works and you can always update
it later and I've seen people rewrite
their entire project because they were
using an older version of a framework
and that's just a waste of time and
money in many cases you only need to
update if there's a security issue or a
feature that you need in in the new
version all right so those are the 15
myths that I have for you of course of
course uh my own opinions and experience
influence everything I've said here but
I think that these are pretty common
myths and I've seen these you know over
and over Through The Years hopefully you
found this video useful and hopefully it
cleared up some misconceptions
especially for beginners and if you have
any other myths or you have any opinion
on any of these then let us know in the
comments",,
VeNfHj6MhgA,"hey guys welcome to my vue.js crash
course so this is a course that's
designed to get you up and running with
vue.js as quick as possible and it's
scared toward beginners so if you've
never used vue.js before if you just
dabbled with it or even if you've worked
with it but you want some Refreshers or
you want to learn about the composition
API then you're in the right place and
there's going to be a few different
parts to this course so first we're
going to go through some slides and talk
about what view is and how it works and
that shouldn't take very long probably
under 10 minutes or so and then I'm
going to show you how to get up and
running very quickly using the CDN which
is the fastest way to use view although
you should only use that for really
small projects and testing and just
messing around for larger projects we
use something called create view which
is ultimately what we'll be using so
after we do that we'll get into set
getting set up with create View and
we'll go over the fundamentals of
components directives data methods Etc
uh we're going to look at a very basic
task project I wouldn't even call it an
app it's just a project to experiment
with and learn different things
different directives and so on and then
after that we'll move on to our main job
listing website and since view is a
front-end framework we need a backend
for data so we're going to be using
something called Json server which is a
library that allows us to create
basically a mock rest API and we'll
start with some hardcoded job data but
then we'll add some Dynamic data from
the API and we'll learn how to make
requests and so on so I'll have the the
template files the HTML with the
Tailwind classes and all that available
for you in the repo as well if you took
my latest react crash course it's the
same exact application and that was
intentional so that you can compare the
two Frameworks and I'll also be creating
an angular and a spelt version of that
joob listing project as well because
that's that's essentially the reason for
these crash courses is so you can just
get your feet wet and you can compare
and contrast with other Frameworks and
then you can decide on which one you
want to specialize in all right so relax
get a coffee or tea or whatever it is
that you drink and let's get started
learning vue.js
[Music]
this video is sponsored by daily dodev
which is a platform that lets developers
stay up to date with current Tech and
I've used the daily dodev Chrome
extension for over a year now so it
opens up automatically when I open open
a new tab and there's always something
that catches my eye in fact there's been
a bunch of articles that have given me
inspiration and ideas for new videos and
it can often feel like you're falling
behind because it seems like every day
there's new trends and new technologies
that come out and daily dodev compiles
information from all over the web and
you can even set up your own custom
feeds with specific tags of the type of
content that you want to follow and you
can manage categories content types and
block certain tags you can also create
Squad SS and I've recently created a
public traversy media Squad so feel free
to join and stay up to date with my
latest content so visit daily. deev
today and download the extension or use
the web version all right so as with any
of my crash courses we're going to start
off by defining what VJs is so it's a
progressive JavaScript framework used
for building user interfaces and single
page applications or Spas although you
do have meta Frameworks now such as n
and gridsum where you can build serers
side rendered apps as well as static
websites but we're sticking to spas in
in this project or in this course so
it's designed to be simple flexible and
incrementally adoptable meaning you can
start using it for small parts of your
application and and then gradually scale
up and view makes it easy for developers
to integrate it into projects of all
sizes whether you're just adding some
interactivity to an existing web page or
building a complex web application from
script ratch and with its reactive data
binding and component-based architecture
VJs helps developers create Dynamic and
interactive experiences for users in a
very straightforward and efficient way
so view was created back in 2013 By a
developer an independent developer named
Evan U who is I believe currently based
in Singapore at least that's what I know
from his bio and the reason that I I
like to mention that is because I think
that the fact that Vue wasn't created by
a Google or a Facebook or any other Tech
Giant like most of the front-end
Frameworks were and the fact that it
still has the popularity that it has I
think that speaks volumes about the
framework and about its quality and
about its Community now as far as
prerequisites a lot of people ask me
when am I ready to learn a framework and
the answer to that is a tough one
because everyone has a different
learning ability and different ways that
they like to learn I know people that
learn JavaScript at the same time that
they learned react or view however I
don't think that's the optimal way to do
it for most people I think you should
first learn the building blocks HTML CSS
JavaScript and when I say JavaScript I
don't mean just learn what a variable
and a function is I mean learn it to the
point where you can build at least some
kind of of fairly simple front-end
Project without any framework so I
usually recommend the following
JavaScript fundamentals so Loops
functions objects arrays things like
that events and Dom manipulation the
fetch API and just basic HTTP so learn
how to make a request to public apis get
data back send a post request Etc um
things like Arrow functions high order
array methods destructuring basically
all the es6 features that we got I think
you should know that stuff because
because you're just going to run into
that constantly and you don't want to
get mixed up in you know what is
actually JavaScript and what is actually
VJs or or react or whatever framework
you're learning you want to know have a
solid understanding of JavaScript and
then I think learning npm is important
learning the node package manager
because you'll be using that constantly
including using it to get set up with
your initial VJs project now before we
talk specifically about vue.js let's
talk about the role of front-end
Frameworks and why they were created and
some of the advantages that you have uh
cuz some people don't understand why you
would use something like VI VI or react
or angular so one you have enhanced user
experience so front-end Frameworks are
designed to make it easier for
developers to create uh interactive user
interfaces they provide a lot of
functionality out of the box and allow
you to focus on the things that are
unique to your application and if you
try to build a really interactive
interface with just vanilla JavaScript
it can get really messy really quick and
I'm not saying that you can't do it but
it can be uh it just be really difficult
and it's it's kind of like Reinventing
the wheel so next you have organization
front-end Frameworks are designed to
make it easier for developers to
organize their code the UI is broken
into components and each component has
its own State its own properties things
like that and they're also essential um
frontend Frameworks are also essential
for collaboration so if you have five
different developers create an interface
with vanilla JavaScript you're going to
get five completely different code bases
it's going to they're going to all be
have their own style by using a
framework everyone can be on the same
page and it's much easier to collab and
to build with a team so performance
front-end Frameworks are optimized for
performance they they have a lot of
built-in features such as the virtual
Dom which is a way of rendering the
document object model without having to
render the entire Dom every time this is
a huge performance boost and gives users
a really fast UI
and then one of the key benefits of
front-end Frameworks is their modularity
they allow developers to break down
their applications into smaller reusable
components and this modular approach not
only makes the codebase more manageable
and easier to understand but it also
promotes reusability so those are just
some of the reasons why we use front-end
Frameworks I'm not saying that you
should always use one in fact that's
something I see a lot of people doing
these days is using view or react or
felt to create something like a very
simple landing page and I think that
that can just over complicate things so
you have to look at each project
individually all right so that's just
the role of front-end Frameworks now
let's talk about why view because
there's there's quite a few out there so
first we have Simplicity and
approachability VJs is renowned for its
Simplicity and ease of integration into
existing projects and it has a very
gentle learning curve and it makes it
makes it accessible to developers with
varying levels of experience and it
allows them to quickly get started and
become productive rather than learning
something like angular and I don't mean
to trash angular but it is a very
difficult framework to learn and it's
going to take you a lot more time to
start building stuff so flexibility VJs
is designed to be incrementally
adoptable again that means that you can
introduce it into your projects
gradually and whether you need to build
a small widget or a full-fledged single
page application VJs scales effortlessly
and uh it it allows you to meet very
diverse project requirements next we
have performance and size so VJs offers
excellent performance due to its
efficient rendering mechanisms including
the virtual Dom additionally View's core
library is very lightweight which uh
contributes to faster initial load times
and better runtime performance and it's
known to be one of the fastest front-end
Frameworks around view promotes uh
component-based architecture and
components are self-contained units that
can be reused across different parts of
your application fostering
maintainability and code reusability VJs
also has a really Vibrant Community and
Rich ecosystem of libraries tools and
plugins in addition to building single
page applications you have meta
Frameworks like nujs which allows you to
build serers side rendered applications
as well as Frameworks like gridsum which
allows you to build static websites so
VI has a great ecosystem that is similar
to to that of react now choosing VJs
over react spelt angular it often boils
down to personal preference and you
should also take into account what's
being used in the industry and
especially in your area but I'm also of
the opinion that you should enjoy the
framework that you're working with all
the time so my advice is to always try
the framework s that interest you that's
again that's why I create these crash
courses so you can get your feet wet and
create something and see which one
really clicks with you and I think that
building the same project with multiple
Frameworks really gives you a lot of
insight so as with any other front-end
JavaScript framework vuejs is built
around the concept of components and
components are reusable selfcontain
pieces of code that can be easily
dropped into different projects and view
components a very simple structure
that's broken into three parts
essentially so first we have the logic
which is the JavaScript and this is
wrapped in script tags this is in a in a
an actual view file your components are
have a do view extension and this is
where you would Define any state or data
as well as any methods events Imports
things like that then you have your
template output which consists of HTML
that will be rendered however we can can
also include Dynamic elements within
this template such as variables Loops
conditionals um using something called
directives and we'll cover these later
and then you have the style which is the
CSS and you can add scoped which means
that the styling will only pertain to
that specific
component so this is just a very simple
example uh I don't even have any
JavaScript or css but you can see how
it's broke it's clearly broken up into
those three parts and you might not even
have any sty or you might not even have
any any logic it could just be a dumb
component which is just a just something
that displays something and then you
should also be aware of the the two ways
to build view components one is the
options API which is kind of the
traditional way of of doing things um
where we everything is within objects or
options the data the methods Etc and
it's a it's more straightforward and
it's a it can be a good choice for
smaller projects however the composition
API which is uh released with vue3 is
more flexible and allows you to create
more complex components and I'm going to
give you an example of both but overall
I want to use the newer composition API
and if you really want to get into the
options API you can also look at my my
older vue.js crash course because that's
what we used in that one with both ways
you can Define State data methods life
cycle hooks you can have certain things
happen at certain times such as when the
comp component is is done loading Etc so
I mean there's they're similar in what
they do but the way that you write them
is it's pretty different so the last
slide that I have is just getting set up
there's different ways to do this the
easiest way is to use the CDN although
this isn't really the recommended way if
you're building any serious project so
basically you can just include the URL
in uh in a script tag and you can just
use vue.js you can initialize a view in
and go from there and I'm going to show
you an example of how to do this as well
as using Create view now there's
something called the vew CLI which was
used and popular for a very long time
it's a command line interface to
scaffold up a view project it includes a
rich collection of official plugins and
Integrations however the vli isn't
recommended for new projects anymore uh
and it's in I believe it's in
maintenance mode meaning that it will
only receive bug fixes and security
updates if you go to the VCI so view CLI
website you'll see that it's no longer
recommended and they actually suggest
using Create View and create view uses
the V web server and frontend Tool and
it includes features like hot reloading
out of the Bots typescript and other
features and it also has a re Rich
ecosystem of plugins and Integrations so
we can set up a project with one single
command and this is what we'll be using
for our job listings app and then
another way to use View is with meta
Frameworks just like react has nextjs
view has njs which allows you to create
server side rendered applications and
then gridsome is a static site generator
that uses view it's comparable to Gatsby
and react so these Frameworks have their
own tools to get set up and they're
definitely things that I think you
should check out but I always suggest
learning the core framework first and
learn how to build single page
applications then move on to you know
SSR and and SSG so that's it for slides
now we're going to jump in and like I
said I'm just going to show you real
quick how to use view with the CDN and
then we can jump in and use create view
all right guys so this is the vue.js
documentation which is pretty good and
I'd suggest just keeping it open as a
supplement to to this crash course and
you can check things out there's
obviously going to be stuff in here
we're not going to go over CU this is
meant to be kind of a beginner's guide
now you can switch here from composition
to the options AP and it will change the
the code examples because the logic in
your in your view components is going to
be different depending on which API you
use we're going to start off using the
options API but then ultimately we're
going to use the composition API in our
main project so to get started there's a
few ways that you can do it the
recommended way is to run create View
and that will scaffold up a project for
you and you can have your your single
file file components meaning you can
have components in a file with a view
extension and it allows you to build you
know really scalable applications but if
you just want to try things out or you
just have a little bit of functionality
you want to add to an existing project
you can use the CDN and that's what I
want to show you first so we're just
going to spend a few minutes using the
CDN so I'm going to copy this script tag
right here and we're going to just go
into I have this empty folder called
view test and I'm going to open that
with vs code and then we're just going
to create an
index.html and just scaffold up an HTML
document we'll say view test and then
let's add in that script tag with the
CDN and we now have access to the The
View object so in the body what I'm
going to do is just have an ID of app
and if if you're familiar with how react
works if you've ever used react or
angular in a single page application you
have a specific div specific element and
you basically bind your UI to that
element and that's what this is so down
at the bottom let's add in some script
tags and then I'm going to create a
variable called app and what we can do
is use the view object to create a new
instance or to create a new app and
there's a um method called create app
and what that's going to take in is an
object and then here we can Define any
any data or methods that we want on this
in this app and the data and for now
we're using the options API this is
going to be a function called data and
that returns an object okay it can be a
little confusing because some people
think it's you know when you first get
started it's something like this so you
have a data object but it's not it's a
function called data and returns an
object and then here we'll just Define
something like let's just say message
and we'll say hello from
view okay and now what we can do is go
under where we created the app variable
and we can mount that so app. mount to
the ID of app or whatever you choose to
to call this and now inside this div we
should be able to use interpolation
which is going to be the it's going to
be double curly braces that's a syntax
and then we can use any of the variables
that we have in our data so if I go
ahead and save this and I'm just going
to open it with live server we get hello
from
view all right so any data we put in
here we can then add in here and it's
it's basically Dynamic now we can also
have events and methods and and I'm
going to go over this stuff in depth
later on I'm just doing this really
quick so you can see how useful it is to
just use in your projects but let's go
we'll actually put uh an H1
around this
message okay and then underneath that
let's create a
button and I'll just say click me and
then we can add an event by doing at and
then the event which is going to be a
click and then set that to the name of a
method which I'll just call we'll just
call it
uh click me all right so now this method
we can Define down here in our app so we
want to go under the data function which
ends right here and then we're going to
say methods and that's going to be an
object of methods so let's say click
me and then all I'm going to do here is
just console log and we'll say
button
clicked okay so now we have the button
and if I open up my console and I click
we see in the console button
clicked okay so you can see this is very
easy to implement and it's nice and
structured so you have all your your
data your state and then you have uh any
methods and also you have access to this
data from within your method so for
instance I could do let's say this so we
use the this keyword message and we'll
just say
updated message so now if I click this
that changes to updated message all
right so that's about as far as I want
to go with the CDN just wanted to show
you how it works now we'll go ahead and
create a new application using Create
view so I'm just going to close this up
and we can delete
that okay and then I'm going to open up
a terminal and just navigate to wherever
you want to create this and we're going
to run npm create space view at latest
and then whatever you want to call the
folder I'm going to call it view crash
2024 okay so this is going to ask us a
few questions and what we want to
include if you want typescript you can
I'm going to say no you can also have
jsx support within your templates we'll
say no and then the view router is
important and I want to I do want to use
the view router in our our project but
I'm not going to say yes here because
I'm going to show you how to set it up
from scratch so we're going to say no
for now and then paa is a state
management Library similar to like Redux
and if you have a larger application you
might want to include it but we're going
to say no we're not doing any testing so
tools for unit testing and and end to
end testing we're going to say no yes
lint no view Dev tools no and then let's
CD into that folder and we do have to
run npm install or npmi to install the
dependencies okay then once that's done
let's uh I'm just going to go ahead and
open up this folder in vs
code and I'm going to go over all the
files and not all but most of these
files and folders in a minute but but I
just want to mention for extensions you
want to install a view extensions and
there's a few to choose from but what I
would recommend is this one right here
view official um this is going to give
you all the syntax highlighting and
stuff that you need if you don't install
a view extension and you you go to a
view file you're not going to have the
correct highlighting and it's it's not
going to be a very good experience so
just be sure to install this one or one
of the other ones if if you know of
another one all right so let's look at
the package Json first it's pretty
simple we just have the view framework
as a a dependency we have vit as a Dev
dependency that's our our Dev server and
our Dev tool and that there's a
ecosystem of plugins for V and view this
plug-in view is one of them and that's
what allows us to use vue.js there's
also a react plugin and many others and
then for scripts we have the dev script
which will run our local Dev server we
have the build script which will uh
create our production build and then we
can preview our production build with
preview so pretty simple package.json we
also have the the V config and this is
where you would bring in your plugin
such as the view plugin and initialize
it in the plugins array one thing I like
to do is change the port because by
default the dev server uses I believe
it's 5173 or 5713 I like to use 3,000 so
I'm going to add the server object here
and in that I'm going to say port and
set that to 3,000 you don't have to do
that that's just something I like to
have my my frontend projects on Port
3000 so the index HTML this is the the
single page of the single page
application so this is what the browser
loads as you can see there's an an
element with the ID of app just like we
had when I used the CDN and that's where
our UI is rendered and that comes from
the main JS file in the source folder
which is the basically the entry point
to view Js and since we're using vit
it's this is included as a module
because vit has U es module support so
unlike webpack where it would be you
know a compiled u u bundled Javascript
file so the title I'm just going to
change that to view
jobs and we can save that close it up
and then the source folder this is where
you know all the magic happens this is
where all of our components go the main
JS this is the entry point and again
we're just using we're we're bringing in
create app just like I did when we had
the CDN and we're mounting to that that
div that I showed you with the ID of app
and what we're mounting to it is this
app. view component which is right here
in the source folder and this is
bringing in some other components from
the components folder so and you don't
have to worry about this code we're
going to wipe it all away but uh as you
can see there's a script template and
then Style so it has those three main
parts um and then for the CSS this main
CSS um we're actually going to be using
Tailwind for our project so I'll show
you how to get that set up there's a
couple steps we have to go through but
yeah that's pretty much the structure of
of what you get when you scaffold up a a
view app so I want to just clean things
up a little bit actually let's run the
dev server first so if we run npm run
Dev as you can see see for me it's
starting on 3000 um because of that what
I added in the config file and it's just
the the landing page it's just this
stuff here this hello world and so on
but what I want to do is just get rid of
all this so in the components folder we
can actually delete everything here and
in the app. view I'm going to just for
now get rid of the script and let's
clear everything out of the
template uh we want to keep the template
tags but clear everything out and then
clear out all the style and for now
we'll just have an H1 and we'll just say
um I don't know we'll say hello or let's
just say view
jobs even though we're going to do some
some stuff first just to demonstrate
what certain directives are and so on
before we actually start on our
application but as you can see now it's
just showing the the template here now
before we do anything else I just want
to go over a few things so as I said as
I showed you we have our script that can
go at the top but you can also put your
script down here if you want which was
more of the convention with uh with vue2
but I like to have it at the top and
then you can have your style and you can
scope that to this specific component by
saying scoped so anything I put in here
like if I put H1 and I make that red
that's only going to be in this the H1s
that are in this particular
component now just like we had in the
where we use the CDN we can Define data
in this component let's do that so we'll
open up our script tag and we're going
to export default in objects now I'm as
I said I'm going to start with the
options API and we're just going to do a
few things I'll show you some directives
and then I'm going to go back in and and
switch it up and convert it to the the
composition API so you have a a clear
definition of of both apis so with the
options API you do have to export
default from the script so you have
access to the data and methods in your
template so in this export default we
can Define our function called data and
that will return an object and in that
we can put our data so let's just say
name and we'll say John Doe all right
now since I have this this name I can
use that down here so in this H1 I'll
replace that and I'm going to use
interpolation with double curly braces
and I can just put name and as you can
see it's now outputting John Doe so
that's how we can create data and use it
within our template now we're going to
look at something called directives
which allow us to uh to basically make
this template Dynamic and we can have
things like conditionals and loops and
events so let's um let's start off by
adding another piece of data here called
status and I'm going to set that to true
for now just a Boolean and then under
the H1 I'm going to have a paragraph and
the first um directive I want to show
you is V if and all these directives are
going to start with v-h and you use them
just like any HTML attribute so let's
say V if and then I'll say status okay
so it's going to look at that status
data and I'm going to say user is active
and if I save that now we can see user
is active on the screen and if I change
this status to false now we don't see it
so that's V if just like any if
statement and we also have V else so if
I go under that and let's have a
paragraph and say um v- else and then
I'll say user is inactive if I do that
now user is inactive and if I were to
set that to true then user is active now
I'm going to change this from a Boolean
to a string and we'll say active and I'm
going to show you V else if so let's say
well first of all instead of just saying
if status let's add in here if status is
equal to active then user is active and
then we'll have another paragraph and
we'll say
v- else if equals status and let's say
if that status is equal to pending then
we'll say
user is pending okay so now we see user
is active if I change this to inactive
or anything anything at all it's that's
not active or pending then it's going to
show this right user is inactive and if
I add pending as the status then user is
pending all right so that's how you can
use those conditional directives now the
next one I want to show you is V4 which
you can use to iterate over array items
so let's go ahead and um and add some
data here I'm going to call this
tasks and set that to an array and we'll
just use an array of strings we'll say
task
one task
two and task 3 okay and then what I want
to do is down here under these
paragraphs I want to Loop through
actually let's put an H3 and just say
tasks and we're not building like an
actual app here it's just it's just to
give you an example of these directives
so let's say we want a ul and we want a
list item item for each task so what we
can do is create a list item and then we
can use
v-4 and it's basically a four in Loop we
can say task in tasks okay so this task
refers to the data up here right and you
can call this whatever you want but
since we use task we'll be able to use
that within our list item now when you
create uh a list like this just like
with react you have to add a key so we
do that by doing colon key key and then
I'm just going to set that to the task
it should be something
unique all right and then inside the LI
let's just output a t the task itself
with
interpolation so now if I save that you
can see we have task one two and three
in list items so that's V4 now the next
one we have is V bind which allows you
to bind a piece of data to an attribute
so for instance if we have let's say
link I'm just going to use
https
google.com and then let's say down here
we have an a tag and I want to bind that
link to the href what I can do is say
v-bind colon href and then set that to
link and I'll say click for Google and
now if I click that it should go to
google.com that was just cached uh so
yeah so you can bind any data to to any
attribute now this is the long way of
doing it I'm going to just copy this
down and comment that out because I want
you guys to have this um but the shorter
way is to get rid of V bind and just
have the colon and then the and then the
um the attribute okay so when you use a
colon what you're saying is this is
going to be dynamic this this is not
just text of Link it's a variable okay
if we do that without the colon then
we're just setting it to a string of
Link
so that's V bind now for events there's
a couple ways to do it I already showed
you one of them and I'll I'll revisit
that but we can use the V on directive
so let's create a button I'm just going
to put a space here and let's say button
and let's say change
status okay and then what I want to do
here is say v- on colon click and then
set that to u a function called toggle
status
right so when I I set this V on click
and you can use other events too but we
want to click and then we can create a
method so just like I showed you earlier
let's go under the data and say
methods and then in here I'll put toggle
status like
that and what I'm going to do is change
the status and I can access any of this
data I can access in the methods by
using this and this is with the options
API it's different with composition
which I'll get to soon but I'm going to
go ahead and just have an an if else if
here so let's say if this. status is
equal to
active then I'm going to set this.
status equal
to pending okay else
if this do status is equal
to pending then I'm going to set it to
inactive so this do status
equals inactive and then we'll have an
else and then we'll set this do status
equal to active all right so now we have
this button and I'm just going to put a
line break right
here okay and if I click change status
you'll see that now says user is
inactive user is active user is pending
so it's reacting to my my button click
here now the the shorter way to do an
event I'm just going to comment that
down is we can do instead of v on colon
we can replace that with the at symbol
and just say at click and now you'll see
that that still does the same thing all
right so I mean in my experience you see
this more than you do
this all right so yeah I think that
that's that's prett",,
",,
y much all I want to,,,
show you as far as the options API so,,,
you have your data you have your methods,,,
it's it's very straightforward and,,,
you'll probably see you'll probably find,,,
that the composition API seems a little,,,
tougher at first but it's much more,,,
flexible and you can create much more,,,
complex components and there's a a long,,,
way of doing it and a shorter way I'm,,,
going to show you the longer way first,,,
all right so um do I want to keep,,,
this you know what I have I I'm going to,,,
put the blog post in the description,,,
which has all the code like every bit of,,,
code I write in this tutorial so I am,,,
going to get rid of,,,
this,,,
um oh you know what I'll do is I'm going,,,
to rename or not rename I'm going to,,,
copy this and then rename that to let's,,,
say app 2 and then back in app. viiew,,,
I'm going to get rid of everything in,,,
the,,,
export okay so I want to keep keep all,,,
this cuz whether you're using options or,,,
composition this stuff is going to be,,,
the same the directives all that those,,,
don't change it's just this the logic,,,
all right so we want to have and I'll,,,
keep this open too so we can see we want,,,
the this data back but using the,,,
composition API now with the composition,,,
API we have to wrap everything in a,,,
setup function okay and there's again,,,
there's a shorter way of doing this and,,,
I'm going to show you that after so in,,,
setup we can then Define our data just,,,
like we would normal data we don't have,,,
to have a data function or anything like,,,
that and I'm going to set that to John,,,
Doe and then we want what else did we,,,
have the status which I'll set to,,,
active and then we have our,,,
tasks so we'll say task,,,
one task,,,
two and task three and then we have the,,,
link we don't I guess we don't need the,,,
link so I'm going to get rid of this uh,,,
this right,,,
here okay so I saved and you see that,,,
the tasks aren't showing um I'll I'll,,,
get to that but let's let's create the,,,
function because remember we have the,,,
methods object with a toggle status what,,,
I'm going to do is copy everything in,,,
the toggle status body and then we're,,,
going to define the function here I'm,,,
going to use an arrow function so toggle,,,
status equals arrow and then we can,,,
paste that stuff in there all right and,,,
then what we'll do is in the setup,,,
function we're going to return so down,,,
at the bottom setup ends right here so,,,
I'm going to,,,
return the,,,
name the status,,,
tasks and toggle status all right so now,,,
we can see our task a task are back the,,,
name is back so basically we have our,,,
setup function we have our data we have,,,
our method and we're returning all,,,
that now if I click this notice that,,,
it's not uh it's not changing the Status,,,
the reason for that is these aren by,,,
default these values are not reactive,,,
and we need we need the status to be,,,
reactive because we're we want it to,,,
react to this button so the way that we,,,
fix that is we need to wrap it in a,,,
function called ref there's also a,,,
function called reactive which you can,,,
use with objects but I'll get to that,,,
later so what we need to do is import,,,
ref so up here we're going to say import,,,
ref from,,,
View and then we just need to wrap our,,,
data so,,,
ref and we're going to wrap John,,,
Doe and then for the status,,,
ref wrap that,,,
and,,,
ref like that okay so I'm going to save,,,
it and then click change status and it,,,
notice it's still not working that's,,,
because when you have a reactive,,,
variable like we do here we don't use,,,
the this keyword and we need to use,,,
value so what we can do is change these,,,
instances of this do status to status.,,,
Value save that and let's come over here,,,
and now it works,,,
all right so this is the the conversion,,,
of this the options API to the,,,
composition API now there's a bunch of,,,
things we can do to shorten this up this,,,
is the long version so first off we can,,,
instead of you using the setup function,,,
explicitly we can actually put it in the,,,
script tag like this script setup and,,,
then not not only do we not need the the,,,
setup but we don't even need to export,,,
default so we can get rid of both of,,,
these lines,,,
and then down here get rid of both of,,,
these and then since we're we don't have,,,
an explicit setup we don't even need to,,,
have this return we can completely get,,,
rid of that okay so now that looks a lot,,,
cleaner right we don't have the setup,,,
function we're just using setup here we,,,
don't have the export which is nice,,,
because with the options API you need,,,
the export and then we're not returning,,,
anything it's just implicit so if I,,,
click change status it still works,,,
all right so this is the the composition,,,
this is the options and it's up to you,,,
on what you want to use but again this,,,
is much more flexible this is very rigid,,,
right you have a data function that you,,,
need you need to return the specific,,,
object you have a specific methods,,,
option or object with all your methods,,,
here you just it's it's more like a,,,
react application right um and ref you,,,
can think of ref sort of as used state,,,
in react if you are familiar with react,,,
um because it with used State you you,,,
can't just have a variable and then just,,,
reassign it to something you update it,,,
with used State that's kind of similar,,,
to what we do here although you can just,,,
directly set the dot value which I think,,,
is is much neater now I know we're like,,,
a half hour or more into the video and,,,
we haven't started the project yet but,,,
there's a couple other things I want to,,,
show you and the reason I'm showing you,,,
all this stuff now now is so we can kind,,,
of go through our project with ease,,,
obviously there's new things that I'll,,,
show you there but you're already going,,,
to know understand reactive variables,,,
and you know how to create methods and,,,
events and and directives so let's add a,,,
little form where we can add a task to,,,
this list so I'm going to go into the,,,
template and let's see we'll just go,,,
doesn't really matter this doesn't have,,,
to look good at all but we'll go above,,,
the H3,,,
okay and then I'm going to create a form,,,
tag and what we can do here is either,,,
use v-h onsubmit we can use V on,,,
directive or we can just do at,,,
submit and set that to a function which,,,
I'm going to call add,,,
task now when you submit a form whether,,,
it's vanilla JavaScript or whatever you,,,
have to do you know e. prevent default,,,
because you have to prevent that default,,,
um Behavior but what we can do here is,,,
we can just do prevent and then we don't,,,
have to worry about doing,,,
event.prevent uh above in the,,,
method so in the form let's add a label,,,
so we'll say for let's call it new,,,
task and we're just going to say add,,,
task and then we'll have an,,,
input type is going to be text ID we'll,,,
say new,,,
task uh what else do we want here let's,,,
do a name of new task now what we can do,,,
is we can bind a piece of data to an,,,
input and we can do that using the V,,,
model directive so up at the top here,,,
where we have our data let's say con new,,,
task just like with react I know I'm,,,
saying a lot about react but I'm,,,
guessing a lot of you guys have at least,,,
a little bit experience with it and it's,,,
fine if you don't it's absolutely fine,,,
but with react when you usually when you,,,
have form inputs they're attached to a,,,
part of your state and that's what we're,,,
doing here so we're setting new TX task,,,
to ref and it's just going to be an,,,
empty string that's our default and then,,,
down here in the input we can then set,,,
the V model attribute or directive to,,,
new,,,
task okay so now if I put something as,,,
the default in this new task and I save,,,
it's going to show in the index input so,,,
those two are bound,,,
together all right now let's create the,,,
ad task so I'll go right under the,,,
toggle status let's say const add,,,
task all right and actually forgot a,,,
submit,,,
button so under that what is going on,,,
under that input let's do,,,
button type is going to be,,,
submit and I'll just say,,,
submit all right so we have our add task,,,
and I'm just going to do just a little,,,
bit of validation we're just going to,,,
check to make sure that it's there so,,,
let's say if new,,,
task. value and we'll do trim if that is,,,
not equal to,,,
nothing then we're just going to add it,,,
to the the the list the array so we have,,,
access to task. Value right and then,,,
we're going to push onto that and we're,,,
going to pass the new,,,
task.,,,
value and then we'll clear it by saying,,,
new,,,
task. value and we can set that to,,,
nothing so it's nice that we can just,,,
set it equal to,,,
something so now I'm going to go up here,,,
and I'll say task 4 enter and there we,,,
go so I can just add,,,
tasks and obviously they're not going to,,,
stick if I reload because we don't have,,,
any persisting database or,,,
anything now the last thing I want to do,,,
in this this little project here is is,,,
delete a class I'm not delete a task so,,,
down here where we have our task we have,,,
our our list item and what I'm going to,,,
do is let's see I'm going to put,,,
this this Tex ask and to put this in a,,,
span yeah so we'll do,,,
that put that in a span and then I want,,,
to have a delete button so right under,,,
it let's say button and we're going to,,,
add uh for the content we'll just put an,,,
X and then we're going to have a a click,,,
event so at click and set that to delete,,,
task now we need to pass in in something,,,
so that we know which task we're dealing,,,
with and when we have a V4 we can,,,
actually get the index too so instead of,,,
just saying task in tasks we can open,,,
some parentheses and we can get the task,,,
but we can also get the index and then,,,
let's pass in index into the delete all,,,
right so now whoops I don't want to move,,,
that so now up at the top here let's go,,,
down under add,,,
task and let's say const,,,
delete,,,
task okay and that's going to take in,,,
index all right now to delete this is,,,
going to be very simple I'm just going,,,
to take the tasks do value and I'm going,,,
to use,,,
splice and I'm going to splice at the,,,
index and then one so that should just,,,
take take it out so if I go to task two,,,
I click that task two is gone,,,
okay so now we,,,
can dynamically add and remove tasks,,,
change the status now the last thing I,,,
want to show you before we move on to,,,
the The View jobs is life cycle methods,,,
so if you're familiar with react you,,,
might be famili familiar with these,,,
These are functions that are called at,,,
different points in the life cycle of a,,,
component so for example um this on,,,
before Mount is called before the,,,
mounting begins on mounted calls when,,,
the component is mounted and this I,,,
would say this is probably the most,,,
common one if you're going to make an,,,
HTTP request when your component loads,,,
this is probably what you're going to,,,
use you also have on before update on,,,
updated on before unmount on unmounted,,,
on activated on deactivated and on error,,,
captured okay so these are the the life,,,
cycle methods that you have to work with,,,
so let's just do something real quick,,,
I'm going to just fetch some to-dos from,,,
Jason placeholder which is just like a f,,,
fake rest API um same people that,,,
created the Jason server that we're,,,
going to use and I'm just going to add,,,
them to the task list here when the,,,
component mounts so let's go to the,,,
bottom here and we're going to say,,,
on,,,
mounted uh and actually we do have to we,,,
do have to bring this in so let's go up,,,
at the top and just bring,,,
in on mounted from View,,,
and it's a lower lowercase o all right,,,
so in on mounted it takes a function and,,,
I'm going to make this asynchronous,,,
because we're going to be using U the,,,
fetch API so we'll say async and use an,,,
arrow,,,
function and let's just put this in a TR,,,
catch so we'll say const response set,,,
that to a waight,,,
Fetch and the end point is going to be,,,
htps,,,
and Json,,,
placeholder do typy code,,,
do com and then slash todos so there's,,,
different resources we're going to get,,,
to-dos which are basically tasks and,,,
then let's say cons data set that to,,,
await the response.,,,
Json and then I'm going to take the,,,
tasks.,,,
value and set that to the data now I,,,
just want the title because these the,,,
data is going to be bunch of objects,,,
right they're going to be uh to-do,,,
objects so I'm going to use map so that,,,
I can just get an array of titles so I'm,,,
going to say for each task then I just,,,
want the task.,,,
tile all right and then in the error,,,
I'll just do uh console log of we'll,,,
just say eror error,,,
fetching tasks all right so let's save,,,
that and there we go so you can see it's,,,
fetching the data it's it's just turning,,,
it into an array of uh of titles and,,,
adding it to the task array so now we,,,
can see them we can also delete them we,,,
can add more so that should get added to,,,
the,,,
bottom as you can see right here all,,,
right so that's pretty much that that's,,,
pretty much the fundamentals of vue.js,,,
so now we'll move on and we'll create um,,,
a a more real Life Application so what,,,
I'm going to do is take everything that,,,
I have in app. viw and I'm going to put,,,
it in the app 2. viw so you guys do at,,,
least have this code close that up and,,,
then we'll completely get rid of,,,
everything just put a template in,,,
here I don't know why em it's not,,,
working and let's just do an H1 and say,,,
view,,,
jobs all right so let's let's let's get,,,
Tailwind set up and if we go to or if we,,,
just search for view Tailwind there's a,,,
documentation page that we can follow so,,,
it's going to,,,
be right here it's at the in the,,,
Tailwind CSS um,,,
documentation so we want to to run this,,,
so npm install Tailwind CSS and post CSS,,,
in the auto prefixer so we can just grab,,,
that and I'm just going to open up,,,
another uh another terminal,,,
here actually wait I,,,
don't okay so I'm going to paste that,,,
in all right once we do that we need to,,,
create a Tailwind config which is going,,,
to be this and if we add the- P that'll,,,
also create a post CSS config file so,,,
I'm going to paste that,,,
in all right now there's a few things I,,,
want to add to the Tailwind,,,
config so I'm going to uh close that up,,,
and and notice in the documentation here,,,
they still have Purge now well it's now,,,
content all right and what you want to,,,
put in here is what files do you want to,,,
watch for tailin classes so the first,,,
thing I'm going to put in here is going,,,
to be dot slash and then,,,
index.html which is the the entry point,,,
basically all right then I'm going to,,,
add the the folders and and file,,,
extensions that I want to watch so it's,,,
going to be do/ source so in the source,,,
folder and then slash and then double,,,
asterisk slash as asterisk Dot and then,,,
in curly braces I want to look at the,,,
following EXT extensions Vue JS,,,
TS jsx in case you're using jsx and,,,
TSX all right so that's what we want in,,,
content now in theme there's a couple,,,
things I want to add to extend one is,,,
going to be the font,,,
family um so I actually want to use the,,,
Poppins font so what we can do is add,,,
sanss and set that to an array and we're,,,
going to pass in here,,,
Poppins and Sans Das serif okay so,,,
that's that and then under font family,,,
I'm just going to have a class of grid I,,,
want to do grid temp split,,,
columns because on the actual job page I,,,
want to have uh split columns where one,,,
is 70 and one is 30 so we'll have a,,,
class let's do,,,
7030 and then we're going to set that to,,,
a value of,,,
70% and not quite 30 but,,,
28% okay so it's just adding some extra,,,
um classes for for Tailwind or an extra,,,
class and that's it so we can close that,,,
or we can save that um yeah I don't,,,
think there's anything else the variance,,,
extend we don't need but I guess I guess,,,
we could put it in,,,
there like that and yeah so we can close,,,
that up now we can continue on here and,,,
let's see it'll also create a post CSS,,,
yep that's already created we don't need,,,
to do anything to that that's the post,,,
CSS and,,,
let's see what else we already did this,,,
The Purge which is now content and then,,,
the last thing we have to do is just add,,,
these three lines to our CSS file so,,,
that's going to be in assets and then,,,
main.css I'm going to replace everything,,,
here add that and now if we look at our,,,
project let's see is this being,,,
included should be because,,,
you know what I might have to restart,,,
the,,,
server there we go all right so Tailwind,,,
classes should now work we can test that,,,
out by doing class let's set that to,,,
text- 2XL and there we go so Tailwind is,,,
now is now working now I like to have my,,,
projects at least look decent so in the,,,
final repository which is a link to in,,,
the description you're going to see a a,,,
repo that has the final code and it's,,,
going to have this underscore theme,,,
files and this is just the HTML for the,,,
project like if I open the index HTML,,,
you can see basically just the just the,,,
interface or just the the website it's,,,
not functional or anything and there's,,,
no data real data it's just the HTML all,,,
right so what I would suggest doing is,,,
bringing that into your pro you can,,,
bring it into your project or open it up,,,
in a separate editor so I'm just going,,,
to copy the folder into here so that I,,,
have access to those so for for when we,,,
need the HTML and then also if you look,,,
in Source there's going to be uh in,,,
assets there's an IMG folder so I want,,,
to bring that over to our assets,,,
folder like that and I think that I,,,
think all that's in there is the the,,,
logo let's,,,
see yeah it's just a logo and we can get,,,
rid of the base CSS and this logo SVG we,,,
can delete both of,,,
those okay so now we have the logo now,,,
the first thing I want to do and you,,,
know what I'm just going to open up the,,,
theme just so we can see what the page,,,
we're looking on looks like and what,,,
we're actually working on at that time,,,
which first I want to do the navbar here,,,
so the Navar is going to have the logo,,,
and then just some links and I want it,,,
to have active links like if I click on,,,
jobs I want the jobs uh to be,,,
highlighted in the navbar so we're going,,,
to create a component in the components,,,
folder here called navb bar. viw okay,,,
all your all your view components are,,,
going to have a do view extension and,,,
when we add our script tag since we're,,,
using the composition API and we're,,,
using the shorthand then you always want,,,
to make sure you add setup here if you,,,
don't add setup then you're going to,,,
have to export default you know if,,,
you're using either the options API or,,,
if you're using the the explicit setup,,,
function,,,
so here I'm going to import and we want,,,
to bring the logo in so that's going to,,,
be from and we can use at slash so this,,,
is a shorthand or an alias for the,,,
source folder so from there we want to,,,
go into compon uh not components sorry,,,
assets slash and then IMG and then,,,
logo.png I believe it's a PMG yeah all,,,
right so we're going to bring that in,,,
and then let's create our template,,,
and forgot M it's m it's not working for,,,
template and to get the HTML I'm going,,,
to go into,,,
index.html or any of them really and,,,
grab the nav,,,
tag so that whole thing because there's,,,
no sense in US typing out all,,,
that and then paste that in the template,,,
here and then we just want to replace,,,
the,,,
image or the image source cuz right now,,,
it's just pointing to images SL logo but,,,
what what we want to do is bind the logo,,,
variable that we just created above to,,,
this source so we can do,,,
v-bind see so now you already know what,,,
this stuff is and I don't have to,,,
explain it because we already went over,,,
it and we want to bind it to that logo,,,
variable so in here we can just put logo,,,
and then we can even use the shorthand,,,
and just do colon Source all right so,,,
let's go ahead and save that and let's,,,
go to our version now obviously it's not,,,
going to show because we need to bring,,,
this Navar into the app. view so up at,,,
the top here let's say script let's add,,,
in,,,
setup and then let's import the,,,
navbar okay that's going to be from our,,,
Alias SL and then components slash and,,,
then navbar and then we can replace this,,,
H1 here,,,
with the navbar embed and there we go,,,
okay so I mean this right these right,,,
now are going to like HTML obviously,,,
those don't go to the right place and we,,,
don't even have uh we don't even have,,,
the view router set up so don't worry,,,
about the the actual links for now we'll,,,
get to that later and we'll get to the,,,
you know highlighting each each of these,,,
uh links,,,
later so the next thing I'll do is the,,,
hero component which is going to be this,,,
right here it just has a title and a,,,
subtitle and this is where we're going,,,
to going to get into props right CU,,,
components can have data passed in and,,,
those are called props so what we'll do,,,
is in components let's create a new file,,,
called hero.,,,
viw and we'll create,,,
script,,,
setup and let's add our,,,
template okay and then for the template,,,
I'm just going to go to the index HTML,,,
and we're going to get the next section,,,
so I I created this template so it's,,,
just easy to go in and grab each,,,
section I know some people really don't,,,
like that to have to copy and paste but,,,
we don't also don't want to type out a,,,
bunch of classes that's not what this is,,,
about so let's paste that in the,,,
template and we'll just save it for now,,,
I'll do the props after let's just bring,,,
it into our app so we'll just copy this,,,
down and let's take navbar here and here,,,
and replace that with,,,
hero and then let's see under that that,,,
we'll say,,,
hero and there we go now like I said,,,
we're going to get into props so I want,,,
to be able to pass in into hero I want,,,
to be able to do this title equals and,,,
then set it to we'll just say test title,,,
for now okay so I want to be able to,,,
pass this in and have that show here as,,,
the the,,,
H1 so to have props in a component we,,,
have to go into the,,,
script and we have to first off,,,
import Define props okay so we're going,,,
to import that from view then we want to,,,
call Define props and then we can pass,,,
in here an,,,
object of the props that we want and,,,
there's a couple ways to do this we can,,,
say title because that's what I want to,,,
call this prop and then we can just set,,,
that to string like that or you can set,,,
it to an object and then then have type,,,
and then put,,,
string okay now the reason I want to do,,,
this is because I also want to have a,,,
default prop so if I put here,,,
default and I'm going to set that to,,,
become a view Dev as the default so,,,
basically if I don't pass anything in if,,,
I don't pass a title in then this is,,,
what's going to show now we can just,,,
simply go down to the H1 and replace,,,
this,,,
with our double curly braces and title,,,
and if I save now we get test,,,
title okay now I want to be able to pass,,,
in the subtitle as well so let's say,,,
subtitle and set that to,,,
test subtitle and then what we would do,,,
is just add that so I guess we can just,,,
copy that down and do,,,
subtitle it's going to be a string and,,,
then for the default let's set set that,,,
to this text right,,,
here and then in the paragraph get rid,,,
of that and,,,
have subtitle and there we go now if I,,,
don't pass either of these in which I'm,,,
not because I just want to use the,,,
default then there we go we have the,,,
default values so that's that's,,,
essentially how you use props you just,,,
bring in defined props you define them,,,
with their type and a default if you,,,
want one and then just use them so,,,
pretty,,,
simple so the next thing I want to do is,,,
these two cards here which I'm going to,,,
put them both in a a component called,,,
home cards and then I'm going to show,,,
you how we can use a container component,,,
which is a component that wraps around,,,
content so let's start off by creating,,,
in,,,
components home,,,
cards.,,,
viw and we'll add,,,
script add our setup,,,
and then our,,,
template and I'm notice I'm not doing,,,
any style because we're using Tailwind,,,
classes so there's really no we don't,,,
need any custom styling so to get the,,,
home cards HTML I'm going to go to theme,,,
files and then the index and this,,,
developers and employers that section is,,,
what I want to,,,
copy so I'm going to grab,,,
that paste that into the template and,,,
for now just save it bring it into um,,,
into our app. viw so we'll copy that,,,
down and let's replace that and that,,,
with home,,,
cards and then we're going to put that,,,
down,,,
here home cards save it let's look at,,,
our version and there we go now I want,,,
to like I said have a a wrapper,,,
component called,,,
card and put the data or not the data,,,
but the content of each one of these,,,
inside of it so basically this right,,,
here would be instead of having a div,,,
here we could have,,,
card like that and then anything that's,,,
in here would be in that card and we can,,,
have certain background color props and,,,
stuff like that in the card so let's,,,
create a new,,,
component called card. viw,,,
and we'll have,,,
script,,,
setup and,,,
template and let's see the the way that,,,
I want to do this is where we have our,,,
home cards we have this div with the,,,
class of BG gray P6 basically I want to,,,
have this div so I'm going to just copy,,,
that and paste that in here with an,,,
ending,,,
div and ultimately I want to be able to,,,
pass the background color in so we can,,,
have a dynamic background color for the,,,
cards but I'll just leave the gray for,,,
now and the way that we output the,,,
content that we wrap is with a slot like,,,
this and if you've use react it's,,,
similar to when you have a children prop,,,
right and you output,,,
that so now yeah we should we can save,,,
that and now in home cards I'm going to,,,
bring,,,
in I'm going to bring in the card,,,
component I don't know why it's not,,,
coming up so,,,
slash component SLC card. viw and then,,,
I'm going to replace the div right here,,,
where we have the P6 rounded Shadow I'm,,,
going to replace that,,,
div with the card component and we're,,,
going to wrap that content okay so,,,
that's the first card then we have this,,,
one which has the BG green so we're,,,
going to replace that div with card as,,,
well so if I save that now it's working,,,
but notice the BG green is now gone,,,
right because the card component has BG,,,
gray so what I'd like to do is have a,,,
prop for that class for the background,,,
so let's go up into the script of card,,,
and let's,,,
import um we're going to import Define,,,
props and then let's define,,,
props and I'm going to call this BG for,,,
background and let's say type is going,,,
to be string and then let's add a,,,
default and the default will be BG Das,,,
gray- 100 and now we can come down here,,,
and we can use this BG prop in place of,,,
this but we need this to be dynamic,,,
right because we're going to be adding a,,,
variable to it so what we can do is bind,,,
to this by putting a colon here or you,,,
could do VB colon and then instead of,,,
double quotes um actually no we still,,,
want double quotes but we want to add in,,,
back ticks after it okay because when,,,
you when you put a colon here whatever,,,
you're putting within the double quotes,,,
is Javascript okay it's actual code so,,,
right here so we want the back ticks and,,,
then we want to replace that with BG,,,
like that so now if I save it's they're,,,
still both gray but I should now be able,,,
to go to the second card and pass in BG,,,
you'll see it comes up here and let's,,,
say BG Das,,,
green-00 save it and now that's green if,,,
I passed in red 100 so now I have this,,,
Dynamic component where I can just pass,,,
in the color that I want this card and I,,,
can reuse that all around the,,,
project all right so that takes care of,,,
that now the next part is going to be,,,
here the browse jobs so what we're going,,,
to do is create let's just close some of,,,
this stuff up just leave the app open,,,
and we're going to create a new,,,
component called job listings,,,
plural.,,,
viw and let's add a script tag with our,,,
setup and then we'll have our template,,,
and just for now I'm just going to say,,,
jobs listings or job listings,,,
okay and then we're going to bring that,,,
into our app.,,,
view so import jobs our job listings and,,,
let's output that right here so,,,
job listings and then if we look at our,,,
project you should just see job listings,,,
now as far as the data goes we're going,,,
to ultimately we're going to use Json,,,
server which is like a fake backend rest,,,
API but for now we're just going to use,,,
a Json file so if you go to the code and,,,
repository and let me just,,,
uh let me just grab that real,,,
quick so code,,,
Dev okay so this is the code from the,,,
from the repo and you'll see that in the,,,
source folder there's a jobs. Json and,,,
jobs 2. Json so right now we're going to,,,
be working with the jobs 2. Json there's,,,
just a slight difference here but we do,,,
have to change the structure later so,,,
that's why there's two versions so let's,,,
bring that into the source folder okay,,,
make sure you bring it into Source not,,,
the root and then we're just going to,,,
rename that for now to just jobs.,,,
Json and what we have is an array of of,,,
objects that have an ID a title A type,,,
description location salary and then a,,,
company object with a name description,,,
email and phone okay so what I'm going,,,
to do is now in that job listings,,,
component I'm going to import that data,,,
so let's say import and I'm going to,,,
call this job,,,
data and that's going to be from and,,,
then up one level uh actually we can,,,
just do at,,,
slash and,,,
um should,,,
be yeah that should work right do we put,,,
it I put it in the right place yeah,,,
Source all right so that should work now,,,
um in order to make that data reactive,,,
which we need to do because we're going,,,
to be adding and deleting and stuff so,,,
we also want to uh we want to import ref,,,
from from,,,
view okay and then what we can do is,,,
just create a variable called jobs and,,,
set that to ref and then pass in job,,,
data making it reactive so again it's if,,,
you're coming from the react framework,,,
it's similar to Ed State and just to see,,,
if that's actually getting them let's do,,,
a console log and it's going to be job,,,
do value cuz remember since we're using,,,
ref we use value and if I open up the,,,
console here you can see that it is,,,
fetching that data so array and there we,,,
go all right so now that we've done that,,,
I'm going to use V4 to to Loop over them,,,
and then output each one like this all,,,
right so let's go into the template,,,
here and,,,
uh yeah I guess for for now I'm just,,,
going to just have a,,,
div and let's say,,,
v-4 and we're going to set that to let's,,,
say job in,,,
jobs and we need to give it a key so,,,
colon key and we'll set that to let's,,,
say,,,
job. and then in here all I'm going to,,,
output for now just to make sure this is,,,
working is the job do,,,
title and there we go so we know that,,,
we're fetching the data I mean fetching,,,
if you even want to call it that we're,,,
just getting it from a file now we want,,,
to have like the title and stuff in here,,,
and it's going to be kind of confusing,,,
if I copy it so let's just type this,,,
part out so I'm just going to put,,,
section and the section we're going to,,,
give this a couple classes let's say BG,,,
- blue uh,,,
-50 and then padding on the xais 4,,,
padding,,,
y-10 and then in the section we're going,,,
to have a div with the class of,,,
container Das,,,
XL and also on that we're going to say,,,
on large screens we want to use the,,,
container class and then also,,,
m- uh margin Das Auto and in that div,,,
we're going to have an H2 and that's,,,
going to have a class of text-,,,
3XL and then let's do font Das,,,
bold and,,,
text- green or text green,,,
500 margin bottom six and text Dash,,,
Center all right and that's ",,,
going to,,,
just say browse,,,
jobs okay,,,
now uh let's see we want to go under the,,,
H2 and that's where we're going to have,,,
our grid so let's say grid and then grid,,,
Dash calls D1 and GAP D6 so that'll be a,,,
one column but on medium screens and up,,,
so MD colon and this is just Tailwind if,,,
you don't understand these classes,,,
that's fine don't worry about it that's,,,
not really the point of this course so,,,
MD grid calls 3 all right so in here is,,,
where we want to have this this div that,,,
iterates over the job so I'm going to,,,
cut that from here and put that inside,,,
the grid like that all right so now it's,,,
going to look like this and if I make,,,
this bigger you'll see that it goes into,,,
three columns but obviously that's not,,,
the data we want to display just the,,,
title we want the whole the whole card,,,
this whole box all right so what we can,,,
do is go into the template the index,,,
HTML and down in the browse jobs we,,,
already have this stuff right so what we,,,
can do is just grab one of the these,,,
listings and they're they're labeled,,,
they're commented so I'm going to grab,,,
this first job,,,
listing which ends right here so I'm,,,
going to copy that and then we're going,,,
to create another component for just a,,,
single job listing so job listing,,,
singular.,,,
View and we'll add,,,
script,,,
setup and then our,,,
template and then I'm going to paste,,,
that into,,,
the,,,
template now I'm going to want to show,,,
this job listing component for every,,,
listing here right instead of this div,,,
so let's bring in the single job listing,,,
component so import job listing and then,,,
I'm going to replace this div right here,,,
with job listing and it's not going to,,,
be a a wrapping component so we can get,,,
rid of oops I hate when ites does that,,,
just get rid of this and then add a,,,
slash at the end here but we also need,,,
to pass in the job right We're looping,,,
through right here so we're getting the,,,
job so we need to pass that in as a prop,,,
so we're going to say colon job so we're,,,
binding it to,,,
job now we should be able to access this,,,
as a prop okay um and notice that now,,,
it's showing all the boxes but it has,,,
all the hardcoded data so High coded,,,
content so it's all the same so let's go,,,
into the job listing and let's prepare,,,
to to get that job prop so in order to,,,
do that we need to import,,,
Define props and then we're going to,,,
Define props oops find props and we're,,,
going to pass,,,
in an object with job which is going to,,,
be an object okay so now we should have,,,
access to job so I can replace fulltime,,,
here with double curly braces and then,,,
job.,,,
type okay now if I save that I think one,,,
of these yeah this one right here says,,,
part-time so we know that that's that's,,,
the data from the file let's replace,,,
this with job. tile now we have all,,,
different titles and then we have the,,,
description so replace that with job dot,,,
description the salary which how is this,,,
let me just see how this is,,,
formatted so the salary is yeah like 70,,,
80k so it's doesn't have the slash year,,,
so let's just replace,,,
this with,,,
job.,,,
salary okay what else we get the,,,
location we also have the icon which,,,
doesn't show up because we're not using,,,
font awesome I'm going to use a another,,,
package called view awesome for that but,,,
we we'll get to that after let's change,,,
this this the hardcoded to um to job,,,
do,,,
location okay and then finally the the,,,
link here it's going to job HTML which,,,
obviously that's not correct so what,,,
we're going to do is bind so we're going,,,
to use the colon here and,,,
then replace this because we do have to,,,
have the ID in here so it's going to be,,,
dynamic so we'll replace that with u,,,
we'll just have quotes and we'll say,,,
slash job Flash and then let's,,,
concatenate the job.,,,
ID and that should do it so now if I,,,
were to click on the read more and we,,,
look at the link it's job,,,
sl3 right if I go to this one job SL1 so,,,
that they're bringing us to the right,,,
place obviously we don't have that you,,,
know that route we don't even have the,,,
router set up yet but the link is,,,
correct and now the content is,,,
correct now the next thing I'd like to,,,
do I'm just going to make this bigger so,,,
we can see it better I want this this,,,
whole job listings I want to take in a,,,
couple props one is going to be limit so,,,
that we can limit it because I don't,,,
want all of them to show which right now,,,
if I had 30 jobs here they'd all show on,,,
the homepage I want to limit it to three,,,
so we'll pass limit in as a prop and,,,
then also if we look at the template,,,
that view all jobs I want to include,,,
that in this component as well but have,,,
an option to not show it cuz I do want,,,
to show it here but when we use that,,,
component on the jobs page I don't want,,,
to show it so we'll have a prop of limit,,,
and a prop of show button so let's do,,,
the limit first so we'll go into job,,,
listing so I'm going to just close that,,,
up this uh yeah we can get rid of that,,,
for now so in job listings I'm going to,,,
also bring in Define,,,
props and then let's define,,,
props and we're going to take in a limit,,,
which is going to be a number,,,
all right so there's a couple ways we,,,
can use this limit what I'm going to do,,,
is come down to the the V4 and just add,,,
on to this this uh where it says in jobs,,,
I'm going to use do slice and then pass,,,
in from zero to the,,,
limit uh or then just show all of them,,,
so job jobs.,,,
length Okay so now,,,
if we were to pass in let's go to app.,,,
viw where we're embedding job listings,,,
and let's say limit equals 3 actually,,,
since it's a number we need to add the,,,
colon in front of it so if I do that now,,,
it's only showing three if I put,,,
two then it shows two okay so that was,,,
pretty easy now for the button we don't,,,
have that in our job listings component,,,
yet so let's go to the theme files in,,,
index HTML and under the browse job,,,
section you have this,,,
section with the U with the button so,,,
I'm just going to copy,,,
that and then we're going to put that,,,
directly under this,,,
section okay but I only want this to,,,
show if the show button is true so what,,,
we can do is pass in show button which,,,
is going to be a,,,
Boolean and actually I want to have a,,,
default for that so let's set that to an,,,
object with a type of Boolean and then a,,,
default of false so it won't show by,,,
default and then all we have to do is go,,,
down to the section where the button is,,,
and add a v if and set that to show,,,
button all right so save that we don't,,,
see the button but if I go to app. viw,,,
and I add show,,,
button actually we're going to do colon,,,
show,,,
button and set that equal to,,,
true now it,,,
shows all right and that button right,,,
now goes to jobs. HTML so we also want,,,
to change that it's just going to go to,,,
uh Slash,,,
jobs so change,,,
that there we,,,
go all right cool um and that's just,,,
cache let me reload it there we go,,,
so the next thing I want to do is talk,,,
about the computed function and this is,,,
a function that returns a value based on,,,
other values and it will run when that,,,
particular value changes and if you're,,,
familiar with react it's kind of like,,,
how the dependency array in the use,,,
effect hook works when that dependency,,,
changes that effect runs or that,,,
function runs so let's use it to show a,,,
truncated version of the description so,,,
basically we'll have a short or,,,
truncated version with a button to show,,,
more and then it will show the full uh,,,
the full description so that's going to,,,
be within the job listing component the,,,
singular so let's close job listings and,,,
go to job listing which is this,,,
one okay and in order to use computed,,,
we're going to bring it in so let's,,,
bring in in in addition to Define props,,,
we're going to bring in ref and we're,,,
going to bring in computed,,,
because we need a a a piece of data for,,,
the the true or false if we want to show,,,
the full description or not all right in,,,
fact let's go right under Define props,,,
and let's say const show,,,
full description and we're going to wrap,,,
this in ref because this is going to be,,,
reactive and set that to a default value,,,
of,,,
false now I want to access the job up,,,
here so what we can do is we can this,,,
Define props we can actually set that to,,,
a variable so set it to props and then,,,
props do job should give us the job and,,,
we can say like props do job.,,,
description to get the description so,,,
now we're going to use computed here,,,
let's say,,,
truncated description ultimately that's,,,
what this is going to give us and the,,,
way we use computed is we just set it,,,
like this and then pass in a,,,
function all right and then let's say,,,
let,,,
description and I'm going to set that to,,,
props do,,,
job. description okay so that's going to,,,
come from the prop that's passed in the,,,
job and then let's have an if statement,,,
under that and we want to check to,,,
see if it's let's say if it's false so,,,
if not,,,
show um wait do we yeah if not show full,,,
description and remember remember since,,,
we're using ref it's going to be,,,
value and if that's not then we're going,,,
to say,,,
description and set that to description,,,
and then do substring so this is how,,,
we're going to truncate it we're going,,,
to cut it off a little bit let's do 0 to,,,
90 and let's add an ellipsis after it so,,,
we'll just concatenate onto it three,,,
dots so it'll get the first whatever 90,,,
characters and then after the if we'll,,,
just,,,
return,,,
description okay so,,,
now,,,
anytime the uh full show fold,,,
description changes the truncated,,,
description is going to run okay now we,,,
need a well we we'll do the toggle after,,,
because we need a function to actually,,,
change it this is just checking to see,,,
what the if the value is false if it is,,,
um so if we don't want to show the full,,,
description then it's going to narrow it,,,
down using substring so let's go down to,,,
where we have the description and,,,
instead of job. description we're just,,,
going to say,,,
description uh let's see why is that not,,,
showing a that's because we want to show,,,
we don't want to show description is a,,,
variable in this computed we want this,,,
truncated,,,
description there we go so you can see,,,
it's not showing the whole thing and,,,
it's adding the ellipses onto it,,,
so now let's just have a function to,,,
toggle that so we'll say cons,,,
toggle,,,
description or maybe we should call it,,,
toggle full,,,
description and we'll set that to an,,,
arrow,,,
function and all we're going to do is,,,
take the show full description. valal,,,
and we're just going to set it equal to,,,
not show description full full show,,,
description,,,
value so if it's true it'll get set to,,,
false if it's false it'll get set to,,,
true now we just need a way to to,,,
actually trigger that so let's put this,,,
right below the truncated description,,,
here so basically we have,,,
um you know what let's put this in a,,,
div so we'll go like this and move that,,,
into the div and then under the div,,,
let's have a,,,
button and I'm going to give this button,,,
a couple classes we're going to do text-,,,
green- 500 and let's say on Hover we,,,
want to do text-,,,
green- 600 and then margin bottom five,,,
okay,,,
so uh in the button I want to show,,,
either less or more so what we'll do is,,,
we can say I don't even think we've used,,,
a Turner yet we can use Turner um um uh,,,
operators inside here so we can say like,,,
show full description if that's true,,,
then show the text of less if that's not,,,
true then show the text of more okay so,,,
if I save that we see more right because,,,
it's not showing the full description so,,,
let's add an event to this button now so,,,
we'll say at click and let's set that to,,,
that toggle full description,,,
what what did I do,,,
here okay so I'll save that and now,,,
let's click on the more and now I'm I,,,
can toggle this particular description I,,,
can toggle this,,,
one all right cool so now what we want,,,
to do is the icons where we have these,,,
locations I want to have the little map,,,
icon right now if we look where that's,,,
supposed to be which is where is the,,,
location,,,
right here we have the it tag with the,,,
the font awesome icons which aren't,,,
showing up because we have't included,,,
font awesome and if you want you could,,,
just as well include the font awesome,,,
CDN or you could install it but I'm,,,
going to use something different called,,,
Prime icons so let's go to or just,,,
search for view actually it's just Prime,,,
icons and you can use this for react and,,,
other uh Frameworks as well so it's this,,,
right here so you can see Prime NG for,,,
angular Prime react Prime faces we want,,,
Prime,,,
View and then we can install it like,,,
this and then all we have to do is,,,
import the CSS into our main J main JS,,,
file so let's install it I'm going to go,,,
here and npm install Prime,,,
icons all right and then um let's go to,,,
the,,,
main.js and right under that CSS I'm,,,
going to paste that in and that's it now,,,
we can use these classes to to have the,,,
icons show up so where we have the fa,,,
solid this right here the it tag I'm,,,
going to just get rid of all those,,,
classes and I'm going to replace it with,,,
pi so Prime icons and then I'm going to,,,
use pi-,,,
map-marker that's the icon I want and,,,
then I'm just going to add in text-,,,
Orange d500 which is just um or 700,,,
which is a Tailwind class so let's save,,,
that and see if that shows up and there,,,
it is okay so you can use these icon,,,
classes wherever you,,,
want now I think that we've come to the,,,
point where we want to start to use the,,,
router our homepage is is pretty much,,,
done right there's not there's not,,,
really anything else we need to do here,,,
we have the data obviously we want to,,,
fetch it from Jason server uh in a,,,
little bit but I want to introduce the,,,
router first and get that set up now now,,,
remember at the beginning when we use,,,
the create view CLI we could have said,,,
yes and it would create the router file,,,
for us it would create our our home,,,
route and all that and that's probably,,,
what you're going to do from now on,,,
after this but I want to show you how to,,,
set it up from scratch so of course we,,,
need to install it because it's not it's,,,
not you know bundled within the the,,,
framework it's like using the react,,,
router it is the official router to use,,,
so let's go ahead and what am I doing,,,
import,,,
um npm install and then it's going to be,,,
view-,,,
router okay now we need to set up the,,,
router in a file so in Let's see we want,,,
to go into the source folder and create,,,
a folder in there called,,,
router just close this stuff up so in,,,
router we're going to have a file called,,,
index.js and this is going to be our,,,
main router where if we want to add you,,,
know an about page and set that to an,,,
about view we would do that here if we,,,
want to set our home page to a home view,,,
we we'll do that here so let's start off,,,
by importing and this code I'm writing,,,
right now this would be included if you,,,
chose yes in the beginning so we want to,,,
bring in,,,
create router and we want to bring in,,,
create web,,,
history I think that's right yeah create,,,
router create web history and we're,,,
going to bring that in from,,,
view-,,,
router let's uh close that up okay and,,,
then we're going to need a view to bring,,,
in so why don't we create in the source,,,
folder a a folder called views now a,,,
view is uh is basically a page right and,,,
your views can have multiple components,,,
so in this case I want our home View to,,,
basically be what we have here in our,,,
app folder or in our app file rather all,,,
right so if we go to app. viw the only,,,
thing I want to leave here is the Navar,,,
because I want that on every page the,,,
hero home cards and job listings should,,,
only be on the home the home view so,,,
what I'll do is cut these,,,
Imports and then we'll put that in let's,,,
go into views and create a new file,,,
called home View and it still is a,,,
component so it'll be have a view,,,
and then let's add script and,,,
setup and in that we'll paste that in,,,
and then we'll have our,,,
template and I'm going to grab from the,,,
app. viw everything except the,,,
nav okay so we'll do that if I save now,,,
we're only going to see the nav bar but,,,
let's go to home view paste that into,,,
the,,,
template all right and then let's see,,,
we're going to go back to um The View,,,
file I'm sorry the router file which is,,,
router and then,,,
index.js and we're going to want to,,,
create that home view so first off let's,,,
import it so import home,,,
view from at views home View and then,,,
we're going to create a variable here,,,
called,,,
router and this is going to use that,,,
create,,,
router which takes in an object and and,,,
we need to add this,,,
history and this is where we use create,,,
web history so this is so we can go you,,,
know back we can use the back button and,,,
stuff just like if it were a regular,,,
server rendered app and then we're going,,,
to pass in here import. meta do env.,,,
basore URL so that will provide the base,,,
URL then after that we want to provide,,,
our routes which is going to be an array,,,
of objects and each one is going to have,,,
a path so let's do slash for the home,,,
and you can give it a name so I'm going,,,
to give it a name of home and then the,,,
component that you want to load or the,,,
view in our case so home,,,
view all right and then at the bottom,,,
don't forget you have to export this as,,,
default,,,
router all right so it's not going to,,,
work just yet because we're not doing,,,
anything with this there's actually two,,,
steps we have to take for this to,,,
actually work first in our main.js in,,,
the entry point we need to use the,,,
router the file that we just created so,,,
let's import that so we can say import,,,
router from and then we can just do do,,,
slash router we don't have to do slash,,,
index.js because since we named it,,,
index.js it'll automatically load that,,,
all right and then we can just come down,,,
here and instead of just saying create,,,
app I'm actually going to set a variable,,,
of app set that equal to create app and,,,
then down at the bottom we can say app.,,,
Mount so this is doing the same exact,,,
thing but now I can also say,,,
app.use and then pass in,,,
router all right so that'll use the,,,
router so if we look at this it says,,,
fail to resolve import components job,,,
listing,,,
view oh I didn't use the Alias there all,,,
right there we go,,,
okay so the last thing we have to do in,,,
order for the stuff to show the home,,,
view is in the app.,,,
view we need to bring in something,,,
called router view which is like the,,,
outlet if you've ever used react router,,,
then you you put an outlet in your main,,,
layout and that's what we're going to do,,,
here wherever we put this is where the,,,
the the view will show so I'm going to,,,
go right under the Navar and say router,,,
view save it and now you can see that we,,,
have our entire home view,,,
showing right because we're at slash if,,,
I go to slash anything else it doesn't,,,
show and we can create a not found page,,,
as well so yeah that's how we set the,,,
router up just to kind of reiterate we,,,
create the router folder the index.js we,,,
we add our routes create our view bring,,,
it in set it as the component and then,,,
in the main,,,
JS we use use the router we bring we,,,
import it and then we use it and then in,,,
the app. viw the main component we use,,,
our router view which is like the,,,
outlet all right so now we have the,,,
router set up and again if you chose yes,,,
in the beginning all this would have,,,
been created for you and in your app.,,,
view I mean in your main JS this would,,,
be here too the router View and also,,,
basically everything we just did would,,,
already be included now let's do our job,,,
drop this right here which goes to slash,,,
well right now it's going to U jobs HTML,,,
we actually want that to go to slash,,,
jobs so let's go to the,,,
navbar and let's see we're going to,,,
change this so This Home is going to go,,,
to slash now we're not ultimately we're,,,
not going to use a tags there's,,,
something called router link but for now,,,
we can just we'll stick to a tags just,,,
to create this route and go to it so,,,
let's say slash jobs and then this one,,,
is going to go to slash jobs,,,
slad okay so if I go to slash jobs,,,
obviously nothing shows here so let's,,,
create a jobs view so under views new,,,
file jobs view. viw,,,
Vie and we're going to have our,,,
template and then all I'm going to do,,,
here is is use the job listings,,,
component that we already created so,,,
let's say script oops script,,,
setup and we're going to import the job,,,
listings plural and then we're just,,,
going to embed that here job listings,,,
and we're not going to pass in a limit,,,
or the show button,,,
true all right so if we do that and then,,,
go to our router files so router index,,,
bring in that view so you can see kind,,,
of the process of adding new views,,,
so jobs,,,
View and then let's we can just copy,,,
that down and let's say slash jobs,,,
change the name to jobs change the,,,
component to jobs view save it and there,,,
we,,,
go okay so we're at jobs and this,,,
highlighting is is not working yet we'll,,,
we'll get to that but I can go home and,,,
I can go to jobs all right now before we,,,
do the highlighting the active link,,,
let's change the a tags to use the the,,,
router link so we'll start in the nav,,,
bar so up at the top here we're going to,,,
import router link from view router and,,,
then anywhere where we have an a tag,,,
including the logo right here I'm going,,,
to change that to router link okay make,,,
sure that the ending tag changes as well,,,
and instead of an hre it's going to be a,,,
two okay just like with u with react,,,
rotor and then let's change this to just,,,
slash it's going to go to the homepage,,,
so that's that then let's go to these,,,
three a tags change that to router,,,
link uh again make sure that the ending,,,
tags some sometimes it doesn't register,,,
so make sure we do oops,,,
is that,,,
right that's,,,
right I don't know why it's putting that,,,
on the next,,,
line but yeah that should work so let's,,,
go to this one oh actually you know what,,,
we want to change this let's change all,,,
these so commander control D again and,,,
we'll change those to,,,
two Okay so this one here router link,,,
make sure we add the ending tag,,,
and then this a,,,
tag router,,,
link add the ending,,,
tag all right so let's save that and I'm,,,
going to click on home all right so now,,,
that works a lot faster because it's not,,,
actually refreshing the page right it's,,,
a single page app so it's the JavaScript,,,
is doing all the work now there's some,,,
other places where we have links right,,,
here here these three and,,,
so let's go into our home,,,
cards we can close some of this stuff up,,,
for,,,
now let's go into uh components and,,,
then home cards and again we want to,,,
bring,,,
in router link and then we want,,,
to exchange the a tags for router,,,
link and we're going to change the HRA,,,
to two and this is going to go to uh,,,
Slash,,,
jobs and then this one here let's see,,,
this going to be router,,,
link and we're going to change that to,,,
two and change,,,
this to slash job,,,
slad okay so that takes care of that you,,,
can test those,,,
out that goes there add job that's not,,,
we haven't created that yet but it goes,,,
to the right place and and then we have,,,
the the job listing so we can close that,,,
up let's go to job,,,
listing and let's,,,
import router link,,,
and where we have the a tag change that,,,
to router link and change this href to,,,
two click on that and it goes to job job,,,
one this one goes to job two good and,,,
then the button at the bottom that's,,,
going to be the job,,,
listings component so let's bring,,,
in router link,,,
and down at the bottom change,,,
this change that to two and make sure,,,
that the ending tag gets put on,,,
there we go okay so now all the links,,,
are working and they're all using router,,,
link so now let's do the active links if,,,
I'm on the jobs page I want that to be,,,
highlighted not home so if we open the,,,
navbar and I'm just going to close that,,,
up and then we want to basically just,,,
get the path here and we can get that by,,,
using the use route Hook from view,,,
router so let's say use route bring that,,,
in and then we're going to have a a,,,
function,,,
called,,,
is is active link and just set that to,,,
an arrow function and it's going to take,,,
in a route path which we're going to,,,
pass in and we want to check to see if,,,
that route path matches the actual route,,,
path now we do have to set a variable of,,,
route to use,,,
route and then we can access the actual,,,
route path with this so what we can do,,,
is return if the route path is equal to,,,
the route path that's passed,,,
in so if that's true it'll this will,,,
return true obviously and we can add a,,,
certain class this right here which is,,,
the BG if we go down to the the,,,
navigation this BG green 900 is what's,,,
giving it that if I get rid of that,,,
you'll see that that goes away so we,,,
need to make this Dynamic now the way we,,,
can do this is just add a colon in front,,,
of class and then we can put we can make,,,
this Dynamic and we can actually set an,,,
array here with class names so for,,,
instance if I save this now with no,,,
class names it looks like this but I can,,,
add in here a string of text white and,,,
that will add the class right so,,,
basically I want to read these classes,,,
here the text White and the rounded and,,,
the padding so text white and then let's,,,
do uh PX what is it PX -3 I believe was,,,
that,,,
it yeah PX3 and then py2 so I'm just,,,
adding in Array items here for the,,,
classes as array items and then,,,
rounded uh rounded,,,
DMD right so now it looks like that and,,,
what I can do is let's go I guess we'll,,,
do it at the beginning here we'll say is,,,
active link and we want to check to see,,,
if it's slash because this is the home,,,
link,,,
and if it is so we'll use a Turner here,,,
if it is then we want to show a specific,,,
class if else then we'll show a specific,,,
class and then we'll put a comma here,,,
all right so whatever I put in here will,,,
show if it is the active link and I want,,,
to do BG,,,
green-,,,
900 and then else I don't want the BG,,,
green but I do want to add,,,
hover so I want um the hover to be BG -,,,
gray-,,,
900 I think that's right yeah VG gray,,,
900 and let's also do,,,
hover B uh not BG text-,,,
white all right so I have this on the,,,
home link so if I go home now you can,,,
see that that has that background if I,,,
go to jobs it nothing has it because I,,,
haven't added this to the jobs uh jobs,,,
link but let's do that so I'm going to,,,
just grab this whole router,,,
link and then replace this except I want,,,
to change the text to back to jobs and,,,
when I'm checking for the isactive link,,,
I want to check for slash jobs so I'll,,,
save that and now jobs is is highlighted,,,
and if I go if I click if I hover this,,,
we get that that,,,
black black background all right now we,,,
want to do the same to,,,
wait why can't I click oh the link the,,,
actual,,,
link uh let's see so we have yeah right,,,
here so this should be slash,,,
jobs all right good so now we'll do the,,,
same to the ad job so let's again just,,,
copy one of these router links and,,,
replace this router link but we want to,,,
make sure we change the the URL to jobs,,,
ad and then the is active is going to be,,,
jobs,,,
ad and the text is going to be add,,,
job now if I click on that even though,,,
it doesn't work we don't see anything,,,
down here it is the active link so now,,,
we have that functionality so next why,,,
don't we have a not found page since we,,,
don't have a route for a job slad it,,,
should say like not found right so what,,,
we can do is create a new view so in,,,
views I'll create let's say not found,,,
view. viw,,,
Vue and basically the only thing we need,,,
to bring in here is the router link so,,,
we do need our script,,,
tags set up and then let's,,,
import uh router,,,
link and then we'll have our,,,
template and in the template I'm just,,,
going to grab from the uh the theme,,,
files there's a not found HTML so I'm,,,
going to go down to the main section,,,
which isn't shouldn't be much right just,,,
this section right,,,
here I'm going to copy that and then add,,,
that in the,,,
template and then just change a couple,,,
things up so one the link we need to,,,
change that to router link and make sure,,,
you add the ending tag so router link,,,
and then the actual,,,
link actually we're going to change this,,,
to two so two and then that's going to,,,
go to the home view so that that'll be,,,
slash all right now we have the font,,,
awesome icon here so I'm going to get,,,
rid of that and I'm going to use the,,,
um I'm going to use the what is it,,,
called Prime icons classes so let's do,,,
PI and then,,,
pi- exclamation let's do what do we want,,,
exclamation triangle we'll do and then,,,
I'm going to do text Dash yellow,,,
500 and let's do text dash 7 XL and then,,,
margin bottom,,,
mb5 okay now obviously that's not going,,,
to show just yet because we need to add,,,
the route so we'll go to router,,,
index and of course we need to bring the,,,
view in so let's import not found View,,,
and then we'll go down here here and the,,,
way we can do a not,,,
found very they actually make it pretty,,,
simple so for the path we can set that,,,
to slash and then colon catch,,,
all and then in here we're just going to,,,
have do asterisk so basically any any,,,
file or resource we go to that doesn't,,,
exist it's going to match that path and,,,
we'll give it a name of not- found and,,,
then the component that we want to load,,,
is the not found,,,
view all right so we'll save that and,,,
there we go 404 not found got the nice,,,
icon and go back good so any anytime we,,,
go to a URL that doesn't exist we're,,,
going to see,,,
that so I think the next thing we should,,,
do is the single job view right if I,,,
click on read more it goes to the,,,
correct URL but we don't have anything,,,
here so let's create the view first so,,,
I'm going to go into views and this one,,,
I'm going to call just job,,,
view.,,,
View and let's create our,,,
script,,,
setup and,,,
template and what I'm going to do from,,,
here is just grab the from the theme,,,
files I'm just going to get the,,,
hardcoded stuff and then we'll replace,,,
it with Dynamic data later so let's go,,,
to job HTML and go to the main,,,
section so this we're also going to want,,,
this go back as well but we'll do that,,,
after this is going to be the main,,,
section so I'm going to grab that whole,,,
section has the sidebar and all that,,,
stuff in,,,
it so copy that put that in the template,,,
so it's just all hard-coded HTML for now,,,
but let's just bring it into the,,,
router so go to router and let's bring,,,
in import job,,,
view now this this URL is going to have,,,
or this yeah I guess this URL is going,,,
to have a an ID so I'm going to I'm,,,
going to keep the catch all at the,,,
bottom you don't have to but I just I,,,
just like to keep it at the bottom so,,,
let's add in another object here and the,,,
path since it's going to have an ID what,,,
we do is slash jaw slash and then colon,,,
ID okay that's going to be the path and,,,
then let's give it a name so I'll just,,,
call it job and then let's give it a,,,
component and that's going to be the job,,,
view,,,
component save,,,
that okay so that's not working and,,,
that's because this is job SL1 I do want,,,
to keep it as Jobs because that's what,,,
I'm I'm going to have everything else as,,,
right uh did I what I do collapse this,,,
yeah so we have jobs and then we'll have,,,
jobs ad and job's ID so what we need to,,,
do is change the actual link on these,,,
buttons so that's going to be in the job,,,
listing and right here I'm just going to,,,
add an,,,
S all right so if I click read more,,,
there we go and then obviously this is,,,
all hardcoded so no matter what job I,,,
click read more it's always going to be,,,
this this data that's what we have in,,,
the HTML but we're actually going to,,,
come back to this because what I want to,,,
do now is Implement Jason server which,,,
will be like a real back end instead of,,,
just getting it from the Json file I,,,
mean technically it does come from a,,,
Jason file but Json server sets it up so,,,
you can make actual get post put delete,,,
requests to um to have you know crud,,,
functionality so I'm going to just close,,,
this stuff up for now and let's install,,,
Jason server so we're going to say npm,,,
install,,,
json-server,,,
and the way this works is it'll actually,,,
look at a spe a specific Json file and,,,
it'll use that as your data now we have,,,
this jobs. Json and the only thing we,,,
need to change and this is why I had two,,,
versions of this we need to make it so,,,
we have this array called jobs so what,,,
I'm going to do is first off just copy,,,
this so duplicate it and change the,,,
initial one,,,
oh I'll change the copy it doesn't,,,
really matter I'm going to change that,,,
to jobs 2 just so you have the old,,,
version as well and then in jobs. Json,,,
all I'm going to do is we're going to,,,
have an object wrapping this whole thing,,,
right so opening curly brace and then,,,
have jobs and then set that to the array,,,
right so jobs set to this array and then,,,
just add the ending curly brace down,,,
here so that's all I want to change and,,,
then Jason server will look at this and,,,
use jobs as a resource for create read,,,
update delete or I should say get post,,,
put delete routes so the way that we set,,,
that up is in our package.json,,,
we're going to create a new uh a new,,,
script to load Jason server so let's go,,,
to scripts and let's add we'll call it,,,
server you could call it,,,
anything and what we want to run here,,,
is,,,
json-server and,,,
d-at and we want to watch in the source,,,
folder the jobs. Json file because,,,
that's our data and I want it to run on,,,
Port 5,000 that'll be our our back end,,
so it's just like if you create if you,,,
used Express and you created a rest API,,,
for jobs and you put it on 5,000 it's,,
the same exact thing as far as looking,,,
at it from the front end,,,
all right so now let's run that so I'm,,,
going to make sure you keep the the V,,,
server running but go to another,,,
terminal and do npm run,,,
server and let's see what happened,,,
here oh I think I have I think I have,,,
yeah something's already running on,,,
5,000 that I can't really stop so let's,,
I'm going to change it you can leave it,,,
at 5,000 yours will work as long as you,,
don't have anything running but I'm,,,
going I guess I'll change it to,,,
8,000 so now if I run npm run server now,,
it's running at 8,000 and I actually,,
have this endpoint of Local Host 8,000,,
jobs if I look at that there's my,,,
data and I have I I can make a post,,,
request to add a new job I can do a a,,,
put to update a job and a delete to,,,
delete a job so that's I mean it's as,,,
easy as that to set up a a mock rest,,,
API all right so so why don't we now,,,
since we have that set up let's have our,,,
data that's on in our job listings,,,
component come from Jason server now you,,,
can keep using the fetch API if you want,,,
but I'm actually going to use axios for,,,
this which is just a an HTTP client,,,
that's a little easier and a a little um,,,
you don't have to write as much code to,,,
make requests so I'm going to open up,,,
another shell here since I already have,,,
two running and let's let's do npm,,,
install axio again if you want to use,,,
fetch you,,,
can and then let's go into the job,,,
listings component listings,,,
plural and this is where initially we're,,,
we're bringing in that Json,,,
file which now if I,,,
reload actually why is it still working,,,
because I changed the format up of that,,,
oh this is that's the the uh theme yeah,,,
so see now this isn't working because I,,,
changed the format of that Json jobs,,,
Json file now we're not going to need to,,,
bring this in anymore because we're not,,,
going to use that we're going to make a,,,
request to our back end we're also not,,,
going to use um job data here so we can,,,
get rid of that and just put an empty,,,
array so basically our jobs is going to,,,
start with an empty array we're going to,,,
make our request in the on mounted life,,,
cycle method and then fill this array,,,
this jobs with the dat data from the,,,
API okay so let's bring axios in so we,,,
can use that or again if you want to use,,,
Fetch and we're going to do we're going,,,
to bring in on mounted from view so,,,
right here let's also bring in on,,,
mounted it's lowercase,,,
o and usually we'll put this at the,,,
bottom so let's say,,,
unmounted and then we want to pass in on,,,
mounted we're going to use use a sync we,,,
since we're using,,,
axios and and this is kind of like use,,,
effect in react so let's do uh try,,,
catch and we want to get the,,,
response so we're going to send a,,,
requests with await axios make a get,,,
request to,,,
http Local Host port and mine is 8,000,,
so just put put in the right port for,,,
your backend and then slash jobs right,,,
and then we can set jobs. value to the,,,
response,,,
response. dat data like that so that,,,
should update the jobs and then we'll,,,
just do a console.,,,
error and we'll say,,,
error fetching,,,
jobs and I guess we can,,,
yeah we'll also output the,,,
error okay so let's save that and now we,,,
get our jobs back and it should be here,,,
and on the jobs page because they both,,,
use this job listings component so now,,,
it's fetching it from the actual from,,,
Json server all right if we were to look,,,
at the network,,,
Tab and,,,
reload you can see,,,
uh where is it right,,,
here so it's making the get request to,,,
Local Host 8,000 jobs getting it back if,,
we look at the response there we go so,,,
we're we're no longer just pulling in a,,,
file now before we move on this what,,,
we've done here with ref and using ref,,,
here that's absolutely fine there's,,,
nothing wrong with that in fact I think,,,
that's probably what most people would,,,
do but there's also something called,,,
reactive that we can use instead of ref,,,
now there are differences so the main,,,
difference is that reactive only takes,,,
objects it doesn't take Primitives like,,,
strings numbers and booleans and it also,,,
uses ref under the hood ref can take,,,
objects or Primitives so you can use,,,
that no matter what in fact a lot of you,,,
developers will just stick to always,,,
using ref and I probably would do that,,,
here but I want to show you other you,,,
know what else is available and then ref,,,
has the value property for reassigning,,,
where reactive doesn't use dot value and,,,
it can't be reassigned and when I say,,,
reassigned I mean you can't just take,,,
the actual variable and set it equal to,,,
something else it'll be an object inside,,,
and of course you can manipulate that,,,
object all right so what I kind of like,,,
to think of it as is and this is for,,,
people that are already familiar with,,,
react so when you have a form sometimes,,,
you'll you'll add a different Ed state,,,
for each field like the name the email,,,
Etc that's like an example of using ref,,,
where using reactive is if you were to,,,
use a single object that has each field,,,
inside of it so an object with name,,,
email Etc that's just the way that I,,,
think of it I don't know if that's I,,,
don't know if that makes sense or not,,,
that's just just me uh so let's bring in,,,
reactive and then what we're going to do,,,
is instead of just setting jobs to,,,
ref what I'm going to do is call this,,,
state and set that,,,
to reactive but we want to pass in an,,,
object and then in that object is where,,,
I'll have my jobs which starts as an,,,
empty array and then I'm also going to,,,
have an is loading so you can have a,,,
spinner or whatever while it's loading,,,
and I'm going to set that to True by,,,
default all right and then down here,,,
what we can do,,,
is let's see so we have cons response,,,
we're getting that now remember there's,,,
no dot value but what you will do is say,,,
state. jobs because I called this state,,,
so state. jobs we're setting that to the,,,
response data and then I want to use the,,,
loading which is set to True by default,,,
so what I'm going to do is add a finally,,,
to this try catch which just means,,,
whatever I put in here is going to run,,,
whether this runs or this runs and in,,,
both cases want to set is loading to,,,
false so we would say state do is,,,
loading and set that to false okay now,,,
this is not reassigning it this would be,,,
reassigning it State equals something,,,
I'm just taking an a value in the object,,,
or a property in the state object and,,,
and setting that that's perfectly fine,,,
all right so let's save that,,,
and uh let's see that's not,,,
working and that's because,,,
that's because down,,,
here,,,
um for job we want to,,,
say here,,,
state.,,,
jobs and then over here where we get the,,,
length we want to say state. jobs there,,,
we go so now that's working if I go to,,,
jobs that's working so again this is,,,
kind of um you know this is optional you,,,
don't have to do it this way but I just,,,
I just want to show you guys other ways,,,
of doing it now we should probably use,,,
that that,,,
loading so let's,,,
um let's set up a spinner and there's a,,,
an extension called view spinner that's,,,
pretty cool it's very easy to use so I'm,,,
just going to install npm install and,,,
it's called view Dash spinner very very,,,
simple,,,
extension now we do need to I believe we,,,
have to add the CSS file is that right,,,
um no maybe we don't,,,
actually yeah I don't think I don't,,,
think we need to add that um so what,,,
we'll do is bring in up at the top,,,
here say import now there's different,,,
types of spinners you can bring in I'm,,,
going to bring in the post pulse,,,
loader,,,
from and that's going to be from view,,,
spinner,,,
slash Source SL puls loader. viw okay so,,,
we're bringing that in and then let's go,,,
down here to the,,,
template and where I want to put this is,,,
right under the,,,
H2 so I'm going to say,,,
show loading,,,
spinner uh,,,
while loading is,,,
true okay so we can use the the V if so,,,
let's have a,,,
div and let's say,,,
v-if set that,,,
to State don't forget the state and then,,,
dot is,,,
loading so if that's true and I also,,,
want to add a couple classes on this so,,,
we're going to do text- Center and let's,,,
do text-,,,
gray- 500 and,,,
py- 6 and then in that div I'm just,,,
going to put the pulse load,,,
all right so that's if it's loading and,,,
then down here where we have the the,,,
grid with the job,,,
listing let's just put a comment here so,,,
we'll say,,,
show job listing,,,
when done loading so we can use V else,,,
here so v- else and that should be all,,,
we need to add here so if I reload you,,,
can see real quick three dots,,,
so it'll be there and it'll be,,,
here all right so now what I want to do,,,
is the single page right so we'll come,,,
back to that because right now this is,,,
all just HTML so let's go into the job,,,
uh where is it the job,,,
View and if you want you could put this,,,
in a separate component if you don't,,,
want to put it all in a view file but I,,,
I assume it's I mean it's a component so,,,
we'll just do it here now I'm going to,,,
use reactive just because I use used it,,,
in the job listings if you want to use,,,
ref you,,,
can so like I said it's all preference U,,,
so what I'm going to import from,,,
here is going to be the pulse,,,
loader so pulse loader,,,
from and that's view spinner Source,,,
pulse loader and then I'm also going to,,,
import,,,
axios because we need to make a request,,,
for the single job listing,,,
and then,,,
let's go under that and I'm going to,,,
also import actually we'll just this up,,,
here and I usually like to put axios at,,,
the bottom so I'm going to import,,,
reactive and then we're also going to,,,
need on mounted from whoops on mounted,,,
from,,,
View and from The View router let's,,,
import use r rout so we're going to,,,
bring in US Route and we're going to,,,
bring in router,,,
link,,,
okay all right now let's see we're going,,,
to,,,
initialize use,,,
route so route set that to,,,
use route now the reason I'm doing this,,,
is because we need to get what is going,,,
on here why did I say import,,,
const the reason I'm doing this is,,,
because we need to get the ID from here,,,
and we need to make the request to the,,,
back end with that ID and way we get,,,
that ID is with this route variable so,,,
I'm going to say cons job ID and I'm,,,
going to set that to Route Dot and the,,,
way we do it is params and then do ID,,,
and the reason it's ID is because in the,,,
router right here is what I used I used,,,
ID if I use like slug or something here,,,
then it would be pam.,,,
slug so next let's create our,,,
state so we're going to use reactive and,,,
again if you want to use ref you can if,,,
you want to use Primitives you can but,,,
I'm going to just I kind of like the,,,
idea of just having a state object so,,,
let's say job which will be just an,,,
empty object to begin with and then is,,,
loading set that to true to begin,,,
with and then let's do our on mounted,,,
I'll actually copy it from uh from the,,,
job,,,
listings so this on mounted right here,,,
I'm just going to grab this whole,,,
thing and paste that in except now we're,,,
making a request to jobs slash and then,,,
the ID so let's actually change change,,,
this to back,,,
Tex and we'll do job slash and then,,,
job,,,
ID okay and then let's see State this is,,,
going to be state.job not jobs and then,,,
this stuff we'll just say error fetching,,,
job and that should do it okay now down,,,
here,,,
let's let's figure out where we're going,,,
to put the,,,
loader I guess I'm just going to put,,,
it so uh we only want to show,,,
this if the if loading is not true so,,,
why don't we go into the section and add,,,
a v if so we'll say V if not state do is,,,
loading and then down at the,,,
bottom let's just,,,
put actually know what I'll do is grab,,,
from,,,
here yeah just grab this,,,
and it'll go under the section and then,,,
paste that in so we're just saying if uh,,,
actually here we want to say if,,,
else and get rid of,,,
this all right so if it's not loading,,,
it'll show that if it is loading then,,,
it'll show,,,
this and if I reload you can see the,,,
dots now we want to make this obviously,,,
Dynamic we want to have the actual data,,,
so let's go back to the top of the,,,
template and just kind of go down so we,,,
have fulltime let's change that to,,,
interpolation of state do job dot what,,,
is this,,,
type and you can see it still says,,,
fulltime let's change this I'm just,,,
going to copy,,,
that and then we'll change that to,,,
title senior view developer and then we,,,
have the location which is going to be,,,
right,,,
here so oops,,,
job,,,
location just make sure this is working,,,
right so this one's myami yeah there we,,,
go so Miami good um the,,,
description change,,,
that description then we got,,,
wait what is this oh this is,,,
um wait what is,,,
that what did I just change oh I changed,,,
the title,,,
idiot,,,
description all right and then we get,,,
the salary so we're just going to,,,
replace this part of,,,
it with job. salary,,,
then we got in the sidebar company info,,,
so this is the name the title of the I,,,
think it's the what is it the title the,,,
name let me check so jobs yeah so we,,,
have company object and then,,,
name so let's replace that with job,,,
dot job.,,,
companyname okay so that changed the,,,
vineer solution ions and then I'm just,,,
going to copy this replace this with the,,,
company do,,,
description contact,,,
email change that whoops I just copied,,,
it change that with,,,
company.,,,
contact,,,
email okay that changed and then this,,,
one here the phone is going to be,,,
company do,,,
contact,,,
phone then down here we have the manage,,,
job now we're going to want to use a,,,
router link here did I bring that in,,,
yeah I did all right,,,
so anywhere where we have a tags which,,,
should just be the edit job so we're,,,
going to change this,,,
to router,,,
link add the ending,,,
tag all right and then we're going to,,,
change the the hre,,,
to a two,,,
attribute or a two prop and then this is,,,
going to go to since it's an,,,
edit um what do we want this to go to so,,,
we can put back ticks in here and then,,,
we can say slash jobs slash edit slash,,,
and then the,,,
um job,,,
ID I,,,
believe that oh actually you know what,,,
let's not do that let's do state. job.,,,
ID so we're getting the ID from the,,,
database or from the back end and then,,,
if I hit edit,,,
job yeah,,,
that's that's not working what did I do,,,
wrong here,,,
um can I not use back,,,
ticks oh two needs to have a colon in,,,
front of it,,,
there we go so it's going to jobs edit 2,,,
which is what we,,,
want okay so this is all now Dynamic so,,,
if I click on any of these it's going to,,,
show me the actual data coming from the,,,
back,,,
end now let's do the the go back button,,,
which is going to be pretty simple um,,,
we'll just create a separate component,,,
for that so let's go to,,,
components right here and let's create,,,
back button. viw,,,
okay we'll add our,,,
template now the back button we can just,,,
get that from the theme files if we go,,,
to job. HTML up at the top here there's,,,
this this right here this section for go,,,
back I'm going to just grab that and I'm,,,
going to put that in the,,,
template and since there's a link so,,,
there there's a link and we'll also,,,
change the icon class so let's bring in,,,
router,,,
link and then let's change that to,,,
router link let's change this to two and,,,
we want to go back to slash,,,
jobs and then for the,,,
icon let's get rid of that and let's do,,,
it's going to be,,,
pi and what is it going to be the arrow,,,
so Pi Dash let's see arrow and I want to,,,
do an arrow left so we'll do Circle,,,
Arrow left let's see what that looks,,,
like so will bring the back button into,,,
the job,,,
View and then I'm going to put,,,
that right above the section so,,,
back button,,,
okay so let's add a little bit of,,,
spacing after that icon so in the back,,,
button We'll add what do we want M,,,
margin right three maybe yeah I think,,,
that's good now the next thing I want to,,,
show you is proxying because right now,,,
we have two requests we have one in the,,,
job view making it to the the single job,,,
and then we have one in job listings to,,,
jobs now you might have you know 5 10 15,,,
different requests and you don't want to,,,
have this HTTP Local Host 8000 cuz what,,,
happens when you deploy so what we can,,,
do is add a proxy and say instead of,,,
using Local Host 8000 we can just use,,,
like slash API so we can do that in the,,,
v um uh where is it the V config so I'm,,,
going to open that up and we're going to,,,
add this to the server object so right,,,
here let's add proxy,,,
and proxy is going to be set to an,,,
object and I'm going to do slash API,,,
because that's that's what I want to use,,,
is slash API slash and then jobs or or,,,
whatever so we set that to an object and,,,
then we're going to add the Target and,,,
the target is going to be,,,
HTTP Local Host and then M's 8,000 if,,
you used 5,000 for your server then,,
that's what you want to put and then,,,
we're going to add change origin set,,,
that to true and then we're going to,,,
have a,,,
rewrite uh,,,
rewrite path and this is just what's in,,,
the documentation we're going to say,,,
path. replace because what we're doing,,,
is,,,
replacing we're going to like I said,,,
replace this with uh we want to replace,,,
it with a slash API so in here it takes,,,
a regular expression and we can just put,,,
two forward slashes and then the carrot,,,
so we're going to say begins with and,,,
then we want to use um escaping for the,,,
next slash so back slash escapes the,,,
forward slash and then API,,,
slash and then we want,,,
to um put pass in just an empty,,,
string wait a minute is that no that's,,,
not right that shouldn't be there that,,,
should do it all right so just copy this,,,
and then what we can do is go back to,,,
where we make those requests like in the,,,
job View and I should now be able to,,,
replace this with API or SL API SL jobs,,,
and then same thing in the um job,,,
listings replace this with Slash,,,
API and then just reload so the jobs,,,
view is still working and the jobs,,,
listing is working and now I'm not uh,,,
explicitly saying Local Host 8,000,,
so that's proxying so let's start to,,,
work on the ad job page I know this is a,,,
this is a long crash course but I wanted,,,
to just I wanted to fit all this stuff,,,
into it so and if you've made it this,,,
far congratulations uh most people,,,
don't these days at least I feel like I,,,
feel like people just don't have,,,
attention spans anymore they want they,,,
want to learn everything through uh 30,,,
second Tik Tok,,,
videos so let's create I sound like an,,,
like a grumpy old man so let's create a,,,
new view for this so in views we'll say,,,
add job,,,
view.,,,
[Music],,,
Vue and let's add um for now I'm just,,,
going to put,,,
template and I just want to get it,,,
displayed so I'm just going to say add,,,
job like that and then bring it into our,,,
router let's close the rest of the stuff,,,
up go into our router index bring in the,,,
view,,,
add a route for it we'll go right,,,
here path is going to be slash job,,,
slad name is going to be add,,,
job component is going to be add job,,,
view so,,,
now we can see add,,,
job so this is going to be a form pretty,,,
long form so we're not definitely not,,,
not going to type it out let's grab it,,,
from the theme files so ad job,,,
HTML and go past the navbar to the,,,
section and we're going to grab the,,,
whole,,,
section again I tried to make the theme,,,
files easy so that everything is just,,,
laid out in sections that you can just,,,
take so we'll take,,,
that let's paste that into the,,,
template save it and there we go so we,,,
have our,,,
form now now obviously we want to make,,,
this form function so couple things um,,,
now forms are where I do like to use,,,
reactive and over ref right so because,,,
that otherwise I'd be creating a,,,
primitive for every single field and,,,
even in react I'll have an object in Ed,,,
State rather than you know a separate,,,
state for each,,,
one so let's add our script,,,
and let's,,,
import,,,
reactive okay and then I'm going to call,,,
this variable form set that to reactive,,,
and pass in an,,,
object and we're going to have all the,,,
fields so type now type I want it to be,,,
filled with fulltime first uh rather,,,
than just being empty I want it to show,,,
like that full time so I'm going to add,,,
that as a default value and then title,,,
is going this is going to be empty,,,
everything else is pretty much just,,,
going to be an empty string,,,
description we have,,,
salary we have uh,,,
location and then company company is,,,
going to be an,,,
object and in that we'll have,,,
name,,,
description contact,,,
email and,,,
contact,,,
phone okay so that's our data or,,,
State uh what else so we want to to to,,,
bind these to the inputs and that's,,,
where we use V model right so let's come,,,
down here to the first input well it's,,,
actually a select but we're going to add,,,
to this v-,,,
model and we're going to set that to,,,
form.,,,
type all right so if I save that it,,,
should still say fulltime if I were to,,,
change this to part-time then it'll say,,,
part-time now it has to it have this has,,,
to match one of the the actual options,,,
so it has to be one of these or it's not,,,
going to show right if I put um,,,
part-time one and save it's not going to,,,
show it it has to match one of those so,,,
that's the select then let's go to the,,,
name,,,
uh yeah is it n yeah name and then we'll,,,
add v- model and set that to form.,,,
name right we'll go to the next one the,,,
description which is a text,,,
area and V,,,
model set that to,,,
form.,,,
description then we get the salary which,,,
is a,,,
select uh we'll go right here V model,,,
set that to salary not salary job um,,,
form.,,,
salary then we got the,,,
location location and then company info,,,
so we have the the,,,
company uh what's this this is going to,,,
be company,,,
name so let's add V model set that to,,,
form.,,,
companyname then we get the,,,
description make sure you put it in the,,,
the input or text area not in the,,,
label so here let's say,,,
[Music],,,
vodel,,,
form. company,,,
dot,,,
description contact email so,,,
v-model form. company. contact email and,,,
then finally the,,,
phone,,,
so,,,
form. company,,,
do contact,,,
phone all,,,
right and if we put like any default,,,
values like for Loc,,,
if I say hello and I look in location it,,,
says hello so these are they're bound,,,
together now the next step is to add the,,,
function or the submit event and point,,,
it to a function so let's go to the form,,,
and let's say,,,
at submit or you could use V on and,,,
we're going to do uh submit. prevent to,,,
prevent the default behavior and let's,,,
set that to let's say handle submit,,,
all right so with,,,
that we're going to come up here under,,,
the form the bottom of the script here,,,
and let's say const handle,,,
submit okay and then we're going to be,,,
making a request so let's make this,,,
asynchronous and then just for now let's,,,
just see if we can get if it actually,,,
works so we'll do a console log and I,,,
should be able to get like form. tile,,,
let's try that all right so if I put,,,
something in here I think these are,,,
required so we need to just put in some,,,
dummy stuff,,,
here and just put whatever it doesn't,,,
matter so add job and then I'm going to,,,
look in the,,,
console and uh let's see we should see,,,
the,,,
title so I'm getting nothing did I put a,,,
title in I did,,,
oh you know what did I put title or name,,,
I did I put name so this right here job,,,
listing,,,
name should actually be that should be,,,
form title as,,,
the as the V model so I'm going to have,,,
to submit this,,,
again with a title and there we go all,,,
right so I just had the I had the V,,,
model,,,
wrong so we're up to this point where we,,,
can actually where we have the the data,,,
bound to the inputs we can get the data,,,
when we submit like that so why don't we,,,
create a new job,,,
object and let's set this to let's say,,,
title set that to form. tile which we,,,
just saw that we can get type set to,,,
form,,,
type uh what else location,,,
description uh,,,
salary what's next company which is an,,,
object so that's going to be we have,,,
name which is,,,
form. company,,,
name and what's next,,,
description form do,,,
company.,,,
description contact,,,
email and contact,,,
phone all right so that gives us the new,,,
job and let's just test that out now,,,
make sure that we we get that and make,,,
sure all the the fields are actually,,,
filled in so new,,,
job and this is kind of a pain to,,,
actually I think I have yeah I have the,,,
fake form filler I don't know why I'm,,,
not using that that's a pretty good,,,
extension fake form filler just add some,,,
data in,,,
there so we have this object with,,,
company so all that stuff is good,,,
description yeah so everything looks,,,
looks good so it's it's catching the,,,
data as it should and then we want to,,,
make the request so let's do I'll just,,,
copy from uh from one of these other,,,
from the jobs view uh job view this,,,
inside the unmounted I don't want the,,,
unmounted I just want the try we don't,,,
even need the,,,
finally I guess I could have just typed,,,
it so we're going to say response but,,,
we're making a post request now so we,,,
want to say post and it's going to be,,,
the end point will be API jobs you can,,,
actually just make these quotes or you,,,
can keep back tick some people see a lot,,,
of people lately just always use back,,,
ticks um so API jobs and then we want to,,,
pass in the new job as our data and then,,,
we don't need to do this state thing um,,,
what I do want to do is add a toast so,,,
I'll say to,,,
do show toast which is like a,,,
notification and then let's router so,,,
router. push and then we'll pass in some,,,
back tick and say slash jobs slash and,,,
then from that,,,
response we want the data and we want,,,
the ID so it'll go to the the actual job,,,
that we,,,
add all right and I want to add a toast,,,
down here if there's an,,,
error so let's try that out I'm going to,,,
go ahead and just,,,
reload I'll just say test job and we can,,,
put anything in let's use the fake,,,
filler,,,
again add,,,
job let's see what did I axios is not,,,
defined so I didn't bring in,,,
axios all right let's try it,,,
again there we go so that's just all the,,,
dummy data that I just added if I go,,,
back to job listings there it,,,
is all right one thing I'm missing here,,,
is the little map icon so that's going,,,
to be in the job,,,
View and let's see right here we want to,,,
replace that let me just see what I used,,,
for,,,
that job,,,
view so it's called it's map marker all,,,
right so I want,,,
to I'm going to keep,,,
I'm actually going to change it to text,,,
XEL and then get rid of these classes,,,
and we're going to do PI and then pi-,,,
map,,,
marker and there we go all right cool so,,,
up to this point we have uh create,,,
functionality now we have read so we all,,,
we have left is edit and delete right so,,,
I want to be able to come here and click,,,
delete and delete it but before we we do,,,
that why don't we do the toast because I,,,
want a nice notification that slides in,,,
and says you know uh job has been added,,,
so to do that we're going to install a,,,
package called view toastify so let's,,,
say npm install view,,,
Das uh,,,
toastation at next make sure you put,,,
that at next or you'll get an,,,
error so now we need to initialize that,,,
in our,,,
main.js so there's two things we want to,,,
bring in here we want to bring in um we,,,
want to bring in the CSS file and the,,,
actual toast so let's say import,,,
toast oops no import toast from view-,,,
toastify and then the CSS is going to,,,
be view- toastify,,,
slist SL index.css so that'll give us,,,
the styling and then we just have to,,,
come down here and we have to do app.use,,,
and then pass in toast okay so that will,,,
give us the styling and the ability to,,,
use the the used toast hook so we're,,,
going to go back into the add,,,
form so add job View and from here let's,,,
import uh we want to import the Ed,,,
toast Hook from view toastify,,,
all right now now we need to initialize,,,
that so I'm going to go right under the,,,
form here and let's say const and call,,,
this toast set that to use,,,
toast and then wherever we want to use,,,
that we can just replace that and say,,,
toast. success so you can do success or,,,
error depending on what you know what,,,
color you want the thing to be so the,,,
message I just want to say job we'll say,,,
job added,,,
successfully and then if there's some,,,
kind of error then let's do toast.,,,
error and I'll just say,,,
job was not added and it'll console log,,,
the actual,,,
error cool so let's save that and now,,,
let's try to add another job so I'm just,,,
going to use my form filler,,,
so it's called Dennis Horn as the job,,,
listing name we can change that to like,,,
uh just like view,,,
Dev and then add job there we go so we,,,
get job added successfully in our toast,,,
and it brings us to the new the new job,,,
page so moving on we want to do the,,,
delete so let's go into that's going to,,,
be in the job view so we can close that,,,
up let's go into job View and then Let's,,,
uh let's add the button first so or we,,,
have the button but let's add the event,,,
so down at the bottom where we,,,
have the delete button I'm going to add,,,
at click and we'll set that to let's,,,
call it delete,,,
job okay and then up at the top before,,,
we create delete job I'm just going to,,,
import a couple,,,
things so we want I I want to use the,,,
toast so I'm going to say use toast and,,,
that's going to be from View toastify,,,
and then in addition to use route and,,,
router link I'm going to bring in the,,,
use,,,
router uh use router hook as,,,
well uh and then we need to initialize,,,
both of those so let's do that let's see,,,
we'll go right here and let's say const,,,
router set that to use,,,
router and then we want cons toast,,,
set that to use,,,
toast and then we we'll create our,,,
delete job I'm going to put that right,,,
above the unmounted so const delete job,,,
use an arrow,,,
function and this is also going to be a,,,
synchronous because we're using,,,
axios and we'll have a TR catch and in,,,
the try let's,,,
await axios do did I bring in axios I,,,
think I did yeah so we want to await,,,
axios do delete cuz we're making a,,,
delete request now and the endpoint,,,
let's actually use back ticks for this,,,
and it's going to be SL API SL jobs,,,
slash and then the job,,,
ID all right so that'll make the request,,,
and then let's say toast.,,,
success and we'll say job,,,
deleted or job deleted,,,
successfully and then after that I want,,,
to redirect to the jobs page so this is,,,
where we can use router.,,,
push and let's go to slash jobs and then,,,
in the catch here let's do console dot,,,
we'll do console.,,,
error and we'll say,,,
error deleting job and let's also show,,,
the error and then after that we'll do a,,,
toast so toast. error and let's,,,
say um job just say job not,,,
deleted all right so I think that should,,,
do it let's come back over here I'm just,,,
going to give it a Reload and let's,,,
click delete,,,
job job deleted success F we probably,,,
should have a confirmation so let's,,,
let's,,,
um yeah we'll do that as well so we'll,,,
say const confirm set that equal to,,,
window.,,,
[Music],,,
confirm and we'll say are you,,,
sure you want to delete this job and,,,
then under underneath that we'll say if,,,
confirm then we want to do,,,
this all right,,,
so let's go to this,,,
one delete job if I say cancel it,,,
doesn't delete if I say okay then it,,,
deletes and I get redirected and we get,,,
our toast all right so that was pretty,,,
easy now the last major piece of,,,
functionality is the edit so let's,,,
create the edit View view so in views,,,
I'm going to create edit job view.,,,
viu and for now I'm just going to put a,,,
template in here and just say edit job,,,
and then we're going to add it to the,,,
router so router index.js let's bring,,,
that view in so import edit job View and,,,
then we'll add it down here uh I'm just,,,
going to copy,,,
this and we want it to go to jobs sledit,,,
slid for the name we'll do edit djob and,,,
then we want edit job View for the,,,
component all right so now if I go to,,,
one of these and I click the edit button,,,
it should bring you to the correct,,,
URL now for the,,,
form we might as well copy the the whole,,,
ad job view page because it's similar so,,,
I'm going to just grab everything in the,,,
ad job View and paste it in here and,,,
then let's change like um the button,,,
text we'll change that to update,,,
job and there's I believe there's a,,,
heading as well so this right here,,,
instead of add job we'll say edit,,,
job all right and,,,
then let's see there's going to be some,,,
stuff that we need to bring,,,
in,,,
um actually yeah,,,
so do we have we need to use route,,,
from the router because we need to get,,,
the ID from the URL so let's say,,,
import use,,,
route and let's also do use,,,
router and then we'll go right here and,,,
initialize those so cons route,,,
equals use route and const router equals,,,
use router,,,
and then we need the job ID so let's say,,,
const job ID and we can get that with,,,
route. params,,,
doid so that'll give us the ID and then,,,
we're going to need some,,,
state so let's see we have our obviously,,,
we have our form our form Fields state,,,
but we're also going,,,
to create a state object we're going to,,,
use reactive,,,
pass in our object and the job which is,,,
going to be just an empty object to,,,
begin with and we'll do is,,,
loading and set that to true to begin,,,
with now we need to fetch the job so,,,
that we can fill the form Fields so,,,
we're going to need on mounted as well,,,
so let's bring that in from view so in,,,
addition to reactive we'll bring in on,,,
mounted and then let's put that down at,,,
the bottom of the script here so we want,,,
to go,,,
under handle,,,
submit and let's say on,,,
mounted we're going to pass in an async,,,
arrow,,,
function and let's make the request so,,,
we'll say cons response actually let's,,,
put this in a try,,,
catch all right so const resp response,,,
set that to await axios and we're going,,,
to make a get request because we're,,,
getting the job and let's use backtick,,,
SL API SL job slash and then the job ID,,,
which comes from the URL and then we're,,,
going to assign state.job to the,,,
response.data okay now to populate the,,,
forms or populate the inputs,,,
what we can do is just set form. type,,,
set that to state. job.,,,
type okay and then we'll do,,,
form.,,,
tile job title we have form.,,,
description state,,,
job,,,
description and form do,,,
salary state,,,
job,,,
salary and the,,,
location location and then we have the,,,
the company stuff so form. compan which,,,
is an object so we want the name and,,,
that's going to be state. job. company.,,,
name and and I'll just copy this down so,,,
in addition to the name we have the What,,,
description so we'll grab this and,,,
this,,,
description okay then the next one is,,,
going to be what contact,,,
email and then we have contact phone,,,
all right so that should fill the forms,,,
let's just add in the catch here um,,,
we'll do a console.,,,
error and we'll say,,,
error fetching job and the actual,,,
error and then we'll add a finally here,,,
because once once that's done we want to,,,
set state. is loading to false,,,
all right so let's see what we got here,,,
identify a router has already been,,,
declared,,,
oh bring in router here so I you can do,,,
you can either do this use this,,,
router yeah you can either do that or,,,
use the hook I,,,
guess I guess we'll just use that so we,,,
don't have to initialize it I think,,,
that'll,,,
work okay so we can see that these form,,,
fields are all filled which is,,,
good now the next step is to do the,,,
handle submit because right now it's uh,,,
it's making a post request we need to,,,
make a put request so let's change the,,,
the name of this because it's not a new,,,
job it's an updated job and then this,,,
stuff can all stay the same because,,,
we're still getting it from the form,,,
and let's see down here we're going to,,,
say response equals axios dop put and,,,
then the URL needs the ID so let's make,,,
this into back Texs and let's do,,,
slash and say job,,,
ID and then pass in updated,,,
job and then for this the toast we'll,,,
say,,,
job updated,,,
successfully and then for the push we'll,,,
just yeah we'll do the same,,,
thing and yeah I think I think that,,,
should do it so let's try it we'll save,,,
it and then I'm going to just change,,,
something so let's see which one should,,,
I change we'll go to senior view,,,
developer click edit job and I'm just,,,
going to change it to senior view,,,
Dev and we'll change change the salary,,,
to let's say 90 to 100 and then update,,,
job job updated successfully senior view,,,
Dev and 90 to 100 so now we can update,,,
our jobs so we have full crud,,,
functionality all right so that's that's,,,
it I mean that's our application I know,,,
it's very simple in functionality but we,,,
there's there's a lot that you learned,,,
here that you're going to use in every,,,
single one of your your vue.js,,,
single page,,,
applications now when it comes to,,,
deployment I actually am going to show,,,
you how to deploy this to netfi um,,,
versell is another great service both of,,,
them have very generous freets however,,,
when we if we deploy this the jobs,,,
aren't actually going to show up because,,,
remember we're using Json server which,,,
is a it's a local mock rest API so we're,,,
not going to be able to access it from,,,
um from a production website but I want,,,
to show you the process just so you know,,,
for your own projects but there's really,,,
no sense in deploying this because it,,,
uses Json server all right um so let's,,,
let's uh go into the terminal here we,,,
can close this up and what you're going,,,
to do first is well you actually you,,,
don't have to do this step because the,,,
build command is actually ran on netlify,,,
but you can run npm run build,,,
yourself and it says building for,,,
production and it's going to what it's,,,
going to do do is create a disc folder,,,
with all your static assets okay so if,,,
you were if you were deploying to like a,,,
shared host or something like that then,,,
you could upload the disc content now if,,,
you want to preview your production,,,
deployment that's what npm run preview,,,
is for so if I do that it starts on,,,
4173 and it just gives you your,,,
production which is the same it's the,,,
same thing as the dev server same,,,
content and all that um but it is the,,,
production uh production build so now,,,
what you would do if you want to deploy,,,
to netlify is create a GitHub repo and,,,
push to GitHub I'm not going to do that,,,
part because you guys should know how to,,,
do that just get your repo up and then,,,
let's go,,,
to,,,
nfy and I'm going to log,,,
in and then you would create uh and I,,,
already have my my uh GitHub repo up so,,,
you would go to add new site import,,,
from,,,
GitHub and then search for your,,,
repo so let's see I want this right here,,,
view crash,,,
2024 site name could say like view-,,,
jobs,,,
project okay and then here you can see,,,
it's it's going to deploy the main,,,
branch and it's going to run npm run,,,
build on the server that's why you don't,,,
have to run it before deployment and,,,
then it's going to publish the disc,,,
directory okay so if you had a different,,,
command then you would change this or if,,,
you had a different uh,,,
production folder you would change that,,,
but it's already what we need we have no,,,
environment variables so we should be,,,
all set to,,,
deploy and this might take a couple,,,
minutes so uh what I'll do is pause the,,,
video and I'll come back when it's done,,,
all right cool so it's done so if I,,,
click on the The Domain here it's going,,,
to open up and again it's not going to,,,
show the jobs because we no longer are,,,
on the local server where we have Jason,,,
server running right if I go to jobs,,,
there's nothing there uh and if I were,,,
to open up the network tab you'll see,,,
that there's just an error fetching the,,,
jobs well that's the console but if I go,,,
to,,,
network and,,,
reload and it's trying to get if we go,,,
to right here um yeah it's trying to get,,,
from API jobs but remember that's that's,,,
Jason server which of course we didn't,,,
deploy so it's getting a 44 but that's,,,
the process of deployment and when you,,,
update your GitHub repo it should,,,
automatically Deploy on netlify which is,,,
really cool but that's it guys I hope,,,
that you learned a lot from this and I,,,
will see you next time",,,
CnH3kAXSrmU,"what's going on guys welcome to my
expressjs crash course so this is a
revamped updated version of the one that
I did about 5 years ago I also just
revamped my node.js crash course you can
find a link to that in the description
node.js is a JavaScript runtime
environment and if you're brand new to
node I would definitely suggest that you
watch that one first it's going to give
you a better understanding of what
nodejs is and how it works but if you're
ready to dive into Express let's get
started
[Music]
all right so we're going to be covering
a lot of stuff in this video we're going
to spend just a few minutes in some
slides to talk about what Express is and
what it's used for then we'll jump into
uh uh Express project and we'll look at
things like creating routes the request
response objects middleware error
handling and more so let's first
establish what Express is so Express is
a minimal and flexible noj s web
framework that provides a robust set of
features for web and mobile applications
and it's used for both server side
applications as well as apis and
microservices I would say that it's most
used for building backend apis that are
consumed by front-end Frameworks and
you've probably heard of the M Stack
which is mongod DB Express react node.js
there's also the mean stack the mevan
stack where you can swap out uh react
for angular or view or really any
front-end technology that you want even
just vanilla JavaScript so it's a very
popular framework in fact I would say
it's the framework for node.js there are
others I'd say there's even Frameworks
that are more powerful but Express has
really established itself as the go-to
framework for node.js and it's used by
huge companies like IBM Uber Nike and a
bunch of others it's also a really
popular option for smaller projects and
start UPS so Express simplifies the
process of handling HTTP requests if you
watch my node.js crash course we started
to build an API from scratch just using
the HTTP module and you saw how
difficult and and how lowlevel it was
well Express gives us a ton of tools to
work with to make building apis and just
working with HTTP much easier and
express is a very fast and unopinionated
framework which I just want to spend a
couple minutes on so when it comes to
web Frameworks you have two types you
have opinionated and unopinionated and
opinionated framework is one that has a
lot of rules and conventions that you
need to follow so there's there's
basically recommended ways of doing
things and it's very structured it's
it's going to guide you in in a certain
direction they also come with or they
usually come with a lot of bells and
whistles out of the box things like
authentication CIS uh database ORS and
some examples of opinionated Frameworks
are Ruby on Rails jeno laravel uh if
we're talking about node.js in
particular nestjs and Adonis are
opinionated Frameworks for node and I
would say in general opinionated
Frameworks are more popular I think node
and express is is really the only
exception I can think of where the most
popular framework is a minimalistic
unopinionated one so opinionated
Frameworks are extremely flexible and
there's not really a right way to do
things you can structure your
application however you want and use
whatever libraries you want you can use
whatever database you want it's very
minimalistic and it's up to you to to
decide how you want to structure your
application there's not as many rules to
follow but you also don't get as many uh
as many features or bells and whistles
out of the box but you do get the
necessities and of course you can
install other packages for the
functionality that you need so there's
definitely uh pros and cons to both I
would say it's really features versus
Freedom depends on one what means more
to you for that
project so there's a few things that you
should know before you jump into Express
you should have a good understanding of
JavaScript obviously all the
fundamentals as well as all the the es6
features Arrow functions destructuring
promises a syn await um you should have
a basic understanding of node.js you
don't have to know a lot in fact I would
say watching my 2-hour crash course is
plenty before you jump into Express you
should know how to use npm how to
install packages and in many cases
you'll be working with Json data but you
can also use a template engine like ejs
or pug and I'm going to actually give
you an example of that later on um but
yeah you can build both server side
applications as well as Json apis
microservices Etc and if you're learning
let's say the M Stack
it doesn't really matter which order you
learn the Technologies if you want to
learn react and you want to learn the
front end first that's fine or you could
do nod and express first and then learn
react what's really important is that
you you know JavaScript before you jump
to either one of those front or back end
now as far as what we're going to do
here obviously we're going to set up a
server we're going to look at routing
how to handle requests we're going to
look at the request and response cycle
and the request response objects to see
how we can get things like the response
body how we can get the headers um
things like that we're going to look at
custom middleware so middleware
functions basically sit in between the
request and response and you can do all
sorts of things we'll create some custom
logging middleware we're going to look
at crud operations so create read update
and delete we're basically going to
create a full crud API uh at the end
we'll look at template engines we're
going to use the ejs which is embedded
JavaScript um cuz you can render HTML
Pages directly from your server as well
it doesn't have to be Json data we're
going to look at error handling creating
custom error handling middleware
thirdparty npm packages controllers so
I'm going to show you how we can
actually clean up our code and and take
take our code out of the route file and
put it into a file that has a bunch of
controller methods fetching data from
the front end so I'll give you an
example of how we can create a static
file server and we can basically have
frontend JavaScript that will make a
request and fetch data from our Express
API and we'll look at environment
variables we look at a lot more too but
these are the the the core things that I
want to go over all right so that's it
for slides let's jump in and get started
okay so this is Express js. this is
where you can find the documentation
there's some guides here on routing and
middleware and you can use this as kind
of a supplement to this crash course so
to install Express just like any other
package you can just install it with npm
so we'll get to that but we're going to
jump into vs code or open whatever text
editor you use and go into some empty
folder where you want to create this
project now this isn't uh um an actual
project that we're going to be working
on um like I do in many of my videos
we're just going to kind of explore uh
we will be building a crud API it'll be
ad Json API that will create read up
update and delete posts but we're also
going to look at loading HTML files
we're going to look at using template
engines creating middleware error
handling uh all kinds of stuff all right
so just open up a folder and in our
terminal since this is a nodejs project
and obviously you have to have node
installed if you don't just go to
nodejs.org so the first thing you're
going to want to do is create a
package.json file and I'm not going to
explain every single little detail like
what a package.json file file is because
you should know that if you don't just
go ahead and watch the node crash course
so we're going to run npm in knit and
I'm just going to do dashy so we don't
have to go through the questions and
that will create the package.json file
with all the defaults okay now to
install Express as you saw on the
homepage we can simply run npm install
or I and then
Express okay and that will get added as
a dependency as you can see right here
it also creates the node modules folder
now at this point I usually like to
create a dog ignore file and what
that'll do is it'll whatever you put in
here it will not be pushed to your git
repository and you never want to push
your node modules folder so you pretty
much always want to create this and I'm
also going to putv in here just in case
we have an environment uhv file usually
you don't want to push that either
because that's usually where you have
things like API Keys things you don't
want to share
all right so let's create an entry point
and I'm going to call it
server.js and typically the convention I
like to use is if I'm creating an API or
like a M Stack application where I'm
serving Json data I'll call it server.js
the entry point if I'm building a node
app that uses a template engine like ejs
then I'll call it appjs that's just kind
of what I like to do but obviously you
can create you can call it whatever you
want
so let's go ahead and bring in Express
and I'm using the commonjs syntax which
is like the the native node module
syntax later on I'll show you how you
can switch it up if you want to use uh
es modules and you want to use the
import syntax but for now we'll just go
ahead and use the
require and we're going to require
Express and then we want to initialize
Express into a variable called
app and then app variable or this object
this is basically what we use for
everything to create routes to use
middleware to start the server and
listen on a port which is what I'm going
to do right now we're going to call the
listen method and that takes in a port
number usually I'll use 5,000 for
backend stuff however that's being used
on this machine so I'm going to use
8,000 and then there's an optional
function call back you can pass in
actually we don't even need curly braces
and we're just going to do a console log
to just say that the server is running
so we'll say server is running
on Port
8,000 and those three lines will
actually allow you to run a server so if
I come down here and I run node and then
the name of the file either server.js or
just server there we go so now it's
running it's not doing anything there's
no routes so there's there's not really
any requests we can send for it to do
anything but it is running so I'm going
to stop that now with roller command
C and the next thing we'll do is just
add a very very simple route and we can
do that with the app object and then
depending on what type of method you
want to handle if it's a get request or
post request you use that method in this
case uh we'll use a get method so this
is going to say respond to a get request
to slash just the root URL or endpoint
and then that takes in a second argument
of a
function and that function takes in a
request and response object and those
objects just have a ton of stuff on them
so whatever you want to get from the
headers the body or query strings from
the URL that's all in the request object
the response object has a bunch of
methods we can use so let's use the send
method and we'll just send some text so
we'll say hello world and then let's run
the server and we'll go ahead and go to
the browser go go to Local Host 8000 and
we'll see Hello World and what's nice
about this is we don't have to Define
like the the content type we don't have
to say HTML or text slpl text or
text/html if I
put an H1 in here like
this and we do have to restart the
server I'll show you how we can fix that
but for now we do have to restart it
you'll see now it's uh it's parsing the
HTML we could even send Json data so I
could
do let's say
message hello world and we can it's just
a JavaScript object but it'll actually
stringify it on its own we don't have to
do it manually like we would have to
with uh you know with the with nodejs
and just the HTTP module like we did in
the node.js course also this is only
pertaining to the root route if I go to
slash about then that's not going to
work
if I make a post request to the root
route it's not going to work it has to
be a get request because that's what we
defined so we don't have to manually
check for that stuff like we would
without using Express now having to
restart the server every time we make a
change is pretty annoying so there's a
few things you can do what I've done up
until recently is used a a thirdparty
package called nodemon which is really
easy to set up you just install it with
npm but with recent versions of nodejs
you can can actually use the watch Flags
you don't have to use a third- party uh
package so I'm going to show you how to
do that in in the node.js crash course
we did use nodemon so you can check that
out if you want to you know if you do
want to know how to do that but let's go
ahead and stop
this and uh I'm going to go into the
package.json here and what we want to do
is create a couple scripts and to create
npm scripts we just go into this object
I'm going to create two going to create
one called start which is just going to
start at normally just like we just did
with the node and then the name of the
file but then I'm going to also create a
Dev script which watches it so that we
don't have to keep restarting so we can
just simply do
node-- watch and then server or whatever
you call the file so now if I save that
and come down here and we run
npm run
Dev you'll see that now it's running on
Port 8000 and it does say watch mode is
an experimental feature and might change
it any time but I'm pretty sure that
it's not going to change so you should
be able to to use that um but let's go
ahead and try it out so I'm going to
change this back to just a
string of hello world and save and I
didn't restart it myself it did it on
its own and if I come back and reload
now we just get the string
okay so now we don't have to worry about
restarting it now the next thing I want
to do well let's just create another row
just so you can
see so we'll create one at
slab and we'll just
return say about okay so now if I come
back here and I go to slash about get
request then we see about in the browser
now most of what we're going to be doing
is dealing with Jason data but I do want
to show you how you can serve HTML pages
and there's a few ways to do that this
first way I'm going to show you really
isn't what you're going to do and that
would be create a separate route for
every single page you can you can do
this in a much easier way by just
creating a static server but I do want
to show you this way just so you so you
know how it works so this res uh this
res object has a method called send file
so I want to send an HTML file when we
hit a route so I'm going to create a
folder called public public and let's
say this is where we want to have our
HTML files so I'll create
index.html we'll just go ahead and
create a boiler plate here I'll just say
welcome say welcome
to the homepage and then I'm also going
to create an about.
HTML and we'll
say welcome to the about page okay so we
have these two HTML files now I'm going
to
go into this this uh root route and
let's do a
res. send file and this will take in an
absolute path to whatever you want to
load and there's a few ways we can do
this I'm going to go ahead and bring in
the path
module so we'll say path I'm going to
require and this is just a uh it's kind
of like a utility to just help with file
paths so so in this send file we can use
this double uncore durame and that will
basically give us the path to the
current file that we're in or the
current location that we're in I should
say the directory and then from there we
want to go to the public folder and then
the index HTML that's the page that I
want to load so we can actually wrap
this in path. jooin which just allows
you to join together folders and files
so we'll say from the durame then we
want to go into public then we want to
go to
index.html so that'll give us the
absolute path to that to the index HTML
file so I'm going to save that and
actually you know what let's just copy
this and we'll do the same with the
about change this to about
HTML and now if I reload the homepage
here we get welcome to the homepage if I
go to
slab we get welcome to the about about
page so that's one way to do it if you
just want to load HTML files but you can
imagine if you have a lot of files
you're going to have to create a bunch
of routes just to load a single page and
that's kind of silly so what you can do
is use the the express static middleware
so to do that we're going to come right
here and we just need to add a line so
let's say setup we'll say setup static
folder and basically we're going to
declare one of our folders to be static
meaning you can just go to the URL and
it will just work and we're going to set
public to be our static folder so to do
that we can say app. use because this is
middleware middleware is just a function
that runs between the incoming request
and the outgoing response and we want to
pass in here
express. static just like that now this
takes in the location of what you where
you want your static folder which in our
case is public so we can again use path.
jooin and same thing we'll just do
double uncore
durame and then uh we want to go to
public okay so if I do that and then I
just get rid of these two routes
completely and we come back to the
homepage and reload it still works now
if I go to slab even though I have that
about. HTML it's not going to work
because I actually have to specify the
HTML if I do that it does work so now
anytime I wanted to create an HTML like
let's say I want contact uh. HTML all I
have to do is create it in this folder
and it will automatically work I don't
have to create a separate route for it
so that's how you create a static server
with no.
JS now I want to move on to working with
Json data because the chances are that's
what you're Learning Express for and and
again I'll get into template engines as
well which allows you to load HTML pages
but also use Dynamic data you can pass
data into the route and into the page
but uh let's go ahead and um we'll just
leave this the static here well no let's
comment it out for now because we're
going to use it later because I do want
to show you how we can interact with our
Json data with uh through these HTML
files but for now we'll just comment
that out and let's create a new row
we'll say
app.get and let's say I want this to be
SL API that's a common uh convention is
just to to have if it's adjacent API
prefix all your endpoints with API so
we'll say API slash and let's do
post and then we have our request
response our function and usually you're
going to be dealing with a database but
let's let's just go ahead and hardcode
some posts here so we'll say cons post
actually I'm going to use
let and you'll see why later but we're
going to use let and let's set an array
and all I'm going to have is an ID and a
title I'm not going to get crazy here so
we'll say
id1 title oops we don't want quotes
around that
title we'll say post
one what I got two colons
there so post one and then we'll just
copy that down a couple
times post
two
three change this up 2 three all right
so let's just pretend that this this
isn't a database so we want to serve
these posts through this endpoint so
let's do res. now we can do res. send
and like I showed you before you can
pass Jason in there or you can pass a
JavaScript object and it will get pared
as or stringified as Json but there's
also o a specific Json method and that's
what I prefer to use so we're going to
do res. Json and then simply pass post
which is just a JavaScript array of
objects but if we go to back to Chrome
now and we go back to let's go to SL API
slost now we get our Json post okay and
you could you could hit this endpoint
from your react application or view or
your mobile app whatever it is you're
using you could hit that endpoint and
get this data dealing with adjacent API
the browser isn't the best tool to use
because you want to you want to be able
to test post and put and deletes so
there's a ton of tools that you can use
to do that Postman is what I prefer and
there's a desktop version there's also a
vs code extension which I have installed
so that's what I'm going to use if you
want to use that as well just search for
Postman under extensions so this right
here you can install it you do have to
create an account but it's free so you
can just install it and then you'll have
this little icon here and then you can
simply open up the new HTTP request and
then you can choose whatever method you
want let's say get request
to this right here Local Host 8000 API
posts send it and you can see we get our
Json data in the body here we can also
see the headers here so we have like X
powered by Express we have the content
type which is automatically application
Json content length
Etc all right so this is what I'm going
to use from now on and we don't I don't
even have to leave vs code to to make my
requests now before we move on to to
other routes and all that I just want to
talk about environment variables so
basically you have variables on your
system that you can use uh called
environment variables and you can also
create them in a file called EnV now
prior to uh I think it was I don't know
a couple versions of node.js a couple
versions ago you had to use a
third-party package called EnV but now
you can actually use envir an EnV file
without using that package so I'm going
to show you how to do that real quick so
let's create a file called
EnV and usually if you have like if you
have like a Google API key or something
like that you'll put that in this file
so you don't want to push this to to
GitHub or anywhere else so that's why
usually you want to put this in your G
ignore file now I don't have any API
keys or anything so all we're going to
put in here is the port number and I'm
going to put that to just for now I'll
put it to 8080 just so we can we don't
need a semicolon just so we can make
sure that this this is being used and
then in
server.js what I'm going to do is come
up here I usually like to put this at
the top and we'll create a VAR aable
called port and I'm going to set that to
process. EnV Dot and then Port because
that's the name of the environment
variable okay now you should also have a
fallback just in case that doesn't exist
so we'll say or
8,000 and then down here where we're
connecting to 8,000 here and here I'm
going to change that to well here we
need to use a we need to use this syntax
because it's a variable
okay so now we're using that Port
variable so this is going to look in the
EnV now it's not going to work by
default in fact if I restart the server
you'll see it's not using 8080 as we
have in the EnV it's using 8,000 it's
using the fallback the reason for that
is because you have to actually you have
to explicitly describe the EnV file in
your package.json so right here where
we're running the dev script we're going
to add-
dv- file equals
Dov like that okay so now I'll save and
let's now restart the
server and now you'll see it's running
on
880 okay so that's how you can use a EnV
file without having to use the EnV
package now I'm going to change that
this to 8,000 I just wanted to show you
that it was working so I'm going to
change that restart and now it's back to
8,000 now what if we want to get a
single post let's create a route for
that actually I'm going to put a comment
here so this is to get all post and then
what we'll do is just grab
that and I'm going to show you later on
how we can create a separate file for
routes but for now we'll just put it in
here so this will get a single post and
we want to be able to put API slost
slash and then when whenever the ID if
it's post with an ID of one then we want
to be able to get it by passing in a one
so since this is dynamic this param here
we have to prefix it with a colon and
then whatever we want to call the param
in this case we want to call it ID you
might have like a if it's a a blog post
you might have maybe a slug or something
like that but we're just going to stick
with an ID now how do we get whatever is
passed here in our function here well we
do that let's console log we do that
with the request object and on that
there's a pams object let's just go
ahead and console log that so I'll make
the request to API post
SL1 and when I send it you'll see that
now we have an object with an ID of one
and notice that it is a string by
default okay so that's how we can get it
we can do request. prams and then doid
or if this was slug we could do prams do
slug plug so let's make it so we get
that particular post so what I'll do is
first of all just create a variable call
ID and I want a parse int so I want this
to go from a string to a number so we're
going to pass that into parse int
request. perams
doid okay so now we have the the the ID
now let's filter the post so we're going
to respond with Jason and then we can
use filter
and I'm assuming that you guys know
filter that you know all this this
JavaScript stuff if not then you might
want to just pause Learning Express and
kind of get into just JavaScript a
little more but filter will take in a
function basically we're going to Loop
through and for each post we want to say
if that post the current iteration if
that post ID is
equal to the ID that's passed in right
here here which is this variable now
then that's what we want to show that's
what we want to respond with so let's go
ahead and save that let's come back here
and send and now you can see we get just
the I the post with the ID of one if I
do two we get the post with the ID of
two now if I do let's say 200 which we
know doesn't exist right now it just
gives me an empty array because it's
filtering through and it doesn't doesn't
find a post with that ID in reality you
should probably have this return a 404
not found with an error message and
we'll get to that we'll get to error
handling but before we do that I want to
talk about getting query strings so for
instance if we were to go to API slost
and then do question mark limit equals
two maybe you want to limit the the
amount of post that come back how do we
get this value well we can still use the
the request object right just like we
did here but instead of request pams it
would be request. query so this is the
route we're looking at where we want to
be able to get it so let's just do a
console log of
request.
query okay and then we'll make that
request again and now in the console you
can see we have an object limit to and
it is a string by default and if I were
to add onto this an Amper and then maybe
we want like sort equals
DEC now you'll see that that is also
added to that object so let's make the
limit work we won't do the sort now but
let's let's actually make that limit
works so we'll come back in here now one
thing you have to realize when you're
dealing with with backend development is
anytime a user can change the data right
like in this case you have to just be
aware of that and be aware of what
you're doing with that data because it's
possible someone could put like a a an
SQL query in here and really screw
things up that's called SQL injection um
in this case obviously we're not even
using a database but you just have to
you just have to be aware of that okay
and the type of data that you expect
should be the only type of data that
that can be accepted so in this case we
want a number right in particular we
want a number that is positive because
it's a limit so let's first of all
let's um let's say put this in a
variable I do want to parse it as a
number so let's say parse int and we can
get it with request.
query. limit okay so that'll give us the
actual number and there's a ton of
different ways you could handle this
what I'm going to do is just check and
I'm going to say if not Nan or is Nan is
n n right which stands for not a number
so is Nan is a a function that will
return true if it's a number and false
if it's not so we want to say if it's
not is a number
limit and then we also want to make sure
that it's positive so we'll say and if
that limit is greater than zero okay so
if that if those conditions are true
then we want to respond with
Jason um except we want to only return
the whatever the limit is so we'll say
post so we have our post array and then
I'm going to use the slice method and
say I want to go from zero to whatever
the limit is and then we can do an
else and then move this into
here because if there's no limit then we
just want to return all the pose all
right so let's let's try that out we'll
save it and let's try it without any
kind of limit so we still get all three
but then let's do question mark limit
equals 2 we get two if we do equals one
we get one all right if we do 10 of it's
just going to give us all of
them all right cool so that's how you
can deal with query
strings now status codes are really
important you should have a basic
understanding of the the main status
codes the the ranges like 200 means
success um 300 you have redirects 400
you have client error 500 you have
server errors so let's
um let's be specific about the the
actual statuses we're sending back when
you just do res. Json it's it's going to
default to 200 however I like to still
specify 200 explicitly even though I
don't have to I think it just makes it
more readable so what we can do is do a
res. status and you can pass in the
status you want to send back so in this
case I'm going to say 200 and then you
can actually chain on the Json so we can
do it like that and same thing here
we'll say res.
status and you can just send the status
without any content uh without the Json
but we do want to send the post back so
we'll say 200 and then Json all right
same thing down
here so
res.
status
200 now let's make it so that when that
post doesn't exist we get a 404 and a
message so I'm actually going to just
get rid of that whole thing there and we
want to put the post in a variable
because we want to be able to check for
it and we can use find here so post.
find and let's pass in here so for each
post and we want where the post. ID is
equal to ID and then we can check for
that post or we'll say if not post so if
the post doesn't exist then let's say
res. status and this time we'll send a
404 and then you don't have to but I
also would like to send a message so
we'll say MSG and we'll actually let's
use back ticks here
and we'll
say uh we'll say a post with the
ID
of
ID was not found okay and then we'll say
else so if it is then we'll say res.
status and we want to send a 200 and
then as far as the data we send back
that's going to be the post
all right make sure this is singular
post not posts so let's try that out so
if we go to API slost
SL1 we get post one go to slash two we
get post two if I go to post
sl200 then you see over here I get a a
404 not found for the status and we get
this message a post with the ID of 200
was not
found all right so that's how you can
send different statuses um and you
always want to make sure that you have a
proper response if what you're looking
for is not there now just to kind of
clean this up a little I don't really
like to have the else's here so
typically what I'll do we'll start with
this where we're checking to we're
making sure that the limit um seeing if
the limits there since we have two res.
statuses we can do this and just have an
if else but what I'll usually do is not
have the
else so we'll go like that but if we do
it this way then the first one here we
want to return so that should work the
same way so let's try it out if we go to
SL
poost okay so that still works and then
here instead of using the else so we'll
get rid of
this but this first first one even
though it's within an if we still want
to have a return like that I think I
just think that cleans it up a little
bit all right so now we know how to
create routes we know how to get route
pams we know how to get query pams we
know how to send different statuses now
let's move the routes to a separate file
because you can only imagine if you have
a bunch of resources like post users
categories and then you have a bunch of
routes for each resource this file can
get filled up pretty quickly so you're
usually going to have a separate file
for your different resource routes so
let's create a folder in the root and
we'll call it
routes and let's create a file called
posts. uh
post.jpg
we're going to be using the express
router so first off let's bring in
Express
and then let's we're going to be using
the router so we can do that by defining
a router variable and then setting that
to Express dot and then capital r router
like
that all right so the way that this
works we can actually just copy or not
copy but cut t",,
",,
he two routes that we have,,,
here okay so I'm just going to cut them,,,
out of that file we're going to bring,,,
the post into the routes file as well,,,
but let's paste those,,,
in and let's also cut,,,
this okay so we'll cut that so we're,,,
really cleaning up the server,,,
JS and we'll put that here all right now,,,
instead of using app because obviously,,,
we don't have access to app anymore,,,
that's being defined in the server JS,,,
we're now going to use the router so,,,
here let's replace that with,,,
router and replace this one with router,,,
so now anytime we create new routes,,,
we're going to be using the router,,,
instead and then very important you have,,,
to export that at the bottom here so we,,,
want to export as default,,,
router now we need to bring that in that,,,
router routes file into the server JS so,,,
up at the top here let's say const post,,,
and set that to,,,
require and we want to go into let's see,,,
do,,,
slash routes,,,
slost and then we're going to come down,,,
here let's say,,,
routes and what we do is we use app.use,,,
because this is in fact middleware so in,,,
the app.use we can pass in the endpoint,,,
that we want to use for that file which,,,
is going to be SL API SL poost and then,,,
as a second argument we pass in,,,
post now since we're defining API or SL,,,
API slost here in the actual route file,,,
we don't need to have API SL poost here,,,
again so instead we're going to get rid,,,
of this we still want the ID for this,,,
particular route so this would just be,,,
slon ID and then this would just be,,,
slash okay because if you were to leave,,,
this and that then it's going to be,,,
slash API poost twice obviously we don't,,,
want that so let's save and let's make,,,
sure that everything well looks like,,,
we're,,,
getting unexpected,,,
token,,,
export um oh we're still using commonjs,,,
modules which I should probably change,,,
up so with commonjs we would say module,,,
exports,,,
router okay so now let's try it out so,,,
API post that works API post one that,,,
works all right now I do want to switch,,,
it up to es modules I prefer that over,,,
the the commonjs require syntax so you,,,
don't have to do this if you if you want,,,
to stick with this with the you know the,,,
standard node.js module syntax you can,,,
but I like to to have the same syntax on,,,
the front and back end so I'm going to,,,
go into package.json and I'm going to,,,
set,,,
type to module instead of,,,
commonjs now we need to switch up let's,,,
go to server JS first we can replace,,,
this with import,,,
Express Express,,,
from Express and then for path I know,,,
we're not using path right now but we,,,
will,,,
so import path from,,,
path and let's see,,,
for we're going to import posts,,,
from do slash uh what is it yeah dot,,,
slash routes slash now when you're using,,,
this synta the es modules with no. JS,,,
you do have to do the JS if it's a,,,
file all right so we'll save that and,,,
then where else do we need to put this,,,
in the actual,,,
route file we're going to replace,,,
this okay,,,
and I think that's,,,
it let's see what's going on here ah the,,,
export so in this the post route file,,,
now we can change this module. exports,,,
to export,,,
default,,,
posts uh I'm sorry,,,
router all right so now everything,,,
should work let's try it out okay we can,,,
get,,,
that good so now we're using ES modules,,,
the next thing I want to do is show you,,,
how we can get data from the request,,,
body so let's let's make it so we can,,,
make an actual post request and submit a,,,
new post and I know we're not using a,,,
database but we'll just add it to to,,,
memory so I'm going to open up a new uh,,,
Postman tab so we'll say new,,,
request and I'm just going to move this,,,
over here okay and I want this to be a,,,
post request and it's going to be the,,,
same endpoint API poost but I want to be,,,
able to go to the body here and either,,,
send Rod Jason or use this,,,
www form URL encoded where we can just,,,
put like you know title I think title is,,,
the only field that we have for posts,,,
but this kind of replicates a form a web,,,
form so in order to get the the body,,,
data we actually need to add a couple,,,
lines of middleware we don't have to,,,
install anything you used to actually,,,
have to install a separate body parer,,,
package but now it's just included with,,,
Express so let's go right here and let's,,,
say body,,,
parser middleware and we're going to say,,,
app.use and pass in here,,,
express. Json like that so this line,,,
this will take care of being able to,,,
submit raw Json but again I also want to,,,
be able to use URL encoded data so we,,,
need to add one more line,,,
app.use and in here we're going to say,,,
Express . URL encoded and that just,,,
takes in an object and we're going to,,,
set extended to,,,
false so that will allow us to send the,,,
form data now let's create a new route,,,
so obviously that's going to be in our,,,
routes post JS file so we'll go right,,,
here let's say,,,
create new post and we're using the,,,
router now since this is going to be a,,,
post request instead of router. get we,,,
use router.,,,
poost and again the the end point is,,,
still going to be API SL poost so here,,,
we just need to put a slash because,,,
remember we already have this defined,,,
right,,,
here so now create a new post and we'll,,,
have our function with,,,
recres okay and then to get the the body,,,
data let's just do a console log here,,,
I'm going to do request.,,,
body and if you if you took the node.js,,,
course crash course you remember we did,,,
do this but it's it was a lot more,,,
difficult you actually got a buffer and,,,
then had to turn it into a string um,,,
it's it's much more complicated Express,,,
makes it really easy and then for the,,,
response we'll just say res. status now,,,
a 201 means successful and it means,,,
something was created and then let's,,,
also add post I know we're not actually,,,
creating a new post yet but that's the,,,
the response we're going to want so if,,,
we go to make a post request to API,,,
poost right if I just send it as,,,
is then we're getting all the posts and,,,
we just have an empty object but let's,,,
go to this form URL encoded and let's,,,
add title we'll say my title is the,,,
value and send and now you can see we,,,
get this object of we have title and my,,,
title so we can access this value right,,,
here with rec. body. tile so let's go,,,
back into here and if you want to pause,,,
the video and and try this yourself,,,
basically you're just pushing it onto an,,,
array there's no omm or anything with,,,
with a database um if you want to pause,,,
it and try it you can but I'm going to,,,
go ahead and just create a variable,,,
called new post,,,
and there's so many ways to do the same,,,
thing that's like I said earlier about,,,
Express it's very unopinionated so you,,,
can do things how you want so I'm going,,,
to create an object and let's say ID and,,,
I'm going to just keep it very simple,,,
and take the length of the post and then,,,
just add one to it for the ID okay so,,,
we're keeping it simple in reality you'd,,,
be adding it to a database and most of,,,
the time the database is going to give,,,
you the ID um,,,
automatically and then for the title,,,
this is where we can access request.,,,
body remember it's that object which,,,
will have the title on,,,
it all right and then let's say,,,
if there's,,,
not if that new post doesn't have a,,,
title then let's return a 400 because,,,
that means it's a client error so it's,,,
something the the person making the,,,
request did did something wrong so we're,,,
going to say return,,,
res. status,,,
400 and then we'll add on uh,,,
message so here we'll say message and,,,
we'll say,,,
please include a,,,
title okay um else so basically if there,,,
is a title title then we just want to,,,
add it to the array so let's say post.,,,
push and pass in here our new,,,
post and we're still sending this,,,
back so let's go back to,,,
postman and I'm just going to change my,,,
title,,,
to uh yeah I guess we'll just say Brad's,,,
post and I'm going to send and what I,,,
get back is my post and you can see that,,,
there's a new one here with an ID of,,,
four with the title of Brad's post now,,,
obviously that's not going to persist if,,,
I restart the server it's going to just,,,
go away because it's not being put in a,,,
database but it gives you an idea of how,,,
this would work also in reality you'd,,,
have your your form whether it's just,,,
regular HTML CSS JavaScript or if you're,,,
using react view spelt something like,,,
that now I think it's it it's only,,,
natural that we finish this as a a crud,,,
API and do a put which is an update and,,,
also a delete request so let's go,,,
under where we did the post and Let's do,,,
let's say,,,
update yeah we'll do update post and,,,
we'll take our router and put is,,,
normally what we use for updating you,,,
can also use patch I prefer a put though,,,
and when we update a post obviously we,,,
need to know which one we're updating so,,,
it's going to be API slost slash and,,,
then whatever the ID,,,
is and then we'll have our function with,,,
our request,,,
response and we want the ID so remember,,,
we can get that I'm going to par it I'm,,,
going to parse int and we can get that,,,
with request. prams,,,
doid so that'll give us the ID then,,,
let's get the post so we'll get that,,,
with find so we'll take the post array,,,
and,,,
find and then for each post we want,,,
to uh we want to get where the post ID,,,
is equal to the ID in the,,,
URL then we'll check for the,,,
post so we'll say if,,,
not post then let's return re,,,
and we're going to do a status of 404,,,
not,,,
found and we'll just P put a message in,,,
here and actually let's use back ticks,,,
and we'll say,,,
no what do we what do we do up here um,,,
yeah we can just copy,,,
this all right and then to do the update,,,
I'm just going to Simply take,,,
the title so post title and I'm going to,,,
set it to request. body. booty,,,
request. body. tile and then we'll do a,,,
res status of,,,
200 and we'll send,,,
back the,,,
post and that will include the updated,,,
post so let's try that out so let's say,,,
we want to update slash we'll do two and,,,
I want the title we'll say updated post,,,
and then we send that and what we get,,,
back well we're getting a 404 oh that's,,,
because I'm making a post request this,,,
should be,,,
put so now you can,,,
see id2 the post with the id2 has a,,,
title of updated post so that takes care,,,
of the put request now let's do the,,,
delete so under that we'll say,,,
delete,,,
post so router actually you know what we,,,
could just copy what we just,,,
did delete post and this is going to be,,,
a delete,,,
request same thing it's going to we need,,,
the ID so we're going to keep that we're,,,
going to um par it as an INT and then,,,
we're going to find the post we're going,,,
to check for,,,
it and then,,,
uh let's see all we're going to,,,
do get rid of that all I'm going to do,,,
is basically overwrite the post that's,,,
why I used let when I Define the array,,,
so we'll say post then equals post.,,,
filter and let's pass in our,,,
function for each,,,
post and uh we want to say where the,,,
post ID is not equal to,,,
ID so that'll return all the posts,,,
except for the one with that ID and then,,,
say that we can leave this because we,,,
want to just send back all the posts,,,
with the one that's deleted should be,,,
gone so,,,
let's I guess we could just use this so,,,
let's do,,,
delete and we'll do Post slash1 send and,,,
now you can see the ID with one is,,,
gone so we now have a full fraud API,,,
create read update and,,,
delete now again obviously in the real,,,
world instead of doing this kind of,,,
stuff you would be working with a,,,
database and you'd use some kind of om,,,
for instance if you're using mongodb as,,,
your database there's an OM called,,,
Mongoose and it has methods like find um,,,
delete things like that and you would be,,,
finding and deleting from the database,,,
rather than from just a hard-coded array,,,
like we're doing here here in fact the,,,
code would you have less code because we,,,
have to write more JavaScript to deal,,,
with this hardcoded array than we would,,,
to just uh to use a few methods with,,,
 and if you're using a SQL database,,,
SQ eyes is a really popular orm for,,,
node.js,,,
so that takes care of creating an API,,,
now what I want to do is talk a little,,,
bit about middleware so middleware,,,
functions are functions that have access,,,
to this request and response object and,,,
they can do anything I mean you can use,,,
it for logging you can use it for,,,
authentication you can add to the,,,
request object here for example a lot of,,,
the authentication middlewares will,,,
allow you to add like a rec. user and,,,
then in your row you have access to the,,,
currently logged in user now I'm just,,,
going to do something simple we're going,,,
to create some logger middleware that,,,
will show the method and the end point,,,
in the console whenever a request is,,,
made and you can have middle Weare run,,,
on either the route level so in any one,,,
of these routes or at the app level,,,
where it runs no matter what route is,,,
hit so let's start off by just creating,,,
uh a,,,
function uh we're not going to keep this,,,
here but I'm just going to put it here,,,
for now so we'll make this an arrow,,,
function now middleware functions take,,,
three things in the request and response,,,
remember I said they have access to,,,
those and then also next which is a a,,,
function that you're going to run at the,,,
end of your your middleware function,,,
because what that does is it calls the,,,
next piece of middleware in the,,,
stack so in this logger function let's,,,
do a console log and like I said we have,,,
access to everything that's on this,,,
request object including the method the,,,
protocol the just everything cookies if,,,
you have any so what I want to do is,,,
just log let's put some back ticks in,,,
and then I want to use a variable so I'm,,,
using the money sign the template,,,
literal syntax and let's get the method,,,
we'll put that first and then outside of,,,
that curly brace let's put the protocol,,,
so,,,
request. protocol which would be HTTP,,,
then we'll put colon SL slash and then,,,
we can get the host,,,
name with,,,
doget and then just pass in host okay,,,
and then after that curly brace let's,,,
put the the original URL property so,,,
request. original URL and then finally,,,
we need to call next which again we'll,,,
just call the next piece of middleware,,,
in the stack so as I said we can,,,
implement this on a route level or the,,,
app level so let's start with the route,,,
level let's say I want this logger to,,,
run only on this get all post route so,,,
for middleware to run we just have to,,,
add it as a second argument so I can,,,
simply pass in logger like that and now,,,
when I hit API slost you can see it's,,,
logging it's a get request Local Host,,,
8000 API post if I go to API post SL1,,,
then it doesn't run because it's only,,,
being passed into this one route now you,,,
might have middleware you want it to run,,,
on all routes on the app level so in,,,
that case we're not going to do this so,,,
we can get rid of that and we don't want,,,
this function in this file because we,,,
want to use it in our server JS so,,,
commonly what you'll do let's cut this,,,
commonly what you'll do is have a folder,,,
for your,,,
middleware and we'll create a new uh,,,
we'll create a new file here called um,,,
logger.log,,,
or you could call it like logger,,,
middleware and we'll paste that in and,,,
then we just want to export that as,,,
default okay then we'll bring it into,,,
our server JS so let's import,,,
logger that's going to be SL middleware,,,
SL logger JS and then all we have to do,,,
is is wrap it in app. use that's how we,,,
use middleware so I'll say logger,,,
middleware,,,
app.use and we're just going to pass in,,,
logger so now let's make a request so,,,
this is API post one and you can see now,,,
it's logging that if I do just API post,,,
still logging it if I go to the delete,,,
so any request I make now it's going to,,,
log it down in the,,,
console so that's how you can create and,,,
Implement middleware so now I want to,,,
look at error hand Ling now Express,,,
comes with a default error Handler if,,,
you make a request to something that,,,
doesn't exist like let's say we go API,,,
SL test you'll see this is the default,,,
error Handler it gives us a 404 but it,,,
actually gives us an HTML page and if,,,
you're building an API obviously that's,,,
not what you want so I want to show you,,,
how we can create a custom error Handler,,,
that will give us a Jason response along,,,
with the status code that we want,,,
so let's go to our routes and we'll,,,
start with the single post so basically,,,
wherever we're sending these 404s I want,,,
to instead of doing that here I want,,,
that to happen in the error Handler so,,,
let's actually uh I'm going to just all,,,
I'm going to do is copy this right here,,,
the message itself and then I'm going to,,,
get rid of this return that's inside,,,
here and I want to be able to go like,,,
this oh or yeah we want to be able to do,,,
new error this is what fires off the,,,
error Handler by saying new error and,,,
we're going to pass in a message like,,,
that okay now we do have to call the,,,
next function and next can get passed in,,,
as a third parameter up here so we're,,,
going to pass next into the actual route,,,
Handler and then underneath where we,,,
just said new error we're going to,,,
return,,,
next but we want to pass the error in,,,
there as well so let's do this,,,
error like that okay so in order for for,,,
this to work we have to create an error,,,
Handler which is going to be a piece of,,,
middleware so in middleware let's create,,,
a new file called error.,,,
JS and we're going to say,,,
const error,,,
Handler now just just like any other,,,
middleware this is going to take in,,,
request response and next however the,,,
very first thing it's going to take in,,,
is error and just by doing that just by,,,
passing this first error in it's going,,,
to run when we do this now as far as,,,
what I want to put in here for now let's,,,
just do a,,,
res.,,,
status and we'll just do 404 and then,,,
Json,,,
and for now I'll just do a hardcoded,,,
message so we'll say,,,
MSG and I'll just say,,,
error and we just want to make sure we,,,
export as,,,
[Music],,,
default now to use this just like any,,,
other middleware we need to wrap it in,,,
app.use so let's bring it into our,,,
server JS so,,,
import error Handler and we're going to,,,
do you put the app. below the routes,,,
here otherwise we could have some,,,
conflicts so say error Handler,,,
app. okay,,,
now it should work if we if we get that,,,
error right so if we if there's no post,,,
with the ID that we pass in then it this,,,
should run this should run so let's try,,,
it let's go to API,,,
slost,,,
sl100 and there we go so we get a 404,,,
not found we get message,,,
error now obviously we want this to be,,,
more specific right so we're passing the,,,
message in right here so we can access,,,
that through this,,,
object so right here let's say for the,,,
message instead of just uh Str ring of,,,
error let's say error,,,
do,,,
message so now we'll try that again and,,,
now we get the correct error,,,
message now at the,,,
moment it's it's always going to be a,,,
404 right and I don't want that what I,,,
want to do is check to see if we if we,,,
set a status in the route if we didn't,,,
then I want it to be a 500 by default,,,
which is a server error so what I'm,,,
going to do is,,,
say,,,
if let's say if the error.,,,
status then we'll say res.,,,
status set it to whatever that error,,,
status is and then,,,
Json and in there we're going to do,,,
message and set it to,,,
error.,,,
message okay else if there is no if,,,
there is no status defined,,,
then let's make it a 500 so I'll change,,,
this to a,,,
500 all right so now let's try it again,,,
we'll try to get Post 100 now we can see,,,
we're getting the correct message but,,,
it's a 500 that's the default so all we,,,
have to do is when we Define this error,,,
here right before we return next,,,
we can just do,,,
error. status set that to,,,
404,,,
now hit send now it's a 404 okay so if,,,
it doesn't if it doesn't have an,,,
explicit uh status code then it's going,,,
to just be 500 now let's just use the,,,
error Handler in these the other routes,,,
where for instance,,,
uh where else did we use this like right,,,
here here so instead of returning the,,,
the res status Jason instead of doing it,,,
here we'll let the handler do it so I'm,,,
just going to copy these three,,,
lines and let's go let's see is there,,,
anything up here that we need,,,
no so create new,,,
post so where we check for the,,,
title let's replace this,,,
this with this except I want it to be a,,,
400 and let's,,,
say,,,
please include a,,,
title so let's see if that works if we,,,
go and we try to make a post,,,
request to API post and we don't include,,,
a,,,
title oh next is not defined so in in,,,
your route,,,
we just want to make sure that we add,,,
next and just add it to all of,,,
them so,,,
here that's better practice anyways just,,,
to make sure we have that even if you're,,,
not going to use,,,
it there we go all right so we'll try,,,
that again send with no title and there,,,
we go so we get a 400 bad request and,,,
please include a title,,,
so now let's find where else we can use,,,
the error Handler so,,,
right,,,
here so a post with the ID so basically,,,
we can do the same thing so this right,,,
here and then same thing right,,,
here yeah I think that's,,,
it so we're just letting it go through,,,
the Handler rather than than doing it,,,
here all right,,,
now I want to have a a catch all for,,,
like I said if we go to like API test,,,
which doesn't exist it's not a post that,,,
doesn't exist it's an it's a URL it's an,,,
endpoint that doesn't exist it's still,,,
giving us that HTML page so to have kind,,,
of like a catchall we'll go,,,
underneath let's see we're going to go,,,
under these routes we can do it so let's,,,
say,,,
app.use and let's pass in so we're just,,,
creating another middleware,,,
function so we got,,,
wreck res,,,
next and let's say const,,,
error equals new error so same thing we,,,
did in the,,,
routes let's say not,,,
found and the status so we'll say,,,
error.,,,
status set it to,,,
404 and then call next and pass in the,,,
error all right so if we do that now if,,,
I try to go to API test which is an uh,,,
an actual endpoint or Route 404 not,,,
found and we get message not found and,,,
we could clean this up a little instead,,,
of having it in here we could just,,,
create another file and we'll call it,,,
not found.,,,
JS and then we'll just take the function,,,
here cut,,,
that we say cons not found,,,
equals so we'll do that then we'll bring,,,
it in up here,,,
yeah we'll just do that and we can just,,,
move that down here I think that makes,,,
sense so now that should do the same,,,
thing if we go to API test,,,
good so the next thing that I want to do,,,
is show you an example of using uh,,,
another package and we're going to use a,,,
small Library called colors that allows,,,
us to basically just add colors to the,,,
console and we'll make our little logs,,,
here pop a little more by adding color,,,
to it so you can either stop the server,,,
for a minute or you can open up another,,,
terminal I'm just going to open up,,,
another one and I'm going to run npm,,,
install,,,
colors and if you go to package.json you,,,
should have colors as a,,,
dependency so we're going to be using,,,
this in the logger file let's just close,,,
up some of this stuff that we don't need,,,
and we're going to go to middleware,,,
logger,,,
JS and we want to bring in colors so,,,
import colors from,,,
colors and the way that we can use this,,,
I believe we can just I haven't used,,,
this in quite a while but I believe we,,,
can just go like this add an array and,,,
and then put,,,
like,,,
red I think that's me let's see just try,,,
that yeah see so now it's,,,
red and it doesn't it right now it,,,
doesn't matter which requests we make or,,,
anything like that it's just all going,,,
to be red but what I'd like to do is,,,
make it so if it's a if it's a get,,,
request will make it green if it's a,,,
post request will make it blue and so on,,,
and there's a lot of ways we could do,,,
that we could have a bunch of if else,,,
but I think to Define an object and,,,
Define a mapping of HTTP methods two,,,
colors would be the cleanest way to do,,,
this so let's go above the the console,,,
log and let's say const method colors,,,
and set that to an object and we'll say,,,
forget let's make that,,,
green for,,,
post blue,,,
for put we'll do,,,
yellow and then for delete we'll do,,,
red all right and then all we have to do,,,
is let's create a variable called color,,,
set that to our method colors and then,,,
the request. method because remember we,,,
have access to that or it'll just be,,,
white and then we can just replace this,,,
in this uh array here replace red with,,,
the color,,,
variable so,,,
now let's make a get request you can see,,,
that it's green if I make a post request,,,
blue put,,,
request I mean these are not found,,,
because it's API test but it doesn't,,,
matter it's still it's making the,,,
request so it's still going to log and,,,
then delete,,,
is,,,
red so it's just it it you can see how,,,
much Freedom you have with Express it's,,,
it's very minimalistic and you can use,,,
all types of libraries to to do what you,,,
want and and create any kind of,,,
middleware that you want you have total,,,
control over the whole request response,,,
cycle now the next thing I'd like to do,,,
is move all the functionality from the,,,
routes file I want to have controller,,,
methods I think that that's a cleaner,,,
way to do this rather than just having,,,
all the the logic inside the route file,,,
I just want the route file to to point,,,
the,,,
correct whatever that endpoint and,,,
Method point to a controller method,,,
rather than putting everything in here,,,
so this would go in its own function in,,,
the controller file so let's create a,,,
new folder called,,,
controllers and then inside controllers,,,
we'll have a file called post,,,
controller.js and then in here we're,,,
going to define a bunch of different,,,
functions I'm going to use Arrow,,,
functions so for instance we'll have get,,,
posts and we'll set that actually you,,,
know what we could do is,,,
just go to our uh routes post file and,,,
just grab this,,,
entire function right here and cut,,,
it so we'll cut that and then we'll set,,,
get post equal to,,,
that and what I'll usually do and if,,,
you've ever taken my node.js courses or,,,
mstat courses in my controller methods I,,,
like to have a description and a comment,,,
just saying what it does so this will,,,
get all post and then I also like to put,,,
the route so we'll say a route uh in,,,
this case would be a get request to SL,,,
API SL,,,
post and then I I would also put access,,,
but uh we don't have authentication so,,,
there's no reason to do,,,
that so next we'll have let's do,,,
description get single post and then,,,
route this would be slash API SL poost,,,
slash and then the,,,
ID space that out a little more,,,
all right and then we'll have get,,,
post and set that equal,,,
to and we'll grab,,,
this cut,,,
that paste that,,,
in all right I'm just going to copy this,,,
so the next one would be to create a,,,
post or create new post,,,
post and oh I forgot,,,
the method yeah so we want to do that,,,
and then,,,
post create post set that,,,
to this,,,
okay and I'm just going to copy this,,,
again so we get two more we get,,,
the,,,
update and the delete,,,
all right so,,,
const all right so let's,,,
grab,,,
this so that's the,,,
update and then we got the,,,
delete oops,,,
okay so these these methods have to be,,,
exported you could either do it at the,,,
bottom or you can just simply put export,,,
before each one which is I guess what,,,
I'm going to,,,
do okay so looks ort those now we want,,,
to import them into the routes file oh,,,
this to obviously we need access to the,,,
posts in the,,,
controller so that will go at the very,,,
top okay and then from here,,,
let's,,,
import from and then we're going to go,,,
let's see up one level into controllers,,,
and then post,,,
[Music],,,
controller.js and then I'll we have to,,,
do is,,,
replace what we just cut out with the,,,
the name so get,,,
post this will be get,,,
post so you can see how much we're,,,
cleaning this,,,
up and let's see,,,
get poses oh I didn't bring them in so,,,
right here we need to bring in,,,
get all right so everything should still,,,
work the same so if I try to get post,,,
two okay that works if I try to get all,,,
posts if I try to get a post that,,,
doesn't,,,
exist okay error Handler is working good,,,
so I think that this is cleaner to have,,,
these these named functions here and,,,
then to have our routes that just point,,,
to those named functions and I just,,,
realized that I have create post here,,,
this should be delete,,,
post all right now what I want to do,,,
next is give you an example of how we,,,
can interact with our backend from the,,,
front end and we already have a public,,,
folder with some HTML files and I'm not,,,
going to this is going to be very like,,,
very simple I'm not going to create a UI,,,
with styled CSS or anything we'll just,,,
make it so we can have a button we click,,,
and it fetches data we'll also just have,,,
a simple form where we can add a add a,,,
new post add a title all right and we're,,,
going to do that that's why I kept this,,,
commented out because we're going to use,,,
this um this Express static middleware,,,
because I want to be able to use those,,,
HTML files now we're going to have an,,,
issue here and you'll see if I save this,,,
I get an error and if we look at this it,,,
says double undor dur name is not,,,
defined in es module scope the reason,,,
this isn't working this right here this,,,
this usually will you know get the C the,,,
current directory that you're in it,,,
doesn't work when you when you're using,,,
ES modules it's in the scope of the,,,
commonjs modules however there is a,,,
workaround so we're going to just uh,,,
just add a couple lines here to make,,,
this work so first thing I'm going to do,,,
up here I'm actually going to,,,
import a function from the URL from the,,,
URL package or the URL module which is,,,
is part of node.js so we're going to,,,
import from URL and the name of the,,,
function is file URL to,,,
path and then basically what we're going,,,
to do is create this our s because it's,,,
not available to us because well I mean,,,
if you're using commonjs it is available,,,
to you but if you're using this import,,,
syntax it's not so I'm going to go right,,,
here let's say get the,,,
directory get the directory name so,,,
first off we're going to create double,,,
uncore file name that doesn't exist,,,
either anymore but we can create it,,,
oursel by using the file URL to path and,,,
then passing in import. met. url and,,,
what this gives you is your file URL to,,,
the the current file we're in it'll give,,,
us like file it'll look like this right,,,
and then path to whatever file we're in,,,
um I don't want the file URL I want the,,,
just the path and that's what this does,,,
is it gets you just the path and we can,,,
do a console log here,,,
of file name and even though we have the,,,
error it should,,,
still show us above,,,
that um right here so see,,,
this users Brad traversy desktop so,,,
that's that's my path and this is the,,,
file or server JS um to get the path,,,
name or the D the directory name let's,,,
say cons Dore durame all we have to do,,,
is then use the path module and there's,,,
a durame method that we can use and then,,,
we can just pass in that double uncore,,,
file name so now everything works right,,,
we're not getting any more,,,
errors so now that that works we have,,,
our static folder and if I were to go,,,
to Local Host 8000 we should see the,,,
homepage right because I have that index,,,
HTML I also have that about page so if I,,,
go to slab HTM ml shows me the about,,,
page now this this index HTML this is,,,
where I want to have some frontend,,,
JavaScript to fetch the data from my,,,
back end and you'd probably be using,,,
something like react some kind of,,,
front-end framework or Library um we'r",,,
e,,,
not doing that we're just using vanilla,,,
JavaScript but the way that you would,,,
fetch data and stuff is going to be the,,,
same you're going to use the fetch API,,,
or something like axios so let's go to,,,
the public folder and then index,,,
HTML and I'm just going to change a,,,
couple things up here we'll say post,,,
again this isn't going to be like a nice,,,
looking UI or anything so H1 we'll say,,,
post I'm going to have a,,,
button and given an ID of,,,
get- post-,,,
BTN say get,,,
post and then let's have an out output,,,
ID and then we need a front-end,,,
JavaScript file so we'll have a script,,,
tag with a source let's say,,,
[Music],,,
sljs main.js that'll be our front-end,,,
JavaScript so in public let's create a,,,
folder called,,,
JS and then create a file called,,,
main.js all right and,,,
then let's go ahead and I'm sure that,,,
you guys don't really need me to explain,,,
much here it's just frontend JavaScript,,,
we're going to use document. Query,,,
selector and I want to get that output,,,
ID,,,
element and let's also get the,,,
button so,,,
get- post-,,,
BTN and we'll call,,,
this uh button,,,
all right and then I'm going to have a,,,
function we'll make this an async cuz,,,
I'm going to be using a sync of weight,,,
so we'll make an a async function called,,,
show,,,
posts and let's just say get,,,
and show post all right so we'll say,,,
const res set that to,,,
await,,,
Fetch and we want to fetch from our API,,,
so,,,
HTTP and Local Host Port,,,
8000 SL API slost same endpoint that,,,
we've been using in,,,
Postman and then we'll say,,,
if um so if not res. okay so something,,,
goes wrong and we can't fetch then let's,,,
just do throw,,,
new uh throw new error,,,
say failed to fetch failed to fetch,,,
posts okay then underneath that let's,,,
say cons post set that to await the res.,,,
Json and we're going to take the output,,,
dot enter HTML I'm going to set that to,,,
an empty string to begin with okay then,,,
we're going to Loop through the posts so,,,
we'll say post dot for,,,
each I mean there's a million ways to do,,,
this this is just a very quick way so,,,
let's say for each,,,
post then we're going,,,
to let's say post,,,
element uh we'll set that to document,,,
dot so I'm going to create an element,,,
for each,,,
post and that element will be a,,,
div okay then we'll take our post,,,
element d,,,
and let's add some text content and set,,,
that to the post.,,,
tile and then we're going to take the,,,
output and append,,,
child and we want to append that post,,,
element okay we should probably put this,,,
in a try,,,
catch so let's do,,,
that just take this,,,
okay and in the catch just do a console,,,
log and we'll say,,,
error fetching,,,
posts all right now we just,,,
need an event listener so let's say,,,
event listeners we'll have the button,,,
and let's listen for a click,,,
event and when we click that we're going,,,
to call show,,,
post all right so let's go to our,,,
homepage and now if I click get post,,,
there we go post one two and,,,
three right if I were to add a new post,,,
by making a a post,,,
request of a title let's say new post,,,
send okay and then I go back,,,
here there we go see our new,,,
post so now let's make it so we actually,,,
have a form here an input that we can,,,
add a new post so let's go back to the,,,
HTML and I mean I know that a lot of you,,,
guys probably already know this stuff,,,
but it's just for those of you that,,,
aren't really familiar with full stack,,,
development how we can interact with our,,,
API with our back end from the front end,,,
so I'm going to add just a very simple,,,
form so we'll put this let's see we'll,,,
just put this under the,,,
H1 say,,,
form no action but I am going to give it,,,
an ID of,,,
add post,,,
form and we'll give it a label let's say,,,
for,,,
title and I'm just going to put a line,,,
break I'm not using any CSS at,,,
all so we'll put an input let's let's,,,
give it an ID of title type is going to,,,
be,,,
text we'll give it a name of,,,
title and we'll put a line break here as,,,
well and then let's do a button give it,,,
a type of submit,,,
okay so we should now have a very ugly,,,
looking,,,
form and when we submit this obviously,,,
we want to make a post request and add,,,
some data add a post so let's go back to,,,
our main JS our frontend,,,
JavaScript and let's create a,,,
function so this will be also,,,
async function we'll call it add,,,
post and I'm going to pass in our event,,,
param we want to prevent the default,,,
Behavior so e. prevent default then for,,,
the form,,,
data I'm going to set that equal to new,,,
a new form data object and pass in,,,
this and then we can get the,,,
title with form data,,,
doget and,,,
title all right so that'll give us the,,,
title then for the request I'm going to,,,
put that in a try,,,
catch and let's say conr set that to a,,,
wait,,,
Fetch and we're going to make a request,,,
to,,,
http Local,,,
Host 8000 API poost now we want this to,,,
be a a a post request so we're going to,,,
pass in an options object as a second,,,
argument with a,,,
method of,,,
post and we're going to set,,,
headers and we want to set the content,,,
type I want to set that to,,,
application SL,,,
Json and the body,,,
so the data we're going to send we're,,,
going to wrap this in json.stringify,,,
and pass in an object with the,,,
title all right and then after that,,,
let's check to see if it's not okay so,,,
we'll say if not res.,,,
okay then,,,
throw we say Throw new error and fail to,,,
add post,,,
okay then here let's say const new,,,
post set that to await res.,,,
Json then I'm going to create post,,,
element document,,,
dot uh create element that's going to be,,,
a,,,
div okay then we're going to take that,,,
post element and we're going to add t,,,
text content which is going to be the,,,
new,,,
post.,,,
tile and then we just want to append,,,
that to the,,,
output so,,,
output pen child post,,,
element and then in the catch here let's,,,
just do,,,
a we'll do a console. error,,,
all right and then we just need another,,,
event listener that's going to be on the,,,
form which did I bring in I didn't bring,,,
that in so up,,,
here add post,,,
form,,,
form it's going to be a submit,,,
and it's going to call add,,,
post all right and actually we want to,,,
let's show the post after too so right,,,
at the end here we can just call show,,,
post this is just very very quick,,,
JavaScript that I just created um so,,,
this should work though so let's reload,,,
it let's go ahead and,,,
say Brad's post add post and there we go,,,
and I can you know keep adding them,,,
cool so just an example of frontend,,,
JavaScript working with our backend,,,
API so where we at now I,,,
think I think that I've covered,,,
everything I wanted to as far as you,,,
know building an API I I do want to get,,,
a little bit into template engines,,,
because you might want a build just a a,,,
server side app similar to like what you,,,
would do with PHP um and there's a bunch,,,
of template engines you can use ejs,,,
embedded JavaScript is my favorite um I,,,
think it's it's very similar to how PHP,,,
works as far as the tags go and all that,,,
and I I don't want to use it in this,,,
project so I think what I'll do is just,,,
create a whole new folder and and go,,,
from there so I'm going to stop this,,,
server,,,
and I'm going to close that up and then,,,
create something,,,
else so let's do this isn't going to be,,,
very long I'm not going to get too deep,,,
into it so let's,,,
create uh I'll make a directory call,,,
this Express,,,
2 CD into Express 2,,,
and open up vs,,,
code all right let's put this in here my,,,
little,,,
square okay so we're going to basically,,,
just start from scratch here but I'm,,,
going to go kind of quick so npm and nit,,,
and then we're going to create I'm going,,,
to call it app.js this,,,
time and let's install Express npm,,,
install Express now we're also using ejs,,,
so let's install that as well so Express,,,
and ejs,,,
those should get,,,
added as,,,
dependencies and then I'm just going to,,,
add a script start script,,,
here so this will be node not server,,,
node,,,
app and then let's do a,,,
Dev and this will be node,,,
d-at app,,,
and let's use es modules you don't have,,,
to but that's I just prefer it so we'll,,,
say not module,,,
type and module all right so we'll just,,,
create a basic,,,
server so we want to initialize,,,
Express and we want to,,,
listen I'm not going to bother with,,,
environment variables or anything like,,,
that just say server started all right,,,
[Music],,,
so the way that we configure ejs is,,,
actually very simple so let's,,,
say config ejs so basically we just got,,,
to set the the view engine so we do that,,,
with app. set,,,
and we want to,,,
set view,,,
engine and then we also want to pass in,,,
ejs as a,,,
string then we also want to set the the,,,
folder that we want as our views folder,,,
so let's say app. set I think it's views,,,
by default so you might not need to add,,,
this but I do anyway so I want to set,,,
the view view folder to a folder called,,,
views all right and then let's see we'll,,,
create a route let's say,,,
app.get so app.get,,,
slash and,,,
request request response now since we,,,
we're using a template engine we have,,,
access to res. render so if I say,,,
res. render and I pass in here index,,,
it's going to look for an index page in,,,
My Views folder so let's create that,,,
let's say new folder,,,
views and inside that we're going to,,,
create index Dot and it's going to be,,,
ejs is the extension that we want to,,,
use and in here let's just create like a,,,
basic,,,
HTML I'll just say welcome,,,
H1 welcome,,,
all right now I'm going to run the,,,
server so npm,,,
runev so server started now let's go to,,,
the browser let's go to Local Host 8000,,,
and we get,,,
welcome okay so it's using v um VJs it's,,,
using,,,
ejs now what's really cool about these,,,
template engines is not just that we can,,,
render HTML pages I showed you that in,,,
the very beginning but we can pass in,,,
Dynamic data right so if you,,,
have if you if you have like if you,,,
fetch data from a database you can pass,,,
it into the view now I'm not using a,,,
database but just to show you how to,,,
pass data we can just add an object as a,,,
second argument here and let's say we,,,
want to pass in title so we'll say title,,,
welcome and then let's say,,,
message and we'll say,,,
hello from ejs all right so I'm passing,,,
these these variables in title and,,,
message and then I can go into my my,,,
page that I'm rendering let's say for,,,
the title instead of welcome I want to,,,
show that variable and the Syntax for,,,
this is going to be an angle bracket and,,,
then percent sign and then equals and,,,
then whatever the variable and then,,,
close it with percent brackets so very,,,
similar to PHP and then let's say we're,,,
I have this H1 that's where I want to,,,
put the message so again I'll use my,,,
percent equals and then message and then,,,
percent angle bracket okay so now we'll,,,
check that out if I reload we get,,,
welcome in the in the tab here and,,,
that's coming from this right if I,,,
say my,,,
website so now my website in the title,,,
we got hello from ejs which is the,,,
message so you can pass this Dynamic,,,
data in you can also pass in arrays so,,,
let's say we want to pass in we'll say,,,
people make that an,,,
array,,,
John uh,,,
Jane and Jack all right so now I got,,,
these people and ultimately these would,,,
most likely come from a database and,,,
then let's say I want to put them in a,,,
UL so I'll use my ejs syntax and we can,,,
take that people variable which is an,,,
array and then do four,,,
each and say,,,
person and open curly brace and then we,,,
can close off this line and then down,,,
here we'll open up another,,,
one and that's where we'll have our,,,
closing curly brace in,,,
parentheses and then in the middle here,,,
we could put An,,,
Li and then we could,,,
output each,,,
person okay so let's try,,,
that reload and there we go so this is,,,
good if you have something if you have a,,,
a project where you don't really need uh,,,
a very Dynamic UI and you just want to,,,
fetch data show it stuff like that I,,,
mean ejs something like ejs could be a,,,
really good option you can also have,,,
partials so for instance if we want to,,,
have if we're going to have multiple,,,
pages and we want a header on every page,,,
obviously we don't want to put it you,,,
know put the header code the header HTML,,,
in every single view so we can create uh,,,
let's do a folder here called,,,
partials inside the views folder and,,,
we'll create header.,,,
ejs and let's just,,,
put a header with an H1,,,
okay and then if I want to include that,,,
in my index file I can use an include so,,,
I'll go right here and the Syntax for,,,
this it's changed from from back in the,,,
day now you're going to do uh a hyphen,,,
like that and then you can do,,,
include and then the location which is,,,
going to be partial slash the location,,,
is going to be from from within the um,,,
the views folder there so,,,
ejs and then close that off so,,,
now you can see now we have the header,,,
showing all right and you can also have,,,
layouts obviously so you don't have to,,,
repeat yourself with all with this stuff,,,
but I'm not going to get too too much,,,
into this I just wanted to show you it,,,
is possible you don't always have to,,,
build,,,
apis um with Express but hopefully you,,,
guys learned a little something from,,,
this I know a lot of you probably,,,
already knew a lot of the stuff but even,,,
if you did hopefully you could pick one,,,
or two things up and for those of you,,,
that are new to express if you're,,,
overwhelmed don't worry about it things,,,
will will start to click as the more you,,,
work with it um but that's it guys,,,
thanks so much for watching and I'll see,,,
you next time",,,
32M1al-Y6Ag,"what's going on guys welcome to my
node.js crash course so I like to revamp
these every few years or so it's been
about 3 years since the last node.js
crash course and I'll go over what I'm
going to cover in a few minutes but I
just want to say that this is for all
skill levels because we're not using any
Frameworks like Express and when you
build an app or an API 99% of the time
you use a framework like Express or
fastify or Adonis or something like that
which really makes things easy and gives
you the tools to create routes and add
middleware and just makes things a lot
easier now this video is much more
lowlevel so we're going to we'll do
things like create a server explore the
HTTP module as well as other core
node.js modules so even if you have
experience with say node and express
there's probably going to be some things
here that you haven't really worked with
and if you're an absolute beginner it's
a good start to to just learn node by
itself and know what it's capable of all
right so sit back back I would suggest
following along just because I think
that you can learn a lot more that way
but if you want to just watch that's
fine as well so we're going to just
spend a couple minutes on some slides
and then we'll jump right into the
code okay guys so before we get started
let's define what nodejs actually is so
many absolute beginners think that
node.js is some kind of framework or
library or even a language but it's not
it's a JavaScript runtime and a runtime
is a program or an environment that runs
other programs so we can build
JavaScript applications and run them
right on your computer or right on the
server now node.js was built with C++
and it uses the powerful V8 JavaScript
engine that's also used with the Google
Chrome web browser node.js can be used
for a lot of things but it's mostly used
for developing serers side and
networking applications apis
microservices it essentially allows you
to to use JavaScript to write serers
side code and do a lot of the same
things you would do with python or PHP
or C and other server side languages now
traditionally JavaScript was only used
on the client side in the web browser to
do things like form validation animation
small stuff like that but with node.js
JavaScript has really become a truly
powerful full stack language and again
you can do a lot of the same things you
can do with other server side languages
and there are actually other JavaScript
runtimes such as Dino and bnjs and those
are really cool to explore they're much
newer Technologies but they don't really
have a space in the industry yet um so I
would definitely suggest starting with
node.js I would never suggest that
someone start with something like bun JS
or Dino just because it's it's so new
and you're most likely not going to find
jobs using those Technologies just yet
there's also not really uh you know a
large community or support for them
either so nodejs is very fast and
scalable due to its architecture and the
V8 engine uh it's also pretty popular I
think it's somewhere something like 6.3
million websites use node.js and it's
used by companies like Netflix Uber
LinkedIn and in addition to really large
companies node is also real a really
popular option for startups and smaller
projects as
well now I want just want to quickly go
over over what we're going to cover in
this course and in kind of the order
we're going to do it in so of course
we're talking about now what node.js is
I'll talk a little bit about how it
works under the hood as well um we're
going to install it set up a project set
up the package.json which is a kind of
like a manifest file we're going to look
at some custom modules and which are
basically just files that we can create
and we can Import and Export uh
functions and data from those files to
and from those files and there's really
two module systems that we can use
there's commonjs which is kind of
node.js is native system and then you
can also use es modules which is the
import syntax that you use with react
View and all the frontend JavaScript
stuff so I'm going to show you both but
ultimately we're going to stick with es
modules that's just what I prefer it's
more modern now when it comes to the the
core modules that that node includes I
think the HTTP module is one of of the
most important to kind of understand
when you're getting started and this is
what allows you to create a server and
accept requests and give responses so a
big part of this tutorial will be using
the HTP module now in real life like I
said earlier you'd probably use
something like Express which is a web
framework that makes things much easier
uh and I'm also going to be revamping my
Express crash course as well but Express
uses or sits on top of the HTP module so
it's good to know how this works and how
to accept requests how to work with them
um how to send responses back send Jason
back and deal with HTTP headers and
methods and all that stuff so that's
really what we're going to cover um in
this course or in in that part of the
course we're even going to look at some
custom middleware which are functions
that sit between incoming requests and
outgoing responses now when it comes to
some of the other core modules we're
going to be going over those in the
second part of the course so the file
system module
path module URL events things like that
so I'll cover the basics of all those as
well now one common mistake that I see
people do is jump to node.js too quickly
before learning node.js you should have
a good understanding of JavaScript so of
course you should know all the
fundamentals variables functions Loops
objects classes you should have a good
understanding of that stuff most
definitely now I'd also suggest that you
understand a synchronous PR programming
so you should know things like callbacks
promises the Asin a weight syntax
chances are you'll be building web
applications in Json apis with node.js
so you should understand how HTTP works
the request response cycle you should
know about HTTP methods like get post
put delete um you should know the common
status codes 200 404 500 things like
that and you will be learning more about
this stuff as you learn about node.js
and even in this very video
now you probably are coming from
front-end JavaScript so you've probably
worked with j u uh API Json apis you've
probably consumed them well now you're
going to be creating them most likely so
it it helps if you already have a basic
understanding of how they work like I
said HTTP methods and Status codes and
all that and then npm the node package
manager you probably have some
experience with I mean if you're using
react or any front-end framework you're
usually installing that stuff with npm
so you probably have an idea but you
will also learn about npm and and
package.json and stuff in this
video all right so let's talk a little
bit about how nodejs works and I'm not
going to go too deep into this because I
I want this to be practical and easily
digestible but you should have a basic
idea of how node Works under the hood so
as I said node is built on top of the V8
JavaScript engine which is the same
engine that powers Google Chrome other
browsers have their own engines like
Firefox has spider monkey Safari has
JavaScript core the V8 engine is written
in C++ and it's it's what takes your
JavaScript code and converts it into
machine code so that your computer can
understand and node has taken this
engine and extended it to work on the
server side now node.js is what we call
nonblocking which means that it doesn't
wait around for Io operations which are
input output operations and those are
things like Network calls file system
operations database operations and
instead of blocking the execution of
code while waiting for these things to
happen or these things to complete
node.js uses events and callbacks and
this allows it to handle thousands of
connections at the same time and this is
why node.js is so fast and efficient now
in node.js there's a a single main
thread that executes your JavaScript
code and you can think of a thread as a
set of instructions that your computer
executes and in a single-threaded
environment there's only one set of
instructions that are executed at a time
this is different from multi-threaded
environments where you have multiple
threads that can execute different parts
of your code simultaneously so node.js
uses something called the event Loop
which is a mechanism that allows node to
perform non-blocking IO operations and
when you make a a network request for
example node.js doesn't wait for that
request to complete instead it continues
to execute execute the rest of your code
and when that request does complete it
triggers a call back which is then added
to the event queue and the event Loop
picks up the call back and then executes
it so I know this is a little tough to
understand so the analogy that that I
like to kind of describe and what helped
me is to imagine the event loop as one
of those giant revolving doors at the
mall or something like that and each
person represents a task or operation
initiated and as a person walks into the
building that's initiating a task
instead of waiting for them to complete
their business inside the mall we'll
call that the task execution node.js
keeps the revolving door spinning
signifying the event Loop now as each
person finishes their task in the
building they exit the revolving door
representing the completion of their
task and the event Loop or the door
keeps the flow going handling incoming
tasks and ensuring that the program's
execution remains uninterrupted so when
a callback executes in node.js it's akin
to a person executing that revolving
door and it would Mark the completion of
their task and while the event Loop
keeps processing and flowing it it waits
for others to enter now I don't know if
that analogy helps or if it just
confused you more but that's kind of how
it works and it's not that important for
you as a beginner to understand how
everything works under the hood right
now uh it's more learning the syntax and
how how to handle incoming requests and
send responses and things like that now
as far as what node is used for it's
used for a lot of things so of course
building apis and this could be restful
apis graphql apis um server rendered
apps so of course we can serve Json data
but we can also serve HTML pages and we
can use different template engines like
ejs mustach um there's all types of of
engines that you can use to serve HTML
Pages dynamic Pages it's also great for
realtime applications like chat uh
realtime games collaboration tools
things like that uh microservices so
microservices are small independent
services that work together I actually
just did a crash course on microservices
if you're interested command line tools
you can build CIS command line
interfaces bots so for example you could
build a Twitter bot or a bot for slack
or Discord web scraping no. js's is good
for web scraping and there's a few
different Frameworks that you can use
for that as well and then web servers of
course and it could be a sophisticated
web server handling complex routing and
serving Dynamic content or just a simple
static file server what node.js is not
great for is CPU intensive applications
so as we talked about no. JS is single
threaded and uses an event Loop which
which makes it great for Io operations
but not so great for CPU intensive
operations so if you're doing a lot of
heavy computation and things like that
you probably want to look more into like
python Ruby Java and other server side
languages but that's it for the slides
now what I want to do is jump in we'll
talk a little bit about installation
which is very simple and we'll start to
set up a project and then we'll go from
there all right guys so this is the
official node.js website nodejs.org and
as far as installation goes it's very
simple if you're on Windows or or Mac
you can just simply go to the site click
download download the LTS which is the
long-term support version you can
download the absolute latest version if
you want there might be some extra
features there but I usually uh I
usually suggest using the LTS and then
you can just run that file I already
have it installed in this machine so I'm
not going to run it but it's just like
any other installer just go through it
and then node should be installed now if
you're on Mac you can also use Homebrew
and of course if you're on Linux you can
use your you know whatever the package
manager for your drro is and get it
installed that way and then you just
want to open up a terminal or command
line prompt and just do node-- version
and that will show you the version
that's installed and nodejs comes with
npm which is the node package manager
which you can use to install thirdparty
packages and you can just make sure that
that's installed as well now nodejs does
come with a repple which stands for read
a Val print Loop and it's basically just
an a command line environment to run
JavaScript and you can start that by
just typing node and then enter so from
here I can type in any JavaScript that I
want now you're probably not going to
use this much but it is a a nice way to
kind of test out code and just
experiment with JavaScript and not have
to do it through a file through the
browser or anything like that um so I'll
just give you some examples we can we
can do a
console.log and obviously when you're
using when you're doing frontend
JavaScript the console pertains to the
console in the browser this pertains to
the terminal so if we do console log
hello world and run that it's going to
just spit it out to the terminal to the
console and undefined just means that
there's nothing being returned from this
line now you can also create variables
like we can say name
John and obviously I get undefined
because that doesn't actually return
anything if I do a
console.log of the the variable of name
then I should see John you can also
create functions like I could create we
use a oneline arrow function here called
greet and we'll just return uh let's
just return we can put some back ticks
in here and say hello and then put our
name
variable and then we can call that
function and we get hello John all right
so like I said you're probably not going
to use this much but it is it is there
for you to to test out code or whatever
you want so you can just do control or
command C to to to get out of that now
from here I just want to create a folder
to work in you can either use your
Explorer or file manager or you can use
the terminal and just do make directory
and I'm going to call this no.
js- crash
d224 okay and then I'm just going to CD
into that folder and then from there I'm
going to open my text editor with code
dot if you're not using vs code just
open that folder up in whatever editor
you're using so close that and now I'm
just going to use the integrated
terminal for any any commands that I
want to run now 99% of the time the
first thing you're going to do when
you're starting a new node.js project is
create a package.json file so we can do
that by using an npm command so in the
terminal we can say npm in knit and
there's going to be some questions asked
and if you wanted to skip those
questions you could just add- why but
I'm going to go through those just so
you can see what they are so the package
name whatever is in parenthesis is the
default so you can just hit enter to
accept that version um description I'm
just going to say
nodejs crash course
code and then the entry point which is
like your main file index.js that's fine
and then you can just enter through this
stuff if you want you can put your own
name and then for license I usually put
MIT and then enter and that will create
a package.json file for you so you never
have to create this manually and this
has you know basically the stuff that we
just that we just answered and then it
also has scripts so basically you can
create what are called npm scripts to do
certain things like start your server
stop it run tests all kinds of stuff and
I'll get more into that a little later
so now that we have a package.json file
the next thing you would usually do is
create an entry point which is your main
file the file you're going to run you
usually when dealing with nodejs or any
language really you're going to have a
project structure with files and folders
and usually you have one entry point and
the other stuff is just imported into
other files so let's create a file I'm
going to call it index.js and you might
see this as appjs or server.js I usually
like to use index now from here we can
just type JavaScript so I can do a
console log let's just say hello world
now since we have nodejs installed on
this machine I can run this file from my
terminal by saying node and then the
name of the file which is
index.js make sure you're in the correct
directory and you'll see Hello World
printed to the console and you don't
even have to do the JS we could just do
index which is the name of the file and
then that runs it as well okay and you
can put any JavaScript that you want
here okay now there are some differences
so for instance when you're in the
browser environment and I'm I'm I'm
assuming that a lot of you are coming
from the front end so in the browser you
have this window object right if I were
to run it you'll see I get an error says
window is not defined that's because
there's no browser so there is no window
object now there is something called
Global which is similar but it doesn't
it obviously doesn't represent a browser
window it represents just the global
object and you can see that there's uh a
bunch of stuff on this uh on this as
well such as set timeout set interval
these are actually not part of
JavaScript they're part of the web API
in the browser but they're also
available in node.js because of this
global object all right now there's also
not a document object so there's no Dom
right because there's no document uh the
document pertains to the browser and its
environment so that's not available but
there is a process object so that
pertains to the current process that's
being run so you can see there's a bunch
of stuff on here that you can get as
well you can get environment variables
things like that and I'll talk more
about Pro the process later all right so
yeah so those are basically it's just
the environment is different but as far
as the JavaScript language goes it's all
the same and that's what's great about
building full stack when you're using
like react or view or anything like that
you're you're writing the same language
on the front end as you are on the back
end which is nice rather than doing
JavaScript on the front end and then
python or for PHP or something on the
back end which is also fine but I like
to have it all you know all in one now I
want to talk about modules so usually
like I said you'll have a structure of
files so let's go ahead and create a
utils.py simp Le we'll just say math.
floor so we're going to round down math.
random and we'll multiply that by 100
and then add one so it's basically going
to give us a number between one and 100
uh 100 now I want to be able to use this
function in other files so in order to
do that we have to export it now the
system that I'm using right now is
called commonjs it's like the native
nodejs module system and I'm going to
show you how to do do with that first
and then I'm going to show you how we
can switch to es modules which is the
more modern syntax that you use with
with front-end Frameworks so with
commonjs what we would do is say module.
exports and whatever we want to export
we set this equal to so let's say
Generate random number we don't use the
parenthesis here now since I exported it
I can import it where I want so let's
import it into the into this file so to
do that we'll say const and then
Generate random number and then we use
the the require syntax that's commonjs
and then we want to do do slash which is
the current directory and then utils and
with commonjs we don't have to do the JS
at the end so now I should be able to
let's do a console log we'll put some
back ticks and we'll say random
number and then we should be able to use
that function so now if we run this file
with node index I get random number 67
random number 79 so I can use other
functions from other files and it's not
just functions that you can export you
can also export objects or arrays and
other types of data now this is what we
call a default export because it's it's
one thing being exported however you
might have other functions that you want
to export so let's create another one
we'll call this Celsius
to Fahrenheit and let's say it takes in
Celsius argument and then let's see the
the formula for that
is let's see that whatever that Celsius
value is multiply by 9 and then divide
that by five and add 32 so that should
give us the fahrenheit now I want to
export both of these so what I need to
do is export an object like this and put
both functions in there like that and
then when I UT pord it I'm going to wrap
this in uh curly braces and then I can
just go ahead and import both and then
I'll come down here we'll do a console
log with back ticks we'll say Celsius
to uh
Fahrenheit fahit I don't know if I
spelled that right and then we should be
able to
run that function and we'll pass in
let's pass in um 32 I'm sorry passing
zero Celsius 2 Fahrenheit so that should
give us 32 all right so you can see
right here Celsius to Fahrenheit 32 so
that's like a a quick crash course on
commonjs syntax now I want to show you
how to use es modules which is the
import export syntax now there's one
thing we have to do in order for this to
work and that is in the package.json
file we have to add in here type and
then we're going to set that you see we
have two options here commonjs which is
the default and then module so we just
have to set type to module and then we
can use it so let's create another file
I'm just going to call this post
controller.js so we'll say we're
building some kind of blog API or blog
app and this will be where we can fetch
our post and stuff now usually you'd
have some kind of database you would use
a um a third-party package like SQ eyes
or mongoose to interact with your
database but we're just going to create
some hardcoded posts so we'll have an
array an object we'll just have an ID
and a title so we'll just say post one
and then we'll copy that down and this
will be post
two id2 all right so let's say we want
to have a function and we can use Arrow
functions as well of course so we'll say
get
post and we'll set that to an arrow and
then we'll just return the post
so very simple and then to export
there's a few options we can do this we
can simply just put export before it and
then in our index JS I'm just going to
comment this stuff out you can just
ignore that now so to import we can do
this and it's not exported as default so
it we need to have these uh these curly
braces around get post now with es
modules when you're using it with nodejs
we do have to add the Js yes at least I
I think we still have to let me just run
that yeah so you see how we get an error
so cannot find module did you mean to
import post
controller.js so if I do that and I run
the file I shouldn't nothing's going to
happen because there's nothing here but
I don't get the error so I should be
able to use this now so we'll come down
here and let's just do a console log of
get
posts and now we'll run it and you can
you can see it prints the
post now another way that you can export
is at the bottom so if you don't do it
here get rid of that we can just do
export and then as an object get post we
can put that in there like that and it
should work again now you might want to
export it as default so for example when
you build a react component in the front
end you usually export that as default
because it's usually the the only thing
being exported from that file so to do
it as default you would get rid of these
um curly braces and you would say export
default get post like that now if I want
to use this I have to bring it in
without without the curly braces so that
should work and it does and you can even
export one thing as default and then
other things is not default so let's say
we we have a actually we're going to use
export here so let's say we want to
export another function called get post
length and we'll set
that to an arrow function and we'll just
return post. length Okay so that's going
to export get post as default and get
post length as just regular so here I
can put a comma and then have my curly
braces and get post length and I should
be able to let's console log and say
post
length and then get post
length if we run that there we go post
length two all right so that is using
Import and Export for both um commonjs
and Es modules I prefer to use es
modules so we're going to just use that
for the rest of this so like I said I
want to jump into the hdp module and
creating a server and dealing with
request response I mean that's that's
kind of the majority of what you're
probably going to be doing with node.js
now like I said a few times you're going
to do this most likely with a framework
such as Express or Kaa or fify there's
there's tons of great Frameworks out
there but uh but I think that it's good
to know kind of what's going on under
the hood so let's close up index.js and
let's create and I'm just creating these
files just so you have them I'm going to
put them in a repository just so you
have them for documentation but let's
create create a server.js file and that
will be our new entry point for for what
we're doing now and we're going to
import the HTTP module so let's say
import HTTP from
HTTP okay no do slash or anything like
that because it's not a file that we're
including it's a it's a module that's
included with node.js
so we want to create a server and
there's a method called create server
that we can use so we're going to create
a variable called ser server and then we
want to set that to http and then
there's a like I said a method called
create server and then that's going to
take in a
function it doesn't have to be an arrow
it can be just a regular function if you
want now this will have a request so req
and a response Rees and these two
objects are really important and we're
going to use different methods and
properties from them but all I want this
to do is basically just send some text
to the client so we're going to take our
response object and there's a write on
that and you can see right here the
write method writes some data to the
stream and calls the supplied call back
once that data has fully been handled if
there's an error then the call back will
be called with the error and I mean you
can read all this stuff if you want to
really get into it but we're just
sending some text to the client in our
case it's going to be the browser so
let's just write hello world
and then we want to end the response
with res. end now like I said and I'm
probably going to say this a bunch of
more times when you're using a framework
like Express you don't have a
responsibility to end the stream it just
it does it automatic all right just like
you don't have
to uh manually set header some header
values and the content type and and all
that stuff um and and if you take the
express crash course after this I think
that's a good idea because you can kind
of compare the two so this by itself
won't do anything we have to listen on a
port so we're going to take that server
variable and then we're going to call
the listen method and that's going to
take in a port I usually use 5,000 for
server side stuff but that's actually
being taken up on this machine so I'm
going to use
8,000 and then you can also pass in a
function so you can just do something
after it it connects so we'll just do a
console log and we'll say uh
server running on Port and we could we
could even make these back
ticks yeah let's do that let's make
these back ticks and then we'll actually
create a variable for the port so we'll
say on Port and then we'll put that
variable in here and for now we'll set
the variable up at the top here let's
say const port and we'll set that to
8,000 all right so now we should be able
to run our server it's a very very
simple server but we should be able to
run node server and now you see Server
running on Port 8000 and it takes up the
terminal I can't I can't put any more
commands in here unless I shut down the
server now let's open up the
browser and I'm going to go to uh not
5,000
8,000 and we should see Hello World so
let's go back to our code and we can
even get rid of this res. write because
the end method you can send a response
body here so we can actually put our
hello world in there and we could get
rid of this and we should get the same
thing now you do have to restart the
server so let's do that and let's reload
and yeah we get the same same thing now
we can also set header values such as
content type or you might have like an
authorization key or something like that
so we can take our response object and
there's a set header
method and let's change the content type
so we'll say
content-type and then the second
argument we pass in is the type we want
let's say text/html and then down here
let's wrap this hello
world in an
H1 and restart the
server and then if we come back here
you'll see it's now in H1 and if we open
up our Dev tools go to the network Tab
and reload click on this Local Host you
can see it's a get request it's going to
be a 200 response by default and you can
see content type is text HTML now I
could change that if I did like text
plane that's for plain text reload the
server come back here and now it's
actually showing me the H1 tags it's not
parsing the HTML because the content
type is explicitly set to this text
plane now there might be cases where you
want to change the status right if you
if you want to send back like a not
found page you could change it to like a
404 so we can do that let's go actually
let's put it back to HTML and then here
let's say res
do status or I'm sorry status code and
we're going to set that equal to
404 and then maybe you'd say like not
found or something like that but let's
just stop the server reload it and come
back here reload the page and now down
here notice that it's red the local host
and it has a status of 404 and we could
actually shorten this up right so we
could do this instead of separating
instead of having two separate lines
here we can use the right head method so
we can say WR head and you can see here
it sends a response header to the
request the status code so it allows to
send the status code and um things like
the content type so headers so let's
wrap um in here let's say we want to
send yeah let's do a 500 and then we'll
set the content type so here we can have
an object with different header values
so we'll say
content-type and we'll set that to let's
set it to
application slash
Jason and then we can actually send Json
data
here so let's say json. stringify and
I'm going to go I'm going to talk more
about apis and Json data but just to
show you can put an object in here we'll
say
message server
error and
restart okay so now if I reload this
page now we get this Json message server
error and you can see it's a
500 now before we move further with with
uh our server and you know writing some
more code in here I want to just talk
about npm scripts and no uh npm modules
because I want to install one called
nodon because it's kind of a pain in the
ass to keep restarting the server so
let's um let's create a a script first
to run this because right now we're
running node and then the name of the
file but if we go to our package.json we
can add a script in here called start we
can replace the test that's fine we're
not using that and then let's have that
run node server or
server.js so now what we can do is come
down here and we can now Run npm start
and that will do the same thing okay so
that'll start our server now if you if
you use something else other than start
or test like let's say we use dev then
you you actually have to do npm runev
not just npm Dev so keep that in mind
and Dev is really common because a lot
of times you'll have your you know your
development environment and then you'll
have your production environment so
let's we'll just put that back to start
for now so next thing I want to do is
install nodemon and when you install
something using npm right so let me just
clear this up so if you do
npm install node mon I'm not going to
run this just yet but what it's going to
do is it's going to install it from the
npm registry or ",,
",,
npmjs registry so you,,,
can actually go to the website if you,,,
want so right here and search for,,,
nodemon or any,,,
package and this will show you the page,,,
you can see the install you can also use,,,
just I to install um and then the,,,
repository so you have the GitHub the,,,
homepage it shows you the weekly,,,
downloads version license all that stuff,,,
along with the documentation so all the,,,
usage so these pages are very very,,,
helpful and they usually have kind of,,,
the same stuff on the GitHub page as,,,
well as you can see it's like the same,,,
exact docs so I want to install this,,,
because I I don't want to keep,,,
restarting the server but I do want to,,,
install it as a Dev dependency which are,,,
dependencies that are not needed for,,,
your production environment so to do,,,
that you just need to add the dash,,,
uppercase d flag okay um I'm just going,,,
to close up the package.json because,,,
it's actually going to update so let's,,,
run this npm install or you could even,,,
do just npmi DD,,,
nodemon okay so what that's going to do,,,
is a couple things it's going to create,,,
a node modules folder since we didn't,,,
have one because we haven't installed,,,
any packages but as soon as you install,,,
a package it creates this folder and if,,,
you look in it there's a crapload of,,,
stuff here and even though we only,,,
installed,,,
nodon that particular package just like,,,
every package has a bunch of,,,
dependencies and then those dependencies,,,
have dependencies and that's why you get,,,
this big node modules folder all right,,,
the other thing it did is in the,,,
package.json you can see now we have,,,
this Dev dependencies object with the,,,
nodemon and the version okay so if we,,,
installed it without the dasd just a,,,
regular dependency then it would be in,,,
the dependencies object so you might,,,
you're going to have a dependencies,,,
object if you install something normally,,,
and then another thing that happened is,,,
this,,,
package-lock dojon file was created and,,,
this has the entire dependency tree with,,,
all versions and everything you don't,,,
have to do anything with this file all,,,
right um,,,
now when you when you push your code to,,,
GitHub you never want to push the node,,,
modules folder okay you don't want to,,,
ship this ever because you can easily,,,
just reprod produce it in fact I'm going,,,
to just delete,,,
it and since my package.json has my,,,
dependencies in it which right now is,,,
just one Dev dependency of nodon since I,,,
have that I can simply run npm install,,,
with nothing else it's going to look at,,,
my package.json dependencies and install,,,
those right so when someone gets your,,,
code from GitHub all they have to do is,,,
run npm install and it looks at the,,,
package.json Manifest and then it will,,,
install the node modules on their,,,
machine okay so hopefully that makes,,,
sense now to prevent that from going to,,,
your git repository you can create,,,
what's called a dotg ignore file so we,,,
can create a new file called dotg ignore,,,
don't forget the dot and then in that we,,,
can just simply put nodecore modules and,,,
save it and that's it now when we push,,,
this to GitHub that node modules folder,,,
won't get uh it won't get,,,
pushed all right so let's see the next,,,
thing I want to do is use nodemon and I,,,
mean you can check the documentation to,,,
to look at the specifics but basically,,,
all we have to do is instead of node,,,
here in our script we can run node Monon,,,
and then the file name so now if we come,,,
down here and I run npm,,,
start it's going to run our server on,,,
Port 8000 just like it has been but now,,,
it's going to constantly watch it right,,,
so if I come back here so we have our M,,,
we have our 500 status and our Json but,,,
let's change it to let's change it back,,,
to 200 let's change the content type to,,,
text/html,,,
and then let's get rid of the Json,,,
stringify and all that stuff and we can,,,
put back,,,
H1 hello world now normally I would have,,,
to restart the server but if I save,,,
you'll see this kind of refreshes and I,,,
can come back here and reload and it,,,
works I don't have to now I don't have,,,
to go back and keep refreshing so noemon,,,
is is just one of those tools that I use,,,
in just about every node.js project now,,,
another thing that I want to show you,,,
real quick is the use of a a EnV file so,,,
environment variables are variables that,,,
are in your environment on your system,,,
and you can access them from your entire,,,
program you can access them from,,,
different programming languages is,,,
usually a certain way to do it with,,,
node.js we have the process object and,,,
on that is a an EnV object with all your,,,
environment variables well you can,,,
create a EnV file and create environment,,,
variables in that file and you used to,,,
have to install a package called EnV but,,,
now with a recent version of node.js you,,,
don't have to do that anymore it's you,,,
can just do it without installing,,,
anything so just to show you let's,,,
create a EnV and you don't usually want,,,
to push this you don't want to to,,,
include this in your git repository,,,
because a lot of times you'll have API,,,
Keys like maybe you have a Google API,,,
key you know you'll have something here,,,
and you don't want other people to,,,
access that or to see that so what I,,,
would do is add that to your dog ignore,,,
so we would just do this and then that,,,
won't be added to your git repository so,,,
in the EnV let's create a port variable,,,
here so if we want to change the port,,,
number we can just do it from this file,,,
so I'm going to set it to to just to,,,
test things out I'll set it to,,,
8080 and then what we can do is go into,,,
our package.json because you do actually,,,
have to run it with a flag um at least,,,
for now so that would be right here,,,
where we run nodon we can just do,,,
d-v das file and then say equals and,,,
then the name of the file which is EnV,,,
so that now when we Run npm start it'll,,,
run this command and it should use that,,,
file so I'm going to save that and then,,,
let's go to our server JS and instead of,,,
hardcoding 8000 here we should be able,,,
to access it with,,,
process.env and then anything I put,,,
after this this EnV dot um I can access,,,
any variables in this file or on my,,,
system so let's say,,,
port and now let's see I think we have,,,
to manually restart the,,,
server yep so now you can see Server,,,
running on port 8080 so it's looking in,,,
this file okay and I could access,,,
process.env port on in any file in my,,,
project now I'm going to put that back,,,
to,,,
8,000 and just restart,,
server and now it's back to 8,000 but,,
now it's reading it from here and again,,,
you would put your API Keys things that,,,
you want hidden you don't want in your,,,
Source you know in your um,,,
repository now another thing that I want,,,
to look at is the request object here,,,
okay we we used a bunch of methods that,,,
are on this response object but there's,,,
a bunch of stuff we can get from here so,,,
let's do a console log of I want to do,,,
request.url and I want to do console log,,,
request. method because those are two,,,
very important things that you're going,,,
to need in order to respond correctly so,,,
let's go to the browser and just reload,,,
and then if we look in the console here,,,
you can see we have a slash so that's,,,
going to be the URL because we just went,,,
to Local Host 8000 and no no page after,,,
that and then it's a get request if you,,,
if you go to a page on a website that's,,,
always going to be a get request you can,,,
submit forms as a post request or you,,,
could make put requests and delete,,,
requests either from JavaScript using,,,
the fetch API or from curl or from a,,,
client like Postman which I'm going to,,,
get into so if I were to go to like,,,
localhost 8000 about it's going to show,,,
me the same exact thing because we're,,,
not checking the URL all right if we,,,
look it down here now request.url is,,,
going to show slab but we're still,,,
giving the same thing we're still doing,,,
this no matter what method we use and no,,,
matter which URL we hit so that's why,,,
Express is is so valuable because you,,,
can just do something like this you can,,,
say app. poost so,,,
it'll you can do like app. poost so,,,
it'll only be for post requests and then,,,
you can do like slash whatever users so,,,
that will handle then you'd have a call,,,
back here and then whatever you,,,
put in this,,,
function whatever you put in this,,,
function would only run if you made a,,,
post request to slash users now with,,,
just the core HTTP module we have to,,,
manually check everything the URL and,,,
the method I'm going to show you how to,,,
do that but just know that this stuff is,,,
a lot easier with Express but again for,,,
like the fifth time I think that it's,,,
good to to know how this stuff works,,,
under the,,,
hood so let's see what should we do next,,,
let's make some other types of requests,,,
and I would suggest using Postman that's,,,
the client that I use but there's all,,,
types of clients uh you could just use,,,
Curl if you want which is a command line,,,
utility um you could use like F what are,,,
some of the other ones there's there's a,,,
bunch of extensions for for vs code I,,,
actually have the postman extension,,,
installed so if I click on this little,,,
icon here I got to sign,,,
in let's see this is my,,,
workspace so I would suggest if you,,,
don't have a postman account I mean you,,,
can just sign in with Google I'd suggest,,,
doing that because this is really,,,
helpful I can just say new HTTP requests,,,
and it'll open up a window here and now,,,
I can make a request to uh let's do,,,
8,000 and I'll make a post request so,,
I'll click post and then send and you'll,,,
see down here in my console we made a,,,
request to slash which is just the root,,,
and it's a post request and this is how,,,
if you're creating apis this is how you,,,
would test your your routes without,,,
having any kind of front end where you,,,
would have the fetch API or axios or,,,
something like that routing is also easy,,,
with a framework so let's create just a,,,
very simple router so I'm going to get,,,
rid of this and you can console log the,,,
the entire request object if you want to,,,
see some of the stuff that's on there I,,,
mean you can get headers that are sent,,,
um if you have cookies you you can,,,
access cookies and all types of things,,,
so I'm going to get rid of this as well,,,
and let's just have like a we'll just,,,
create a little router so we're going to,,,
check the URL so let's say if,,,
request.url if that is equal to just,,,
slash not do slash just slash so that's,,,
that's the route then let's uh let's see,,,
we'll just move,,,
this up here I guess we'll move both of,,,
these up,,,
here and let's say instead of hello,,,
world let's say homepage and this could,,,
be Json if you're building an API this,,,
could be content type application J Jon,,,
you could serve you know Json objects or,,,
arrays but I'm going to just pretend,,,
that this is an HTML server and then,,,
let's say else if and then we'll check,,,
request.url and we'll do an API after,,,
we'll we'll do some js and stuff after,,,
so let's say if it's,,,
about then let's see we'll,,,
copy oops we'll copy this stuff,,,
here put that in there and let's do,,,
instead of homepage we'll say about and,,,
then let's say else so any other page,,,
then we want it to be not found so I'll,,,
paste this in and we'll do a,,,
404 and we'll say not found all right so,,,
this is a very simple but it is it is a,,,
router so now we'll save that let's go,,,
to uh I'm going to do it from Postman,,,
but you can do it from from uh from the,,,
browser if you want so right now it's it,,,
doesn't matter what method we use it's,,,
just it's just looking at the URL so if,,,
we go to the,,,
homepage you'll see we get NH H1 and it,,,
should be type HTML right here so,,,
content type text,,,
HTML so that's the homepage now if I go,,,
to,,,
slab that shows the H1 with about and if,,,
I go to anything else then I get a 404,,,
not found and we write to the body not,,,
found so that's a very simple router now,,,
let's uh let's create a server that will,,,
check for get requests as well right,,,
because if I make a post,,,
to the root I still see the homepage and,,,
I don't want that I only want it to be,,,
for get requests so we can go back into,,,
our code here and what we can do let's,,,
do a try catch and in in the,,,
try let's check,,,
check if get or if get request so we'll,,,
say if the request do method is equal to,,,
get then we'll do something,,,
else then we can throw an error so we,,,
have this error uh object that we can,,,
use actually want to do new error,,,
Constructor and we'll say method not,,,
allowed and then I'll just,,,
grab this right here we'll cut that and,,,
then we'll put that in here so it has to,,,
be a get request now if there's some,,,
other type of error going on then let's,,,
do a 500 so we can,,,
take,,,
this put that there set that to a 500,,,
which is a server,,,
error and let's say,,,
server error okay and you'd probably,,,
just send this like as plain,,,
text so we'll do,,,
that we'll send it as text,,,
plain okay so now if I were to make a,,,
get request it should work but if I make,,,
a post,,,
request I get a server error of 500 now,,,
what about loading files instead of,,,
obviously you know you're not going to,,,
just put your HTML inside of this res.,,,
end so we can use the the fs or the file,,,
system module which I do want to go over,,,
more in depth a little later but let's,,,
just use it to now just to load an HTML,,,
file so what we can do is have in our,,,
structure here our crazy structure,,,
because this is just like a Sandbox,,,
we're not really building something,,,
specific let's create a folder called,,,
public and we'll say we'll have an,,,
index.html in there and we'll have a,,,
whoops we'll have a about.,,,
HTML and then we'll have that's it we'll,,,
just have those two and then I'll just,,,
put a boiler plate in,,,
here just say,,,
homepage homepage and then for the about,,,
we'll do the same thing,,,
okay so we have our two HTML files now,,,
I'm going to bring in up here I want to,,,
import the,,,
fs the fs module and there's multiple,,,
ways to to use the fs module and to use,,,
the methods on it like read file WR file,,,
so there's one way which is the default,,,
which is a an asynchronous callback and,,,
then there's also a synchronous version,,,
of all the methods which does it it's,,,
blocking so it stops the the execution,,,
of your program until it finishes which,,,
you usually don't want to use and then,,,
there's also a promise version where you,,,
can use promises either with then or,,,
with a syn of weight so I'm going to,,,
import the the promise version so I'm,,,
going to say from FS SL,,,
promises and then let's come down here,,,
and I need to get the the current file,,,
path now if you're using,,,
commonjs modules the require syntax that,,,
we looked at that then you actually have,,,
um I'll go right here you actually have,,,
let's say get current,,,
path some variables you have one called,,,
double uncore file name which will give,,,
you the current file name with the the,,,
path and then you have double uncore,,,
durame which will give you the current,,,
path of the file that you're in so these,,,
aren't available if you're using ES,,,
modules unfortunately they're not,,,
available in the environment and you'll,,,
get an error if you try to to use them,,,
but we can kind of make our own by using,,,
a couple things so one is the URL module,,,
so I'm going to import URL from URL and,,,
these are all these are all core node.js,,,
modules you don't have to install these,,,
or anything and then let's create our,,,
own double uncore file name and set that,,,
to URL and then there's a method called,,,
file URL to path and in that we're going,,,
to use this import,,,
import. met. URL which will give us the,,,
file URL to whatever this file is in and,,,
we don't want the actual file URL we,,,
just want the path and that's what this,,,
does is it takes that file URL turns it,,,
into a path then what we can do to get,,,
the directory name is use the path,,,
module and I'm going to go over these,,,
modules more after we're done with the,,,
HTTP stuff so let's import path from,,,
path and this just gives you a bunch of,,,
utilities to work with file paths and on,,,
that we have a method called,,,
durame okay I mean I know we're calling,,,
this durame but this is a variable this,,,
is a method that we can use to get the,,,
directory name that we're in and we just,,,
want to pass in the current file name,,,
which we just created here so just to,,,
kind of give you an idea of what this,,,
gives us let's console log both file,,,
name and durame just to see what that,,,
gives us so you'll see right here the,,,
first one which is file name gives me,,,
the server JS and the entire path the,,,
durame gives me just the entire path but,,,
not the file name and these are very,,,
helpful and you'll use these for a lot,,,
of different things in your project so,,,
now what I want to do is like I said,,,
instead of just writing this H1 I want,,,
to load a file and instead of kind of,,,
repeating ourselves here cuz we're doing,,,
right head and um we're actually going,,,
to get rid of these so inside this these,,,
conditionals and let's set a file path,,,
variable with let so we'll say let,,,
actually let's put this above where we,,,
check the URL so above,,,
the above that let's say let file path,,,
and then in this first if we want to set,,,
the file path equal now we could just do,,,
double uncore durame SLU index HTML,,,
because that's what I want to load but,,,
the path module has a method called join,,,
which will just take in arguments and,,,
each argument you pass in is going to be,,,
part of the file path so for instance I,,,
want to take the current directory that,,,
we're in then I want to go into the,,,
public folder and then I want to go into,,,
index HTML or load index HTML all right,,,
and then I'm going to copy this line and,,,
then go go into here and instead of,,,
index HTML we want this one to be about.,,,
HTML and then if it's not found I mean,,,
we could create a not found page or,,,
whatever but I'm just going to do a,,,
throw we'll say Throw new error and just,,,
say not,,,
found all right now since we have that,,,
file path variable let's go under the if,,,
statement still within the you know the,,,
if get and let's say cons data and set,,,
that to a,,,
weit and we do have to make this,,,
asynchronous so up,,,
here just put in async and I'm I'm going,,,
to be using the the read file method on,,,
the fs module so we're going to await,,,
fs. read file and then pass in that file,,,
path okay and then we'll go ahead and,,,
let's set the content type to HTML so,,,
we'll say res . set,,,
header and let's do content,,,
Dash,,,
type and let's set that to text/html,,,
and then we'll use res we'll do res.,,,
write and pass in data which is going to,,,
be the file and then res.,,,
end all right so that should work let's,,,
save it and now I'll do this from the,,,
browser so let's go to uh Local Host,,,
8000 about I reload and now it's showing,,,
me the HTML the about. HTML you can see,,,
the title says about so anything I put,,,
in that HTML page is going to show here,,,
if I go to Just Local Host 8000 then it,,,
loads the homepage if I go to slash test,,,
which doesn't exist then I I get a,,,
server error probably better to put a,,,
404 notfound page but uh I don't know I,,,
guess that's fine for now you guys get,,,
the idea and again six time I've said,,,
this you're not going to be doing things,,,
like this um in your actual projects if,,,
you use express this is a lot easier,,,
this is just very lowlevel it's a web,,,
server you could build your website and,,,
you know start to put your HTML together,,,
your CSS and all that now I want to show,,,
you the other side of building an API,,,
which is very common a lot of times,,,
you'll have your back end will be,,,
adjacent API and then you'll have react,,,
or view or something something on your,,,
front end and you'll make requests using,,,
the fetch API or using axios you'll make,,,
requests to the back end to get your,,,
data and your back end is where you'll,,,
interact with your database or whatever,,,
it is you're doing graphql anything you,,,
want really so let's um I want to keep,,,
this code here so I'm going to close it,,,
and I'm going to create another file,,,
called server,,,
2. JS and I want this file to run when,,,
we run npm start so let's go into,,,
package.json and just add a two onto,,,
This Server JS so now if I restart this,,,
and I run it it's running but there's,,,
nothing in our in our code so I'm just,,,
going to stop it for now so let's once,,,
again we're going to use the a the,,,
create server method from uh from the,,,
HTTP module but since that's the only,,,
thing we're using we can actually just,,,
import that I'm sorry we want to use,,,
import and we can say import create,,,
server,,,
from HTTP okay because that's that's all,,,
we're using and then let's just create,,,
some users so this will be a users API,,,
and again this would probably come from,,,
a database but we're just going to hard,,,
code just an ID we'll do an ID and a,,,
name so John,,,
Doe copy that down we'll,,,
do Jane do,,,
id2,,,
ID3 this will be jimo all right so we,,,
have our users now let's do the same,,,
thing server set that to now we can just,,,
say create server we don't have to put,,,
the HTTP in front of it and that takes,,,
in our function with request,,,
response and then down here we want to,,,
just listen so,,,
server. listen actually I'll,,,
just just grab,,,
this so we'll do that and let's just add,,,
our Port up here so cons Port that's,,,
going to be from our environment so,,,
process.,,,
env.,,,
Port okay now in here let's check we,,,
want to check for the URL and we want to,,,
check for the method because with a with,,,
an API usually you're going to listen,,,
for like post requests to add a user get,,,
to get the users put to update and,,,
delete to delete now I do have a video,,,
on my channel it's called something like,,,
vanilla uh build a van an arrest API,,,
with vanilla node.js and that goes much,,,
deeper than we're going to do here I,,,
just want to make a couple be able to,,,
get users and get a single user but,,,
again if you want I'll put that video in,,,
the description if you want to take this,,,
further so let's say if the request URL,,,
is equal to and we have something like,,,
API SL users and let's check for request,,,
Dot,,,
method and see if that's equal to,,,
get so if that is then let's do,,,
res. set header and we want to set our,,,
content,,,
type and for Jason it's going to be,,,
application SL,,,
Json okay and then let's do res,,,
dot,,,
WR and in here we're going to do json.,,,
stringify and again with Express you can,,,
just pass in you can do something like,,,
this don't don't type this but you can,,,
do res. Json and you can put your,,,
JavaScript object right in there and,,,
it'll just parse it as Json you don't,,,
have to do Json,,,
stringify so let's pass our users in,,,
there and then we just want to end the,,,
response and that should work we can,,,
make should be able to make a request,,,
now well let's run our,,,
script and then make a request,,,
to slash API slash,,,
users and there we go so we get a 200,,,
okay and check it out we have our users,,,
down here in the,,,
body now let's make it so if if we're if,,,
we hit a route that is not this that,,,
doesn't exist then we'll just say you,,,
know route not found so let's have an,,,
else and for this let's,,,
do uh let's see I'll just call copy,,,
this and then I'm going to just put in a,,,
message here let's say,,,
message,,,
route not found so if we do that and,,,
then let's go back here and let's go to,,,
Just,,,
API I don't know,,,
todos and we get route not found now you,,,
should probably make this a 404 so what,,,
we could do is just go in here here and,,,
say,,,
res. status code and set that equal to,,,
404 and now if I make that again now I,,,
get route not found but my status is a,,,
404 so you want to follow these these,,,
conventions when building an,,,
API now let's say we want to be able to,,,
go to like slash users slash and then,,,
the ID of the user or it would be sorry,,,
API SL user,,,
and then the ID so I want to be able to,,,
do that so we can put another basically,,,
put another route in here so we'll say,,,
else,,,
if I think that yeah so we'll do,,,
that is that right no we need we need,,,
our curly brace here as well all right,,,
so else if now this is difficult using,,,
just node in the HTP module if we using,,,
Express we could just have a route where,,,
we're saying if it matches you know API,,,
we could do like if it matches API URL,,,
and then colon ID which would be dynamic,,,
this ID then you know do whatever but in,,,
this case one way to do it is to use a,,,
regular expression and use the match,,,
method so we have our URL so request.url,,,
and then we want to say if it matches,,,
and then the regular expression I'm just,,,
going to grab that and throw it in I,,,
hate typing regular Expressions out so,,,
it's going to be wrapped in these double,,,
you know forward slashes and what this,,,
is saying is it needs to match SL API,,,
literally SL API and then slash users,,,
and then slash any number okay so this,,,
brackets 0 through n and we also want to,,,
make sure it's a get request so let's,,,
say and,,,
request. meth is equal to,,,
get so if that's true then for now let's,,,
just uh let's just copy this just to,,,
make sure that that,,,
works and I'll just for now,,,
just pretend this is a user so,,,
name John,,,
dope okay so let's try that and just see,,,
if that comes up so we'll send and there,,,
we go all right now to to get the actual,,,
user by its,,,
ID we can let's see I'm going to go,,,
right above that and let's say const ID,,,
because we need to get the ID from the,,,
URL so what we could do is say,,,
request.url and we could use split and,,,
we want to split it on the,,,
slashes and then it should be the third,,,
one and just to test that out we could,,,
do a console log of the ID and now if I,,,
go when I hit that route down here you,,,
can see one if I pass in right here two,,,
send it now we see,,,
two so we got the ID now we want to get,,,
the user so let's say const user and set,,,
that to users,,,
doind and find is just a JavaScript,,,
method takes in a call back so it's,,,
going to look for the user and once we,,,
get that,,,
user uh we want to return if the user.,,,
ID right so this Loops through the users,,,
we're saying for each user we want to,,,
check the ID and see if that's equal to,,,
the ID variable but let's parse it as an,,,
integer so parse in or parse it as a,,,
number okay now we'll come down here and,,,
we'll say if,,,
user so if that user exists then,,,
let's go ahead and cut that so if the,,,
user exists this we'll go ahead and put,,,
in here in this Json stringify that user,,,
variable and then else so if that user,,,
does not exist then,,,
let's do,,,
this and let's say user not found,,,
because it is a it's a route but the,,,
user's not there so we'll try that out,,,
let's go to postman or your browser,,,
whatever you're using I'm going to send,,,
and you'll see it gets me the user with,,,
the ID of two that gets me the user with,,,
the ID of one if I do 100 user not found,,,
404 so this is the beginning of a rest,,,
API and again it's very kind of messy,,,
code it's it's confusing that's because,,,
it's just the HTTP module and normally,,,
you're going to use a,,,
framework if that's not clear by now and,,,
we could actually since we're using this,,,
twice here we could actually get rid of,,,
these and put this put that here and,,,
then get rid of that CU we're doing that,,,
either way and same thing with res. end,,,
we,,,
could go ahead and put that uh down here,,,
res.,,,
end and let's make sure that still works,,,
so user not found users gives me all of,,,
them slash one,,,
all right cool now let's talk a little,,,
bit about middleware so middleware are,,,
basically modules or functions that have,,,
access to the request and response,,,
object because they it they sit in the,,,
middle of incoming requests and outgoing,,,
responses and they can perform basically,,,
any code that you want you can execute,,,
any code you can also make changes to,,,
the request and response objects all,,,
right so if you wanted to add a value,,,
onto onto these you could do that um a,,,
lot of times when you have,,,
authentication middleware you'll end up,,,
with res. user and you'll have access to,,,
the logged in user you could and then,,,
you have to call the next middleware,,,
function with the next function so to,,,
give you an example let's add to this,,,
I'm going to create a middleware,,,
function and usually you'd put this like,,,
uh in a separate file but I'm just going,,,
to put it here let's say we want some,,,
logger middleware that will just will,,,
log the uh the URL and the method,,,
whenever a request is made so let's,,,
create a,,,
function we'll call it logger now,,,
middleware is going to take in request,,,
response and,,,
next and this is the same whether you're,,,
doing it with just node.js or with,,,
Express so let's do a console log and,,,
we'll put some btics in here and I want,,,
to log the whoops the method,,,
so remember the we have access to,,,
request so we have access to request.,,,
method and then next to that let's do,,,
the,,,
request.url,,,
now since this is middleware we have to,,,
then call the next function because that,,,
basically says okay this is done let's,,,
move on to the next,,,
middleware now to use this we actually,,,
have to,,,
wrap uh we have to run it and then,,,
everything we're doing here here we have,,,
to wrap in the call back so let's go,,,
into the server I'm going to clean this,,,
up after as well but let's go ahead and,,,
say,,,
logger and this is going to take in,,,
request response and then a function and,,,
in that function is where I basically,,,
want to have all this so I'm going to,,,
grab from here down to,,,
here C,,,
it and then put it in,,,
here okay so now let's make a request so,,,
we'll do the get to this this users one,,,
and now notice down here in the console,,,
it says get and then API users one if I,,,
do API users if I do a post request,,,
which shouldn't work but it still shows,,,
it down here because we're logging the,,,
URL on the method so that's an example,,,
of,,,
middleware now I want to clean this up a,,,
little bit and we could,,,
actually since we're doing the,,,
application Json basically everywhere so,,,
you can see we're kind of repeating,,,
ourselves we could make that a,,,
middleware function let's say Jason,,,
middleware so we'll say con,,,
Jason middleware and set that to and,,,
that's going to take in request response,,,
next,,,
and all I want to do,,,
here is this so I'm going to take,,,
that put that there and then we can call,,,
next so that's all that's all I want,,,
that to do and then for the user stuff,,,
right so for here for this,,,
route uh where is it yeah for this route,,,
API users we're getting all the user,,,
we're sending all the users for this one,,,
we're sending back a an individual user,,,
so let's create a Handler function for,,,
those just to clean it up so we'll say,,,
route uh route Handler for SL API SL,,,
users actually we'll say for get API,,,
users so const get,,,
users Handler and we'll set that that,,,
equal to now this is not a middleware,,,
function it's just a Handler it's just a,,,
function and takes in request and,,,
response and we're going to just,,,
do let's see this right here and the end,,,
because we don't have to do this that's,,,
going to be taken care of with with the,,,
the uh,,,
middleware all right so that's the get,,,
users's Handler now let's do the get the,,,
user byid so we'll say route,,,
Handler,,,
for get SL API users slash and then the,,,
ID so we'll call this get,,,
user by ID,,,
Handler all right and then what I'll,,,
do is grab Let's,,,
see we want the,,,
ID want this these two lines the ID and,,,
the,,,
user so we'll put those in there and,,,
then we want to check for the user so,,,
we'll grab this if statement right here,,,
and the,,,
end grab,,,
that put that in here so you can see,,,
it's just breaking it up and it's making,,,
it it's clean",,,
er it's easier to read than,,,
this slop that we have down here and,,,
then finally we could have a not found,,,
Handler so let's let's say not,,,
found so,,,
const not found Handler and set,,,
that request,,,
[Music],,,
response and for that let's see we'll,,,
grab the 404 we'll grab this and the,,,
res.,,,
end put that in there now we just have,,,
to put it all together,,,
so we have our logger I'm just going to,,,
get rid of everything in the logger,,,
middleware or I'm sorry in the logger um,,,
call,,,
back so all this stuff and since we have,,,
two middlewares we have logger and we,,,
have the Jason middleware we can,,,
basically just kind of um stack them in,,,
here so Jason middleware request,,,
res and then the call,,,
back and then that's where we want to do,,,
our routing so we'll check if the,,,
request.url is equal to/ API,,,
users and the request,,,
dot method is equal to,,,
get then we want to,,,
call the get users,,,
Handler okay so this is much neither,,,
else,,,
if now this is where we have to do our,,,
little um expression so request. URL do,,,
and then we'll use match and let me just,,,
grab that expression same one we had so,,,
that and we want to check to see if the,,,
request,,,
dot um see if the method is equal to,,,
get if that's true then we want to call,,,
our get user by D,,,
Handler right and then,,,
else then we want our not found,,,
Handler oh we have to pass in request,,,
response into those because it's not,,,
going to know what those are so make,,,
sure in these,,,
handlers pass these,,,
in okay so let's try it out so I'm going,,,
to go API,,,
users and we get all of our users if I,,,
do,,,
slash1 if I do sl11 we get not found if,,,
I do,,,
API use which doesn't exist I get route,,,
not found and we our logging middleware,,,
is also working now what if we took this,,,
a step further and made it so if we make,,,
a post request we can actually send data,,,
and create a new user I think that'll,,,
give you a good idea of how to actually,,,
get data from the body of a request so,,,
let's add a new Handler,,,
so this is much more scalable now,,,
because now I can just create a a route,,,
Handler uh to a right rout Handler for a,,,
post request to slash API users and even,,,
though this route was already used with,,,
a get request it's fine because it's,,,
going to be a different method so we'll,,,
say const create user,,,
Handler and it's going to take in the,,,
request response,,,
and getting body data is much more,,,
difficult I mean it's not difficult but,,,
it's it's more difficult than with,,,
Express because with Express you would,,,
send your body data you know send your,,,
Json and then you could just access it,,,
with request. body and that would give,,,
you the the name the whatever it is,,,
you're sending here it it's a little,,,
different so first thing we're going to,,,
just create a variable called body and,,,
set it to an empty string and then what,,,
we do is we listen for the,,,
data by doing,,,
request.on so we're listening listening,,,
for a specific event here and the event,,,
is called data and when that happens we,,,
have this call back which takes in a,,,
chunk okay so this Chunk we basically,,,
have to take we're going to take our,,,
body variable and we're going to append,,,
onto it that chunk but we want to make,,,
it a string so we want to convert it to,,,
a string,,,
and that should give us the data and,,,
then underneath that request.on we're,,,
going to do another,,,
request.on and now we're going to listen,,,
for,,,
end and when that happens we'll have a,,,
function and we should have access to,,,
that body variable which will include,,,
whatever we send so let's say con new,,,
user and set that equal to and we're,,,
just going to parse it so json.parse,,,
parse that body because it comes in as,,,
Json but we want to turn it into a,,,
regular JavaScript object and then we'll,,,
take our users array and we'll push on,,,
to it in reality you you'd be adding it,,,
to the database but we're just adding it,,,
in memory here onto the users's array,,,
and then we'll do a res. status code of,,,
201 which means successful and something,,,
was created and then we'll do a res.,,,
write and let's send Json so we're going,,,
to stringify which is the opposite of,,,
Json,,,
here we're turning Jason to a JavaScript,,,
object here we're turning a JavaScript,,,
object into,,,
Json send the new user and then res. end,,,
now let's come down to our router okay,,,
this is our router basically it probably,,,
be better as a switch but this is it's,,,
fine so I'm going to add another else if,,,
so right here before the else let's say,,,
else,,,
if um and,,,
then yeah so we want to do that and,,,
we'll say if the,,,
request.url is equal to and we want to,,,
see if it's equal to API SL users but we,,,
want to make sure it's a post request so,,,
we'll say and the request. method is,,,
equal to post and if that's true then we,,,
want to call the,,,
create user Handler and pass in the,,,
request and response objects so let's,,,
try it out we'll go to postman and we're,,,
going to select here body and then raw,,,
and we're going to send the ID usually,,,
you wouldn't send the ID you'd have the,,,
database would create it on its own or,,,
we create it on the server side but,,,
we're just going to send it for the just,,,
to keep this simple so ID we'll set that,,,
to,,,
four 2 three four whatever and then for,,,
the what else do we have the,,,
name we'll set that to,,,
just say Brad so I'm sending a post,,,
request so I want to select post and I'm,,,
sending this in the body so let's,,,
send and we get route not found because,,,
this needs to be API,,,
users and there we go so we get a 2011,,,
created and we get back the new,,,
user and if I do a PO a get request now,,,
to API users you can see that Brad is,,,
now included now it's just in memory if,,,
I reload then that's going to go away,,,
but you can see that it's working how,,,
it's supposed,,,
to so I think that that's going to be it,,,
for the HTTP method we did quite a bit,,,
but I want to move on to some of the,,,
other core modules like I mean I know we,,,
use the fs and the path module a little,,,
bit in our API and stuff but I want to,,,
just get a little bit deeper into those,,,
so let's close these up and I'm going to,,,
stop the server cuz we're actually going,,,
to be using different files now and the,,,
first module that I want to look at is,,,
the fs or file system module that we did,,,
we looked at a tiny bit but I want to,,,
give you a better idea of how that works,,,
so let's create a file we'll call this,,,
FSD,,,
demo.jpg,,,
documentation all the core modules you,,,
can find on the side here so file system,,,
if you take a look there's there's tons,,,
of methods so read file uh sync truncate,,,
write file all kinds of stuff that have,,,
to deal with permissions and pretty much,,,
anything you want creating directories,,,
I'm definitely not going to go through,,,
you know all of these or or even a lot,,,
of them I'm just going to show you,,,
probably write file read file and a pend,,,
file um just so you know how they work,,,
because there's actually multiple,,,
versions of some some of these you can,,,
see that like this one right here chod,,,
sync and there's a chod so chod would be,,,
the asynchronous version which is is,,,
non-blocking and then chod sync is the,,,
synchronous version which will block and,,,
it will wait for that method to finish,,,
until you know for it to continue,,,
executing a code which in most cases you,,,
want to use the asynchronous version um,,,
but you know there is a synchronous,,,
version available so we'll start with,,,
the read file method me and I'm going to,,,
show you the different versions so we'll,,,
say read file and this is the it's the,,,
async version but it's the Callback,,,
version because there is a call back and,,,
there is a promise version call back is,,,
is kind of the default um so let's yeah,,,
we'll just do this so let's take fs and,,,
we're going to call read file and read,,,
file does just that it could be a text,,,
file so let's create we'll say test.txt,,,
and I'll say this,,,
is from the text,,,
file so I want to read what's in this,,,
file into my program so this is going to,,,
take in three things first is going to,,,
be the file location which is in the,,,
same directory test.txt and then the,,,
second is the the encoding which is,,,
going to be,,,
utf8 and then third is the call back so,,,
this is a synchronous so this call back,,,
will run once that the file is read so,,,
this takes in a possible ible error and,,,
then the data from the file and then we,,,
could just check for an error if there,,,
is then throw error and then let's just,,,
do a console log of the data in the file,,,
so now I want to run this FS demo JS so,,,
I'm just going to say node FS demo. JS,,,
and we see this is from the text file so,,,
that's the first version now I want to,,,
show you the synchronous version and,,,
this is actually called read file sync,,,
okay so this is,,,
the,,,
synchronous,,,
version now this is is written easier in,,,
my opinion but it's blocking so if it's,,,
a giant file that you're reading it's,,,
going to stop the rest of your code so,,,
you usually want to use the asynchronous,,,
version but if it's something really,,,
quick and and it you know it's not going,,,
to affect performance you could just use,,,
this so read file sync takes in the,,,
location and the file name so test.txt,,,
and then the,,,
encoding and then we can just console,,,
log that data so now if I run FS demo,,,
you can see that it runs Twice first for,,,
for this the asynchronous and then once,,,
for the,,,
synchronous now I want to show you the,,,
promise version and there's actually a,,,
separate import for that so we can,,,
import let's comment this one out and,,,
say import FS from and then it's going,,,
to be fs/,,,
promises and then I'm just going to,,,
comment out these so we don't get any,,,
conflicts and let's say this is going to,,,
be the read,,,
file and this is going to be the promise,,,
version and there's basically two,,,
versions of this because we can use the,,,
the dot then syntax and we can use a,,,
sync away now out of those four async,,,
AWA is my preferred so that's what we,,,
use for the rest of these but just to,,,
show you we can say read file,,,
and then pass in. SL test.txt pass in,,,
the,,,
encoding and then take off that,,,
semicolon and we could add dot then,,,
because remember this returns a promise,,,
so do then and then we have our function,,,
with the,,,
data console. log data and then we can,,,
add a catch for,,,
errors so that'll take in a function,,,
with,,,
error okay so now if I run the file we,,,
should we should see this is the text,,,
from the file and we're using the,,,
promise version so let's do the the,,,
async await,,,
example so we say read,,,
file and this is going to be a sync a,,,
weit I'm just going to comment out this,,,
one,,,
now with a sync await obviously we have,,,
to wrap this in an async function so,,,
let's create a a read file function and,,,
it's going to be,,,
asynchronous and then in here we'll do a,,,
try catch to handle any,,,
errors okay and we can write it just,,,
like we can do the sync version that,,,
that's why a sync await was created so,,,
we can write code that looks more like,,,
this than like this right in fact I,,,
could just just take,,,
that and instead of calling read file,,,
sync we'll call read file and we just,,,
have to put a weight in front of it and,,,
then we can console log the data so this,,,
is my favorite way of doing things,,,
because it's more readable and it's,,,
asynchronous and then here we'll just,,,
console log error and then we have of,,,
course we have to run read,,,
file and there we go so we get this is,,,
from the text file so those are the four,,,
different ways to use this function or,,,
to use really any of these FS methods so,,,
the next one we're going to look at is,,,
write,,,
file so let's say write file and I'm not,,,
going to do it four different times I'm,,,
going to use the asyn A8 version so,,,
let's say const write file and it does,,,
just that it writes to a file if it,,,
doesn't exist then um it'll create it so,,,
let's say,,,
async and again we'll do do try,,,
catch and in here we're we don't need to,,,
return anything from it so we'll just,,,
simply say await and then write file,,,
it's going to take in the location and,,,
name of the file I'll just use the same,,,
one uh we don't need to put the encoding,,,
what we do need is what we want to write,,,
to it so let's say,,,
hello I am writing to this,,,
file and then we'll just do a console,,,
log and we'll say file,,,
written,,,
to okay so now let's do the right file,,,
before the read,,,
file so we'll go ahead and run this and,,,
now we see file written to and we see,,,
hello I'm writing to this file and if I,,,
open up that test.txt you can see that,,,
it it overwrote what was there so it's,,,
always going to overwrite whatever you,,,
have there now if you want to add,,,
something to it and not overwrite it you,,,
can append so that's where append file,,,
comes in so for this let's say const,,,
append,,,
file okay and then we'll,,,
do uh we don't have to return anything,,,
so we'll just say await,,,
fs. append file and it's going to take,,,
in the file we want to append,,,
to and what we want to append so I'm,,,
going to put in a string I'm going to,,,
use a new line character which is sln,,,
and we'll say this,,,
is appended,,,
text and then I'll just console log,,,
we'll say file appended,,,
to all right and then we'll call this,,,
let's do it second so aen file and then,,,
we'll read it so we'll run file written,,,
to file appended to we see the first,,,
line and then we see the appended text,,,
and if I look in the file a new line we,,,
have this is a pended text so that's,,,
kind of the gist of the fs module you,,,
can do all types of stuff with files if,,,
you want to save logs or or whatever you,,,
could even integrate it into our API,,,
into the middle the logger middleware to,,,
log it to the file in fact that could be,,,
a little assignment for you guys to do,,,
so the next thing I want to look at is,,,
the path module which we looked at a,,,
little bit so let's create path demo.jpg,,,
going to bring,,,
in path,,,
[Music],,,
from,,,
path okay now and this is it gives you,,,
utilities to work with file paths and it,,,
doesn't matter if the file path is there,,,
if like it's actually in our structure,,,
or not so I'm just going to create a,,,
variable to represent a file path to,,,
work with so we'll do SL dur1 SL dur2 SL,,,
test,,,
.txt okay that's not a real location but,,,
that's what we'll use to kind of show,,,
you the different utilities we have so,,,
the first is base name all lowercase and,,,
this will return the last portion of a,,,
path so we can simply console log path.,,,
Bas name and then pass in our file path,,,
and then we'll run this so remember you,,,
got to run path demo. JS and we get,,,
test.txt,,,
because it's looking at this and it's,,,
just giving us the file name just the,,,
base name now we can do the opposite and,,,
get the directory with dur name so,,,
durame and let's do console log,,,
path. durame and then file,,,
path and take a look and you can see,,,
here it's just giving us the the file,,,
path the dur dur One D 2 now you might,,,
want to get just the extension name so,,,
EXT name will do that so we'll go ahead,,,
and console log path. EXT name and then,,,
pass in our file path and when we run,,,
that we should,,,
see. txt okay because it's just going to,,,
give you the extension now there's also,,,
a method called parse that will,,,
basically give us an object with all,,,
this stuff right here so if we console,,,
log path.,,,
parse and we run that see we have an,,,
object with the root which is just an,,,
empty string,,,
and then the dur or the directory the,,,
base the extension and name just the,,,
name of the file so there's going to be,,,
different cases when you're working with,,,
file paths that you're going to need,,,
stuff like this now I already kind of,,,
showed you how to get the dur name and,,,
the directory name and file name of the,,,
current file but I'll just go through,,,
that,,,
again and again if you're using commonjs,,,
you have access to double uncore,,,
durame and double uncore file name you,,,
don't have to do anything but if you're,,,
using ES modules you have to kind of,,,
create it yourself and we do that by,,,
using again the URL,,,
module and then we can use the right,,,
here so file name equals uh URL and then,,,
the file URL to path and what we pass in,,,
here is the file URL which we can get,,,
from import. met. URL okay so that,,,
import that gives us something like this,,,
file SL colon SL slash and then the file,,,
path but we want just the path and not,,,
that file colon slash so this will give,,,
us the the,,,
actual um file URL I'm sorry file path,,,
and then to get the directory name we,,,
can just,,,
do dur name and set that to and then use,,,
the path module and the durame,,,
method and then pass in double _ file,,,
name and you have to bring in path and,,,
it it auto imported for me that's,,,
another thing too if you use sometimes,,,
if you use something in BS code a module,,,
and you don't import it it'll Auto,,,
Import it for you and then you can,,,
console log both of these so we get the,,,
file name we get the path,,,
name uh sorry the dur dur name if I run,,,
that so here we go this one has the,,,
actual file in it this one is just the,,,
path now another one is join and I,,,
believe we use that already as well and,,,
what join does is it will create a file,,,
path based on arguments passed in and,,,
the the main reason for this is because,,,
on different operating systems you have,,,
different delimeters so for instance on,,,
Linux and on Mac you would have a path,,,
like,,,
users uh forward slash Brad right but on,,,
Windows it would be users back slash,,,
Brad so what join does is it'll you just,,,
pass these in as arguments and it'll,,,
automatically put the correct delimiter,,,
in so let's let's try that we'll say,,,
const and let's say file path,,,
2 and we'll set this to path.,,,
jooin and we'll take the current,,,
directory name and then we'll add on to,,,
it let's say dur,,,
one and dur two and then let's say say,,,
test.txt and then if we console log file,,,
path,,,
2 and we take a look it's going to be,,,
the the current directory that we're in,,,
which is for me is going to be this and,,,
then we added dur one then dur 2 and,,,
then test.txt so it just it just joins,,,
and constructs a path then we also have,,,
resolve which will basically do the same,,,
thing except it's always going to be an,,,
absolute path in fact you can use these,,,
kind of interchangeably I could actually,,,
just do this we'll change that to three,,,
and then we'll here instead of join,,,
we'll use,,,
resolve and uh we also want to log file,,,
path 3 and if I do that you'll see we,,,
get the same exact thing all right and,,,
there's tons more methods you can check,,,
out and you can look at the,,,
documentation for that but I do want to,,,
move on so the next one we're going to,,,
look at is the OS module so let's say,,,
OSD demo. JS and we're going to bring,,,
this in so import,,,
Os from,,,
OS and this will just give you,,,
information about your system which is,,,
nice if you want to create something,,,
that interacts with the the memory on,,,
your system or the CPUs or something,,,
like that maybe you want to create a,,,
little visualization for um for the,,,
memory used things like that so the,,,
first method that we're going to look at,,,
is user info actually it's a capital I,,,
and that will do just that it'll give,,,
you information on the the current,,,
system user so let's do a console log,,,
os.,,,
userinfo and then of course we're going,,,
to run the OS demo JS and this is what,,,
it gives me an object with the uid G,,,
username obviously yours is going to be,,,
different depending on your system and,,,
your user and of course if you wanted,,,
just the username you could just add on,,,
to this do user name and if I run that,,,
it gives me my user which is Brad,,,
traversy all right so next we're going,,,
to look at some methods that have to do,,,
with memory so we can get the total,,,
mem actually it's all lowercase this one,,,
so total mem and let's console log,,,
os. total,,,
mem and we'll run that and that's going,,,
to be in bytes so this is the total meem,,,
and then we also have free meem which,,,
will be the free memory so os.,,,
free run that forgot my,,,
parenthesis okay so we have the total,,,
memory and we have the free memory now,,,
if you want information on the CPUs,,,
there's a method called CPUs so we'll,,,
console log let's say os.,,,
CPUs and what this is going to give you,,,
is an array and then you're going to,,,
have an object for every core on your,,,
system so you can see I have Intel Zeon,,,
and it's going to give me an object for,,,
every core in my,,,
system uh I think yeah I think that's,,,
good for the OS there are some other,,,
things but you can check out the,,,
documentation for those now we'll jump,,,
into the URL module so let's say URL,,,
demo.,,,
JS and we'll import URL from from,,,
URL okay so I'm going to just construct,,,
a a URL string to work with so let's say,,,
URL,,,
string and we'll set this to I want to,,,
have something that has a a query param,,,
in it as well so we'll use like a Google,,,
search so we'll say,,,
www.,,,
google.com search and then we'll add in,,,
a q pram so a search query and we'll set,,,
that to hello Plus World,,,
okay so if you were to search Hello,,,
World on Google you would have a URL,,,
like this now I want to construct a URL,,,
object to work with and we can do that,,,
with the URL Constructor so let's say,,,
const URL obj set that to new and then,,,
the URL Constructor and we'll pass in,,,
our URL,,,
string and then just to see what that,,,
gives us let's console log URL object,,,
and basically it's going to give you all,,,
kinds of stuff from from that URL make,,,
sure you run the right,,,
file and you can see our object here it,,,
has the atra which is the entire string,,,
the entire link the origin which is just,,,
the domain the protocol username and,,,
password if there's one host the port if,,,
there is one the path name which is/,,,
search the query string here so you get,,,
the whole question mark Q equals hello,,,
world and then you also have a URL,,,
search params object with each um each,,,
key in value and also a hash so you can,,,
access any of these by themselves so if,,,
you want to do like um like,,,
dot path,,,
name and there you go we get slash,,,
search so let's look at some of these,,,
other methods so,,,
format what format will do is it takes,,,
the object and turns it back into a,,,
string so let's do a console log of url.,,,
format and let's pass in our URL,,,
object and you'll see that that will,,,
just give me that'll just put it back,,,
into string,,,
form um we talked about the import So,,,
import. Meta do URL so this is kind of a,,,
special variable and again it provides,,,
the uh well this provides some metadata,,,
about the current module so it's not,,,
actually part of the URL module but but,,,
this is useful to know and it gives you,,,
the the file let's say the file URL so,,,
if we were to console log this directly,,,
import meta,,,
DOL then you can see it gives us the the,,,
file has the file protocol here and then,,,
the path and then we already saw this as,,,
well the,,,
file file URL to path which will just,,,
convert it to a regular path so we can,,,
say console,,,
log uh URL,,,
do file URL to path and pass in,,,
import meta,,,
URL and now if I run that now we just,,,
get the path now the next thing I want,,,
to show you is how we can get the search,,,
params or the query params so like for,,,
instance we have a a key of q and a,,,
value of hello world so what we can do,,,
remember we can we can get the URL,,,
object. search so if I do that it's,,,
going to give me the entire thing the Q,,,
equals hello world but I can go ahead,,,
and say con and I'll create a pams,,,
object with new and then URL search,,,
pams and pass in the URL,,,
doob uh not doob URL obj and then do,,,
search,,,
okay so I'm passing this into,,,
this and yeah let's go ahead and console,,,
log now,,,
pams and that should give me an,,,
object yep so we have an object with q,,,
and then the value is hello world and of,,,
course if I wanted just the value I,,,
could actually do this I could console,,,
log,,,
pams we we don't do this like you might,,,
think we can do pams doq but we don't we,,,
use a get method and then we pass in Q,,,
so now I should just get Hello,,,
World okay and you can even add on to,,,
the pams so for instance we can say pams,,,
do append let's say we want to add on a,,,
limit and say we want to set that to,,,
five now if I let's move this down here,,,
and log pams and we should have the Q,,,
hello world but we also have that limit,,,
five and you can also delete as well so,,,
I could say,,,
ps. delete and I want to delete,,,
limit and now if I log pams now limit is,,,
gone and you could you could also Loop,,,
through those as well all right and,,,
there's a bunch of other methods but I,,,
think that we'll go ahead and stop here,,,
as far as the the URL module so the next,,,
one I want to look look at is called,,,
crypto so let's say,,,
crypto uh crypto demo Mo,,,
.js so what this does is it provides uh,,,
cryptographic functionality and you can,,,
read more on the docs but you can do,,,
things like create hashes so if you want,,,
to Hash passwords you can create random,,,
hexadecimal strings you can encrypt and,,,
decrypt data just all types of stuff um,,,
some of this can get really complicated,,,
so I'm just going to do a couple simple,,,
things so let's first import crypto from,,,
crypto and the first thing I want to,,,
show you is how to create a hash with,,,
the create hash uh,,,
method so let's say cons hash set that,,,
to crypto do hash and then what it takes,,,
in uh what it takes in is the algorithm,,,
that you want to use which could be like,,,
md5 I'm going to use sha 256 which is,,,
pretty,,,
common all right and then to actually,,,
hash something we use the update method,,,
so let's say,,,
hash,,,
dot update and whatever you want to Hash,,,
we'll put in here so let's say password,,,
one 123,,,
4 and then to get that hash I could use,,,
the digest method so hash do,,,
digest um and then we want that to be in,,,
HEX so we'll pass in,,,
HEX and whoops we want to run the,,,
correct file so,,,
node crypto demo JS let's see what's,,,
going on here the input argument must be,,,
an instance of buffer typed array or,,,
data view let's,,,
see,,,
so cinh equals crypto do I'm sorry this,,,
is this should be the create,,,
hash method,,,
all right so if I do that and there we,,,
go so there's our hash and you you never,,,
want to obviously you never want to,,,
store plain text passwords and databases,,,
so you could hash it before you put it,,,
in now you might want to just generate,,,
Generate random um I can never say this,,,
word cryptographic cryptographically,,,
strong um data or a cryptographically,,,
strong hexadecimal string and you can,,,
use random bytes for that so let's say,,,
crypto do random bytes and you put the,,,
size in here we'll say 16 and then you,,,
have a call back that can take in an,,,
error and a buffer so we'll say,,,
buff and then we can check for the error,,,
so we'll say if error then,,,
throw error and then let's just do a,,,
console log of now we can take that,,,
buffer and we can use two string on it,,,
and let's pass into two string hex,,,
so now if we go ahead and run that you,,,
see it gives me that random string if I,,,
run it again it's always going to be,,,
different and you could even use this,,,
for something like you um user IDs,,,
things like,,,
that now I want to look at uh let me,,,
just put a comment here so this is,,,
random bytes I want to look at,,,
encrypting and decrypting data and we,,,
can do that by creating Cipher text,,,
which is an encrypted form of a message,,,
our data so basically it will encrypt,,,
plain text which is readable data into,,,
Cipher text which is unreadable data,,,
using cryptographic algorithms and keys,,,
and the cipher text can only be,,,
decrypted back into plain text by,,,
someone who possesses possesses the,,,
correct key and it also uses something,,,
called an IV which ensures that even if,,,
it's the same plain text and it's,,,
encrypted multiple times with that same,,,
key the resulting Cipher text will still,,,
be different each time now I think I,,,
should just paste some of this in,,,
because it's kind of long I don't want,,,
to type it all out but I want you guys,,,
to know how it works so we're going to,,,
be using two two different methods the,,,
first is,,,
create Cipher,,,
IV and actually I think it's,,,
lowercase yeah create Cipher IV and then,,,
create,,,
decipher IV,,,
so we need three things we need the,,,
algorithm so in this case we're using,,,
the AES 256 CBC algorithm if you go to,,,
the docs you can see the different,,,
algorithms that are available and then,,,
we have our key which is just going to,,,
be uh a random string and we're passing,,,
in 32 and then the IV also just a random,,,
string of 16 and then to encrypt or get,,,
our Cipher,,,
text we can use crypto doc create Cipher,,,
I pass in the algorithm key in IV which,,,
we're doing right here we're creating,,,
right here and then we're using the,,,
update method just like we did with the,,,
hash passing in whatever it is you want,,,
to encrypt the encoding type and then,,,
hex and then here we're taking that,,,
variable and a pending onto it cipher.,,,
final so in order to to encrypt that we,,,
need to use that final method and then,,,
we're logging out the encrypted text so,,,
let's see what that gives us um we,,,
should actually comment,,,
out this stuff,,,
here okay so if we run that and this is,,,
this is now this in Cipher text so it's,,,
encrypted now to decrypt it we kind of,,,
do the same thing except we use create,,,
decipher IV pass in the same three,,,
things the algorithm key and IV and then,,,
we use update again and we pass in the,,,
encrypted string and then we can append,,,
onto that variable final and then log it,,,
and we should see the text so hello this,,,
is a secret message okay so this is the,,,
encrypted or Cipher text this is the,,,
plain text now there's tons of other,,,
things you can do with the crypto module,,,
but I think we're going to stop that,,,
here and the next thing that I want to,,,
look at is the events module and the,,,
event emitter so let's create events,,,
demo.,,,
JS and we're going to import now I'm,,,
only using one thing from here and,,,
that's going to be the event emitter so,,,
I'm just going to destructure it so,,,
we'll say,,,
event emitter and we're importing that,,,
from,,,
events now this is great for building,,,
real-time applications because you can,,,
create custom events and you can listen,,,
for those events you can also listen for,,,
built-in events like dat the data event,,,
on a readable stream so let's uh let's,,,
create an instant an emitter instance so,,,
we'll say cons we'll call it emitter set,,,
that to a new event,,,
emitter or yeah so that will give us an,,,
emitter now I want to create a couple,,,
functions that we want to to run or to,,,
call when an event is emitted so let's,,,
do something just very very simple we'll,,,
create a greet,,,
Handler and we're just going to have,,,
that console,,,
log hello world and then let's create,,,
a goodbye,,,
Handler so we'll call this,,,
one goodbye Handler,,,
and we'll say goodbye world now the on,,,
method is used to register event,,,
listeners and you can listen for,,,
multiple events and have multiple,,,
listeners for the same event so let's,,,
say,,,
register uh register,,,
event,,,
listeners so we'll take our emitter so,,,
my emitter and then we're going to use,,,
the on method so do on and we'll say on,,,
the Greet event then I want to call the,,,
Greet Handler these are obviously very,,,
very simple examples and then let's have,,,
another one called,,,
goodbye and for that we'll call the,,,
goodbye,,,
Handler all right now let's emit some,,,
events and we can do that with the emit,,,
method so on my emitter we have,,,
Emit and let's emit the Greet event and,,,
then let's emit,,,
the goodbye event now if I run that file,,,
so let's clear this up let's run node,,,
events demo and we see Hello World and,,,
goodbye world so I mean obviously these,,,
are very very simple examples but this,,,
allows you to to emit events from,,,
anywhere and you can create real time,,,
applications you can also pass data with,,,
the event so when we emit here let's say,,,
with greet we want to pass in we'll just,,,
pass in John and here we'll pass in John,,,
as well and then what we can do is um up,,,
here in the Greet,,,
Handler we'll say name and,,,
let's let's do this let's say hello and,,,
then we'll just add on to that,,,
name and then the goodbye,,,
Handler and we have access to this this,,,
name argument because we're passing in,,,
um a second argument to,,,
emit so here let's just say,,,
goodbye,,,
space name all right so let's run the,,,
file and now we get hello John and,,,
goodbye John and then to handle errors,,,
we can actually listen for the error,,,
event so let's do my emitter,,,
Doon and on,,,
error then we have a function with an,,,
error and we'll just do a console log,,,
and we'll,,,
say an error,,,
occurred and yeah we'll just we'll just,,,
also pass in error,,,
and that's going to give us the error,,,
message and the stack Trace so now let's,,,
simulate the,,,
error we can do that by taking our,,,
emitter and then,,,
emit,,,
error and then we'll say new,,,
error and just pass,,,
in something went,,,
wrong all right so now let's run the,,,
file and you can see we get this eror,,,
here an error occurred which is coming,,,
from right here and then something went,,,
wrong is the message that we passed in,,,
to this to the error and then we also,,,
have the stack Trace now I wanted to,,,
look at the process module a little bit,,,
or the process object and it's a it's a,,,
global object so we don't even have to,,,
import it and we've we've used it a,,,
little bit by using process.env to,,,
access our environment variables so,,,
let's create a file called process demo,,,
.js and like I said we don't have to,,,
actually I think I said it we don't have,,,
to import it you can if you want but we,,,
should have access to I mean if you do,,,
console log,,,
process and we run,,,
node process demo you can see we have,,,
access to this and the first thing I,,,
wanted to look at is this arv property,,,
which is an array and it has two things,,,
in it by default it has the path to no,,,
nodejs and the path to the current file,,,
but if you add arguments in the command,,,
line you can access those from there as,,,
well so if you want to create CLI,,,
command line interfaces it's it's,,,
helpful so let's console log process.,,,
argv and let's pass in we're going to,,,
run the file but I'm also going to pass,,,
in import this could be anything I'm,,,
just using import as an example and now,,,
what it gives me is the array with those,,,
two paths and then the third item in,,,
here is import right if I add something,,,
else like let's say I want to add a flag,,,
like dash s and then I run that now- s,,,
is the next item in the array and if I,,,
want to access one of these you know on,,,
its own I could do since it's an array,,,
AIS,,,
the3d and that gives me just s and I,,,
could say you know if if um this is,,,
equal to- s then whatever whatever the,,,
logic is for that flag so it's really,,,
cool for um for command line interfaces,,,
let me just put a comment here so this,,,
is the argv,,,
property now we we talked about and we,,,
looked at process.env a little,,,
bit um because we you know we set our,,,
port in the EnV file and we were able to,,,
do process. env. Port but there's a ton,,,
of stuff on this if we just look at,,,
process.env,,,
and we run this you'll see um you're,,,
going to have a whole bunch of stuff,,,
from your system because this this does,,,
doesn't just have to do with um with,,,
this program or even just node.js it's,,,
just your system things um for instance,,,
the computer name I can do process.,,,
env. computer name pretty sure that,,,
that's that's correct so or maybe,,,
not could have swore that was on,,,
there um maybe it's not computer name,,,
let me,,,
see all right so let's look at log name,,,
for example so if we do process. env.,,,
log,,,
name so I get Brad traversy so you can,,,
check out all the the system variables,,,
you have another thing is the the ID of,,,
the node.js process and you can get that,,,
with P ID so let's say console log,,,
process.,,,
PID if I run that you can see that's my,,,
nodejs process if you want the current,,,
working directory you can use,,,
CWD so console log,,,
process.,,,
CWD which is a function,,,
sorry and there we go so that's my,,,
current working directory you can get,,,
the string that represents the title of,,,
the node.js process so title so console,,,
log process,,,
.,,,
title if I run that I get just node uh,,,
memory usage is another one that's a,,,
method so,,,
memory,,,
usage so console log,,,
process memory,,,
usage and we get this object which has,,,
all this this information in it you can,,,
also get the uptime now there's an,,,
uptime for um,,,
for the OS module as well that's your,,,
system up time this this is the up time,,,
of just the process now when I do this,,,
process. uptime it's going to be,,,
something very very short so,,,
0.03 seconds um because it basically is,,,
the time from when you run the command,,,
um to the script executing which is,,,
obviously a very short amount of time,,,
now another method you might use is exit,,,
so basically exit will it'll exit the,,,
process and you can pass in a specific,,,
code where zero means success and if you,,,
pass a one in it's just a general error,,,
so if I do process.,,,
exit and pass in zero which is just,,,
success like it's supposed to exit if I,,,
do a console log after this and I say,,,
hello from after,,,
exit and I run the file you'll see that,,,
this this does not get logged because it,,,
exits the,,,
process now we can also Pro um register,,,
process event listeners with the on,,,
method so for instance and I'm going to,,,
go above the exit so it actually runs we,,,
can say like process.,,,
on and exit is actually an event we can,,,
listen,,,
for and then we get the code in this,,,
call back so let's say console log and,,,
then we'll put some back ticks and we'll,,,
say about to,,,
exit with,,,
code and then we'll pass in the code,,,
okay so let's run the file and we see,,,
about to exit with Code Zero because,,,
this event was fired off when we ran,,,
this all right now there's there's still,,,
a ton more modules I mean there's the,,,
debugger modules there's um you can,,,
write you can create streams you can run,,,
tests I this could go on and on but I,,,
think that this just gives you a good,,,
idea of what is included with node.js at,,,
its core um like I said a million times,,,
you're going to be using packages you're,,,
going to be using Frameworks and,,,
libraries this is just what it offers at,,,
kind of a base level so this is this was,,,
more of just a learning experience not,,,
really practical and and how you would,,,
actually build projects so I'm going to,,,
start working on my my Express crash,,,
course I'm going to revamp that and uh,,,
you know modernize it a little bit but,,,
that's it for now guys thanks for,,,
watching I do have uh a node.js API,,,
masterclass course at traversy media.com,,,
and on udemy where we build a pretty,,,
extensive API for um for coding boot,,,
camps so you might want to check that,,,
out it is a couple years old but it's,,,
all still very relevant not much has,,,
changed as far as the syntax goes so you,,,
might want to check that out and I also,,,
have that vanilla node.js uh rest API,,,
video I think that's a good good place,,,
to go from here as well but either way,,,
thanks for watching guys I appreciate it,,,
and I will see you next time",,,
OhU4yaNih2M,"hey what's going on guys so about a
month ago or so I did a video on VSS
code extensions I gave you 20 different
extensions we went through I showed you
what they did and I got some some good
responses on that a lot of people told
me that they found some stuff that they
never heard of before and now they use
these extensions all the time so I
wanted to do the same thing in the
browser so in this video I'm going to
give you 20 essential browser extensions
and I'm using Google Chrome but for most
of if not all of these there's also a
Firefox add-on if you're a Firefox user
and then a lot of them also have um
plugins or add-ons for other browsers as
well if you're using Edge or something
like that all right and then there's a
lot of different categories so
productivity testing uh research so if
you want to find information about a
site and its layout things like that um
and then just like like Doc readers just
things that that I think are really uh
really useful and that I use in my in my
daily workflow all right so hopefully
you find something that you can use and
and is helpful to you so let's get
[Music]
started all right guys so this list is
not in any particular order and there's
no ranking involved I'm just going to go
through and show you what each one does
and all of these are free or at least
have a free tier I would never add a
paid extension to any kind of list like
this I'm also leaving off extensions
like the react and Redux Dev tools view
Dev tools uh Clockwork for laravel and
any other framework specific extensions
because I want this list to be more of a
general uh just a general list of
extensions uh although HTML CSS and
JavaScript obviously those are the the
core of front-end web development so
some extensions will be geared toward
toward that stuff now the first few
extensions really have to do with
getting information from other websites
or layouts when I'm creating layouts I
like to use other sites for inspiration
and ideas obviously you never want to
copy their code or anything like that
but you may want to know what what a
certain color is or what font they're
using things like that so the first one
we're going to look at is colorzilla and
this is a Color Picker and a gradient
generator that you can use to get the
color of any pixel on the web page and
this is great for web design because a
lot of the time when you're creating
layouts we use other sites for
inspiration and ideas so if you see a
color that you like you can use
colorzilla to quick get either the hex
code or the RGB value you can get it in
different formats and now you can even
use it outside of the browser which is
really cool because you can get colors
from other applications that are on your
desktop things like that um you can even
create gradients and save them to your
your library so if if you're creating
uis and layouts this is definitely a
must-have so what font is the the in the
same realm as colorzilla you may see a
font that you really like on a website
and you want to use and instead of
digging through the CSS files of that
website you can just click on this
extension to find out which font is
being used so so after you click the
icon you can just hover over any text on
the page and it'll show you what that
font is okay and you can uh also click
on the text to get more information like
the font size line height and color WAP
alyer is a technology profiler that
shows you which Technologies are being
used on a website so if you're on a
website and you're curious what it's
built with you can click on wappalyzer
and it'll show you those Technologies so
for example if we go to wordpress.org we
can see that it's built with WordPress
obviously and it'll show you which
programming languages are used databases
web servers Frameworks and more so if we
go to react. deev you can see that it's
built with nextjs if we go to my site
traversy media.com it even shows that
I'm using the kajabi platform which is a
paid plat platform for e-commerce and
video and also uses Ruby on Rails Cloud
andary for images some JavaScript
libraries and more so it's a really cool
way to just see what's going on under
the hood of any website now the web
developer extension is a very popular
extension it adds a toolbar with various
tools and a lot of this stuff you can do
with the standard Dev Tools in most
browsers but this adds a lot more
granularity so if you want to see like
like um you know the cookies so if you
want to manage your cookies and sessions
you can do that from here I like that
you can quickly disable all JavaScript
in CSS Styles you can disable the the
default browser Styles you can edit the
CSS files directly in real time within
an efficient layout um you can do stuff
like with forms you can check all
checkboxes or convert certain inputs to
other types of inputs you can remove
validation display form details and a
lot more and then for images you can
disable them you can make them full size
you can outline background images
display alt attributes all kinds of
stuff and then you can quickly resize
the window to a specific value you can
also validate your HTML your CSS your
links accessibility and a lot more so I
think it's definitely worth having for
any front-end
developer so dark reader is a popular
extension that allows you to enable dark
mode on any website so it's it it's
great for your eyes for one thing
especially for someone like me I get
these eye floos if I stare at White
screens for too long so I try to use doc
mode wherever possible but it's also
good because you can do some testing and
you can see what your the layouts You're
Building what they're going to look like
in uh a dark mode in a darker layout so
definitely a must have for me so Json
form matter is a simple extension that
formats Json data in a more readable way
so when you're working with API eyes and
you get a Json response in the browser
it can be kind of hard to read if it's
not formatted so this extension will
make it more readable it'll add syntax
highlighting you can collapse and expand
objects and arrays so it's it's a very
simple extension but also very useful
and you can still have the option to
view the raw data without the formatting
as well so session buddy is a session
manager that allows you to view save and
restore your browser sessions so if you
have a bunch of tabs open and you want
to save them for later you can click on
the session buddy icon and you can save
them you can also name the sessions add
notes you can restore them at a later
time you can also Import and Export
sessions and I like to use this because
I always have just tons and tons of tabs
and windows open and I like to save them
for later I also like that you can just
search through your sessions so fake
filler is a form filler that allows you
to quickly fill out forms with fake data
so a lot of times we're building
applications where we need to fill out
forms constantly and instead of just
typing out everything we can just click
this icon and it will just fill out the
forms for us with just some fake data
and it'll even you know for for select
list for example it'll make a selection
it'll select radio and checkbox buttons
and things like that so can be really
really helpful and make you more
productive quick source viewer is a
simple extension that allows you to view
the source code of a web page in a much
more indepth and organized way than you
know the default method in the browser
so if you click the icon you'll see the
source code in a new tab you can then
click on any file and view it any file
that is obviously accessible from the
front end you can also search through
the files and and view the source code
in Tree View CSS viewer is a simple
extension that allows you to view the
CSS of any element on the web page you
can click on the CSS viewer icon then
hover over any element and it'll show
you all the CSS so you can also click on
the element to see more information like
the font size font family color things
like that um you can also click on the
CSS to copy it to your clipboard so a
lot of this stuff you can do without
these extensions of course you could use
the dev tools and you can see the CSS
but this makes it just a lot more
efficient and easier so user agent
switcher allows you to quick and easily
switch between user agents so basically
the the platform that is being used to
view the website on so this is great for
testing uh how your site looks on
different devices you can click on the
icon and then choose from a list of user
agents you can also add custom user
agents and you can set up rules to
automatically switch user agents based
on the URL so it's a it's a really good
thing to have to test responsive
design so viz buug is a design tool that
allows you to make changes to a web page
visually and you basically click on the
icon and then click on any element to
make changes and it gives you a nice
little toolbar in the corner as well so
you can edit content locally from the
regular Dev tools but this is again
makes it much more efficient and just a
better way to do it so you can change
text color size positions and a lot more
and you can also add new elements move
elements around delete things you can
also view the grid and the and the
spacing it's a very powerful tool and
it's great for for making quick changes
to a web page without having to do it in
the code so daily dodev is a news
aggregator for for developers they have
some of the best and most recent
articles and tutorials news and things
like that from the web development world
and you can click on the daily dodev
icon or just open a new tab and it'll
show you all the latest articles you can
also search for specific specific topics
um you can save articles for later so I
actually use this all the time to keep
up to date with the latest news and
Trends in web development and I've
actually got quite a few video ideas
from these as well so LT debug is a a
pretty Advanced and in-depth debug and
testing Tool uh I actually just found
out about it recently so I haven't used
it too much but you can do things like
add and remove headers block redirect
requests change user agents throttle
responses you can manage cores and just
to give you an example if we click on
modify headers and give it a rule uh or
a rule name a header name and a value
and apply it to a URL and then save it
when you go to that URL wherever you
applied this and open up the dev tools
you can see the header in the request so
this is very useful when you're testing
your apis and the information that
you're sending to the server now there's
a a list of all the rules that you
created and you can enable and disable
them so there's a lot of other features
as well like I said I I pretty much just
found out about this but it seems to be
a really powerful tool so check my links
is a link Checker and allows you to
quickly check all the links on a web
page you can just click on the on the
icon and it'll show you all the valid
links or the number of valid links the
valid redirecting links the warnings and
the hi invalid links and you can also
copy the results in CSV format as well
so very simple but very helpful so web
developer checklist is a simple
extension that gives you a checklist of
things to do when developing a website
you can click on the icon and it will
show you a list of things to check off
you can also add your own items it's a
nice way to make sure that you're not
missing anything when you're developing
a website I actually do have a few
errors but in my defense most of this
has to do with the e-commerce and video
platform that I'm using um but it it
does help you catch things that you
might have
missed so clickup is a project
management tool that allows you to
create tasks lists and Boards you can
click on the icon and it'll show you all
of your tasks um there's a bunch of
features like a notepad email
integration you can do time tracking
screenshots and a lot more you do need
to sign up to use it but it's free and
it's great for productivity check bot is
a website auditor that checks for SEO
speed security and more you can click on
the check botot icon and it'll show you
a report of any issues you can also view
the report in a new tab you can also
export that report to a PDF file if you
want it's a useful tool for making sure
your website is up to par or your client
websites and I get about an 80% so there
are some improvements that I can make
again a lot of this stuff goes back to
the platform I'm using just saying but
it can be helpful uh especially for
Freelancers when you're creating lots of
client websites and you want to keep
their SEO go up IE tab is an extension
that allows you to view a web page in
Internet Explorer so this is great for
testing how your site looks in older
versions of IE or I guess every IE
version is is older now I know many
developers including myself don't really
care about ie anymore because it's used
so little but if you're working on a
project that requires it then this is a
great tool you can click on the IE tab
icon and it will open the current page
in iie you you can also add custom URLs
to open in Internet Explorer you can set
up exceptions and there's a bunch of
different options including the version
of IE that you want to use so lauram
ipsum generator is a simple extension
that allows you to generate lauram ipsum
text which is just dummy text you can
click on the icon it'll generate as many
paragraphs as you want um you can also
generate lists headings and more and you
can set the length of the text that you
want so it's a very simple extension but
useful for testing and productivity and
it goes well with the fake for fake
filler extension all right guys so
that's it those are 20 browser
extensions that I think are very helpful
and productive for web development and
just in general and I hope that you
found something that you like if you
have any extensions that you think
should be on the list let us know in the
comments I'm always looking for new
tools tools to try out but that's it
thanks for checking it out and I'll see
you next time",,
LDB4uaJ87e0,"hey guys welcome to my 2024 react crash
course so this is something I do every
two to three years not just with react
but all the big Frameworks just to kind
of keep up to date so this course is
designed to get you up and running with
react as quickly as possible and this is
geared toward beginners so if you've
never used react before you're in the
right place and we're going to build a
front end for a joob listing website and
you'll be introduced to Concepts like
components props state hooks data
fetching and much more and we'll also be
using the react router to create a mult
uh multi-page application also in the
real world you you're going to be
working with backend data and apis so
we're going to use the Json server
library to create a mock rest API as our
back end now one thing I want to mention
real quick is that react 19 is right
around the corner and it does add some
new features many of those features are
under the hood meaning that the concepts
of react when it comes to writing the
code and the fundamentals those aren't
going to change as far as what we're
doing here so the biggest change to
react 19 is that they're adding a
compiler which will convert react code
into regular JavaScript potentially
doubling performance so it'll work in a
similar way to uh Frameworks like spelt
now we're going to be using version 18
in this video as 19 isn't released yet
but all the Core Concepts that we're
going to talk about are the same so it
doesn't matter if you're using 18 or 19
and I did do a video on react 19 a
couple weeks ago and we used the
experimental version of react to test
out some of the new features so that
might be something that you want to
watch after this if you're interested
all right so we're going to take a look
at some slides and then we'll get right
into learning
react okay so like I said we're going to
spend a little bit of time with some
slides just to kind of give you an
overview of what react is and what it
entails and I'm going to warn you that
it may be overwhelming if this is your
first introduction to the library and
that's why I like to to be more Hands-On
and jump right in but it can be helpful
to have an overview just so you
understand what react actually is in
some of the terms that we'll be using so
what is react it's a JavaScript library
for building user interfaces and it
allows us to build user interfaces and
front ends of websites and applications
using components which I'll talk about
soon and it's maintained it was created
and maintained by Facebook and a
community of individual developers and
companies you probably have heard react
referred to as a framework I refer it to
it as a framework all the time but it's
actually uh a UI library to be specific
and the difference is that a framework
is a complete solution so angular for
instance is a full-featured framework
because it includes a router an http
client aate management library and much
more and the reason that react is often
referred to as a framework is because it
operates like one and it's in direct
competition with Frameworks like angular
so and in fact it's actually the most
popular out of the major front-end
Frameworks which are react vue.js
angular and spelt and it's often used
with other librar such as react router
to create a full featured solution and
also the ecosystem of react is huge so
it can be used for a wide variety of
applications such as single page apps
serers side rendered applications and
static websites which I'll talk I'll
talk more about those in a few minutes
as well all right so why react now back
in the day the web was very static you
would click on a link and it would take
you to another page the entire page
would refresh this was the state of the
web for a long time then came along Ajax
and this allowed us to make requests to
the server and get data without having
to refresh the page and this was kind of
a game Cher in terms of of the user
interfaces so it allowed us to build
single page applications where we can
have a very Dynamic user experience but
as this type of application and
interface grows it can become very hard
to maintain and this is where react and
front-end Frameworks come in um we can
build dynamic uis in a way that's easy
to maintain and scale and if you've ever
tried to build a large scale UI with
vanilla JavaScript you know that it's
quite a task and the code gets very
unorganized and messy unless you you
build your own framework or something
like that so react and and these other
Frameworks make this much easier now
traditionally just to talk about how it
works kind of under the hood react used
something called the virtual Dom the Dom
meaning the document object model which
you should be familiar with if you're
not I would definitely recommend
learning more vanilla JavaScript first
but the virtual Dom is a lightweight
copy of the actual Dom and when the
state of a component changes the virtual
Dom changes first and then react will
compare the two the virtual Dom and the
actual Dom and it will update the parts
that need to be updated so this is
traditionally how react works that's how
version 18 works that we're using now
and every version before it however with
the upcoming version 19 react will have
a compiler that to my understanding will
replace the virtual Dom and it'll make
things faster and it will also automate
some of the tedious tasks uh making
react easier to work with overall now
most of the reasons to use react also
apply to the other frontend Frameworks
as well and if you ask me specifically
why react over the other ones I would
probably say jobs there's definitely a
lot more react jobs than the others also
the ecosystem is huge when it comes to
um meta SSR Frameworks like next J s and
remix you have react native for mobile
development it's just it's definitely
the most popular now I'm going to be
100% transparent with you guys the
reason that I use react and the reason
that I I do most of my courses and
videos on react is because of its
popularity to me vue.js and spelt do a
lot of things in a much more
straightforward way so if you're not
caring about jobs maybe you're a
freelancer or maybe you're just trying
to build your own products
I would definitely look into other
Frameworks as well um especially spelt
and and Vue because again I think react
just over complicates a lot of stuff
it's don't get me wrong it's a great
framework but if we're if we're just
looking strictly at how we write our
code using these Frameworks I think that
spelt and view are are easier um with
that said that is just my opinion so
take that with a grain of salt also
these Frameworks basically do the same
thing and once you learn one if you
learn react now and then you want to
jump to view it's going to be easy you
just it's just syntax that changes the
the core of what you're actually doing
is the same you're still writing
components you're still passing props
you're still managing State it's just
different
syntax all right so speaking of
components components are the the core
concept of not just react but any
front-end framework and a component is a
reusable piece piece of codee that can
be used to build elements on a page
components can kind of be thought of as
custom HTML elements and components can
be broken down into smaller ones this is
called composition and this is a great
way to build uis because it allows you
to break down complex interfaces into
smaller more manageable pieces and this
makes your code easier to maintain and
scale and components can be either
classes or functions however classes are
kind of the older way of of doing things
in react nowadays you're not really
going to see class-based components
they're all functional uh we will be
using functional components in this
course and in any other course I do um
components can also take in props which
are basically like arguments or
attributes and they can also hold their
own state or their own data now state is
another thing that you're going to have
to wrap your head around when doing when
working in the front end State
represents the data that a component
manages internally it allows components
to store and manage their own uh their
own data which can change over time and
it'll change in response to user
interactions or other factors now state
is typically used for data that's
expected to change such as user input
fetch data from apis or UI related data
like whether a model is open or closed
and to Define state in a functional
component you can use a hook and I'll
talk more about hooks in a second um
you'll use the Ed State hook which is a
built-in react hook and this will return
an array with two elements the current
state value and the function to update
that state and we're again we're going
to get into this I know that just
hearing me say this doesn't tell you
much we will get into examples now
there's also something called Global
state which relates to the app as a
whole and not just a single component so
this would be something like the data
that you fetch from your database you
you probably want to share that with
multiple components so there's ways to
handle this everything from just keeping
your Global state in your main component
and passing it down to child components
to the react context API which is beyond
the scope of this tutorial but it is an
option within react you can also use a
third-party State management system like
Redux okay now we're not going to get
into context or Redux um but we will
look at some Global State later on now
if you've never used react before hooks
can be really intimidating they're also
difficult to explain so bear with me
once we start using them it'll be more
clear now react hooks are functions that
enable functional components to use
State and other react features without
writing a class because like I said
react components used to be classes and
they used to have something called life
cycle methods which were methods that
ran at specific times during the the
component rendering process and and
functional components don't have life
cycle methods because they're not a
class so hooks allow us to do the same
stuff that we could do within class
components such as set State such as
perform effects like data fetching on
load things like that and basically
right now at this point in your learning
the two main hooks that you need to know
are use State and use effect the others
aren't really essential for you to know
at least right now in fact three of them
are being phased out in react 19 um as
you can see all hooks start with the
word use so you can also create your own
custom hooks to use within your
components and that's not something you
need to know right now but just know
that you can create a hook that
basically does anything all right so I
just want to give you a full picture of
what a component looks like so we know
that it can have state associated with
it which is just data and it can also
take in props now the other part of a
component is the output and the output
is jsx or JavaScript syntax extension
and this is basically HTML or an HTML
like syntax within your JavaScript that
and that's what is actually returned
from a react component so this is
actually an example right here you can
see there's uh it's a function called
hero it's taking in some props a title
and subtitle with a default and then
it's returning what looks like HTML but
this is actually
jsx okay what's great about jsx is that
it's Dynamic it's basically what HTML
would be if it were a programming
language you can see right here we're
outputting title and subtitle which are
coming from these props all right you
can also have Expressions you can have
loops conditionals you can basically do
anything within your jsx all right so
there are some differences when it comes
to HTML as you can see you can't use
class because that's a reserved word in
JavaScript so instead we use class name
also for if you let's say you have a
label with a four attribute that's going
to be changed to HTML 4 so there are
some slight differences but for the most
part it's just HTML all right now I was
a little hesitant to even add this page
because I I think it might confuse some
people so if you don't understand it
that's fine don't worry about it at the
moment so there's different types of
applications and websites you can build
using react so what we're going to be
doing today is a SP or a single page
application and this is what these
Frameworks were initially created for so
basically it loads a single HTML file an
index HTML in the browser and then it it
it loads a JavaScript bundle that
includes your entire UI your entire
application basically and this allows
our interface to be very interactive and
even if you go to a specific page like
let's say you click on a link and go to
slab it's not actually loading the about
page on the server the JavaScript is
loading that content for you so spars
are like I said great for really fast
Dynamic interfaces but it can have some
issues when it comes to initial page
load times as well as SEO since the
content comes from JavaScript so the
solution for that is to create a server
side rendered app which you can do with
a framework like nextjs or remix now
these Frameworks still they still use
react you can kind of think of it as a
wrapper around react and instead of
everything being bundled in the
JavaScript the initial page load is
rendered on the server so this is good
for SEO it's also good for the you know
the initial page load time now an SSR or
server side rendered app is a little
more difficult to deploy because you do
need a server a single page app you can
pretty much deploy to any any type of
host um SSRS you use something like
versel or uh netlify or something like
that now the third option is static site
generation so a static site is where the
server generates a bunch of HTML files
at build time so we have Frameworks like
Gatsby and Astro that can do this and
those Frameworks also use react so I
know that this can get complicated
because there's just so many damn
Frameworks but just know that they're
all using react so what you learned
today still applies whether you're using
Gatsby whether you're using uh nextjs
Astro you can actually use a react or
view or spelt components um but yeah
what you're learning today is basically
the core of of all this other stuff so
don't worry about learning this other
stuff right now just know that it is
available and just know that if you're
confused that's completely normal you
should be it's JavaScript you're always
going to be confused and I just realized
this is react generate static HTML
that's not really accurate um it it
would be the The Meta framework like
Gatsby that is generating it not react
itself now there's a few ways to get
started with react we're going to be
using a tool called vit along with the
react plug-in and getting set up is as
easy as running this npm command now
create react app was the most popular
option to build a spa with react um and
it's been around for a long time but
it's no longer recommended it's a bit
bloated it's uh slower and as far as I
know it's not supported anymore so vit
is a newer Solution that's faster it has
a better developer experience it's built
on top of something called es build
which is a very fast JavaScript bundler
and it also has a built-in development
server with hot module replacement so
it's a great solution for building Spas
with react um and and other Frameworks
as well so that's it let's jump in and
let's get our hands dirty learning react
all right guys so real quick I just want
to explain how my crash courses go if
you're new to them so basically the
point of this is to teach you how to get
up and running with react in this case
and we want to go over all the
fundamentals but I also want to create a
project and end up with something that
you can have that you built by the end
of it so this is what we're going to
create this react jobs website and it's
just a uh job listings front end now as
far as the data itself it's going to be
coming from uh a mock backend that we're
going to create with Jason server it's
really simple basically we just create a
Json file with some data and we can then
send get get requests put post delete
and we're going to add crud
functionality all right so as far as the
template here the The Design This is a
Tailwind theme that I created and in the
repository you'll have your Source
folder with you know all your components
and react stuff and then this theme
filesor theme files is going to be just
the HTML files um basically just a theme
it's not going to actually fetch data or
anything like that it'll all be
hardcoded but it'll have all the classes
and all the stuff that we need for
styling so we'll be copying some of that
as we go along because I I I like it to
look decent now just to quickly go over
this the homepage we have a hero
component navbar component some box es
and then we're going to fetch our jobs
and list three of them on the homepage
we can toggle the description here just
to give you you know an example of State
uh component State and then if you click
read more it'll take you to the page The
Details page with all the info the
company info there's buttons to edit and
delete the jobs now we're not going to
get into authentication that's something
that would be separate from this crash
course I do have videos with all
different types of authentication and
react but we'll have full frud
functionality we have our ad page here
to add a job we have our jobs page which
will show all the jobs again having this
little toggle here so it's a pretty
simple project but I think that it's
it's a it's a good one to just kind of
break you into react and and how
everything works as far as components
props events things like that all right
so yeah that's what we'll be building
the repository link will be in the
description and as far as what you need
you're just going to have to have
node.js installed because we're using V
and we're using the node package manager
to set that up so npm comes with node.js
so just download that if you don't
already have it I would suggest
installing the react developer Tools in
your browser we'll probably use those at
some point you can see the components
through you know through your browser
and see any props and state and things
like that so it's helpful and then
react. deev is the new react website and
this is where you can find all the
documentation so you might want want to
just use that kind of as a supplement to
the crash course all right so we can
close this stuff up here um I'm just
going to keep the the react Dev website
open and I do have in Sublime Text I
have the theme files so if I need to
copy something from here you know to get
the HTML and the classes we'll go ahead
and just grab that so maybe just open
the theme files up somewhere all right
so we're going to start off by opening
the terminal and just go to wherever you
want to create your project folder I
have a folder called Dev that I'm going
to use and then we're going to run npm
create again make sure you have no JS
installed or npm won't work so we're
going to say create V at latest and then
just whatever you want to call the
folder I'm going to call it react crash
d224 but you might want to call it like
react jobs or something like that I'm
just naming it this for for you guys for
the repo and then as you can see you can
use vanilla JavaScript view react and
other Frameworks we're going to go ahead
and choose react and you can choose to
use typescript if you want I'm going to
go with just regular JavaScript and
that's it that creates basically a
boilerplate app for us so we can CD into
the that folder that we just
created and then from here I'm going to
go ahead and open up visual studio code
with code Dot and if you're using
something else that's fine um just uh
you know open open the folder in your in
your text editor or
IDE so let's just take a look at the
file structure real quick so there's a v
config file and this is for any
configurations for your Dev server as
you can see we're bringing in the react
plugin and using it here passing it into
this array that's because we chose react
when we were asked the questions one
thing I like to do is change the port
because by default it's I believe it's
517 three I prefer to use 3,000 for
frontend stuff so what we can do is add
in Ser a server object and then in that
server object we can say port and then
whatever you want so I'm going to use
3,000 so now if I open up I'm going open
up my terminal within VSS code my
integrated terminal and run first of all
npm install because as you can see
there's no node modules folder so we
need to install the dependencies which
are react react Dom and vit and then we
have some plugins for um eslint as well
as some types for
typescript all right so once we do that
as you can see in the package.json
there's a Dev script so we can run npm
run
Dev and for me it's going to open on
3,000 because I changed that value in
the config so let's open that up and you
should see a page like this just a
landing page all right so now we have
the dev server running let's just talk
about the structure here for a minute so
the index HTML remember this is a single
page application and and this file is
the single page because this loads in
the browser and then everything else
loads through JavaScript and as you can
see here we're actually including the
main. jsx file in the source folder
including that as a module which is
really cool it's different than how you
know create react app works with webpack
so here I'm just going to change the
title to react jobs and that should
change as soon as I save it you can see
up here um and then the way that this
works if you're not familiar with
frontend Frameworks they they all pretty
much do this this same type of thing we
have a div or I should say single page
applications do the same thing there's a
div and it has an ID of root if we go
into the source folder this is our our
react application and the entry point is
this main.js T file and in here we're
bringing in react react Dom which is the
library that allows it to work with the
document object model or the browser and
then on that react Dom object we have a
create root and that gets passed in an
element and as you can see we're we're
selecting that root element by ID and
then we're calling this render method
and you can render whatever you want as
your application and in this case we
have this app component which comes from
this app.jsx file now I could change
this to anything I want if I put an H1
here and say hello and I save that as
you can see that's what's rendering as
my application and it's styled because
of this index. CSS so I want to just
clean this up a bit I'm just going to
undo that and put the app back um and
then you also have this strict mode
which is a wrapper component that'll
check for potential problems in your app
app so it'll check for things like
deprecated and unsafe life cycle methods
uh Legacy context API usage things like
that so what I want to do is is a little
bit of cleanup so as far as the CSS you
can see it comes with two CSS files
index.css and app.css we're going to be
using Tailwind so we need to install
that and set it up um I'm just going to
keep the index CSS so let's delete the
app
CSS and and the app.jsx is our main
component and basically this is all the
stuff you see right now on the homepage
so what I'm going to do is completely
wipe that away and just create uh
basically an empty component now
components can they're functions and you
can do a regular function so for
instance we could do function app or you
can do an arrow function so con con app
and then use an arrow and you can type
it out if you want but I would suggest
using this extension here this uh it's
called e ps7 react Redux react native
Snippets and this gives you easy
Snippets that you can use to generate
components so what I like to do is RA
Ace which is react Arrow function
component and then export which will be
at the bottom so you see if I hit tab or
enter it gives me an arrow function and
has the export at the bottom now there's
other Snippets like ra a if we do
rafc it does do an arrow function that's
what the a is but the export is here as
opposed to the bottom and then for the
regular function I believe is RFC so now
you can see it's using the regular
function syntax so you can use any of
these but I'll be doing ra fce so if I
save that now we should just see app now
I want to get rid of all the CSS and as
you can see in the main. jsx it is
including the CSS file and I'm going to
keep that but let's just get rid of
everything in that file for now okay so
now we just have just an unstyled uh
website so yeah that's pretty much how
this works we have this div with the ID
of root and then we're inserting our app
into that using this render method all
right now let's uh let's get Tailwind
set up and there's uh some steps we can
follow if you just
Google let's say V
V react
Tailwind so right here install Tailwind
CSS with v so basically we need to
install uh let's see we already did this
created a v project so now we just need
to install tailwind postcss and auto
prefixer so I'm just going to grab that
and then I'm going to open up a new
console I'm going to just let that one
run the server and we'll go ahead and
run
that and then we want to initialize tail
with dasp so this this will create a
Tailwind config file and the- P will
create a post CSS config file so let's
go ahead and run
that and now you can see Tailwind doc
config post css. config then the
Tailwind config we want to have this so
I'm just going to copy that whole thing
go to Tailwind config and just paste
that in all right so basically it's
going to watch anything that has a jst
tsj SX or TSS extension it's going to
look for Tailwind classes in any of
those files in the source folder now
there is a couple things I want to add
here so in extend I'm going to say font
family and I want to use the robotto
font so I'm going to say sanss and then
in an array we can pass in robotto or
whatever font you want to use and then
Sans serif so it just allows you to pass
in a font stack and then and also I want
to have a a certain grid class for The
Details page that's 7030 basically the
left column will be 70 the right will be
30 so I'm going to say grid uh grid
template
columns and then we're going to just
pass in here a string and say
70-30 so that'll be the class and then
we want here
70% space and then 28% % we'll leave a
little bit of room there okay so that's
going to allow us to add a class later
on that we need now my spell check is
showing these blue squiggly lines so I'm
just going to disable that
extension just to get rid of those
because that could be a little
confusing okay so that's the Tailwind
config now we just need to go to our
index CSS and add these three lines
which is going to load Tailwind so right
here index CSS add those save
it and then we should be all set so if
we go back to our
application should uh let's see we might
have to reload let's just stop the
server and run it
again um no utility classes were
detected oh we don't have any Tailwind
classes but that's the only reason it's
saying this but you can see the font has
changed and there's no margin or padding
so Tailwind is being included in fact we
can go to our app component and remember
with jsx we can't use class we use class
name so let's say class name and we'll
do text- 5xl which is a Tailwind class
and there we go so Tailwind is now
working so let's close that up
and yeah we'll just put this here close
that all right so we're going to talk a
little bit about jsx so every react
component is going to return jsx that's
what this is right here which is an H
HTML like syntax and I'm going to give
you some examples of some things you can
do here because it is dynamic um but one
rule that you have to remember is that
you can only return a single element
okay you can have as much stuff in that
element as you want like inside this div
but it can only return one so if I try
to for instance uh and you can put
parentheses around this as well whoops
parentheses and you know put it on uh
multiple lines but if I were to add a
paragraph here like that you'll see I'm
already getting an error in vs code it
says jsx Expressions must have one
parent element so if I save that that's
going to give us an error same error
over here because I'm returning a div
and a paragraph now if I wanted this div
and this paragraph then I could simply
wrap it in a single element so I could
say
div uh whoops I hate when it does this
so I could say div and then end that
here and that's absolutely fine okay so
just remember that it has to be wrapped
in a single element now you might not
want an actual div here so what you can
do is use what's called a fragment and
it's just an empty HTML tag so just like
this so if I do that you can see that
still works but now it doesn't have a
surrounding div in the actual
Dom all right so just remember that now
to give you kind of a a little jsx crash
course let's say we want to put a
dynamic variable here so above the
return I can just write JavaScript so
for instance I'll create a variable
called name and this isn't part of the
project it's just to give you some
examples so we'll do name and then I can
put that value anywhere within my jsx
wrapped in um curly braces so I could
say hello and then curly braces name and
you see I get hello John
and it doesn't have to be just a single
variable it could be an expression for
so for example I could say const x = 10
and const Y = 20 and then I could
say um let's go under that we'll put
another paragraph and I'll say the sum
of and we'll put in
X X and Y is and then I could do an
expression I could say X x + y and if I
save that I get the sum of 10 and 20 is
30 so basically you could put whatever
you want in these in these curly
braces now we can also use loops and we
can render something called a list so
let's add up here let's say cons names
and say we'll make this an array and
we'll just put some names in here so
Brad
Mary uh Joe and Sarah so we get some
names and let's say I want to Loop over
these and output them in the browser so
we can create a list by let's put this
in a ul and it doesn't have to be a UL
it could be anything but I basically
want a list item that has these names
inside so what we can do is open up some
curly braces take our names array and
then we use map which is just the the
vanilla JavaScript high order array
method that takes in a function but
we're going to return some jsx for each
one so we'll say map and then
name and then in here we can have
whatever we'd like I'm going to use a
list item and then we should have access
to each name so this creates what we
call a list if we check it out now
you'll see the names are all in a
list all right now if I open up my
console we're going to see an error or a
warning and and let's see it says me
just reload this okay so it says each
child in a list should have a unique key
prop so when you create a list whatever
this element is inside the map has to
have a unique key prop so we'll say key
now if we had an ID in this array like
if it was objects with IDs we could use
that but since we don't what we can do
is get the index by passing in a second
argument here and then for the key we'll
say that's going to equal and if you're
going to set this to something Dynamic
then you use curly braces so we'll say
key equals index and then if we reload
that that error goes away so that's a
list now we can also use um conditionals
in within jsx now I can't I can't use
like an if statement in here in in U
curly braces like I can't do this if
something um because it has to be
basically a oneline expression um um one
thing you could do is you could have
different returns so let's say we have
let's say logged in and set that to True
right and then you might do something
like
if logged in so I'm doing this above the
return so if logged in then I could
return I don't know we'll just say H1
and then
hello member so if I did that then I see
Hello member and none of this is going
to render but usually you're going to
want to have the conditional somewhere
in here so in that case what we could do
is get rid of that let's go
underneath um the UL and we could use a
Turner we can say if loged
in then let's show an H1 and we'll say
hello member
else then we'll show
we'll say
hello guest so now if we take a look it
says hello member and if I change logged
in to false it says hello guest now
let's say you don't want to show hello
guest you just want to show hello member
if they're logged in ",,
",,
so couple things,,,
you could do you could just put an empty,,,
string here so now it doesn't show,,,
anything or you could get rid of this,,,
the colon here and instead of using a,,,
turn eror you could just use a double,,,
amp per so basically this is going to,,,
return this if this is true so right now,,,
it doesn't show anything but if I change,,,
logged in to true I should probably just,,,
make this smaller so if I change logged,,,
in to true now it says hello member okay,,,
so you can do all kinds of dynamic stuff,,,
in here and I like to say that jsx is,,,
what HTML would be if it were a,,,
programming language and it had logic,,,
now for styling,,,
there's a couple ways you can do this so,,,
obviously you can have your CSS file and,,,
you can add class uh class names okay,,,
remember you don't want to use class you,,,
want to use class name um but if you,,,
want to put inline style you can,,,
actually do that within your JavaScript,,,
within your jsx so let's say,,,
for um I don't know I guess this this,,,
hello John right here let's add style,,,
now we're going to pass in here double,,,
curly braces if you're adding inline,,,
style like this and let's say we want to,,,
change the color so we would say color,,,
colon and then a string of red so it's,,,
not quite CSS but you have the same,,,
properties um but one difference is,,,
you're not going to have for like font,,,
size like let's put a comma here you're,,,
not going to do font Dash size like you,,,
would in CSS you're going to do font,,,
size like that and we'll change that to,,,
let's say 24 pixels all right so if I,,,
save that now you'll see that that's,,,
styled differently now you can also put,,,
this stuff in a variable if you wanted,,,
to so up here let's say we want to do,,,
const and let's call this we'll just,,,
call it Styles oops con Styles and we're,,,
going to set that to an object that has,,,
color uh color red so make sure you put,,,
it uh quotes because it's a string and,,,
then font size and for that we'll say,,,
let's say 55 pixels and then what you,,,
can do is instead of setting this you,,,
could just simply set it to uh in this,,,
case you would do single uh brackets or,,,
curly braces and then just add in,,,
Styles okay so now it's using this but,,,
we're not going to need to do anything,,,
like this because we're using Tailwind,,,
so all we have to do is add,,,
classes all right so none of this has to,,,
do with the project I just wanted to,,,
kind of give you a little intro a little,,,
crash course to jsx so what I'm going to,,,
do is just get rid of all of it and ra,,,
fce once again and just clear all that,,,
up we can close this up for now so we,,,
want to start our project and the way,,,
that I want to do this is just start off,,,
by copying the entire homepage and,,,
putting it into our app our main app,,,
component and then break it up into,,,
smaller components so let's do that I'm,,,
going to go to Sublime Text because,,,
that's where I have my theme files,,,
and we're going to go to index HTML okay,,,
so just open that up now we don't need,,,
the head stuff that's already in the the,,,
single page the index HTML so let's grab,,,
everything that's in the body so from,,,
this,,,
nav and then we want to go down,,,
to uh the last section we don't we don't,,,
want the um the script there so just,,,
just grab this and then we're going to,,,
put this as the return so let's return,,,
some parentheses and then paste all that,,,
stuff in now I'm sorry we can't do that,,,
because remember it has to be inside of,,,
a parent so what we can do is use a,,,
fragment and then paste everything in,,,
that,,,
fragment now remember we don't want to,,,
use class it will work um well one thing,,,
that's not going to work is the comments,,,
here so you either have to comment it,,,
out with jsx syntax like this or just,,,
get rid of the comments uh I'm just,,,
going to I'm going to get rid of,,,
I guess I'll keep them we'll just,,,
comment these out so yeah you definitely,,,
want to either delete a comment them out,,,
because you're going to get an error so,,,
job listing three and I just put the,,,
comments in just to kind of break,,,
everything up was that all of them let's,,,
see this one here developers and,,,
employers,,,
[Music],,,
hero and to comment it out I'm just,,,
highlighting and doing command and,,,
forward slash or control forward slash,,,
logo we don't need that comment all,,,
right so now if I save that you'll see,,,
it actually does work um but if I were,,,
to open up the console it's going to,,,
tell me invalid Dom property class did,,,
you mean class name so it's telling us,,,
to change these so what we can do is,,,
just highlight the first one and we can,,,
do a commander control shift L that will,,,
select all of them and then we're going,,,
to change it to class name save it and,,,
then that should if we reload that will,,,
get rid of the the,,,
warning okay so now we have our entire,,,
page inside of this the app component,,,
which obviously isn't what we want uh we,,,
want to break everything up into,,,
components so let's start off we'll just,,,
go from top to bottom we'll start with,,,
the nav bar so that's this entire nav,,,
tag and everything in it so what we'll,,,
do is in the source folder we're going,,,
to create a new folder called,,,
components and in components I'm going,,,
to create a file called navb bar. jsx,,,
now a component can have a JS or a jsx,,,
extension and if you're using typescript,,,
it can be TS or TSX I prefer jsx so,,,
we're just going to do that and we'll do,,,
ra fce again and it's going to call it,,,
navbar because that's the name of the,,,
file that's fine so I'll save that now,,,
to bring that in and use it into our,,,
main component we're going to go up to,,,
the top here and say import navbar,,,
from do/ components navbar and then we,,,
can put that anywhere in here we want,,,
let's just go right above the actual nav,,,
tag and say navbar just like a an HTML,,,
tag and there it is so now we're we're,,,
importing and using that component so,,,
let's take the the entire nav tag and,,,
everything in,,,
it and let's cut that if we save it you,,,
can see now it's gone and I'm going to,,,
go into the navbar and I want to put,,,
that that as the return so we'll put,,,
some parentheses and then paste that in,,,
save it and now it's back okay but it's,,,
in its own component and if we were to,,,
use the react Dev tools so if you open,,,
up your uh tools down here and you go to,,,
components you can see we have our,,,
navbar component and it will show you,,,
any props or state which obviously right,,,
now we don't have any but that's a,,,
separate component a UI component so now,,,
Let's uh let's do some stuff here you,,,
notice that the image isn't showing the,,,
logo so first thing we need to bring it,,,
into our file structure and I'm going to,,,
put it in the assets folder right now,,,
there's just this react,,,
SVG uh which we can just we can get rid,,,
of that and let's bring over so if you,,,
go in your theme files and you go to,,,
images you'll have the logo PNG so I'm,,,
going to bring that actually let's,,,
create let's create a folder are called,,,
images in the assets folder and then,,,
we'll bring the logo into,,,
that all right and then what we can do,,,
is bring that image in to our navbar so,,,
we can say,,,
import let's say import logo from and,,,
then we need to navigate let's see we're,,,
in components so we want to go up one,,,
level into assets and then into images,,,
and then,,,
logo.png,,,
okay so we're going to bring that file,,,
in and then we can go down to the image,,,
where we have the logo which is right,,,
here and let's replace the source we're,,,
going to make it Dynamic so we need our,,,
curly braces and then we can say logo,,,
and there we go so now the logo shows so,,,
now the Navar is its own component we'll,,,
come back to this later when we deal,,,
with the the routes and links and and,,,
that stuff but now let's deal with the,,,
hero so the hero is this section right,,,
here so I'm going to just get rid of,,,
that comment and then I'm going to cut,,,
this entire section and then in,,,
components let's create a file called,,,
hero. jsx and we'll do,,,
rafc and let's get rid of that and then,,,
I'm going to paste in that section save,,,
it and then let's go to our appjs and do,,,
the same thing we'll bring,,,
in,,,
hero here hero and then we can embed,,,
it like,,,
that okay save and we still get the same,,,
thing but now the hero is in its own,,,
component in fact if we look at the dev,,,
tools again if we go to components,,,
you'll see we have navbar and we have,,,
hero now I want to go over props because,,,
remember I said we can pass in props to,,,
a component which are basically,,,
attributes so let's say we want to be,,,
able to pass in in two things we want to,,,
pass in the title which would be this,,,
and the subtitle which would be the,,,
smaller text so we can pass it in let's,,,
say,,,
title and for now I'll just say test,,,
title and then let's pass in,,,
subtitle and I'll say this is the,,,
subtitle okay so by doing that nothing,,,
happens right so I mean I'm just passing,,,
it in I'm not using it in any way so,,,
let's go go into the hero close that up,,,
for now and then what happens is that,,,
props it'll get passed in here and you,,,
can call this anything I'm going to call,,,
it props for now but in a minute I'm,,,
going to show you how we can destructure,,,
it as well so we want to put the title,,,
here instead of this hardcoded content,,,
so what we would do is open up our curly,,,
braces and we can say props do title and,,,
then here for this one we'll say,,,
props props dos subtitle and if I save,,,
that now whatever I'm passing in is,,,
going to get displayed as the title and,,,
subtitle now usually what you'll do is,,,
destructure this so instead of of just,,,
props we could add some curly braces in,,,
here and then destructure the title and,,,
the subtitle like that and then wherever,,,
we use this we don't have to do props,,,
dot we can just do title and then here,,,
we can just do subtitle and that still,,,
works now you can also have default,,,
props so all we have to do is up here,,,
let's say for the default we want what,,,
we had become a react Dev and then for,,,
the,,,
subtitle set that uh what was it,,,
find find the react,,,
[Music],,,
job that fits your skill,,,
set okay so if I save that nothing,,,
happens because we're passing in the,,,
title and subtitle whatever we pass in,,,
is going to override the default props,,,
so let's get rid of these put it back to,,,
just hero and now we have our default,,,
prop content,,,
showing now we can also have wrapper,,,
components so in addition to just being,,,
able to to do this with the self-closing,,,
tag we could do something like let's say,,,
we had a card component and then you,,,
want to put you know whatever content,,,
inside of it so let's do that for these,,,
two cards here all right now instead of,,,
of bringing in the card component that,,,
we're going to create into this file and,,,
having all that content here I want to,,,
keep this app file clean so what we'll,,,
do is create a component to hold all of,,,
our cards and we'll call that home cards,,,
I know we didn't create this yet but,,,
let's just embed it here and then bring,,,
it in we'll say,,,
import home,,,
cards uh from and it's going to be in,,,
components,,,
slash home cards okay and I know we,,,
haven't created it yet that's why we,,,
have an error but let's go ahead we can,,,
get rid of that comment and then let's,,,
copy this entire section which ends,,,
right,,,
here okay so we're gonna not we're going,,,
to cut that,,,
and let's go into,,,
components right and in components we're,,,
going to create a new file called home,,,
cards.,,,
jsx rafc and then let's do get rid of,,,
this and then we'll paste in that,,,
section and then it should yeah there we,,,
go so it's working again so now this,,,
right here is its own component called,,,
home cards but what I want to do is have,,,
each one of these be a card component,,,
that we can wrap the content in so,,,
whatever content we wrap will have this,,,
background color and I also want to pass,,,
in that background color as a prop or,,,
pass in the class as a prop so let's,,,
create another component called card.,,,
jsx,,,
rafc okay now this card component is,,,
going to take in as a prop it's going to,,,
take in uh we're going to destruct rure,,,
it's going to take in children so,,,
children is what we use for whatever we,,,
wrap so if we pass in like an H1 into,,,
the card component we wrap the card or,,,
wrap the H1 in a card then this would be,,,
that H1 so that children we just want to,,,
display,,,
that um in the return now I do want to,,,
have the the card styling like the,,,
background and the the Shadow and all,,,
that so let's um let's make this a div,,,
that we return but let's add some,,,
classes so we'll say BG D gray,,,
d00 let's do padding,,,
-6 let's do rounded,,,
dlg and let's do Shadow Das,,,
MD all right so we'll do that and then,,,
in here is where we want to Output the,,,
children which is going to be whatever,,,
it is we wrap so I'll save that and now,,,
let's go into home cards and let's,,,
import,,,
cards oops cards,,,
from uht,,,
slash not cards just card,,,
singular okay and then let's see where,,,
we have so we have the grid class and,,,
then these right here right so this BG,,,
gray and then this BG Indigo these are,,,
these two so I want to take everything,,,
that's in the BG gray div right here,,,
right this H2 and all this actually you,,,
know what let's just take the whole,,,
thing or wait a minute no we'll take,,,
everything in it so the H2 the paragraph,,,
and the link I'm going to grab that and,,,
I'm going to copy it and then I'm going,,,
to cut or not cut but just delete this,,,
entire,,,
div and then this this is where I want,,,
to put the card and I want to wrap this,,,
stuff okay so this card now is basically,,,
just taking the place of the div this BG,,,
gray div and then let's do the same,,,
thing here we'll take the H2 the,,,
paragraph and the link we'll cut that,,,
and then we'll replace this div with,,,
another,,,
card because you can have as many of the,,,
of the same component as you want then,,,
we'll paste that in now if I save you'll,,,
notice that they're both they both have,,,
a gray background because that's what,,,
we're using in the the card wrapper,,,
component but what I want to be able to,,,
do is pass in a class like this so I can,,,
change the background color so let's add,,,
another prop here so in addition to that,,,
it'll take in BG and I want to set a,,,
default of the BG Das gray- 100 so,,,
that's what it will be if you don't pass,,,
in a BG all right now here we want to,,,
make this class name Dynamic so instead,,,
of hardcoding the be this right here we,,,
want it to be this variable so how do we,,,
do that well we have to instead of just,,,
using quotes we have to it's going to be,,,
dynamic so we need to use curly braces,,,
so let's do that and then let's get rid,,,
of,,,
uh where's my cursor let's get rid of,,,
this right here BG,,,
gray and then we're we're going to put,,,
some back ticks in here so here and then,,,
here okay so right now it's just it has,,,
these hardcoded classes but since we're,,,
using a template literal now I can put a,,,
variable in here so I'm just going to do,,,
that and then put the BG variable here,,,
which by default will be this but I can,,,
also pass in a new one so if I save that,,,
now you'll see that's still gray but if,,,
I were to go to the second card here and,,,
then pass in b G and set that to let's,,,
say BG D,,,
Indigo Das 100 and save now I've changed,,,
that so you can use props to not only,,,
change the content but to also change,,,
the,,,
styling so now we've come to the browse,,,
jobs and now we want to start to work,,,
with data a little bit now we don't have,,,
a backend yet so we're not going to be,,,
fetching these jobs just yet what we'll,,,
do for now is just use a Json file so,,,
let's um just open up the so from the,,,
repository in the source folder there's,,,
a jobs. Json file so I want you to take,,,
that and bring that over to your Source,,,
folder now at the moment this is an,,,
object that has a job a named jobs array,,,
inside of it and the reason for that is,,,
because with Json server which we're,,,
going to use later that's how you need,,,
to format it but for now what I want you,,,
to do is just just have the array so we,,,
can get rid of this the curly brace and,,,
then the jobs so it's just starts with,,,
the bracket and then down at the bottom,,,
just get rid of that curly brace okay so,,,
now we just have an array of jobs and we,,,
can bring this into the files where we,,,
file where we need it now we could bring,,,
it into you know into the uh we can,,,
close home cards but we could bring the,,,
data into the app component and then we,,,
could use it here but like I said I want,,,
to keep this app component clean so why,,,
don't we put the listings into its own,,,
component and then we'll have a single,,,
listing component which will be you know,,,
this this block so in components let's,,,
create a new file and we'll call this,,,
job,,,
listings.,,,
jsx and let's do rafc and then let's,,,
grab from the app this entire section,,,
under browse jobs we can get rid of that,,,
comment and then this,,,
section see so this,,,
ends right here actually let's see do we,,,
want,,,
the H we'll put the we'll put the other,,,
section with the the view all button in,,,
its own component so let's just take,,,
this one section cut it and then in the,,,
job,,,
listings get rid of that paste this in,,,
save it let's go back to app let's,,,
import job,,,
listings and then let's add it here so,,,
job listings so you can see how we're,,,
cleaning this file up now it's going to,,,
look the same right except now this is,,,
in its own,,,
component now I want this data because,,,
right now if we look at this the data is,,,
just hardcoded in the HTML I want it to,,,
come from that Json file like I said,,,
ultimately it's going to come from Json,,,
server which is a mock back in but for,,,
now we'll just bring in the data,,,
directly so we can do that by just,,,
saying import,,,
jobs from and we want to go let's see up,,,
one level into and then we want jobs.,,,
Json and just to make sure that we're,,,
getting that we can just do a quick,,,
console log of,,,
jobs and then if,,,
we check out console see we have an an,,,
array of,,,
jobs all right now we want to show those,,,
jobs,,,
here um so what we'll do and this right,,,
here that you're seeing the log in my,,,
browser this is the the console ninja,,,
extension not the browser my editor this,,,
is uh from the console ninja extension,,,
if you want to check that out it's,,,
pretty,,,
cool so let's see we want to create a,,,
list remember I showed you a little,,,
while ago that if you have an array,,,
which is is what this is jobs you can,,,
Loop through it and create a list using,,,
the map method so let's figure out where,,,
we need to do this so we have the grid,,,
here so why don't we inside of the grid,,,
create a list that will have a div like,,,
this with the BG white rounded XEL,,,
around all the jobs okay just like we,,,
see here same thing but we'll be using,,,
the actual data from the file so I'm,,,
going to go right above where it says,,,
job listing one and let's take let's say,,,
jobs. map and then that's going to take,,,
in a function and we're going to return,,,
some jsx from that and the J and that's,,,
going to take job and then the jsx that,,,
I want is one of these divs one of these,,,
boxes so this div which,,,
ends right here I'm going to grab,,,
that and I'm going to cut that okay we,,,
don't need that we don't need these,,,
other listings now so let's get rid of,,,
job listing,,,
two and job,,,
listing three which,,,
ends right here make sure just make sure,,,
you get rid of the right divs all right,,,
so we're just we're really cleaning this,,,
up as well and then inside here right,,,
inside the,,,
function is where I want to paste in,,,
that single div,,,
now if I save this you'll see it's going,,,
to show it a bunch of times it's showing,,,
the same data because that data is,,,
hardcoded but it's showing what 10,,,
because that's what I have in the Json,,,
file so if we look here we have oh no,,,
it's six yeah ID 1 through six so it's,,,
showing me six boxes but it's all the,,,
same data so all we have to do now is,,,
replace the hardcoded data with the data,,,
from each job which we're getting right,,,
here so for where it says fulltime let's,,,
change that to job Dot and then type so,,,
now those should be a little different,,,
fulltime this one says,,,
part-time okay so for the title this,,,
right here the hardcoded title let's get,,,
rid of that and let's say job. tile now,,,
all the titles are different then we,,,
have the description let's get rid of,,,
that and,,,
say um,,,
job.,,,
description okay now those are different,,,
then we have the salary so this right,,,
here uh let me see how are those,,,
salaries formatted do they have okay so,,,
it's just the whatever K2 whatever K so,,,
the slash year will leave there but,,,
we'll replace this with,,,
job.,,,
salary um that should be a big k,,,
let me just fix,,,
this all right so let's see what else do,,,
we have here the,,,
location um and by the way you see we do,,,
have the font awesome it tag here we,,,
don't we're not using the font awesome,,,
CDN so it's not showing up the little,,,
map marker but I'm going to show you an,,,
extension that we can use called react,,,
icons where you can uh basically bring,,,
in your font awesome icons as a,,,
component but we'll do that in a minute,,,
let's um change this,,,
to,,,
job.,,,
location and now you can see that the,,,
locations are,,,
different and then finally the link here,,,
is going to job. HTML which obviously,,,
isn't correct ultimately we want to be,,,
able to go to our website slash and then,,,
jobs and then slash whatever that job ID,,,
is so so let's change this,,,
to uh template literal so we'll put in,,,
some back ticks and we'll say slash job,,,
slash and then we want the ID so job. ID,,,
like that okay so if I click it it's,,,
going to go to job SL2 in this case,,,
which doesn't exist yet but that's fine,,,
now another thing I'd like to do is to,,,
make this an actual component because,,,
right now in our job listings yes we,,,
have a list but we're just outputting a,,,
bunch of HTML let's make this into a,,,
single component that we can then show,,,
for every job so in components let's,,,
create a new file called job listing,,,
singular.,,,
jsx rafc and then that's going to take,,,
in as a prop we'll destructure and,,,
that's going to take in a job and then,,,
what we can do is in the job listings,,,
within the map this div we're going to,,,
grab that,,,
ends right here we're going to cut it,,,
and then here we want to paste that in,,,
and basically it's going to get passed,,,
in that job prop and then we'll use it,,,
in all these different areas so now in,,,
job listings we can simply,,,
import job listing the singular and then,,,
what we want to render for each job is,,,
going to be job listing and it's going,,,
to get passed in a job prop,,,
okay now remember when you have a list,,,
it also has to have a key or you're,,,
going to get that that error so let's,,,
say key equals and I'm going to set that,,,
to the jobs ID because that's going to,,,
be unique remember it has to be a unique,,,
value so if I save and reload you can,,,
see that it's still it's,,,
working okay and if we look at the dev,,,
tools here if we go to components you,,,
can see all of our you can see our tree,,,
of components Navar hero in the home,,,
cards we have two cards components in,,,
job listings we have six job listing,,,
components all right and if we look at,,,
that you'll see over here the props,,,
which is all the job data so you can see,,,
how this UI is nice and organized now,,,
right everything is in UI components and,,,
it's easy to manage so if you were using,,,
just vanilla JavaScript you would have,,,
this giant monolithic file where you're,,,
just selecting all these elements using,,,
whatever a query selector uh and then,,,
you'd have to just create all these,,,
different functions and it's just it,,,
gets very messy but with react or not,,,
just react but any front-end framework,,,
you have everything nice and neat for,,,
your UI okay and it might seem like more,,,
work at first but as you your,,,
application scales you you'll be you'll,,,
learn to appreciate it all right so on,,,
the homepage I actually don't want to,,,
show all of these I only want to show,,,
three um but I also want to use the same,,,
job listings component when we get to,,,
the jobs page so trying to think of,,,
how how I want to do it right now I,,,
think right now let's just go to job,,,
listings and what we can do,,,
is uh let's see instead of just using,,,
jobs directly down here and and looping,,,
through let's do this let's say,,,
const recent jobs and let's set set that,,,
to the jobs array and then we're going,,,
to use slice and we'll say we want to,,,
get from zero to three so we only want,,,
the first three and then we'll replace,,,
this with recent jobs so now it's only,,,
going to Loop over those three save that,,,
and there we,,,
go all right so this final thing this,,,
button if we look at our appjs that's,,,
the last thing we have so let's put that,,,
in its own component so we'll cut that,,,
section and then in components let's,,,
create view all jobs. jsx,,,
rafc and we'll replace this with that,,,
section okay and for the link here let's,,,
change that to,,,
just slash jobs because when we start to,,,
use the router that's what it'll be and,,,
then in the app file we can just bring,,,
that in so import View um what do I call,,,
it yeah view all jobs why isn't it,,,
coming,,,
up,,,
slash slash view all jobs and,,,
then embed it,,,
here save it and there we go so now our,,,
app file is nice and neat so what I'd,,,
like to do next is get into State a,,,
little bit and the use State hook so,,,
remember there's two types of State you,,,
have component state which relates to a,,,
single component so one of these right,,,
navbar hero and then you have app level,,,
or Global state which you can it relates,,,
to the entire app and you can pass down,,,
to components um so what I want to look,,,
at now is is is component State and I,,,
want to go into the job listing,,,
component so this right here here and,,,
basically I want to be able to toggle,,,
this description from being short where,,,
it ends around here and then we can have,,,
a button that says show more that we,,,
click and it'll show the rest so,,,
basically we'll have a piece of State,,,
called show full description okay and we,,,
can change that based on if we click,,,
that button so let's come up here and if,,,
you're going to add State you need to,,,
use the Ed State hook so we're going to,,,
import use state and that's going to be,,,
from react okay now the way this works,,,
as I briefly showed you in the slides,,,
we're going to come above the return the,,,
output and we're going to have an some,,,
brackets here and we want to set that to,,,
use,,,
State okay now this is going to pertain,,,
to the the show full description and,,,
it's going to be a true or false value,,,
and in here you want to put whatever you,,,
want as the default so I'm going to say,,,
false I don't want it to show uh flass,,,
false I don't want it to show by default,,,
and then in here we have two things the,,,
name of the state itself which I'm going,,,
to call show,,,
fo,,,
description and then the second is going,,,
to be the name of the function that we,,,
call to change that state and it's going,,,
to be whatever this is with just set in,,,
front of it so in this case it would be,,,
set show full,,,
description and camel case all right so,,,
now let's get the description so I'm,,,
going to go right above the return here,,,
and I'm going to say let description and,,,
I'm going to set that to the,,,
job. description that's you know the job,,,
that's being passed in for each one of,,,
these and then if let's say,,,
if uh we'll say if not show full,,,
description,,,
then let's basically just cut off some,,,
of it so we'll take that description and,,,
we'll set it equal to whatever that,,,
whatever that description is except I'm,,,
going to use the,,,
substring method to cut it a little bit,,,
so we'll say 0 to 90 and then I want to,,,
add onto it an ellipses The the three,,,
dots so I'm going to concatenate three,,,
three dots onto it and then what we can,,,
do is just replace job do description,,,
with that description variable so now if,,,
I save that you can see that they all,,,
got shorter and they have the little,,,
ellipses on the,,,
end all right so just to kind of,,,
reiterate I haven't done anything with,,,
this state yet all we've done is take,,,
the job description and if the value of,,,
show full description is false which it,,,
is by default then it's going to cut off,,,
okay it's going to cut off after 90,,,
characters and add the,,,
ellipses so now we want to have a little,,,
button that we can click and this is,,,
going to get us into events as well um,,,
but we want to be able to click that and,,,
show the full description so we can call,,,
this to change that so let's go down,,,
here and let's add that button so I'm,,,
going to put,,,
it we going to go right under the,,,
description which is right,,,
here okay and then we're going to add a,,,
button and I'm G to add some classes to,,,
this let's do text-,,,
Indigo um text Indigo,,,
500 and let's do margin bottom,,,
five and then I'm also going to add in,,,
on,,,
Hover then we want,,,
text- Indigo,,,
D600 and then in the button text so this,,,
I want this is going to depend on the,,,
state okay so this is where we show,,,
something different based on the state,,,
well we've already done that with you,,,
know cutting it off short but I'm going,,,
to have a a conditional in here Turner,,,
and I'm going to say if show if show,,,
full description is,,,
true then I want this um I want this,,,
text to say less else then I want it to,,,
say,,,
more okay so if we save that check it,,,
out so it says more because set um set,,,
show fold description is false if I make,,,
it true by default it's going to show,,,
all the text and then this is going to,,,
say less so you can see just the value,,,
of that state changes my component so,,,
I'm going to put it back to false and,,,
then let's make an event so when we,,,
click that we then set that state to,,,
just the opposite if it's true it'll be,,,
set to false if it's false it'll be set,,,
to true so to do that let's go to the,,,
button and let's add,,,
I'm just put it right here we're going,,,
to say onclick so when you want to add,,,
an event it's going to be onclick you,,,
have um uh onsubmit and it's going to be,,,
camel case like this not like vanilla,,,
JavaScript where it's all lowercase so,,,
on click what do we want to do we want,,,
to basically just call that set full uh,,,
set show full description now you don't,,,
want to just do set full description,,,
here because that'll actually call it,,,
without even clicking on it you want to,,,
run a function and then call set show,,,
full,,,
description now you could do this you,,,
could say just set it to not whatever,,,
set full description is okay because,,,
when you call one of these,,,
methods uh whether it's set show full,,,
description or or Set uh I don't know,,,
set anything whatever you you have for,,,
your state it can take in a couple,,,
different things it can take in a,,,
straight value so in this case we're,,,
just setting it to the opposite or it,,,
can take in a function so if you pass a,,,
function in you actually get here,,,
whatever the previous state is and you,,,
can call this whatever preve preve state,,,
and what we want to do is then set it to,,,
the opposite of whatever the preve state,,,
is so if it's true set it to false if,,,
it's false set it to True um because you,,,
you can do it the the way I just showed,,,
you just passing in the not set full,,,
description but you can run into some,,,
issues so this is a a better way of,,,
doing it passing in the function getting,,,
the previous state and then setting it,,,
to whatever the opposite of that,,,
previous state so we'll save that and,,,
then let's come over here let's click,,,
more and now we see the whole thing an",,,
d,,,
of course it's only the component where,,,
that we click that we're talking about,,,
okay these ones stay the same if I click,,,
less then it'll show,,,
less all right so this is I know we,,,
don't have a lot of this type of stuff,,,
in this project but that's the beauty of,,,
using a frontend framework is the,,,
ability to add this this kind of dynamic,,,
stuff okay and you can picture using,,,
this for like a modal you have the open,,,
and close State um if you have a a menu,,,
a hamburger menu you have maybe menu you,,,
could have menu open like right here you,,,
could have menu open and set menu open,,,
or something like that so um hopefully,,,
this gives you just kind of a a good,,,
picture of of what component state is,,,
and what you can do with it now we're,,,
close to our homepage being done so,,,
let's take care of the icon because,,,
right now we have that in our job,,,
listing component we have that it tag,,,
which isn't showing anything because we,,,
don't have the font awesome CDN but I,,,
don't want to use the CDN I want to use,,,
a separate package for that so this will,,,
kind of give you a little bit of,,,
experience in using additional packages,,,
so I'm going to go to my terminal here,,,
the one that's not running the server,,,
and we're going to say npm install react,,,
Das icons and this will allow you to,,,
work with not only font awesome but,,,
material icons and some of the other,,,
packages as well so now that we have,,,
that installed we can go to any,,,
component we want so in job listing,,,
let's,,,
import and we can get,,,
from react icons but since we're using,,,
font awesome it's going to be SL,,,
fa and then there's a bunch of basically,,,
all the font awesome icons that are,,,
available here and they all start with,,,
fa and you can see here there's just,,,
tons of icons so the one that I want is,,,
called map marker this one right here,,,
and then what we can do is go down to,,,
where that it tag is now I still want uh,,,
actually I'll just read the classes but,,,
let's let's replace this it tag with fa,,,
a map marker which is a component so,,,
basically the icon itself is a component,,,
and I'm just going to add some classes,,,
to this I want it to be in line side by,,,
side with the location text LG and then,,,
a little margin bottom so let's save,,,
that and now you can see we have our,,,
little icon let's actually put some,,,
margin on the right as well we'll say,,,
mr1 push that over a little bit so now,,,
anywhere you want icons you can bring it,,,
in from react,,,
icons so I think now we're to the point,,,
where we want to start to add additional,,,
pages right we want the jobs page the ad,,,
job page so we can't do that with just,,,
react so this is this is where you know,,,
what I talked about earlier a library,,,
versus a framework being a library it,,,
doesn't have a way to add separate pages,,,
so we're going to use react router which,,,
is the basically the official router for,,,
react but it is a separate package so we,,,
need to install it so let's go,,,
to um let's go to the terminal again and,,,
we're going to npm install and the name,,,
of this package is react router,,,
ddom okay make sure you add the dashd so,,,
we're going to install,,,
that and the the way that you set this,,,
up has changed a lot over time um in,,,
fact there's been at least two times,,,
where I've created a react course and,,,
then not too long later they changed it,,,
up on how to use this um and it can be a,,,
little the the boiler plate can be a,,,
little overwhelming for beginners so,,,
just bear with me so we're going to put,,,
all the routing stuff in the the main,,,
app file so in the app,,,
jsx and react router is it's actually a,,,
pretty big package um it's it's,,,
buil the remix framework which is a,,,
server side rendering framework for,,,
react it's built on top of react router,,,
so there's a lot that you can do um we,,,
we're going to get into some stuff like,,,
data loaders that react router offers,,,
we're going to do that later on so just,,,
just be aware that it is there's a lot,,,
to it and it can be a little,,,
overwhelming but I'm going to show you,,,
exactly how to create routes and you,,,
know so you can have multiple pages so,,,
let's import a few things from react,,,
router Dom again make sure you use the,,,
dash Dom at the end so we're going to,,,
bring in the route component we're going,,,
to bring in create browser router,,,
create uh it's called create,,,
routes,,,
from elements and also the router,,,
provider okay so we want to bring in,,,
those,,,
things now the way that this will work,,,
is above the the return in the main app,,,
component we're going to create a,,,
variable called router and we're going,,,
to set that to create browser router,,,
which does just that it'll create our,,,
router and inside that we're going to,,,
then use create routes from,,,
elements and inside that is where we can,,,
use our route component so we're going,,,
to put in route and then you can put in,,,
a path here but this is going to be for,,,
the homepage so we'll we can actually,,,
just put an index and then you can have,,,
an element represent that route so for,,,
now I'll just I'm just going to put,,,
in in H1 because you can do anything,,,
just to show you we'll just say my app,,,
okay now this isn't going to do anything,,,
just yet because we haven't um we,,,
haven't implemented the provider okay,,,
the provider is what provides the router,,,
and that's going to go down here so,,,
we're actually going to change this up,,,
and not embed these components in here,,,
cuz we're going to have separate pages,,,
so we can actually um get rid of all,,,
this and all we're going to return is,,,
going to be the router provider so we're,,,
going to say router provider and don't,,,
worry we're still going to use those,,,
components they're just going to be used,,,
in a different way so let's say router,,,
provider and then that'll take in the,,,
router that we just created,,,
so if I save that now you can see we,,,
have my app and that pertains to the,,,
homepage row now if I were to set this,,,
let's say path,,,
equals slash about right and then I go,,,
to,,,
slab then that's going to show that,,,
element okay so this does exactly what,,,
it says it creates a route with a path,,,
and it creates that from an element,,,
which in this case is a H 1 now I want,,,
to show a page for my for my index let's,,,
put that back to index so what what I do,,,
is create a separate folder because your,,,
your pages are components they're still,,,
react components but I don't want to put,,,
them in the same folder as the my,,,
regular UI components so let's create a,,,
a folder called Pages you might see it,,,
called screens sometimes um but we're,,,
going to call it pages and then we're,,,
going to create a home page. jsx file,,,
and just like a regular react component,,,
we'll do,,,
rafc and on the,,,
homepage we want to bring in actually,,,
let's just save this for now and go back,,,
to app,,,
jsx and we no longer need to bring this,,,
stuff in here because we're not using it,,,
in our main app file so we can get rid,,,
of that but we do want to bring in our,,,
pages that we're going to use so we'll,,,
bring in homepage make sure it's from,,,
pages and not components and then here,,,
we're going to render the,,,
homepage okay so now if I save that and,,,
we go uh about doesn't exist and I'll,,,
show you how we can create a custom 404,,,
page as well but if we go to the,,,
homepage then we see the text,,,
homepage okay now in the homepage this,,,
is where I want to bring,,,
in um not the navbar because the Navar I,,,
want to show on all pages and we we,,,
don't want to have to bring it into,,,
every single page so we're going to,,,
create something called a layout um but,,,
let's say the hero component for example,,,
that I only want on the homepage so that,,,
I would import let's say import,,,
hero from and then let's see we're going,,,
to go up one level into components and,,,
then,,,
hero and then let's uh we'll make this a,,,
fragment and then we'll put our hero,,,
component save that and now the hero,,,
component,,,
shows all right,,,
now like I said for the navbar and,,,
things like Footers that's stuff you,,,
want to show on every page so this is,,,
where layouts come in so we're going to,,,
create uh another folder in the source,,,
folder called layouts and you can have,,,
multiple layouts this particular project,,,
will only have one but you can have,,,
multiple but let's call this main layout,,,
out. jsx and again this will be a react,,,
component now before we do anything here,,,
I just want to show you how to actually,,,
use the layout so we can bring it into,,,
our main app jsx let's say import main,,,
layout and then what we need to do is,,,
just create a parent route to the rest,,,
of our routes so let's go right here and,,,
say,,,
route and say path and set that to to,,,
slash and,,,
then um the element is going to be set,,,
to the main,,,
layout okay and then we're going to,,,
surround this uh this parentheses should,,,
be here and then we're going to move,,,
that in here okay so,,,
basically if I save that you'll see main,,,
layout so now this is being applied we,,,
don't see the homepage anymore and I'll,,,
I'll show you how we can get that back,,,
in a second second but basically,,,
anything any routes we put in here are,,,
then going to use this,,,
layout so in the main layout whatever,,,
route you're on that that content that,,,
page is going to come through the outlet,,,
so we're going to import outlet from,,,
react router Dom and then down here,,,
let's make that just a fragment and then,,,
get rid of the text and we want to,,,
Output,,,
here um we want to say Outlet okay it's,,,
it's an actual component now if I save,,,
that we're seeing the the hero again,,,
because we're on the,,,
homepage right we have no other routes,,,
so if I were to go to slab we're just,,,
going to see this,,,
404 okay but uh let's reload that that,,,
was just cached um but now we're,,,
seeing whatever whatever the content of,,,
the page r on now I want the navbar to,,,
show on every page so here here we're,,,
going to bring in the,,,
navbar say navbar that's going to be,,,
from dot do SL,,,
components navbar and then let's put,,,
that above the,,,
outlet,,,
so and there we go so now any page we're,,,
on is going to have the,,,
navbar and of course this this is much,,,
better than doing you know the vanilla,,,
way of having separate HTML Pages where,,,
you have your separate header or your,,,
separate navbar code HTML on every,,,
page so now that we've done that let's,,,
see the next thing let's finish up the,,,
homepage basically we're just going to,,,
bring in the rest of our components that,,,
we had on the main in the main app file,,,
so what else we have the hero we have,,,
the home,,,
cards so going to bring that in from,,,
components slome cards and we'll put,,,
that right here,,,
okay so now those are showing,,,
there uh what else do we need the job,,,
listings uh,,,
import job listings,,,
plural uh dot dot slash,,,
components job,,,
listings put that,,,
here,,,
so instead of just putting the stuff in,,,
the main app component we're putting it,,,
in the,,,
homepage okay then the last thing I,,,
think was the view,,,
all so,,,
view was it view all,,,
listings view all,,,
jobs all right we'll put that,,,
here and there we go so we have this,,,
which goes to SL jobs which doesn't,,,
exist,,,
yet so let's do that next let's create,,,
the jobs page in the jobs route so,,,
that's kind of the workflow from now on,,,
is you create a new page and then you go,,,
to the app file and add the route so,,,
let's create a file in Pages called jobs,,,
page.,,,
jsx,,,
we'll say ra fce jobs page just save,,,
that for now and then let's add the,,,
route we can close this other stuff up,,,
let's add the route into app jsx so we,,,
need to bring,,,
in jobs page and then we can just copy,,,
this down except now we're going to,,,
change index to path and we're going to,,,
set that to slash,,,
jobs and change this the element to jobs,,,
page so now if we click on,,,
jobs uh oh this is still going to jobs,,,
HTML and that's another thing I want to,,,
get to is links because it works a,,,
little bit different um we don't use a,,,
tags we use the link tag so uh but we,,,
can use the a tag it will work so I just,,,
want to real quick go into the nav box,,,
so,,,
components navbar and just,,,
change let's see this index HTML change,,,
that to slash change this to slash jobs,,,
and change this to slash add job all,,,
right so now if I click jobs it takes me,,,
to the jobs page right also this button,,,
down here goes to SL jobs as,,,
well so now let's get into the link tag,,,
because we don't want to use a tags,,,
because it does a complete page refresh,,,
okay so if I click uh wait so if I click,,,
that if you look up here in the in the,,,
tab it shows the little uh little loader,,,
real quick right so by using the link,,,
tag it doesn't do an actual refresh so,,,
in the navbar let's,,,
import link uh actually it's going to be,,,
in curly braces so we want to import,,,
Port,,,
link,,,
from react router Dom and then we're,,,
going to change any a tag we have such,,,
as this one which goes around the logo,,,
we're going to change it to,,,
link and then the href we're actually,,,
going to change it to two and then let's,,,
make this just slash which is the,,,
homepage all right so that one and then,,,
we have this one change that to link,,,
change this to two,,,
same thing here link make sure the,,,
ending tag changes as,,,
well,,,
two and this,,,
one all right so now let's save that and,,,
now I'm just going to reload this page,,,
if I click there you can see it goes to,,,
the home and as I as I link and change,,,
Pages you see there's no refresh loader,,,
thing in the in the title it's it's very,,,
fast right because it's all it's all on,,,
the,,,
client and we want to change the link,,,
down here and the links for all these,,,
buttons to use the link tag so let's go,,,
to let's see what's next we'll go to the,,,
um where is it home cards yeah this home,,,
cards change that actually we need to,,,
bring it in so up top of Home cards,,,
let's,,,
import,,,
link okay and then this is going to be,,,
two and it's going to go to slash,,,
jobs and then this,,,
one the add job let's change that to,,,
link change that to two and change that,,,
to just slash add job all right so that,,,
should work this does that route doesn't,,,
exist yet but it will then we have the,,,
the job listing component so let's go,,,
into that job listing and let's bring,,,
in,,,
link and then the a tag which is right,,,
here link,,,
to okay and,,,
then is that it I think yeah I think,,,
that's it did we do this one no view all,,,
jobs now we want to do that as,,,
well okay and then change,,,
this and,,,
this all right cool now a couple things,,,
I want to do before we get to the jobs,,,
page so one thing I want to have a,,,
custom 404 cuz obviously this doesn't,,,
look very good so what we'll do is go,,,
into the theme files and I believe I,,,
have uh not found yeah right here not,,,
found so all we want here is this this,,,
section so I'm going to grab that and,,,
then let's create a new page so in Pages,,,
we'll say not found,,,
page jsx and,,,
rafc and then I'm just going to paste in,,,
that section be sure to change all the,,,
instances of class,,,
to class,,,
name and let's see we're going to bring,,,
in link into this file as well so let's,,,
import link and then change this a tag,,,
to link and change the HRA to,,,
two and change this to just slash just,,,
slash uh why is,,,
this all right there we go so now let's,,,
go to actually do we have an icon yeah,,,
we do have an icon here so I'm also,,,
going to bring,,,
in,,,
FA exclamation triangle from react,,,
icons and then let's replace this this,,,
it tag right,,,
here um I'm just going to copy these,,,
classes yeah and then we'll get rid of,,,
the it tag and then let's put in FA,,,
exclamation triangle and then class name,,,
paste in we're going to have text,,,
yellow and,,,
then um actually we don't need this fa,,,
class right here we're going to get rid,,,
of that let's add text-,,,
6xl okay now to make this show on pages,,,
that aren't found we're going to go back,,,
to the main app component and let's,,,
import the not found page and then what,,,
we can,,,
do is add a new route actually we'll,,,
just copy that down and we're going to,,,
set this,,,
to the not found page and for the for,,,
the path we're just going to put in an,,,
asterisk so this should be like a,,,
catchall so home should work jobs works,,,
if I go to add job we get 404 not found,,,
okay so any page that's not found you're,,,
going to get that which looks a lot,,,
better now the next thing I want to do,,,
is is the active link so right now you,,,
can see if I go to jobs the home is,,,
still active so if we open up the,,,
navbar right here you'll see that the,,,
home link has a class of BG black so,,,
basically we want to show that BG black,,,
on whatever the the active Pages now we,,,
can do that by bringing in something,,,
called nav link instead of Link which,,,
which works it works in a very similar,,,
way except it adds a class to the active,,,
link and we can change all the instances,,,
of link to nav link and it'll work the,,,
same way so right here,,,
here here and then,,,
here all right so if we do that then,,,
this should still work the same way so,,,
what we're going to do is go to the home,,,
link which is right here and for the,,,
class name let's just delete all this,,,
for now and and put some curly braces in,,,
here and what we can do is actually pass,,,
in an arrow like this and then in these,,,
parentheses we're going to pass in uh,,,
some curly braces and then put is,,,
active and then we can test to so this,,,
will be a true or false if the link is,,,
active if we're on that that page then,,,
this will be true so then for the class,,,
name we'll have a turn area and we'll,,,
say if is active so if this link or this,,,
page is active then show a class else,,,
should have another class and I'm going,,,
to just copy all these right here and,,,
I'm going to put that in the first one,,,
but I'm also going to add in,,,
here uh BG Das,,,
black okay and then for the else this,,,
one I'm just going to put it in without,,,
the BG,,,
black so now if I save that so you can,,,
see it has a black background if I go to,,,
jobs it,,,
doesn't and we want to do that for all,,,
of these so what we can do is just copy,,,
the first nav,,,
link actually you know a cleaner way to,,,
do this would be um to put this in a in,,,
a function up here and then just add it,,,
yeah why don't we do that that makes,,,
more sense so let's grab the function so,,,
this the parentheses and then the arrow,,,
so,,,
basically to this and let's cut it so,,,
that all you have now oops so that all,,,
you have now is just the curly,,,
braces and then we'll go up,,,
here and we want to go within the,,,
component and let's say const we'll call,,,
this link class and then set that and,,,
then paste that,,,
in okay so now what we can do is just,,,
simply add for class name we can just,,,
add link,,,
class and we can do that for all of,,,
these so we'll take that do it for that,,,
one and for this,,,
one and now if I go to jobs now that's,,,
highlighted Okay add job I mean it still,,,
does the active link but it doesn't,,,
exist,,,
so you can see we make this you know,,,
dynamic um just by using,,,
navlink so let's do the job uh the jobs,,,
page which is going to be really easy,,,
because I want to reuse the job listings,,,
component so let's um let's do this,,,
let's go into jobs page and let's bring,,,
in job,,,
listings and then let's see I'm just,,,
going to to make this a,,,
section and give it a class name of BG,,,
dblue,,,
D50 and,,,
PX4 and,,,
py6 and then all I'm going to have in,,,
here is the job listings component so,,,
let's add,,,
that okay,,,
so the issue here is that we're only,,,
seeing three and we want to show all of,,,
the listings so let's do this let's pass,,,
in a prop into job listings D structure,,,
and it'll be called is home and we'll,,,
set it to false by default and then,,,
let's let's change,,,
this variable let's um yeah because,,,
instead of recent jobs we'll call it job,,,
listings and then we're going to say if,,,
is,,,
home then we want to set that to job,,,
slice just like we have it,,,
else then we want to set it to just jobs,,,
which is coming from the file which is,,,
going to be all of the jobs and then,,,
down here instead of creating a list,,,
with recent jobs we'll create it with,,,
job listings so now if I save that,,,
you'll see now it shows all six now on,,,
the homepage it shows all six however,,,
let's go to our homepage and let's pass,,,
in that prop of is home and we'll set,,,
that to true so now if I save now we,,,
only see the three on the homepage so,,,
that takes care of that we could even,,,
change the title based on if it's home,,,
or not so let's,,,
say let's say this if is,,,
home,,,
then let's show,,,
um browse no we'll do,,,
recent yeah,,,
if it's home we'll say recent jobs else,,,
we'll say all jobs or browse,,,
jobs yeah browse,,,
jobs so browse jobs recent jobs before,,,
we get into the single page right if we,,,
click on this we go to job slash and,,,
then the ID before we do that let's,,,
switch from just bringing in a Json file,,,
to actually fetching data from a back,,,
end,,,
and to do this we're going to use,,,
something called Json server which is a,,,
fantastic library that basically lets,,,
you create a mock API and you can send,,,
get post put patch delete requests so,,,
you can create crud functionality it can,,,
be any resource you want because all you,,,
have to do is create a Jason file which,,,
we already have and you can put any type,,,
of resource you want in it so we can use,,,
our existing Json file we just have to,,,
basically put back what we changed which,,,
was make it an object that has uh a jobs,,,
a a named jobs array and then we can,,,
install Json server and then we can,,,
simply run it like this so we can create,,,
an mpm script to run the server which,,,
will run on a separate Port than our,,,
front-end react app all right so let's,,,
do that let's uh for now just close all,,,
this stuff up and then the Json file the,,,
J s. Json file we're going to go ahead,,,
and just put opening curly brace here,,,
and then a closing one at the,,,
end and then we want to just name this,,,
array so we're going to put double,,,
quotes call this jobs and then set that,,,
to that array now that's going to break,,,
our application so if we go back you can,,,
see it's broken because it's just,,,
looking at the jobs file and it's,,,
looking for an array not an object with,,,
a an array in that object,,,
so that's fine don't worry about it,,,
being broken for now we're going to fix,,,
it but let's come down and let's install,,,
Jason server so I'm going to install as,,,
a Dev dependency,,,
Jason uh Jason,,,
Dash right I believe it's I've done this,,,
so many times I don't know why I don't,,,
remember yeah it's Jason Dash,,,
server okay and then as far as the the,,,
command to run Jason server we're going,,,
to put that in our package Json file so,,,
let's go here and then let's add,,,
in um yeah we're going to add in a,,,
server we'll put this at the bottom here,,,
just put a comma and then we'll call,,,
This,,,
Server and what we want to run here is,,,
going to be Json Dash server and we want,,,
to,,,
d-at,,,
in the source folder the,,,
jobs. Json file and then,,,
d-port now I I have something running on,,,
Port 5000 on this machine that's usually,,,
what I would use so I'm going to use,,,
8,000 for the server but feel free to,,
use whatever Port you want I think it's,,,
I think it's 5,000 by default I'm not,,
sure um but let's go ahead and save that,,,
and then I'm going to run so I already,,,
have my react Dev server running in this,,,
terminal so I'm going to go into this,,,
one and do npm run,,,
server and as you can see we have an,,,
endpoint of Local Host 8,000 jobs and if,,
I go to that in the browser I'm now,,,
seeing my data I can even go to jobs,,,
slash and then the ID and I get the,,,
single post so it's it's just like if we,,,
built a rest API with Express or Django,,,
or anything else we can also make post,,,
requests and add one uh and it'll get,,,
added to the actual Json file we can,,,
edit we can send a put request we can,,,
send a delete requests so we essentially,,,
now have a backend all right so so where,,,
I want to fetch this data is going to be,,,
from the job listings component because,,,
that's where that's the only place in,,,
this application where we need the jobs,,,
because we're using this component on,,,
both we can't see it now but we're using,,,
it on the homepage and on the jobs page,,,
so let's uh let's change this up a,,,
little bit we're no longer going to just,,,
bring in the jobs file we're going to,,,
make a request and we're going to do,,,
that inside of a use effect hook because,,,
what the use effect hook does is it,,,
allows our components to to um have side,,,
effects and we want a side effect of,,,
fetching data when the component,,,
renders and when we get those those jobs,,,
from the API we want to put them in,,,
state so we want also want to bring in,,,
used state so let's,,,
import we're going to import Ed State,,,
and use effect from,,,
react and as far as the uh let's see,,,
let's um yeah let's add the state we no,,,
longer need this because we're not,,,
dealing with,,,
um yeah we'll just get rid of that and,,,
then let's create our state so just like,,,
we did with the show details in the um,,,
job listing component we're going to add,,,
a piece of State here for our jobs so,,,
remember this takes two things the name,,,
of the state and then the name of the,,,
function to update the state so jobs and,,,
set jobs and then the default value we,,,
want for jobs goes in here which is,,,
going to be just an empty array because,,,
it's going to be an empty array will,,,
make the request when the component,,,
loads through the use effect and then,,,
we'll fill this state with the response,,,
from the,,,
API now I'm also going to have a piece,,,
of State for the,,,
loading so loading and then set loading,,,
so that way we can show a spinner or,,,
something when it's actually fetching,,,
and I'm going to set that to use State,,,
and as a default I'm going to pass in,,,
true and then once we do the fetching,,,
and it's done then we'll change it to,,,
false so now let's add our use effect so,,,
we're we're going to say use effect now,,,
the way this works is it takes in two,,,
things it takes in a,,,
function and then it takes in a,,,
dependency array so if you put something,,,
in here like let's say we had a variable,,,
called name or something like that if we,,,
put name in here then every time that,,,
name changes this use effect will run,,,
now you want to have an empty array in,,,
here even if you don't have anything you,,,
know any variables you want to put in,,,
here,,,
because if you don't it's going to just,,,
be a NeverEnding Loop so you want to,,,
have this empty array in there in in,,,
most cases and then in this function,,,
here I want to do our fetching and I,,,
want to use a sync a we however you,,,
can't do this you can't say a,,,
sync right I can't do that and then in,,,
here say a weight fetch I can't do that,,,
so what we need to do is create a,,,
separate fun async function inside of,,,
here so let's say cons fetch jobs set,,,
that to,,,
async and then we do our fetching and,,,
then just make sure you call it so right,,,
here we'll say fetch jobs so in here I'm,,,
going to do const res set that to await,,,
Fetch and we're going to pass in here,,,
let's say HTTP and then our back end,,,
which is Local,,,
Host uh Local Host and I'll show you how,,,
we can add a pro proxy uh after so we,,,
don't have to always put in this Local,,,
Host 8000 but for now we'll just add,,,
that and let's do slash jobs right,,,
because that's what we saw in the,,,
browser uh so if I were to do Local Host,,,
8,000 jobs that's our data so that's,,
what I'm getting here and then let's do,,,
const data set that to,,,
await res.,,,
Json and that should give us our data,,,
and what we want to do is set jobs we're,,,
setting this this part of our state to,,,
the data that's,,,
returned now i' I mean we don't have to,,,
but I'd like to put this in a try catch,,,
so let's do that and we'll take,,,
these uh these three lines here and move,,,
them,,,
into the,,,
try and then in the catch Oops in the,,,
catch I'm just going to do uh cons so,,,
log for,,,
now and say,,,
error fetching,,,
data and we'll also pass in,,,
error now we want to set loading to,,,
false whether it's successful or not so,,,
I could put set loading false here and,,,
in here but since we have a try catch we,,,
can just add a finally because whatever,,,
we put in here will run either way,,,
whether it fails or not so that's where,,,
we want to put our set loading and set,,,
that to,,,
false all right and,,,
then yeah so that should work and it's,,,
going to put it into the jobs and then,,,
down here let's change job listings back,,,
to,,,
jobs so we'll save that and then let's,,,
go let's see home and now you can see we,,,
have six again which is fine we'll H,,,
we'll handle that if we go to the jobs,,,
page there we go so these are coming,,,
from our API now we're not just bringing,,,
in the file and using the data we're,,,
we're fetching from the the back end and,,,
putting it,,,
into uh putting it into the the job,,,
State now let's use this loading,,,
value and come down here where we're,,,
we're creating the list with the with,,,
the map I'm going to go right above that,,,
and let's say if loading then we'll show,,,
for now we'll just do we'll just put in,,,
H2 and we'll say loading But ultimately,,,
I want to show a spinner and then,,,
else then let's,,,
show uh we'll just have a fragment and,,,
then I'm going to put this right here,,,
this job list into that,,,
fragment uh what did I do here loading,,,
I'm sorry that should be a question,,,
mark there we go so now when I reload,,,
you can you can see it flashes loading,,,
on the screen real quick so that's,,,
that's when we're actually fetching the,,,
data now I want to use a spinner so,,,
there's a a package we can use called,,,
react Spinners that allows us to um to,,,
easily show a spinner you could just,,,
throw an image in there but uh I'm just,,,
going to use this so I'm going to open a,,,
new terminal cuz both of these are,,,
running whoops both of these are running,,,
uh the the back end and the front end so,,,
let's say npm install react Das,,,
Spinners and let me just show you this,,,
real,,,
quick let see react,,,
Spinners yes so you can show like all,,,
these things I want the GitHub,,,
page okay so the way that we use it is,,,
like this we,,,
can uh let's,,,
see so we can bring we can use the clip,,,
loader so apparently there's different,,,
loaders we're going to use just use the,,,
clip loader and then put it in like,,,
this,,,
um yeah let's,,,
uh let's create a new,,,
component let's call it spinner.,,,
jsx RAF CE so you can see literally,,,
everything is a component or can be a,,,
component so in this component let's,,,
import CLI uh what is it clip,,,
loader and that's going to be from react,,,
Spinners,,,
slash clip loader so we want to bring,,,
that in and,,,
then spinner is going to take in the,,,
loading State as a prop so let's,,,
destructure and add in loading and then,,,
we're going to return the clip loader,,,
component so here let's,,,
say clip loader,,,
and this is going to be a self,,,
closing yeah this is going to be a,,,
self-closing component so let's say clip,,,
loader like that and then it's going to,,,
take in some arguments here some props,,,
so for the color let's do heximal,,,
4338,,,
CA and let's do loading which is going,,,
to be set to the Loading prop that's,,,
passed,,,
in and then we're going to add a CS,,,
override because we want to just add a,,,
couple custom styles to center it so,,,
let's set that to a variable called,,,
override and what we'll do is come up,,,
here and create const override just like,,,
I showed you before we can put Styles in,,,
a variable so all I want to do is add a,,,
display of,,,
block uh put a comma here and then a,,,
margin let's say um we'll do 100 pixels,,,
top and bottom and auto left and right,,,
so that that'll put it in the middle and,,,
then we're adding that to the CSS,,,
override prop for the size we'll set,,,
that to,,,
150 and yeah that should be good so,,,
let's save that now in our job listings,,,
we're going to bring that component,,,
in so import our,,,
spinner and we can come down here where,,,
we have this loading and just replace,,,
that with the spinner component and then,,,
pass in our loading,,,
state so let's take a look at that if I,,,
reload okay you can see the spinner real,,,
quick it's not in the middle,,,
though U I'm not sure,,,
why as we,,,
have we have our,,,
override um yeah it should be in the,,,
middle oh we have it in the grid that's,,,
why,,,
okay so we should probably put this,,,
div inside yeah let's do that we'll put,,,
that here and then this ending div put,,,
that here so now there we go so now it's,,,
in the middle and it should do the same,,,
thing on the homepage because remember,,,
it's the same,,,
component,,,
yep all right and now you can use that,,,
spinner wherever you fetch data and you,,,
want to show,,,
it so so let's take care of the the,,,
homepage having uh having all six we,,,
don't want to do that we only want to,,,
show three so what we could do there's,,,
there's so many different ways we could,,,
handle this but what I'm going to,,,
do is come up to the fetch jobs so we,,,
have is home being passed in so let's,,,
utilize that so in the fetch jobs let's,,,
do const AP and let me just show you,,,
that you can add on to this with Jason,,,
server this is another cool feature you,,,
can do question markor limit equals 3,,,
and if I save that now it's only showing,,,
three however the jobs page is also,,,
showing three so what we're going to do,,,
is first of all let's say API,,,
URL and we're going to set that and say,,,
if is home right so if is home is passed,,,
in if that's true then we want the a you,,,
want the URL to,,,
be this because we want three,,,
else then we want it to be this without,,,
the,,,
limit okay and then we can simply,,,
replace this Fetch with the API URL so,,,
now we have six on the jobs page and we,,,
have three on the,,,
homage cool so now I'm going to show you,,,
how to add a proxy so that you don't,,,
have to add this because if we if we,,,
deploy this this project it's no longer,,,
going to be at Local Host 8000 so we,,,
need to create a proxy now if you've,,,
ever used create react app then you know,,,
that you do that within your,,,
package.json with v it's a little,,,
different we do that within the config,,,
file so let's go to,,,
V uh V config and in the server object,,,
under the port we're going to add a,,,
proxy and basically we're going to say,,,
if it's if it is prefixed with SL,,,
API then we want to use this so we're,,,
going to set that to an object with a,,,
Target and that Target is going to be,,,
HTTP Local Host Port 8000 or whatever,,,
Port you use for Jason server we're,,,
going to add change origin and set that,,,
to true and then we're going to do a,,,
rewrite and set that to that takes in a,,,
function with a path and we're going to,,,
then just use uh,,,
replace and pass in an expression for,,,
slash API so it's going to be double,,,
forward slash and then uh carrot back,,,
slash back SL SL API like that and,,,
replace that with,,,
nothing all right so that way if we do,,,
SL API slj jobs it's really going to hit,,,
Local Host SL,,,
jobs so let's try that out we'll come,,,
over here and then let's change this,,,
this and this to just slash API like,,,
that and let's reload and it still,,,
works all right so now anytime you want,,,
to use the back end you want to send a,,,
request you simply do slash API and,,,
you're not going to have to change,,,
anything once you um you well you're,,,
going to have to change it here but you,,,
have to change it uh you know in every,,,
single file that you you that you make a,,,
request when you,,,
deploy so that's that's basically data,,,
fetching uh using use effect now there,,,
are other ways to fetch data so you're,,,
probably going to run into those um,,,
there is something called react suspense,,,
which is included with react and it,,,
allows you to do a render while fetching,,,
what we're doing here is uh fetch on,,,
render because when it renders it has a,,,
side effect of fetching the data but,,,
suspense will allow you to render while,,,
fetching and you basically provide a,,,
fallback UI such as a spinner or a,,,
loading text whatever you pass that in,,,
as a prop or as an attribute um now I'm,,,
not going to do that in this video I,,,
think it's kind of beyond the scope I do,,,
have an older suspense tutorial from,,,
from when it first came out or you can,,,
just check the,,,
documentation um what else there's also,,,
something called react query which is a,,,
third-party Library there's one called s,,,
SWR as well and that those make data,,,
fetching a little easier than this um so,,,
that's something you might want to check,,,
out as well but this is like the base,,,
way of of fetching from a client side,,,
component all right and then also with,,,
react 19 you have the new use hook which,,,
you can also um look into as well in,,,
fact that react 19 video I did I give,,,
you some examples with that so there's a,,,
lot of that's the thing with react is,,,
there's so many different ways to to do,,,
the same exact thing and some people,,,
will say that's wrong you know do it,,,
this way and another person will say,,,
that that's wrong so you just need to,,,
kind of do what works for,,,
you all right so now we can start to,,,
work on the single page right this right,,,
here job slash and then the ID and the,,,
way that we're going to get this data is,,,
going to be a little different we're,,,
going to use uh a data loader from react,,,
router which is actually pretty cool but,,,
we first have to create the actual page,,,
for the single job so let's close all,,,
that up and then under Pages let's,,,
create let's say job page singular and,,,
then,,,
jsx,,,
rafc save that and then before we add,,,
anything here let's create the route so,,,
we're going to go to our app jsx we're,,,
going to bring in the job page and then,,,
we want we want to add the route so that,,,
if we go to job slash and then any ID,,,
that it loads this this page so I'm,,,
going to copy this down and let's do job,,,
page make sure you import it and then,,,
for the the path we're going to do,,,
job well actually you know what let's do,,,
jobs I like to kind of keep these the,,,
same even though it's a single job I,,,
think I'm going to keep jobs but you,,,
could you could do what you want and,,,
then we're going to do colon ID now the,,,
colon,,,
represents it basically signifies that,,,
this is dynamic so it's not a literal ID,,,
the Letter's ID that you're passing in,,,
it's a it's a symbol or a variable for,,,
whatever the ID is all right so let's,,,
save that and then if we go back here,,,
and,,,
reload or let's,,,
just uh let's see why isn't that,,,
working so SL job oh because I have job,,,
ID so let's change the the link in the,,,
job listing component so job listing I'm,,,
going to say jobs,,,
slid so now click it and there we go so,,,
now we're seeing the job page and it,,,
doesn't matter what the ID is here we're,,,
still we're still loading that page now,,,
let's close up job listing closeup app,,,
and again there's so many ways to fetch,,,
data and we could do the same exact,,,
thing we did in the job listings,,,
component we can use a use effect so,,,
that when this page loads uh we get the,,,
job now what I want to do is use a data,,,
loader from react router so this is,,,
going to work a little bit different,,,
than um than we did with the job,,,
listings now a data loader we basically,,,
create a function in this file and then,,,
we can export it from this file and then,,,
use that,,,
function in in other areas so we can use,,,
this in basically as our Global state,,,
for for whatever this job is and pass it,,,
into other components so the way that we,,,
do this is let's see we're going,,,
to where should we do this let's go,,,
right under the function here the job,,,
page function and we're going to,,,
create a function I'm going to use an,,,
arrow but if you want to use a regular,,,
function you can we're going to call,,,
this job loader right and then we're,,,
going to set this to,,,
async and it's going to take in actually,,,
we'll,,,
uh yeah we got to pass in params because,,,
that's how we're how we're going to get,,,
the ID you know what I'm going to show,,,
you how to do it with use effect first,,,
because I don't feel I don't feel,,,
confident enough that I that I showed,,,
you enough fetching with use effect so,,,
let's let's do that first and then we'll,,,
change it up and I'll show you how to,,,
use a data loader so I'm going to import,,,
use,,,
State and use,,,
effect,,,
from,,,
react and let's see we'll we'll add the,,,
job to the state so let's say const and,,,
just job and then set,,,
job all right and then we'll set that to,,,
use state and then as far as,,,
um as far as the default we'll just,,,
do we'll just we'll just do null for the,,,
default and then we'll have our use,,,
effect and the use,,,
effect again takes in a,,,
function and dependency,,,
array and I'm going to create a function,,,
just like we did in the how we you know,,,
when we got all the jobs we're going to,,,
have this this is going to be called,,,
Fetch job and this is going to be a,,,
sync and then we want to call it down,,,
here I like to do this first because I,,,
always forget to call it and then in the,,,
fetch job basically we can probably just,,,
copy what we did in the job,,,
listings uh like this stuff,,,
here we'll just grab the TR,,,
catch I'm probably going to change this,,,
up after,,,
but let's do HTT oh we don't need HTTP,,,
anymore we just do slash API SL job now,,,
we need the ID so how do we get that we,,,
can get that using the use params Hook,,,
from react router Dom so let's say,,,
import use,,,
pams and that's going to be from react,,,
router Dawn and then the way that we do,,,
this is we can come we can go right here,,,
at the top and we're going to,,,
destructure from use,,,
params and we want to destructure and,,,
get the,,,
ID okay so that should give me the ID,,,
and then in here let's replace these,,,
quotes with back,,,
ticks and we'll say API job slash and,,,
then the,,,
ID okay then we get the data and then,,,
instead of set jobs we're going to do,,,
set job,,,
data,,,
and yeah I,,,
think that's fine yeah I think that's,,,
good um oh the loading State we didn't,,,
do,,,
that so we want to do,,,
loading set,,,
loading,,,
that's going to be true by,,,
default okay and let's see what else um,,,
let's bring in the spinner,,,
component and,,,
then for the return let's,,,
do return if loading,,,
then show the spinner,,,
else yeah else then we'll just put in H1,,,
for now and just say,,,
job and I want to make sure we get the,,,
job data so why don't,,,
we why don't we put in this,,,
H1,,,
job.,,,
title cannot read property,,,
null so we're setting the job the,,,
[Music],,,
data uh let's see let's let's do a,,,
console log of,,,
data responded with a status of 404 oh I,,,
think it's jobs yeah there we go so,,,
we're seeing the,,,
title and we're seeing it in the whole,,,
thing in the console so just to kind of,,,
reiterate what's going on here the,,,
component loads it has a side effect,,,
where we fetch the data from this from,,,
API jobs and whatever the ID is in the,,,
URL and we're getting that because of,,,
the used pams Hook from react router Dom,,,
and then once we get the data we're,,,
setting it to the state we down here,,,
we're saying if it's loading show the,,,
spinner so if I reload you can see the,,,
spinner real quick and then once it's,,,
loaded it shows an H1 with the title,,,
which is this right here okay so that's,,,
how we can get the data just using use,,,
effect now I'm going to show you another,,,
way to do this using react routers data,,,
loaders and we can do this without,,,
having to do the use effect and we can,,,
also,,,
export the the data as well from this,,,
component so we can use it elsewhere and,,,
we will use it elsewhere we're going to,,,
use it in the edit page because in the,,,
edit page we do the same thing we have,,,
to fetch the job so I'm going to get rid,,,
of this if you want to just kind comment,,,
it out so you still have it you can do,,,
that but I'm going to get rid of that,,,
I'm also going to get rid of the two,,,
states and I'm even going to get rid of,,,
um the use State and use effect I'm,,,
still going to get the params because I,,,
do need the ID still and uh yeah we'll,,,
keep that as well but what we can,,,
do is go under the function above the,,,
export and let's say cons job,,,
loader and remember this is a this is a,,,
feature of react router not react,,,
itself so let's set that and we're going,,,
to pass in an object with,,,
param okay and then in the job loader,,,
this is where we're going to make our,,,
requests so let's say resz equals,,,
await uh await,,,
Fetch and it's going to be let's see,,,
let's use back tick here and then slash,,,
API,,,
jobs and,,,
the ID we should be able to get from,,,
that pams,,,
doid then we'll say cons data set that,,,
to await and then res.,,,
Json and then we're simply going to,,,
return the data from this function okay,,,
so a loader is just going to return the,,,
data now we want to export it but we,,,
also want to still export um job page as,,,
default so what we can do is say,,,
export we can do this wrap this oops,,,
wrap this in curly,,,
braces and say job page,,,
as default and then have a comma and,,,
also export the job,,,
loader now what we can do is go into the,,,
app for uh app jsx where we're embedding,,,
the job page and where we imported job,,,
page that's default so no curly braces,,,
around that that but then we can also go,,,
like this job loader CU we exported that,,,
as well so now we have access to this,,,
job loader and with react router we can,,,
go down to where we have the route for,,,
job page so we're going to put this in,,,
the route not the not the job page um,,,
component itself but in the route so,,,
I'll go after element and then say,,,
loader and set that to job loader like,,,
that all right so now we're passing in a,,,
loader now the way that we access this,,,
loader from in here from in our,,,
component so we're exporting it from you,,,
know from this function and then we're,,,
passing it in to the route so the way,,,
that we can access that is with the used,,,
data load use loader data hook so use,,,
loader data and that's going to be from,,,
react router Dom and then all we have to,,,
do is simply say const job set that to,,,
use loader data like that and then I'm,,,
going to,,,
save let's come back over here let's see,,,
loading is not defined so we're not,,,
using loading anymore so I'm just going,,,
to return the,,,
H1 and there we go so you can see we're,,,
actually getting the data but this time,,,
it's actually coming in through that,,,
loader we don't need the spinner either,,,
so we cleared up this file quite a bit,,,
and in addition to that this job loader,,,
we can pass into other components as,,,
well and use that to get a job by its,,,
ID now let's finish up this page so I'm,,,
going to go to my,,,
theme and it's going to be the job. HTML,,,
file and there's quite a bit here so,,,
let's see we have this section with the,,,
go back button,,,
and then this section so I'm going to,,,
grabb both of these,,,
sections okay we're going to grab both,,,
of those and then we want to return,,,
here um we're going to return,,,
a fragment with both of those sections,,,
and then let's not forget to change all,,,
the classes to class name and then any,,,
comments like sidebar right here comment,,,
that out uh we can get rid of,,,
that get rid of,,,
that and is that,,,
it I think so so let's save all right so,,,
now we just have just hardcoded data,,,
right so we need to replace this with,,,
Dynamic data also we have an icon right,,,
here for the the fa Arrow left so let's,,,
bring that in from,,,
say fa,,,
Arrow left and we're going to replace,,,
this with fa Arrow,,,
left and let's add a class,,,
name uh we're going to do margin right,,,
two and now we have our arrow and then,,,
as far as the link we need to bring,,,
in link,,,
and change that to link change this to,,,
two and change this to just slash jobs,,,
so now the back button should work good,,,
but notice they're all senior react,,,
developer no matter what because they're,,,
hardcoded but we have access to this job,,,
object so we can simply replace,,,
everything so like right here full time,,,
let's change that to job. type all right,,,
let's change that um this is going to be,,,
the job.,,,
tile okay now we get frontend,,,
engineer we do have another icon here,,,
which I believe we're going to use the,,,
map,,,
marker for that um yeah let's let's,,,
bring in FA,,,
map,,,
marker and let's replace this,,,
fa,,,
map and let's see what that looks like,,,
yeah so we want,,,
to give that let's say class name text-,,,
orang,,,
d700 and margin right,,,
two or margin right one,,,
maybe yeah that's good enough okay so,,,
underneath that this Boston Mass we're,,,
going to change that,,,
to,,,
job.,,,
location we have the,,,
description job dot,,,
description salary so this right here,,,
we're going to replace that,,,
job.,,,
salary now in the sidebar we have the,,,
company info and if we look at the,,,
data we have a company object with name,,,
description contact email and contact,,,
phone so for the name it's going to be,,,
job.,,,
company,,,
dot,,,
uh typ was it,,,
name yeah so we get the name then we get,,,
the company description so that's going,,,
to be job. company dot,,,
description and then we get the contacta,,,
email so this right here is going to be,,,
job. company do contact,,,
email and then we have the,,,
phone so that's going to be job company,,,
contact phone all right so all that,,,
stuff is now coming from our back,,,
end and then what do we have down here,,,
we have the edit and delete so the edit,,,
is a link so let's change that to link,,,
let's change this to two and then as far,,,
as the link itself let's make this,,,
Dynamic with some back ticks because we,,,
want this to go to slash jobs sledit,,,
slash and then the job.,,,
ID and we'll handle that later and the,,,
button we'll just leave that as is for,,,
now and there we go so now whatever we,,,
click on we can see the actual data and,,,
let's make sure we're not getting,,,
any,,,
errors cool so we now have our single,,,
pages so now we're going to do the the,,,
add job page which right now doesn't,,,
exist so let's create the page so under,,,
Pages we'll say add job,,,
page and let's add the,,,
route so we want to import add job page,,,
and then we're going to put this uh I'll,,,
just copy this down change this to add,,,
job page and then the path is going to,,,
be add Dash,,,
job okay so now if you click on ADD job,,,
you should see that also this button,,,
here should also go to the add job,,,
page all right now we need to get the,,,
form so let's go to the theme file,,,
so this is ADD job. HTML and what we're,,,
going to do is get the whole section,,,
right here that has the form in it so,,,
just grab this entire,,,
thing and let's paste this in the return,,,
so right here we're going to have,,,
parentheses and then paste that in now,,,
we have to change all the instances of,,,
class so command shift L class name also,,,
these have labels with the four,,,
attribute which isn't allowed in jsx we,,,
need to change it to HTML 4 so I'm going,,,
to select the four equal not just four,,,
CU I'm sure there's other things in here,,,
that have F so select the equal sign as,,,
well select all of them and then change,,,
it to HTML uppercase R4 I mean uppercase,,,
F for save it and now we have our,,,
form now there's many ways to work with,,,
forms there's other libraries like foric,,,
um there's there's a lot of things you,,,
can do you can use refs but the I'd say,,,
the the common way the core way of doing,,,
it is adding a piece of State for every,,,
field in your form okay because the,,,
these change and then when you when you,,,
change it when you type in it or you,,,
select you change the state of that item,,,
okay,,,
so what we're going to do is bring in,,,
add,,,
State uh you sorry use State add state,,,
so let's import use state,,,
and then we want to create a state item,,,
for each field now there's different,,,
ways you can do this you could have just,,,
a single object in your state and have,,,
all the fields in that object or you can,,,
do a separate piece of State for every,,,
field which is what I'm going to do just,,,
to keep it simple so let's say con we,,,
know we have a title so title and then,,,
set title to change it and set that to,,,
use state and then in here is going to,,,
be the defaults and most of these,,,
actually all these are just going to be,,,
empty strings as default now I'm going,,,
to just copy this down actually you know,,,
what I'm going to paste the rest of,,,
these in and then you can just copy,,,
them okay so we have title type location,,,
description salary company name company,,,
description contact email and contact,,,
phone all right so those that those are,,,
all the state and and what we need to do,,,
now is add on each,,,
input so let's see the first one is the,,,
select it's the type so this select,,,
right here and what we want to do is add,,,
a,,,
value and set that value to that piece,,,
of state which in our case is called,,,
type okay so if I save that and I come,,,
over here and I try to change it notice,,,
it doesn't work it doesn't do anything,,,
and if if I look at the console it's,,,
going to tell me I provided a value prop,,,
to a form field without an onchange,,,
Handler so basically when you add a,,,
piece of state to or you connect a piece,,,
of state to an input you have to add an,,,
onchange because when you change it that,,,
state has to update and has to call this,,,
set type or set whatever the field is so,,,
what we can do is under the value we're,,,
going to say onchange so just like any,,,
other event on click or whatever you,,,
just add it camel case and what we'll do,,,
is set a function and this can take in,,,
an an event param okay now this,,,
parameter has on it uh a target. value,,,
and that's going to be whatever is,,,
selected or typed in the field so what,,,
we can do is then say well we want to,,,
set the,,,
type and we want to set it to e. Target,,,
do value because this is going to be,,,
whatever I select and I'm going to set,,,
the state to that so now if I save that,,,
reload and I click on part-time now it,,,
works and if we look in our components,,,
in the dev,,,
tools now we have a bunch of stuff here,,,
if we look at the add job page and we,,,
look in the state where it says part,,,
time if I change that to fulltime you'll,,,
see that the State updates okay okay so,,,
now this input is part of the component,,,
state so we need to do that for all the,,,
inputs so let's actually copy the value,,,
and the on change here and go to the,,,
next one which is the title I know this,,,
says name but it's the field is title so,,,
we're going to paste that in and then,,,
change that and that to title okay and,,,
make sure that you this is uppercase if,,,
if you selected both and changed them at,,,
the same time then this is probably,,,
going to be lowercase so you can,,,
manually change it to uppercase or what,,,
I would recommend is using this multiple,,,
case preserve extension and it'll,,,
basically just preserve your case if,,,
you're changing a bunch of stuff at once,,,
so really comes in handy it's it's a,,,
small extension pretty unknown but it's,,,
very,,,
useful all right so now description,,,
that's the placeholder um the,,,
placeholder that's the the text area and,,,
we're going to go ahead and just change,,,
change that and that to,,,
description okay so it's just setting,,,
that description state to whatever I,,,
type in on change every time I type in,,,
anything salary let's see this is,,,
another select so let's paste that in,,,
and change that and that to,,,
salary okay then we have,,,
location so we're going to do this this,,,
location,,,
name change,,,
that,,,
company,,,
name and set company name then we have,,,
the,,,
description so this is company,,,
description whoops it should be,,,
set company,,,
description then we have the contact,,,
email,,,
now again make sure you're changing this,,,
too not just the value and then for the,,,
phone contact,,,
phone,,,
oops Yeah would just double,,,
check double check all,,,
those all right so I think that that,,,
should do it as far as adding the state,,,
for each of these you should be able to,,,
you know change these up type in here,,,
and it's changing the state of you know,,,
those,,,
fields um now we want to submit the form,,,
so let's come up to the form,,,
tag now they just react 19 is going to,,,
have something called actions where you,,,
can actually put an action and set that,,,
to function that's a a brand new way of,,,
doing it in react 19 that isn't even,,,
released yet so we're going to stick to,,,
just adding an,,,
onsubmit and set that to now now up to,,,
this point where we have events we've,,,
been putting the function directly in,,,
here but we can set it to uh a function,,,
that we create so let's say we want it,,,
to be called sub uh we'll call it,,,
onsubmit uh no let's call,,,
it submit form and then we can create,,,
that function up here I'm going to go,,,
above the return con submit form and I,,,
like Arrow functions you don't have to,,,
do this you can use a regular function,,,
if you want and that's going to take in,,,
an event parameter because we want to,,,
stop the default Behavior so we can do e,,,
do and this is just like with vanilla,,,
JavaScript so prevent,,,
default and then let's do a console log,,,
and we should have access to all the the,,,
state right because they're all,,,
connected to those fields so for,,,
instance if I put,,,
in uh let's say,,,
description if I console log description,,,
right come over here let's open up the,,,
console and just make sure okay and then,,,
I'm just going to put something in the,,,
description and I'm going to submit the,,,
form all right so we do have some,,,
required,,,
fields,,,
let's see is that it oh this is required,,,
too okay so now I submitted and what I,,,
had in the,,,
description right here is now logging so,,,
we know that the forms hooked up to this,,,
event this submit Handler and we know,,,
that we can access at least the,,,
description field so let's construct an,,,
object from the form fields that we want,,,
to submit to our API so I'm going to say,,,
con new job set that to an object and we,,,
want to set the title and since I'm,,,
setting title to title like this we,,,
don't need the second one we can just,,,
simply do that,,,
type um,,,
location,,,
description we have the,,,
salary now this is where cuz we we need,,,
this to match up with the way our API is,,,
structured so now we're going to have,,,
have our company,,,
object and let's set name to the company,,,
name and let's set the,,,
description to the company description,,,
whoops uh company description and then,,,
we have what else contact,,,
email and that's the it's called the,,,
same thing so we can keep it like that,,,
and then contact phone all right and,,,
then let's just console log this new job,,,
just to make,,,
sure uh new,,,
job and let's see I'm just going to just,,,
make sure you fill out every field so we,,,
can just make sure we submit if we look,,,
in the,,,
console uh looks like,,,
salary and type which are the two select,,,
lists looks like those aren't showing,,,
up okay now it did salary type all right,,,
so that,,,
did um I just want to make sure if I,,,
don't if I leave the defaults for salary,,,
those,,,
should those should show the default,,,
values which they're,,,
not they're blank,,,
um all right so you know what we can do,,,
is set the defaults for those since,,,
there's select lists for the type for,,,
instance let's say under what's the,,,
default if we look at the options,,,
here oh for for Sal uh not salary for,,,
the type this is the default,,,
fulltime,,,
so um for the type that's going to be,,,
full-time and then,,,
for,,,
salary let's make this it has to be the,,,
same exact as,,,
this so we'll set that as the,,,
default for the salary so let's see if I,,,
reload that and then we submit this,,,
again I know this is kind of a pain to,,,
have to fill these in,,,
again all right so,,,
now yep under 50K for the salary and,,,
fulltime for the type so our submission,,,
is working now we need to make our,,,
request our post request to the back end,,,
so for that we could do that here right,,,
but I like to have requests like that,,,
all in the same place so I actually want,,,
it in the main app file the edit the,,,
delete and the add or the submit so what,,,
we can do,,,
is pass in let's see so right here as a,,,
prop we can pass in a function so we'll,,,
we'll say um what do we want to call,,,
this,,,
add add job,,,
submit and then we can call that,,,
function down here let's replace the,,,
console log with ADD job,,,
submit and once we submit it I actually,,,
want to redirect to the jobs page so to,,,
redirect we can use use navigate the use,,,
navigate Hook from react router Dom so,,,
let's say,,,
import use,,,
navigate and that's going to be,,,
from react router Dom now to use this we,,,
need to First initialize it so I'm going,,,
to go right here below the state and,,,
just say const navigate set that to use,,,
navigate and then after we submit I'm,,,
just going to Simply return,,,
navigate and then where we where we want,,,
this to redirect which is going to be,,,
slash,,,
jobs okay so this add job submit this is,,,
being passed in now as a prop so in our,,,
app let's go to the component which is,,,
the add job page and let's say add job,,,
submit and what we'll do is set this to,,,
a function called add job and then we,,,
can create that here so we'll say,,,
const add,,,
job okay and that's going to take,,,
in the new job and just to make sure,,,
this is working we'll do a console log,,,
of new,,,
job all right,,,
[Music],,,
uh actually you know,,,
what this should be in the app,,,
component and I'm going to move the,,,
router into that as well yeah let's do,,,
that let's move this,,,
stuff into the app component I meant to,,,
put that in here to begin with okay so,,,
that should still work now let's fill,,,
out this form,,,
again paint in the ass,,,
form,,,
all right so if I submit it it,,,
redirected to the jobs page and it,,,
showed it in the console so that means,,,
that it's calling this right you can,,,
even see it in my my editor using,,,
console ninja and then it it redirected,,,
us because of this,,,
so if you want to if you want to call a,,,
function in a parent component you can,,,
do that you just pass it down like this,,,
right so I passed in this add job I,,,
passed that in as a value to add job,,,
submit and then in this in this page I,,,
caught add job submit and I called it,,,
right,,,
here so I mean that that kind of,,,
confused me when I was learning this,,,
because it's it's just a little weird to,,,
know am I passing this up am I passing,,,
it down like it's a little confusing at,,,
least it was to me but just know you can,,,
pass in a function and you can call that,,,
function and um whatever you put here so,,,
add job for instance is going to get,,,
fired off whenever you fire this off in,,,
this component or this page so now that,,,
we've done that we should be able to to,,,
make the request and actually add the,,,
job so let's get rid of the console log,,,
and let's say cons res set that to,,,
await uh await fetch which means we have,,,
to make this,,,
asynchronous so,,,
async and then we're going to fetch,,,
let's say slash API SL jobs but this is,,,
going to be a post request so we need to,,,
pass in a second object and set the,,,
method to,,,
post okay and then we also want to set,,,
the,,,
headers oops,,,
headers and that's going to be an object,,,
and we want to specify the content type,,,
so,,,
content-type which is going to be,,,
application slash,,,
Json and then the data itself is going,,,
to go under the headers in the body,,,
we're going to wrap it in json.stringify,,,
and pass in that new job and then after,,,
that will'll just,,,
return so let's save that and then,,,
let's come over here go to add job we'll,,,
just say test job,,,
one this is a,,,
test company,,,
name this is an awesome,,,
company,,,
all right so we're going to go ahead and,,,
click add job and it redirected us to,,,
the job page and we have our new,,,
job all right so it made the post,,,
requests and it we just returned from,,,
this function but we redirected in this,,,
one to jobs and if I click read more it,,,
takes me to the single page for that new,,,
job so now let's do the delete so I want,,,
to be able to click this delete button,,,
and and again I want that the actual,,,
request function to be in the main app,,,
component so let's put a comment here,,,
we'll say add new job and then,,,
underneath that add let's say,,,
delete,,,
job call this delete job and it's going,,,
to be a sync it's going to take in an ID,,,
because we need to know which one to,,,
delete and then for now we'll do a,,,
console log of delete and the ID and,,,
that's going to get passed into the,,,
single job page right here as a prop so,,,
we'll say delete job set that,,,
to delete,,,
job yeah so we'll do that and then we,,,
can pass that in as a prop to the job,,,
page so right here I'll say delete,,,
job and then on the,,,
button at the bottom here we have this,,,
button let's say,,,
onclick and we're going to set that to a,,,
function and then we'll we'll call,,,
another function called on delete click,,,
and then pass in the job.,,,
ID okay and then this on delete click,,,
we're going to put that up,,,
here const on,,,
delete click,,,
and let's pass in uh we get the job ID,,,
getting passed in here and I want a,,,
confirmation since it's a delete so I'll,,,
say cons,,,
confirm set that to window do,,,
confirm and we'll say are you,,,
sure are you sure you,,,
want to delete this,,,
listing okay and then let's say if not,,,
confirm then we want to just,,,
return if we don't if we do,,,
confirm then we're going to call that,,,
delete job that we passed in and we want,,,
to pass in the job ID okay and then I'm,,,
going to um redirect so in order to do,,,
that we have to bring in use,,,
navigate so let's see that's going to,,,
come in from react router,,,
Dom and then we have to initialize it so,,,
const like that and then we can,,,
just,,,
navigate to,,,
slash,,,
jobs all right now let's just click on,,,
it and what should happen is it should,,,
redirect irect us and it should show the,,,
ID in the console so click it say Okay,,,
redirects and shows the,,,
ID is that the,,,
ID see jobs. Json so it should have,,,
added my test to the file yeah right,,,
here so that is the ID for the test job,,,
good so now we want to make the actual,,,
request to the API so that's going to go,,,
right here so we'll have all of our,,,
requests in you know nice and neat in,,,
this file now this is for a small,,,
application you could use cont the,,,
context API which you know you would,,,
have it o in a in a context file you,,,
could use Redux or some other state,,,
manager but this is such a small,,,
application we don't need,,,
that so I'm going to just grab this from,,,
the ad job and,,,
then put that here okay we're going to,,,
fetch API jobs now we have the ID coming,,,
in so let's make this make these back,,,
ticks and say,,,
slash and then the,,,
ID method is going to be,,,
delete okay um headers get rid of,,,
that and get rid of the,,,
body,,,
and yeah I mean that that,,,
should should do it let's try that so,,,
DET test job one delete are you sure,,,
okay and now it's gone if I reload it's,,,
gone and it should be gone from that,,,
Json file as,,,
well and again you would be working with,,,
an actual,,,
backend so that leaves us with the edit,,,
now before we get to that I want even,,,
though it redirected us I wanted to show,,,
some proof that we deleted did the job,,,
so we're going to use a package called,,,
react toastify which will show a little,,,
toast,,,
notification uh wherever we want to put,,,
it so let's install that I know this is,,,
not you know this is a separate package,,,
but it's something that you'll commonly,,,
you'll probably commonly use I use it,,,
all the time react icons react toasttify,,,
react spinner these are things that I,,,
use in just about every project so let's,,,
say react,,,
Dash toast,,,
[Music],,,
ify now we have to set this up we need,,,
to have,,,
um let's see in our layout is where we,,,
want to put this so that we're a so we,,,
have a basically like a wrapper for the,,,
layout to Output so if we go to our main,,,
layout we're going to import from,,,
here uh we're going to import the toast,,,
container so,,,
toast container that's that's going to,,,
be from,,,
react toasttify and then there's also a,,,
CSS file that we need to import so,,,
that's going to be react toasttify and,,,
then slash dist,,,
slash react toasttify docss like that,,,
and then the container you can pretty,,,
much put that anywhere it's positioned,,,
absolute so it'll it should be up in the,,,
corner um but you can change the,,,
positioning with attributes or props if,,,
you want but let's save,,,
that now what we can do is when we,,,
delete let's see where should we put,,,
this we're going to put this in we could,,,
do it,,,
here but I think I'm going to put it in,,,
the job page right before we redirect so,,,
wherever you want to use a toast you,,,
simply,,,
import,,,
toast uh from,,,
react toasttify and then where we want,,,
to call it let's go right after we,,,
delete and say toast. success so you can,,,
do success or error and let's say,,,
[Music],,,
job,,,
deleted,,,
successfully all right so now let's try,,,
it again I'm not going to delete any of,,,
these I'm just going to create another,,,
dummy,,,
job actually before we do that let's do,,,
a toast where we um where we added as as,,,
well so we'll import this into the ad,,,
page and then right before we redirect,,,
here let's say,,,
toast.,,,
success and we'll say job,,,
added,,,
successfully okay so,,,
now let's just put whatever just some,,,
junk in,,,
here,,,
add there we go job added,,,
successfully and then if I delete,,,
it job deleted,,,
successfully and you can do toast. error,,,
if you want it to show an error for some,,,
reason all right cool so now we're going,,,
to do the the edit okay we have this,,,
edit job button let's create the edit,,,
job page we can close this stuff up,,,
leave the app jsx open and in,,,
Pages let's say edit job,,,
page and then let's add the,,,
route so in our,,,
appjs it's import edit job,,,
page and let's see we're going,,,
to add,,,
this um so with the edit page I'm,,,
actually going to use the job loader,,,
because in order to edit we have to,,,
fetch the the data right and we already,,,
have this job loader so we might as well,,,
use that so I'm actually going to copy,,,
this route for the job page copy that,,,
down I'm going to change the route let's,,,
do this one here we're going to change,,,
it to edit Das job and then slash and,,,
then the ID and change this to edit job,,,
page and we can get of this delete,,,
job and just like we did with the job,,,
page we're going to pass in the job,,,
loader that'll give us access to the,,,
data so let's save that now if we click,,,
on the edit button it should take us um,,,
wait a minute that goes to job,,,
sledit I'm actually going to change that,,,
so in the job page where we have the,,,
edit button,,,
I'm going to change,,,
that to edit Das,,,
job and then the,,,
ID so edit there we go so now we're,,,
seeing the page and since we passed that,,,
loader and we can do the same thing that,,,
we did in the job page we can bring in,,,
use loader data and then simply do this,,,
and we should have access to the job for,,,
that page so I'm going to grab,,,
that,,,
and let's,,,
see do we need this stuff here,,,
um yeah we'll just leave it for now and,,,
then let's do this so use loader,,,
data and go like that and then I'm just,,,
going to do actually what what I'll do,,,
is output here and we should be able to,,,
get the job. tile so let's go back and,,,
there we go so we're we're getting the,,,
data for whatever job we're trying to,,,
edit so reactjs developer click on edit,,,
job reactjs developer so I think the the,,,
data loader feature in react router is,,,
really cool for stuff like this now we,,,
need the form and we need to fill the,,,
form with existing data so why don't we,,,
copy the entire add form so add job page,,,
let's grab the entire,,,
section okay so we're going to grab that,,,
and then go to the edit job page and,,,
then let's return in parentheses paste,,,
that,,,
in and we're going to do the same thing,,,
where we have the state so we can also,,,
copy this all this stuff right here and,,,
put that,,,
in put that right here actually let's,,,
let's put the state above,,,
that all right and then what we can do,,,
is put the default actually no we want,,,
this above the state because I want to,,,
add the defaults from this job so for,,,
instance the title let's say job.,,,
tile so for the,,,
type let's say,,,
job. type and this will F this will add,,,
the fields in the form add the data in,,,
the form so,,,
job.,,,
location this is going to be,,,
job.,,,
description,,,
job.,,,
salary job Dot and this will be company,,,
dot uh is it company yeah I think it's,,,
name company,,,
name and then,,,
job. company,,,
dot,,,
description,,,
company. email let me,,,
just double check I think it's,,,
contact yeah contact email and contact,,,
phone job,,,
dot uh company,,,
dot contact phone all right so if I save,,,
that we get use state is not defined so,,,
we do have to bring in use,,,
State submit form is not defined so the,,,
form has this on it this submit form,,,
function so we just need to create that,,,
say submit,,,
form I don't have to put anything in it,,,
just yet just create the function and,,,
now you can see the form is actually,,,
populated with the right,,,
data which is exactly what we want now,,,
the submit,,,
form we might as well copy it from the,,,
ad because we're going to do the same,,,
thing and construct the new job so let's,,,
just grab uh yeah we'll just grab this,,,
whole,,,
thing,,,
and then in the edit submit form paste,,,
that in now one difference here is going,,,
to,,,
be uh we're going to pass along the ID,,,
because we're going to need it when we,,,
make the request so I'm just going to,,,
pass in ID right here and then instead,,,
of actually instead of new job let's,,,
call,,,
this updated job and then instead of add,,,
job submit let's say,,,
update job submit and pass,,,
in updated,,,
job and then we'll do a toast we'll say,,,
job updated successfully but we do have,,,
to bring in toast because I don't think,,,
yeah we didn't bring it in so,,,
import,,,
toast,,,
okay now,,,
this this um actually let's also,,,
redirect to the job page so let's put in,,,
some back ticks here and we'll say job,,,
job slash and,,,
then the uh yeah we just put the,,,
ID now this right here update job submit,,,
we're going to pass in as a prop so,,,
update job,,,
submit um also if we're we're going to,,,
navigate we're using navigate here that,,,
means we have to,,,
initialize use,,,
navigate um and yeah I don't think we,,,
need we don't need used,,,
pams so that should be,,,
good all right now this update job,,,
submit let's go back to our appjs,,,
because we need to basically catch that,,,
and then fire off a function in here so,,,
where we have our edit job page let's,,,
do uh,,,
update job submit and we'll set that,,,
to a function called update job and then,,,
up here we'll create,,,
that so const,,,
update,,,
job,,,
all right now as far as what we're going,,,
to do here I'm just going to copy this,,,
from the,,,
ad and you could put these requests in a,,,
separate file if you want in some kind,,,
of service but I'm just I'm trying to,,,
keep things,,,
simple uh let's see so this is going to,,,
be Fetch and,,,
then um the job will come in,,,
here and then we'll change these the,,,
back TI because it's going to be jobs,,,
slash and then job. so that's why I,,,
added the ID in the other file it's,,,
going to be a put,,,
request and let's see the body here is,,,
going to be,,,
job actually we could call this no,,,
that's,,,
fine yeah and then that should do it,,,
let's save that and let's try it,,,
out so we have our reactjs developer job,,,
let's change it to just reactjs,,,
Dev and we'll keep all the rest of the,,,
stuff add,,,
job uh it's not,,,
submitting reference ID is not,,,
defined,,,
oh ID is not defined,,,
um so this so I guess yeah I guess we do,,,
need the use pams because we got to get,,,
the ID so from react router Dawn Dom,,,
let's say use,,,
pams,,,
and we can just go right here,,,
con,,,
ID use,,,
pams,,,
okay we'll try,,,
that change that to react,,,
Dev we'll change the text to this too,,,
but let's submit job updated,,,
successfully and it changed to reactjs,,,
Dev and it redirects us to the page,,,
let's just change the button,,,
text so right here change that to update,,,
job,,,
is there a heading too yeah we change,,,
the heading because it says add,,,
job so right here,,,
update all right so we we have a full,,,
crud,,,
application the only thing we're missing,,,
is authentication but like I said that's,,,
that's beyond this tutorial this this,,,
went way longer than I initially planned,,,
and wanted but we did a lot you know we,,,
we learned about components props State,,,
the react router um uh data loaders use,,,
effect use State use pams all those,,,
hooks with react router Dom so I think,,,
we we touched on a lot and I think that,,,
you should have enough to create some,,,
some simple projects on your own now as,,,
far as deploying what you would do is,,,
just run npm run build and that will,,,
give you,,,
uh that will give you a production,,,
version of your site you see how the,,,
react Dev tools right here it's orange,,,
and it says this page is using the,,,
development build of react because we're,,,
running the development server so what I,,,
can do is stop the development,,,
server and I can do npm run,,,
build what that'll do is create a new,,,
folder called disc and that disc is your,,,
production,,,
build okay so I can run that with v,,,
there's a in the package.json there's a,,,
preview right this preview and that,,,
should run the development build so,,,
let's say npm,,,
run,,,
preview and that's running on,,,
4173 so now notice this extension says,,,
this page is using the production build,,,
of,,,
react okay so now this is this is what,,,
you would deploy this disc folder and,,,
and you could basically deploy it,,,
anywhere now if you do try to deploy,,,
this it's not going to show the jobs,,,
because we're using a local server we're,,,
using Jason server if you actually want,,,
this to be a real project then you're,,,
going to have to create an API with,,,
Express or something else um but you're,,,
not going to really have to change,,,
anything as far as this stuff because,,,
this is going to be the same whether,,,
we're dealing with Jason server or,,,
you're dealing with a a rest API I with,,,
Express D Jango laravel just whatever um,,,
so yeah I mean this is this is a a,,,
front-end course but I did want to give,,,
you some examples of using backend data,,,
because that's what it's what you do in,,,
the real world all right guys so,,,
hopefully you enjoyed this I hope you,,,
learned something from it um like I said,,,
there's so many different ways and react,,,
to do everything so if you saw some,,,
things the way that I did you didn't,,,
like it that's fine you know everybody,,,
has their own way of doing things uh and,,,
also keep in mind I try to do things as,,,
in the simplest way possible so that I,,,
can explain it and people can can learn,,,
it and understand but that's it guys,,,
thank you so much for watching and I,,,
will see you next time",,,
3_tOuC9dx5o,"[Music]
what's going on guys so I wanted to
announce the release of my nextjs from
scratch course both on traversy
media.com and on udemy and I'm going to
have Promos in the description for just
15 bucks so nextjs seems to be the
future of react SSR and static websites
have really moved past single page
applications at least in my experience
now I did create a nextjs course a few
years ago the dev to development course
but I wasn't completely happy with it
because a lot of the course was focused
on strappy which is a headless CMS and I
wanted this one to be uh first of all a
much larger project where we keep
everything within kind of the nextjs
ecosystem including the server API
routes and the authentication using next
off I think it gives you a much wider
range of skill than than the old course
that really focused on strappy a little
too much so the project is called
property pulse and it's a property
rental website where users can browse
search and manage rental properties
we'll be using a mongodb database along
with Mongoose to interact with it and
we'll be doing that via API routes
within nextjs so no need for an Express
server or backend or anything like that
so the authentication will be through
next off which allows you to use many
different providers we be setting up the
Google provider and users can
authenticate with their Google account
and that user in will be stored in our
mongodb database and then from there
they can bookmark listings and store
them in their saved properties they can
share them on social media and they can
even contact the property owner through
a form that will get stored in the
messaging system so instead of just
sending an email users can actually
check messages within the website and
they can add listings through a form and
upload images that will get stored in a
third- party service called Cloud Nary
then they can view their listings on on
their profile page and manage them as
well so we'll be integrating other
packages like react icons react toastify
um we'll be using the photos slide
Gallery component so that you can blow
up and scroll all the images that are
associated with that listing we'll be
implementing maps and pagination uh
property search by keyword location and
type such as condo apartment or house
and at the end we're going to deploy the
project to versel so even though
we're building this project it's it's
not just copying the code I'm going to
explain everything and we'll take it
step by step and we'll be doing a lot of
refactoring along the way so that you
know exactly what's going on now I as I
said this is going to be available on
traversy media as well as you to me if
you do purchase it on traversy media
then you get the premium docs which is
basically a written form of the course
with all of the code samples and even
more explanation so I think you guys
will get a lot from this this course if
nextjs is something that you're
interested in and again there's a link
in the description for just $15 I spend
months making these courses and I I
really try to make them as affordable as
I can for everyone now I also want to
mention that as as far as the YouTube
channel goes I'm working with some other
people to to really get more content out
including topics that I'm not I don't
usually work with and I'm talking to
some other creators as well so I know
things have been slow but there's been a
lot of planning behind the scenes on
where to take traversy media so I'll
keep you guys informed on that um so
that's it for now check out the course
if you're interested and I will see you
soon",,
8sXRyHI3bLw,"[Music]
hey guys welcome to my practical web
development guide for 2024 so believe it
or not this is the eth or ninth year
that I've done this I think the first
one was back in 2016 or 2017 so it's
crazy how fast time goes by and I'm sure
that many of you or or most of you know
what this is but for those that don't
every year I do this guide and I go
through just about every web development
technology that I can think of from
tools to languages to Frameworks as well
as some of the different routes that you
can take and and just offer some of my
own personal advice to succeed in web
development and I do this because it's
extremely overwhelming just to learn
what you need to learn because there's
so many different things so I try to put
it all in one place and put some things
into perspective and you can kind of
pick your path from there and I also
have a page on my website that has all
the content that I've created including
YouTube videos and playlists as well as
premium courses on a lot of the stuff
that we talk about in this guide and I
put it in the same order as well so it's
easy to follow and I'll have a link to
that in the description all right so a
couple of notes some things to keep in
mind as you're watching or listening to
this video uh it is long so you may want
to kind of put it on in the background
while you're cleaning or exercising or
whatever it is you do and I'll have time
stamps in the description so you can
just jump around if you want to so first
off you do not have to learn everything
we talk about in fact I'd say it's
impossible to learn everything that I
mentioned in this guide even if your
life was extended 100 more years so look
at it like a restaurant menu you can see
what's available and then you pick and
choose what looks good to you so next
this is not a latest trends video I know
there's a lot of those types of videos
out around this time of year I will
outline some of the new technologies but
that's not what this video is about it's
about absolutely everything that I can
think of that you may have to learn as a
web developer and I don't care if it's
20 years old or 20 days old if it's
relevant then I'll talk about it also if
you've watched past years you'll notice
that I don't really remove anything I
just add to it so most of the stuff that
was in last year's video will still be
in this year's video I just elaborate it
on a bit differently I don't even go
back to previous years for reference
lastly I always try to keep these pretty
objective however I do share my opinion
on some things I'll try to make it clear
when I'm giving my opinion uh keep that
in mind that neither myself or anyone
else has experience with every single
piece of technology in this guide so
some of it is based on research and just
what I've heard from others all right so
before we talk about specific
Technologies I want to talk about some
of the common roles and paths that web
developers choose and I think it's
important because it will help you
decide what you want or what you need to
learn so the first one is one that I
feel like is overlooked a lot especially
when it comes to like YouTube videos and
so on typically they just talk about
front end backend full stack but a web
designer is pretty typical uh pretty
typical path to take which is sort of
like a mix of development and design and
these are people that are more focused
on the front end but don't really build
complex uis and applications they stick
to you know static websites small
business websites things like that they
may use a CMS like WordPress um they're
usually pretty good at design as well as
HTML and CSS because a lot of times they
go solo in their Freelancers so they
have to build their projects from the
ground up and uh they typically have
some knowledge of programming you know
basic JavaScript Etc but usually not
enough to build uh a complex full stack
application without using some kind of
third-party software so the they get
into kind of the business side of things
SEO maybe some marketing things like
that so if that sounds interesting to
you then you might take this route next
we have what is I guess the most common
role that people start with and that's a
front-end developer so this is someone
that works on the client side of the web
so they work on the user interface they
create the interactions that a user has
with a website or web app now I will say
that the lines between front end and
backend are are getting more blurred
every day especially with Technologies
like nextjs where some of the page is
rendered on the server and some of it's
rendered on the client but for the most
part front-end developers work on the
client side of the web um with the most
important Technologies being HTML CSS
and JavaScript in general um most of the
time they'll also move on to front-end
Frameworks like react view angular and
I'll talk more about those later next we
have a backend developer this is someone
that works on the server side so they
work with databases database ORS um
they're not focused on the user us
interface at all they're usually the
ones building the apis that the
front-end developers will consume and
get data from the server now with the
front end your programming language is
is typically going to be JavaScript but
on the back end you have you know dozens
of languages to choose from you can use
JavaScript of course with something like
node.js but you can also use Python PHP
C and and many many more languages which
we'll talk about later then you have a
fullstack developer who works on both
the front and back back end so you'll
need to know HTML CSS JavaScript but
also need to know a server side language
or server side technology you'll work
with databases and ORS just like a
backend developer now in my experience
it seems that most fullstack positions
are more focused on either the front end
or the back end but you still do need to
know both and again that line is is
getting more and more blurred and it
seems that full stack is the most
popular end goal for people it seems at
at least from what I I see you know
running a channel and and seeing a lot
of developers and people that are coming
up it seems like front end is where they
want to start but ultimately they want
to be full stack developers now I'm
going to throw a fifth role in there and
that's devops and this is someone that's
responsible for deployment and
maintenance of your application
maintenance of the servers um there you
know security scalability they do write
code but it's not the same as front end
or backend development you're not
building the application you're building
the infrastructure that the application
runs on and you'll typically need to
know Technologies like Docker and
kubernetes you'll need to know about
certain hosting platforms like
AWS um you might write bash scripts
Python scripts need to know how to
manage a Linux server this isn't really
my wheelhouse but it may be something
that you're interested in and it's
usually a separate role than uh a
software developer now for the rest of
this video when we talk about certain
Technologies or concepts I'm going to
have the typ types of developers that it
pertains to up in the leftand corner
here so you'll see something like this
with WD for web designer front end
backend full stack and devops and this
will help you keep track for whatever
your your goals are all right so now
we've talked about the different roles
let's talk about some goals and paths
that you can take as a web developer and
one thing I want to mention that's
really important is that your goals can
change over time so what you choose now
doesn't mean you won't change it later
I've been doing for about 15 years and
I've been a freelancer a full-time
employee a consultant an instructor um
and I've done side projects so you you
most likely won't do the same thing for
your entire career so don't feel like
you're stuck with whatever you choose
now so the most common is to learn to
code to become a full-time developer for
a company and this is where you know you
work for a company you get salary uh
benefits your pay can vary greatly
depending on where you live and and what
company you work for but it's a very
stable job and you don't have to worry
about finding clients or anything like
that you just show up you do your job
hopefully you really like coding and you
get to you know do your passion for work
so it doesn't really feel like work you
get paid quite a bit um there's
positions for all types including the
ones that we talked about many
developers strive to work at at like a
Fang company which is you know Facebook
Amazon Apple Netflix Google these are
some of the biggest Tech compan IES in
the world and they pay very well however
there are there's a lot of companies out
there that pay just as well if not
better so don't feel like you have to
work for one of these huge corporations
there's there's so many companies out
there so freelancing is another option
and this is for developers that are
somewhat business savvy it definitely
isn't for everyone there's a lot of
added stress in running your own
business but it can be incredibly
rewarding in many ways you know you'll
probably struggle from financially at
first depending on where you're starting
out but if you gain the experience and
you put your all into it you can
possibly make much more than you could
at a 9 to5 UM as a software developer
and and freelancing is essentially
investing in yourself and you do need to
know quite a bit you kind of have to be
a jack of all trades master of none
because typically you're starting out
solo so you'll need to do everything
from the the design to the HTML CS to
whatever you're using for a backend if
you do have a backend or if you're using
Wordpress typically you're going to go
for technologies that allow you to
create things fast um and you can also
Niche down and work with certain
industries so for instance you might do
medical websites or something like that
um there's so many different routes to
take within the route of
freelancer so another option you have is
to work for a startup which is a little
different than working for a large
company it's pretty risky because most
startups do fail that's just a fact but
if you're one of the first employees it
can be very very rewarding and you can
be very successful and make a ton of
money um and then you could also think
about starting your your own startup
later on down the line I wouldn't say
that should be your first goal once you
learn how to code um and that kind of
leads us to the next one which is to
create a product or a SAS which is a
software as a service so you could build
some kind of app that you could charge
monthly for so you have recurring income
and I would say this is great for a
secondary goal so maybe start off either
as a full-time employee or a freelancer
and work on a product that you think
will be successful in your spare time
and then you know if that starts to grow
you could always switch over and do that
full-time and then internships uh they
do offer Real World Experience there's
paid internships and even if it's not
paid you do get a lot of experience and
it looks great on your resume for when
it is you know when it comes time to
find a job and typically internships
that aren't paid they will lead to a
paid position so it's a great option if
you know just to get you going in the
industry so these are just some of the
things you can do these are I would say
the most common especially the first two
full-time employe freelancer um there's
a lot of things that I would say you can
do but I wouldn't s just starting out
with like Consulting like teaching
things like that again like I said
earlier you don't have to stick with one
thing once you choose that path all
right so let's get into some of the
basic essential tools that you need to
start coding so first obviously you need
a computer with an operating system
people ask me all the time what's the
best laptop for coding the truth is you
can use just about anything from the
last 5 to 10 years for web development
if you were doing something like 3D
modeling then you need a a bit more of a
powerful computer but for web
development you don't need much I'd say
just make sure you have at least 8 GB of
RAM and an SSD I think the bigger
decision is what operating system you
want to use but even that really just
comes down to preference people ask me
what I prefer I I like Mac OS just
because it things seem to work a bit
more smoothly especially when it comes
to things like the terminal I think that
Windows has gotten a lot better though
and I do use Windows I'd say probably
30% of the time I just prefer Mac OS for
my serious projects and then obviously
you have Linux which is a great option
because you can kind of mimic your
production environments and it's very
beneficial to learn Linux server
Administration if you're going to be
doing any kind of
devops all right so so again it just
comes down to preference so a text
editor this is where you'll write your
code and there's a lot of options out
there personally I prefer Visual Studio
code it's free it's open source it's
very powerful it's very customizable I'd
say about 80 to 90% of the web
developers that I talk to use vs code um
some other options are Sublime Text
which technically isn't free but it has
a trial That Never Ends if you do use it
for a long time I would suggest paying
for it um there's adom which is free and
open source Vim is also pretty popular
it's a bit more advanced than the others
it has a uh quite a learning curve but
it's very powerful and the people that
use it swear by it and you don't really
have to use your mouse at all so you can
be very very efficient and fast writing
your code so there's also idees which
are integrated development environments
they have a a little bit more features
than a standard text editor you don't
really need an IDE for most types of web
development but there are some that are
geared towards specific languages for
instance you have pycharm for python
developers you have PHP storm for PHP
developers so that may be something you
want to look into But ultimately I would
definitely recommend vs code to to most
people as far as far as web browsers go
that's really preference I'm sure that
all of you already have a preference I
like Chrome there's not really a
specific reason it just does everything
I need to I I like the dev tools I think
Chrome and Firefox would be the the the
two most popular Firefox also has great
Dev tools maybe a little better than
Chrome um you could even use Microsoft
Edge I I came up in the the Internet
Explorer days and Microsoft browsers
were just horrible I remember i6 and it
it was just a nightmare but now Edge
actually uses chromium under the hood so
you could just as well use that um
Safari I'm not too crazy about Brave is
really cool for uh for privacy features
Brave and Vivaldi and then there's a a
newer browser called polyan which is
directed toward web development but it's
not free and personally I'm not going to
pay for a browser Chrome does everything
I need um so it's just preference and
then for terminals
it used to be that that front-end
developers didn't really need to use a
terminal for much but now with all the
the framework clis and npm and git you
do need to know at least the basics so
as far as terminal programs go I think
the default in Mac OS or most Linux dros
are great uh for Windows Windows used to
really suck with terminals with the you
know the CMD command prompt I never
really could get into Powershell uh but
now the windows terminal isn't bad it
has SSH you used to have to use tools
like putty um I prefer get bash on
Windows which is a third-party bash
terminal um but you could also use the
windows subsystem for Linux it is a bit
more advanced though so I wouldn't
suggest that for beginners um and then
for Linux obviously you have tons of of
thirdparty terminals you have Terminator
alitt for Mac OS I'll either use the
default or iterm 2 which just has a a
little more features and I think it
looks a little better all right so now
we've come to the first big part of
learning to be a web developer and that
is HTML and CSS so these two
technologies are essentially the
building blocks of the visual part of
the web HTML is a markup language that's
used to structure the content of a web
page and then CSS cascading stylesheets
is the styling language that's used to
style the content so you can think of
HTML as the skeleton and CSS as the skin
you can't have one without the other
HTML itself is actually very very simple
it's just a bunch of tags that you use
to structure your content so as far as
what you want to learn about HTML you
want to learn how to create semantic
markup this means using the correct tags
for the correct content you also want to
learn about accessibility this is making
sure that your content is accessible to
everyone including people with
disabilities you want to learn all the
common tags and attributes so things
like heading paragraphs lists there's a
lot of older deprecated tags that you
don't even have to bother with uh I
would say semantic tags excuse me like
header and footer are very very
important so spend some time learning
how to structure your pages semantically
and then CSS is a a much different more
complex technology it's a styling
language that's used to style the
content of a web page it's very powerful
and it's constantly evolving um there's
a lot to learn about CSS you want to
learn about all the core properties for
things like colors fonts the Box model
which is how elements are laid out and
spaced on the page and how to use margin
padding borders um spec specificity is
important because sometimes you'll have
multiple styles that apply to the same
element and you need to know which one
will be applied and the different units
of measurements like pixels M's Rems and
percentages you'll want to learn about
different types of selectors like
classes IDs there's also what we call
pseudo selectors um you want to learn
about the different layout methods like
Flex box and grid these are are used to
lay out your elements in columns and
rows and then responsive design is
really important all of your projects
should look good no matter what device
they're being viewed on you know there's
there's a few elements to responsive
design but media queries are probably
the most important uh this is where you
can apply different Styles based on the
size of the screen so you definitely
want to be familiar with responsive
design so next we have CSS Frameworks
now at this point these are optional and
you could just go right to JavaScript
however these Frameworks can make things
much easier when it comes to creating
layouts they're also very popular and a
lot of companies use them and they're
pretty easy to learn when comparing it
to other Technologies like a programming
language so my personal advice would be
to spend a week or two learning one of
these Frameworks and there's uh there's
a ton to choose from however these are
the main four that I would suggest
looking at and to be even more specific
I'd say the first two but that's just my
opinion so bootstrap is one of the
original CSS Frameworks it's been around
since I believe
2011 and it's a very widely used
technology and has a large community
which is always a plus its component
based which means that there's a lot of
pre-built classes that you can use for
things like buttons cards nav bars Etc
and the upside to this is that you can
create uis and websites really quickly
and you have less classes in your HTML
the downside is that sometimes bootstrap
websites can look pretty similar now
it's fair to say that you can really
customize bootstrap and make it look
however you want but you will have to
learn SAS which is a CSS pre-processor
and I'll talk about that in a minute um
bootstrap also has an easyto ous grid
system that a lot of people like however
I definitely wouldn't suggest using it
just for that because you have CSS Grid
or Flex box which are built into CSS so
you don't need to use bootstrap just for
the grid another plus to bootstrap is
you get a set of JavaScript widgets like
models carousels and dropdowns and this
is great for people that don't have a
lot of JavaScript experience and still
want that functionality so I'd say
bootstrap is one of the best tools for
Freelancers because you can create
websites and layouts very quickly now
Tailwind CSS seems to be the most
popular right now as far as you know
content that you see out there and what
people are talking about you see it
everywhere in new projects a lot of
startups are using it it's a utility
first CSS framework that allows you to
build custom designs without pretty much
ever leaving your HTML and being utility
first makes it a bit different than the
rest of these because instead of having
a class for let's say a button which
would generally have mult multiple
Styles you have a class for each style
so you'll have a class for the
background color for the text color for
the padding so you almost never have to
write any custom CSS because every CSS
property has a class the downside to
this is you end up with a ton of of
classes in your HTML but the upside is
that you can really customize your
layout and they don't all look the same
which can be an issue with a lot of
these other options all right so next we
have balma which is a newer framework
that I really like it's it has some
good-look components and it's really
easy to use as far as class names go
it's not as popular as bootstrap or
Tailwind it's also not as customizable
as Tailwind um but it is very fast and
lightweight and I think it looks good
then you have materialize which has been
around for a while it uses Google's
material design system and as far as
component-based Frameworks go I think
materialized is one of the best looking
um obvious obviously that's just my
opinion there's a ton of components to
choose from and there's also JavaScript
widgets like modals and dropdowns
similar to what you would get with
bootstrap um from what I from what I can
tell its popularity has come down since
the release of Tailwind but it's still a
very viable option and some other
Frameworks out there are semantic UI
Foundation UI kit I'm not going to go
over all them because they're they're
all pretty similar once you learn one
it's pretty easy to pick up another one
so SAS is another option that you may
want to learn around this time it's a
CSS pre-processor that adds extra
functionality to CSS so it allows you to
write CSS with variables and functions
mixins um Native CSS is catching up with
SAS features for instance we have custom
properties in CSS which are essentially
variables they're not as clean looking
as SAS variables but they basically do
the same thing um there's still a lot
that SAS can do that CSS can't though so
you can nest and inherit Styles which is
a very helpful feature I would say learn
SAS if you're using a framework like
bootstrap where you need to customize
the Styles also it can make your CSS
very modular so you can separate it into
different files and then you can import
them into one another and this makes it
easier to maintain you basically create
your own CSS framework and you have a
separate file for things like button
stop or navbar Styles it's been around
for a while there are other CSS
pre-processors like Les and stylus but
they kind of just faded away SAS has a a
really good ecosystem of both command
line tools and guey tools to compile it
because you can't use SAS files directly
in the browser right you can't just
include them like you can CSS you have
to compile it down to regular CSS and
there's different tools that allow you
to to do that it's also great for
theming so where you want to have
different color options and things like
that um it is optional but again it's
something that's really easy to learn so
why not learn it you could you could
learn it in a weekend and I have a crash
course that pretty much shows you all
the features that you need to know so
next we have a batch of really helpful
tools that you'll most likely learn and
use early on so git is a version control
system for saving and versioning your
code as well as collaboration and say
you should learn it no matter what type
of developer you are you don't have to
learn it before you start coding like
you don't have to learn it right the
second but it should be on your list uh
as something to learn pretty early on
it's it's really not difficult to learn
the basics at the very least just create
a GitHub account and learn how to create
a repository and push that push your
code to that remote repository and you
can do it through the terminal through
commands or you can do it directly
through your your text editor through
the guei markdown is another thing that
you should probably learn it's a markup
language that's used to style text
similar to HTML it's used in a lot of
places such as GitHub it's used in
readme files which you should have for
every project that you create it's used
for documentation and it's very simple
to learn you can literally learn it in a
weekend or even even in a day uh and the
things that you don't know you can
always just go and reference I forget
the the exact URL to the markdown
website but very simple stuff so next we
have editor or IDE extensions so most
text editors such as vs code Sublime
Text adom they have extensions or
plugins that you can install and EMT is
something that anyone that writes HTML
and CSS should be using it's it's not
even extension for vs code it's built-in
but with some text editors you do have
to install it so it gives you really
nice shortcuts to create all kinds of
HTML tags with classes and IDs and
content CSS Styles it saves a ton of
time it saves you a lot of typing so
definitely something you should learn
early on live server is another great
one that I use all the time it gives you
uh a devel local development server that
updates as soon as you save your files
so you don't have to go and manually
refresh the page uh prettier is
something that I use a lot it's a code
formatter that will help you keep your
code clean you can make it so that it's
it it formats your code when you save
the file another thing that I would
highly recommend is to learn the
shortcuts of your editor because it
makes you much more efficient and makes
you code much faster all right so next
we have some AI tools that can Aid in
writing code and problem solving AI is
getting bigger by the day obviously
almost to the point where it's a little
bit scary but I know a lot of people
fear that AI will replace replace their
jobs or replace developers and I think
that may be true to an extent when it
comes to basic tasks but for the most
part I think it's just going to change
the way that we write code it's going to
change the landscape and what developer
roles entail uh my suggestion would be
not to worry about it too much and try
to utilize the tools that are out there
to your advantage to make you a better
developer and the two AI tools that have
been pretty much invaluable to me are
GitHub co-pilot and chat GPT so co-pilot
is an AI pair programmer that helps you
write code and you can install it as an
extension to vs code and many other
editors uh it's not perfect but it is
pretty amazing and it helps you be more
efficient saves a lot of time um helps
you solve problems I use it for even
things like like generating sample data
you can say give me you know 20 give me
a Jason file with 20 users with these
fields and it just generates it for you
so really cool stuff there's others that
are similar like tab9 kite there's a new
AI tool that looks really interesting
called Codi I haven't used it yet but it
looks really powerful
and not only can you use it for like
Auto completion and suggestions but you
also have a chat window where you can
interact with it and ask it questions
about your project and not just a single
file the entire project even if it's you
know hundreds of files so really cool
and then chat gbt is obviously huge
right now it's incredible for learning
just about anything um there's a few
things that you really have to
understand though when it comes to using
tools like this the first is that it can
be wrong it can be very wrong in fact so
you can't just rely on that uh I use it
kind of as a starting point along with
other resources and the other thing is
to make sure that you don't rely on it
too much if you're just using it to
generate code and using that code
without understanding it you're not
doing yourself any favors so use it as a
learning tool not as a crutch and if you
find yourself doing that I'd say don't
even use it for now um but if you use it
correctly it can be a great tool so next
we have design tools and this is another
area that you may or may not need to
know depending on your goals and I
usually suggest that you learn the
basics of design unless you're working
strictly backend as a freelancer you're
going to need to know some of this stuff
I think one thing that a lot of people
don't realize is if you plan on
freelancing you have to kind of have an
eye for design and be able to create
good layouts and good-look websit unless
you're Outsourcing that work which you
probably can't afford to do when you're
starting out so as far as tools go figma
is a great tool for designing websites
and uis that's probably what I would
recommend most people it's free it's
web-based uh it's very easy to use it's
not something you need to rush to learn
but it will help you in certain
situations some others include sketch
which I believe is still Mac OS only uh
you also have adob Adobe products like
XD Photoshop Invision seems to be really
popular for mockups and prototypes and
then you have canva balsamic as well as
well which are both web- based now while
we're on the topic of design and again
unless you're a backend developer I
usually suggest learning at least the
basic principles and these are some of
the ones that I suggest you keep in mind
when you're building websites or uis so
color and contrast is important which
color paletes look good the difference
in brightness between elements I see a
lot of hero images where I can barely
read the text uh that's against the
background image so you want to make
sure that your text is readable this is
one of the the biggest and most obvious
mistakes that I see so white space Also
important uh it's another big mistake I
see when people don't have enough space
between their elements or they have too
much space having the right amount of
white space can make a huge difference
and really improve readability and just
the overall experience of the website
scale is also important you want to make
sure that your elements are sized
correctly you don't want to have a huge
button and then a tiny input field
things like that everything should be
proportionate and then visual hierarchy
you want to make sure that the most
important elements stand out and you can
do this with size color contrast this
helps users navigate your website or UI
and it's not only important for how your
website looks but it's also important
for how it functions and how successful
it is in terms of sales or signups or
whatever the goal of of the website is
so obviously there's other principles
typography is another one you want to
make sure that your fonts are readable
and consistent things like that and I
think these are skills that anyone that
works in the front end can benefit from
you don't have to be a designer but you
should know the basics okay so
everything we've covered so far has to
do with creating static websites and
layouts and not really any Dynamic
functionality or interactivity so that's
where JavaScript comes in JavaScript is
the programming language of the browser
now how much JavaScript you learn
depends on your goals so if you plan on
being a backend python developer then
you probably don't need to learn much
much but if you want to become a
front-end developer you'll probably end
up using a JavaScript framework like
react so you need to learn quite a bit
if you want to be a backend or full
stack developer and use node.js then
obviously you need to learn quite a bit
of JavaScript as well so this brings me
back to why your end goal is so
important now people always ask me how
much JavaScript should I learn before
moving to a framework like react and
Shameless plug here I do have a course
called modern JavaScript from the
beginning that'll teach you everything
that I recommend plus more it's a a
37-hour course but as far as just you
know an overview of what I would suggest
I'd say l",,
",,
earn the fundamentals first so,,,
variables functions conditionals Loops,,,
things like that then you want to learn,,,
about the document object model which is,,,
how JavaScript interacts with the HTML,,,
and CSS learn how to select elements and,,,
manipulate them this is what's going to,,,
allow you to create things like like uh,,,
dropdowns and models and menus you know,,,
icons you click on and the menu slides,,,
out cool things like that and then high,,,
order array methods are important for,,,
working with data so methods like for,,,
each map filter and you should also,,,
learn the fetch API so that you can make,,,
requests to either a backend or a public,,,
API and fetch some data so you want to,,,
learn about HTTP and methods like get,,,
post put and delete and learning about,,,
promises and asynchronous code in,,,
general is a must in with JavaScript and,,,
then learn about Json which is a data,,,
format that's used to send data back and,,,
forth between the client and server so,,,
as a front-end developer you'll be using,,,
the Json data that's sent from the,,,
server and if you're a back-end,,,
developer you'll be creating or,,,
generating that Json data so I'd say,,,
that that's the minimum that you should,,,
learn before moving on to a front-end,,,
framework you can learn more if you want,,,
such as object-oriented programming,,,
classes prototypes things like that but,,,
I think that this is a good starting,,,
point all right so WordPress is a CMS or,,,
content management system that's built,,,
on the PHP programming language and I,,,
always struggle with where to put,,,
WordPress in this guide because,,,
technically it is full stack but you,,,
don't need to be a full stack developer,,,
to use WordPress or any tool like it for,,,
that matter uh a very common learning,,,
path is to learn HTML and CSS then a,,,
little bit of JavaScript and then get,,,
into WordPress and possibly PHP that was,,,
actually my path back in the the late,,,
2000s so WordPress is especially handy,,,
for Freelancers there's a few reasons,,,
for that it allows you to uh build,,,
Dynamic websites quickly with little to,,,
no coding skills it's great for clients,,,
because they can easily update their own,,,
content without having to create uh,,,
without you having to create a custom,,,
admin area which can take months to,,,
build there's tons and tons of of themes,,,
that you can use as well as PL plugins,,,
to give you certain functionality both,,,
free and paid uh I do always recommend,,,
that people that that want to use,,,
WordPress also learn PHP so that they,,,
can really customize and create their,,,
own themes and plugins it does make all,,,
the difference in the world if your,,,
client asks for something specific and,,,
you can build it on on your own because,,,
there's no Plug-In or theme for that,,,
does what they want um believe me when I,,,
started freelancing I didn't know much,,,
PHP and I was using Wordpress and there,,,
were a lot of times where I had to tell,,,
my client that I couldn't do that or I'd,,,
have to pay someone else to do it but,,,
once I learned PHP I was able to just go,,,
in and customize everything I should say,,,
PHP and JavaScript because there was was,,,
some front-end stuff there's also a huge,,,
Community for support and learning I,,,
think something like 35 to 40% of the,,,
web is still run on WordPress so many,,,
like small business websites things like,,,
that all right so once you're able to,,,
create a basic website or small,,,
application front-end application you,,,
need to know how to actually deploy it,,,
to a live server and this is something,,,
that a lot of people don't seem to think,,,
about until they're done with a project,,,
and they're like now what so websites or,,,
applications that are just front-end,,,
HTML CSS JavaScript can pretty much be,,,
hosted anywhere you don't need to have a,,,
server like Apache or engine X which,,,
we'll talk about later in the in the,,,
backend section there's literally,,,
hundreds of options out there some of,,,
the most popular services are static,,,
hosts like netlify versel GitHub Pages,,,
now you can use something like versell,,,
to host like a nextjs website which is,,,
server rendered in fact versell created,,,
nextjs but they're also great for just,,,
plain old HTML and CSS projects and,,,
those three services are extremely easy,,,
to use because all you really have to do,,,
is push your project to GitHub which you,,,
should already know how to do it this,,,
time and then link your account and,,,
choose the repository that you want to,,,
deploy they will give you a URL they'll,,,
assign you a URL but you're going to,,,
want to purchase your own domain for,,,
your website most likely and there's a,,,
lot of services for that I personally,,,
use name cheep but there's Google,,,
domains GoDaddy there's so many,,,
different domain name registrars out,,,
there that you can use and as far as SSL,,,
certificates go a lot of Hosting,,,
Services these days include SSL so you,,,
don't have to really do anything extra,,,
if they don't and you need to purchase,,,
an SSL certificate on your own you can,,,
purchase one from from name cheep um,,,
there are different types or you can get,,,
a free one from a service called let's,,,
encrypt so that might be something you,,,
need to look into now out of the the,,,
hosting Services here for simple static,,,
websites or simple front-end,,,
applications or even SSR projects I,,,
prefer net lefi and versel I think,,,
they're both very similar they both,,,
offer Sim similar features you get,,,
things like form submissions serverless,,,
functions logs and and so on if you're,,,
are running a business and you you need,,,
for instance business email for your,,,
domain name things like that then you,,,
might want to go with a company like,,,
hostinger or blue host and these,,,
companies offer shared hosting which is,,,
very very cheap usually under like $10,,,
per month and these Services I'm,,,
recommending for for mostly front-end,,,
projects when you get into larger full,,,
stack or or or or apis you're going to,,,
need something a little more a little,,,
more advanced something like AWS or,,,
digital ocean and I'm going to get into,,,
those Services a bit later but I would,,,
just suggest taking a look at some of,,,
them and and seeing what works for you,,,
you know do your own research on on the,,,
services all right so let's see where,,,
we're up to at this point I'd say if,,,
you're familiar with most of what we've,,,
talked about then you're somewhat of a a,,,
foundational front-end developer or a,,,
web designer if you you lean more,,,
towards design as well and if you plan,,,
on being a backend developer a lot of,,,
this doesn't really apply to you however,,,
I usually do suggest learning the basics,,,
of HTML CSS and JavaScript even for,,,
backend devs it just gives you a better,,,
understanding of how the frontend works,,,
and how to work with it and that's just,,,
my personal suggestion but I know not,,,
everybody has enough time to learn,,,
everything so you should have a familiar,,,
development environment that you work,,,
with including a text editor or IDE a,,,
set of helpful extensions some kind of,,,
local development server like live,,,
server uh a terminal although at this,,,
point you probably don't need it much,,,
and then you should know the basics of,,,
git and GitHub so you should know HTML,,,
and CSS pretty well enough to create,,,
static websites with responsive layouts,,,
have a good understanding of the Box,,,
model knowing some design principles and,,,
stuff that also is very helpful you,,,
should know at least enough JavaScript,,,
to create some Dynamic elements like,,,
models dropdowns tabs form validation,,,
and just the ability to make Pages,,,
Dynamic and be able to add and remove,,,
CSS Styles dynamically with JavaScript,,,
and having knowledge uh about HTTP,,,
requests about the the request response,,,
cycle HTTP methods and using the fetch,,,
API understand asynchronous code and,,,
promises and then you should also be,,,
able to deploy a basic website or,,,
application to uh a live server using a,,,
service like netlify a versel or,,,
whatever it is that you choose now CSS,,,
Frameworks like I said are optional but,,,
in my opinion are recommended I would,,,
suggest either bootstrap or Tailwind,,,
they're easy enough to learn and they do,,,
help you you know style your websites,,,
much faster SAS is also optional but,,,
recommended as well because you can,,,
learn it really fast and I think I,,,
mentioned this but I I might not have,,,
but it's really important to to learn,,,
CSS before you jump into any kind of CSS,,,
framework just like with JavaScript you,,,
need to know fundamentals before you,,,
move to a JavaScript framework um some,,,
of you may choose to go the WordPress,,,
route especially if you're going to be,,,
freelancing if so you should know how to,,,
install and set up plugins themes,,,
widgets also work on learning how to,,,
create your own themes and plugins once,,,
you're ready to start learning PHP as,,,
far as Jobs go you could start applying,,,
with this knowledge but typically,,,
front-end positions are going to want,,,
you to know a framework like react or,,,
view so you might want to learn one of,,,
those first in my experience there are a,,,
lot of jobs that are willing to train,,,
you if you do know if you you know,,,
you're familiar with JavaScript but you,,,
just really haven't gotten deep into a,,,
framework yet some companies are willing,,,
to train you on that um you could also,,,
start freelancing at this point you,,,
could create websites for small,,,
businesses and individuals so it's,,,
really up to you on where you want to go,,,
next now from here it really depends on,,,
what you want to do and I think there's,,,
a few different paths you can take from,,,
this point so let's say that you want to,,,
be more of a web designer or or work for,,,
a small agency or freelance you might,,,
choose to learn more about design get,,,
better at CSS maybe get more into,,,
WordPress or even some no code tools,,,
like web flow you probably want to learn,,,
some SEO practices as well because,,,
that's something that a lot of clients,,,
will will need um this route usually is,,,
a mix of coding and business and you,,,
work really close with clients in other,,,
businesses you may even get into some,,,
marketing I did this for quite a few,,,
years myself um you could also go the,,,
the full-blown uiux designer route which,,,
is kind of out of the scope of of this,,,
guide um but maybe you find that you're,,,
better at design than coding I I've seen,,,
a lot of people do that they start off,,,
wanting to be a web developer but they,,,
end up um getting more into you know,,,
figma or uh Adobe XD and they they get,,,
more into the design side of things so,,,
that that could be an option as well and,,,
then the next option is to proceed with,,,
the front end and this this is probably,,,
the most common among my audience at,,,
least if you're more into the coding,,,
aspect and you want to work for a,,,
company as a front end or even full,,,
stack developer you can continue to,,,
learn more about JavaScript and learn a,,,
framework like react view or angular all,,,
right you can learn about UI components,,,
and state front-end workflows and and,,,
build tools like webpack and vit static,,,
site generators like Gatsby and SSR,,,
Frameworks like next JS you'll also,,,
learn about testing and performance this,,,
route is much more focused on coding and,,,
less on on design and again this could,,,
be for you whether you plan on being a,,,
front-end or a full stack developer and,,,
I want to stress that if you do plan on,,,
freelancing you can still proceed with,,,
this particular path it can be really,,,
beneficial to learn something like react,,,
and maybe a static site generator like,,,
Gatsby and use that along with a,,,
headless CMS that's that's a good stack,,,
for a freelancer because you can create,,,
things that are very Dynamic and you can,,,
create them really quickly and I'll talk,,,
more about that stuff soon next if you,,,
want to be a backend developer or a full,,,
stack developer and just start with the,,,
backend next you can take this approach,,,
so you can move to a server side,,,
programming language like python C PHP,,,
or stick with JavaScript and learn a,,,
runtime like node.js or even a newer,,,
runtime like bun JS or Dino so you'll,,,
also need to learn a backend framework,,,
like Express if you're using node D,,,
Jango for python larl for PHP uh maybe,,,
asp.net if you're getting into C so lots,,,
and lots of choices and we'll get into,,,
all of that and then you're also going,,,
to need to know about uh databases so,,,
either relational or nosql databases,,,
with this option you'll be creating apis,,,
for front-end developers to work with if,,,
you're going full stack then you'll be,,,
creating and consuming apis you may also,,,
want to learn a little a little bit,,,
about devops and how to deploy server,,,
side applications to and apis to,,,
production so I'm going to continue with,,,
what I see most people do and move,,,
further down the frontend developer path,,,
so we're going to take the the middle,,,
option here now before we look at,,,
front-end Frameworks and ecosystems I,,,
want to address a change that's that's,,,
happening where the front end is,,,
evolving quite a bit and this may seem,,,
complicated and overwhelming at first,,,
but I think we're headed in the right,,,
direction so website started off with a,,,
traditional multi-page server rendered,,,
approach so think of like a PHP website,,,
each distinct piece of content is,,,
presented on separate HTML Pages whether,,,
it's static whether you create those,,,
HTML Pages or they're generated by some,,,
kind of server side language like PHP,,,
and this is still a common approach it's,,,
great for SEO but the UI isn't as fast,,,
and dynamic as if you were to use a,,,
front-end framework like react which,,,
which for many projects is absolutely,,,
fine then these front-end Frameworks,,,
come along and change it up where we're,,,
building single page applications or,,,
spas and this is where the entire UI the,,,
entire application or front end is,,,
bundled into a JavaScript or or multiple,,,
JavaScript files and the browser loads a,,,
single HTML page so when you click on a,,,
link it doesn't actually go to a new,,,
page like it would for a traditional,,,
HTML or PHP site it just changes the URL,,,
and then JavaScript handles the rest and,,,
this makes the site very Dynamic it,,,
gives you a very fast and and,,,
interactive user interface on the client,,,
side but it's not great for SEO and it,,,
can lack performance in some areas so,,,
now we have what are called SSR or,,,
serers side rendered websites this is,,,
where the page is initially rendered on,,,
the server by default and then sent to,,,
the browser similar to traditional,,,
websites however we can still have that,,,
interactive fast user interface by using,,,
client side components in Frameworks,,,
like react and view so you really get,,,
the best of both both worlds and we do,,,
this through what are called met meta,,,
Frameworks or SSR Frameworks there's,,,
different names for them but some,,,
examples are nextjs which you can use,,,
react and you can have your pages server,,,
side rendered nujs for view you have,,,
spelt kit for spelt so I'll talk about,,,
those Technologies in a bit but that's,,,
kind of the approach that we're St,,,
stting to see more of now now in,,,
addition to that you have static site,,,
generators like Gatsby gridsum Astro,,,
nextjs is also a static site generator,,,
and these are Frameworks that allow you,,,
to build static websites with react view,,,
felt so you can have a static website,,,
with a dynamic UI and I know that sounds,,,
a bit confusing but it I think it's a,,,
good thing because it gives us more,,,
options and allows us to build better,,,
websites or more interactive websites,,,
and applications so instead of talking,,,
about front-end Frameworks and then,,,
talking about SSR and static site,,,
generators I'm going to talk about them,,,
all together as an ecosystem I think,,,
that makes more sense so if you're a,,,
react developer and you want to learn,,,
SSR then you're probably going to use,,,
something like nextjs or remix because,,,
you already know react you just need to,,,
learn the the the nextjs way of doing,,,
things now since this can be confusing,,,
especially for beginners I always say,,,
that I always say I always say start,,,
with a single page application if you're,,,
learning react just start with Spas,,,
using Create react app I'll talk about,,,
that in a minute and basically go with,,,
the whatever's in the framework's,,,
documentation then once you're,,,
comfortable with that you can move to a,,,
meta framework like nextjs so think of,,,
it as you're you're not just learning or,,,
getting into react or view but you're,,,
getting into that entire ecosystem and,,,
that can include SSR SSG State,,,
Management mobile Frameworks UI,,,
component libraries and more so you,,,
don't have to learn all these things but,,,
the more you learn the more types of,,,
projects you can build now there's a,,,
crap ton of Frameworks out there but,,,
these are the big four you have react,,,
view spelt and angular and I would,,,
suggest learning one of these because if,,,
you choose some obscure framework it,,,
could go away at any point you know and,,,
no longer be supported and there's,,,
probably not much of a community you may,,,
have a hard time finding a job so would,,,
stick to one of these and I'm going to,,,
go over each one and then after that,,,
we'll go over the ecosystems of each one,,,
so we'll start off with react which is a,,,
front-end framework that was created in,,,
2013 By Facebook and I would say it's,,,
the most popular front-end framework,,,
it's been around for quite a few years,,,
now there's quite a few react jobs out,,,
there in many areas so if you're looking,,,
to work as a full-time developer then,,,
react is a good choice it's a component,,,
based framework work as are all of these,,,
and it uses jsx which is a syntax,,,
extension to JavaScript so it basically,,,
allows you to write HTML within your,,,
JavaScript and within your components,,,
it's not required with react but it's,,,
the most common way to use it and the,,,
most common way to write components now,,,
and when I say components I'm talking,,,
about pieces of the user interface so a,,,
search input uh a nav menu an article,,,
whatever you you you start to think of,,,
your website in terms of UI components,,,
now technically react is a UI library,,,
and not a framework however it's so,,,
popular and has such a huge ecosystem,,,
that I think it's fair to call it a,,,
framework and it's a direct competitor,,,
to Frameworks like angular and just know,,,
that react is a library so you'll most,,,
likely be installing a lot of other,,,
packages react does have one of the or,,,
I'd say the biggest ecosystem and that's,,,
not necessarily a good thing because it,,,
means that the framework itself is,,,
pretty bare bones and you'll need to,,,
install other packages to do things like,,,
routing Etc I'd say it's pretty middle,,,
of the road when it comes to the,,,
learning curve there are some things,,,
that might make you scratch your head,,,
and things that are a bit easier to do,,,
in other Frameworks especially when it,,,
comes to State however it's much easier,,,
than something like angular at least in,,,
my opinion it's also pretty quick to to,,,
get something up and running with now,,,
when it comes to Performance all the,,,
Frameworks are pretty impressive it's,,,
hard to really gauge this because it,,,
depends on the project and how you write,,,
your code react is generally more,,,
performant than angular um it's also,,,
much lighter but it's not as performing,,,
as something like spelt but again it,,,
depends on the project and how you write,,,
your code you can use things like,,,
memorization and lazy loading things,,,
like that to improve performance now,,,
there's also a lot of jobs in react in,,,
most areas at least in the US I'm not,,,
really familiar with other countries and,,,
this is definitely a good reason to get,,,
into react but it shouldn't be the only,,,
reason if you hate writing react you may,,,
be better off using something that you,,,
like even if there's less jobs and,,,
remember if there's less jobs there's,,,
probably less competition as well also,,,
remember when there's a lot of jobs with,,,
a certain technology that's really,,,
popular a lot of people know that,,,
technology so you have to weigh the pros,,,
and cons next we have vue.js which is a,,,
framework that was created by Evan u in,,,
2014 and it gains more popularity every,,,
year a just the fact that it was created,,,
wasn't created by a tech giant like,,,
Facebook or Google and is still one of,,,
the most used Frameworks is pretty,,,
impressive and it shows that it's a,,,
great framework one of if not the main,,,
focus of vue.js or main focuses is,,,
Simplicity and performance and it is,,,
component based of course just like the,,,
rest of these and it uses a template,,,
syntax that's very similar to HTML and,,,
view components are very simple there's,,,
an area of the template for for the,,,
output or the HTML the logic or the,,,
JavaScript and the Styles and there's,,,
two different ways to write your,,,
JavaScript in view components now at,,,
least with uh since version three,,,
there's the options API where your,,,
component is an object with properties,,,
and methods and then the view version,,,
three introduced the composition API,,,
where it's uh you have a setup function,,,
and you return the data and methods from,,,
that function I'd say the options API is,,,
a bit easier to learn but the,,,
composition API is more powerful that's,,,
just my opinion though so like react,,,
view is also very lightweight and on its,,,
own it has a a pretty similar ecosystem,,,
to react when it comes to you know SSR,,,
and SSG Frameworks and so on and we'll,,,
take a look at those soon I would say,,,
that Vue is one of if not the easiest,,,
Frameworks to learn of course I'm saying,,,
that relative to the others uh it's also,,,
very powerful and it has a lot of the,,,
same features as react so as I said Vue,,,
has a focus on performance and it's very,,,
fast has a very small bundle size so,,,
next we have angular which was created,,,
by Google and there was a version back,,,
in the day called angularjs I believe,,,
around 2010 and the entire framework was,,,
revamped for version two which is just,,,
angular so if you hear angularjs and,,,
angular those they're usually two,,,
different Frameworks so if you just go,,,
by the cont content in things like,,,
YouTube and Twitter and you know things,,,
you read online you might think that,,,
angular is kind of dead however it's,,,
still very much alive and used by a lot,,,
of really large companies and Enterprise,,,
level projects so I don't think it's,,,
going anywhere anytime soon the others,,,
are more popular with startups smaller,,,
companies individuals and of course,,,
they're they're also used by really,,,
large companies um but you see mostly,,,
react and view if you're looking at,,,
YouTube tutorials and videos and stuff,,,
like that um but yeah angular is a true,,,
full-featured and opinionated framework,,,
meaning that there's certain ways to do,,,
things where with something like react,,,
you have much more freedom and you can,,,
there's a million ways to do the same,,,
thing now angular includes a router it,,,
has its own HTTP client it has its own,,,
Services animations and much more it,,,
also uses typescript by default which is,,,
a superet of JavaScript that lets you,,,
use types and you can use typescript,,,
with any framework however it's the norm,,,
it's the default for for angular,,,
applications and it also ships with the,,,
angular CLI which is a command line,,,
interface that allows you to create an,,,
angular application with virtually no,,,
configuration and it's used to build and,,,
deploy your app not only that but you,,,
can set your project up to be a spa so a,,,
single page application or an SSR or a,,,
pre-rendered static site so the,,,
ecosystem as far as third-party tools is,,,
much smaller than react or view because,,,
again so much is included in the,,,
framework itself I think angular has a,,,
pretty steep learning curve and I don't,,,
usually recommend it for beginners,,,
unless they're going to be working for a,,,
company that uses it um but that's,,,
that's just kind of my opinion and it,,,
seems to be the opinion of a lot of,,,
people the bundle size is larger than,,,
others which is expected because it's so,,,
full featured however it's still pretty,,,
fast for what it is um for most projects,,,
the bundle size isn't going to be an,,,
issue,,,
anyway so the last one we have is spelt,,,
which is a modern JavaScript framework,,,
for building web applications that takes,,,
a kind of a different approach in fact,,,
technically spelt is a compiler and it,,,
focuses on shifting a lot of the work,,,
that's traditionally done at runtime to,,,
compile time so other Frameworks like,,,
the ones we just talked about use what,,,
it's called a virtual Dom while spelt,,,
comp piles your components into highly,,,
optimized vanilla JavaScript code during,,,
the build process so this results in,,,
faster and more efficient applications,,,
and it's also the most lightweight of,,,
the four as far as writing codes felt,,,
offers a simple and intuitive,,,
component-based approach where,,,
components are written using a clean,,,
HTML like syntax with JavaScript logic,,,
embedded directly within them so when,,,
you write spelt code it it it feels a,,,
lot like vanilla JavaScript out of I'd,,,
say out of all the Frameworks it's,,,
almost like what you wish JavaScript,,,
would be on its own in terms of how you,,,
create events and dynamic interaction,,,
with with HTML uh spelt has a a pretty,,,
easy learning curve I'd say spelt and,,,
view are definitely the easiest to learn,,,
uh it has a very straightforward,,,
development experience which makes it an,,,
an attractive choice for building modern,,,
web applications the downside to felt is,,,
that it's it's fairly new so when it,,,
comes to finding jobs I just don't see a,,,
lot of them and I'm not saying that you,,,
can't find a job as a spelt developer,,,
but there's a lot more react View and,,,
angular jobs out there and it's a it's a,,,
great framework on its own though and I,,,
would suggest checking it out um now the,,,
ecosystem for spelt is really small,,,
because there's an official meta,,,
framework called spelt kit that pretty,,,
much includes everything you need to,,,
build a full stack application you can,,,
build Spas SSR static websites it,,,
handles all the routing the building the,,,
dev server and much more all right so,,,
now I want to talk about the ecosystems,,,
for each of the four Frameworks and,,,
instead of showing you a page with all,,,
the SSR Frameworks all the static site,,,
generators I'm keeping it within that,,,
particular framework ecosystem and some,,,
of this stuff is are tools that are,,,
built into the framework but most of it,,,
is is thirdparty tools to add function,,,
it and I'm going to start with react,,,
because it has the biggest ecosystem and,,,
then I'll talk about the others and,,,
you're going to see that most of what is,,,
available for react is also available,,,
for the others whether through native,,,
features or through thirdparty,,,
packages so we'll start with create,,,
react app that's probably what you're,,,
going to start with if you if you're,,,
just starting to learn react and this is,,,
more more of a traditional way to use,,,
react it's a CLI a command line,,,
interface that allows you to to spin up,,,
a project with no configuration it's,,,
great for beginners and it's what you,,,
would use to create a spa or single page,,,
application so you could install react,,,
manually if you wanted to but I wouldn't,,,
suggest it because create react app,,,
gives you additional features like Hut,,,
reloading gives you a Dev server service,,,
worker and more and it's built on top of,,,
the webpack build tool and you can eject,,,
from create react app if you want to,,,
customize the configuration and really,,,
dig into webpack but I wouldn't suggest,,,
just that unless you really know what,,,
you're doing now as I said react is,,,
referred to as a framework but it's,,,
technically a UI library and it doesn't,,,
have some of the essential things that,,,
you would find in a framework and a,,,
router is one of those things so with a,,,
single page application you need to,,,
manually Define your routes it's not,,,
like an SSR framework where you just put,,,
a file into a certain folder and then,,,
it's accessible you need to install the,,,
router and you need to create your,,,
routes and the most popular way to do,,,
this is with react router which is the,,,
official re router that you would use,,,
and you'll typically learn about this,,,
along with react it's very easy to use,,,
it has a lot of features and it's very,,,
well,,,
documented now when it comes to managing,,,
state or data in your application you,,,
have component level state which just,,,
pertains to that component which is,,,
pretty easy to handle but then you have,,,
app level or Global state where you need,,,
to share that data between multiple,,,
components now in my my opinion react,,,
isn't the best with State Management out,,,
of the box there is a built-in context,,,
API that you can use along with some,,,
hooks but it's fairly difficult for,,,
beginners to grasp also if you're,,,
building something with a lot of State,,,
you might have to reach for a third,,,
party solution so Redux has always been,,,
pretty popular um Redux also isn't the,,,
easiest thing to deal with I think Redux,,,
toolkit makes it a bit easier that's,,,
another a library you can use on top of,,,
Redux you also Al have mobx which is a,,,
popular state management tool there's,,,
some others like zo zustand zustand I'm,,,
not sure how to pronounce it but um,,,
that's gaining some traction recoil,,,
xstate there's a lot of different ways,,,
you can manage state within react but I,,,
would say learn the the native features,,,
first learn the context API learn the,,,
you know usate hook user reducer hook,,,
and so on now when we get into the,,,
server side rendered Frameworks I think,,,
that this is where react's ecosystem,,,
really shines nextjs is a great,,,
framework and just great platform to,,,
build react projects with it uses react,,,
server components so all of your,,,
components are actually rendered on the,,,
server by default and you can fetch and,,,
load data very easily from the server,,,
you can also make them client side,,,
components and make them Dynamic just by,,,
adding a single line at the top saying,,,
use client um next JS also is a static,,,
site generator so you can create static,,,
websites then you have remix which is,,,
another SSR framework that's built on,,,
top of it's actually built on top of,,,
react router and it's very similar to,,,
nextjs it's a bit more difficult to,,,
learn in my opinion but it does have,,,
some features that next doesn't and I do,,,
have a crash course on both if you want,,,
to check them out SSR websites are great,,,
for SEO and performance you really get,,,
the best of both worlds like like I said,,,
earlier and you can also use uh,,,
something called a headless content,,,
management system like content full or,,,
sanity and I'll talk more about those,,,
later but those pair really well with,,,
SSR,,,
Frameworks now Gatsby takes a different,,,
approach compared to traditional single,,,
page applications or or SSRS it's a,,,
static site generator so instead of,,,
rendering content on the client via,,,
JavaScript Gatsby generates static HTML,,,
files at build time so this approach,,,
results in really fast load times and,,,
improved SEO so it's built on top of,,,
react so if you already know react you,,,
can easily jump into Gatsby it has a,,,
data layer that uses graphql which is a,,,
query language for apis and I'll get a,,,
little bit more into that later um but,,,
yeah Gatsby and nextjs are both used to,,,
create really fast static websites and,,,
again you could use something like a,,,
headless CMS for your data and use the,,,
stat static website as your front,,,
end so of course",,,
 you can write your own,,,
CSS and styles but you you might want to,,,
use a UI component library or UI kit,,,
these are pre-built components that you,,,
can use in your application and they're,,,
great for beginners because you don't,,,
have to worry about styling you can just,,,
import the component and you can use it,,,
so there's a bunch of these material UI,,,
is uh really popular one it uses,,,
Google's material design pattern and,,,
it's very customizable has a a ton of,,,
components to choose from some other,,,
popular ones are react bootstrap which,,,
has pre-built bootstrap components,,,
Shakra UI which I really like I think,,,
has some really goodlooking components,,,
and then you also have a library called,,,
styled components which is a CSS njs,,,
library that allows you to write CSS in,,,
your JavaScript so this is is it doesn't,,,
come with pre-built components like the,,,
other ones do but it allows you to,,,
essentially create your own pre-built,,,
components,,,
so another part of the ecosystem is,,,
react native which allows you to build,,,
native mobile applications using the,,,
react framework and what's great about,,,
react native is that you can use the,,,
same codebase for both IOS and Android,,,
usually when you build native mobile,,,
apps you have separate a separate Swift,,,
Code base for iOS either Swift or,,,
objective c and then you'll have a,,,
separate cotlin or Java code base for,,,
Android apps where with react native,,,
it's,,,
it you have just one app for both and,,,
it's also great for web developers,,,
because you can essentially use your,,,
JavaScript skills to build mobile,,,
applications so those are the main parts,,,
of the ecosystem but there's plenty of,,,
other smaller things you might find,,,
yourself using such as react query which,,,
is a library for fetching caching and,,,
synchronizing data you have libraries to,,,
work with forms like formic and react,,,
hook form react testing library and many,,,
other libraries to to test your react,,,
applications there's libraries for,,,
animation there's even even Frameworks,,,
and libraries for using react to build,,,
VR so virtual reality and augmented,,,
reality environments um you certainly,,,
don't need to learn all of this but if,,,
you learn react you can get into all,,,
this stuff pretty easily so the vue.js,,,
ecosystem almost seems to miror reacts,,,
it has a lot of the same features and,,,
tools so create view is similar to,,,
create react app but just for vue.js,,,
it's a CLI and Scaffolding tool to,,,
create a single page application and,,,
it's built on top of a build tool called,,,
vit so vit is a newer build tool that's,,,
much faster than webpack we used uh we,,,
used to use something called the Vue CLI,,,
which is still around but I don't think,,,
it's supported anymore I would just,,,
suggest using Create view uh if you're,,,
building a spa with VJs and then Vue,,,
router is the official router for VJs,,,
it's very similar to react router it,,,
allows you to create routes for your,,,
application it's very easy to use very,,,
well documented now State Management,,,
with the native vue.js is is pretty easy,,,
compared to react just by the way,,,
components are structured but there are,,,
tools if you need more advanced State,,,
Management so VX used to be the official,,,
state management tool for view but now,,,
it's called pinea which works in a very,,,
very similar way to VX and it allows you,,,
to share your state across components,,,
and pages and it works of course with,,,
view version two and version three you,,,
also have other options like xstate,,,
Harlem uh and there's a lot of other,,,
thirdparty tools you can look into if,,,
needed and then nujs is very similar to,,,
nextjs it's a server side rendered,,,
framework or meta framework for vue.js,,,
it's great for SEO and performance it's,,,
also a static site generator so it,,,
includes most of the features that,,,
nextjs does as far as filebase routing,,,
server components data fetching,,,
utilities um it uses the Nitro server,,,
engine if you're a view developer and,,,
you want to get into SSR you're probably,,,
going to be learning,,,
nujs and then gridsum is a popular,,,
static site generator built on top of,,,
you and it's very comparable to Gatsby,,,
and it's ideal for building fast and,,,
efficient static websites blogs,,,
documentation sites it's also um uh it,,,
also uses a graphql data layer just like,,,
Gatsby so you can kind of see the,,,
pattern here everything that react has,,,
view basically has in its own right and,,,
then as far as UI libraries go VY is,,,
probably the most popular it's similar,,,
to material UI for react it's based off,,,
of Google's material design pattern very,,,
customizable tons of components probably,,,
what I would recommend but there's,,,
others as well um if you want to use,,,
bootstrap components you have bootstrap,,,
view I believe believe there's also one,,,
called view strap you have quazar Buffy,,,
which is uses the balma framework so,,,
tons of of UI kits available and then as,,,
far as mobile development there's not,,,
really something that's directly,,,
comparable to react native um you do,,,
have native script or native script view,,,
but native script you can use any any um,,,
uh framework with you could even use,,,
react with it and it has access to,,,
Native API so you can essentially create,,,
uh a native mobile app with View and,,,
have a single code base for both IOS and,,,
Android and then some other things you,,,
might run into our view query or tan,,,
stack which is basically the react query,,,
for view it's a way to fetch and cache,,,
data you have view testing utilities you,,,
have native animations that you can use,,,
um that's built into the framework and,,,
then for virtual reality you have Vue VR,,,
so just some things that I figured I'd,,,
throw win that you might find uh find in,,,
the ecosystem now for angular the the,,,
ecosystem isn't as big or I should say a,,,
lot Mo a lot of the stuff is built into,,,
angular itself because it's a much more,,,
full-featured framework so you're not,,,
reaching for as many thirdparty,,,
solutions so the angular CLI is the,,,
official command line tool for angular,,,
it allows you to create build test and,,,
deploy angular applications and it's,,,
it's similar to create react app and,,,
create view it's built on top of webpack,,,
and it's pretty easy to use also very,,,
well documented um you can enable SSR,,,
with angular CLI which is pretty cool it,,,
was initially called angular Universal,,,
the SSR framework but that repo has been,,,
merged with the CLI there's also options,,,
to pre-render your app which is similar,,,
to static site,,,
generation now the angular router is the,,,
official router for angular and it's,,,
very similar to react router and view,,,
router except it's built built in you,,,
don't have to install it separately and,,,
it includes things like route guards it,,,
even has some animation options uh so,,,
very cool now as far as state goes one,,,
thing I really like about angular is the,,,
concept of services this gives you an,,,
easy way to manage your state because,,,
you can inject a service into your,,,
components and you can share data from,,,
that service across your entire,,,
application okay you also have ngrx,,,
which is the official state management,,,
tool for Ang,,,
it's similar to Redux um it's it's,,,
actually built on top of something,,,
called rxjs which is a library for,,,
reactive programming using observables,,,
so dealing with asynchronous code,,,
similar to promises and it's a bit more,,,
complex than other State Management,,,
tools but also very powerful and it's,,,
great for larger complex,,,
applications uh and again for SSR and,,,
static sites you can just use the CLI so,,,
there is no nextjs or njs for for,,,
angular U it's all included and bundled,,,
in the CLI for UI kits angular material,,,
is pretty popular you also have NG,,,
bootstrap Prime mg Clarity and a bunch,,,
of others as well with that you just,,,
kind of have to go through and see which,,,
ones you like what what components you,,,
like the look of and so on uh if you,,,
even want to use a UI kit and then for,,,
mobile apps you can use native script,,,
just as well as you can use it with any,,,
framework um you can also use ionic for,,,
hybrid apps which I'll talk about later,,,
and then as far as other tools you might,,,
find yourself using obviously typescript,,,
because that's the default with angular,,,
some other packages I've used are,,,
angular fire to work with Firebase um,,,
which we'll also talk about later formly,,,
for forms and angular testing library,,,
for testing um and testing is built in,,,
with the CLI as,,,
well so spelt is newer than the other,,,
framework it doesn't have as big of an,,,
ecosystem because it has an official,,,
meta framework called spel kit which is,,,
awesome I really like the way that spelt,,,
does things it's a full stack framework,,,
that allows you to build single page,,,
apps server side rendered apps and,,,
static websit so it's basically an,,,
all-in-one tool and it's great for SEO,,,
it's great for performance um it's,,,
similar to nextjs and knjs with some,,,
elements of Gatsby and gridsome so you,,,
can basically build whatever you want,,,
with spelt and it's built on top of the,,,
vit build tool um sapper was the,,,
original meta framework for spelt but,,,
it's no longer supported so spelt kit is,,,
basically the new version of sapper and,,,
State Management is is really well,,,
integrated you don't really need to,,,
reach for a third-party solution because,,,
spel kit has uh a context API and built,,,
in readable and writable stores that you,,,
can use to share data between components,,,
of course if you want you can use a,,,
thirdparty state manager but I think for,,,
most types of applications the built-in,,,
the built-in functionality is really all,,,
you need and there's also a bunch of UI,,,
kits like spelt strap which is a port of,,,
bootstrap for spelt there's U there's,,,
carbon components which is aort of IBM's,,,
carbon design system as well as flow,,,
bite and some others so the the way that,,,
spelt does it I think is is the way to,,,
do it just have everything bundled in a,,,
single official meta framework now you,,,
can see that a lot of these framework,,,
ecosystems basically all copy each other,,,
they all have the same features and,,,
tools so it really comes down to what,,,
which one you like best you can pretty,,,
much build the same stuff with any of,,,
them some are might be a little more,,,
performant than others but they're all,,,
pretty fast so those are the big,,,
front-end Frameworks and ecosystems and,,,
I know that it's a lot of information,,,
but I think it's important to know,,,
what's out there and what I suggest is,,,
is just trying each one out and seeing,,,
what kind of Vibes with you uh a lot of,,,
people on the internet like to say this,,,
one's great and this one sucks don't,,,
ever let that be the deciding factor try,,,
them out for yourself and see what you,,,
like I think they're all great and they,,,
all have their pros and,,,
cons all right so let's talk a little,,,
bit more about typescript I mentioned it,,,
a couple times but didn't really talk,,,
about what it really is um it's,,,
available for front end and backend if,,,
you're using something like node.js,,,
and typescript is a superet of,,,
JavaScript meaning that it is,,,
essentially JavaScript it is the,,,
JavaScript language but with some added,,,
features so anything you can do in,,,
JavaScript you can do in typescript but,,,
then in addition you have features um,,,
such as static typing that's kind of the,,,
main addition to it is that JavaScript,,,
by default is a dynamically typed,,,
language which means that you don't,,,
specify the types of your variables or,,,
function return values you don't say,,,
this variable is a string or this one's,,,
a number but typescript allows you to do,,,
that and you might say well why the hell,,,
would I want to do that why would I want,,,
to write more code when I don't have to,,,
and it's kind of hard to explain until,,,
you use it and really see the benefits,,,
it's not for everyone but I think it's,,,
worth learning I think that having types,,,
does require more code but it also makes,,,
your code more robust and less prone to,,,
errors it also makes your code more,,,
descriptive and readable and if you use,,,
something like vs code it will give you,,,
more intellisense and show you you know,,,
what properties and methods are,,,
available for or or what you're missing,,,
um so there are a lot of reasons to use,,,
typescript all right so headless content,,,
Management systems are becoming more and,,,
more popular and they allow you to,,,
create content in a user interface,,,
similar to what you would do in a,,,
WordPress admin area and then they,,,
generate an API from your content and,,,
you can use that API in whatever front,,,
end you'd like and these these can also,,,
be useful for Freelancers because,,,
clients can log in they can update their,,,
content easily and uh of course you,,,
could create your own custom admin area,,,
for them but that takes way more time,,,
and money and these are really popular,,,
with static site generators like Gatsby,,,
as well as SSR Frameworks like nextjs or,,,
njs so let's just take a a look at at a,,,
few of the popular ones there's tons of,,,
these out there so sanity or sanity.io,,,
is a headless CMS that can be used by,,,
projects of all sizes companies like,,,
Nike and figma use sanity there's a free,,,
option for personal projects but you can,,,
also pay for plans for for teams uh for,,,
really large projects so it can be good,,,
for really complex applications or,,,
something like a personal blog content,,,
full is another popular headless CMS,,,
that has a ton of features it's used by,,,
companies like Spotify and Urban,,,
Outfitters it's also free for personal,,,
projects and you can pay for plans for,,,
teams and there's also extensive,,,
Integrations available so strappy is a,,,
free and open source headless CMS that's,,,
built on top of node.js and it uses a,,,
mongodb database and it's great for,,,
small to mediumsized projects it's also,,,
very customizable I like strappy because,,,
it's open- source and you host and,,,
manage or you can host and manage,,,
everything yourself um the interface is,,,
pretty easy to use as well it can,,,
generate a rest API or a graphql API,,,
from your content I do have a crash,,,
course on strappy if you're interested,,,
uh I also have a crash course on the,,,
next one which is prismic and this is,,,
another headless CMS that uses a,,,
structured content model based on slices,,,
and it allows content creators to build,,,
Dynamic page layouts with reusable,,,
components and this is good for allowing,,,
non-technical users or your clients to,,,
create versatile content and and then,,,
High graph is a new uh new product that,,,
looks pretty cool it's it's not,,,
something I've used um it's a headless,,,
CMS with e-commerce capabilities so you,,,
can you can build an entire shopping,,,
platform API and it integrates,,,
seamlessly with payment gateways it also,,,
uses graphql again I'll talk about,,,
graphql in a little bit now if you,,,
haven't used WordPress in a while you,,,
may not know that in addition to the,,,
traditional WordPress CMS it also has,,,
headless capabilities and you can,,,
generate a rest API from your WordPress,,,
content and it's easy to get up and,,,
running um it's it gives you the the,,,
powerful WordPress admin interface,,,
without being bound to the front end,,,
without being bound to Wordpress themes,,,
so you can use anything you want react,,,
view spelt whatever um so this can be,,,
really good for free uh Freelancers as,,,
well now there's like I said there's a,,,
ton of these and I would just suggest,,,
taking a look look at a few of them and,,,
seeing if you like it see how you know,,,
how the API can can be generated and how,,,
you can integrate it into whatever it is,,,
you use in your front,,,
end now there are some other newer,,,
smaller Frameworks and other tools that,,,
I want to mention I'm not going to go,,,
into detail about them but I'll give you,,,
a brief overview if you're just starting,,,
out and learning one of the big,,,
Frameworks you don't need to worry about,,,
these just yet but if you're a more,,,
experienced developer you may want to,,,
check them out so solid is a declarative,,,
JavaScript library for creating user,,,
interfaces and it's built on top of jsx,,,
which is the syntax extension to,,,
JavaScript very similar to react in fast,,,
in fact the framework overall is very,,,
similar to react and solid js's reactive,,,
rendering is one of its standout,,,
features it uses um fine grained,,,
reactivity to update only the parts of,,,
the Dom that actually change resulting,,,
in high performance and minimal,,,
rendering so it's fairly easy to learn I,,,
still need to create a crash course on,,,
it it's not as popular as the other,,,
Frameworks but it's also much newer and,,,
it's growing in popularity so I won't be,,,
surprised if we see a lot more of solid,,,
JS Alpine JS is a minimal framework for,,,
composing JavaScript behavior in your,,,
mockup so in your HTML and it's quite,,,
different than the other ones we've,,,
talked about in fact I wouldn't even put,,,
it in the same category it's more of a,,,
utility Library it's very small and it's,,,
great for adding some Dynamic elements,,,
to your website without having to learn,,,
a full framework and you also don't have,,,
to write any JavaScript it almost makes,,,
HTML function as if it were a,,,
programming language so you can have,,,
conditionals and um loops and stuff like,,,
that within your HTML just by using,,,
special tags so if you have a basic,,,
website and you just want to add like a,,,
drop down or a modal you can do that,,,
easily with alpine JS and there's no,,,
need to learn learn a full framework it,,,
also pairs well with laravel templates,,,
or you can use it with d Jango and,,,
Frameworks like that and then HTM X is,,,
another really cool technology it's a a,,,
JavaScript library that allows you to,,,
create Dynamic front ends again without,,,
writing any JavaScript code and it does,,,
this by allowing you to use special,,,
attributes in your HTML to make HTTP,,,
requests and then update the Dom so it's,,,
actually similar to Alpine but it's more,,,
focused on making HTTP requests and it's,,,
great for adding some some um Dynamic,,,
elements to your website and making,,,
requests to an API or backend without,,,
having to learn a full framework and I,,,
think Alpine and HTM X are great,,,
technologies that work much differently,,,
than traditional framework so I would,,,
definitely suggest checking them out now,,,
Astro is one of my favorite new,,,
Frameworks it's actually a static site,,,
generator as well as an SSR framework,,,
and you can ALS also create a API,,,
endpoints with it I just did a quick,,,
start course that's available on YouTube,,,
and on my website what's really cool,,,
about Astro is that it builds zero,,,
JavaScript by default it actually,,,
renders the HTML pages on the server and,,,
uses an architecture called Islands also,,,
you can use Astro components which are,,,
very simple and straightforward or you,,,
can use react components views felt so,,,
it's it's sort of like a nextjs but it's,,,
not bound to react or any other,,,
framework uh it's also built on top of,,,
vit which again is a very fast build,,,
tool so definitely worth look stencil or,,,
stenciljs is something that I haven't,,,
used yet but it's a tool chain for,,,
building reusable scalable component,,,
libraries it's it was built by the ionic,,,
team and it's a compil compiler that,,,
generates web components so you can,,,
create your own components and you can,,,
basically use them in any framework you,,,
want or in just just JavaScript so JS,,,
Doc is something that has been around,,,
for a while I actually did a crash,,,
course on it years ago that I forgot,,,
about but I'm seeing a lot of it lately,,,
where people are using it in place of,,,
typescript and it's actually an API,,,
documentation generator for JavaScript,,,
but it can be used to add types to your,,,
JavaScript code it's not as robust as,,,
typescript but it's a lot easier to get,,,
into and I'd suggest looking into it and,,,
seeing if it's something that you might,,,
benefit from,,,
all right so in addition to tools,,,
languages and Frameworks you also have a,,,
lot of web apis available in the browser,,,
that you should be familiar with and I'm,,,
not going to go over all of them but,,,
I'll list some of the common ones here,,,
many of these are easy enough to learn I,,,
just suggest spending a little bit of,,,
time on them so the canvas API provides,,,
uh a means for drawing Graphics via,,,
JavaScript and the HTML canvas element,,,
uh among other things it can be used for,,,
animation game Gra Graphics data,,,
visualization photo manipulation,,,
realtime video processing and much more,,,
so canvas API probably something you you,,,
want to check out and then the,,,
geolocation API allows users to provide,,,
their location to a web application if,,,
they so desire uh for privacy reasons,,,
the user is asked for permission before,,,
they you know accept to show their,,,
location but this can be very useful for,,,
things like Maps weather apps um you can,,,
c tailor The Experience based on the,,,
user's location things like that the web,,,
storage API provides mechanisms for the,,,
browser to store key value pairs in uh a,,,
much more intuitive fashion than using,,,
cookies it also allows you to store more,,,
data than cookies and you can store data,,,
locally or session based so this is also,,,
called local storage and session,,,
storage now the web workers API makes it,,,
possible to run a script operation in,,,
the background thread separate from the,,,
main execution thread of a web,,,
application so this allows for long,,,
running scripts that are not interrupted,,,
by scripts that respond to clicks or,,,
other user interactions and allows long,,,
tasks to be executed without yielding to,,,
keep the the page,,,
responsive web the web sockets API makes,,,
it possible to open a two-way,,,
interactive communication session,,,
between the user's browser and a server,,,
and with this API you can send messages,,,
to a server and receive event driven,,,
responses without having to pull the,,,
server for a reply so this is great for,,,
chat applications and other real time,,,
applications um then you have the the,,,
web and video apis obviously these allow,,,
you to create and manipulate audio and,,,
video content you can create audio and,,,
video players record audio and video and,,,
even create audio,,,
visualizations so some others you might,,,
want to look into our web RTC for,,,
realtime communication and video,,,
streaming the Bluetooth API the web,,,
search API things like that um they're,,,
all fairly easy to get into once you,,,
learn the basics of JavaScript so I'd,,,
suggest learning about them and maybe,,,
building a small project with some of,,,
them all right now testing is something,,,
that you may or may not get into testing,,,
ensures the reliability functionality,,,
and security of your applications and I,,,
would suggest looking at your project,,,
load to see if testing would be,,,
beneficial uh I'm actually creating a,,,
video now that goes into all of that so,,,
it should be released by the time you,,,
watch this now if you're freelancing and,,,
you're using something like WordPress or,,,
building static websites you won't need,,,
to worry about testing but if you're,,,
building larger more complex,,,
applications it can be beneficial or if,,,
you're working for a company that,,,
requires you to write tests then,,,
obviously you need to learn it um but I,,,
think it's a good idea to at least see,,,
how testing Works check out some of the,,,
libraries and and some of the different,,,
types of testing as far as the different,,,
types there's a lot of them but I'd say,,,
the most common are these three you have,,,
unit testing this is where it pertains,,,
to individual units of code this is,,,
probably the most common type in web,,,
development then integration testing is,,,
the process of seeing how different,,,
elements of your application work,,,
together and then you also have endtoend,,,
testing which is the process of testing,,,
your entire application from start to,,,
finish and every programming language,,,
has testing tools I'm not going to go,,,
over all those but just some of the,,,
popular ones since we're talking about,,,
JavaScript just is very popular um it,,,
was built by Facebook and it's pretty,,,
easy to use it includes built-in,,,
assertion libraries mocking capabilities,,,
powerful features like snapshot testing,,,
mocha is another highly flexible testing,,,
framework for JavaScript uh if you're,,,
looking to run endtoend tests Cypress is,,,
is a good option it's it's JavaScript,,,
JavaScript based testing that allows you,,,
to write tests that run in the browser,,,
and then enzyme is a JavaScript testing,,,
utility for react you also have react,,,
testing Library there's just so many of,,,
these and I can't go over all of them,,,
for every language but um definitely,,,
something you want to look into if,,,
you're looking to build really complex,,,
applications all right so if you've,,,
learned most of what we've talked about,,,
then I'd say you're a pretty Advanced,,,
front-end developer so so if you're,,,
fluent with a frontend framework whether,,,
it's react view felt angular as well as,,,
their ecosystems um so have some,,,
frontend tooling skills so you should,,,
know how to use npm to install packages,,,
uh CLI tools module bundlers like vit,,,
and webpack and then server side,,,
rendering that's definitely something,,,
that a couple years ago I would say is,,,
optional but now I think that it's,,,
something that you need to get into so,,,
if you're becoming a react developer,,,
then you should be learning about nextjs,,,
or remix um spelt kit angular SSR njs,,,
whatever it is service side rendering I,,,
think is the future for um for you know,,,
a big part of web development and then,,,
static site generators also very useful,,,
if you want to build really fast,,,
performant websites uh headless cms's,,,
are obviously optional but they're,,,
really helpful again especially if,,,
you're freelancing and you want a way,,,
for your client to be able to update,,,
their own content but use whatever you,,,
want on the front end so uh really cool,,,
stuff and then some additional tools,,,
such as typescript uh Alpine HTM X some,,,
of the newer Technologies you might want,,,
to just mess with and get into web apis,,,
I would say you should understand a lot,,,
of the common uh apis that are available,,,
like canvas the speech API geolocation,,,
things like that so now that we've gone,,,
over the front end let's talk about the,,,
back end end and if you want to be a,,,
full stack developer or a backend,,,
developer that creates apis,,,
microservices you need to learn a,,,
servers side language or service ey,,,
technology and this is where you start,,,
to get a lot of options really you can,,,
use any language that you want that has,,,
HTTP capabilities but I'm going to go,,,
over some of the most popular choices,,,
and I'll give you some stats at the end,,,
of this section as well so the first,,,
option I have is Javascript right,,,
JavaScript was initially created for the,,,
browser but now we have these runtimes,,,
that allow us to use JavaScript as a,,,
server side language a very fast server,,,
side language no JS being the most,,,
common and definitely what I would,,,
suggest if you're just getting started,,,
there are some newer interesting options,,,
to play with if you already know node.js,,,
Doo is a a newer runtime that's built by,,,
the same person that created node it's,,,
very similar to node but it has some,,,
interesting features like built-in,,,
typescript support built-in package,,,
manager bung s is even newer and more,,,
interesting and I'm actually going to,,,
have a slide dedicated to to that,,,
towards the end but nodejs is very,,,
popular for building apis microservices,,,
as well as full stack applications it's,,,
non-blocking and event driven which,,,
makes it highly efficient for handling,,,
concurrent connections and IO,,,
intensitive tasks what it's not good for,,,
is CPU intensitive tasks so if you're,,,
building something that requires a lot,,,
of processing power you may want to look,,,
into something else um but node.js is is,,,
great for just about everything that has,,,
to do with web development so anything,,,
where we're just doing crud operations,,,
create read update and delete working,,,
with databases Etc it's built on the V8,,,
JavaScript engine which is the same,,,
JavaScript engine that powers Google,,,
Chrome and it's also pretty easy to get,,,
started with now you'll need to learn,,,
about npm which is the node package,,,
manager and you can use it to install,,,
all types of packages and libraries um,,,
if you're familiar with a front-end,,,
framework then you already know how to,,,
use npm because it's used on the front,,,
end as well um you'll need to know about,,,
the node.js ecosystem there are a lot of,,,
tools and Frameworks that you can use,,,
with node I'll go over some of those,,,
soon node is pretty popular with,,,
startups as well as large companies and,,,
the biggest reason for me why I like,,,
node.js is because I like JavaScript and,,,
I like to have the same language on both,,,
the front end and backend so if I'm,,,
using react on the front end it's nice,,,
to be able to use the same language on,,,
the back end as,,,
well now python is another popular,,,
option it's a a general purpose,,,
programming language that's used for a,,,
lot of different things in fact I'd say,,,
Python's probably one of or the most,,,
diverse languages out there it's great,,,
for data science machine learning,,,
automation but it's also great for web,,,
development whether full stack,,,
application,,,
or apis in microservices and python has,,,
great readability um It's relatively,,,
easy to learn there's some phenomenal,,,
Frameworks that python offers such as D,,,
Jango and flask I'll talk about those,,,
soon and python is great for beginners,,,
it's uh like I said very readable it's,,,
easy to get into also at some point if,,,
you want to transition from web,,,
development to something like data,,,
science python is a great option it's,,,
just a fantastic general purpose,,,
language overall next we have PHP which,,,
is a server side scripting language,,,
designed for web development so unlike,,,
python,,,
where there you can use it for a lot of,,,
different things PHP isn't really used,,,
outside of web development at least on a,,,
large scale and its purpose is to build,,,
Dynamic web pages so there's some,,,
popular platforms that use PHP such as,,,
WordPress um I think PHP is great for,,,
Freelancers because again it's a tool,,,
that allows you to get things done,,,
quickly,,,
and it's Unique from other languages,,,
because you can actually go to a PHP,,,
page in the browser and load the page on,,,
the server and you can write HTML,,,
directly in your PHP files so it's,,,
essentially a template language and you,,,
can't really do that with any other,,,
languages the downside to PHP is that,,,
you you get so much Freedom that it's,,,
really easy to write bad code and I,,,
think that's why PHP does get a bad WAP,,,
sometimes but if you know what you're,,,
doing you can write clean code with PHP,,,
and Frameworks like,,,
laravel address that and pretty much,,,
don't allow you to write bad code or,,,
really bad code um so it's definitely a,,,
a good choice in my,,,
opinion now go or goang is a statically,,,
typed language developed by Google and,,,
it's known for its performance and,,,
efficiency which makes it suitable for,,,
building web services apis and Powerful,,,
applications um it's it's also great for,,,
building things like command line tools,,,
uh it's a fairly new language but it's,,,
growing in popularity it's among the top,,,
10 primary languages for professional,,,
professional developers with a share of,,,
about,,,
7% and it's used to it's used by some,,,
really big companies and um Power some,,,
really huge applications in apis it's,,,
not really something you'd use for like,,,
a personal blog it's more for large,,,
scale applications um one thing about,,,
goang is it has a very vast standard,,,
Library so you can build quite a bit,,,
without reaching for any kind of,,,
framework however there are some great,,,
Frameworks that you can use with go and,,,
I'll talk about those soon um it's also,,,
a very secure language it scales well,,,
making it suitable for large scale,,,
applications and it's used a lot in the,,,
the big business world so C is also a,,,
general purpose language it's a robust,,,
objectoriented langu language developed,,,
by Microsoft it's used for building,,,
desktop applications web apps mobile,,,
apps games and more and it's a very,,,
popular language and used by a lot of,,,
companies it's also used for game,,,
development with unity um it's a great,,,
language to learn and it's very similar,,,
to Java but better in my opinion it's,,,
also used with the Net Framework which,,,
is a software framework developed by,,,
Microsoft that's very very powerful and,,,
can be used with many different types of,,,
projects then you have asp.net which is,,,
a web framework for building web,,,
applications um very similar to,,,
something like Jango or laravel but it's,,,
a great language it has good performance,,,
it's very secure and definitely um,,,
definitely a candidate so Java is,,,
another general purpose objectoriented,,,
language that's actually really similar,,,
to C Java is used for again desktop apps,,,
Android apps backend web development and,,,
more and it's been around for a really,,,
long time and it's most popular in the,,,
Enterprise world it's used by a lot of,,,
big companies one stack that I see a lot,,,
of in big business is Java or C on the,,,
back end and angular on the front end so,,,
I may get some crap for this but I think,,,
Java is one of the best languages to,,,
learn programming in general uh it's,,,
very strict and it forces you to write,,,
clean code in an object-oriented way it,,,
was actually the first language that,,,
I've ever worked with so I may be a,,,
little biased on that um I wouldn't use,,,
it for freelancing or small projects but,,,
if you're looking to get into a big,,,
company it may be worth,,,
learning so Ruby is a dynamic,,,
object-oriented programming language,,,
that can be used for web applications,,,
and apis among other things its most,,,
popular web framework is Ruby on Rails,,,
and it's tough to talk about Ruby,,,
without talking about Ruby on Rails in,,,
the context of web development as far as,,,
the language goes I really like it I,,,
think it's one of the most readable,,,
languages there is um and it's it's,,,
almost like reading English and that was,,,
actually one of the goals of Matts the,,,
the creator of Ruby and it's a pretty,,,
forgiving language as well it's not a,,,
cyntax language and it has its own,,,
unique and expressive syntax it does,,,
draw inspiration from languages like,,,
Pearl small talk and lisp all of which,,,
I've never used to me I think it,,,
actually is is similar to python uh Ruby,,,
has a rich ecosystem of open source,,,
libraries and packages called gems which,,,
can be easily integrated into Ruby on,,,
Rails projects to extend the,,,
functionality so gems ruby gems it's,,,
kind of like npm if you're coming from,,,
the node.js world or pip if you're,,,
coming from Python and you can get,,,
things up and running really really,,,
quickly with Ruby it's great for Rapid,,,
development people like to say that Ruby,,,
is dead sure it's not as common as some,,,
other languages and it has fell a bit in,,,
the past 10 years but there's still a,,,
lot of companies using it now rust is a,,,
is actually a systems programming,,,
language so it's lower level um it can,,,
almost relate to something like C++ but,,,
it also incorporates highlevel language,,,
features so it's pretty unique and you,,,
don't have to worry about things like,,,
memory management like you would with C,,,
or C++ rust isn't typically associated,,,
with web development but it does have,,,
features that can make it a good choice,,,
and certain situations now rust is a,,,
popular choice for compiling to web,,,
assembly enabling the development of,,,
high performance web apps that can run,,,
in the browser and I'm going to talk,,,
more about web assembly later uh it's,,,
also a very safe language it's used by,,,
companies like Dropbox Discord Microsoft,,,
um web development probably isn't the,,,
most common case for us but it's still a,,,
great language to learn I think it will,,,
grow more popular in web development,,,
because it's commonly used with web,,,
assembly um so as web assembly gets more,,,
popular I think rust will as well um,,,
there's also web Frameworks that you can,,,
use that I'll mention in a little bit so,,,
Elixir is new to this guide and it's,,,
been gaining some popularity I've seen,,,
quite a bit about it it's a functional,,,
concurrent general based or general,,,
purpose language and runs on the erlang,,,
virtual machine and it can be used to,,,
build web applications and apis it it's,,,
very F tall an and can be used to create,,,
realtime applications like I said with,,,
goang you probably won't use Elixir for,,,
something like a personal blog or any,,,
small project it's more for large scale,,,
applications so not something I'd,,,
recommend if you're if you're just,,,
getting into web development now these,,,
definitely aren't all the languages you,,,
have to choose from some other options,,,
are Scala Pearl Swift and cotlin,,,
although those are really more on more,,,
for web app mobile apps sorry um I would,,,
suggest looking into a few and seeing,,,
one which ones you like best also look,,,
at what's popular in your area so this,,,
is a chart from jetb brains.com for 2017,,,
to 2023 and it's the percentages for,,,
languages used by web developers and the,,,
percentages for likely to to adopt so,,,
you can see that the most used is,,,
Javascript then python HTML CSS SQL Java,,,
and so on so I wouldn't base everything,,,
on this chart but it's just interesting,,,
to see and you can pause it if you want,,,
I'll also have the link in the,,,
description um to this to this article,,,
so now that we've gone over some server,,,
side languages let's talk about some of,,,
the Frameworks that you can use with,,,
those languages and I'm not going to go,,,
over all of them there's no way I could,,,
do that but I'll list some of the more,,,
popular ones here now most of these,,,
Frameworks fit into either an an an,,,
opinionated or an unopinionated,,,
framework so an opinionated framework is,,,
is one that has a set way of doing,,,
things it's very high level and Abstract,,,
you kind of have to follow the the,,,
structure and follow the rules to use it,,,
however you get a ton of features right,,,
out of the box an,,,
unopinionated framework is you don't,,,
have as much freedom so what I've done,,,
is I've split the the Frameworks that,,,
I'm going to mention up into opinionated,,,
SL highlevel and unopinionated SL,,,
minimal all right we'll go in the same,,,
order as we went with the languages so,,,
node.js I should say JavaScript nodejs,,,
has a bunch of Frameworks there's way,,,
too many to list here so these are some,,,
of the the more popular ones now unlike,,,
the rest of these languages the most,,,
popular framework for node.js is,,,
actually a very min minimal,,,
unopinionated framework and that's,,,
Express so Express is great for building,,,
web applications and apis it has a great,,,
set of features it's well documented,,,
it's very popular you can find tons of,,,
content in tutorials and courses that,,,
use express is a great Community it's,,,
very fast and performant so that's,,,
probably what I would recommend if,,,
you're going with node.js then you have,,,
coo which is another minimal framework,,,
that was actually created by the same,,,
team as Express and it's very similar,,,
there's some more modern features but,,,
it's it's pretty much the same thing you,,,
can build a lot of the same stuff and,,,
same thing with fastify fastify is an,,,
even newer framework that is extremely,,,
fast it's faster than Express and H,,,
again has some more modern features but,,,
again I'd probably say learn Express,,,
just because it's so popular and that's,,,
probably what you'll end up using all,,,
right so those are the the the popular,,,
opinion uh unopinionated or minimal,,,
Frameworks as far as the highlevel,,,
opinionated Frameworks we have Nest or,,,
nestjs which is actually built on top of,,,
Express and it's a typescript first,,,
framework that's very similar to angular,,,
and I know that sounds weird because,,,
angular is a front-end framework but it,,,
actually has a really similar structure,,,
now it's very opinionated and you know,,,
you have to do things a certain way but,,,
it's great for building large scale,,,
applications it's very well documented,,,
I'd say if you're coming from angular,,,
and you're you're learning full stack,,,
and you're getting into node.js you,,,
might want to check nestjs out for your,,,
back end and then Adonis is the last,,,
node.js framework that I'll mention it's,,,
another very opinionated framework,,,
that's very similar to laravel I,,,
actually think that it's it's really,,,
underrated it's an MVC framework that,,,
has scaffolding authentication a,,,
template engine it's it has a lot of the,,,
features that you find with laravel so,,,
if you're coming from PHP laravel to,,,
node.js a Adonis might be something you,,,
want to check out all right so next we,,,
have Python and there's a lot of,,,
Frameworks that you can use with python,,,
but there's two that really stick out,,,
that are really phenomenal Frameworks,,,
and that's D Jango and flask and one of,,,
them is highlevel opinionated and one of,,,
them is is uh minimal and unopinionated,,,
so D Jango is very high level it's it,,,
includes everything that you need to,,,
build a web application it has a,,,
template engine an omm authentication a,,,
CLI uh like I said it's very opinionated,,,
so you have to do things a certain way,,,
but you also get a ton out of the box,,,
including an entire admin area to manage,,,
your content so basically you can create,,,
models for your content like let's say a,,,
Blog and you have a post model you'll,,,
have an admin area just right out of the,,,
box where you can add create read update,,,
and delete posts so really really cool,,,
um it's great for Freelancers as well,,,
because you have an admin area for your,,,
clients and then flask is another great,,,
python framework that's pretty much the,,,
polar opposite of D Jango flask is very,,,
minimal uh it's very similar to express,,,
it's great for building apis you can,,,
structure things how you want it's fast,,,
it's flexible it's a great option so,,,
next we have PHP and the two most,,,
popular Frameworks are laravel and,,,
Symphony and there's others like code,,,
igniter which was actually my first PHP,,,
or I should say my first MVC framework,,,
that I was introduced to and I really,,,
like it it's not used much anymore but I,,,
I I don't know code igniter has a,,,
special place in my heart I guess but,,,
laravel is in my opinion one of the best,,,
Frameworks period it's a highlevel,,,
opinionated framework it includes,,,
everything you need to build a web app,,,
it has database migrations has a really,,,
great om called eloquin and I'll get,,,
into ORS in a little bit built-in,,,
authentication uh with multiple drivers,,,
a CLI a template engine and much more,,,
I'd say it's pretty similar to Python's,,,
Django then you have Symphony which is,,,
another great PHP framework it's a bit,,,
more complex than larl and it's used by,,,
a lot of big companies laravel is,,,
actually built on top of symphony,,,
components because symphony is very,,,
modular I created a small course on,,,
Symphony along time ago but I haven't,,,
used it in years so a lot of it has kind,,,
of slipped my mind um but it might be,,,
something you want to check out now Slim,,,
PHP is another framework that I think is,,,
really underrated because you don't,,,
always need something as lock as laravel,,,
or Symphony sometimes you just need a,,,
simple framework to build an API or a,,,
small application and slim is great for,,,
that it's very similar to both Express,,,
and flask but for PHP so next we have,,,
goang one thing that I realized is with,,,
just about every language you need a web,,,
framework to build anything substantial,,,
with goang you really don't need a,,,
framework you can just use a lot from,,,
the standard Library so it's very,,,
powerful it has everything you need to,,,
build a web application um but there are,,,
some Frameworks so one is called Jin,,,
this is an,,,
includes a router template engine and,,,
more and it's more like laravel or,,,
Django so next we have C and C is a,,,
general purpose language that is used,,,
for all kinds of things web development,,,
mobile development game development and,,,
it's used a lot with the Net Framework,,,
which is a software framework developed,,,
by Microsoft then you have asp.net which,,,
is a web framework for building web,,,
applications so asp.net is probably what,,,
you're going to use if you do go into,,,
web development as a c developer it's,,,
part of the broader Donnet ecosystem and,,,
it provides a a flexible platform for,,,
developing web-based applications you,,,
can also use languages like FP and,,,
Visual Basic with asp.net so asp.net,,,
core is the latest version of asp.net,,,
and it's open source it's crossplatform,,,
it's a bit more lightweight than the,,,
original platform um but yeah so that's,,,
probably what you're going to go with,,,
with c now you also have Blazer which is,,,
a newer framework that actually fits,,,
more into a front-end framework believe,,,
it or not so it's part of asp.net core,,,
and it allows you to build interactive,,,
web uis using C instead of JavaScript so,,,
in many ways it's similar to something,,,
like reactor View and it can also be,,,
used with web assembly which I'll talk,,,
about soon so next we have Java the big,,,
web web framework for Java is spring and,,,
it's used by a lot of big companies it's,,,
a bit more complex than some of the,,,
other Frameworks and it has a lot of,,,
different parts to it so spring MVC is a,,,
web framework that simplifies the,,,
development of web applications and,,,
follows the model view controller design,,,
pattern and it provides features for,,,
building web controllers handling,,,
requests and rendering views there are,,,
some other web Frameworks for Java like,,,
hibernate uh Apache struts and play,,,
which you can also uh the play framework,,,
you can also use with the Scala,,,
programming,,,
language now if you're using Ruby for,,,
web development I'd say there's probably,,,
a 90 99% chance you're going to be using,,,
Ruby on Rails it's a very highlevel,,,
opinionated framework that just includes,,,
a ton of stuff out of the box and it's,,,
great for Rapid development because you,,,
basically have command line tools and,,,
Scaffolding that can pretty much,,,
generate a basic crud application in,,,
seconds and then you can kind of take it,,,
from there so it's great for large scale,,,
applications but you can also use it for,,,
smaller stuff I actually had a uh a,,,
knowledgebase app that I built with Ruby,,,
on Rails that served as documentation,,,
for my computer repair business a long,,,
long time ago uh rails is definitely I'd,,,
say in my top five if not top three,,,
favorite Frameworks and then Sinatra is,,,
another framework that uses Ruby that,,,
takes a more minimalistic approach so if,,,
you don't need something as in-depth as,,,
rails you could check out,,,
Sinatra now rust is often associated,,,
with systems program but it has gained,,,
popularity for web development due to,,,
its focus on safety performance uh,,,
modern programming practices while Russ,,,
doesn't have as many web Frameworks as,,,
some other languages it does offer some,,,
solid options for building web,,,
applications and apis so actic is a high,,,
performance web framework for rust it's,,,
known for Speed and scalability makes it,,,
suitable for real-time applications,,,
microservices uh actic leverages rust,,,
concurrency features and it can be a,,,
good choice to to handle many,,,
connections,,,
simultaneously and then rocket is an,,,
opinionated web framework for rust that,,,
prioritizes developer productivity so it,,,
aims to create kind of a a great outof,,,
thebox experience with strong type,,,
checking expressive syntax and a focus,,,
on,,,
safety now for Elixir you have Phoenix,,,
which is uh a framework that's inspired,,,
by Ruby on Rails it's a high level,,,
opinionated framework includes,,,
everything you need to build a web,,,
application uh it's great for building,,,
large scale applications but you can,,,
also use it for smaller projects and,,,
again it's very similar to Ruby on Rails,,,
and then plug is a minimal and,,,
composable library for building web apps,,,
in Elixir uh it's designed to be,,,
lightweight and,,,
unobtrusive all right so I mean there's,,,
other Frameworks as well but chances are,,,
if you're going with one of these,,,
languages you're probably going to use,,,
one of these Frameworks all right so you,,,
you learn a language you learn a,,,
framework at this point you should,,,
understand HTTP including the request,,,
response cycle methods status codes you,,,
should Al also understand the basics of,,,
rest which is which stands for,,,
representational State transfer and it's,,,
an architectural style for building apis,,,
it's not a standard or protocol it's,,,
just a set of guidelines for building,,,
apis and I have an older but still,,,
relevant crash course on rest apis if,,,
you want to check that out and learn,,,
more about what what it is no matter,,,
which type of developer you are you,,,
should definitely understand rest,,,
because even as a front-end developer,,,
you're going to interact with these apis,,,
and as a backend or full stack developer,,,
you'll be building these apis so,,,
something that you just need to know in,,,
web development now graphql is a newer,,,
alternative to rest and it's a query,,,
language for apis and a runtime for,,,
fulfilling those queries with your,,,
existing data it's a bit more complex,,,
than r rest and I wouldn't say that,,,
graphql is something that you absolutely,,,
need to know but it is helpful um it's a,,,
little bit more powerful because you can,,,
specify the data that you want to get,,,
back from the server where with rest you,,,
get all of the data that's available so,,,
for instance if you have a a rest uh,,,
endpoint that you hit maybe SL API posts,,,
it's going to give you all the fields,,,
for post you know you might get back 10,,,
blog posts it's going to have the title,,,
the body all that stuff and you can't,,,
really say well I just want the title of,,,
the post you can't do that with a rest,,,
API with graphql you can you can,,,
actually send a query that says I want,,,
just the title and the category or,,,
whatever it might be so it's it's more,,,
powerful than uh than a rest API but,,,
again it's not a necessity um as a,,,
backend or full stack Dev you'll you may,,,
be creating graphql apis and you can do,,,
that with many different languages and,,,
Frameworks and as a front andev you may,,,
be interacting with these apis so you'll,,,
learn how to make graphql requests and,,,
parse the data using a client there's,,,
different graphql clients and one,,,
popular one is Apollo okay so if you're,,,
a frontend Dev dealing with graphql,,,
there's a good chance you might be using,,,
the Apollo,,,
client now as a backend or full stack,,,
Dev or even as a freelancer that works,,,
with WordPress you're going to need to,,,
learn about databases and a database is,,,
a collection of data that's stored in a,,,
computer system and the software that we,,,
use to work with that database is called,,,
the database management system or dbms,,,
and there's a few different types of,,,
databases so I'm just I just want to go,,,
over those real quick and talk about,,,
some of the the the database systems,,,
that are in those types so the first,,,
type is the most common and that that's,,,
a relational database and these have,,,
been around forever they're systems that,,,
hold structured data that can be related,,,
to each other and data stored in tables,,,
and rows so you can kind of picture an,,,
Excel spreadsheet just much more,,,
powerful and you can have multiple,,,
tables that are related to each other,,,
for example you can have a table for,,,
your users and then a table for let's,,,
say blog posts and each user can have,,,
multiple blog posts so you can relate,,,
the two tables together by putting a,,,
user ID field in your blog post table,,,
and we use something called SQ l or SQL,,,
uh which stands for structured query,,,
language we use that to interact with,,,
these databases so you can create tables,,,
insert data update delete data and more,,,
aggregate data and usually in your,,,
application you'll use something called,,,
an OM or an object relational mapper to,,,
interact with your database instead of,,,
writing raw SQL queries and we'll talk,,,
more about ORS uh in a few minutes now,,,
as far as relational databases go,,,
postgrads or,,,
postgresql is one of the most popular um,,,
for for all size projects really it's an,,,
object relational database so everything,,,
is looked at as an object with,,,
properties and it's very common with,,,
node.js and python but of course you can,,,
use it with any language as long as,,,
there's a driver that supports it so,,,
you're not really bound to a specific,,,
database system just by the language you,,,
use but some things are just more,,,
popular with others so my SQL or MySQL,,,
is very simil ilar to postgres they work,,,
in a very similar way and my SQL is very,,,
popular in the world of PHP so if you're,,,
learning PHP and you know you're,,,
learning con with content online,,,
tutorials courses chances are a lot of,,,
them are going to be using MySQL and,,,
then mssql or Microsoft SQL is used a,,,
lot with like cop and The NET Framework,,,
because it's part of that whole,,,
Microsoft ecosystem but you can still,,,
use like postgrads with C so you're not,,,
bound to any specific system as long as,,,
there's a driver available for it now,,,
you also have nosql databases these are,,,
non-relational databases which store,,,
data a bit differently they're more I'd,,,
say they're more for huge data sets that,,,
aren't as closely related so you can,,,
still have relationships but you don't,,,
get as many features as you do with,,,
relational databases in that aspect and,,,
what these are typically good for is,,,
performance and scalability they're also,,,
great for things like realtime web app,,,
applications you also have a subset of,,,
nosql databases like document databases,,,
or key value stores so instead of,,,
storing data in tables and rows with,,,
columns you store data in what are,,,
called documents in something called a,,,
collection you can kind of think of a,,,
collection as a table and a document as,,,
a row or a record in in you know a,,,
relational database and documents are,,,
formatted like Json objects so it really,,,
goes well with JavaScript script in fact,,,
mongodb which is the most common um,,,
nosql database is used a lot with nodejs,,,
now some other nosql databases include,,,
redis which is a key value store it's,,,
great for caching and storing session,,,
data it's also very fast then you have,,,
Cassandra which is a wide column store,,,
it's great for large scale applications,,,
neo4j which is actually a graph database,,,
but still considered no SQL it's great,,,
for storing Rel relationships between,,,
data so if you have a social network for,,,
instance you can use neo4j to store the,,,
relationships between users or whatever,,,
um you also have Coach DB Dynamo DB,,,
there's there's tons of of nosql,,,
databases but I would say mongodb is the,,,
most popular by far now Cloud databases,,,
are extremely popular now and it used to,,,
be that you would install the database,,,
on your server and set everything up,,,
yourself but now you can use a cloud,,,
service like a AWS or mongodb Atlas,,,
where your database is hosted separately,,,
so this is great for scaling and,,,
performance you can use a lot of the the,,,
ones we talked about um for instance you,,,
can set up a remote postgres database,,,
through Amazon web services or a mongodb,,,
database through Atlas but there's other,,,
Cloud databases such as Google's,,,
Firebase which is a realtime database,,,
and it includes everything you need from,,,
authentication to file St storage to,,,
hosting and it's an all-in-one solution,,,
for medium and and for small and,,,
mediumsized apps and then superbase is,,,
another uh another one that's similar to,,,
Firebase it's an open- Source,,,
alternative that's built on top of,,,
postgres and it's a great option if you,,,
want to host your own database but you,,,
want the features of something like,,,
Firebase because it also includes,,,
authentication and stuff like that so I,,,
prefer to use databases hosted in the,,,
cloud because it just takes so much work,,,
out of it you don't have to worry about,,,
backups or anything like that you don't,,,
have to worry about getting it set up,,,
you have full support in most cases um,,,
as long as you know you usually have to,,,
be on a paid plan mongodb Atlas does,,,
offer a free tier but if you have a,,,
serious project you're going to want a,,,
paid plan all right so it just it just,,,
lets you focus on your application and,,,
not have to worry about the database,,,
aspect of it and then fauna DB is,,,
another one that's starting to gain a,,,
lot of traction it's a serverless,,,
database that is used a lot in the,,,
JavaScript world and it has a typescript,,,
inspired developer experience with data,,,
stored in documents similar to,,,
mongodb so lastly we have file-based,,,
databases well markdown actually isn't a,,,
database but I'll explain in a minute so,,,
these have little to no setup and,,,
they're great for developing they're,,,
great for testing and for just small,,,
projects even if you want to use it in,,,
production for like a personal blog or,,,
something like like that so SQL light or,,,
SQL light it actually is a SQL database,,,
but it's file based so you don't have to,,,
install anything or anything like that,,,
you just create a file something. DB and,,,
you can just use SQL queries and there's,,,
different there's orms you can use with,,,
with it as well so I think it's great,,,
for of course just development if you,,,
don't want to set up a postgres database,,,
or something like that and you just want,,,
to temporarily use SQL light or if you,,,
just have like a simple blog and you,,,
you're not going to have a ton of data,,,
you just create a post every couple days,,,
sqlite is more than enough for something,,,
like that now markdown files are also,,,
good for um for personal websites for,,,
personal blogs things like that,,,
especially if you're using something,,,
like Gatsby or nextjs there's there's,,,
packages that you can use to work with,,,
markdown files so when you want to,,,
create a new blog post you would simply,,,
create a new markdown file in a specific,,,
folder and you would add the front,,,
matter which is the metadata at the top,,,
and then the post in the body and once,,,
you save that it'll automatically be put,,,
into your you know your your blog's,,,
front end so definitely something to to,,,
look into for smaller projects and then,,,
H2 is another file based database I've,,,
never used it so I I really can't say,,,
much about it um I would stick to SQL,,,
light or markdown for for development,,,
testing as well as small projects if you,,,
don't want to install or set up um,,,
postgres or mongodb or something like,,,
that okay so like I said SQL or SQL is,,,
used to create queries um to insert data,,,
select data all that stuff for,,,
relational databases but typically you,,,
don't write SQL queries raw SQL queries,,,
in your your application code uh it's,,,
more for the command line if you're,,,
using uh like the the MySQL shell or,,,
something like that or if you're using,,,
uh even a guey tool you can usually,,,
write SQL queries within your,,,
application you're usually usually going,,,
to use an OM which stands for object,,,
relational mapping and it's a tool so,,,
you can interact with your database,,,
through object-oriented programming,,,
within your application and it usually,,,
has its own syntax rather like I said,,,
rather than writing SQL queries and it's,,,
great for productivity it makes your,,,
code much neater um it they tend to,,,
prevent things like SQL injection,,,
attacks and a lot of the time you can,,,
easily swap out database systems and,,,
still use the same code so even if you,,,
if you use postgres and you you want to,,,
switch to mySQL you can do that just by,,,
changing a config and then keep the same,,,
code and it still works the same way so,,,
typically how they work is you create a,,,
model of your data in your application,,,
so you might have let's say um let's say,,,
you have a work workout app and you have,,,
a a database table or collection called,,,
workouts in your application you would,,,
create a model for workouts and you,,,
would Define the different fields and,,,
types that the workouts should have and,,,
then what you would do is bring that,,,
workout model into your file and you,,,
you'll be able to do things like,,,
workout. find and then pass in whatever,,,
you you're you know whatever you're,,,
looking for workout with the ID of of a,,,
certain number or whatever it might,,,
might be much better than writing select,,,
all from workouts where whatever um so,,,
it makes things much easier and some ORS,,,
are specific to the language Andor,,,
database so these are just some examples,,,
uh first we have which is an OM,,,
for mongod DB and node.js so if you're,,,
using those two things together node.js,,,
and there's a good chance you're,,,
going to be using SQ eyes is also,,,
an omm for node.js but it supports SQL,,,
datab bases like postres MySQL even even,,,
SQL light and uh and Ms SQL Server as,,,
well and it's very popular and easy to,,,
use it's very well documented um and,,,
then D Jango omm is used for obviously D,,,
Jango websites but you can use it as a,,,
standalone or without using D Jango as,,,
well SQL Alchemy is an orm for python,,,
that supports the same databases that SQ,,,
eyes does and it basically works the,,,
same way except it's for Python and you,,,
can use it with d Jango flask or any,,,
other python,,,
framework and Pongo as I I I don't know,,,
if I said this but most of these are for,,,
relational databases um except for,,,
Mongoose and then you also have P,,,
which is an omm for,,,
mongodb and python so similar to you,,,
know how Mongoose is to node.js then,,,
eloquent is an OM for PHP that's used,,,
with laravel and I really like eloquent,,,
I think it's very eloquent and it's very,,,
easy to use it has a very clean syntax,,,
well documented Doctrine is another or,,,
for PHP that supports SQL databases uh,,,
Dapper is an orm for CP and.net very,,,
popular used by a lot of big companies,,,
Prisma is a typescript omm with an,,,
intuitive data model it has automated,,,
migrations type safety it lets you,,,
declare your T database tables in a more,,,
human readable way and you can use it,,,
with JavaScript typescript rust and I,,,
believe you can use it with,,,
goang so drizzle orm is another,,,
typescript orm that you can use in in,,,
SQL like syntax or qu the queries API,,,
which is a more squiz or mongus like,,,
syntax and then mro or micro RM I'm not,,,
sure how it's pronounced I've never use,,,
this but it's another typescript RM that,,,
supports both mongodb as well as SQL,,,
databases and then nextjs is a query,,,
builder for node.js that supports SQL,,,
databases it's not an omm but it is,,,
similar it's a bit more lowlevel and,,,
it's great for building SQL queries in a,,,
programmatic way so you can imagine how,,,
many of these are when you think of how,,,
many languages and how many databases,,,
there are so there's no way I can go,,,
over all of them but I just wanted to,,,
give you guys a couple examples all,,,
right so another thing you'll need to,,,
learn pretty much no matter what route,,,
you take is is authentication,,,
authentication and authorization so,,,
authentication is the process of,,,
verifying the identity of a user it's a,,,
very important part of web development,,,
as a front-end Dev you need to know how,,,
to consume and use authentication,,,
services and as a backend or full stack,,,
Dev you're most likely going to need to,,,
know how to implement the entire system,,,
and there's a few different ways to do,,,
this these aren't all of them but these,,,
are some very common practices so one we,,,
have cookies and sessions this is a,,,
popular way to authenticate basically,,,
when a user logs in a session is created,,,
on the server and a cookie is created on,,,
the client and the cookie is sent with,,,
each request and then the server can,,,
verify that user based on the session so,,,
you should definitely learn about HTTP,,,
only cookies and secure cookies this,,,
will help you understand how to make,,,
your application more secure also you're,,,
going to be want to be aware of things,,,
like cross-site scripting and cross-site,,,
request forgeries these are attacks can,,,
be used to steal cookies and impersonate,,,
users next we have Json web tokens or,,,
jwt's and these are Json objects that,,,
are signed by the server and they're,,,
stored on the client in most cases and,,,
sent with each request and the server,,,
can verify the user based on that token,,,
and this is commonly used with rest apis,,,
and full stack Java uh full stack,,,
JavaScript applications and it's a good,,,
way to protect your API endpoints so so,,,
that just not just anybody can visit,,,
every,,,
endpoint then we have ooth which is an,,,
open standard for Access delegation and,,,
it's commonly used as a way for users to,,,
Grant websites or applications access to,,,
their information on other websites but,,,
without giving them password so for,,,
example when you see login with your,,,
Google account or login with your,,,
Facebook account that's usually ooth so,,,
that's another way that you can have,,,
users authenticate and you might have a,,,
mix of oaf and cookies and sessions or,,,
something like that now authentication,,,
libraries um you can use you can write,,,
your own middleware for authentication,,,
but there's a bunch of libraries you can,,,
use such as passport or Grant um also,,,
many framework such as larl and D Jango,,,
they have built-in authentication,,,
systems that you can use and extend and,,,
then password hashing that's also,,,
something you're going to need to look,,,
into um there's libraries like bcrypt,,,
that can do this for you you and um you,,,
know it'll it'll encrypt the password,,,
you never want to save plain text,,,
passwords in your database and then you,,,
can use the bcrypt library to compare a,,,
plain text password to the encrypted one,,,
in your database now traditionally we,,,
have front end and backend but as I've,,,
said those lines are really getting,,,
blurred and serverless architecture is,,,
becoming more popular now serverless is,,,
essentially it allows you to run serers,,,
side code without having to manage your,,,
own server so you can use a platform,,,
like netlify a versel that will give you,,,
serverless functions um you could also,,,
use something like AWS Lambda or Azure,,,
functions platforms like Firebase and,,,
superbase also considered serverless um,,,
you can use serverless functions to,,,
handle things like authentication,,,
sending emails protecting data and it,,,
also saves you money because you're not,,,
paying for an an all thetime server a,,,
server that's always running you're only,,,
paying for the time that your code is,,,
running,,,
and hits those functions okay it's event,,,
driven and your code is triggered by,,,
events like HTTP requests file uploads,,,
or database changes so if you have a,,,
small application this is a great option,,,
um serverless architecture is usually,,,
really scare uh scary scalable as well,,,
um it's also part of what we call the,,,
jamstack which is a modern web,,,
development architecture based on client,,,
side JavaScript reusable apis and,,,
pre-built markup okay so it's a a great,,,
option for static websites and small,,,
applications most of the technologies,,,
that are included in the jamstack we've,,,
already talked about so that would be,,,
static site generators like Gatsby and,,,
xjs apis like graph q and rest and then,,,
serverless functions so it's not really,,,
anything new it's just a new way of,,,
doing things so to learn more you can,,,
check out the jamstack website James Qui,,,
also has a great crash course on uh on,,,
this channel about more about what the,,,
jamstack is if you want to check that,,,
out now let's talk about deploying full,,,
stack applications and apis this is a,,,
bit more difficult than deploying a,,,
client side application or or like a,,,
static website because you typically,,,
need a web server like Apache or enginex,,,
and there can be a lot of configuration,,,
that goes into that now how you set that,,,
up depends on the type of hosting,,,
service that you're using uh you can use,,,
something called a platform as a service,,,
or a pass and then you also have,,,
infrastructure as a service or an,,,
IAS um so a pass or a platform as a,,,
service abstracts away the server and,,,
sometimes the database and you can just,,,
deploy your code you usually have a um a,,,
pretty in-depth user interface and you,,,
have access to the server through a,,,
terminal but you don't have to install,,,
and configure like a patchy and all that,,,
stuff and this is obviously easier and,,,
great for people that aren't too,,,
familiar with Linux and running servers,,,
then you have Cloud hosting and,,,
infrastructure as a service and this is,,,
where you have to manually set up and,,,
configure your server um you have full,,,
control over everything that's that's,,,
the nice part about this you can install,,,
and configure Apache you can install a,,,
database whatever you want it's,,,
basically like having your own Linux,,,
machine with root access and again it's,,,
great for people that know what they're,,,
doing but a lot of us don't right I'm I,,,
really am not that great with with,,,
devops I'm not great with setting up,,,
servers so I prefer to use a platform as,,,
a service um but there are some great,,,
infrastructure as a service uh hosting,,,
companies like digital ocean Len Noe um,,,
and then you have like of course AWS and,,,
aure which are the big boys really large,,,
companies tend to use them if they don't,,,
have their own infrastructure um but,,,
we're starting to get into devops,,,
territory here which is a whole another,,,
topic but I just want to mention that,,,
there are different typ YP of hosting,,,
and it depends on what you're building,,,
and your skill level as to what you,,,
should use and I should say that that,,,
cloud hosting like digital ocean and Len,,,
Noe I'd say they're they're semi-managed,,,
because they do have images you can use,,,
to set up an entire environment for you,,,
um you can even set up Docker and and,,,
I'll talk more about Docker in a little,,,
bit um but you can have some,,,
predefined um infrastructure with,,,
digital Ocean or Lode or vulture uh,,,
there's a lot of companies that do that,,,
now for individual developers I suggest,,,
render if it fits your need it's great,,,
for node.js python PHP rails and a bunch,,,
of other stuff it's very easy to use,,,
it's free for personal projects um you,,,
can also deploy databases and static,,,
sites Heroku is another option it's been,,,
around for a while it used to be what I,,,
used in tutorials because they had a,,,
great free tear so people could follow,,,
along however they did get rid of the,,,
free tear so if you're just learning and,,,
testing things out you'll probably want,,,
to go with render because they do have a,,,
pretty generous freet tear and all you,,,
really have to do is deploy to or push,,,
to GitHub and then log into render and,,,
select your repo much like you would,,,
with netlify or versel and and render,,,
does support full stack,,,
applications all right so I briefly,,,
mentioned bung JS but I wanted to have a,,,
dedicated section for it because it's,,,
another one of my favorite new tech,,,
technologies that I really hope takes,,,
off and I have a crash course on it if,,,
you want to go more in depth but it's,,,
essentially a JavaScript runtime like,,,
node.js but it also has a complete,,,
toolkit that includes a front-end,,,
bundler so you can easily build full,,,
stack applications it has a test Runner,,,
it has its own node.js compatible,,,
package manager so you can run bun,,,
install whatever whatever package you,,,
want um it's written in the zig,,,
programming language which is a newer,,,
language that's gaining some traction uh,,,
it's very fast it's similar to C but,,,
what I love about bnjs is that it's an,,,
all-in-one approach and you don't have,,,
to use webpack or parcel or anything,,,
like that it's all just built in um I,,,
think that javascript's biggest problem,,,
is there's just so many different damn,,,
things that you need to combine and use,,,
other languages aren't really like this,,,
if you have any experience with with,,,
other languages they have a very,,,
integrated close nit ecosystem where,,,
JavaScript is just all over the place so,,,
I think that bun really addresses this,,,
and it's still very new and it's not,,,
really ready for production yet at least,,,
I don't think I haven't checked in a in,,,
a little while but I think it will be,,,
soon and I I I'm hoping that it will,,,
gain a lot of,,,
traction all right so up to this point,,,
we've talked about everything that you,,,
need to know plus a lot of optional,,,
things to be a backend or full stack,,,
developer so obviously you need to know,,,
a server side language which one you,,,
choose is really up to you uh if you're,,,
building web apps or apis you'll need to,,,
know a framework it's very rare to,,,
create a substantial application without,,,
a web framework um there are some,,,
exceptions like if you're using a,,,
language like goang or rust but even,,,
then there are Frameworks that you can,,,
use now you'll need to know about,,,
databases this could be a relational or,,,
a a non- relational database you also,,,
need to know about ORS so that you can,,,
create models for your data and interact,,,
with your database and this could be a,,,
standalone or or one that's built into,,,
your framework and then authentication,,,
you should know how to implement um in,,,
your applications this is a very,,,
important part of web development,,,
whether you using sessions JWT ooth or,,,
something else or a,,,
combination and then you should know how,,,
to create rest apis from scratch you,,,
should know how to create endpoints and,,,
handle HTTP requests knowing graph fql,,,
is also a plus but I don't think it's a,,,
it's a it's mandatory um you also need,,,
to know how to make your applications or,,,
apis live on the internet so you need to,,,
know deployment and again this this is,,,
more difficult than client side stuff,,,
but you'll establish a process and it'll,,,
it'll start to become second nature once,,,
you have a a a workflow to deploy,,,
applications so the next batch of,,,
Technologies are things that you may,,,
want to get into but I wouldn't say are,,,
IAL to becoming a developer they're kind,,,
of extra um they may be essential for,,,
certain job positions though so the,,,
first one we'll look at is,,,
containerization and this is a way to,,,
package software into standardized units,,,
for development shipment and deployment,,,
and some people don't understand why,,,
this is valuable so let's say that,,,
you're working on a node.js application,,,
and you have it running on your local,,,
machine everything's working fine then,,,
you deploy it to a server and it doesn't,,,
work or you give it to uh another you,,,
know a coworker another developer and it,,,
doesn't work on their machine and you,,,
have to figure out why so it could be,,,
that the server is running a different,,,
version of node.js or maybe it's running,,,
uh a different operating system and,,,
something got messed up now imagine you,,,
have five people 10 people working on,,,
that project all having different,,,
machines and different operating systems,,,
and environments so that can be a,,,
nightmare and with containerization you,,,
can package your application into a,,,
container that includes everything it,,,
needs to run uh it's kind of like a,,,
virtual machine but it's much more,,,
lightweight and you can then deploy that,,,
container to any server and it will run,,,
the same way so all five or 10 plus team,,,
members can have the same container on,,,
their local machine and it will run the,,,
same way uh it's a great way to ensure,,,
that your application will run,,,
regardless of the environment because it,,,
includes the environment uh everything,,,
down to the operating system so Docker,,,
is the main tool that's used for,,,
containerization it's a platform for,,,
building running and shipping,,,
applications with containers uh it's,,,
very popular and used by a lot of big,,,
companies it's also very well documented,,,
if you plan on working for a large,,,
company as as anything that has to do,,,
with devops then you're going to need to,,,
know Docker and then kubernetes is,,,
another tool that's used for,,,
containerization it's it's an orchestra,,,
uh orchestration system for automating,,,
deployment scaling and management and,,,
it's not a a competitor to Docker it's,,,
actually used with Docker and it allows,,,
you to manage multiple containers across,,,
multiple servers all right and Aid,,,
driven automation is also enhancing the,,,
capability of kubernetes and the,,,
complexity is being kind of abstracted,,,
away more and more and developers will,,,
be able to um focus on application,,,
development and much less on,,,
infrastructure management and there's,,,
some other tools that you can use that,,,
are similar to Docker like vagrant and,,,
lxc but these are more like virtual,,,
machines Docker uses containers which,,,
are are process level virtualization so,,,
they're much more lightweight so next we,,,
have web assembly often abbreviated as,,,
wasm and this is a technology that,,,
allows us to run high performance code,,,
written in languages like C C++ and rust,,,
in web browsers and in simple terms,,,
think of web assembly as a way to bring,,,
fast and efficient software written in,,,
languages other than JavaScript to your,,,
browser and JavaScript has obviously,,,
been the programming language of the,,,
browser and just for the web in general,,,
and is great for many things most things,,,
when it comes to web development however,,,
it's not good for things like uh,,,
computationally intensive tasks so web,,,
assembly is great for that and you can,,,
Port existing code bases to the web so,,,
if you have like a C++ application you,,,
can compile it to web assembly and then,,,
run it in the browser so some things,,,
that web assembly would be good for are,,,
games video editing CAD software things,,,
like that and no web assembly will not,,,
replace JavaScript it's not meant to,,,
it's actually meant to work with,,,
JavaScript so you can use JavaScript to,,,
interact with web assembly and we're,,,
really not to the point where web,,,
assembly is just everywhere but it seems,,,
to to rise every year it seems to gain,,,
more,,,
popularity now next we have mobile,,,
development options and I know this is a,,,
web development guide however there,,,
there is a lot of crossover and you can,,,
use your web development skills to build,,,
mobile applications of course you can,,,
get into native development mobile,,,
development with cotlin or Java for,,,
Android apps as well as Swift or,,,
objective c for iOS apps but you can,,,
also use Frameworks that allow you to,,,
build crossplatform,,,
applications with web or web like,,,
Technologies so I'm going to go over,,,
some of those options now we did already,,,
talk about some of the stuff in the,,,
framework ecosystem section but I'm just,,,
going to quickly go over them again so,,,
the first choice is react native and,,,
obviously we've talked about this a,,,
little bit it's a framework that allows,,,
you to build native mobile applications,,,
with JavaScript and the react framework,,,
and what's great about not only react,,,
native but all of these really are that,,,
you can have a single code base for both,,,
IOS and Android as opposed to where you,,,
would do Native development you'd have,,,
to have two separate code bases and two,,,
separate languages so if you're a react,,,
developer you're probably going to,,,
gravitate toward react native it's it's,,,
very powerful it's used by a lot of big,,,
companies um next we have flutter which,,,
is another popular option and it's a,,,
framework that allows you to build,,,
native mobile apps with doart so doart,,,
we haven't talked about yet it's a it's,,,
a programming language that's similar to,,,
JavaScript um so if you already know,,,
JavaScript Dart is pretty easy to pick,,,
up flutter uses its own rendering engine,,,
written in C++ called skia and I know,,,
that they were working on a new,,,
rendering engine called uh impeller but,,,
I'm not positive if that's been released,,,
yet now flutter does have a slight,,,
performance advantage over react native,,,
because it doesn't use a bridge to,,,
communicate with the native components,,,
like react native does but these are are,,,
two of the most popular options uh of,,,
their kind now you also have native,,,
script,,,
which allows you to access native apis,,,
using JavaScript so you can technically,,,
use any framework you want to build uh,,,
Native mobile apps whether it's react,,,
view spelt angular um or or even just,,,
vanilla JavaScript so like I said it,,,
gives you a set of native apis to work,,,
with it's not as popular as react native,,,
or flutter but it could be a viable,,,
option especially if you want to stick,,,
to Vue or spelt or angular and then you,,,
also have ion IC which has been around,,,
for a while it's a mobile SDK software,,,
development kit that allows you to build,,,
hybrid mobile applications with web,,,
Technologies like HTML CSS and,,,
JavaScript so you can also use the,,,
framework of your choice with ionic now,,,
it's not going to be as fast as react,,,
native or flutter but it it can be a,,,
viable option I believe years ago you,,,
could only use angular but now you can,,,
use anything and it's great for,,,
Progressive web apps which I'm going to,,,
talk about next so Progressive web apps,,,
are web applications that have been,,,
designed to be to to run more like,,,
native mobile applications they're fast,,,
they work offline they can send push,,,
notifications they can even be installed,,,
on the home screen of your mobile device,,,
so it's not a native app it's a web app,,,
but it has it has to pass certain,,,
criteria to be considered a pwa or a,,,
progressive web app so first it has to,,,
be completely responsive no matter what,,,
screen size no matter what type of,,,
device it's being viewed on whether it's,,,
a a a cell phone or a a big screen TV it,,,
also has to be secure and served over,,,
https that should go without saying,,,
these days it has to be able to uh at,,,
least have some basic functionality,,,
offline even if that means just having a,,,
custom offline page it should be,,,
performant and discoverable by search,,,
engines and include a manifest file and,,,
a service worker so the Manifest file is,,,
a Json file that contains information,,,
about the app like the name description,,,
icon the service worker is a Javascript,,,
file that runs in the background and,,,
allows you to cash assets and data for,,,
offline use okay then you can also add,,,
push notifications make it installable,,,
so it's a great way to make your,,,
application more like a native mobile,,,
app than a regular web app and you can,,,
use a framework like ionic or you can,,,
use something like nextjs which has,,,
built-in support support for pwas,,,
there's many different uh Technologies,,,
and different ways to do,,,
it now you can also use a lot of the,,,
same technologies that you use for web,,,
development to create desktop,,,
applications for Windows Mac and Linux,,,
now my suggestion would be electron it,,,
allows you to use JavaScript to build,,,
really fast and Powerful desktop,,,
applications you can use any front-end,,,
framework react view angular whatever,,,
you want to use it works by bundling,,,
chromium which is the uh the the browser,,,
engine that Chrome uses that edge uses,,,
and a bunch of other browsers it bundles,,,
that with node.js into a single runtime,,,
and apps can be packaged from Mac,,,
windows and Linux uh so you have again a,,,
single code base for all three platforms,,,
and there's a ton of really popular,,,
desktop applications that use electron,,,
at least in some way including vs code,,,
which is probably the the desktop app,,,
that we use the most atom slack Discord,,,
and the postman HTP client so these are,,,
all things that I use all the time,,,
another option that I'm seeing more of,,,
is Tori and this is a newer framework,,,
that's similar to electron but it's,,,
actually more lightweight and it's,,,
actually built on Rust so it's very,,,
performant and secure it uses the os's,,,
native web renderer and the size of a,,,
Tori app can be less than 600 kilobytes,,,
and you can use front-end Frameworks of,,,
course there's also binding for python,,,
go C++ and other languages so it's,,,
definitely something that I plan on,,,
getting into this,,,
year so next we have neutralino Js and,,,
this is another option it's a,,,
lightweight and portable framework that,,,
allows you to build crossplatform,,,
desktop apps uh with web Technologies,,,
and it implements a secure websocket,,,
connection for Native operations and it,,,
embeds a static web ser server to serve,,,
the web content within the the desktop,,,
application also it offers a built-in,,,
JavaScript client library for,,,
developers now nwjs is another option,,,
it's similar to electron but not as,,,
popular it works in a similar Way by,,,
bundling chromium with node I do have a,,,
crash course on NW as well as electron,,,
if you're interested um I would say go,,,
with electron if you're going to get,,,
into this kind of thing and then you,,,
have other options for other languages,,,
for instance if you're a python,,,
developer you can look into tkinter to,,,
build desktop applications I do have a,,,
video on that um it's a standard python,,,
interface to the um the TK goey toolkit,,,
shipped with python it's not as popular,,,
as electron but it it can be an option,,,
if you're a python developer Ki excuse,,,
me Ki is another option for Python and,,,
then of course you have native uh you,,,
know other languages where you can use,,,
native tools whether it's Java um WPF,,,
for C Coco for Swift whatever it might,,,
be but that starts to get out of the,,,
range of web development Technologies,,,
all right so I don't often talk about,,,
Aesthetics in this guide it's based on,,,
software but I I do think it's important,,,
to keep up to date with design Trends so,,,
I just want to mention a couple here so,,,
trends for 2024 dark mode is obviously,,,
extremely popular it has been for a few,,,
years I think it's because it's it's,,,
easier on the eyes and it's also more,,,
energ efficient uh and it looks better,,,
in my opinion at least I personally use,,,
doc mode on everything because I get I,,,
actually get floaters in my eyes if I,,,
stare at light screens too long so um,,,
it's actually a health thing for me but,,,
I know a lot of people like it and it,,,
just seems to be everywhere whether it's,,,
just straight up dark mode or you have,,,
some kind of Toggler on your UI that,,,
will toggle dark and light and then we,,,
have ai generated designs so I think,,,
that we're going to see more of this,,,
this year um there's all kinds of tools,,,
that you can use such as mid Journey,,,
Sensei dream Studio you can use these,,,
tools to create unique designs for your,,,
projects now a lot of them do look kind,,,
of fake and and like super futuristic,,,
and sometimes they look a bit weird but,,,
I think it's a cool concept and I think,,,
it's going to be used more and more as,,,
as it improves so glass morphism is a,,,
newer design Trend that's become pretty,,,
popular it's a frosted glass effect that,,,
is used for many things like buttons,,,
cards and modals it's a bit more subtle,,,
than the previous Trend which was uh,,,
neuro new neumorphism I I don't know how,,,
to pronounce it uh I think it looks,,,
really cool and I think that it'll be,,,
around for a while and then Clay,,,
morphism is a web design Trend that is,,,
characterized by the use of soft rounded,,,
shapes and pastel colors and this trend,,,
is inspired by the look and feel of,,,
clation it's a popular choice especially,,,
for younger audiences and then ret rro,,,
futurism is a design Trend that's,,,
inspired by the future and I should say,,,
it is inspired by the future as imagined,,,
in the past so like what we used to,,,
think the future would look like and,,,
it's characterized by bright colors,,,
geometric shapes futuristic typography,,,
uh it's a great option for things like,,,
landing pages and portfolios all right,,,
so I just wanted to throw uh a little,,,
bit of that in there for you guys all,,,
right so next is iot so internet of,,,
things and the metaverse now Internet of,,,
Things refers to the connection of,,,
everyday objects to the internet and to,,,
to one another and it's a very broad,,,
term it's used in many Industries but,,,
iot is expected to have a pretty Major,,,
Impact on web development moving forward,,,
so we can expect to see more iot enabled,,,
websites uh and web,,,
applications and this will be you know,,,
as businesses take advantage of iot to,,,
improve their operations so it's,,,
something that you may want to look into,,,
and then the metaverse is a virtual,,,
world where people can interact with,,,
each other in a virtual environment and,,,
it's a concept that has been around for,,,
a while but it's really starting to gain,,,
traction so it's something that I think,,,
will be a big part of the future of the,,,
web so if this were a Trends video AI,,,
would definitely take the top spot it's,,,
something that's being used in many,,,
Industries and it's only going to become,,,
more popular so much so that a lot of,,,
people are actually terrified uh we,,,
talked about tools like co-pilot and,,,
chat GPT as well as design generation,,,
but there's many Tools in many,,,
categories so chatbots are another thing,,,
that are really becoming popular because,,,
of AI a chatbot is a a computer program,,,
that simulates human conversation,,,
through either voice commands or text,,,
chats or both and they're used for,,,
things like customer service Marketing,,,
sales so you can expect to to be,,,
integrating chatbots into a lot of your,,,
applications and and then open AI has,,,
some amazing apis that you can use to,,,
create your own tools including tools to,,,
create chat Bots uh text to speech,,,
things like that and there's a lot of AI,,,
powered no code tools and I know that,,,
that scares a lot of developers but my,,,
advice is to use those tools to your,,,
advantage to make you a stronger,,,
candidate for a job or just a stronger,,,
freelancer for clients and just because,,,
those tools are available doesn't mean,,,
every joeo is going to be able to use,,,
them or even want to take the time to,,,
use them and I I know it's just kind of,,,
my speculation but my My overall advice,,,
when it comes to AI is to use what is,,,
available to to better yourself as a,,,
developer rather than just saying poor,,,
me it's going to take my job try and use,,,
it to make yourself better um that's my,,,
advice I know some people kind of get,,,
mad at that some people might say I'm,,,
naive but I'd rather be I'd rather have,,,
that mind State than the Doom and Gloom,,,
state that is definitely not going to,,,
find you,,,
success all right so devops or developer,,,
operations is a set of practices that,,,
combine software development and it,,,
operations and it's a it's a pretty,,,
broad term it can mean different things,,,
to different people when you talk about,,,
application deployment and maintenance,,,
that's usually part of devops,,,
containerization with Docker and,,,
kubernetes and your environment that's,,,
all all devop stuff uh cicd stands for,,,
continuous integration and continuous,,,
deployment and this is using tools so,,,
that you can push code to a repository,,,
and it will automatically deploy to your,,,
server and there's tools like Travis CI,,,
Circle CI um terraform is what we call,,,
infrastructure as code or ioc you can,,,
specify the state of your infrastructure,,,
and then automate it um or automate the,,,
process of managing resources and this,,,
goes way beyond my scope of knowledge,,,
this is just from my own research now a,,,
lot of these tasks include positions of,,,
their own so a devops engineer is a,,,
specific role but as a software,,,
developer you may need to kind of peek,,,
into this world a little bit it really,,,
depends on where you work so just,,,
something to take note of now the web is,,,
getting much more interactive and,,,
animation is a big part of that so,,,
there's a lot of libraries that you can,,,
use to create animations so I'm just,,,
going to very quickly go over some of,,,
the the big ones so Gap is a JavaScript,,,
animation Library that's used by a lot,,,
of big companies it's widely used for,,,
creating really complex animations you,,,
have anime anime.js is a lightweight,,,
JavaScript animation library that offers,,,
simple and flexible animations with a,,,
focus on uh readability it supports CSS,,,
properties transforms and more and I do,,,
have a a crash course on anime and then,,,
velocity JS is known for its Speed and,,,
Performance it can be used for animating,,,
CSS SVG and Dom elements it has a very,,,
simple syntax and good,,,
documentation and then react spring is a,,,
physics-based animation library for,,,
react it provides a sample API for,,,
creating interactive animations in react,,,
there's other libraries animation,,,
libraries that you can use for react and,,,
other specific Frameworks as well uh 3js,,,
is a really really cool JavaScript,,,
library for creating 3D graphics and,,,
animations uh it provides a highlevel,,,
API for webg which is a JavaScript API,,,
for rendering interactive 2D and 3D,,,
graphics with any compatible browser so,,,
I've seen some really cool stuff built,,,
with 3js in fact if you go to the,,,
website um you'll see a bunch of really,,,
cool examples that you can look at and,,,
interact with and then typed JS I,,,
figured I'd throw that in there because,,,
it's a it's a cool little library for,,,
creating text space animations so things,,,
like typewriter effects and text,,,
transitions so it's a good choice for,,,
adding Dynamic text content so VR and AR,,,
which is virtual reality and augmented,,,
reality are getting bigger every year,,,
and I think it's only a matter of time,,,
until they're common in the world of web,,,
development because we're going to have,,,
websites that are virtual we're going to,,,
have um websites that have augmented,,,
reality which is basically a mix of,,,
virtual and the real world so if you,,,
want to start to get into that now you,,,
can it's definitely not something you,,,
have to by any means but if you want to,,,
just mess around there's some,,,
technologies like A-frame which is a web,,,
framework for building virtual reality,,,
experiences it's built on top of HTML,,,
and it's very easy to use you can also,,,
use react 360 virro react there's some,,,
other Frameworks as well that allow you,,,
to build virtual reality experiences in,,,
react and then arjs is an efficient and,,,
lightweight JavaScript library for,,,
creating augmented reality experiences,,,
on the web and it enables marker based,,,
AR directly from from the browser and,,,
even libraries like 3js allow developers,,,
to create 3D graphics and animations,,,
that are that are often used in,,,
combination with VR and AR,,,
Frameworks okay so lastly we have web 3,,,
which is a bit tricky there's so many,,,
different things that fall under the web,,,
3 umbrella it's a term that's used to,,,
describe the future of the web there's,,,
also many different opinions on it some,,,
people will say that it's the future of,,,
information and communication and,,,
finance and some say it's a campaign for,,,
marketing nfts honestly I don't like,,,
speaking too much on web 3 just because,,,
it's so early and it's such a a broad,,,
and and kind of uh controversial topic,,,
now the blockchain which is a huge part,,,
of web 3 has proven to be a powerful,,,
technology it's decent it's a,,,
decentralized and secure digital Ledger,,,
technology that records transactions,,,
across a network of computers and it,,,
consists of uh a chain of blocks each,,,
containing a list of transactions and,,,
once a block is added to the chain it,,,
becomes permanent and tamperproof so it,,,
enhances trust and transparency and that,,,
alone is incredibly powerful and I think,,,
will stick around uh I think learning,,,
about the blockchain and ethereum and,,,
smart contracts is a really good idea if,,,
that interests you so solidity is the,,,
language that is used to write what are,,,
called smart contracts uh solidity is a,,,
bit like JavaScript smart contracts are,,,
self executing contracts with the terms,,,
of of the agreement between the buyer,,,
and seller being directly written into,,,
the lines of code and I'm not going to,,,
pretend like I know a ton about it but,,,
being some of the first people to learn,,,
about this stuff I think could be a huge,,,
Advantage for the future so it's kind of,,,
like an investment of your time and of,,,
your your learning all right guys so,,,
that wraps up this year's guide I know,,,
that this was extremely long it's way,,,
longer than I wanted it to be but I,,,
don't want to just go through some,,,
slides and just read the bullet points I,,,
want to elaborate and just kind of let,,,
you know what I know about each part,,,
each section of this guide so hopefully,,,
you learn something from it the time,,,
stamps are in the Des uh in the,,,
description if you want to go back and,,,
look at a certain section uh again I,,,
have the page on my website that has a,,,
guide of my content including YouTube,,,
videos and courses that kind of coincide,,,
with this the topics in this in this,,,
presentation,,,
so thanks so much guys if you watch till,,,
the very end I really really appreciate,,,
that that's awesome uh if you could like,,,
the video I'd appreciate it because this,,,
this is basically my biggest video of,,,
the year every year um so thanks for,,,
watching and I will see you next time",,,
0UvA7zvwsmg,"what's going on guys in this video we're
going to be looking at and experimenting
with HTM X it's a small JavaScript
library that allows us to create Dynamic
front ends without having to write any
JavaScript at all and we can do this by
using special attributes in our HTML
called hyperscript attributes so we can
basically make HTTP requests just by
adding in a specific attribute so if we
look at the homepage here you can see
that there's a button and there's an H
post attribute so what this will do is
it will make a post request to whatever
this endpoint or this route is and
there's also HX get put patch and delete
so as it says here under motivation why
should only get and post methods be
available so traditionally when you
create a form and you submit to a server
you can only do method equals get or
post but with hmx you can use put patch
delete so that right there is very
helpful and then you can also make HTTP
requests using any element not just a
tags and form tags like you can with you
know regular HTML and then you have
methods I'm sorry attributes like HX
swap which will take the response
whatever this responds with and it will
swap this button for whatever that
response includes so you are pretty
dependent on having a backend this isn't
something like Alpine JS where you want
to use it just to have some some little
conditionals and Loops within your HTML
without writing JavaScript Alpine's
great for that and you can actually use
both of these together this is more for
full stack applications rather than you
know small front-end applications
because you're always making a request
to some kind of endpoint now what we're
going to do is use node and Express on
our back end but it could be absolutely
anything and in fact HTM X is getting
really popular with d Jango so that's a
real popular stack it's also used a lot
with goang but you could have anything
as your your back end but like I said
we'll be using node and express now HTM
X is is really small it's only 14
kilobytes so it's very very lightweight
um so if you want to have some Dynamic
functionality and you know you want to
easily make requests and replace certain
parts of your application without having
to make the page reload and you don't
want to use uh you know a frontend
framework like react or uh view then
it's a great option so if we look under
reference you'll be able to see all the
different attributes that are available
so HX get and post those will make get
and post requests and then you also have
your delete and your put in your patch
um HX swap we looked at that now many
times you might not want to just swap or
replace the element that's making making
the requests with the response but you
want to Target somewhere else so that's
where you would use HX Target so you
specify the target element to be swapped
and HX trigger is used to specify the
event so if you want it on a click or a
mouse over any event you can make um
have it make an HTTP request all right
now instead of just kind of going
through and explaining all these what
we're going to do is we're going to
create a couple small projects where
we're using HTM X uh on our front end
and we'll have a simple node.js and
express server on our back end so let's
get into
it all right guys so as I said we're
going to be using nodejs and express as
our back end so we're going to just
spend a couple minutes setting up a very
basic server we want to have a public
directory where we can serve HTML files
and that's where our HTM X attributes
will go okay so if you if you aren't
familiar with no noden Express just kind
of bear with me we're just going to set
this up really quick so you do have to
have nodejs installed um go to
nodejs.org download it install it and
you should have access to the node
command okay and I'm just using my
integrated terminal here so the first
thing I'm going to do is generate a
package.json so we'll say npm innit
Dy and that will create our package.json
file and as far as what I want to
install as dependencies we just want
Express so npm install Express and then
I also want to install as a Dev
dependency so I'm going to use-
uppercase D nodemon just so we don't
have to restart the server it'll
continuously watch our server file all
right and then in the package.json I'm
just going to add a couple things here I
want to be able to use the um es module
syntax the import over the commonjs
require syntax so I'm just going to add
here type and we're going to set that to
module over commonjs and then we'll
create a Dev script that will run our
server file which we haven't created yet
it'll run it with nodemon so let's say
nodemon and then
server.js okay that should be all we
need to do in here now let's create our
server JS
file okay so this is just our the entry
point to our back end and what I'm going
to do is just paste in some a couple
lines of code here um actually we don't
need xss just yet um so basically we're
just bringing an Express we're
initializing it into this app variable
and then we have a couple lines of
middleware so this will make it so the
public folder that we create is static
and we can just serve HTML files from it
and then these two lines here are just
middleware so that we can get data from
um either adjacent API clients or form
bodies and then here we're just starting
the server we're listening on Port 3000
so we should be able to now run npm
runev since we created that script and
you can see it's listening on Port 3000
we haven't created any routes yet so
there's nothing to really to to to hit
or go to but our server is up and
running all right so now let's create a
folder called public and that's where
like I said all of our HT ml files will
go so I'm going to say index HTML we'll
just generate some HTML here for the
title I'll say HTM X crash
course and I'll just put an H1 in here
and for now just say hello all right now
since I made this public folder static I
should be able to go to my local host
3000 and see that index HTML file so
let's say Local Host uh not 8,000 we
want 3,000 and we see
hello okay now to get started using HTM
X there's a couple ways to do it if we
go to docs and then installing so you
can download it locally if you want and
include it in your file structure you
can install it with npm if you're using
front-end tooling or the easy way to do
this which is what we're doing is the
CDN so we just want to grab this script
tag put that in any HTML file where we
want to use it and then in addition to
that I just want to use um uh Tailwind
so let's add that script tag as well so
that's going to be source and
htps
CDN
do Tailwind
css.com okay and then if we look at the
page now the font should change if I
reload so now we know Tailwind is
included all right and I'm just going to
make these smaller so we can see them
both at the same same
time now the first thing that I want to
do is is basically just show you how we
can have a button that will make a
request and get that response and put it
into the browser without writing any
JavaScript just by having a couple
attributes so in the body here I'm just
going to add a couple classes I'm going
to wrap this in text Center and then
we'll just have an H1 and I'm going to
add let's say text these are just
Tailwind classes font Bolt
and let's do my so margin on the Y AIS 5
and I'm just going to say
simple request example okay and this is
the code that will be in the final repo
so that's why I'm kind of setting it up
like this now we're going to have a
button and let's just make it we'll say
BG blue 500 let's do text- white and
padding y will do two and then padding X
we'll do three whoops didn't mean to do
that and let's do
My5 we'll make it rounded
large and that should do it so in the
button text we'll just say fetch users
because that's what we're going to be
fetching okay so if I save that and we
reload now we have this button obviously
this doesn't do anything at the moment
but what I want to do before we we even
interact with our with our own server I
just want to you an example where we
could use a public API like Json
placeholder which just will allows you
to fetch fake users to-dos whatever you
want so on the button here I'm going to
create a get request and I can do that
with HX dget okay and then in here I'm
going to put the URL that I want to make
that request to which is going to be
Jason
placeholder do typy code.com
users and that should give me an array
of of
users um now obviously you're probably
not going to want to put that array
directly in the body but I'm just giving
you an example of making a request and
doing something with it now in addition
to the to the get requests we can do HX
DT trigger and then specify the event
when we want this to happen in this case
we want it to be a click all right so
what I'm going to do is come over here
reload click fetch users and what
happened is it made that request it got
the response which is this Json array
and it put it inside of the button okay
because we didn't specify any Target or
swap or anything like that now the
trigger we don't even need this if it's
if we want to click because that's the
default for a button however if we
wanted something different like let's
say um Mouse over and then if I reload
and I just just Mouse over the button it
makes the request then so you're not
bound to just certain events where you
know to make requests and of course
we're not writing any
JavaScript now we like I said if it's a
click we don't need the trigger so I'm
going to get rid of that and we could
also use HX Swap and what that'll do is
it'll allow us to swap out the button
for uh for the response and again this
is a uh an array right adjacent array
usually what you would get back from
your server is markup so you would
replace it with like an HTML list of
users which I'm going to show you in a
second uh now these swap swap can take
in like outer HTML inner
HTML uh as well as some other selectors
but I'm going to do outer HTML now if I
click the button you'll see the button
goes away and the outer HTML is then
replaced with whatever this responds
with all right so hopefully that makes
sense now I want to move on to actually
having a list of users instead of uh
just an array so we're not going to use
this public API anymore we're going to
use our own so let's replace that with
with just slash users and since there's
no domain name or anything then it's
going to look on our own server so let's
save that if I click it nothing happens
but if we look in the the console here
you'll see it is making a request it's
just a 404 because this doesn't exist
exist so let's create that so now I'm
going to go to my backend to server.js
and I'm just going to put all my routes
in this directly in this file it's a
little bit messy but if you want you can
um create separate route files if you
know how to do that so let's say we're
going to
handle let's say handle get
request uh to fetch users all right so
the way we do that is take our app
variable and we want it to to be a get
request that we're handling so.get and
then slash users and what I'm going to
do is just
uh uh yeah we'll just we'll just do a
just a static array of users for now and
then I'll show you how we can still get
users from Json placeholder but make it
a formatted list rather than sticking an
array in so we want our callback
function here
oops and that's going to take in Quest
and response
objects and for the users we'll just say
users set to that set it to an array and
they're just going to have a
name and an
email uh actually I'm sorry just a name
an ID and a name so let's say ID
one name and then let's just copy that
down a couple
times we'll
say save Bob
Williams change that to two three and
then we'll
do say Shannon Jackson all right so we
have some users that I want to use in
the list that we that we return from
this uh from this route so we're going
to take our response object here which
has a method called
send and then in here we'll put some
back ticks because we want this to be a
template string and then I'm just going
to have in H1 I'm just going to give it
a class of text-
2XL and let's do font D
bold and we'll do
margin uh yeah we'll do
my4 all right and we'll just say
users okay now under that is where I
want to have our
ul and we want to then Loop through the
users and output a list item for each
one so let's use our template literal
syntax here take our users we're going
to map through and say for
each for each user then we're going to
return a list
item and inside that we'll have the
username so let's say user.name now this
will be an array because we're taking an
array and we're map we're using map but
to turn it to a string all we have to do
is add on. jooin and just pass in an
empty set of of single quotes all right
so that should do it let's save that and
now when I come over here and I click
let's reload this click fetch users now
instead of just getting an array in the
browser we get a heading and we get our
users in a in a list and we happen to be
using node and express but you could do
this with anything like I said Django is
pretty popular with HTM X and our front
end of course we have no JavaScript at
all we just added a couple attributes
now the way we have it at the moment we
click the button and it replaces or it
swaps with the response but you probably
want to put that somewhere else rather
than replacing the button and that's
where target comes in or HX D Target in
fact we can get rid of the Swap and now
say Target and you can put certain
keywords in here like I could say this
to mean this particular button or this
element I could do um like next sibling
previous sibling but you can also put
just straight IDs in classes so I'm
going to say ID of users which of course
then I have to create that so let's go
under the button here and let's create a
div with the ID of users oops okay so
what should happen now is this is where
the response should go so let's reload
and click the button and now you you can
see it's put in that div and then
another thing you could do this is well
I'm not going to keep this but just to
show you that it exists we have HX
confirm if you want to do a confirmation
we'll say are you
sure you want to fetch users so if
you're making like a delete request or
something this would be really helpful
and and now you'll see if I click I get
that alert or that that
confirmation but I'm not going to keep
that so let's get rid of that now I know
this is backend stuff but I want to make
it so that we instead of getting just
this static array of users we get it
from Jason placeholder so we'll comment
out these users and since I'm going to
be making a fetch request and using a
sync await I'm just going to add a sync
to this function and then right above
the send we can just make our requests
so we'll say the response is going to go
in this variable we're going to
await and and fetch from
https Jason
placeholder uh placeholder do typy
code.com
users okay then we just want to we'll
say users set that to await and we want
from that response we want the
Json and then here we don't have to
change anything because we have our
users now coming from there we're going
to Loop through and output the names so
let's save that reload and click fetch
users and now you'll see we get I think
it's the latest 10 users from the API
all right now I want to show you the HX
indicator attribute which allows you to
have some kind of loading or some kind
of spinner graphic or whatever you want
while it's waiting for the server so to
do that we'll go back into our HTML file
and let's add another attribute of HX D
indicator and what you'll do is set this
to an element that you want to show when
it's interacting with the server so
let's say an ID of loading and of course
we need to create that so you can put
that wherever you want it to display I'm
going to put it right above users and it
needs to be a span with the class of HTM
x- indicator and then whatever the ID
that you used in my case loading and I
could just have like that if I wanted
but I'm going to use an image a gif so
in public I'm going to create an IMG
folder and I'm just going to bring over
the image which you can get from the
final repository if you want to use it
it's this loader.
GI so this right here and then inside
that span I'm going to have my image tag
and I'm just going to add a class of M
Auto and h10 which will make it smaller
and then the source will be IMG SL
loader GIF and we'll say loading all
right so if I save
that you can see it really
quick but it's I mean obviously it's a
quick server that it's local so what I'm
going to do is just kind of mimic a
slower server so here let's just use set
timeout and just wait two seconds so I'm
just going to wrap this code here we'll
say set
timeout and that takes in a function and
it takes
in um however long you want to wait
let's say 2,000 milliseconds which is 2
seconds and in this function is where
I'm going to put this okay this stuff so
we'll cut that and we'll put it in
here all right and then we're getting
this error because since we're now using
this call back we have to make this a
sync now we'll reload and I'll click the
button and now it's waiting 2 seconds
and you can see it shows the indicator
as it
waits all right and again very very
simple frontend code now there may be
cases where you want to send data with
your request and we can do that with HX
vals so let's say we want to send a
number for a limit that we want to set
on the users maybe we want to set it to
three or five so what we can do is add H
x- vals and we can set this I'm actually
going to use single quotes here because
in this object we need to wrap this in
double quotes like adjacent object so
I'm going to say limit and then set that
to
five all right now I can get this I can
I'm sorry I can get this value by using
this key with request. query. limit or
whatever this is so let's go back to uh
back to our back end and I'll put this
right in the set timeout let's say const
limit and we can get it with request.
query. limit I do want to make this a
number so I'm just going to add a plus
sign here cuz it's obviously it comes in
as a string and I'm just going to say or
10 so if it doesn't ex if this doesn't
exist then we'll make the default 10 and
then with the Json placeholder API you
can add a query string of underscore
limit and set it to what you want so I'm
going to change these quotes to back
ticks this one too let's change that to
a back tick because I'm going to do
question mark after users and then
underscore limit and then I'm going to
set that to whatever that limit is okay
which I set it to what five so now when
I come back over here and reload fetch
users now I get five users if I change
this to let's change it to
three fetch users and now I get three
because I'm sending this data to the
back end through a simple attribute all
right so I think that's all I want to do
with this particular project so I do
want to save this HTML so I'm going to
just copy it and I'm going to create
another folder in public and we'll call
this request. HTML and this will all be
in the the repo in the description but
I'm going to paste that in and save it
and now we can try something else so
let's see I'll just get rid of
everything in the
body all right now
what I'm going to do next is just create
a very simple temperature um converter
where we can pass in a Fahrenheit
temperature and it gives us Celsius back
so basically we want a form um event so
when we submit the form it will go to
the back end it'll do the calculation to
get the temperature and then it'll send
back some markup that will show us you
know whatever is Fahrenheit equals
whatever Celsius so I'm just going to
paste in the HTML the body here um
there's no HTM X it's just the the
interface which is very simple so I just
added a gray body we have a container we
have a card and an H1 and then a form
with a single input which is um
Fahrenheit has the name of Fahrenheit
all right so to make the request we're
going to want to add onto the form this
time not not a button so let's say HX d
trigger and we'll set that to submit
which is actually the default so we
don't we don't really need to add the
trigger here but I'm just going to add
it anyway now I want this to actually be
a post request so instead of HX get I'm
going to do H HX post and let's say
slash convert which will be the route
that we want to hit on our back end and
then where I want to put the response in
the body let's say Target h h HX Target
and I'll set that to an ID of result
okay so that's where we're going to put
it and then let's also do an indicator
so HX
indicator and I'll set that to an ID of
loading
again all right and then of course we
need to have both of these divs so let's
go down here and we'll go right below
the button Let's do an ID of
result um and then I'm going to do a
class of MTC six and text- XL so that
will be the result we're not going to
put anything in here because it'll get
filled dynamically and then let's do our
indicator so we'll have a class of HT
mx- indicator and then let's do an ID of
loading and then again I'm just going to
use my image let's do um margin Auto and
h-10 and image slash loading
or loader.
GI all right so at the moment if I click
convert and 32 I just have that in here
by default but it's not showing anything
but it is making the request so if we
look down here you can see every time I
click it it's making the request we're
just getting a 404 because it doesn't
exist so let's create that endpoint
we'll go in the back end here and let's
say
handle
post request
for uh I guess for
temp
conversion so it's going to be a post
request so we want to do app. poost and
the URL is going to be
convert and let's add request
response now I'm going to do the same
thing with the set timeout just so we
can see the um the image the the loader
so we'll say set timeout let's
[Music]
do have our function and then let's do
two seconds here so 2,000
milliseconds and then in here we're
going to let's say
Fahrenheit Fahrenheit I think that's how
you spell it right yeah so Fahrenheit
and then I'm going to parse this as a
float so let's say parse
float and in here to get the the data
that's in here in this case that 32 we
can do that with request. body Dot and
then whatever the name is which is
Fahrenheit right if we look at the input
it has the name of
Fahrenheit and in order to get data from
the body you do have to have the
middleware that I added earlier so
that'll get the fahrenheit now for the
Celsius let's say
con Celsius and the conversion for that
is going to be the
fahrenheit minus 32 and then that's
going to be multiplied by 5 / by 9 oops
that should be
slash okay so that should give us the
Celsius then what I want to send back so
let's say res.
send and I'm going to send back uh
template string and let's put this in a
par
graph okay and then I'm just going to to
put the
fahrenheit so we'll say Fahrenheit
degrees uh
Fahrenheit is
equal to and then we'll have the Celsius
value Celsius and I'm just going to add
two fixed with two decimal
places and then say
degrees uh
Celsius all right yeah that should do it
so let's save that and then come over
here reload I'm going to keep 32 in
there I click it waits 2 seconds and
then we get 32? fahren is equal to 0? CI
if I change that to let's say
50 and we get 50? is equal to 10?
C all right I guess we don't really need
the the two fixed you can keep it if you
want but I think it looks kind of weird
so we'll get rid of that
all right cool so that's just another
example I and I figured I'd just show
you guys that to show you uh using a
different element we're using a form
with a different trigger and a post
request over a get request now another
thing we can do is polling so this is
where we can make a request to the
server every so often to get updated
data so if we want to set it to every 5
seconds or every 30 seconds or whatever
so let me give you an example of that
now I do want to save this so I'm going
to copy it and inside public I'll create
a new file here I'll just call it uh
temp. or
temperature say temperature. HTML paste
that in save it and then in the index
I'm just going to uh let's see yeah
we'll just get rid of everything in the
body and get rid of that
class okay so I'm going to give you a
very simple example of polling to begin
with and then we'll do like a little
weather app or a mock weather app that
will fetch from the server every 5
Seconds the weather so that it'll it'll
change automatically but first we'll do
just kind of like a simple counter
example so in body let's create let's
just say
text- Center and I'm going to have a
span here
uh I want to make this I want to make a
get request so I'm going to use HX dget
and I'm going to set that to SL pole
okay that's the end point we're going to
hit and then for the trigger this is how
we can make it poll is we can say
trigger and I'm going to set it to
every every 10s so every 10 actually
let's do five make it a little shorter
so every 5 seconds so basically what
will happen is it'll hit this SL Pole
every 5 seconds and then it will replace
whatever that response is into this span
of course we could put it wherever we
want if we want to use a Target or
whatever and I'm just going to say
loading to begin with all right so now
let's go to our server and let's
add let's say
handle get request
for uh polling
example so
app.get and SL
Poole and all I'm going to do here is
I'm going to set I'm going to start off
with just a counter variable I'm going
to put that outside of the route so I'll
say let counter set that to zero and
like I said This Server file is is kind
of messy if you want to split it up into
separate files you can do that and then
I'm going to take that counter in here
and just increment it by
one and then so basically just
simulating you know updated data and
then let's say const data and we'll send
back just a an object with a value of
whatever that counter is and then we can
actually just res. Json I mean normally
you wouldn't put Json right in the
browser but it's just an example so if
we come over here and reload we see
loading
and in 5 seconds it should make another
request so now we see value one I know
that's really small hopefully hopefully
you guys can see that but um Oops why is
there we go so value
three so every time it hits the server
this counter is updating by
one so that's just a very uh simple
example of polling now let's make it a a
little cooler and create like a a mini
weather app so what I'll do is we'll do
the backend
first so let's
say um we'll say
handle handle get requests
for for weather I don't know yeah that's
fine so let's say
app.get and let's call this get
Dash
temperature all right and
then request
response and this is going to be very
simple I'm not going to actually reach
out to a weather API although you could
if you wanted to but I'm just going to
generate a random Celsius temperature so
let's say current actually I'm going to
Define this outside of this so
let
current temperature set that to 20 by
default and then here we'll say current
temperature and we'll add a pend so plus
equals math.
random and we're going to multiply that
by two and
minus1 so that will just be a
random temp
change and then I'm just going to
respond from this route so res. send and
what I'm going to send is that current
temperature value I'm going to add two
fix to add add one decimal place and
then just concatenate on the
Celsius uh let me just grab the degrees
symbol I'm just going to add that onto
the end of it now let's go to our index
HTML and instead of hitting pole we're
going to hit
get temperature and we'll we'll stick to
every 5 seconds and I'm just going to
make this look a little better let's add
a couple
classes I'm just going to paste these
classes in
actually okay and then I'll just add a
heading above the span Let's do an H1
we'll say
text- XL margin bottom four and we'll
say weather
in New York and then I'm going to just
wrap this down here in a paragraph and
let's do
text- 5xl because I want that to be
really big so we'll move that span into
the parag graph all right so let's
reload and now weather in New York it's
loading and in 5
seconds let's see something's going
wrong
here did I spell something wrong oh I
forgot my slash here let's try that so
reload and 5 Seconds there we go so
19.9 Celsius and then in another 5
Seconds it'll check again now it's
20.7 so obviously this isn't the real
weather we're just simulating it uh you
could connect this to a weather API if
you wanted to do that and you'd have it
you know updating in in real time
basically okay so that's polling now
let's create a a cool little Search
widget where we can search for users
through an input through a text field
and we'll have it fire off the requests
every time we we push down a key
all right so let's go into index HTML
I'm just going to grab this here and
we'll put this
into uh I'll call this polling
HTML paste that in save it and then we
can get rid of this stuff
here um I'm just going to keep the class
of BG blue
900 and I might as well just grab the
HTML for this and I'll just paste that
into thex
body save that reload all right so we
just have this this search interface and
let's just go over it real quick so we
just have a container it kind of gave it
a dark dark mode look um then we have
the input which I haven't done any HTM X
attributes yet we just have uh type
name um table so basically what we want
to do is fill this table fill the table
body with the results so you can see the
table body has an ID of search results
so that should be our Target so let's go
to the
input and let's see we'll just add on
under the placeholder here I'm going to
make this a post request so we'll say HX
post and we want it to go to slash
search and then let's add a
trigger so
trigger now for this I'm going to say
trigger on
input changed and then you can also add
a delay since we're doing it as we type
we might want to add a little delay we
can say 500 milliseconds and then add
search all right
so this should make a request every
single time we we type something and
then the target so HX Target so this is
where the the response will go and
that's going to be the ID of search
results which we have below and then
we'll go ahead and do an indicator on
this as well
so I'll set that to let's say
loading and then I'll put the
indicator up here up top so let's go
right under the container and we'll say
span class HTM
X indicator and
ID of
loading and then I'm just going to use
my image so we'll give it a couple
classes
here IMG loader
loading all right so yeah I think that's
really all we need for for the front end
so you can see just how simple this is
if you were to do this with vanilla
JavaScript you'd have to select you know
select the Dom elements and then add the
event listner and then make the requests
using fetch this is very simple so on
the server
side um we're going to go ahead and add
the route for this so let's say handle
post request for user
search so it's a post
request and it's going to be slash
Search and say request
response so as far as the the
users uh I should say contacts it's like
a contacts thing so we'll say for
contact search I'm going to just create
an array of
contacts in fact I'm going to paste it
in just because it's I have quite a few
here and then I'll show you how we can
refactor it to use Json placeholder like
we did with the other one so we have
these contacts I'm going to get the the
text that's passed in here and call it
search term so let's say con search term
we can get that with request. body Dot
and then search CU that's what I called
it that's the name and I'm just going to
make it to
lowercase okay so that'll get the search
term let's check to see if there's not a
search
term so if there's not then what I'm
going to return is just going to be um
let's say
res.
send and I'm just going to return an
empty table row right because I don't
want anything to show up if there's no
search term otherwise when we clear it
it'll show all the users all the
contacts then after that let's perform a
basic filter or basic search so we'll
say search results and I'm going to set
that to the contacts array and then
we're going to use the filter method so
here we'll say for each
contact let's say con name and we can
get that with con contact. name and I'm
going to make it to
lowercase and then I'll do the same with
email because we want to be able to
search the email as
well then what we can do is say return
and just in parenthesis here I'm going
to say where the name includes the
search
term okay
or let say or the email
includes the search
te",,
",,
rm uh yeah that should do,,,
it um now I I'm going to simulate a,,,
delay like I've been doing with set time,,,
out so under the search results let's,,,
say set,,,
timeout you don't have to do this uh I,,,
just I like how it looks with the loader,,,
but you don't have to do,,,
this um let's do we'll do 1 second so,,,
1,000 now in the set,,
timeout I'm going to create another,,,
variable here called search results our,,,
search result,,,
HTML and we're going to set that to our,,,
search results which is an array we're,,,
going to map through or Loop through,,,
that with map and say for each,,,
contact then let's return in backtick a,,,
table,,,
row so we have our table row and then,,,
two columns so we're going to have a,,,
TD uh TD and inside that uh I want to,,,
add a little bit of space inside of the,,,
column so I'm also going to have a div,,,
in here with,,,
my4 and padding two and then inside that,,,
is where we're going to put the contact.,,,
name copy that down and then we want the,,,
contact email so for each contact it,,,
should show the name here and the email,,,
here all right and since that's an array,,,
we just want to add onto that so onto,,,
this map I'm going to say do join turn,,,
that to a,,,
string and then finally we want to send,,,
so under that let's say res. send and we,,,
can send our search result,,,
HTML all right let's try it out so if we,,,
look at our users we have like John and,,,
Jane Doe so if I put a J in,,,
here okay so something's going,,,
wrong let's see uh request body search,,,
lowercase is not a function oh this,,,
should be an uppercase,,,
C okay so I'll type J we see our spinner,,,
and there we go now the spacing isn't,,,
showing for some reason and that's,,,
because this should not be class name,,,
we're not in,,,
react and yeah that should do it so,,,
J yeah if I put an O after it see it's,,,
going to make the request again and it,,,
comes back with just John do all right,,,
now they all have example.com in the,,,
email so if I do like ex then we should,,,
get all of,,,
them so it's a nice little you know real,,,
time search now again I know that this,,,
is going to be more backend but I want,,,
to make it so we're searching the users,,,
of the Json placeholder API so I'm going,,,
to create a separate route for that so,,,
I'll copy all this because it's going to,,,
be similar but I want to have both,,,
routes so I'll paste that in and then,,,
just change it to handle post requests,,,
for contact search from uh Jason,,,
placeholder so I'm going to change the,,,
the route here to search SL API,,,
now we want the search term right and,,,
then we want to check to see if there's,,,
no search term and then above where,,,
we're getting the results and filtering,,,
them we want to make the request and we,,,
could actually just copy what what we,,,
did up here so just get the response get,,,
the,,,
users so now just put that here except,,,
I'm going to change users we'll call it,,,
contacts because that's what we C called,,,
it down here all right so let's save,,,
that and then,,,
let's go into our front end and instead,,,
of SL search it's going to be SL search,,,
API so now if I reload that and I put an,,,
L in,,,
here uh let's see what's going on here,,,
did I,,,
not oh limit is not defined so we want,,,
to just take that out this right,,,
here all right that should work see,,,
L yep so now it's getting all the,,,
anything that contains L let's pass in E,,,
okay that NS it down a that NS it down,,,
to just,,,
lean all,,,
right so I do have some other projects,,,
um I think maybe we can do one more so,,,
let's do some inline validation so we'll,,,
have a form where we want to validate,,,
and uh we'll validate the email address,,,
to make sure it's formatted correctly,,,
and we show the message directly under,,,
that input so let's go to index HTML and,,,
I'm just going to,,,
copy everything from that file let's,,,
create a new file here we'll call this,,,
one search.,,,
HTML paste all that in save it all right,,,
so now we can get rid of everything in,,,
the,,,
body okay get rid of the body class now,,,
again I'm just going to grab the HTML,,,
for this and we'll go ahead and paste,,,
that in,,,
here see what that looks like all right,,,
so just basic form and what I want to do,,,
is have it so as we're typing it,,,
validates the email or not as we're,,,
typing but as we click outside of it or,,,
into another field it should say that,,,
email or please enter a valid email or,,,
that email address is valid okay,,,
so what you would normally do is have,,,
you'd have like a a HX post on the form,,,
for the submission but I'm not really,,,
concerned with the submission I want to,,,
make a separate request to validate the,,,
email address um now we're doing that on,,,
the back end and normally what you would,,,
probably do is check to see if that,,,
email exists in a database and then you,,,
know have have it say that email already,,,
exists or whatever but we don't have a,,,
database so we're just going to do some,,,
just a basic validation of an email so,,,
let's add onto the input here so this,,,
input with the name of email I'm going,,,
to add,,,
HX,,,
dpost and set that to slash contact,,,
slail because you might have the form,,,
actually submit to SLC Conta this is,,,
separate this is just for,,,
validation um now as far as you know,,,
where I want to put this let's go to the,,,
div,,,
um yeah let's go to above the label this,,,
div right here and let's add onto,,,
this HX D Target and let's set that to,,,
this so this element and then I want to,,,
swap so HX D Swap and we'll set that to,,,
Outer,,,
HTML I think that should do it so now if,,,
we just check it out make sure that the,,,
request is being sent right if I reload,,,
this click in here I type something and,,,
then I click outside of it then it's,,,
making that request okay and obviously,,,
we haven't created it yet we haven't,,,
created the route so let's do that we'll,,,
go to our back end,,,
here and let's,,,
add let's say handle,,,
uh handle post,,,
request for email,,,
validation so app.,,,
poost and it's going to be slash Conta,,,
slil so first thing I'm going to do is,,,
get the submitted email so we'll call,,,
this,,,
submitted email and we'll set that to,,,
request. body. mail okay so that'll give,,,
us whatever is typed,,,
in then I want a regular expression to,,,
to match against to make sure the email,,,
is valid so I'm just going to paste that,,,
in definitely not typing out that,,,
regular expression but it's just a,,,
simple expression that'll match a a you,,,
know an email address then we'll have,,,
some messages that we want to send if,,,
it's valid or not so let's say const is,,,
valid,,,
and I'm actually going to set that to an,,,
object that has both a message and a,,,
class because I want it to be red if,,,
it's an error and green if it's not so,,,
let's say,,,
message and we'll say that email is,,,
valid and then we'll add a,,,
class of,,,
text- green,,,
d700 and then for,,,
the if it's not valid then let's call,,,
this is,,,
invalid and the message will,,,
say let's say please enter a,,,
valid email or email address and we'll,,,
change the color to text red,,,
700 all right so we have our messages,,,
now we want to do the test so let's say,,,
if,,,
so if not,,,
email um what did I call that email re,,,
reg X so reg X and then we can test that,,,
so we can use the do test method and,,,
pass in submitted email because that's,,,
what we want to test it against so if,,,
that's true then let's,,,
return,,,
res.,,,
send and then some back ticks now,,,
remember we're rep replacing that whole,,,
div right because this div right here is,,,
what I'm replacing and that's going to,,,
include everything in it so let's grab,,,
that right so that ends right here it,,,
includes the label and it includes the,,,
input so I'm going to paste that in here,,,
and then what do we want to change if,,,
it's valid we're going to first of all,,,
add the value because we want the value,,,
to stay in the input so on the input,,,
let's do value and we're going to set,,,
that to the submitted,,,
email so let's say submitted email and,,,
then,,,
underneath let's see we're going to go,,,
underneath the input and that's where,,,
we'll have the message so let's create a,,,
div and I want that the class cuz,,,
remember it's a it's a dynamic class,,,
it'll either be red or green and we can,,,
get that by let's,,,
say uh,,,
is so if it's not so this is if it's not,,,
valid so we want is,,,
invalid. class and then inside here is,,,
where we'll have the is,,,
invalid.,,,
message right because we're saying if it,,,
if it's not this if it doesn't match so,,,
then in the else,,,
let's say else so if it does match we're,,,
going to do something very similar so,,,
I'll just grab this whole,,,
thing and paste that in and we're going,,,
to keep the value there and then just,,,
change this to is valid class and then,,,
is valid,,,
message all right and that should do it,,,
so now I'll go ahead and reload and I'm,,,
going to just type in test and if if I,,,
click outside of it we get please enter,,,
a valid email address if I do test at,,,
test.com and I click outside of it we,,,
get that email is valid okay so it's,,,
just it's just inserting this block of,,,
code inside of this the div right where,,,
we targeted it and it's either going to,,,
be valid or not now again this is we're,,,
doing this on the back end this would be,,,
common if you were checking to see if an,,,
email existed or not in a database but,,,
like I said we don't have a database I,,,
mean I guess we could have just mocked,,,
it but this is fine as well it just the,,,
point is to show you how HTM X works,,,
right so again no JavaScript at all here,,,
and we're dynamically replacing parts of,,,
our page without having to reload it,,,
that's the whole point of this so again,,,
you're very dependent on a back end I,,,
know we wrote quite a bit of of serers,,,
side JavaScript here but we didn't write,,,
any at at all in any of these HTML files,,,
on the front end all right so um I think,,,
that that's where I'm going to stop I do,,,
have a couple other small projects I'm,,,
going to include those in the repository,,,
I think I have one or two other ones one,,,
is like a mini profile that you can,,,
click to update so you click it and then,,,
it's replaced with a form and then you,,,
can you know save your details um and,,,
obviously in real life you'd have that,,,
connected to a database but hopefully,,,
this just gives you some ins it,,,
onto some some of the reasons why you,,,
would use HTM X um and again it's really,,,
popular with LA not laravel uh Jango,,,
although you could use it with laravel,,,
of course or or anything at all um but,,,
that's it guys I hope you enjoyed this,,,
and learned something from it and I will,,,
see you in the next video",,,
2vPVdZWhuM8,"[Music]
hey what's going on guys so I know the
title are you too dumb to code is a
little click baity for my taste but it's
the topic of the video and I posted a
long tweet about this yesterday and it
got some great responses so I figured
I'd make a video on it so from what I've
seen over the years having the feeling
that you're too dumb or not good enough
to code is something that a lot of a lot
of us feel at some point throughout our
learning process in
sometimes throughout our entire career
and I've been doing this for over 15
years and I would say that at least once
a week sometimes more I run into an
issue or some kind of bug and I think to
myself maybe I'm too stupid to be doing
this and definitely too dumb to be
teaching this for that matter and I'm
going to talk a little bit about why I
think it this is so prevalent in
software development and then I'll share
kind of my own experience with this so
what I'm really talking about is
impostor syndrome and if you don't know
what that is it's when you feel like you
don't belong in a certain field or
profession sometimes despite any
evidence of your competence and your
achievements and it's a common
experience especially in fields like
software development where the the rapid
pace of change and the constant need to
learn and adapt can be really daunting
and and not just software development
but any any kind of Technology field
because technology just grows so fast
and I think that that's why many of us
feel dumb or stupid at times uh if you
think of a field or profession like say
being a hairdresser and I don't mean to
pick on hairdressers it's just my wife
is a hairdresser so I'm I'm using that
as an example because I've seen her do
this profession for 18 years but I think
that this is true for most Blue Collar
jobs you you have to learn the trade
right and that can be very difficult you
go through school you learn to adapt you
find your groove but once you do once
you learn that fundamental
knowledge the stuff that you have to
learn from that point on is very very
minimal relative to software development
and the main reason being is there's
just so much to it there's so much to
technology and it's always changing and
I don't know for sure but I don't think
that there's many hairdressers that have
an impostor syndrome and that's just one
example of course now with tech you
again you you have to constantly be
learning it's impossible to know even CL
close to everything even if you're
talking about a single programming
language there's always more to learn
which means that there's a bunch of
stuff that you're not going to know and
that can sometimes cause you to to
question yourself so I think that that's
the first reason why we may feel this
way it's just an abundance of
information the second is because I
think that a lot of us including myself
pay attention to other developers and it
seems like everyone else knows more than
you do and I know not everyone feels
this way but a lot do uh however a lot
of the time the truth is that many of
those people that you're looking at that
you feel know a lot more than you do
they feel the same way you do it's just
you don't see their struggles and their
screw-ups you know you don't see them
going to the documentation a 100 times
to look up the same stupid block of code
or spending hours troubleshooting a
seemingly simple uh issue the reality is
coding involves uh a lot of trial and
error searching for Solutions on online
these days a lot of AI and chat GPT so
every developer regardless of their
experience level has been through these
challenges and you can't really go by
what you see on the surface and of
course everyone has been doing this for
different different amounts of time now
I'm not saying that everyone has
imposter syndrome in fact I've met quite
a few devs that are on the complete
opposite end of the spectrum that think
they're smarter than everyone else and
they can do no wrong I think we've all
met people like that and it's not just
developers as for me personally a lot of
people think that because I teach and I
create courses or because I've been
doing this for so long that it comes
easy to me and that's the furthest thing
from the truth you know when I was in
high school uh a was a really good grade
for me so learning just doesn't come
easy to me in fact I think that what
makes me a really good teacher and why
I've been successful in this area is
because I understand how to explain
things in a way for people like me that
don't find it very easy to wrap their
head around certain Concepts you know I
think a lot of great natural-born
programmers aren't always the best
teachers because they can't relate to
the newbies you know they can't they
can't understand how to not understand
if that makes sense so with that said
you can imagine working in this field
that I've questioned myself many times
you know and it was bad in the beginning
and as time went on it got better but I
still think these thoughts pretty often
but the main difference between thinking
them now and back then is that now I I
have the thought and I let it pass you
know I don't dwell on it I don't let it
affect me emotionally or drive me in any
decision making it's just there and then
it's gone and that's really the best
advice that I can give you guys is to is
to not let these thoughts control you
and to also realize that many people
around you feel the same exact way they
just don't show it just like you don't
walk around showing how much you're
struggling you know although these days
it is more accept able to say that
you're struggling which is good I mean
we shouldn't go around whining all day
but I think that the fact that we're
able to even talk about imposture
syndrome is a good thing because at one
point nobody talked about this stuff I
think that it lets people know that
they're not alone especially beginners
and that's really the reason for me
making this video and and posting tweets
like that you know and I had a bunch of
people thank me because when they see
someone that has you know built a pretty
big following in this Niche and has
experience and and you know uh when they
see people like that having the same
issues it gives them hope and that's
something that I love doing now to to
genuinely answer the question can
someone be too dumb to code in my
opinion I'd say that it's not that
they're too dumb it's that they aren't
motivated enough to learn you know I
have family members that that watch my
videos and say they could never do that
I could never understand this but they
don't want to either it's not something
they're interested in you know they're
not driven toward technology so it's not
that they're not smart enough it's it's
just it's not for them you know and if
you're truly interested in being a
developer and you're willing to do the
work there's no question in my mind that
you can get there and it may take longer
than the average person but you can get
there and you're you're free to disagree
I'm sure many of you will um this is
just my own point of view not just from
being a developer but from being a
teacher and watching people learn and
grow but that's it guys keep pushing you
know you're going to hit roadblocks but
you'll always find a way around them so
that's it thanks for watching and I'll
see you next time",,
1_gLbLPx2T8,"hey what's going on guys so if you want
to become a web developer these days it
can be very overwhelming for for many
different reasons including the amount
of Technologies and tools available the
rapidly evolving landscape especially
with all the AI advancements and just
the vast amount of information to absorb
and in the past when we classify web
development our web developer positions
we really divide them into three
categories and that's front end back end
and full stack but the truth is that
there's so much more to that there's a
lot of sub categories and I'd say the
lines between the front end and back end
are really really starting to blur
especially with Technologies like
server-side Frameworks or server-side
rendering Frameworks serverless
functions and again with AI doing more
and more the general work I think that
now is a better time than ever to really
establish yourself in a specific area so
with that said what I want to do in this
video is just look at a an in-depth list
of more targeted paths that you can take
and different roles that are available
under the wide range of web development
so front-end back-end full stack they're
all meshed into these categories but I
didn't use those umbrella terms to
describe any of these categories so this
will probably be quite a long video
because I do want to really dig in and
look at the skills and tools that you'll
need if you do decide to really Niche
down and take one of these paths now
before we get started I just want to say
that I've met a lot of people through
the years doing this and it seems like a
lot of the people that have really made
it and have become really successful are
ones that focus on a specific area and
become an expert in that area so just
keep that in mind because I know a lot
of people try to learn everything and
master everything and it's just
impossible so it's better to really find
something that you're into that you
really love and stick to that area and
focus on that set of Technologies those
tools and so on all right so let's take
a look at the list
[Music]
all right guys so this may be a bit of a
lengthy video because there's 15
different roles and paths that I want to
go over and I'll talk about what each
role entails including skills and
Technologies and feel free just to kind
of let this play in the car or in the
background while you clean or cook the
slides are just some bullet points for
each role or position they're not really
things you have to look at
so the first area is not even full-blown
web development it's more in the area of
web design and that's a UI ux designer
which stands for user interface and user
experience so when you go to or you
build a website or an application there
are stories to create for users to
follow and this is where UI ux designers
come into play they focus on creating
the look The feel and functionality of
the user interface and they ensure that
it's visually appealing and user
friendly and I think that this gets
overlooked a lot when it comes to talks
about web development I mean great you
know react or you know view but someone
has to put together the story and the
flow and the the design aspects of that
application and it's an incredibly
important position so it and it's really
just the start of everything so if you
feel like you have more of an eye for
design more than hardcore programming
and logic then this might be a route to
take and you'll need to have a good eye
for design and understand design
principles like typography white space
visual hierarchy your main software in
this case won't be an IDE or a text
editor like the rest of these roles
it'll be some kind of design tool like
figma Envision or something like that so
you'll also create wireframes to plan
out the layout and the structure of web
pages or app screens and develop
interactive prototypes to test and
refine the user experience so this last
one here is just my opinion but even if
you're going to be a UI ux designer I
think you should still have some basic
understanding of HTML and CSS not that
you have to take any layout and be able
to take any layout and create a web page
from it but just having that basic
knowledge I think that it can help
bridge the gap between design and
development and lead to smoother
collaboration with Developers and a more
cohesive final product but that's just
my opinion
so next we have a single page app or a
spa developer and this is essentially a
front-end developer and this is where we
specialize in creating single page
applications which are web apps that
load once from the server and then
dynamically update the content without
requiring the page to reload and the
Technologies used to do this are
front-end JavaScript Frameworks like
react angular views felt so a big part
of your job is mastering one of these
Frameworks and its ecosystem and
obviously HTML and CSS also play a big
part in this as well
so you'll Implement client-side routing
to manage your views your components
State Management is extremely important
and is probably the toughest part of
building a single page application at
least in my opinion so you'll be using
tools like Redux or view X to manage
your application State and you'll also
need to know how to interact with apis
even though you won't be creating you
know rest apis or graphql apis you'll
still need to know how to interact with
them so you'll need to know HTTP methods
and Status codes headers and more you'll
be using the fetch API or something like
axios pretty often so that's a front-end
developer or a single page application
developer next we have server side
developers which is basically what we
know as a full stack developer and they
specialize in creating web applications
that that generate and render content on
the server before delivering it to the
client's browser and there's a few ways
to do this and different combinations of
Technologies so you could use something
like PHP with laravel with blade
templating or you could take advantage
of the newer SSR Frameworks Like nexjs
Remix nuxjs and have some code on the
client and some on the server so the
javascript-based SSR Frameworks are
really popular right now but other
languages have had a lot of the same
capabilities that those give us for
years now so you can be a server-side
web developer and specialize in
something like python or PHP golang
c-sharp or just about anything else so
you'll pick a server-side technology or
language
along with a framework you could also go
the more modern SSR route databases and
orms play an important part so postgres
myc equal mongodb things like that as
well as orms to connect and interact
with those database systems whether
that's sqlize or mongoose or something
like Prisma and then if you go the
traditional fully server-side app and
you don't want to work with front-end
JavaScript Frameworks then you'll
probably be looking at template engines
like ejs pug blade twig there's tons and
tons of them different languages and
different Frameworks have or use
different template engines
and then authentication and
authorization are also extremely
important so you learn about sessions
cookies Json web tokens learn to use
oauth to use logins from third-party
platforms like Google GitHub Facebook
I'd say this role is probably the has
the widest range of Technologies on this
list there's really so many so many
different types of
server server-side Developers
now the next one is API and
microservices developer and it's a
specific type of backend developer that
specializes in designing developing and
maintaining microservice architectures
and apis so they basically create small
independent services that communicate
through apis enabling the development of
scalable and modular applications and
this is similar to what a back-end web
developer would do except they only
focus on the heavy Logic the data rather
than rendering views they don't worry
about templates and HTML and all that
their end result is going to be just a
Json format or some other data format
again you'll be working with a
server-side language and that could be
node.js python kotlin c-sharp whatever
it might be and you'll need to
understand the principles and patterns
of microservices including service
Discovery load balancing and fault
tolerance you'll Implement API gateways
for routing and load balancing requests
to microservices and you'll be creating
secure apis and implementing
authentication and authorization so if
you really like the kind of behind the
scenes logic and never really enjoyed
the UI creation then this may be a good
path to take
so next up we have the devops engineer
and this is the person that focuses on
the deployment and operations of the
application so they're the ones that are
responsible for the infrastructure such
as the servers databases and other
services they're also the ones that are
responsible for the whole deployment
process such as continuous integration
continuous deployment and you'll get
really familiar with Cloud providers as
a devops engineer so AWS Azure even even
companies like digitalocean maybe even
Firebase Super Bass there's so many
different platforms out there
infrastructure is a big part of devops
so you'll learn infrastructure as code
with platforms like terraform
serverless functions as well as CI CD
with tools like Circle CI GitHub actions
Jenkins you'll also Implement things
like monitoring logging and alerting
using various software there so overall
these are the folks that make sure
everything runs like a well-oiled
machine behind the scenes for managing
servers and databases to deploying
applications seamlessly that's the role
of devops and again their toolkit
includes Cloud providers container
Technologies which I didn't mention so
like Docker I would Docker with
kubernetes these are some common tools
that you'll use in devops
so next we have mobile developers and
mobile devs specialize in creating
applications for mobile devices such as
smartphones and tablets they're
responsible for developing apps that run
on iOS Android or both platforms and
mobile development is uh obviously a
rapidly growing field and it offers
various career opportunities and there's
a couple couple different types of
mobile developers there's native mobile
developers which are the ones that
create apps for a specific platform such
as iOS or Android and then you also have
cross-platform mobile developers which
are the ones that create apps that work
on multiple platforms so IOS and Android
and in many cases they use a framework
like react native or flutter to create
those cross-platform apps so if you're a
web developer and you want to get into
Mobile development you can actually use
your existing skills to create mobile
apps using Frameworks like react native
if you do want to strictly do Native iOS
then you're going to learn Swift or
objective c and if you want to stick
with Android that would be kotlin or
Java for cross-platform and more web dev
friendly you know you have react native
flutter and you have some other ones as
well so and you'll probably be creating
apis along with your mobile apps using
whatever language you prefer
so next we have freelance web developer
and I wanted to put this in its own
category because it's a very different
type of role than working for a company
you can be a freelancer with any of the
one any of the previous roles that we've
talked about but in the world of
freelancing it's about finding tools
that allow you to build websites and
applications very quickly and
efficiently you also need to be able to
communicate with clients and manage
projects so if you're a solo freelancer
then you you need to be everything the
UI ux person front-end developer
back-end devops and everything else
however you usually work on smaller
scale projects and don't need a lot of
the same tools that you would in the
industry for instance most Freelancers
don't use something like Docker at least
in my in my own experience I can't speak
for everybody
so content Management systems are huge
and freelancing because they allow you
to get projects out quick with a lot of
functionality including having your
clients be able to log into an admin
area and add their own content so
WordPress is huge in the freelance world
but you also have newer headless content
Management Systems like strappy and
sanity.io that are also gaining a lot of
traction with Freelancers and smaller
agencies and then static site generators
like Gatsby and Astro are also gaining
popularity because there are other tools
that allow you to build very high
performance websites in a very short
amount of time and when I say static I
don't mean there's no Dynamic
functionality you can still work with
apis and headless content Management
systems and things like that even though
it's a static site generator you just
don't have a server so website Site
Builders are another tool that some
Freelancers take advantage of because
again they get things done quickly these
are usually the more business oriented
Freelancers that build more I'd say
simple brochure like websites and not
really complex applications they're more
concerned with getting the you know
getting the client customers rather than
creating crazy you know complex
Technologies
so uh what else you need good
communication skills with clients I know
a lot of developers have social issues
including myself I struggled and still
struggle with social anxiety however if
you want something bad enough and you're
passionate enough you can find those
skills inside of you all right you still
you need to know how to Market yourself
as well so next we have an e-commerce
developer obviously they specialize in
building e-commerce sites or online
shopping platforms they deal with
payment gateways customer management
systems they play a crucial role in
enabling businesses to sell products or
services online and custom e-commerce
websites can be pretty daunting
especially because you're dealing with
money and transactions and if you if you
do take on custom e-commerce projects
just make sure you know what you're
doing I know people that specialize in
creating custom platforms for businesses
and they can make up to five six figures
just for from a single project and you
could use existing platforms like
woocommerce and Shopify obviously you
won't make as much money per project but
it's a lot less of a headache than
creating them from scratch
so you'll need to learn like I said
payment gateways like stripe and PayPal
user accounts and authentication are
obviously really important just the
overall flow of an e-commerce site from
product pages to inventory checkout
shopping cart flows
refunds customer management and the list
just goes on and on so there's a ton of
logistics that you just don't have with
other types of projects so it's a good
area to really specialize in and like I
said you could also work with existing
platforms like Shopify especially if
you're freelancing
so the next one is is much different
than the traditional web developer role
so this is a web security specialist but
it's still very very important and
related to web development so web
security Specialists are responsible for
protecting websites and web applications
from cyber attacks they're also
responsible for identifying and fixing
security vulnerabilities and this is a
very important role especially with all
the data breaches that have been
happening lately and if you're
interested in this role you'll need to
learn about web security vulnerabilities
and how to prevent them SQL injections
cross-site scripting things like that
you'll also need to learn about
penetration testing and how to perform
security Audits and you you'll use tools
like the burp Suite a wasp zap and many
others that will kind of help you find
and prevent these these security issues
and you'll also be conducting security
Audits and need understand
certain security compliance this is
really out of my wheelhouse I would say
out of all of these this is the one that
I have the least experience with
so next we have a web slash mobile game
developer and these are really two
different categories web and mobile
native mobile game development is a bit
more intricate and you can use you know
c-sharp with the unity game engine for
instance that's a popular combination if
you do want to stick to web games and
JavaScript you can try the phaser game
engine for 2D games in the browser and
this is a very Niche area of web
development but it is also a lot of fun
so you'll Master game logic game physics
game design principles you'll create
immersive gameplay experiences that
challenge and entertain users and cross
browser and cross-device compatibility
is obviously extremely important as well
as performance optimization nobody likes
laggy games
so next we have a blockchain developer
they specialize in building
decentralized applications and smart
contracts using blockchain Technologies
like ethereum binance smart chain polka
dot I'd say stick to ethereum for now
this field involves creating secure and
transparent applications that leverage
blockchains
distributed Ledger capabilities and
you'll learn how to write smart
contracts using languages like solidity
or rust and you learn all about the
principles and the tools used in
decentralized finance or D5 and there's
libraries you can use like web3js to
interact with blockchain networks from
web applications and you want to be
aware of blockchain security best
practices because obviously blockchain
transactions are irreversible
so the next one is it seems really fun
to me it's not something I have much
experience with but it's augmented
reality and virtual reality developer so
this is where you create immersive
experiences that blend the digital and
the physical world and they use
Technologies like Arc kit arcore webvr
to build web applications that enhance
reality or create entirely virtual
environments and this specialization
requires expertise in 3D modeling
spatial Computing and interaction design
so there's special AR VR Frameworks like
Unity 3D and A-frame you should also get
a handle on like I said 3D modeling and
animation to create assets for AR VR
environments and you can also Implement
gesture recognition and hand tracking
for user input so really really cool
stuff
next we have a pwa or Progressive web
app developer and they specialize in
creating web applications that offer a
native app-like experience across
different devices and platforms so pwas
are known for their offline capabilities
fast load times and responsiveness and
it really combines web development
skills with mobile app development
principles so it's almost like a middle
ground between a web app developer and a
mobile app developer so you'll need to
understand and Implement things like
service workers to enable offline
functionality and background
synchronization it'll create web app
manifest files to define the app's
appearance and behavior Implement
caching strategies to optimize the app's
performance and reduce load times and
enable push notifications to engage
users and re-engage them with the app
so next we have Internet of Things or
iot developer so these developers
specialize in connecting physical
devices and objects to the internet
allowing them to communicate and share
data so they create web-based
applications that control and monitor
iot devices enabling Automation and
data-driven decision making and I think
this is really cool because I have a ton
of smart home stuff and I'm always
curious what kind of apis are available
and what I could do with them I just
haven't had really had the time to get
into it so you'll familiarize yourself
with iot communication protocols like
mqtt and even HTTP and then learn how to
interface with the hardware with sensors
actuators microcontrollers Etc and then
utilize cloud-based iot platforms like
AWS iot you'll also set up data
streaming pipelines to collect and
analyze data from these devices so
lastly we have a chatbot developer and
with the advancement of AI chat Bots are
absolutely huge right now chatbot
developers specialize in creating
conversational agents or chat Bots that
interact with users through either text
or voice interfaces and they design and
develop chatbot applications for a
variety of purposes including customer
support e-commerce and informational or
information retrieval and then natural
language processing or NLP is something
that you really need to get into it's a
subfield of AI that focuses on the
interaction between computers and human
language and it involves the development
of algorithms and models that enable
computers to understand interpret and
generate human language in a valuable
way so you'll learn NLP techniques and
libraries like NLT a Spacey or
tensorflow for language understanding
you'll also explore voice-based chatbot
development for platforms like Amazon
Alexa Google assistant and so on so
you'll develop chat Bots that can
maintain contacts and engage in
meaningful conversations rather than
just asking a question and getting an
answer you can you know Converse back
and forth like you can with chat GPT for
instance
all right guys so there you have it
there's so many areas of web development
that you can get into so take some time
sit down really think about what you
want to do what are you passionate about
if you've always loved video games maybe
you want to get into web game
development if you love to create things
and maybe get into UI ux design if you
love to help people maybe you want to
get into web security there's just so
many options and I think that I think
these days people just want to master
everything right away and it's just not
plausible so it's worth it to really
figure out what you want to specialize
in you know where do you want to give
your value with the with everything
that's happening with AI I think a lot
of the the real generalized stuff is
going to just be shipped out to Ai and I
think that people's value it's really
going to come in in certain areas
certain fields and roles so so just
something to think about hope you guys
enjoyed the video and I will see you
next time",,
U4JVw8K19uY,"what's going on guys so there hasn't
really been many new technologies
outside of AI that have really got me
excited in quite a while technologies
that have to do with web development so
this project bun has really caught my
eye and it's an emerging lightweight
JavaScript runtime and toolkit that's
gaining traction really fast I I believe
it's been around about a year but 1.0
was just released and in this video
we're going to talk about what bun is
look at its capabilities and we're going
to jump in and look at a lot of its
features now
before I get into to anything I just
want to say that the JavaScript
ecosystem in general has been very just
all over the place for years and years
and I think it's getting better I think
that this is a a huge piece to the
puzzle because bun is not just a runtime
like node.js it does all that stuff but
it also includes a bundler for your
front end it includes testing it it it's
an all-in-one toolkit which is what I
really think we need in the JavaScript
world to to have a respectable organized
ecosystem so I'm really excited about
this project and this video so let's get
into it
foreign
guys so let's go a bit further into what
bun actually is so it's a JavaScript
runtime and all-in-one toolkit to serve
the modern JavaScript ecosystem and when
I say JavaScript runtime this can be
compared to node.js and Dino in fact bun
is actually a drop in for node and I'll
talk about that in a minute now it's not
just a run time to run JavaScript on the
server it also includes a native bundler
a transpiler task Runner and npm client
so you can bundle transpile install and
run JavaScript and typescript projects
and in the past we'd had to use all
these separate pieces these separate
Technologies to build full stack
applications with JavaScript we need
node.js for our server a bundler like
webpack or Veet for our front end
testing Frameworks and so on however bun
has all that stuff baked in so I think
it's a step closer to just having a
single tool that can do everything that
we need to build full stack applications
with JavaScript and typescript not to
mention it's also super fast which I'll
talk about in a bit
so bun is written in Zig which is a
newer low-level language that is
designed to be fast safe and simple and
from what I understand it's supposed to
be a replacement for C and C plus plus
so it's fast and Powerful yet small and
simple so it's less complicated than
those other languages and it's super
fast now like I said bun is described as
a drop in replacement for node.js so
it's completely compatible with node
apis and it's also compatible with the
npm ecosystem so you can use bun to run
your node.js applications and you can
also use bun to install and run npm
packages but you do have additional
optimized apis and tools that you don't
get with node.js and Bun is not just a
fork of node.js it's not built on the V8
engine like note is it's actually built
on the JavaScript core engine which is
the performance minded JavaScript engine
built for Safari in webkit and it isn't
dependent on node or npm so it's a very
minimal stack and of course this
increases performance which is one of
the main goals So speaking of goals
there's three major design goals that
that bun has so one is speed bond is
faster than both node.js and Dino with
little dependencies and extending the
JavaScript core engine it's able to
achieve this another aspect that
increases performance is rewriting
JavaScript JavaScript implemented apis
in a lower level language
it also aims to have an elegant API it
provides a minimal set of Highly
optimized apis for performing common
tasks like starting an HTTP server
writing files and so on and we'll get
more into this in a little bit also a
cohesive developer experience but is a
complete toolkit for building JavaScript
apps including a package manager test
Runner bundler so you don't need to use
a bunch of different tools to build your
applications so let's quickly look at
some of the features and advantages of
buns so we talked a bit about Speed and
Performance and that bun uses the
JavaScript core engine and it uses
native speed functionality implemented
in the zig language and just to give you
an idea you can take a look at this
image that compares some of the common
actions that we can do with node.js Dino
and Bun so server side rendering react
you can see that button is way up there
sixty six thousand plus node.js is only
at thirteen thousand HTTP requests per
second and then with a web websocket
chat server messages sent per second you
can see bun is over a million node is
only at 179 000 and loading a huge table
so having to do with making queries to a
database you can see bun is is way up
there and this is using SQL Lite all
right so very very fast in in many ways
and like I said it's a drop in for
node.js so it's compatible with all of
the node.js apis it's it has all of the
um the built-in modules like FS path Etc
it also implements the globals like
process and buffer so you can run your
node.js apps with bun
it also works with node modules so you
still have a package.json you still have
a node underscore modules folder to
manage all your dependencies there's
also a native npm client so when you
install npm modules you can use bun
install you can use bun run all types of
basically just the same things that you
would do with npm except it's supposed
to be up to 30 times faster and take
those statistics with a grain of salt
that's just what they claim although
using it you can tell that it is much
faster
so no module Madness this is one that
that is big for me so with node.js
they've been trying for years to
implement es modules without affecting
certain things and breaking certain
things and you can do it you know you
can edit the package.json and you can
add the type module and so on with bun
you can use either the es module syntax
or the common JS syntax you could even
use them both in the same file and have
no problem so that's something that's
that's big for me
web standard API so bun implements apis
like fetch websocket form data Etc of
course you get typescript out of the box
it's a first class citizen in bun uh
simply use a TS or TSX extension and
directly execute your typescript files
jsx so yes button supports jsx out of
the box it transpiles jsx syntax to
vanilla JavaScript it assumes react but
you can change that within the TS config
file
so there's a watch mode no more tools
like nodemon when we use node.js if we
make a change on the server we have to
restart unless we use something like
nodemon well with bun you simply can do
dash dash watch and it will do the same
thing it'll reset every time changes are
made there's also a hot hot reload
option as well
environment variables so just like with
node we can have a DOT EnV file except
we don't have to install a package like
dot EnV it just works and it will read
your environment variables
integrated bundler so this is huge
button has a built-in bundler that's
faster than webpack and parcel and many
others it'll take your source files and
bundle them together into a single file
that can be loaded into the browser and
I'm going to show you how that works in
a little bit
and then it even has an as a built-in
sqlite database that you can use for
your applications which is very
convenient for development and those are
just some of the features and Advantage
there's more that I didn't even mention
there's also Frameworks that we can use
with bun of course we can use express
and and KOA and all that stuff there's
also a framework called Alicia JS it
looks really interesting and it's
supposed to be around 20 times faster
than Express and it's built to be used
with bun
all right and again take those those
um comparisons with a grain of salt
now when it comes to insulation remember
a bun is still very new 1.0 was just
released so at this point if you're
using Windows you do need to use the
windows subsystem for Linux to kind of
get the full experience if you're on Mac
or Linux then you can just use it and
you can install it either with curl or
you can even install it globally with
npm all right I'm on a Mac but if you're
on windows again I would suggest using
the windows subsystem for Linux all
right so enough talk enough slides let's
go ahead and jump in and see what bun
has to offer all right guys so this is
bun.sh this is the official website for
bond this is where you can find all the
documentation and you'll see that
there's a command here a curl command
that we can use to install now notice
down at the bottom it says supported on
Mac OS Linux and WSL so if you're on
Windows you're going to want to use the
windows subsystem for Linux now I have a
video that shows you how to get set up
it's it's I think it's a 12 or 13 minute
video it's quite old it's a few years
old but not much has changed so you can
follow along with that to get set up
I'll put a link in the description if
that doesn't help there's tons of other
videos out there that will help you get
that set up all right and that's if you
want to follow along you can just sit
back and you know look at the features
and see what this is all about
so there's a few ways to install if we
go to docs and we go to installation
you'll see that we can install with curl
but we can also install globally with
npm if you want to do it that way if
you're on Mac you can also use Homebrew
you can also use Docker you can also use
Proto so I'm going to stick with this
this curl command so I'll grab this
off the home page now I already have bun
installed so it's all set up on my
machine but what I would do is paste
that in run it
and it's not going to tell me to run
this command but if it's your first time
running this it's going to also have you
do exec slash bin slash zsh so that will
make it so that you can use the bin
command I'm sorry bun command so once
you do that then you can just try bun
dash dash version and you should see the
current version which at this time is
1.0.2
okay so now that bond is set up let's
open up vs code and I just have a an
empty folder called bun crash and I have
my integrated terminal open down here
and the first thing I'm going to do is
run bun and knit just like we would with
npm we do npm init It'll ask for a
package name that's fine entry point
index TS is fine and what it does is it
creates a little more than what you
would get with node.js with node.js you
would just get the package.json and the
lock file so here you're also going to
get the a couple things the the
typescript config file which we're not
going to need to do anything with but if
you want to customize typescript you can
you get the actual entry point which is
this index TS file which just has a
console log in it you get the the bun
lock file our package.json along with
the peer dependency of typescript and
the dev dependency of the bun types so
those installed and you can see we
already have our node modules folder so
we don't need to run npm install
we have that stuff set up also a git
ignore file as well Anna readme
so those get that that's what we get to
start off with so to run a file we can
say bun run and then the file so let's
say index.ts and we get hello via bun
because that's what's in this index TS
now you'll notice if I do Bun Run index
without the extension it says missing
script index so you do have to add the
extension onto the end there so what I'd
like to do first is just create a very
simple server using the bun API using
the bun.serve which is similar to the
HTTP module in node.js but it's much
faster and it's more optimized it's not
something you'd really use in production
just like you wouldn't use just the HTTP
module with node but I do want you to
know you know the very basics of how
that works and we can see how to use a
bun API so let's create a variable here
called server and we'll set this up with
bun dot serve and we don't have to bring
bun in we don't have to import it or
anything like that so in serve let's
pass in an object and I'm just going to
disable
co-pilot for now
disable that because I know that can get
kind of annoying
okay so we have our object and then we
can Define the port that we want let's
say we want to use port we'll say 5000
and what we do here is add a fetch
method
and that's going to take in a request
object
okay and then in here we want to return
a response so we'll say return new
response and then whatever we want to
put in here I'll just put a string of
hello world and then down here we're
going to do a console log
and let's do a template literal here and
we'll say listening
on Port
and then we'll just put in
that pour actually we have to do server
dot port
okay so now if I come down here and I
run bun run and then index.ts we can see
listening on Port 5000. so we've created
a very simple web server and if we go to
the browser
and then we go to let's go to localhost
5000 we should see the hello world
okay so very simple this is comparable
to using the HTTP module with node.js
now
what's cool about this is we have a
watch mode so with node you would have
to install something like nodemon
because you'll see if I try to change
this like let's say hello bun instead of
hello world and if I come back over here
let me just make this a little smaller
if I come back over here and I reload it
doesn't change I have to restart the
server however what I can do instead is
use the is use watch mode so I can say
bun and then Dash Dash
watch and then the name of the file
which is index dot TS and now it should
be in watch mode so you'll see it says
hello bun let's say I just want to add
an exclamation save come over reload and
now you can see that that exclamation is
added so it's similar to as if you were
using nodemon there's also hot reload so
if you're if you're dealing with let's
say you have a react app and you're
dealing with State and you don't want
that extra
reload to have to change your state you
can use hot reloading by simply doing
instead of watch you can do
hot like that and that should work as
well we're not going to see any
difference here but if we had some State
you would see the difference there's
there's some examples in the
documentation if you want to check that
out
all right now the next thing I want to
look at is environment variables so
let's create a file called dot EnV and
in that I'm going to put the port
variable and we'll set that to 5000.
all right so we'll save that now
normally with node.js you would install
a package called dot EnV and then you
would have to initialize it you call the
config method and so on but we don't
have to do that it should just work so
what I'll do is where we have this 5000
there's actually two ways we can do this
we can do the Old
process.env Dot port
and I'll just say or let's say eight
thousand
if it for some reason can't find this
and then I'll just restart and you'll
see it actually did restart
um
and it said 8 000 because it hadn't read
that file yet because it does need a
restart but now it says 5000 meaning
that it's reading this port so if I
reload this that should still work now
another way to do this is to say bun dot
EnV Port so if I do that that gives us
the same result we're still getting five
thousand so you can use either
process.env or bun EnV and you don't
need to use a third-party package like
the dot EnV package
now as far as scripts we can also add
bun scripts so let's go to our
package.json here and let's add a
Scripts
we'll say scripts and this is going to
be an object whoops
this is going to be an object with a
start script
so for the start script I'm just going
to use Bun Run index dot Ts that way we
can do fun start but I also want a Dev
script
that will watch it that will use watch
mode so for that we're going to say bun
Dash Dash
watch and then index.ts
okay let's make sure we put a comma here
so now if I want to start up my server I
can now do I can do bun
start okay so that starts it normally or
if I want to do it in development mode
and I want to use watch mode I can say
Bun Run Dev
and now it's in watch mode now like I
said this probably isn't something
you're going to use in production you're
probably going to use some kind of
framework like Express or Alicia but
just to take it a little bit further
let's create a route here so we'll have
a route for the home page and for let's
say the blog page so first off we can
get URL and we can get that with new
URL and we're going to pass in here that
request object has a URL property on it
so that'll get us the URL and then we
can say if
the URL
Dot
path name if that is equal to slash then
that's going to be the home page
actually we don't even need these curly
braces we'll just say return
a new response
and we'll pass in just a string of home
page
all right and then underneath that I'm
just going to copy that down never mind
these red lines for now
so this path name let's say if that is
equal to slash Blog then we're going to
return let's say blog
and then under that we're going to
return so if it's neither one of those
then we'll return a 404 so we'll say new
response and we'll pass in here just 404
exclamation
so now if I go to the home page I see
home page if I go to slash
blog I see blog and if I go to like
slash blog1 which doesn't exist I see
the 404.
so that's just the the basic server API
now there's also with the npm client the
bun npm client you also have bun X which
is similar to npx so this allows you to
run a package without installing it so
I'm going to stop the server here and go
down to the the terminal and let's run
bun X
so it you could either do bun Space X or
the shortcut for that is just bun X like
that and we're going to say cow say
which is just a really simple program
that will
have a cow say whatever you type here so
I'm going to say hello bun
and we'll run that we see just a little
ASCII cow with hello bun
so if you wanted to use
I don't know create react app or
something like that something that you
want to use npx with and just use
something without installing it you can
do that with bun X
now as far as node modules go like the
uh the the default modules like path and
Fs you still have those available so I
want to show you those so I'm going to
just create a new file here and I'll
just call it node
well let's just call it modules doesn't
really matter this is just
experimentation so we'll just say
modules TS and I'm going to import let's
say path
from
path
and another thing I'm using the es
module syntax here but if I wanted to I
could also use the require syntax I'll
show you that in a second and you can
even use both in the same file I don't
know why you would do that but you can
so let's say cons file path just to show
you that we can use this and we'll use
the join method so path.join
and we'll say Foo
so a folder called Foo folder called bar
and then we'll have a file called image
dot PNG so let's say we have that file
path and then I want to get the file
name so I could say path dot base name
and then pass in the file path
and then I'm going to just console log
the file name all right so if I run this
file by saying bun
run and then module dot TS
what I call oh modules sorry so it's
modules TS you can see I get the file
name of image.png
and if I wanted to use the require
syntax I could say const
path equals
require
path and run the file and that works
just as fine so I mean you can use
whatever syntax you want there's no
extra steps now you have other core
node.js modules you could use such as FS
but instead of FS there's actually a new
optimize API for dealing with files that
bun offers so I'm actually going to
create another file here I'll just call
it file.ts
and we can close this stuff up here so
I'm gonna
first off just write or create a file
and write to it so I'll go ahead and
just say const data and I don't even
have to bring anything in it's it's it's
on the bun object so I'm going to say
data and I'll say I love JavaScript
okay and then let's say I want to write
that to a file called output.txt what I
can do is I can await on bond dot right
and we have a top level async so I don't
have to wrap this in an asynchronous
function and then let's say output Dot
text and what we want to write in that
file is that data
all right so we'll save that and then
let's run this file so we can say Bun
Run file dot TS and now you'll see
there's an output.txt with I love
JavaScript
so that's if you want to write to a file
very simple just two lines of code it
can make easily make it one line and
then if we want to read files we can do
that let's just comment this out
we can do that with bun.file
so let's um
yeah let's say const and we'll call this
file and we'll set that to await bun dot
file
and the file I want to read is output
dot txt so the file we just created and
then we can get a bunch of different
things from this if we just want the
data as a string then we can just simply
say
file actually we have to await
file Dot
text which is a method so now if I run
this we can see I love JavaScript so it
just gives us it as a string if you want
to get for instance the file size
there's a size property so we can say
file dot size and that's a property not
a method so no no um parentheses and you
can see 18 so it's it's in bytes that's
18 bytes and then you could also get the
contents as a readable Stream So if you
wanted to do that you could do a weight
file Dot
stream
so that would be a readable stream if
you want to get it as an array buffer
you could do that so a weight file Dot
array buffer and if I run that you can
see we get it as a stream here and then
we get it as an array buffer so there's
a lot of different things you can do
with files using this this bun API
all right now for testing there's also
integrated testing so let's create a new
file here and let's call this we'll just
call it
index.test dot TS you want to make sure
you have that DOT test in there
and then what I'm going to do is import
a couple things from and it's going to
be from bun
and then colon test
and let's bring in here describe
expect
what else test
and
before all
so basically we can have hooks in here
it's very similar to what you would do
with jest
so for instance you could call before
all
and pass a function in here
and then here is where you could say set
up tests
but let's create an actual test with
describe so we're going to say describe
math
pass in
function here and then we'll have a test
so our test is going to be called
addition
pass in a function
and let's say I want to expect
to plus 2
and then dot 2B so we want that expect
that to be 4.
okay so let's save that and now all we
have to do is simply run bun
test and it's going to look for files
that have the DOT test so it should
automatically pick this file up so if I
run that you can see that it runs in the
the math test Suite it runs the addition
test and it passes
so really cool and we haven't installed
anything the only thing that we've the
only thing that's not bun is typescript
that's the only thing that's in the the
package.json which is really nice and we
haven't even touched the bundler yet so
the whole front end part of this so
let's do that now
so for the bundler what I'm going to do
is create
a source folder all right and then in
that Source folder I'm going to create
an index Dot let's let's give this yeah
we'll do TS I'll show you more of the
jsx react stuff in a bit but let's just
do a very simple
um just something simple I want to fetch
a user from the GitHub API using axio so
using a third-party module and I want to
then bundle that into a single file that
I can include in the browser and my
front end so let's install axios we'll
come down here and we can say bun
install
axios and do you see how fast that is so
it's extremely fast the npm client and
actually in addition to index TS just so
I can show you how we can use multiple
files let's create another file and
we'll call it GitHub API dot TS
and here we're going to import axios
from
axios and then we're going to have an
async function we can't use the top
level async because this is going to
actually be bundled for the front end so
we have to wrap it in a function and I'm
going to call it fetch user and it's
going to take in a user
and then let's make our request and put
it into a variable called res so we'll
say a weight axios dot get
and then the URL which is https
API Dot
github.com
users slash and then I'm going to just
append or concatenate the user onto the
end of that and then underneath let's
just return the response dot data
okay and then we just want to export so
let's say export as default the fetch
user function so that we can use it in
our index file so we'll go to our index
file now and let's import
fetch user
okay and then since this returns a
promise we need to wrap it in an async
function so I'm just going to use an
iffy here we're going to say async
and just have an arrow function and
let's say cons user data
and we're going to await on the fetch
user function and pass in the user that
I want to get which will be my own so
just Brad traversy
and then underneath that we want to I
want to just put it in the the browser
body so let's say document Dot
query selector and I'm just going to
select the H1
and then set the inner HTML
and we're going to set that to just Json
Dot stringify
and I'm just going to insert the entire
Json string so we'll pass in the user
data
all right so what we can do now to be
able to bundle this and and include this
in our HTML in our front end we can come
down here into the terminal and use bun
build
okay so button build and then I'm going
to specify the file which is going to be
dot slash Source slash index.ts and then
we can do dash dash out file and set
that to where we want this the bundled
file to go which I'm going to say dot
slash dist slash bundle dot Js
so let's run that and now you'll see
It'll create a disk folder with the
bundle.js file and this is everything in
the source folder here the index TS and
the function inside the GitHub API is
all in here and that's what we want to
include in in the front end so now what
we can do is in that disk folder we can
create an index.html
and we'll just put a boilerplate in here
we'll say GitHub
user data
and then in the body remember we we put
it in an H1 so I'm just going to put an
H1 doesn't really matter what we put
inside of it and then let's make sure
that we include that script and the
source is going to be the dot slash
bundle
so let's save that and then I'm going to
open this with live server and now you
can see that we get all the data that we
requested from the GitHub API is now
being put in the front end here in the
the browser window and of course you can
interact with your backend server you
know if you if you're using a framework
and you have routes where you're
interacting with a database and remember
this comes bundled with an SQL Lite
database as well so you just have so so
many things that you can do without
touching any other projects any other
dependencies
now there's also a watch mode if you
want to develop so let's um let's do
that I'm just going to come down here
and change this command up just a little
bit and just add on to the end of it
dash dash watch
I believe that should
do it so if we run that and now let's uh
let's go into the index.html and right
above the H1 I'll put an H2 and say
hello and save and you can see that we
now see the H2 with the hello and I
didn't even have to reload it reloads on
its own
so really cool stuff now I want to get a
little deeper into the the whole front
end thing and I want to give you an
example where we use react and how we
can actually transpile jsx
so let's uh let's stop this
and let's install react and react on so
we'll say bun install react
and react Dash Dom
okay so now we have that installed and
what I'm going to do here is go to my
index TS that's in the source and we're
going to rename this because I want this
to have some jsx in it so we're going to
rename it index TSX and then just get
rid of everything so this will be the
entry point to our react application so
let's say import react from
react and then we also want to import
from react Dom
create root
so that's going to be from
react Dom and then let's say const root
set that to
create root and in our HTML file we'll
have a div with the ID of root so let's
say document Dot
get element
by ID
and that will have an ID of root
okay and then let's create our app
component so here's where we're going to
use some jsx
so in here I'm going to have a little
bit of State we're just going to have a
count I'm just going to create a button
that we can click and it'll just
increment you know that that
example that so many
Frameworks use so let's say set count to
change that and we'll set that equal to
react dot use State and it'll be Zero by
default and then we want to return jsx
so I'm going to say return and then in
parentheses we'll have a div
and then let's have an H1 we'll just say
hello world
then we'll have an H2 and we'll say
count and then I want to Output whatever
is in the count state
and then I want a button that will
increment it so let's say button
and
we'll say increment
and that button is going to have an on
click Handler
and we'll set that to oops we want to
set that to curly braces with an arrow
function and that's just going to call
set count
and we want to pass in there our count
and just add one to it so very very
simple little application and then down
at the bottom under the app component we
just want to call Root dot render
and we want to pass in our app
component
okay now
over here obviously this is still this
is going to stay the same until we we
bundle it again so let's go to our
index.html before we bundle it let's get
rid of this stuff and let's have an ID
of root so that's our output for our
react application again it's not going
to show yet but we can come down here
now and let's run the bun build and
watch command
if I do that
oh it's this module not resolving
oh yeah I need to change that to TSX
so this right here this index TS should
be
TSX
okay so there's our application if I hit
increment
there we go so I don't know about you
guys but to have all this stuff together
is is huge because I think one of the
the worst things about JavaScript is is
how the ecosystem is just so scattered
if you look at other languages if you
look at you know C sharp or python or
rust and I mean they every language has
its issues but they all seem very put
together in terms of of the whole
ecosystem and the different packages and
Frameworks and this and that JavaScript
just seems all over the place it's very
difficult for beginners to understand
you know what they should wear they
should start so I think that having
something like bun that puts everything
in one place is a big step and I think
that it's it's a it's a step in the
right direction in my own opinion all
right and I just showed you just we just
scratched the surface so there's a lot
more to it and it's very very new 1.0
was just released so you know plan on
seeing bigger and better things and I'll
be doing some bun
projects when it's a little bit more
established so that's it guys thanks for
watching and I'll see you soon",,
1YU83Lw58eo,"what's going on guys so in this video
I'm going to show you step by step how
to build an AI chat bot using node.js
and the chat GPT API with the GPT 3.5
turbo model so you'll essentially have
chat gbt running in your terminal and
I'm going to give you a quick demo
before we start so I have the program
running and I can send any request I
want to the API I'll just say hello
and we get hello how can I assist you
today and I'm just going to say what is
the capital of
Florida
and it's going to give me back the
capital of Florida is Tallahassee now
the way that we're going to write this
code is so it we save our chat history
and we send that with each request that
way we can have an ongoing conversation
so I should be able to say what is the
population and it should know what I'm
talking about
okay so as of 21 population of
Tallahassee blah blah blah so it knows
that I'm referencing what I just asked
all right and then you can also ask for
like code samples well I'll say how do I
write a fetch request
in JavaScript
and it does take a second all right so
if we look up here to make a fetch
request in JavaScript you use the fetch
function and it gives us an example and
then it tells us what the example does
and I could easily copy this and put it
into my my own code and I could ask
questions about it I could reference it
in any way all right so I think it's
pretty cool you can just have this open
on your desktop and if you need
information on whatever you can just go
ahead and prompt it and then to exit we
just type exit
and there we go so now we're out of the
program so that's what we're going to
build and we're going to use the
official open AI library for node.js
that's what this is and then we're going
to use a prep package called re-line
sync which allows us to prompt the user
so we're going to use this this question
method and that's where that's how we're
able to continuously type it and have a
conversation with the bot all right
we'll also be using dot EnV to store our
API key and then colors to give you know
give us colors in the console and then
this is the final code this is the
repository I'll have the link to this in
the description and I'll probably use
this for ongoing projects to show you
some of the new features with the API
such as function calls that's something
that I want to get into we'll probably
get into within the next month or so and
I'll probably use this as a starting
point all right so that's it let's go
ahead and get into it
thank you
all right guys so I have an empty folder
called chat gbt chat bot so just create
that folder and open up your text editor
whether it's vs code or whatever it is
you're using as well as a terminal and
the first thing we're going to do is in
this folder we're going to run npm and
knit which will initialize a
package.json file and it's going to ask
us some questions in the package name
I'm actually going to call chat bot
because if you do decide to use npm Link
and run this as a global command that's
going to be the command that you run and
then the version we can use that
description I'll say chat bot
powered
by chat
chat GPT
and then index that's fine that's fine
keywords author of course you can put
your own name here
and let's say MIT for the license
okay so now we have our package.json now
as far as dependencies go let's say npm
install and open AI is the the library
we're going to be using to make our
request to chat chat GPT and then I'm
also going to install readline Dash sync
that's going to allow us to interact
with the user and ask a question and we
can answer and so on basically give us
that conversation uh that conversation
flow and then we're going to install dot
EnV so that we can store our AP API key
in that and then I'm also going to
install colors which is optional but it
does look better when there's you know
different colors so you can tell who the
user is and who the bot is so let's go
ahead and install those
all right now I'm going to open up my
package.json here and I'm going to just
add a start script
you can run it with you know node index
or we can run npm start
so in here let's say node and then
index.js now another thing I'm going to
do is add a type module because I want
to use es modules instead of using the
common JS syntax so let's go ahead and
add a type and set that to module if you
want to if you want to use common JS
then you don't have to you don't have to
do this all right so now that we've done
that let's create our
index.js which is our entry point
and the first thing I want to do
actually the first thing we have to do
is is get our API key so let's go over
to open Ai and let's see my I'm not
logged in here
so you just want to get your key
whether you have a free account or a
paid account
you can go right here view API keys and
you can create a new key I already have
mine so I'm not going to create a new
one but just go ahead and click create
it'll show it and then you can copy it
and then what you're going to do with
that is come to your application and
create in the root here a DOT EnV file
and this is where your your global
environment variables will go so I'm
just going to grab my key real quick
so I'm creating a variable called open
AI API key and then I'm setting it here
so just go ahead and do that make sure
you use your own I'm going to delete
this one after anyway and then save that
so we're going to start by importing a
few things
from the openai library
and those two things are going to be the
configuration class
and then open so uppercase o a uppercase
Ai and then uppercase a pi
I believe that's how it's formatted and
the first thing we want to do actually
we're going to also import dot EnV
because we need to uh we need to get our
API key
and in order to use dot EnV we have to
call the config method so let's say dot
env.config
okay now what we want to do is create a
configuration object so we'll call this
configuration and set that equal to a
new uppercase C configuration object and
then that's going to take in an object
literal with
the API key and we can get that with
process dot EnV Dot and then open AI
underscore API underscore key
okay now we need to take this
configuration object and we need to pass
it into a new instance of this here so
I'm going to create a variable called
open AI all lowercase set that to new
open AI API and we're going to pass in
the configuration object that we just
created so now we're ready to make
requests with this object
so I'm going to create a very actually
you know what since we're using
we're going to use a method on this
object called create chat completion and
that's a synchronous so we need to use
the sync await so let's create an async
function and we'll call it Main
and then we're going to call that
function down here
and then what I'll do is create a
variable called chat
completion and let's set that to a
weight
and then take our open AI object and
call create chat completion
okay and that's going to take in a
couple things so pass in an object with
the model the model that we're using is
gpt-3.5 Dash Turbo
and then we're also going to pass in
messages and this is going to be an
array now we're only sending one message
but you can send multiple messages so it
still has to be an array even though
it's just one message it's going to be
an object and it's going to have two
things a row and in this case the role
is user because we're the one making the
request the user when we get a response
back the role of that response will be
assistant because that's the API so
we're the user and we want to send
the content of whatever we want to say
to basically to chat GPT so I'm just
going to say what is the capital of
Massachusetts I mean you can say
anything whatever you want if you want
to say something different but that's
what that's the text that's the prompt
that I'm sending to chat GPT through
this API through this Library all right
now let's see what that gives us so
still within the main function but
outside of that that chat completion
variable let's just log chat completion
and see what that gives us so we can run
npm start
so this is what it gives us a whole
bunch of stuff up here that we don't
really need to pay attention to but in
this data object there's the ID there's
the the model and then the choices is
really what we want to pay attention to
because that's that's where the answer
to this is so let's say instead of just
logging the whole object we'll say chat
completion dot data and then dot choices
which we can see is an array with one
object in it so let's say choices and
then zero to see what that one object is
so let's clear that we'll run it again
and now what we get back is an object
with an index
since we only sent one message this
index will always be zero but if there
are multiple messages sent then we'd
have multiple indexes and the reason it
finished is because it stopped because
we we just asked a question it answered
and then this message object as you can
see has a role of assistant where the
user this is the assistant and then the
content says the capital of
Massachusetts is Boston so what we
really want is this content value in
this message object so here let's say
dot message and then dot content
and then if we clear this up and run
this again we should just see the answer
there we go all right so this is this is
how the API Works making a request and
getting a response so now that we know
that let's move on to create the actual
chat bot where we can go on and have a
conversation and what I want to do is
actually put this stuff in a separate
file because you might want to use this
this open AI object somewhere else you
might want to call either this method or
another one because there's a bunch of
different things different apis you can
use for different things so what I'm
going to do is create a folder called
config
and in config I'll create let's say open
AI dot Js
or we'll call it open dash AI dot JS and
then I'm going to move this stuff
see we're going to take this and move
that into here
and then all I want to do is export this
variable so down here we'll say export
default and remember I'm using the con
the es module syntax if you're using
common JS then you would do module dot
exports but I'm going to do export
default open AI
and then come back here and we should
then just be able to bring in
we'll say import
open AI from and then dot slash config
slash open Ai and we have to do dot JS
if we're using the import the es module
syntax with node.js
all right so let's just make sure that
this still works I'm going to save it
I'm going to run it
and we get the same response good now as
far as read line sync we need to bring
that in so let's start by importing
we'll say import read line
sync and we're going to import that from
uh from read line Dash sync and then we
might as well bring in colors as well so
we'll import colors from colors and
again this is completely optional but I
think it's nice to have different colors
for the for the bot and for the user
so
as far as as how read line sync works I
want to show you that I'm going to
actually just get rid of all this right
now because I just wanted to show you
how that works
but for the read line sync the way that
that works let's create a variable
called username and we'll set that to
read line sync and then we're going to
use the question method so if we say dot
question and we'll say
may I have your name
and then right under that I'm going to
console log
and we'll say let's put some backticks
in here we'll just say hello
and then
username okay so I'm going to run this
file again
and you'll see it says may I have your
name and then it allows me to type so
I'm going to put in Brad and it says
hello Brad so that's basically how this
is going to work this this readline sync
we're going to be using this question
method so we can get rid of that and the
first thing I want to happen when we run
this file and we call this function is
for it to just greet us and say welcome
to the chat bot program you can start
chatting with the bot so let's do a
console log and I want this to be green
so what we can do is say colors and I
want it to also be bold so I'm going to
use bold and then dot green
and then put my message in there and
I'll say welcome we'll say welcome to
the
chat bot program
and then let's copy that down
and then this text here is going to say
you
can start
chatting with the bot
all right so let's run the file again
and you can see that it's it's bold and
green
now it obviously it does doesn't do
anything else yet because we have
nothing else here so now what I want to
do is instead of just having
instead of just having the question
right in the function like this because
if I do that it's only going to ask it's
only going to do it once right I want it
to Key I want the conversation to keep
going so I'm going to have a while loop
and basically I'm just going to say
while true so it'll just continuously
Loop until we we break out of it and the
way we're going to break out of it is by
typing exit and I'll add that in a
second but first we want to be able to
get the input from the user so let's say
const and we'll say user
let's say user input
and we're going to say read linesync Dot
question
okay and I want this to be yellow so I'm
going to say colors
dot yellow and this I'm not actually
going to ask a question here I just
wanted to say the word you before
whatever we type so I'm going to say U
h u colon space like that
all right so if I were to save this and
then run this again
so it says welcome to the chat program
you can start chatting and it says you
colon and then I can type so I'll just
say hello and hit enter now it's just
going to keep doing that because we have
it in a while loop right and we're not
doing anything else with that input
we're not doing anything with the input
we're just we're typing it in we hit
enter it runs again it says you again
and lets us type but it's not actually
doing anything
so we can we can get out of this though
by doing control or command C so that
will clear us out for now but I want a
way to get out without having to do that
I want to be able to type exit so under
that user input I'm actually going to
open up a try catch and in the catch
we'll just do a console let's do a we'll
do a console.error
and we can actually we can make the
arrow red too so we'll do colors dot red
and then whatever that error is okay now
in the try we do one I'm just going to
put a comment here and say call the
API with the user input and we'll do
that in a second but I want a way to
escape out of the out of that Loop so
let's say if
so basically I want to check to see if
the user types in exit so let's say if
the user input and then we'll make it
all lowercase so two lowercase
if that is equal to exit
then I want to return
so let's see if that works so I'm going
to run npm start and we'll say hello
okay it doesn't nothing else happens but
if I do exit
then it gets me out of the program which
is what I want so now let's implement
the API and we're going to do it the
same way that we did that I just showed
you let's create a variable here I'll
just call it completion
and let's set that to a weight
and we're going to use the open AI
object and then the create
chat completion
method and then we're going to pass into
that an object and remember we pass in
the model which is going to be the GPT
Dash 3.5 Dash turbo model
and then we want to pass in messages
which is going to be an array of objects
that has a role which for us is going to
be user and also has the content
now in this case the content is going to
be the user input
okay so whatever we type in here when it
says U and then we type it in that's
going to get sent to the API
now we got to get the the response from
that so let's go right underneath that
and let's say get
get completion
Text slash content
so we'll say const and I'll call this
completion
content
or completion text
and let's set that to completion and
remember how that's formatted we want to
go into data which is an object that has
a choices array and then that choices
array has one item in it so we want to
get that so we'll use the index of zero
then we have a message object with
content so that'll give us the direct
text that we want
all right and then what we'll do is come
down here
and let's see we're going to go under
this if statement
and we want to then console.l log the
Bots answer so here we're going to say
colors and I'm going to make this green
so where where the user is yellow the
bot is green so in here let's say bot
colon space and then I'm just going to
add on to this the completion text like
that
now when we exit I also want it to say
say goodbye or whatever and we could man
like we could hard code goodbye or some
kind of message but if we put in exit
it'll get sent to chat gbt and it will
know that we're escaping and it will
come up with its own message so we can
actually put this in here as well
and that should work you know how we
expect so let's save this and let's go
ahead and try it out so we'll run npm
start it says U I'm going to say hello
and the bot says hi there how can I
assist you today I'm going to say what
is the capital of
Florida
and there we go the capital of Florida
is Tallahassee now we have an issue if
you just want this to be uh you know a
one-off thing where you just ask one
question you get an answer that's fine
but what if I say What is the
population
if I do that it's going to tell me
that it doesn't know what the hell I'm
talking about so to answer this question
specific information is needed so
basically it's not seeing the last
answer and that's because when we send
our data our messages we're only sending
this
so we basically have to have a way to
store our conversation history and send
that with our requests so let's do that
next so I'm going to go ahead and hit
exit type exit and you'll notice that it
says goodbye if you have any more
questions feel free to ask and that's
because of this right here we added on
the completion text when we type exit
that completion text is this
so we don't even have to manually put in
goodbye or whatever
so let's go ahead and come up to the top
here right above the loop and let's
initialize let's say const chat
history and we're going to set that to
just an empty array
so let's say store
conversation history
okay and then what we're going to do is
go
see into the try
and let's go above where we call the API
and we're going to construct the
messages by iterating over the history
array so let's create a variable called
messages and then we're going to set
that to the chat
history and we're going to use map so
we're going to map over that and then
say and then in here actually let's use
parentheses because we're passing in a
function and then we're passing in some
brackets with the roll and the content
and we just want this to be an object so
I'm going to put another set of
parentheses because I'm returning an
object that has the role and the content
all right so let's just put a comment
here just to be clear on what this does
so we'll say construct
construct messages
by iterating over
the history
all right now
we want to add the latest user input to
the message array so right under that
let's say add latest
user input so we'll say messages
dot push because we're pushing onto the
array an object with
role
which is going to be user
and content
which is going to be the user input
now instead of passing that directly in
here we're going to pass in
messages
okay now the last thing we want to do in
order for this to work is update the
chat history with the user input and
assistance response so when it responds
to us that also needs to be saved to the
chat history so that's going to go at
the very bottom right so under the
console log here let's say update
history with
we'll say with
user input and assistant
response
so we'll do that by taking chat history
and we're going to push
onto that
we're going to push
say user
and then whatever the user input is and
then I'll just copy that down and we're
also going to push on the assistant
and that's going to be the completion
text
and that should do it so now let's try
it again I'm actually going to try it in
the regular terminal here I would say
npm start obviously you have to be in
the folder
so we'll say hello
I'll say what is the capital of
Florida
Capital Florida is Tallahassee now say
what is the
population
and there we go as of 2021 the estimated
population is around 197
700. so what's happening is we're no
longer just sending a single message to
the API we're sending the entire history
all right so that's going to be it for
for what I want to do with this but
there's so much more you could add to
this you can make it so that your logs
are saved in files you could call
different apis you know integrate
different apis for weather and and
whatever else you could implement the
new function calls which I'm actually
going to make a video on soon and I'm
probably going to use the same script
and just add to it but yeah you could
just keep this open on your desktop and
if you have any questions about anything
you could just ask and it'll even
generate code samples let's say
create a
python script that makes
a simple request to an API
obviously we're dealing with the
terminal so we are kind of limited in
our output but it should work
all right so there we go and you can see
right here certainly here's an example
of a simple python script and everything
is in this block right here so we could
just simply copy that and put it into
our into our file and then it explains
exactly what the code does
you could even make it so that when you
ask for a code you can have it create a
file you create a python file with that
code in it I mean there's so much you
can do and you can edit the prompt what
we're doing here is sending whatever we
enter as the content but you could
prefix this with something you know like
speak to the user as if you were a
travel agent or something like that you
can prefix this with whatever you'd like
we're just sending the straight input so
it's pretty simple all right so that's
it guys hopefully you enjoyed this
little project and feel free to use it
add on to it and I will see you next
time",,
5X9isvG8W5s,"foreign
hey what's going on guys so it's been a
while since I made a video it's been
about two months or so which is way
longer than I've gone in the past five
six years and a lot of people have been
asking me if everything's all right and
the answer is yes I've just been really
busy working on my modern JavaScript 2.0
course which is finally done and it's a
37 hour course which is almost double
the older course and double any any
course that I've ever created now
another reason that I've been really
busy is because I've I've finally
created my own website my own platform
where I can sell and host my courses so
this course as well as about 10 others
which comes out to about 250 hours of
content are now available at
travestymedia.com and I'm putting a
promo Link in the description to get
this course in any course for just
fifteen dollars so I've been working on
this particular course for the past five
or six months and I I wanted to
essentially create a JavaScript boot
camp that includes everything from
learning you know data types
manipulating the Dom animations web apis
object oriented programming and then
getting into tooling with webpack and
front-end workflows we even get into
unit testing data structures and
algorithms and then there's a couple
bonus sections where we actually create
a full stack web application using
Express mongodb on the back end and we
create a completely custom front end
using webpack creating you know UI based
components just like you would with a
framework except it's vanilla JavaScript
so really really cool and I wanted to I
wanted this to basically take you from
absolute beginner to slightly advanced
in terms of Concepts so there's all
types of projects from a crud shopping
to an object-oriented calorie tracker
with classes and local storage and
bootstrap five components there's also a
movie app called flicks that uses the
movie database API so it's kind of like
a Netflix layout and we have search and
pagination and it's all vanilla
JavaScript there's no there's no
Frameworks I shouldn't say it's all
vanilla because we do use a couple small
libraries like there's a library called
swiper that we use for the for the the
slide slider component but it's mostly
just pure vanilla JavaScript there's a
bunch of mini projects as well but what
I really wanted to do is not just do a
project course I have a bunch of those I
have a 50 projects course or 20 projects
course this one I wanted to obviously
have projects but I also wanted to do a
lot of learning modules where we focus
on certain Concepts whether it's
promises or error handling I also wanted
to really look under the hood at things
like execution context and the call
stack and the event Loop things that a
lot of courses kind of leave out so
teaching you how JavaScript works not
just the syntax you know when we when we
code and we watch tutorials sometimes
you get that aha moment where something
that you've tried been trying to learn
for months just finally clicks and I
want this course to to be just constant
clicks where you know things that that
you don't really you know a little bit
about but you don't fully understand my
goal is for this course to make that
those things finally click and help you
learn the things that you've been trying
to learn so like I said there's a promo
code for just fifteen dollars you can
also get all my courses for 25 bucks a
month and cancel at any time I add it
all together it's about 250 hours of
content I just want to say that udemy is
I have nothing against you to me they've
obviously helped me boost my career as a
course creator and a content creator but
I think it's time that I just focus more
on my own website and kind of cut out
the middleman there's been a lot of
changes in terms of pricing and stuff
like that and at the end of the day I'm
averaging about three or four dollars
per course sale sometimes less than that
sometimes one or two dollars which you
know I'm not someone where it's all
about money for me obviously I I taught
for free for years and years but it
starts to feel a little degrading when
you're getting you know a dollar twenty
for a course sale when you put your
heart and soul into that course and you
spend months making it so I just want to
kind of move on and and try to do my own
thing you know and I'll be constantly
updating courses now I'm actually in the
process of updating my mern e-commerce
course that's why you don't see it on
the website because I'm in the process
of updating it now I'm creating a
bootstrap 5 course I'm also going to get
into other languages like Python and
golang so if you do go the membership
route you have full access to all
courses cancel at any time and you can
do monthly or yearly and I'd appreciate
it if you guys just check it out you
know even if you don't have money to to
pay for courses or anything if you want
to just check out the website I'd
appreciate it I've really they just kind
of worked my ass off over the last few
months with with this this jaw
JavaScript course and getting this all
together now as far as YouTube goes I'm
not disappearing I just I kind of needed
a break from the constant uploading and
needing to to think of new ideas believe
it or not it's very it's very stressful
to try and get a video out every week it
really wears on you and it stops you
from doing other things that you want to
do
um so after like nine or ten years of
this it it I needed a good long break
you know I've taken a week or two off
before but
um this was was really refreshing to be
able to do this but now I'm ready to get
back at it I'm going to be doing my
annual uh roadmap video that I do every
year that everybody is asking for
um there's a lot of stuff going on in AI
chat GPT I know everybody's making a
video on it
um but regardless I've been using it
quite a bit and really want to talk more
about Ai and and what it means for the
future of of web Developers
but that's pretty much it guys I just
wanted to let you know where I'm at I
will be back to making videos soon uh
again I'll have the link in the
description to the course and the
platform so if you want to check that
out and I just want to thank all you
guys for you know sticking around
subscribing watching and all that and I
will see you soon",,
_8M-YVY76O8,"hey what's going on guys so I've had
quite a bit of my plate recently some
personal stuff also trying to get this
modern JavaScript course done so I've
been looking to have some guests on and
today we're going to have on a fairly
new YouTuber he has a small Channel his
Channel's name is Cooper codes and he's
going to build a react and stripe
shopping cart application with you guys
so if you enjoy this content if you
enjoy the project check out his channel
I'll have the link in the description
and the idea is to to give some of these
smaller channels some exposure and at
the same time you know give you guys a
cool project to do while I'm working on
some stuff so hopefully you enjoy it and
I'll let Cooper take it away from here
foreign
hey there it's Cooper codes I just want
to start by thanking Brad for having me
on the channel I actually use Brad's
videos when I was just starting to learn
how to code so I'm super excited to be
your instructor for this project I'm
going to get started by showing off the
finalized version of the project we have
three different items here we can add
them to our cart we can have different
amounts in the cart for example I can
have one sunglasses a bunch of different
cameras you can also remove these items
from your cart as you'll see here we
have a cart in the top right just like
you'd expect and it will show all the
totals for all the different products in
our cart this project is interesting
because when we actually purchase these
items we're going to be sent to a stripe
checkout in the stripe checkout you'll
see we have the same products in the
same quantity that we had in our cart so
I filled in some test credit card data
here my name isn't actually Cooper codes
and so I can pay by pressing the button
here
and we will get a little thank you for
your purchase from our store if we go
over to our stripe dashboard which don't
worry about we're going to get into this
in more detail later in the video we can
see that we have a successful payment
that got processed the payment has an
invoice that shows the same items with
the same quantity and the same price as
we saw in our react front end yeah so
this is a great really full react
project we're going to be working with
react router react bootstrap a basic
Express backend and also using the
stripe API let's get into creating the
front-end components for react
application let's get started by going
to an empty folder and opening up a
terminal and we can create our react
application by saying npx create Dash
react Dash app and then the name of the
folder we want the react app to live in
I'm going to say store
we can now see that we have our empty
react application with everything we'd
expect we can go into the store folder
by saying CD store now that we're inside
the folder for our react application we
can start by installing a couple
packages we're going to need for the
front end so we can say npm install
we're going to need bootstrap for the
bootstrap styling and then react Dash
bootstrap for the pre-made react
bootstrap components then we're going to
need react Dash router Dash Dom for the
react routing which helps us go from
like page to page for example we can npm
star just to make sure everything is
working well on the react side of things
we can see that we have a boilerplate
react application which is perfect
exactly what we want we can get started
by creating all the different components
we need for our front end the first
component that we're going to work on is
the nav bar which is going to be that
little bar you see at the top of a web
page for these components we can go into
our source folder and make a new folder
called components this is where all of
our different react components are going
to live and I'm going to create a
component called navbar.js we can
initialize a functional component by
saying function the name of the
component which I'm going to say navbar
component and that's the full definition
there if we want to export this
component so other files can take a look
at it or use it we want to export
default navbar component when designing
our navbar we're going to use a couple
of different external components from
the react bootstrap Library we can
import everything we need by saying
import from react Dash bootstrap the
components that we need are going to be
the button this is going to be for when
we want to click on our cart for example
that's going to be a button we're going
to need a container for our navbar to
live inside we're also just going to
need the navbar from react bootstrap
which gives us a bunch of preset styling
is super easy to use and we're also
going to need the modal the modal
element is when you click on the cart
and it shows that screen on top of your
web page showing you all the different
data related to your cart so let's get
started by building out the return
statement of this navbar component we're
going to want to initialize a nav bar
here and we're going to set the expand
property to the nav bar of small this
determines where your nav bar collapses
for like mobile screens and stuff like
that small it looks good on this website
so I'm going to choose that we can start
by setting that navbar dot brand that's
that big title you see to the left and
it's going to point to a link of just
slash which is going to be like the home
link for our web page and we can make
that little title or brand say
e-commerce
store we're then going to have a
navbar.toggle this navbar.toggle allows
us to have that little element where if
you're on a mobile screen some of the
stuff is going to collapse and so we can
tell the navbar what we want to Collapse
by using this navbar.collapse element we
want the items within the collapse
element to be to the very right of the
bar so we can say class name is equal to
justify Dash content Dash end and so you
can think of it as like the start of the
row is kind of at the start to the left
then the end of the row is at the end
which is going to be to the right on
your web page we're then going to have a
button which is where the user is going
to click on the cart for now we're just
going to say cart with zero items later
in the video we're going to set up that
whole cart system and then eventually
change this to show the active amount of
items in the cart so let's bring this
navbar into our app.js we can run over
to the app.js file here and then import
navbar component so we can get rid of
the boilerplate react application code
it here and just put in the navbar
component and before we start the
application here we're going to want to
make sure to import the bootstrap CSS so
we have to do this manually by saying
bootstrap slash dist CSS slash
bootstrap.min.css this import is
necessary because it has these style
sheets that we need for our bootstrap
components so let's npm start our
project and see what it looks like right
now so as you guys see our navbar is
kind of very far to the sides we can
bring in a container from react
bootstrap
this container will allow our entire
application to kind of sit closer to the
middle of the screen and so we can wrap
our entire application so now that the
nav bar is inside of the container if we
go back to our Local Host it's going to
be more centered which is pretty good so
now that we have a basic idea of the nav
bar figured out we can get into showing
different pages to the user by using
react router react router allows us to
show the user different data based off
the link they have for example if we do
localhost 3000 we want to point that to
some type of home component for example
if we wanted to do localhost 3000 slash
success we would want to show some type
of success component so this is what
react router helps us do we're going to
import three essential things from react
router so we can import the browser
router which is the overarching router
then we can have routes and route from
react router Dom
in every single page of our application
we're always going to have the nav bar
at the top so we can choose where to put
the kind of special data by making a
browser router within the browser router
we're going to define the routes tag
inside of the routes tag we can have all
the different routes so like I have
commented at line 8 and 9. we can have a
route with the index property this
allows us to have a route show for the
kind of Base route or just the regular
slash you might have seen before
and we can point it to a certain element
for now I'm just going to write in some
components that we haven't created yet
which we're going to create after we
make these basic routes we have a store
Route which is going to be at the base
route so if you go to localhost 3000 for
example it's going to go to the store
and if we want to point to a specific
route we can say path is equal to
success this means if we go to localhost
3000 success we're going to show
whatever components under this element
so for example the success component
which again is something we are going to
create we're also going to have a cancel
path so I just copy that line over and
I'm going to change the path to cancel
and the element do cancel react router
best practice is to call these elements
not components but instead pages so we
can go over to our source folder make a
new folder here and create a Pages
folder inside of pages I'm going to make
three different files I'm going to make
a store.js which is going to be for the
actual eCommerce store the cancel.js
which is the page for if stripe payment
gets canceled or the user exits out of
the stripe payment and then also the
success.js which will send the user to
if they have a successful payment so
let's start by going into cancel.js and
making a very basic cancel component so
it's just going to be a function named
cancel I'm going to export default
cancel at the bottom and for this
component I'm just going to return a
very simple little H1 that's going to
say sorry to see you canceled your
stripe payment I'm going to copy this
entire component here which is very
simple but I'm just doing this to show
you guys the routing initially then
we'll get into building the more full
pages so over at the store page for
example this is going to become a huge
page eventually but we're just going to
change this function to store
and Export default store and I'm just
going to have a H1 that says welcome to
the store same thing we can copy this
component go over to success and then
under here instead of saying store we
can say success success we can say thank
you for your purchase so if we run back
over to our app.js stores undefined
success is undefined cancel is undefined
so to Define these components what we
can do is we can import cancel from dot
slash Pages slash cancel that's going to
get the cancel component and we're going
to do a similar little import for all
the other Pages as well for example
we're going to get the store from the
store Page and then the success from the
success page if we go to the base route
so just localhost slash like up here
we're going to be sent to the store
component if we go to the success path
we're going to be sent to the success
component and same thing for the cancel
path will be sent over to the canceler
component here so let's npm starter
application to see see that routing work
amazing so at the base route of
localhost 3000 we are being shown the
store component if we go to slash cancel
we can then see sorry to see you
canceled your stripe payment and if we
go to slash success it's going to say
thank you for your purchase just to
clear something up is the reason why we
don't have a success or cancel under
like the nav bar for example where you
can click on them and go to them is
because stripe is going to redirect our
users to the success path or the cancel
path based on how they interact with
these stripe stuff which I will explain
in way more detail when we cover these
stripe stuff so let's go over to our
store component and make some basic
cards for our actual products to live
inside so we can go to the store Page by
going to store.js under pages and now we
have our store we are going to use rows
and columns to show all the different
products on our website so I'm going to
start by importing row and column from
react bootstrap I'm going to put this
whole store in a little react fragment
this just makes it so the Js sex code
doesn't get mad at us when we have two
elements next to each other and it wraps
everything together for our store
because under the H1 we're just going to
start by creating our row on an extra
small screen we only want to show one
column for the rows but on a medium
screen we want to show three different
columns so that's what these properties
are doing here I'm also going to give a
class name of G4 to make everything look
nicer and within the rows we can now use
columns for example we can say column
and I'm going to use the Align equals
Center property just to make everything
look nice and in here I'm just going to
make a very simple H1 that says product
and I'm going to copy this over just to
show you guys in a second we're actually
going to make a product card component
but I just wanted to show you guys how
these columns and rows are working first
so let's go over to our localhost
amazing so you guys will see although
they aren't pretty looking cards we have
products in our store which we can
eventually turn into components and just
to give an example this row is really
amazing because it can handle as many
column challenges you want for example
we have five products here and so that's
an interesting thing about this project
is it's super expandable you can have as
many different products as you want you
can change these data around but one
thing that let's get into right now is
how do we dynamically load products like
I have like you know sunglasses a camera
coffee how do we know where to load
those from to make our lives easier I'm
going to go into the source folder and
make a Javascript file called products
store.js I'm making this a Javascript
file because I'm on to all of our
different components to have access to
the product information on our web page
so we can make an array of the products
by saying const products array is equal
to an array here and we can make objects
to represent the data for each product
for example every single product is
going to have an ID a name for example
coffee and then a price which I'm going
to make a double and make it 4.99 for
example and so we can make three
different products because I think
that's is a good amount for not going
super Overkill because I know it's kind
of annoying to write this stuff out we
can have the second product have an ID
of two I'm going to make that sunglasses
which I'm going to make let's say 9.99
and then the ID of three here and I'm
going to make this last one a camera and
I'm going to make this expensive I'm
going to say 39.99 for the camera and so
we can actually export this products
array at the bottom and this allows us
to oh and you need curly braces around
this because we're actually going to
export another thing as well spoiler
alert but this allows us to give this
array of data to any component inside of
our JavaScript project or inside of our
react project all we need to do is say
import productstore.js and grab the
products array from it a function that's
going to be helpful for us to get the
data of a product from only the ID is
going to be function get product data
from a certain item's ID this is nice
because let's say we only have the ID of
a product in our shopping cart for
example but we want to know the title
and the price of a certain product we
can make a helper function so we can say
okay get product ID with a certain ID
here it goes into this array and gets us
the data we need from a certain ID and
so we can use the array.find method here
and so we can say let product data equal
to products array which is an array
which we just defined right here dot
find What DOT find is going to do is
it's going to allow us to Loop through
every single element so the current
element it's looping through is called
the product and then we can use an arrow
here to represent what do we want to do
with this product well we want to see if
the product.id so for example it's
looping at this ID this ID this ID we
want to see if that is equal to the ID
that was passed in from our parameters
right here and you'll see visual studio
just lit up because now we're using the
ID parameter are here so if this ID was
the string 3 for example you could say
over here three and eventually it's
going to say okay first product this is
an ID of one that's not three ID of two
that's not three ID of three that is
three and so it's going to return this
full object is what product data is
going to be and so let's change this 3
back to ID and so if it finds no product
let's say we pass in an ID of four it
would have no product and so then that's
going to return undefined and so if the
product data is equal to undefined we
can just do a little console.log to help
us is we can say product
data does not exist for ID then we can
just add the ID to the end of the string
there and we can just return undefined
here I'm not going to handle this case
in this video actually but this is just
in case you know you want to make sure
you cover all the different cases you
can and at the bottom here we are going
to return product data for any
intermediate programmers or people more
familiar with this I already know what
you're saying but I'll think this is
worth explaining is product data if it's
undefined we're just going to return
undefined anyways at the bottom here the
reason why I'm adding this extra return
statement at line 25 is because I think
it makes it way more easier to read it's
if we have this product data equals
undefined we want to do certain logic as
a result of that I think just to explain
for the further mint of people's
learning is that we could get rid of
that line at 25 that was just there and
it would have the exact same code
because if it's undefined it'll log this
and then return here I kind of just
prefer this extra return statement
because it kind of makes the logic more
easy to read where like if it's
undefined we do these things we don't
want to like be like oh we console log
and then like fall into doing the next
thing it seems kind of odd to me so
that's why I keep the return undefined
here and so we can also export functions
alongside the regular products right
here so we can export this get product
data like this and this is going to
allow us to be able to call this
function anywhere else in our react
application so if we go over to our
store we can have a good example of
importing the products array so we can
go to store and at the top we can say
import products array from dot dot slash
products store and so this gives us
access to the actual products array if
we want to build columns based off of a
certain array of data remember it's
looking something like this an array
where it's an object and then another
object and then another object obviously
I'll do something like dot dots to show
that there's actually data inside those
objects but when we want to go over this
array we can use something called a map
and so let's delete all these different
column except for just one because now
we can create columns based off the
actual products inside the products
array we can do that by saying products
array dot map so map allows us to go
through every single element in the
array and then do certain logic based
off the element we are at and most
importantly return actual react jsx for
a certain element so we can Define the
product and the index here so if we're
mapping over a certain product let's say
three different products we can get the
current product wrap with this product
variable right here then we can Define
our logic by doing an arrow here and I'm
just going to do some regular Circle
braces like this the parentheses here
mean that it's expecting us to return a
jsx element immediately so that means we
can create an element of code for every
single product in our products array
because we're mapping over it it's also
important to notice that we can actually
use this product object that we're
currently on so if you go to our product
store and you look at every single
object here you'll see that we have a
title for example Apple we can access
this by saying product which is this
whole object here and then title which
is this property here so let's go over
here and we can do curly braces and say
product dot title we are also going to
use the index of where we currently are
at to make unique keys for our columns
this is just best practice for react so
let's go over to our application and see
what it looks like amazing so we have
access to the coffee sunglasses and
Camera which means we also have access
to the whole object of data there which
is really neat to make it look a little
nicer we can align this header on the
top to the center
and then also give it a class name it's
going to give it some padding so I'm
going to say P3 let's go see what that
looks like there we go way better and
now we can get started on creating an
actual separate component for all the
logic of our current product to live in
because we don't want to make our whole
components right here for example so we
can go into the components folder and
make a product card.js
we can Define the product car by saying
function product card like this and then
export default product card and for this
example we're actually going to have the
props of the element that we're going to
use as well and so we are going to pass
in the actual product through props dot
product so I'm just going to keep this
common just to make it helpful for you
guys props.product is a product we're
selling and it gives us access to all
the different information of that
certain product in order to make a nice
looking card for our product we're going
to need to import a couple of things
from react bootstrap I'm going to import
the card the button the form row and
column from react Dash bootstrap so
let's get started with styling the card
by returning here we can start with the
large overarching card so everything is
going to be living within this card then
we are going to have a card.body which
also again everything is going to be a
living within so these are the two
overarching ones we can start with car r
dot title which is going to give us a
nicely styled title for our card to use
and we can actually get access to this
prop stop product by saying const
product is equal to props.product and so
if we want to get the title of the
product we can look at the product store
see how these objects are structured and
like you can see it's going to be
product.title so we can say
product.title right here we can then do
a card.txt and we can similarly access
other properties such as product dot
price and I'm from the US I'm going to
put a dollar sign in the beginning here
also because we're going to be using a
USD for the stripe stuff but you feel
free to use whatever currency you want
then at the bottom here I'm going to
make a very simple button it's going to
have a variant of primary primary and
bootstrap is just a nice like bootstrap
blue color which you guys will probably
recognize and for now we're just going
to say add to cart which of course we
don't have the functionality for that
quite yet but now we have the full
product card so we can actually bring
this product card over to our store page
so we can import the product card like
this from component slash product card
for anyone unfamiliar with properties
I'll show you how that stuff goes down
right now we can create a product card
component like this but this is an
example of a product card with no
properties on it if we want to pass in
properties we can say that the product
property is equal to
product like this you might be like
product equals product what's happening
here this product is defining the
property and then this product right
here is looking at the product we are
mapping over is what's happening there
and so we're able to access this product
equals variable by if we go back over to
our product card we can say prop stop
product props is going to be a list of
all the different properties on our
component and that product is going to
be that object that's also why we're
able to say const product equal to
props.product and then get different
properties from that object for example
so now that we have an actual product
card being rendered let's go look at our
Local Host so this is a basic start to
the front end you'll see these add to
cart buttons they don't do anything
discard zero items also doesn't do
anything yet but don't worry we are on
our way so let's go over to our navbar
code and get started on creating that
module that pops up when you press the
cart button here and the model is that
little screen that makes everything
behind it a little bit darker and it
will show you all the different items
inside the cart so here I am in the
navbar component I'm going to separate
the navbar and the modal by creating a
react fragment around this code so we're
going to have the navbar be the first
component inside this react fragment so
now we can Define our modal modal has an
incredibly important show property which
means is the modal being showed or not
and we're going to set it equal to a
show variable that I'm going to create
in a second so I'm going to use the on
hide property so whenever the hide event
happens we can go call a certain
function I'm going to make a function in
a second called handle close and when we
click on the cart this little cart
button here we actually want it to show
the modal so on here we can say on click
is equal to handle show to store the
show variable I'm going to use the use
state from react and so we can import
use state from react u-state just allows
us to have local variables and don't
mind these errors we're about to fix
them up in a second and we can Define
the show variable by saying show which
is the variable and then the center to
the variable which is going to be set
show and I want to initially have that
modal not showing you could imagine it'd
be weird to load up a site and then the
cards like in your face right away so
it's going to be false initially and we
can make some nice simple one-liner
functions by using some Arrow syntax so
we can make the const handle close is
equal to an arrow function where we set
the show value to false so if that close
event happens or that on hide event
happens we hide the modal then we can
copy this code and we can then handle
the show so if we wanted to show the
modal we can set that show variable to
true and so before we go and test out
this functionality let's go and make a
couple more things here for example
we're going to need a modal dot header
and I'm going to give it the close
button property which just means it's
going to have a little button to show
the user they can close the card now
within the header I'm going to have a
modal.title which is just going to say
shopping cart then there's going to be a
modal.body which is where the majority
of our code is going to live for now I'm
just going to have an H1 say this is the
modal body pretty simple for now because
we're going to delete it later but now
let's go back to our website and refresh
it and see if we can access this modal
amazing so you guys will see we can
click on the cart and it's going to show
that little shopping cart modal this is
the model body we can also close it by
pressing this button here which is very
nice that's the nice thing about this on
hide event that we can listen to is
that's going to get called no matter if
we press on the outside or if we press
on this x here too so it's kind of nice
in that way as you guys see we don't
have any actual shopping cart logic in
our react website quite yet so what
we're going to do is we are going to go
and create a cart context by using
Create context from react context is
amazing because it allows us to store
the cart data so for example the IDS and
like the quantities of what item you
have in your cart and it also allows us
to store functions that we can call
anywhere in our entire application for
example if I wanted to add an item to
the cart we could call a function from
our context you don't have to fully
understand that but I'm going to get
into that right now and show you guys
what I'm talking about so we can go over
to the source folder here and I'm going
to get started by creating a cart
context.js context is particularly nice
when you need data or functions that are
necessary throughout a bunch of
different parts of your application so
we can get started by making a context
by importing create context and I'm also
going to need use State eventually so
I'm going to grab that while we are here
and I'm also going to get access to the
products array
and so let's get started by creating our
context we can say const cart context is
equal to a create context like this
contexts kind of have a flow where you
have the actual context so you can
imagine your cart add to cart you know
remove cards just you know this is more
like sudo code but just example like
that then you're going to have something
called a provider the provider gives
your react app access to all
the things in your context so you can
imagine if we wanted add to cart at a
certain you know component boom we got
it right here if we wanted to remove the
cart or whatever that means we could
have it right here that's just an
example of what this context is and we
initialize that by creating an object in
this create context here for example if
we wanted the items to the cart I'm
going to hold those inside of an array
variables are probably the easiest one
to understand for context if I want
access to the cart I can get that
anywhere I want but add to cart is a
little bit different so if we want to
add functions to our context it's going
to look a little bit different if I
wanted a get product quantity function
for example I'm going to set it equal to
an empty Arrow function which is going
to have no logic you might be like why
do we have this weird function with no
logic because I'm about to do this like
six times this is why I'm explaining
this just so you guys know is because we
don't Define the functions right inside
of the context all the context is saying
is that we can define a function for get
product quantity we're gonna have of
code down here which is going to help us
create the full code for get product
quantity and then when we actually have
a function for get product quantity we
can then pass that to our provider
hopefully that makes sense the context
you're just saying a function should be
here
when we actually pass values to our
provider which of course I'm going to
show you guys that is what's important
those values to the provider we can
actually pass the functions in then this
context is just saying we have room for
a function to exist here it's probably
the easiest way to think about it so if
we want to add an item to the card I'm
going to call it add one to cart and
again just an empty function with no
logic and we can just copy this line
over and over I'm going to remove one
from cart I'm going to delete from cart
and so that's going to be helpful for if
we just want to boom all at once delete
all the items from the cart as opposed
to one at a time then I'm also going to
get the total cost of the cart this is
going to be a helper function that's
going to help us for when we want to see
the total at the end and so to give our
application access to this context we
can say export card context here we can
now get started by working on the cart
provider that I'm talking about export
function cart provider then we're going
to get access to all the children of
this element I would say don't be too
concerned about what this children
property means it just means that if we
were to wrap cart provider like this for
example anything inside of here is going
to be the children and so if we wanted
to wrap around it our entire application
for example we'd want to make sure our
entire application goes on the inside of
this if that makes sense so inside of
our provider at the very bottom just to
show you guys what we're leading to
First we're going to have a very simple
return cart context dot provider value
is equal to context value which I'm
going to Define in a second and then
we're going to pass in the children is
why that weird children variable is
necessary and so we can even Define the
value to our context I don't know if
it's going to
throw errors but let's see items is
going to be e",,
",,
qual to a state eventually,,,
I want to see what it does for get,,,
product quantity is it going to be an,,,
error and not yet okay so we can,,,
actually have all these different,,,
properties here and I'm just going to,,,
copy it like this and then just delete,,,
like this saves us some time because,,,
what we're doing here is we are going to,,,
Define all these different functions so,,,
we can get started doing that and we,,,
also want to Define items,,,
so we can make a state that is specific,,,
to our provider and we can do this by,,,
saying const I'm just going to say cart,,,
products Set Card products is equal to a,,,
use state with an empty array and so we,,,
can actually set these items here equal,,,
to this state you might be like okay,,,
this is kind of confusing why do we have,,,
an empty array of cart products well,,,
what's going to happen is when we create,,,
these functions we are going to use this,,,
cart product state to manipulate what,,,
our provider is giving to the rest of,,,
our application you can imagine add one,,,
to cart is a great example I have this,,,
provider and it's showing information to,,,
my whole application if I add one to,,,
cart I can go to this array add an item,,,
to it and then this value that's being,,,
tossed to the rest of our application is,,,
going to have that new added item to it,,,
because it's referencing this car,,,
product state so here's the fun part of,,,
this video is this is actually really,,,
great JavaScript practice for anyone,,,
who's not familiar with JavaScript or,,,
hasn't really worked with it much so,,,
seriously I would say from coding this,,,
myself really great practice for making,,,
all these different functions and just,,,
to explain one final thing before we get,,,
into making all these functions in our,,,
cart we are going to store the ID let's,,,
say is one and then the quantity of how,,,
many of those items we have in our cart,,,
that's all the information we're putting,,,
in our card just to make things as,,,
simple as possible so we don't have a,,,
bunch of other data kind of swimming,,,
around in there right and so I'm going,,,
to leave this comment here just to show,,,
you guys this is the data that we're,,,
working with an edge cart with let's say,,,
it has two id1 items a cart would,,,
actually look like this so our car,,,
products array would look like this for,,,
example,,,
so if we wanted to figure out the,,,
quantity of let's say a certain ID we,,,
can make the function here we can say,,,
function get product quantity,,,
have it be a certain ID and we can say,,,
Okay cart products dot find and this is,,,
why I say it's such a great JavaScript,,,
practice because we're going to use a,,,
lot of these array functions and so dot,,,
find gives us access to the current,,,
element that We're looping over so for,,,
example the current product and we can,,,
see if the product dot ID is equal to,,,
the ID that we passed into this function,,,
and so I'm going to show you guys a cool,,,
like a mistake on purpose to you know,,,
further your learning is we can say dot,,,
quantity so if we find the product with,,,
a certain ID we want to get its quantity,,,
but imagine what if this were to happen,,,
undefined dot quantity that's going to,,,
be an error because you can get the,,,
property quantity out of undefined it's,,,
going to toss like a red error not like,,,
a joke in round error and so if we want,,,
to safeguard from that what we can do is,,,
this is we can add a question mark right,,,
before the dot this means that if this,,,
dot find gets us an undefined object,,,
pretty much meaning there is no product,,,
with a certain ID for example we you're,,,
not going to ask for the dot quantity,,,
but if this dot find becomes an actual,,,
object of data for example if it's ID of,,,
1 it's going to give us this object then,,,
we're going to get the quantity property,,,
it's kind of some cool syntax because it,,,
allows us to grab this quantity here and,,,
if quantity is undefined we can then,,,
return zero which is nice because you,,,
know we don't want to return undefined,,,
for example otherwise we know that,,,
quantity is going to be that actual,,,
number for example 2 in this case and we,,,
can return quantity at the bottom here,,,
so just to run through this code for an,,,
example let's say we have the ID of one,,,
and goodness that's my bad that was,,,
commented wrong but let's say we have,,,
the ID of one here and I pass in one,,,
what's going to happen is we're going to,,,
go through carb products which let's,,,
imagine is this array and we're going to,,,
find the product where the product ID is,,,
equal to the ID we passed in so if one,,,
is equal to 1 it's going to give us this,,,
full object and from that full object,,,
right here we're going to grab the,,,
quantity out of it the quantity is then,,,
going to be 2 as we have right here two,,,
isn't undefined so it's going to pass,,,
this and then go and return to so that's,,,
the explanation of that function and,,,
guys if you're new to JavaScript I would,,,
say don't get discouraged this is kind,,,
of some more intense code which is kind,,,
of why the video is longer and so really,,,
don't be discouraged if this is kind of,,,
hard to understand just really try our,,,
best all right so that's all I really,,,
have to say forget product quantity we,,,
can now get started by creating the,,,
logic for add one to cart so we can say,,,
function add one to cart then we can,,,
pass in the ID so from the front end we,,,
can be at you know the id1 for example,,,
and we're going to say hey I want to add,,,
one of these to the cart so initially,,,
we're going to ask for the quantity of,,,
the certain product and this is why this,,,
code is so cool is because we can say,,,
const quantity is equal to get product,,,
quantity of the ID why do we need this,,,
line so much well because we need to see,,,
if there's zero elements or if there's,,,
one element take a look at line 17 real,,,
quick if I wanted to add one more item,,,
to the ID of one here I would have to go,,,
in here and say okay go to the quantity,,,
of 2 and then add 1 to it which makes it,,,
three but if I had a product with an ID,,,
of 2 what would we have to do oh we,,,
would have to add another object here,,,
and say ID is 2 set the quantity of that,,,
equal to one so this is an example of,,,
what logic we need to do is we can say,,,
if it already exists for example if the,,,
let's say the quantity is equal to zero,,,
because that's kind of the case that we,,,
return here then we know we have no,,,
objects there and so that's going to be,,,
our two different things is product is,,,
not in cart and then the else statement,,,
is product is in cart and so now we can,,,
actually set our state so we haven't,,,
used the setter for our state yet if the,,,
quantity is zero what we can do is we,,,
can set carp products equal to an array,,,
of elements and we can use the spread,,,
operator on dot dot dot cart products so,,,
that's just saying take all of the,,,
objects that are already in our cart and,,,
put them to the front of this array then,,,
on top of all the objects that are,,,
already in our cart we want to add,,,
another one which is going to have an ID,,,
of the ID we passed in here because,,,
that's the item we're adding to the cart,,,
and it's going to have an initial,,,
quantity of one and so if the product is,,,
in the cart we are then going to use set,,,
carp products again inside of here we,,,
can then say cart products.map I'm going,,,
to show you guys this map one thing at a,,,
time what we're doing is we're going to,,,
go through every single object inside of,,,
carp products let me bring this array,,,
down for an example here if I wanted to,,,
add to the product ID of 2 for example I,,,
would go map over this object and I,,,
would say okay,,,
is this object of the product id2 no,,,
it's product id1 so I'm just going to,,,
keep this object here then I'm going to,,,
go to idf2 and I'm going to say okay,,,
instead of giving the quantity of 1,,,
again I want to add to my cart,,,
products.map the quantity of one plus,,,
one and so we can write that logic out,,,
by saying okay take the product we're,,,
currently mapping over and if the,,,
product.id is equal to the ID we're,,,
passing in we can then use something,,,
called a ternary operator which I can,,,
say question mark which means if that's,,,
true if the product we're currently on,,,
is of a certain ID then we want to,,,
change that object and add a different,,,
property to it is kind of a way to think,,,
about it instead return and this is kind,,,
of confusing syntax so bear with me dot,,,
dot dot product,,,
which is saying all the different,,,
properties of product,,,
put them in here so if product is an,,,
object and you say dot dot dot to the,,,
object it's going to use a spread,,,
operator to give you the ID of 1 and the,,,
quantity of three and then we want to,,,
overwrite the quantity so we can say,,,
quantity is equal to product dot,,,
quantity because remember with the map,,,
operator we have access to the current,,,
product we're at through this product,,,
variable so if we were at this first one,,,
it would be this object for example and,,,
so that's how we're able to access the,,,
quantity but if we look at our example,,,
here we wanted to add one to that,,,
quantity so we can say plus one and so,,,
that's the logic for adding on this new,,,
object with an extra one on top of the,,,
already existing quantity so you can,,,
imagine if the current products quantity,,,
was 3 then you would have three plus one,,,
it would give you four instead in your,,,
cart we can then use a colon which is,,,
the kind of the else statement and so,,,
you can imagine this like,,,
if statement is true and then over here,,,
is going to be,,,
if statement is false and then down here,,,
is going to be the if condition that's,,,
kind of how you should think about this,,,
dot map code and so else what do we want,,,
to do we just want to add the product,,,
back to our array like normal so we can,,,
just use the regular product object and,,,
so just for learning's sake you can fast,,,
forward if you guys already get this but,,,
just for anyone who might be a little,,,
bit lost let's run through this code,,,
we're mapping over carp products which,,,
let's say is this array and we want to,,,
add to the ID of 2. we can start mapping,,,
and start with our first product okay,,,
which is this product right here does,,,
this product ID equal to no it's one one,,,
doesn't equal two and so it's going to,,,
enter the else statement and this map is,,,
slowly building up an array that looks,,,
like this and so at this point we just,,,
have this now our map is going to access,,,
the second product and we're going to,,,
say is the product ID equal to the ID of,,,
2 well it is we want to add the product,,,
ID of 2 you and this is the two products,,,
so instead what we're going to do is we,,,
are going to take this entire product,,,
which is pretty much what the spread,,,
operator is saying and instead show the,,,
quantity Where we take the current,,,
product quantity and add one to it so,,,
our code is literally doing this take,,,
the entire product and then add 1 to the,,,
quantity so AKA it's going to become 2,,,
on the quantity here,,,
I know these Maps can kind of be,,,
interesting and weird and this is like I,,,
would argue Advanced JavaScript because,,,
we're using a map and then we're also,,,
using a ternary statement so if you're,,,
confused about the question mark in the,,,
colon that's called a ternary statement,,,
but you can kind of see the logic right,,,
here and so before I do remove one from,,,
cart I'm actually going to do delete,,,
from cart so we can say function delete,,,
from cart and we're going to take a,,,
certain ID so delete from cards that's,,,
going to totally wipe out whatever,,,
amount of products from our cart of a,,,
certain ID of course if we had like 20,,,
sunglasses it would take all 20 of them,,,
out of our cart in one function call so,,,
we can start by setting our cart,,,
products State we can get the current,,,
value of our state by saying cart,,,
products and then using an arrow we are,,,
then going to use this value of carb,,,
products and we're either going to,,,
filter over it filter pretty much does,,,
this it starts with an empty array and,,,
if an object meets a condition then it's,,,
going to add the object to array that's,,,
the most basic way of thinking about,,,
what filter does so I'm going to put,,,
this comment up here actually so if I,,,
had you know product one product two,,,
product three and I wanted to remove,,,
product with an i I'll just say this is,,,
an ID of two for example what I could do,,,
is I could pass in a filter and I could,,,
say okay as long as the product doesn't,,,
have an ID of 2 pass it over okay is,,,
product one and ID of two nope it's not,,,
which is good pass it over to the new,,,
array so product one here is product two,,,
well that does have an idea of two so we,,,
don't want that thing anymore then,,,
product three three is not two so boom,,,
that's kind of the basic way to think,,,
about how filter is working and so we,,,
can take the current product or app by,,,
saying current,,,
product use an arrow and then we're,,,
going to Define some Logic for okay what,,,
is the actual condition here the actual,,,
condition is going to return the current,,,
product dot ID doesn't equal ID and so,,,
if this is true the current product is,,,
good to go it's going to get passed to,,,
our new array if it's false for example,,,
2 doesn't equal 2 that's false right and,,,
so if it's false it's not going to add,,,
it to our new array and so that's a cool,,,
way to use filter to build a pretty,,,
simple delete from cart and so let's go,,,
back to above delete from cart and we,,,
can make that function remove one from,,,
cart I'm just going to take an ID and so,,,
we can again get the quantity of a,,,
certain item by saying const quantity is,,,
equal to get product quantity of ID if,,,
the quantity is currently equal to one,,,
we are then going to delete the product,,,
fully from our cart by saying delete,,,
from cart of the certain ID this is,,,
because if you only have one left and we,,,
take one away what's our quantity going,,,
to be so going to be zero right so in,,,
the else statement we are then going to,,,
define a Set Card products so we're,,,
changing that cart State once again and,,,
we can map over the cart products here's,,,
the thing though check this out I don't,,,
even have to explain the logic again,,,
because instead of adding one to the,,,
quantity we are going to remove one from,,,
the quantity so scroll up to your add,,,
one to cart and grab the Set Card,,,
Products near the bottom of that,,,
function we can paste it in here and the,,,
same exact logic applies but instead,,,
we're going to say product.quantity,,,
minus one and so that's pretty much the,,,
full Logic for remove one from cart is,,,
we're saying okay instead of adding one,,,
we're going to remove one and so the,,,
same logic as to how I explained above,,,
applies here but it's pretty much going,,,
to Loop through an array like this for,,,
example and when it sees that item's,,,
quantity for example if it saw the three,,,
here and we want to delete one of the,,,
IDS of one we would just say -1 and give,,,
us that new 2 value for example I'll,,,
also mention we don't really have a case,,,
here to handle quantity of zero so feel,,,
free to add that if you want but in our,,,
front end we're only going to be able to,,,
access remove one from cart if we have a,,,
button showing that we already have,,,
something in our cart pretty much so,,,
that's why I don't have that case here,,,
if you're curious about that okay now we,,,
have to get the total cost of our cart,,,
which is a cool kind of fun function,,,
because it requires us to get some,,,
external data so we can say function get,,,
total cost and we don't even need a,,,
parameter because this is going to get,,,
the total cost of all the different,,,
items in our cart so we need every,,,
single item I'm going to start by,,,
initializing a variable by using let and,,,
initializing a total cost equal to zero,,,
and so if we want to get the cost of a,,,
certain item we actually need to get the,,,
data of a certain item so we can go up,,,
to the top and go to our product store,,,
we can also say get product data here,,,
this is a great example of when we can,,,
use this function to not have to rewrite,,,
the same logic over and over so first,,,
let's start by mapping over our cart,,,
products array so I'm going to call it a,,,
cart item and then we're going to point,,,
an arrow function to the logic that we,,,
want to use for this map I'm going to,,,
use a const product data is equal to get,,,
product data of the cart item dot ID,,,
because remember inside of our cart we,,,
only have access to the IDS so if we,,,
want the product data for example the,,,
title and the price is going to be the,,,
most important one here we can then add,,,
to our total cost by saying total cost,,,
plus equals the product data dot price,,,
times the cart item dot quantity and so,,,
this product data object gives us access,,,
to the price here and we can see how,,,
many of a certain price do we have in,,,
our cart by looking at the quantity here,,,
if we were to have three different items,,,
that were worth ten dollars it would say,,,
3 times 10 is going to give us 30 and,,,
would add 30 to our total cost and so we,,,
can return the total cost at the bottom,,,
here all right so if you made it this,,,
far you are now officially a JavaScript,,,
array master and congratulations we can,,,
go to the bottom here and say export,,,
default cart provider,,,
and just to explain this kind of finally,,,
is we have this context value and all of,,,
these functions are now a different,,,
color because they are being defined as,,,
such above and then these functions we,,,
can access throughout our application,,,
because we're passing them into this,,,
value,,,
in order for our app to access this,,,
context we need to take this cart,,,
provider and wrap it around our whole,,,
application so let's go to app.js and,,,
then let's import cart,,,
Provider from cart context we can then,,,
go around our entire app and take this,,,
provider element and then wrap it around,,,
the entire container so now anywhere,,,
inside of here is going to have access,,,
to the cart context let's go over to our,,,
local host and make sure everything,,,
still looks like a chip I'm going to,,,
start by working on the product cards,,,
and making this add to cart button,,,
actually add to our cart so in order to,,,
actually use the context which is going,,,
to be that cart value it's going to be,,,
all those different functions we just,,,
defined we need to do two things we need,,,
to import the cart context from card,,,
context and we also need to import use,,,
context which is a hook provided to us,,,
from react and so if we want to access,,,
the almost cart object you could imagine,,,
we can say const cart is equal to use,,,
context of the cart context and so if we,,,
do cart dot you can see we have access,,,
to all the different things here all the,,,
different properties of of our context,,,
which are being defined over in our cart,,,
context at the very top right here,,,
so check this out we can actually use,,,
our contacts for once we can say const,,,
product quantity is equal to cart dot,,,
get product quantity and we can pass in,,,
the product dot ID because if we go over,,,
to our cart context we can go and check,,,
out get product quantity and it's going,,,
to have the ID here so this is going to,,,
allow us to see if we have an item that,,,
is in our cart or not and we can also,,,
change this add to cart button to add,,,
something to our cart by saying on click,,,
so when this button gets clicked we're,,,
then going to call a function called,,,
cart dot add1 to cart boom with the,,,
product.id and so this is pretty cool,,,
check this out I'm going to console.log,,,
cart dot items it's going to be a bunch,,,
of different logs which is totally fine,,,
for now but we can go and see that,,,
products are actually getting added to,,,
our card in the front end so as you'll,,,
see it's logging that array a bunch of,,,
times and boom I can add these two,,,
things now and check this out I now have,,,
a coffee ID of one has a quantity of one,,,
and then sunglasses which I clicked on,,,
idf2 quantity of one check that out so,,,
if I want to add like a bunch of,,,
different coffees for example I now have,,,
a coffee with a quantity of five one,,,
issue though is we want to be able to,,,
adjust the items values in our cart for,,,
example so whenever we see that we have,,,
coffee has at least one thing in our,,,
cart we're actually going to show a,,,
different thing on this component it's,,,
going to have that remove button and,,,
it's going to have like those uh plus,,,
and minus buttons as well and so we can,,,
make that logic by going in here and,,,
saying a little ternary statement where,,,
you say product quantity if it is,,,
greater than zero for example then we,,,
can show a different piece of code and,,,
I'm just going to make it an empty,,,
element for now then we can do a colon,,,
for the else statement and I can go in,,,
here and take this button and add it,,,
right there so if the quantity is equal,,,
to zero it's going to show add to cart,,,
but if it is at least one item then we,,,
want to show a different interface here,,,
so I'm going to go in here and create a,,,
pretty basic form and I'm going to do,,,
something called as row which gives us,,,
to access to some row styling inside the,,,
Forum which is nice I'm going to do a,,,
form.label its column property is going,,,
to be set to true so it's treated as a,,,
column in the row which don't worry if,,,
you don't understand the stuff fully and,,,
it's going to take up six columns inside,,,
of the row and I'm going to make it say,,,
in cart then I can say the product,,,
quantity right there so we can even use,,,
these variables to show kind of like,,,
interactive data to our user and because,,,
this form is being shown as a row I'm,,,
going to go in here and make a column,,,
that's going to take up six different,,,
slots in bootstrap I'm then going to,,,
make two different buttons they're going,,,
to be a sm6 here and I'm going to make a,,,
class name of MX2 this is just going to,,,
give some margin across them one of the,,,
buttons is going to say plus and the,,,
other button is going to say minus so,,,
let's go and see what this looks like in,,,
our react application amazing so right,,,
now we can add to cart and then we are,,,
stuck here forever which is pretty funny,,,
these plus and minus buttons don't work,,,
so let's go get working on that we can,,,
change these buttons to on clicks and so,,,
whenever the button gets clicked we can,,,
run certain code for example if we hit,,,
the plus button we're going to want to,,,
run the cart dot add one to cart and,,,
it's going to take a product.id and then,,,
for the minus button we can say I,,,
actually want to remove one from cart,,,
which is that other function we made,,,
inside of our cart and while we're here,,,
we can make this large button that kind,,,
of goes in the bottom of our card I'm,,,
going to say button variant is equal to,,,
Danger that's going to give us that red,,,
coloring from bootstrap and I'm going to,,,
give it a class name of margin Y and y-2,,,
it's going to give us some margin in the,,,
y-axis it's going to say remove from,,,
cart and when we click this dangerous,,,
button on the bottom here I'm going to,,,
say on click is equal to calling the,,,
function and I'm going to go to cart dot,,,
delete from card and so that is that,,,
function that's going to totally erase,,,
the item from our cart which we can say,,,
product.id right here and so this is why,,,
making that context is so helpful is,,,
once we have these context functions we,,,
can really do whatever we want with our,,,
react application and all we need to do,,,
is just call the function whenever we,,,
need it so let's go back to our front,,,
end see what this looks like all right,,,
so we can add to cart we can add items,,,
we can remove items and this console.log,,,
is crazy I'll remove it in a second and,,,
we can also fully remove from the cart,,,
like this,,,
add to cart remove from cart add to cart,,,
add a bunch of sunglasses remove them,,,
all add a camera,,,
there you go and so now we have full,,,
functionality where we can add whatever,,,
items we want to the cart dot items,,,
inside of our card context one thing,,,
that I'm going to go work on now is look,,,
at this cart in the top right it just,,,
says cart zero items that's not very,,,
cool it's not even showing how many,,,
items we currently have in our cart so,,,
let's go over to our nav bar and add the,,,
code is going to use our card context in,,,
the nav bar so I'm going to go over to,,,
the nav bar and just like I said before,,,
we're going to use that generic setup,,,
where we import the cart context from,,,
our dot dot slash cart context then we,,,
also import use context as well oh and,,,
we already imported from react above so,,,
we can actually just add this use,,,
context to that,,,
and to access that cart context we could,,,
say const cart is equal to use context,,,
of the cart context we actually didn't,,,
make a function inside of our card,,,
context to get the amount of the total,,,
items inside of our context but this is,,,
actually a really cool way of looking at,,,
it is if you ever need extra,,,
functionality for looping through your,,,
items let's say it's a one-off thing you,,,
don't really use often so you don't want,,,
to exactly make a whole function for it,,,
and add it to your context you can still,,,
do something like this let's make a,,,
const products count and we can set it,,,
equal to cart.items we can Loop through,,,
the card items and get the total amounts,,,
of all the different products quantities,,,
from our cart I'm going to use a DOT,,,
reduce and so this video is really,,,
showing off all of the different array,,,
functionality you can make I think we,,,
might have hit every single one it's,,,
wild but for reduce we can have two,,,
different things the sum and then the,,,
product we can then do an arrow function,,,
to define the sum in the product so,,,
whenever we go through an item inside of,,,
our list we are going to reduce and go,,,
to that product and we're going to add,,,
to a kind of counting up sum that's,,,
running every single time so we can say,,,
sum plus product dot quantity and then,,,
we also want this counter to start at,,,
zero so what this reduce is going to do,,,
is it's going to give us access to all,,,
the different products.quantities so,,,
what this reduces doing is it's kind of,,,
summing up all the different,,,
product.quantities and then this entire,,,
statement here is going to return a,,,
number and we can access that number,,,
through products count so let's go over,,,
to our card zero items here and we can,,,
actually put in some curly braces and,,,
add in products count do some,,,
parentheses around this like this just,,,
for styling so now our NAB bar is going,,,
to actively refresh and show the latest,,,
up-to-date products count value so if we,,,
had five items in our card for example,,,
it's going to show five items let's go,,,
back to our front end and see this as we,,,
add items to our cart it is showing the,,,
amount of items total so I have three,,,
coffees one sunglasses and one camera,,,
it's showing cart with five items at the,,,
top right here which is super cool this,,,
is a perfect example as to how we can,,,
use the values from our cart context in,,,
order to create functionality throughout,,,
a bunch of different react components so,,,
now let's get started on this shopping,,,
cart and have it say something that,,,
isn't this is the modal body so we can,,,
use the card data to show actual cart,,,
items here so let's get started on that,,,
so in our modal.body we can make some,,,
functionality to show different things,,,
if we actually have items to show to the,,,
user so if products count is greater,,,
than zero you might want to show,,,
something else if products count is you,,,
know nothing then we can show to the,,,
user a little header that says there are,,,
no items in your cart otherwise I'm,,,
going to create a little react fragment,,,
here and so this is where our actual,,,
card data is going to live and so I'm,,,
going to make a paragraph to start and,,,
I'm going to say items in your cart and,,,
we can list the items below as we've,,,
done many times in this video we can get,,,
some practice with the,,,
cart.items.map we can take the current,,,
product then also the index here and,,,
then use parentheses at the end here to,,,
return and element right away for now,,,
I'm just going to do a simple H1 and,,,
it's going to show the current product,,,
dot title and so before we look at that,,,
I'm also going to do an H1 on the bottom,,,
that's going to show our total in the,,,
cart so we can say total is equal to and,,,
here's a really good example of how we,,,
can use curly braces and even within,,,
curly braces we can call that cart.get,,,
total cost and an easy way in JavaScript,,,
to round values is we can do dot two,,,
fixed of two this is going to round our,,,
values so it only has two values after,,,
the decimal because JavaScript has,,,
problems with super long repeating,,,
numbers for example and we don't even do,,,
any payment validation on our end,,,
because we just send all the information,,,
to stripe then at the bottom here we can,,,
have a button which is going to be green,,,
so I'm going to make it a variant of,,,
success to show that successful green,,,
and this button is just going to say,,,
purchase items so kind of just a button,,,
to purchase all the different items in,,,
your cart so let's go and check out what,,,
this looks like so I'm going to add some,,,
sunglasses is in a camera,,,
and okay we don't quite see anything,,,
quite yet in items near cart let's go,,,
check this out my bad it's because,,,
it's actually because we don't have,,,
access to the title here because this is,,,
the product that is inside of our cart,,,
so we're going to go to the ID instead,,,
so we can look at that so although it's,,,
simple we can see that in our shopping,,,
cart model we know that we have an ID of,,,
2 and an ID of three in our cart and so,,,
to kind of make the logic more simple we,,,
can make a component to show the,,,
different cart products inside of our,,,
cart specifically so I'm going to go,,,
over to components and I'm going to make,,,
a cart,,,
product.js we can start by defining this,,,
as a functional component called cart,,,
product and it's going to take in some,,,
props because we're going to get that ID,,,
in that quantity in order to make a nice,,,
looking component from that data and so,,,
we can export default cart product just,,,
to get that out of the way I'm going to,,,
import a button from react bootstrap and,,,
you can import components specifically,,,
by doing this button syntax I'm also,,,
going to import the cards contacts,,,
because I want to get access to the,,,
delete function inside of our cart,,,
context so I can say from dot dot slash,,,
cart context then we're also going to,,,
need that import use context from react,,,
then I'm also going to import that very,,,
important function get product data so,,,
we can take those IDs and get the title,,,
and the price from them amazing so,,,
that's everything we need to get started,,,
so let's get started by saying const,,,
cart is equal to use context of the cart,,,
context just to set that up and so I'm,,,
going to pass in the ID and the quantity,,,
as props and so the ID is going to be,,,
equal to the props.id and the quantity,,,
is going to be equal to the props dot,,,
quantity using these props I can also do,,,
things like get the product data of a,,,
certain ID so we can say get product,,,
data of the ID that we have at line 8,,,
for example so now at the end we can,,,
return I'm going to make this a little,,,
react fragment so we have everything to,,,
live inside here I'm going to make an H3,,,
3 to hold the title of the product so,,,
I'm going to say H3 product data dot,,,
title I'm going to make a paragraph here,,,
and I'm going to say,,,
quantity total so you know three total,,,
products for examples without be showing,,,
us I can make another paragraph",,,
 to show,,,
the total price of all these things I,,,
can make a dollar sign there then I'm,,,
going to say Quantity so how many,,,
products do we have and then I'm going,,,
to get that price by going to product,,,
data dot price I'm also going to use,,,
that dot to fixed,,,
of two just to make sure we don't have,,,
any crazy long trailing decimals then,,,
I'm going to give the user a button,,,
which I'm going to say is a size small,,,
and it's going to allow the user to,,,
remove a product from their cart while,,,
they're within the cart and so when we,,,
click on this button we want to have the,,,
on click be ran and we want to point it,,,
to a cart dot delete from cart and we,,,
can take the current ID that this car,,,
product component was created with then,,,
I'm going to have an HR at the bottom,,,
here and this is just going to be a,,,
little like line break to show a little,,,
style between different products so if,,,
we go over to our nav bar here we can,,,
actually show our card product instead,,,
of this H1 here so let's go to the top,,,
and import cart product from dot slash,,,
cart product instead of showing this,,,
element here you can instead make a cart,,,
product like this and we're going to,,,
expect two different parameters first,,,
one is we're going to set the ID equal,,,
to ID and the second one is we're going,,,
to set the quantity equal to quantity,,,
also going to set the key here equal to,,,
the index oh my bad these should be,,,
currentproduct dot ID and then the,,,
current product dot quantity there we go,,,
and so now we're making car products for,,,
every single thing in our cart so let's,,,
go over to our front end so let's add,,,
everything to the card just to test it,,,
and amazing so we have one coffee which,,,
is gonna be 4.99 total and then look we,,,
have sunglasses it shows we have three,,,
total and it even adds up that total,,,
price to sunglasses times three and we,,,
have one camera let's try to remove,,,
these sunglasses for example because,,,
that's three different totals so we can,,,
remove,,,
like that and now that's going to be,,,
gone from our cart the cool thing is,,,
even though we're in the modal look at,,,
our nav bar it's still updated to show,,,
that we have two items in our cart so we,,,
have fully completed the react portion,,,
of this which is super great news this,,,
means we can get into adding the stripe,,,
API on top of this project when you,,,
press this purchase items button right,,,
here we're going to make a stripe API,,,
call to make a checkout with a actual,,,
stripe account so let's get started by,,,
setting up our stripe account so go on,,,
over to stripe.com and we can start by,,,
creating an account press sign in on the,,,
top right and then create a stripe,,,
account or sign in with one you already,,,
have so the stripe actually makes this,,,
as easy as possible for you as soon as,,,
you sign up you're going to see this,,,
four developers on the right here you're,,,
going to want to reveal your secret key,,,
copy the secret key and save it,,,
somewhere else so let's just do that now,,,
on the bottom here I'm going to split my,,,
terminal you can also just open a new,,,
terminal,,,
and you're going to want to make sure,,,
you're not in your store folder anymore,,,
and I'm going to just make a server.js,,,
and so we actually need a backend server,,,
to handle these stripe calls so we're,,,
going to make a very simple Express,,,
server but for now just copy paste your,,,
secret key inside here so we can use it,,,
later and let's go back to stripe so now,,,
we can get started on creating products,,,
in our stripe account we can go to the,,,
products tab here and then we can add,,,
our first test product and press add a,,,
product here first I'm going to add a,,,
product called coffee and I'm going to,,,
make it worth 4.99 and I want to make it,,,
a one-time payment,,,
and we can save the product by going up,,,
here,,,
so when we create products it's going to,,,
give us a price ID which references that,,,
product so make sure to copy this ID and,,,
then bring it over to your text file and,,,
just say something like coffee is equal,,,
to that certain ID we can then press,,,
back here to go to products and make,,,
another product I'm going to call this,,,
sunglasses and sell it for 9.99,,,
make it a one-time payment save that,,,
product and again this price ID is super,,,
important copy it here and bring it over,,,
to your text file,,,
then finally we can go back to products,,,
and make another product and we're going,,,
to make that camera which we're going to,,,
sell for 39.99 and make it a one-time,,,
payment and make sure to copy this API,,,
ID here bring it over your text file,,,
okay so I know that was kind of tedious,,,
but that stuff's pretty necessary for,,,
setting up stripe but now we have,,,
everything we need we have the secret,,,
key and also the three price API keys,,,
for our products so now we can get,,,
started by creating a full back end,,,
that's going to handle our stripe,,,
requests I'm going to say npm init dash,,,
dash yes and make sure you are on the,,,
most outside folder you're not inside,,,
your react folder because this is going,,,
to be a package specifically for our,,,
server.js to use a bunch of different,,,
npm packages so you should have a,,,
server.js and then also a package.json,,,
with nothing in it right now I'm going,,,
to npm install a couple of things,,,
firstly I'm going to npm install Express,,,
to make an Express server then I'm going,,,
to NVM install cores and I'm also going,,,
to install stripe this is all we need to,,,
make a pretty basic background let's get,,,
started by creating the require,,,
statements that are necessary for our,,,
back end first we're going to need,,,
Express which we can say cons Express is,,,
equal to require Express then we're,,,
going to need cores I'm going to say our,,,
cores is equal to require cores cores is,,,
just going to allow any IP address to,,,
access our Express server this is so you,,,
guys don't run into any weird errors on,,,
the react side of things and I'm also,,,
going to initialize Strife by saying,,,
const stripe is equal to require stripe,,,
and stripe requires an extra parameter,,,
which is going to be parentheses and,,,
then an empty string and we did that,,,
empty string it's going to require you,,,
to get that secret key that we have,,,
Above So copy this full secret key and,,,
make sure you get all the characters in,,,
there and then save that this is,,,
initializing a stripe client,,,
specifically for our account we can then,,,
create our Express server by saying,,,
const app is equal to express we can,,,
have our app use middlewares such as,,,
cores I'm also going to app.use Express,,,
dot static public it's just something,,,
that is recommended by the stripe,,,
documentation specifically is it wants,,,
our express application to use this then,,,
we can also use app.use express.json,,,
so our experience application is pretty,,,
simple it's just going to have one post,,,
so we can initialize a post request to,,,
our Express server by saying app.post,,,
and we can tell it what path to the,,,
server I'm going to say slash checkout,,,
is going to be our path I'm then going,,,
to make the functionality asynchronous,,,
within here and we're going to get the,,,
request and the response from the user,,,
I'm going to make a comment here,,,
explaining what's going to happen is on,,,
the react side of things we are going to,,,
pass in some data to the actual request,,,
so it's going to have a,,,
request.body.items which is going to,,,
look something like this it's going to,,,
be an array and it's going to have the,,,
ID then also the quantity how many of a,,,
certain ID do we need for example and,,,
that's what the dot items is going to,,,
look like,,,
stripe uses a thing called line,,,
underscore items so stripe wants data,,,
formatted in this way it wants an array,,,
still but instead of an ID it wants it,,,
to say price is this kind of annoying,,,
yes but it's okay if we know that our,,,
data from our front end is going to look,,,
like this we can just kind of make a new,,,
variable to hold what stripe wants so,,,
I'm going to make a line items equal to,,,
an empty array because that's what,,,
stripe calls items is line items for,,,
their API call and so I'm going to go,,,
and set a constant variable actually,,,
equal to the items we're getting from,,,
rec.body.items if we send this items,,,
through the body here we can get access,,,
to it like this and so we can say,,,
items.4 each so for each item we are,,,
going to take a look at the item in,,,
there and then we are going to add two,,,
line items and say dot push an object,,,
that is formatted in the way that stripe,,,
wants for us to process payments so we,,,
can push an object such as price is,,,
equal to our item.id and then the,,,
quantity is going to be equal to our,,,
item dot quantity and so line items is,,,
going to be our properly formatted data,,,
that we are going to send over to stripe,,,
so we can initialize our session with,,,
stripe by saying const session is equal,,,
to await because we're going to make a,,,
stripe call here that requires a weight,,,
so we can say stripe dot checkout and,,,
this is using the actual stripe object,,,
to use this this stripe object that we,,,
imported and it's going to have a DOT,,,
sessions and it gives us access to a DOT,,,
create checkout session when we create a,,,
checkout session we need a couple of,,,
properties first of all we need a line,,,
underscore items which is going to be,,,
formatted like this guess what we,,,
already made that right here so it's,,,
actually going to be really simple for,,,
us as we already formatted the data how,,,
they want it we can set the mode of the,,,
checkout for example payment is what,,,
we're going to be doing then we also,,,
want the checkout to point to certain,,,
links if the checkout is successful or,,,
if the checkout is canceled so the,,,
success underscore URL is going to be,,,
equal to http localhost 3000 slash,,,
success the cancel underscore URL is,,,
going to be equal to http,,,
localhost 3000 slash cancel and because,,,
we're using a weight here our server is,,,
going to wait for stripe to fully create,,,
our checkout session so once our code,,,
gets to line 50 let's say around here,,,
for example we now have access to a URL,,,
which the user can use to check out we,,,
can send to our response some Json dot,,,
stringify data this is just going to,,,
allow us to send an object to the front,,,
end and it's going to be an object with,,,
one property set to session dot URL this,,,
allows us to show the user the session,,,
that stripe created for them so that's,,,
how stripe gets involved and so to,,,
actually start up our Express server to,,,
listen we can say app.listen to Port,,,
4000 is where we're going to have the,,,
server live on and then we're going to,,,
just do a little callback function here,,,
we can say console.log Vlog listening on,,,
Port 4000 just to show the back end,,,
working I'm also going to console.log,,,
this request.body so we can see that in,,,
the terminal but stripe kind of makes it,,,
simple for us just to explain this back,,,
end again we're going to send a post,,,
request to the slash checkout route it's,,,
going to take the posted data from the,,,
user here it's going to format the Align,,,
items to how stripe wants them it's then,,,
going to create a session with those,,,
line items and it's going to make a,,,
payment session and then once this,,,
session gets fully created it's going to,,,
send that created session URL to the,,,
front end so our user can pretty much,,,
check out with stripe so let's go to the,,,
right terminal here and say npm start,,,
which is pretty much starting up our,,,
server on the left I still have our,,,
react application running so hopefully,,,
you still have these three different IDs,,,
at the top here I want you guys to copy,,,
these three different IDs go over to,,,
your react application and then go into,,,
your product store dot JS here's where,,,
things get interesting is we can make,,,
the coffee ID actually equal to that,,,
price ID and we can do the same thing,,,
for all the other products this is so we,,,
don't even have to add some additional,,,
functionality we can just make the IDS,,,
you know an actual ID instead of like a,,,
one two or three we can just use these,,,
price IDs that we have created on the,,,
stripe side of things this way whenever,,,
we interact with a product we know the,,,
actual exact price ID that is on the,,,
stripe side of things all right we are,,,
so closely getting to the final version,,,
of this project now we want to go to,,,
where our checkout button is living so,,,
for example over in the nav bar and we,,,
want to create a request to our backend,,,
when you click purchase items so we can,,,
set purchase items equal to on click is,,,
equal to checkout and we can make a,,,
function called checkout,,,
so I'm going to say const checkout is,,,
equal to a asynchronous function I'm,,,
going to use some Arrow syntax here,,,
where you say async the parameters to,,,
the function which I don't need any and,,,
then we're going to define the function,,,
logic with an arrow like this then I'm,,,
going to make an await statement because,,,
we are now going to make a fetch request,,,
to our back end which I hosted at http,,,
slash slash localhost 4000 slash,,,
checkout and if you guys remember from,,,
the express side of things we want to,,,
make sure that we are posting so we have,,,
to say method is equal to post to our,,,
back end the headers this is also,,,
important are going to be of content,,,
type application slash Json this allows,,,
us to send some json.stringify code in,,,
the body so take a look at this,,,
we can set the body of the request equal,,,
to,,,
json.stringify then I can say Okay,,,
stringify an object where the items,,,
property is equal to cart dot items and,,,
we have access to cart.items because we,,,
already have this context defined right,,,
here there you go a great example of,,,
good use of context so once this fetch,,,
statement is fully done we can handle,,,
the response that we get back from our,,,
server by saying dot then take that,,,
response and we are going to need to,,,
kind of translate that response which is,,,
kind of common and return a,,,
response.json this turns the response,,,
into a Json format that is easy for our,,,
code to interpret so we can say dot then,,,
response again and now that we have,,,
access to the response take a look at,,,
the server.js again we are getting an,,,
object that has a URL so if we decoded,,,
this and we're getting the Json of this,,,
if we say response dot URL it's going to,,,
give us access to this session.url here,,,
so if response.url exists just to you,,,
know kind of Safeguard us we can then,,,
say window dot location dot assign and,,,
so this is going to kind of overwrite,,,
whatever the user is currently looking,,,
at and show them that response.url so,,,
it's going to forward them over to the,,,
stripe payment so just to explain what's,,,
happening again when we click purchase,,,
items here it's going to go and check,,,
out for us once we hit checkout we are,,,
going to make a post to the checkout,,,
route to our back end of localhost 4000,,,
we're going to make it a content type,,,
application Json and we're going to pass,,,
the items from our cart to our backend,,,
over on our back end we are then going,,,
to take those items make them into a,,,
format that stripe understands,,,
and then create a session with those,,,
line items once the session is fully,,,
created with stripe we are then going to,,,
send the URL back to our front end and,,,
get that response from our backend turn,,,
into a Json and then get the URL out of,,,
that Json and forward the user over to,,,
stripe so I'll just put that here,,,
forwarding user to stripe,,,
and so if you are on a fresh account,,,
you're going to want to make sure that,,,
you go to,,,
dashboard.stripe.com account this is,,,
because stripe requires you to make a,,,
company name even if you're just doing,,,
test payments so I'm going to make my,,,
name Cooper codes I'm going to save here,,,
so once you have a company name you are,,,
good to go so let's go to our local host,,,
and see how this works,,,
we can go over to our react application,,,
now and add in a bunch of items to our,,,
cart adding a bunch of coffee a bunch of,,,
sunglasses and I'm just going to add one,,,
camera now we can go over to the cart,,,
see all of our different items here and,,,
then purchase the items by pressing this,,,
button on the bottom and so this is,,,
where everything comes full circle we,,,
have fully initialized the payment we,,,
have three coffees in here which even,,,
stripe recognize seven different,,,
sunglasses it's kind of expensive and,,,
also a camera here as well and so we can,,,
put in some fake information that stripe,,,
gives us the test Visa card is just four,,,
two four two four two over and over then,,,
you can put in one two three four for,,,
the date and then also one two three for,,,
the security code I'm going to make the,,,
name on the card Cooper codes but this,,,
can be anything again I'm gonna make one,,,
two three four five my ZIP code and now,,,
we can make a full stripe payment,,,
foreign,,,
so stripe went and sent us over to the,,,
success route so let's go take a look at,,,
our stripe dashboard and see if the,,,
payment went through so from our home we,,,
can already see that payment here but we,,,
can go over to payments over here and,,,
you can see the fully successful payment,,,
it also shows Stripes cut and everything,,,
like that and so this is the full kind,,,
of Circle of showing you guys a payment,,,
processing system with stripe and also,,,
managing a bunch of different items on,,,
react if you made it this far in the,,,
video I just want to say thanks so much,,,
for kind of coming through the full,,,
project with me and working through the,,,
full thing again I'm super excited to,,,
have been able to show you guys this,,,
full project and work with Brad so thank,,,
you so much Brad again hopefully this,,,
content was helpful and honestly if I,,,
had a project like this earlier on,,,
especially when I was learning react,,,
there's a bunch of good stuff for you,,,
guys to learn throughout this project,,,
that really makes you think in you know,,,
thinking components think in you know,,,
how can I use context in different areas,,,
on my application and so hopefully this,,,
video was super helpful all right thank,,,
you so much for watching",,,
uwAqEzhyjtw,"what's going on guys welcome to my
command line crash course so if you're a
developer of any kind chances are you're
going to be using the command line at
some point you may just be installing
some npm dependencies as a front-end
developer or you may be logging into
servers via ssh and performing more
advanced tasks but either way it's good
to learn the basics when it comes to you
know navigating your file system working
with files and folders etc so in this
crash course we're going to be looking
at all the basics and a little bit more
than that
i'll be using a mac but you should be
able to follow along whether you're on
mac windows or linux i'm going to
explain kind of the differences between
the the operating systems and what
options you have and so on all right so
that's it let's go ahead and get started
[Music]
all right so before we get started i
just want to mention today's sponsor
agora so agora is a real-time engagement
platform that provides us with all the
tools for building out features like
audio and video calling along with
real-time data signaling right into your
applications with a gore you get sdks
and you get low code tools to build all
sorts of video calling features like
group chats with screen sharing and
recording you can stream to third-party
platforms like youtube and so much more
if you've ever set up websockets for
real-time messaging you know that it can
be quite the headache so agora makes it
easy to implement all of these real time
features so for more information you can
click the link in the description or
visit agora dot io today
alright so i just want to spend about 10
minutes or so talking about a few things
and if you want to skip right to
learning the commands i'll put a time
stamp in and you can do that but
there is some confusion when it comes to
some of the terms we use like command
line terminal shell
it can be confusing for beginners so i
want to talk about that as well as some
of the differences in operating systems
but i want to start off with just some
reasons why you would even want to learn
the command line or the terminal and
again i'll be using some of these terms
interchangeably so it might seem a
little weird when you have a powerful
operating system that is a gui or a
graphical user interface where you can
just point and click and do things so
why would you want to remember all these
commands
there's actually a lot of different
reasons but i'll just go over some of
the big ones so number one you have
greater control
the gui or the graphical user interface
of an operating system it does make
everything nice and easy and pretty
however using the command line or the
terminal is sort of like having back-end
access to the system so you can do
things that you can't typically do with
the graphical interface the gui only
gives you so many options
with that said you do have to be careful
with certain commands
some of the advanced commands can
perform really complex operations on
your system and you also typically
manage things like permissions and user
access with the command line
so the next one is speed and efficiency
i think it
might sound strange to some people but
learning to navigate your system through
the command line allows you to do a lot
of things more quickly and easily
there's certain tasks especially when
dealing with multiple files or even
hundreds or thousands of files at once
that would take you hours or even days
to manually handle within the the
graphical interface instead you can just
run a couple commands you can also alias
commonly use commands to do things even
faster you don't have to go back back
and forth from the keyboard to mouse
your your hands are always on the
keyboard so working with the command
line can be much
it can be more efficient in many ways
so the next one is to access remote
servers and if you're
you know if you're a web developer and
you're deploying
websites or web applications a lot of
times you'll need to log in via ssh
which is the secure shell so basically
basically you can log into servers
through the command line
i do have a crash course on ssh if
you're interested we're not going to get
into ssh in this particular video also
there are some operating systems that
don't even have a graphical interface
these are called headless operating
systems i actually have
ubuntu server running as my home server
which is a headless version of linux
ubuntu it doesn't even have a monitor or
a keyboard i just log in via ssh from my
computer
so the next reason is command line tools
i think no matter what area of tech
you're in you're probably going to use
some tools that are not gui based a lot
of tools can't just be downloaded and
installed through a graphical interface
even front-end developers now
they used to be able to get away with
not really having to learn anything in
the command line but nowadays you have
all your packages and frameworks and
stuff are all installed via npm or node
package manager of course git version
control and i know there are gui
programs for git but in my opinion
typing in a couple commands is easier
than learning some of those gui tools we
also have pre-processors like sas we
have task runners
bundlers like webpack and parcel these
are all front-end web development tools
that are that are used from within the
command line and the last reason i have
is just getting hired chances are if
you're trying to become a developer of
any kind you'll be required to at least
know how to navigate around your system
using the command line and also how to
use certain tools like npm and git and
it's just a great skill to have in
general
all right so often the terms command
line terminal and shell are used
interchangeably you've seen i've already
done it here and usually the the term
command line is very window centric and
terminal is very mac and linux centric
but i want to go through and talk about
each of these terms and what they mean
so we'll start with the terminal and i'm
going to give you a really short history
lesson to explain this so back in the
day a terminal was an actual device with
a screen that could display text and
accept input
there was no tower or anything like that
it was just a keyboard and a monitor in
fact i actually had one of these when i
was a kid and i thought it was so cool
to be able to type and see the text pop
up on the screen so yeah i'm pretty old
anyway it was
usually connected to some big mainframe
or early unix-based system and allowed
users to interact with it
only text could be displayed on the
screen it was called a terminal because
it was located where the wires from the
computer ended are terminated and then
later on hardware terminals were
replaced with what we call terminal
emulators this is what basically what we
use now that it's it's software-based
the actual program that you open up and
you type in commands you can use the
terminal that comes with your operating
system or you can also install
third-party terminal programs for
instance on my mac i use item 2
and on windows i'll use either git bash
or hyper
alright now the command line or the
command prompt is the term that's used
to describe the interface of the
terminal okay it's the interface that
allows you to enter commands and get
output from commands again windows does
use this terminology a lot
and and a lot of times they call their
version of the terminal the command line
or cmd
and for those of you that use windows
probably know that
all right now the shell in order to be
able to use the terminal there has to be
a program on the computer that that
reads the input and displays output this
is called the shell uh different shells
can have different capabilities and
different ways of entering commands so
you can sort of think of the shell as
the operating system of the terminal
okay bash is the most common shell
program and is usually the default on
most linux and unix systems and it was
the default on macs for a long time up
until recently they switched from bash
to zsh which is what i'll be using in
this tutorial
but everything i do here can be done
with bash or zsh
all right now i want to talk a little
bit a little bit more about windows
because of course microsoft has to be
difficult with their own proprietary
stuff they've done this you know for
decades
microsoft created the first os
for the ibm pc it was called dos or disk
operating system and it was a command
line based system
and it didn't use the bash shell it used
something called command.com by default
and when windows was created it was
actually just a regular piece of
software that ran on top of dos and then
later on it became its own you know an
operating system in its own right and i
believe windows xp was when the shell
switched from
command.com to cmd.exe
which is also very limiting so they
ended up creating powershell now windows
command line and powershell are
different than unix-based shells on
linux and and mac os you can use a lot
of the same commands however there are a
lot of differences and they have gotten
better up until recently you couldn't
even use ssh on windows by default you
had to you had to download and install a
tool called putty which was really
aggravating
when i use windows i use a program
called hyper or git bash which are
unix-based terminal emulators and a lot
of people also like the wsl or the
windows subsystem for linux which
basically allows you to run linux from
within your windows os i personally
never got into that but i do
or because i do most of my development
on macs now if you're following along on
windows and you don't use a specific
emulator i would highly recommend using
git bash which you can get at get dash
scm.com
learning powershell is a great idea if
you if you plan on being like a windows
system administrator or something like
that all right so now that we've
established what the terminal is the
command line the shell let's jump in and
let's start learning some commands
all right guys so a couple things i do
have a gist file just link in the
description if you want to basically see
any of the commands or any of the
information that we talk about in this
crash course so you can see this quite a
bit here we're going to go over all of
this but obviously you're not going to
remember every single command so you
have this as as a reference all right
now another thing i want to mention is
since this is a beginner's course and i
don't want to limit this to any
particular operating system i'm not
really going to get into commands that
have to do with permissions and groups
and users i'm going to assume that
you're logged in as the root user or or
the administrator user i may do another
video on permissions in linux but i want
this to be an os agnostic course so
we're going to mainly focus on things
like navigating the system working with
files and folders
looking at system resources things like
that all right so just want to put that
out there
all right so i'm going to minimize this
and go into my terminal which i made
nice and big hopefully you guys can see
it and like i said i'm on a mac i'm
using uh i term 2 and i'm using z shell
or zsh
so if you want to use the regular mac
terminal that's fine if you're on linux
you can use just about anything i would
just recommend that you use a bash shell
or a z shell
if you're on windows you can use
something like git bash or hyper
or windows subsystem for linux i
wouldn't suggest using powershell
because the powershell is different some
of these commands aren't going to work
i'm not very familiar with powershell so
i can't tell you too much about it
but yeah any anything else should be
just fine again i tried to make this
operating system agnostic
all right so before we get into specific
commands i just want to look at some
quick keyboard shortcuts so the up and
down key is very helpful because if you
click up it's going to show you your
last command hit up again it'll show you
the one before that and it goes you know
up to hundreds of commands and then if i
hit down of course it'll come back so if
you have the same command you have to
keep running over and over there's no
sense in typing it out you can just go
up to it and hit enter so that's up and
down now the tab key will auto-complete
so for instance if i do like tou and i
hit tab it's going to auto-complete the
touch command
touch just it's used to create files
i'll get into that in a little bit but
if i were to do like mk and hit tab
since there's multiple commands that
match that it's going to show me a list
of them okay so keep that in mind and
then if i want to clear my terminal i
can do control l
so for instance if i list out all the
directories here and then i do control l
it just clears everything right up and
i'll be doing that all throughout the
the rest of the video
if i want to cancel a command like let's
say i do touch and i i don't want to run
it of course i can delete it or i can do
control c
which will just it'll basically go on to
the next line and not execute it
so the next one is is to search for a
command we can do control r
and it'll just pop open the search box
and then if i start to type whatever i
put in here it's going to match the last
command that matches that so in this
case
if i type in git it's going to show git
push as my last command that i that i
ran
all right and to get out of this you can
just do control c
all right and then control d will close
out the whole terminal i'm not going to
run it just because i don't want to
resize the window and stuff but control
d will close the terminal completely
all right now i think the first command
that i want to talk about is man or the
manual command and that's used to get
information on other commands so let's
say you want to learn more about the ls
command i can say man and then ls
and that's going to show me the
documentation or the manual for that
specific command so you can see it lists
directory contents it gives me a
description and i can use my up and down
arrows i can also page up and page down
it'll also show any options because a
lot of times with commands you have
different flags or different options you
can use so it'll show all that stuff and
then to exit this you just hit q for
quit
now
i believe on windows even if you use git
bash the man command doesn't work
however there's another utility called
help so you can just put in the command
you want to learn more about and then do
dash dash help and that basically will
do the same thing
all right so let's see the next thing i
want to show you is just a couple simple
helpful commands so if you want to know
the user you're logged in as you can do
who am i as you can see brad traversy
if you want the date and time you can
use the date command if you want to
clear the terminal like i showed you you
can do control l or you can just do
clear if you type in clear and run it
that'll clear it as well
now the next batch of commands i'm going
to show you are you're going to be using
quite a bit because they're used to just
navigate around your file system so
whether you're on your local machine or
if you ssh into a server if you want to
you know navigate your way around then
you're going to need to know these so
the first one is pwd and what that does
is it lists the it prints the working
directory so basically the directory
that you're currently in which in my
case is my home directory user slash
brad traversy obviously yours will be
different also when you see the tilde
character here the squiggly line that
represents your home directory as well
okay so that's print working directory
the next one i'm going to show you is ls
which will list out the contents of a
folder or a directory when i say folder
and directory i mean the same thing but
if we run that with no additional
parameters it's going to list out the
contents including the folders and files
of the current directory that i'm in
which is my home directory
okay if i were to let's say i want to i
want to know what's in this downloads
folder then i could do ls and then
downloads if i do down and hit tab it'll
auto complete as well so if i do that
then it shows me what's in downloads
okay now there's some options or some
flags that you can use with ls including
dash a what that does is it'll also show
hidden files so if i scroll up here
you'll see all these files with the dot
these are all hidden and these don't
show when you run ls unless you also add
the a flag all right now if i want to
show the long listing i can do ls-l
and that just shows some extra
information in addition to the file and
folder name it'll also show the
permissions the the owner the group
the file size and the date so it just
shows some extra information now i can
combine options if i want so let's say i
want to do hidden files and i also want
to do a long listing so i could add the
a l option like this
so you can see that if i scroll up you
can see the hidden files and we get the
long listing an easier way to do it or
shorter way is just to do dash al so you
don't have to have two hyphens that'll
do the same thing
all right and then another one is dash r
that'll reverse it
you might want to use let's say ls dash
reverse and hidden files because then it
shows the hidden files
at the bottom because they're usually at
the top but that reverses it
okay and there's other options as well
again you can look at the the manual or
the documentation for ls
so the next one is cd which you'll be
using all the time because that changes
your directory so if i just do cd
without without any options it just
takes me to my home directory which i'm
already in same thing if i do cd and
then tilde
okay but let's say i want to go
see we have our downloads folder let's
do that so i'll say cd
downloads
and enter and now i'm in my downloads
folder so if i just do an ls it's going
to show me the contents of the downloads
folder
okay and then if i want to go up one
level back to where i was i can do cd
space dot dot
now if i want to go to the root of my
machine which you might do if you're if
you're ssh into a server you could do cd
and then forward slash and if i do an ls
here you can see that i'm in the root
now if you ever get lost and you want to
get back home remember you just do cd
with nothing else
now another one that you don't see too
much is cd hyphen and what that does is
it takes me back to the last folder i
was in not the parent but the last one i
was in which in this case is the root
okay so that's cd hyphen but let's just
go back to
the home folder
now if you want to open a folder of or a
file in your gui from your terminal you
can do that however there's there's
different commands for each operating
system so i'll show you each one so on a
mac it's going to be open so let's say i
want to open the downloads folder so i
could do that and you can see it opens
right up in my finder now if you're on
windows it's going to be start so you
just do start and then whatever the the
file or folder name on on linux as far
as i know with most distributions it's
xd g dash open and then whatever the
file or folder
okay
now
i can also open urls so if i do open
https
traversingmedia.com then that'll go
ahead and just open on my default
browser
now the next
batch of commands i'm going to show you
have to do with actually creating and
modifying files and directories
so the first command i'm going to show
you is make directory or
mkdir which just does exactly what it
sounds like it just creates a directory
so we'll create one let's call it my
project
and now if i do an ls
we're going to see
here we have a new folder or a new
directory called my project
all right so let's cd into that so cd my
project
and obviously there's nothing in here
because we just created it so to create
a file
there's a few ways to do this but one of
the most common ways is to use the touch
command so we can say touch
and let's say
we'll say index index.html
all right so if i do an ls you can see
that created a file called index.html
which right now of course is empty
now we can even create multiple files i
could say touch let's say file1 dot
file2.txt
file3.txt
and now if i do an ls you'll see that
all three of those files were created
now when it comes to
deleting or removing a file we use the
rm command so let's say rm and we'll do
file
let's say file3.txt
and if i do an ls you'll see that that
file is now gone
now we can also use the dash i flag
which will
just prompt you to see if you know make
sure you want to delete it so let's say
rm-i and we'll say
file2.txt you'll see it's just going to
ask us if we want to remove it we can
say y and then enter
and then it goes ahead and removes that
file
now when we're dealing with directories
it's a little different so i'm going to
create
let's say make directory
and i'll just call this dur one
and you can see now we have a directory
if we want to remove that and we use the
rm command let's say dur1 it gives us a
message that says der 1 is a directory
so if we want to use the rm command to
delete a directory we have to use the r
flag
so let's say
rm
dash r
der 1
and now it's removed
now there might be cases where you have
a directory that you want to delete and
it has files and folders in it and you
get a message that says the the folder
is not empty all right in that case you
kind of have to force it with the
dash f option so you would do rm
dash rf
and then the directory name okay just be
aware when you're doing this be very
aware of what you're actually deleting
because when you're using the terminal
it takes just a tiny little mistake to
create uh you know a big issue and
you're deleting you know files that
that you definitely don't want to so
just be aware of that
now i want to look into copying and
moving files so right now we have what
file one we have an index html let's say
we want to
let's first of all create a directory
and let's call this
we'll call it source
okay so ls now inside of our my project
folder we also have a source folder and
let's say i want to copy file one
so with that we can use cp
and then we're going to
choose the file we want so file1.txt
and i want to copy it into source so i
would say source slash
and then file1.txt
okay so if i do another if i do an ls
file 1 is still here because we didn't
move it we copied it so if i ls source
and inside source you'll see that that
file was copied
now i'm going to remove file one from
the my project folder so let's say
rmfile1.txt
and now that's gone
now to move a file we can use the mv
command so let's do that let's uh clear
this up and let's say we want to move
the index html into the source folder so
we'll say mv
and let's say index.html
we want to move it to source slash
index.html
and now if i do an ls notice that
there's no more index.html
in the my project folder but if i look
in the source folder
there is
all right now if you want to rename a
file or folder you can also use the mv
command so let's say i want to rename
source to src
so i could do
mv
source
and i want to rename it to
src
and now if i do an ls now i just have an
src
we'll do ls
src
now i want to move file1.txt
back out to the my project folder i
don't want it in the source folder i
also want to rename it to info.txt
so for those of you that you know don't
already know how to do this stuff pause
the video and see if you can figure that
out move the file one out of the source
folder and rename it to info.txt
all right so to do that very simple we
can just use move
and we can say file
uh where are we no we're in
that's in the source folder so we want
to say move source
file 1.txt
to
we want to move it to the current folder
and we want to rename it to
info.txt
so now if i do an ls we should see
info.txt if we do an ls in the source
folder
then we don't see that file1 anymore
all right so we'll clear that up and now
i want to look at actually dealing with
the content in the files because up
until now
we've dealt with navigating around
moving copying files deleting creating
files but we haven't dealt with anything
inside of them they've all just been
empty so one thing we could do as i
showed you before is we can open like i
could say openinfo.txt
and that will open it
in the gui so with your whatever your
default text editor
in fact
since i have vs code installed i have
the code command set up so if i wanted
to for instance open up my source
index.html i could do that let me just
uh
one second let me just bring this over
all right so i could bring that over
here and let's say just want to add a
boilerplate you guys don't have to do
this but i'll just add this and
we'll put an h1 in here and just say
hello world just to add something to
this
and i'll go ahead and save it
alright i'm going to close that up so
now our index html has some some content
in it
if you wanted to add something to the
info you could but i'm going to show you
how you can add content directly through
the terminal and not have to open up a
text editor or something like that as
well
but let's look at some ways to to read
the content from within the text editor
so we have something in our index html
now i want to show you the cat command
or the concatenate command and this is
very common it allows you to create
single or multiple files it allows you
to view the contents of a file you can
concatenate files and redirect output in
the terminal or to other files it's
really powerful but i i usually use it
just to kind of peek in and see what is
in a file so let's say cat and then
we'll do source slash
index.html and you can see it shows me
the content that's actually in that file
now we could
we could also use it to write to a file
so i'm going to clear this up and we can
say cat and then a right angle bracket
and basically what we're doing with this
angle bracket
is telling the system to output the
results into whatever we specify after
it which in this case is going to be the
info.txt
file now if i hit enter it's just going
to it's going to go on to the next line
and i can start to type so i'll just say
hello world enter and then i'm going to
do a control d to basically get out of
that mode okay now if i do cat info.txt
you'll see that hello world has actually
been printed to that file i can also
open it up so let's say open info
that would open it up on my file system
here in my text editor and you can see
it says hello world
all right now we could even use just the
angle bracket like i could do
right angle bracket and info.txt
and now i'll just do hello
and let's do control d
and now we can say cat info dot txt and
you can see that that it basically just
overwrote the hello world with hello
now if i want to append to that and add
a new line or new lines i can say cat
and then the double
angle brackets and then info.txt
and then i'll put in world
and
control d
now let's look at info
and now we have hello on the first line
and then we appended
world on the next line
we can also use the n option if we want
to show line numbers
so there you go shows the line numbers
now what i'm going to do because i want
to add
a bunch of lines to this file i'm going
to open it so let's say open
info txt
open it with my text editor and then i'm
just going to paste in line 1 through
line 21 and i'm going to save that
now in addition to cat if we want to
read the file we can also use the less
command
and what less will do is it'll show us
the content but it'll also allow us to
scroll
so we can basically use the arrows or
page up and down to view the entire file
and then we're done we can just hit q
and it'll basically you know bring us
back so that's less
now if you want to
only see part of the file so a certain
amount of lines from either the top or
bottom we have the head and the tail
commands so for instance if we say head
info
dot txt it shows us the first 10 lines
by default
if you want to specify the line numbers
then whoops we could do head
dash n and then whatever number of lines
let's say five and now you'll see it
only shows me the first five
and then you can basically do the same
thing from the bottom with tail so if i
say tail
and then the name of the file it gives
me the last 10 lines
and i can also specify let's say n and
we'll say 5 from the bottom
info.txt
and then it shows us the last five lines
okay so that's head
head and tail
now i've been using the
the gui text editor but there's
there's also terminal based text editors
there's vim there's nano which is really
simple that's what i would definitely
suggest that you start with and nano is
installed it's pre-installed on on most
linux distributions on mac it's even
available with git bash so i could just
say nano
and then the name of the file
open it up and now i have basically have
a text editor here so if i want to come
down here and just add to this
i could say line 22
line 23. now if i want to
escape out of the this terminal i can go
ahead and do
um
command x i'm sorry control x
and it's going to ask me if i want to
save i'll hit y for yes and then hit
enter and now that should be saved so
now if i do less
info.txt
and scroll down i should see my new line
22 in line 23 and we'll hit q to exit
so it's good to at least know nano
because when you're dealing with servers
or you know headless
operating systems you can't just open up
notepad or whatever it might be on your
your gui so you have to use some kind of
of terminal based editor
now the next command i want to show you
is echo so if we want to
if we want to just
display some text we can just say echo
we'll say echo hello world and it will
just print out hello world but we can
also echo to a file so we can say echo
hello world
and then we can use our angle right
angle bracket and then specify a file
let's say info2.txt
okay so now if i do less
info2.txt
you can see that i have hello world in
there
all right so that's all i want to go
over as far as reading and writing to
files
now if you want to search for specific
lines or patterns inside of a file you
can use the grep command for that all
right so let's go ahead and say grep
and then we want to pass in the search
term here so let's just say
let's use quotes here because i'm going
to use a space so we'll say line 22 so
that's what we want to search for and
then the file name let's say info.txt
and it shows us line 22 okay so it just
finds the text
if we want to
find anything that has just the word
line in it
we could do that
you can also use regular expressions and
patterns so i could do like an asterisk
here that'll also give me all the line
numbers um it's actually really powerful
you can use all all kinds of regular
expressions i mean we don't have a lot
to work with right here but i just want
you to know what that is commonly used
for
all right now we're going to look at the
find command so find is another very
powerful uh command that we're not going
to
you know look at in and out but
basically it finds the locations of
files and directories based on
conditions that we specify
so we're gonna do something here let's
uh let's create another directory
and let's call this files
and then we want to cd into files
and i'm gonna show you how we can create
a hundred files with one command and we
can do that with touch so let's say
touch and the reason i'm doing this is
so that we have something to work with
so let's say touch file and then we'll
say dash
and then inside of curly braces we'll do
0 0 1
and then we can do 2 dots and then 100
and then after the curly braces we'll do
dot txt so what this is going to do is
going to create 100 files
and they're going to be named file dash
001
and txt then file dash 002.txt
all the way up to 100. so let's go ahead
and run that and then let's do an ls
and there we go we created 100 files in
whatever a couple milliseconds
so let's clear that up and now if we
wanted to find specific files we could
do find let's say in the current
directory
by name so dash name and then if we want
to explicitly put a file name like
002.txt
we could do that if we wanted to do
some kind of pattern like let's say fi
file zero
asterisk
or not zero let's do zero zero
which should only give us you know one
zero zero one through zero zero nine
if i do file
one asterisk
that will give us just the one the
file100.txt
okay if we wanted to find
the empty files we could do find
and
instead of name we're going to do
dash empty
and that's going to give me all of them
obviously because they're all empty
let's see what else can we do let's
actually add something to one of these
files so i'll go ahead and just append
let's say hello
world we'll use echo here
and then we'll append that to let's say
file
dash 033
dot txt
so now if i were to search for empty
files now 33 isn't going to show up
now one thing that makes this really
powerful is is you don",,
",,
't have to just,,,
use find to just just find and print out,,,
files you can find them and do whatever,,,
you want so if we wanted to delete let's,,,
say we wanted to delete all the files we,,,
just created i could say find,,,
in the current directory let's say name,,,
and we'll say file dash asterisk that,,,
should get all of them and then we can,,,
add dash delete,,,
and now if i do an ls all those files,,,
are gone,,,
now another thing i wanted to show you,,,
is piping which is basically a form of,,,
redirection so we can transfer,,,
any standard output to some other,,,
destination including a file so let's,,,
actually create we'll create 10 files so,,,
let's say,,,
file dash,,,
and we'll do,,,
1.01,,,
and make those txt files okay so now we,,,
have these files now i'm going to run,,,
the find command again so we want to,,,
find files by name and we're going to,,,
get file dash asterisk,,,
and what i want to do is then pipe the,,,
output of this into a new file so i'm,,,
going to use the angle bracket here and,,,
we'll call this let's say output.txt,,,
so i'm going to run that and now let's,,,
run cat on,,,
output.txt and you'll see that the,,,
basically the result of that find,,,
command has been put into this this text,,,
file,,,
so really powerful stuff and it may not,,,
seem like it just because we don't we're,,,
not we don't have much to work with we,,,
just have a bunch of empty files but,,,
when you're doing real tasks this stuff,,,
is is really powerful and it's just,,,
stuff you can't do from the from the,,,
graphical interface,,,
all right let's cd out of files and then,,,
let's remove,,,
the files,,,
directory,,,
and now that's gone all right so now i,,,
want to show you how to create a sim,,,
link and a sim link is a special type of,,,
file that points to another file or,,,
another directory it's basically a,,,
shortcut,,,
so we use the ln command to do this,,,
we're going to do ln,,,
s,,,
and then the file name or the the,,,
directory that we want to create a sim,,,
link for which in my case i'm going to,,,
do let's do our home directory and then,,,
downloads,,,
okay so i want the entire downloads,,,
folder to be a sim link and the sim link,,,
i'll call that,,,
i'll call it dls,,,
or dld,,,
all right so i'll go ahead and,,,
run that and then if i do an ls you'll,,,
see that we have this dlds now if i cd,,,
into that dlds,,,
and then i do an ls it's everything,,,
that's in my downloads folder now i,,,
didn't copy the entire thing over to,,,
to this folder that i'm in or this,,,
directory i created a sim link so this,,,
stuff is actually located in the,,,
downloads folder in you know in my home,,,
directory,,,
all right now if you want to remove a,,,
sim sim link let's just cd,,,
back out of this,,,
so if i want to remove it then i would,,,
just do rm just like i would remove any,,,
file or folder and dlds,,,
and now that should be gone,,,
okay so that's creating a sim link now,,,
if you're on windows and you're not,,,
using something like git bash you can,,,
create sim links with mk,,,
link,,,
so make link and then whatever the sim,,,
link name i believe is next so we could,,,
do like dlds and then you would do,,,
you know whatever you're making that for,,,
so that's if you're on windows and,,,
you're not using something like git bash,,,
so next i want to look at file,,,
compression and creating what are called,,,
tarballs so if you're a linux user you,,,
know what tar balls are if if you don't,,,
they're basically like a compressed file,,,
format kind of like a zip for windows so,,,
if we want to compress a folder we can,,,
use the tar command so tar,,,
and then we're going to add on to this,,,
c so this is because we want to create,,,
and then we also want to add zvf,,,
and i'll have in the gist what all these,,,
flags mean but basically we want the fo,,,
the the compressed file name so i'm,,,
going to call it source,,,
and it's going to have a tar.gz,,,
extension,,,
okay so that's going to be the name of,,,
the compressed file and then,,,
the folder or the directory that i want,,,
to compress is going to be the i think,,,
it's src,,,
yeah so now if i do an ls you can see,,,
now we have this,,,
source.tar.gz file which is just this,,,
uh you know whatever is in here i think,,,
it's yeah it's just the html file,,,
all right now if you want to see what's,,,
inside a tarball,,,
we can do tar,,,
and then we just want to do t zvf,,,
and then the the name of the,,,
file which is source.tar.gz,,,
and you can see it shows us what's in,,,
there just the index html,,,
if i want to extract it let's actually,,,
make a new directory called test,,,
and we'll cd into test,,,
and let's extract it here so for that we,,,
use the tar command and we use x,,,
zvf,,,
and,,,
our dash we actually don't need the,,,
hyphen but we'll put it,,,
and then the name of the file now,,,
remember we're in the test directory so,,,
we want to go up one level and then we,,,
want the source,,,
dot tar gz,,,
all right so if i go ahead and,,,
do an ls now you'll see that we have our,,,
source folder in here because we,,,
extracted it we unpacked it from this,,,
tarball,,,
all right so pretty simple,,,
there is there's obviously there's more,,,
so just about everything i'm showing you,,,
but i'm just trying to,,,
show you the basics of this stuff but,,,
let's go ahead and remove,,,
the test,,,
folder test directory all right so the,,,
last command that i want to show you is,,,
history i think that's a good last,,,
command because it shows us the,,,
you know the last few commands that,,,
we've run and if you want to run any of,,,
these again like let's say we want to,,,
run this make directory test again i can,,,
just do an exclamation and then the id,,,
so 1602,,,
and it runs that command again so if i,,,
do an ls now we have our test directory,,,
back,,,
all right so that's going to be it guys,,,
i hope you enjoyed this obviously,,,
there's a lot more to this a lot more to,,,
the command line this is for beginners,,,
my hope is that people that barely knew,,,
anything about the command line now at,,,
least know how to navigate around and,,,
deal with files and,,,
usually i've i know you know most of you,,,
are web developers and,,,
you're mostly going to be working with,,,
command line tools you know npm and git,,,
and,,,
certain frameworks clis and stuff like,,,
that but you do need to know how to,,,
navigate,,,
but you know hopefully this helped you,,,
out and thanks for watching and i'll see,,,
you soon",,,
Oi9z5gfIHJs,"[Music]
hey what's going on guys so i've had a
lot of requests to do a crash course on
astro and i've been getting into it
lately and i have to say that i'm really
impressed i think that the simplicity
the flexibility the performance is game
changing when it comes to generating
static websites so in this crash course
we're going to get set up we're going to
build a website using astro but i just
want to talk a little bit about what it
is first and you can go to astro.build
if you want to to to read more about it
so astro works a lot like a static site
generator or an ssg which is a tool
that's used to generate full static html
websites now there's a few reasons to do
this including performance and seo uh
you know over something like a single
page application built with react or
view etc now there are some great static
site generators out there but many of
them are kind of difficult especially
when we're dealing with beginners and in
many cases they're bound to existing
front-end frameworks such as gatsby with
react or gridsome with vue.js with astro
you can use astro components which are
incredibly simple or you can use an
existing framework like react vue or
svelte astro actually has integrations
with these frameworks as well as others
so i mean you could create a site that
uses some react components some view
components some spell i don't know why
you would do that i wouldn't recommend
it but it is possible
so basically you structure your website
with ui components
and the end result is going to be a fast
static html website with very little if
any javascript
now there will be some times where you
do need some front-end javascript to be
loaded
things like dynamic sliders and
carousels etc in this case astro only
loads that one component and the rest of
the site is just static html and this is
called the island architecture so you
can think of the water as your html and
then your javascript as isolated
components or islands and even something
like next js
you can't have that level of per
component optimization without loading
the entire page with javascript
which is what astro is trying to get
away from so we're slowly but surely
moving away from the javascript heavy
websites which is funny because we're
almost going back to the early days of
the web where we had static html and css
however now we have a lot more tools to
to build powerful and more modern
interfaces and i think structuring your
website with ui components and
encapsulating everything is much more
scalable and maintainable than the old
way of you know throwing everything in
multiple html files copying the head
body tags navigation onto every page
having separate javascript files and
style sheets astro is just a really
elegant solution
to give you that fast static html
website
so what i want to do now is show you the
project that we're going to create so
we're going to create this website which
is very similar looking to the astro
website
and right now this is just kind of the
old school
separate html files separate style sheet
you know no components or anything like
that everything's just lumped into one
file which this is very fast it's very
performant but
it's not scalable if you want to add a
blog post you know you have to create a
whole new html file you have to copy the
the head and body tags the the
navigation all that stuff
um with astro we can build this out in a
much more modern way with ui components
and you can either use astro components
like we're going to or you could use
react or view or spell components i'm
going to show you how you can use those
if you do want to all right so basically
we're going to convert this into an
astro website now in the description
i'll have a link to the repo that has
the final astro project but you'll also
see this folder astro website theme
which will have all these html files you
can also find the images here all right
so we will be doing a little bit of
copying and pasting from these files
just to get some of the content and when
i'm working in the theme files i'm going
to be using sublime text so you can see
i have them all open here with all the
html and so on
okay so before we do any of that though
let's get started and actually let me
show you the website real quick so we
have a home page
with a header at the top we have this
hero area or showcase i like to call it
a showcase this will be a reusable
component then we have these cards here
we'll make these into reusable
components with props and then down here
i have this little tab this dynamic tab
component so that will have some
javascript that we'll add
and then uh a footer
then we have our simple about page with
some text we have another card here some
images and then we have our blog which
has the showcase component and then the
excerpts wrapped in cards
and if we click read more it takes us to
the blog page now if this is going to be
a function functioning blog we're going
to use markdown so if you want to create
a new post you're just going to create a
new markdown file in the post folder and
it will automatically get added here
we'll be able to fetch all of our
markdown files
using something called mdx
now you have different options of course
you could use a headless cms like
strappy or sanity.io
or you could reach out to an api
and i'm going to show you how to do that
as well i'm going to show you how we can
fetch some posts from
from a site called jsonplaceholder
alright so i will show you some stuff
that ultimately isn't on this project
so yeah let's go ahead and get started
and if you go to the home page of the
website we're creating here you can see
for npm we're just going to run this
command pnpm yarn
so i'm going to go ahead and use npm
let's open up a terminal and we'll say
npm create
and astro
and we're going to use the latest
version
all right so this is going to ask us a
few questions where do we want to create
our project so what do we want to name
the folder i'm just going to call it
astro
dash website now if you want it in the
current folder you're in just put a
period
but i'm going to call it astro website
and then you have some options for
templates you can have a blog template
portfolio documentation site empty
project i'm going to choose this right
here just the basics which is
recommended
and then would we like to install
dependencies so basically run npm
install let's say yes
and that's going to go ahead and
basically just install astro and then
any any of its dependencies
all right so now it's asking if we want
to initialize a git repository i'm going
to say yes to that
at the end we will deploy to netlify and
we do need a git repository for that
so we can set up typescript if we want
we have the option of relaxed strict
strictness and then i prefer not to use
typescript i'm just going to go ahead
and go with relaxed
all right and that should do it so now
we can clear that up and we're going to
go ahead and cd into
astrowebsite and then from here i'm just
going to open up my text editor which is
vs code
okay so you can see we have all the
files on the side here so i'm just going
to kind of go over these real quick if
you look at package.json all we have is
a dev dependency is astro and then we
have some scripts we have
dev so we can run npm run dev that will
start up the dev server i'll do that in
a second
start will do the same thing if we want
to build out our project basically build
our static html files then we run npm
run build okay and then if we want to
preview our build because what this will
do is it'll create a dist folder just
like you it would with react or anything
else but then we can run preview to
actually run uh the build files all
right so that's the package.json pretty
simple then we just have we have an
astro config file here if you want to
use another framework like react or view
or something you can add it here but
there's also a shortcut basically one a
single command that we can run that will
add it for us and install the
dependencies and i'll get to that
and then we have the source folder which
is where pretty much everything we do is
going to go we have our pages so pages
are just components and again they can
be astro components they can be from
other you know react or view components
and when you create a file in here in
the pages folder it automatically sets
up that route the index is going to be
your home page all right so if you
create let's say an about dot astro and
then you go to your browser and go to
local host or whatever the domain is
slash about then that page is going to
show up now you don't want to have like
your html and head and body tags you
don't want to have to repeat that in all
your pages so that's where layouts come
in so you can basically create a layout
and you can add you know whatever you
want your head tags all that stuff uh in
the layout and then you can use it
within the
page and i'm going to just clear this
out we're going to start fresh and i'll
show you exactly how it works but just
to give you a summary of pages layouts
and then components of course you can
embed those into your pages things like
cards or whatever they might be
all right so let's go ahead own public
is just for any static assets you may
have so let's go ahead and
run the server the dev server so i'm
going to say npm run dev
which runs astro dev
and that should open up on local host
3000 and you're gonna see just a demo
page like this
okay but what i would like to do
is basically just clear everything out
and start from scratch so you know
exactly what's going on because i don't
like
to just have this code here and and
explain it all and this and that i just
want to start fresh so that everything
is clear so first off in components
let's go ahead and delete the card
component
let's go ahead and delete the layout
because the only thing that's really
needed here is the page so here um yeah
let's just clear this whole thing out
and let's just put an h1 in here
and say hello world
so we'll save that
and now we can start to
just learn from scratch about these
astro components which i think are great
they're very simple and powerful so
basically we have our output here which
is a it's actually a super set of html
so we're not working with like jsx or
anything like that
it is dynamic so if i were to go into
this h1
and let's go ahead and add some curly
braces here i can put a javascript
expression in here so for instance let's
say one plus one if i save that that's
going to evaluate that's going to output
two
all right now if you want to add some
javascript it's very very simple we
basically use the kind of like the
markdown front matter syntax so we just
do a triple hyphen and then up here we
can have our javascript so let's say
kant's name we'll create a variable and
we'll just call this astro
and then we'll come down here and let's
replace that with name
and we'll just
replace world if we save that now we get
hello astro now we can also add our
styling in here as well so we can say
style and let's say for h1 we want to
make the color red if i save that and
this this is scoped styling by default
so anything you put in here within a
specific component is only going to
pertain to that component
or in this case i should say our page
but the page is a component later on
when we create a component in this
folder it's going to be formatted the
same way and we have the same
capabilities
now we can also have dynamic attributes
so let's say we have
let's go ahead and create a class down
here we'll just call it purple
and we'll give it a color purple and
then up here
let's say we have a variable and we'll
call this um
i don't know we'll call it uh
style
and we'll set that to
purple
which is the name of that class
and then we can come down
here and let's say class equals now if
you want to add a dynamic attribute it's
just like react if any of you guys are
you know i've used react before so we
basically just set it to curly braces
and then we can put
that variable in there if i save that
now that's going to turn purple okay and
obviously you can have dynamic
attributes
or dynamic values to any attribute it
could be an image source tag or whatever
it may be an href
so
next thing i want to show you are lists
just like with jsx we can create lists
for instance let's uh let's create a
variable up here and we'll call this
users
and let's set that to
some names and i'm using github copilot
i might shut it off if it starts to get
annoying but what we can do is go down
here
and let's say we want to do a ul
and then copilot is going to put this in
for me automatically but basically
it's the same thing that we would do
with react we take the array we call dot
map we're saying for each user i want to
output a list item with the user inside
so let's go ahead and save that and now
you can see the user names printed in
the browser
okay now notice that we don't actually
have to have a wrapper around all these
elements so we could and that we can use
a fragment so you might want to do
something like this
just to kind of make it a little neater
i don't know why auto formats not
working for me but
yes we could do something like that
now
as far as like conditionals we can do
that as well so let's go up here let's
say const we'll say visible and we'll
set that to true
and then let's say we have something
down here that we only want to show if
it's visible so you can see here we can
use the double ampersand we can say if
visible is true then show this so if i
save that it's going to show i am
visible if i change that to false then
it's not going to show it now there
might be cases where you want to show
something else if this value is not true
so in that case we could use a ternary
so we could say visible
then show i am visible else show i am
not visible so now if i put this to
false
and i save that it's going to show this
i am not visible because of our ternary
here
now let's say we want to fetch some data
from a back end so i'll come up here and
let's go
right above
users and we'll say const response and
let's set that to
we'll make a fetch request actually
let's use a weight now we can just do
this we can just using a weight because
there actually is an async that's
wrapped uh wrapped around this so we
don't even have to do a sink away we
don't have to create a function we can
simply use a weight which is really cool
so there's a top level of sync
and let's get this from we'll do https
and i'm going to use jsonplaceholder.com
i'm sorry jasonplaceholder.typeycode.com
users which will fetch a whole bunch of
users we could even put a limit on that
let's say
underscore limits equals 10.
okay and then right here we have users
let's
get rid of this static array and let's
await
on the response and get the json okay
and i'll save that
and of course these are objects so we're
going to want to just come down here
where it says user and we'll do
user.name
okay and it's as simple as that to just
fetch some data and display it on the
page
all right so what i want to do now is
create a layout because if we were to
look at the source code here you can see
we have we do have a doctype and then
there's there's some other stuff there's
some script tags that have to do with
the dev server it actually uses veet
under the hood
but then there's no head tag there's no
body tag no html tags so we need to have
that stuff obviously and
you could put it in every page but that
kind of defeats the purpose of using
astro and you're using something like
this because you don't want to have to
keep repeating yourself so what we can
do is create a layout so we already have
a layouts folder so i'll create a new
file called layout.astro
and again this is just this is an astro
component and it's
we use it the same way as we do pages
and components
now for some reason the exclamation
isn't working for emmett to set up
to set up this html boilerplate but what
i'm going to do
is bring over sublime text where i have
the theme just all the you know the
separate html files and i'm just going
to open up the index html
and i'll just go ahead and grab from the
doctype down to
the um the body tag right here
so and again you can get this in the
github repo it's going to be the folder
called astro website theme that'll just
be the regular html files all right so
in the layout i'm going to paste that in
and then of course we want to have a
closing body tag and a closing html tag
now to actually get our page in here
what we do is we we use something called
a slot
okay so if you use vue.js this might be
familiar but we can just put slot here
and that's basically where we want the
content to output so let's go ahead and
save this actually you know what let's
get rid of this link to the style sheet
because that's we're not doing things
like that
i do have the links to the font we're
going to use we're going to use the
roboto font so we'll leave that in there
but let's save that we don't have to
export anything from here we do have to
import it to whatever page you want to
use it on so let's come to our index
page and let's say import layout from we
want to go up one level into layouts and
then layout.astro
now you do need the dot astro or you're
going to get an error that's something
that i keep i keep forgetting
but let's bring that in and then all we
have to do is wrap our content with it
so where we have this empty fragment
we'll simply put in layout and we'll
save it and now you can see in the title
it says astro crash course because this
layout is now wrapping our content which
is being output in this slot
okay now i'm going to clean this up
because none of this is stuff we need it
was just to kind of show you you know
how to do this stuff so let's clear out
um
yeah i'll just delete the style tags for
now and in here for now we'll just go
back to having
uh having an h1
okay
now
with our components and remember
the layout the page the component these
are all astro components and you can
pass props into these
so our layout as you can see has the
title of astro crash course but you
might want different titles for
different pages of course for seo
reasons um
so what we can do is we can pass in a
prop here so i'll say title
and let's just set that to whatever i'll
just say hello
now obviously that's not going to do
anything because we just passed the prop
in we haven't handled it now where i
want to output that is going to be in
the title
so what we could do is say astro dot
props and then dot title or whatever the
prop you want to access and if i save
that now it says hello
so this is not really recommended what
we should do is come up here and let's
add in our triple hyphen and then we can
go ahead and we can destructure let's
say title and we want to destructure
that from astro dot
props if we save that now
actually we want to replace this with
just title obviously
okay and that works
now what we also should do if you
remember when we set this up we said
that we wanted to use typescript i think
it was like relaxed or something like
that so we can create an interface for
this and this is kind of like prop types
in react so we can say export interface
and say props
and then whatever the props we want to
have so for instance title
and set that to a string all right now
to use this we can come down here and
just say astro props as props
now if you want to assign
a default prop to
title we can do that simply by adding an
equal sign here and then whatever we
want to set it to let's say astro
crash course
okay so now if i save that it's still
going to say hello because we
explicitly passed in hello but if i were
to get rid of this and save now we get
the default
now the reason we have this red line
under this is because of our interface
because we're saying it has to have a
title it's a string but if you want it
to be optional you can simply put
a question mark here
save that and now if we come back over
here we don't have that red line so now
anytime you use the layout and you don't
pass in a title explicitly it's going to
use this astro crash course and it's the
same for not just layouts but any
components that that you use
so now that you know about components
about props i want to start to build our
website now if i go to the
theme
right now i just have all the css in
this one global style sheet which i mean
is fine but
the the modern way to build
websites and interfaces is to to have
everything encapsulated in components so
that's what we want to do now of course
we do have some global
uh global styling
so there's a few ways we could handle
that we could put it like in the layout
so in layout we could have style down
here but i'm actually going to use a
separate css file for that for global
stuff so what we'll do is in source
we're going to create a new folder and
we're going to call that
styles all right and then for images i'm
also going to create in source a new
folder and we'll call that images
and then we might as well bring the
images over so let me grab those
and again i know i've said it a bunch of
times but you can get this astro website
theme in the repo in the description
so we have a few images here let's just
grab these and bring them over to
images
all right and then
let's
go to styles and i'm going to create a
file in here called
global.css and you can also use sas if
you want just right out of the box
now as far as what i want to put in here
i didn't even need this import because i
had the link i had the font link in
in the html
but here i have a couple variables
let's see
what do i want to include in this
um yeah let's grab from the top so we
have our color variables then we have
just our reset we have the body
and then just some basic styles for
links and paragraphs and all that so we
want those and then also the container
anything you're going to want to use in
multiple components like container
button
and then i also want this logo small as
well okay header and all that stuff
those are going to be separate
components so let's just grab that
and let's put that in our global css
okay and then i may have some media
queries down here let's see
so
[Music]
yeah let's just grab these two
immediate queries and
we're gonna paste those in but all we
need we do want the logo small and logos
and then we don't need features because
that's going to be its own
that's going to be its own
component and then h1 and h2 we do want
that footer we don't need that's going
to be its own component
okay
so that's all the global styling so
we'll go ahead and save it and it's not
just going to work so what we need to do
is we're going to import it into
the layout that we want to use it in so
let's go and of course you can have
multiple layouts but we're going to go
into
layout.astro and let's go above
this interface and let's say import and
we just want to import dot dot slash so
we want to go up one level into styles
and then we want our style css
and
i'm sorry global
global css or whatever you want to call
it and there we go and you can see that
that style is being applied
okay so now i think it's time to create
our first component which is going to be
the header actually let me open up the
the theme so we can see it as we move
along so yeah we have the header which
has a logo and then just some simple
navigation
so we'll get started with that
so that's going to be in components
and let's create a new component and
call it header.astro
now after this
i'm going to show you how you can use
like react or view or any other
um
supported framework for your components
as well
but personally if i'm creating just a
website that has some basic
functionality then i'm going to be using
astro components because of as you could
see how just extremely simple you know
no functions with return values and
no hooks or anything like that which
that stuff is great when you need it
it's great for more advanced
functionality but for basic stuff for
static websites i think astro components
are the way to go
but um but let's go ahead and
go to the theme because we're gonna need
the output or the html
and
we're copying a bunch of this html but
we're gonna switch it up to be dynamic
and take in props and stuff like that
but to start with let's just grab this
header tag
so we're going to take that and
let's go ahead and just paste that in so
no changing to class name or anything
like that and i'm not trying to bash
react or any other framework i'm just
trying to show you um you know that
how simple this is and i'm pretty
pretty impressed with it
so now i'm going to save that
and obviously that's not going to work
because we didn't import it now the
header i don't want it to be just in the
index page so you can import your
components into either the a single page
because some things you know obviously
will be on just
individual pages but this i want to be
on every page so i'm going to bring it
into the layout
so let's go up here let's say import
header and we want to bring that in from
dot dot slash components
slash
header and don't forget dot astro
all right and then down here let's see
we're going to put this right above the
slot which is our output for our page
so if i save that
there we go now the reason it doesn't
look right is because we don't have any
of the styling now the styling if we go
to
the global style sheet here and the
theme
um i'm just going to grab the header
styling i i commented everything nice
and neat so we can just grab it and
we're going to put it into the component
so that everything is encapsulated
inside of that
so let's grab that and
then in our header component we can come
down here and just add in style
and paste that in and save
and now we have the header okay the logo
isn't going to work just because of how
this is right now but what we can do is
just bring in the logo which is
logo.svg
so we can just go up here and let's add
in
our triple hyphen and let's import let's
say
logo
from
and that's going to be dot dot slash
images slash
logo dot svg
and then what we can do is just on this
image tag right here just change the
source
to be dynamic and add in the logo
variable
and there we go so now it shows up
is this uh
yeah that was
that was zoomed in a little bit
all right so we have our logo we have
our navigation now ultimately the
navigation
is gonna be
so about for instance you could leave
the html when we create a page like the
about page you can do about.html
or you can do without it which is what i
want i'm going to get rid of that
so
index is just going to be slash and then
for blog that will just be slash blog
and obviously these two aren't going to
work right now
but we'll we'll get to those in a little
bit and then the logo we have a link
around that which we'll just have go to
the home page
now the the header components pretty
simple so we can just leave it like that
the next thing i want to do is the
showcase component which is this right
here now before we do that with
astro with the natural component i want
to show you how you could use another
framework if you wanted to for your
components so let's go to i'm just going
to search for astro
integrations and let's see
so we have
tailwind
[Music]
uh wait is this the page i want let me
just make this bigger
no i want to i want to go to the docs
and then
see where is it right here integrations
all right so these are the official
integrations there's ui frameworks
uh we have react we have solid js views
felt preact and lit and then you have
ssr adapters
and then others as well so let's say
that you want to use react so we'll
click on that
basically there's two ways you can do
this you can run just a single command
and it will automatically install the
dependencies that you need and set up
the config file or you could do it
yourself
so for instance
if we want to use npm we can just say
npm run astro add react
and that will again install the
dependencies and
set up the config so let's let's try
that so i'm going to come over here and
let's stop the server for a second and
then we'll do npm run
astro and we want to do add
and i'm going to do react of course you
could use any framework you want
okay so it's going to just ask us
to continue yes do we want to
so what it's going to do is it's going
to install react and react dom of course
and then it has the integration which is
astro js
slash react so we want to say yes
and you could just you could run npm
install
those yourself if you wanted to
so now let's run the dev server
and we're not going to see any change or
anything like that but if we come over
to package.json
now you'll notice we have three new
dependencies we have the astro react
react and react dom and then where it
gets added is in the astro.config
we bring in the integration and then we
add it to this define config
so this function here takes in an object
with an integrations array and you can
pass in react as a function
okay now if you wanted to use vue.js you
would install the dependencies then you
would bring it in here and you could add
it here like you could just go like that
and then you could use react and view in
the same project i i don't know why you
do that i definitely wouldn't recommend
it but you could do that if you wanted
to
so now that we have that set up let's
create our showcase component and
ultimately this is gonna we're gonna
make this an astro component but just to
give you an example let's say new file
in components and let's say showcase
dot jsx
okay
and then in here we'll do let's create a
react component
and i'm just gonna have it div with the
you know text of showcase so this is a
react component now if we come into
uh let's go to our index page because
that's where ultimately i want to put
this and we'll say import showcase
from
and let's go up one level into
components and then slash showcase but
we're gonna do showcase jsx
okay and then we'll come down here and
let's go above the h1
and let's add in the showcase
component and there we go so it's
outputting showcase
so now i'm using react
now if i wanted to use like let's say
the use state hook i could do that i
could say import
use state
from react and let's go up here and
let's say
i will say const
and if you don't know react don't worry
about it you just
skip this part but let's say name
set name set that to
we'll say brad
and then we should be able to down here
we'll say hello
and we should be able to access that
name
and if i save that we get hello brad
all right so i'm not going to use react
but i just wanted to show you how easy
it is to uh to to use another framework
with astro
so what i'm going to do is actually
rename
this from showcase jsx to showcase
astro
and for now i'll just put in an h1
and then of course in the index page we
have to change this to astro
and then i'm also going to go into the
config and since i'm not using react i'm
going to delete the import
and i believe we can just yeah delete
this whole object here
because i don't want to keep that and
i'll uninstall the three dependencies
later
all right so
now
let's work on the showcase
so the showcase is going to be this
right here and i wanted to take in the
title as a prop this right here
and then or the heading i guess
and then also the text so that we can
use this in other places like the blog
like this right here um and then the
extra stuff down here like the image
i'll probably just have a boolean to
enable that or not
and you can try different things if you
want but let's go ahead and get started
with that so showcase
i'm going to grab
let's bring over sublime text here and
we want to grab a couple things so in
the index page
i'm going to grab the showcase section i
just i used an html section tag
and we'll grab that and put that here
and then we want the style as well
so for that
grab the showcase class and then all
this stuff here as well
okay and then we'll put that right in
here let's save it
now the image we need to bring those in
uh you'll see that the reason i have two
is because one is for small screens so
like that and then if it gets bigger
then it's a it shows
more frameworks or whatever
so
let's import those
up at the top
oops uh why didn't that autocomplete
okay so let's import
logos
and it's going to be from dot dot slash
images slash and then we want
it's called framework
dash
logos.png
and then i'm going to copy that down and
this one is called logos dash
small
and we're going to give this a variable
of logos
small
okay and then what we'll do is replace
this right here this source
with
logos
and then we'll replace this one
with logos
small and let's check that out
okay good if i make that bigger
because remember we have that media
query in the global css
that will load the small one on small
screens
now as far as the content here
this heading
and this text",,
",,
 i want this to be props so,,,
let's go up top and let's say export,,,
we're going to create an interface for,,,
this so let's say export interface props,,,
we're going to have a heading,,,
which is going to be a string,,,
and let's do a text area which is going,,,
to also be a string,,,
and,,,
i guess we'll just do that for now,,,
and then to get the props once they're,,,
passed in we're going to destructure,,,
let's say const,,,
const heading and,,,
text and we want to get that,,,
from astro dot,,,
props,,,
as,,,
props,,,
now there's a few ways we could handle,,,
this we could,,,
pass these in for this showcase but,,,
since this is like the main one i think,,,
what i'm going to do is have this as the,,,
default text,,,
so what we could do are the default,,,
props what we could do is copy that,,,
and replace it with,,,
heading,,,
and then we could make heading,,,
optional so we'll put make both of these,,,
optional,,,
because we're going to add them as,,,
default so we'll say heading equals and,,,
paste that in,,,
and then for text we'll say text equals,,,
and let's grab this right here let's,,,
make sure that these are on,,,
the same lines all right so then we'll,,,
go ahead and grab that we'll replace,,,
that with text,,,
and let's put that right here,,,
save it and we should get the same,,,
result however if i go,,,
and i add in,,,
heading,,,
and i set that to something else,,,
then that's going to change,,,
all right but those are going to be the,,,
default values,,,
okay,,,
now let's see as far as,,,
this stuff here,,,
since i want to reuse this showcase,,,
component,,,
i want to use it on the blog which uh,,,
whoops let me show you right here so i,,,
want to use it on the blog which just,,,
has the heading and the text,,,
so what i'm going to do is create,,,
another prop called show extra,,,
and that's going to be optional and it's,,,
going to be a boolean,,,
and then let's come down here and put a,,,
comma and say for,,,
show extra,,,
that's going to be set to false by,,,
default,,,
all right and then down where we have,,,
the the rest of the content so we have,,,
the text the heading the text and then,,,
this div right here with showcase image,,,
what i'm going to do is above that,,,
i'll say,,,
show,,,
extra if that's true then,,,
we'll have a fragment here,,,
whoops,,,
we'll have a fragment and inside that is,,,
going to be the rest of this so it's,,,
going to be this div and this paragraph,,,
so we'll grab that put it in there save,,,
and that stuff isn't going to be shown,,,
it's just the images and this little,,,
message here aren't going to be shown,,,
however if i go,,,
here and i say show extra,,,
and we'll set that to,,,
TRUE,,,
and now that's going to show,,,
all right now the next part next section,,,
we want to do is are these cards right,,,
here so what i'm going to do is have a,,,
component called features which is going,,,
to,,,
be this whole thing and then each one of,,,
these will be a card component,,,
so let's do that let's go into,,,
components let's create a new file here,,,
called features dot astro,,,
now if we look at the theme,,,
we're looking at this section right here,,,
the class of features it has a container,,,
and then it just has three cards in it,,,
which ultimately we want these to be,,,
their own component but let's copy this,,,
whole section,,,
just for right now,,,
and paste that in there,,,
and then i mean there's a few ways we,,,
could do this,,,
we could,,,
just have like three separate,,,
components like this,,,
and then pass in a title and a body to,,,
each one you know this content here or,,,
we can just,,,
create an array of objects with the,,,
title and body up at the top so that we,,,
can create a list and output a card for,,,
each one which is what i would recommend,,,
doing because,,,
i mean you could get this data from,,,
anywhere you could fetch it from some,,,
api or cms or whatever but let's go,,,
ahead and just add in our hyphens and,,,
let's say const,,,
and we'll just say,,,
features data,,,
set that to an array of actually i'm,,,
just going to grab the,,,
the objects,,,
so basically we just have three objects,,,
each one has a title and a body and it's,,,
the same content here so now we can get,,,
rid of these three divs with the class,,,
of card,,,
so that one ends right there so we'll,,,
get rid of those,,,
and then we should be able to just,,,
take the features data and map,,,
and let's say for each,,,
feature,,,
we want,,,
um,,,
actually yeah let's do that but let's do,,,
a class of card,,,
okay so now for each feature it's just,,,
put outputting this div here,,,
so we'll go ahead and save that and,,,
let's add it to uh to our index,,,
so we're going to want to import,,,
features from,,,
features astro and then i'm going to put,,,
that right below the showcase,,,
so features and there we go now there's,,,
no styling,,,
because we haven't added that css yet,,,
and the each card is going to be its own,,,
component,,,
so let's actually do that real quick,,,
before we add the styling so in,,,
components let's create a card,,,
dot astro,,,
and we'll go ahead and,,,
just grab,,,
that and in card we'll,,,
you know paste that in,,,
now,,,
what we're going to want to put in here,,,
are props that are passed in and we're,,,
going to start do with it this way where,,,
we pass in the title and body but then,,,
i'm going to show you a different way,,,
that we can do it and and implement,,,
cards,,,
so for now let's uh let's say export,,,
interface,,,
props and,,,
we're going to have a title,,,
which is going to be a string we're,,,
going to have a body,,,
string,,,
just do that for now,,,
and then uh whoops we need our hyphens,,,
let's do one two three and down here,,,
okay and then let's,,,
destructure and take the title,,,
and the body,,,
from astro dot,,,
props,,,
as,,,
props,,,
and then down here we can get rid of,,,
this,,,
and this,,,
okay so i'm going to save this and now,,,
bring that into features,,,
so up at the top here let's say,,,
let's say import,,,
card,,,
from,,,
and we're in the same folder so just dot,,,
slash card dot astro,,,
and then instead of having a div here,,,
what we're going to do is get rid of,,,
that,,,
and say cut oops,,,
should be uppercase,,,
c and we're going to pass in the title,,,
and the body let's save it and we get,,,
the same result,,,
okay so now,,,
we have we have our card component for,,,
each one of these as far as the styling,,,
goes i'm going to grab,,,
let's go to the main this main style,,,
sheet here and you can see we have this,,,
for the features,,,
and,,,
we're going to grab that,,,
that's going to go in the features,,,
component,,,
because we want everything to be,,,
encapsulated so that you have,,,
your components nice and neat with the,,,
output,,,
any,,,
logic any styling it should all be in,,,
the in the component,,,
all right,,,
so,,,
[Music],,,
that's that and you can see now these,,,
are horizontal but we do have a media,,,
query so that they stack on smaller,,,
screens,,,
so down here,,,
yeah right here so i'm just gonna i'll,,,
just grab this whole media query and,,,
then we'll put that,,,
right here but let's get rid of this,,,
footer thing in the header because we,,,
only need this,,,
and what this is doing is just stacking,,,
making it one column if the screen is,,,
less than 500,,,
now for the card styling,,,
i don't think there's much let's see,,,
yep there's just this uh this card class,,,
right here so we're going to grab that,,,
and let's put that in the card component,,,
and then whenever you want to use this,,,
card you can just use it on anywhere you,,,
want alright so now this looks pretty,,,
good,,,
okay it's horizontal on larger screens,,,
now let's also,,,
give give the card the option to uh to,,,
be dark to change the color just to make,,,
make it more customizable,,,
so what we can do is add another,,,
prop up here let's say dark and let's,,,
make that optional to boolean,,,
and then we'll do right here we'll say,,,
dark but let's make it false,,,
by default,,,
all right and then we can have a cond,,,
conditional styling or conditional,,,
classes which i haven't showed you yet,,,
but what we could do is,,,
this an expression put some backticks in,,,
here we always wanted to have the class,,,
card but then,,,
we can use our template literal syntax,,,
and say if dark,,,
if that's true then we also want to add,,,
the class of dark,,,
which i don't think i have do we have,,,
that no so let's just add that down here,,,
say dark,,,
and we'll do background,,,
and we have access to our global,,,
variables as well in the global css so i,,,
have a variable in there called color,,,
dash primary which is like that dark,,,
blue so we'll do that and then the color,,,
of the text will be white,,,
okay so now if i come back to features,,,
where i embed the card component and i,,,
add a dark,,,
attribute here or a prop and i set that,,,
to true,,,
let's see,,,
no that didn't work,,,
oh there we go i just had to reload it,,,
so now you can see that these are dark,,,
and if i wanted to i could just,,,
do three cards and make like the middle,,,
one dark if i wanted to but since i'm,,,
doing it this way they're all going to,,,
turn dark,,,
but i'm going to get rid of that i just,,,
want the option to do that,,,
that's what's nice about building,,,
interfaces in this way is the,,,
customizable,,,
uh,,,
components,,,
so now let's close up features and cards,,,
we can close up layout as well,,,
and we want to put the rest of the page,,,
content in here so i'm going to bring,,,
over the index.html,,,
and you can see under the features that,,,
we just did there's a section with the,,,
class of page content has a container,,,
and then just some h2,,,
h3 paragraphs but we also have this tabs,,,
so this tabs is dynamic it's let me just,,,
show you,,,
this thing right here so we click on one,,,
of these tabs and it shows us the you,,,
know the command for for that method now,,,
that javascript is right here in this,,,
script js basically we're just selecting,,,
all the the classes of tabs we're,,,
looping through and then we're calling,,,
this create tabs function for each one,,,
which gives it that functionality so,,,
what i want to do is have a tabs,,,
component with this javascript inside of,,,
it,,,
and i want to be able to,,,
basically pass in props for,,,
the headings and the body here okay so,,,
that we have a customizable reusable tab,,,
component,,,
so for now,,,
or to begin with let's go to our index,,,
html and just grab that page content,,,
section,,,
because that that's what it is it's the,,,
page content so we're going to put that,,,
right into the page so right here and,,,
replace this h1,,,
okay but the tabs is going to be a,,,
separate component so what i'll do is,,,
take that,,,
div right there and,,,
cut that and then create a new component,,,
called tabs.astro,,,
and for now we'll just paste that in and,,,
save it and we'll get back to that,,,
all right,,,
so yeah we'll get back to the tabs but,,,
let's save that,,,
and if we come down here you can see,,,
it's not really styled because we have,,,
this class of page content css that we,,,
have to add so back in style css,,,
let's grab this right here,,,
now this page content class i want to,,,
have that on every page,,,
so i'm going to actually put that in the,,,
global css,,,
so we'll put that right above the media,,,
queries here save that,,,
and now this is styled,,,
now let's bring the tabs component in,,,
even though right now it's just the html,,,
but we'll still bring it in so we can,,,
see what we're doing,,,
so let's say component slash tabs,,,
and we're going to put that right here,,,
we can get rid of this comment,,,
okay so i saved that and it's going to,,,
look really crappy right now because we,,,
don't have any styling,,,
so let me bring over,,,
our css and we just have this right here,,,
that we can add to the style and the,,,
component,,,
okay so we'll go tabs and,,,
style,,,
paste that in,,,
let's just tab it over,,,
okay if i save,,,
okay so it's going to show us all the,,,
commands because right now there's no,,,
javascript connected to this right so,,,
it's not like showing a highlight it's,,,
it's just html and css,,,
so what we can do,,,
is grab,,,
let's see yeah let's grab,,,
the javascript that's in the script js,,,
so we can just take this whole thing,,,
and in the tabs.astro file we can,,,
actually add a script tag,,,
let's see should we put this yeah we'll,,,
just put it at the bottom i guess,,,
so let's say script,,,
and then we can paste this in and we can,,,
use just we can use vanilla javascript,,,
just clean that up a little bit,,,
so now if i save that you can see now it,,,
only shows one command we have the,,,
highlight and now it,,,
works okay which is really cool because,,,
you can't really do that with like a,,,
react component you can't just throw,,,
vanilla javascript in and have it work,,,
like that,,,
now,,,
another thing we can do is the script,,,
tag we can actually pass in variables to,,,
this,,,
so for this color here this purple color,,,
i want to have that,,,
up here,,,
we'll define a variable for that color,,,
and you could even pass it in as a prop,,,
i didn't think of that before but you,,,
could do that as well,,,
yeah we'll make it a prop so let's say,,,
const,,,
active color,,,
okay so right now i'm just going to put,,,
it into a variable,,,
and the color is,,,
this right here,,,
right so this a741ff,,,
hexadecimal i'm going to grab that put,,,
that in there,,,
and now i want to use this variable in,,,
the script tag so what we can do is in,,,
script we can say define,,,
vars,,,
and i can pass in here,,,
we're going to use double,,,
curly braces here and then we can pass,,,
in our variable of active,,,
text,,,
color,,,
is that what i called it no acting i,,,
will say active,,,
text color,,,
okay so i passed that in now i should be,,,
able to use this within my script tag so,,,
down here let's replace this,,,
with active text color save that,,,
okay so we can see it's still purple now,,,
if i were to come up here and change,,,
that to let's say red and save now it's,,,
red,,,
so i think that that's pretty damn cool,,,
now let's take it a step further and,,,
make that a prop so let's say export,,,
interface,,,
props,,,
and,,,
we're going to add,,,
let's yeah we'll do we'll say active,,,
active text color,,,
and that's going to be a string,,,
okay and then down here let's do const,,,
active text color and we're going to set,,,
that to the default of this,,,
and then we can actually get rid of that,,,
okay and we want to get this from astro,,,
dot props,,,
as props,,,
so if i save that there we go and now i,,,
should be able to come over here,,,
actually let's make that optional so,,,
we're just going to add a question mark,,,
there,,,
let's come over here and let's say,,,
active text color and we'll say blue,,,
and there we go,,,
so yeah i mean,,,
this is this is the modern way of,,,
building interfaces rather than,,,
doing uh where'd it go,,,
where'd my sublime text go,,,
i have so much stuff open so rather than,,,
doing it like this you know,,,
these these monolithic html and css and,,,
javascript files,,,
so yeah let's let's get rid of that we,,,
don't need to pass anything in,,,
and we can also make the content props,,,
as well,,,
so,,,
maybe maybe you want to have other tabs,,,
around the site other components like,,,
this,,,
with different headings and different,,,
content,,,
so what we could do is in our tabs let's,,,
add,,,
let's say headings,,,
and that's going to be an array of,,,
strings and then let's do contents,,,
which will be an array of strings and,,,
then come down here we'll say heading,,,
headings contents,,,
and then what we could do is uh,,,
instead of just having these lis we can,,,
map through,,,
we don't even need this default tab,,,
class,,,
let's see if i get rid of that,,,
it's still,,,
npm,,,
but what we can do is now,,,
take,,,
the headings,,,
and let's say dot map and we'll say for,,,
each heading,,,
we want,,,
for each heading we want an li,,,
whoops we don't need an a tag,,,
let's get rid of that and we don't need,,,
this,,,
so just a list item with the headings,,,
uh wait a minute what's going on here,,,
this,,,
this shouldn't be here there we go,,,
all right so mapping through the,,,
headings we're going to put each one in,,,
a list item and then we also we're also,,,
going to pass in contents which is going,,,
to be this here,,,
so,,,
let's,,,
get rid of these lis,,,
and yeah we're going to do the same,,,
thing so contents dot map for each one,,,
we're going to have a list item but we,,,
do want to add the class,,,
of tab onto each one,,,
all right so if i save that that's going,,,
to break because we didn't pass anything,,,
in,,,
to,,,
you know into this as headings and,,,
content so that's what we want to do,,,
right here,,,
so for headings,,,
let's pass in an array,,,
of strings we'll say npm,,,
pnpm,,,
yarn,,,
okay and then we also want to pass in,,,
contents,,,
and for that,,,
is going to also be an array,,,
so the first one will do it's going to,,,
be the command so money sign,,,
and then npm,,,
create,,,
what is it create astro at latest,,,
so that'll be the first one,,,
next one will be,,,
money sign pnpm,,,
and then create,,,
create astro,,,
latest and then we have,,,
the yarn so that's going to be yarn,,,
yarn create astro all right so let's,,,
save that,,,
and there we go and if we wanted to,,,
change,,,
one of these headings like the first one,,,
here if we wanted to change that to,,,
hello and save,,,
now that's changed,,,
okay if i wanted to oops if i wanted to,,,
change the content,,,
of the first one,,,
there we go so i could i could create as,,,
many of these tab components around my,,,
website as i wanted to just just by,,,
doing this,,,
so yeah that takes care of that i think,,,
that's all i wanted to do as far as,,,
the tabs go,,,
and we're pretty much done with the home,,,
page we just have the footer now which,,,
is,,,
very simple so basically have the links,,,
on the right just some text on the left,,,
small screens will get rid of the links,,,
okay so let's add a new component,,,
for the footer,,,
i keep wanting to do.jsx,,,
so footer let's grab the html,,,
which is this right here,,,
okay and then let's put that right in,,,
there and then we'll grab the css as,,,
well,,,
so let's see this,,,
we want all these and i think we have,,,
some footer stuff yeah right down here,,,
i'm just going to grab from there down,,,
from the footer down,,,
and copy that and then in here,,,
let's say style,,,
paste that in,,,
and we don't need this 960 media query,,,
we don't need that in here and then in,,,
this one we just need the footer part,,,
okay,,,
yeah so that should do it,,,
actually let's just fix this,,,
all right so i'm going to save that and,,,
now the footer i'm going to bring into,,,
layout i'm not going to bring it into,,,
index i want it on every page so that's,,,
going to be a layout component,,,
so let's say import,,,
footer,,,
okay and then we'll put that right under,,,
the slot,,,
and,,,
save and there we go so now we have our,,,
footer,,,
actually let me see what the links,,,
yeah we just want to change these,,,
so this will be slash about,,,
this will be slash,,,
blog,,,
good,,,
so yeah that's the home page just look,,,
at it on,,,
bigger screen,,,
i think that looks pretty good so the,,,
next task is the about page which is,,,
going to look like this so pretty simple,,,
just basically some text along with a,,,
card component,,,
all right so now remember to create a,,,
new page all we have to do,,,
is create a new component in the pages,,,
folder so let's create let's say about,,,
dot astro,,,
right and if i just say about,,,
i should be able to now go to slash,,,
about and i can see about,,,
now i want to,,,
i want to use the layout,,,
so,,,
what we would do here is just import,,,
layout,,,
actually we need to add,,,
our hyphens that's something i forget,,,
quite a bit so let's say import layout,,,
from,,,
dot dot slash,,,
layout slash layout dot astro,,,
okay and then,,,
let's just come down here we'll say,,,
layout and remember we can pass in a,,,
title so we'll say about,,,
astro,,,
and,,,
just put a paragraph in there now,,,
there we go so we now have our layout,,,
as for the html let's grab that from the,,,
theme,,,
so if we go to about html,,,
and we just remember we have the section,,,
of page content that's going to be on,,,
every page so,,,
we'll just take all that,,,
we don't need to get the footer or,,,
anything above here because that's,,,
already in the layout,,,
but we'll grab that we'll paste that in,,,
okay and then i'll save that,,,
okay,,,
now,,,
we do have an image where's the image,,,
right here we need these deploy images,,,
so let's go ahead and uh bring those in,,,
so,,,
let's see,,,
i'm gonna,,,
import,,,
logos,,,
from and then this is gonna be in,,,
images slash,,,
deploy dash logos.png,,,
and then we'll copy that down we also,,,
want the small version,,,
and,,,
let's replace,,,
this,,,
logos and then we want to replace this,,,
with logos small and save,,,
okay there we go,,,
all right now i want to add a card you,,,
can see this div right here has a a,,,
class of card so i want this to be a,,,
card component now we could continue,,,
doing it so the card takes in a title,,,
and a body,,,
but what if what if we want to have,,,
something else in here you know what if,,,
we want to have um,,,
an image or something just anything else,,,
i think that what i want to do is,,,
instead of of passing in title,,,
and body i think instead i'd just rather,,,
wrap this,,,
in a card class you know and and have,,,
the dark option as well,,,
so let's actually do that,,,
so instead of taking in,,,
a title and body so we won't even have,,,
these props,,,
i mean it's up to you it's up to you and,,,
how you want to do this but instead of,,,
doing that what we'll do is have the,,,
the class of card and the,,,
con conditional dark class,,,
and then in here we'll just have a slot,,,
so basically the slot is just whatever,,,
you surround just like we did with the,,,
layout,,,
all right so now if i come over to the,,,
about page and i bring in,,,
let's say import card from,,,
component slash card and then i should,,,
be able to to do this let's save and,,,
there we go and if i want to pass in,,,
dark,,,
i can set that to true,,,
and i could do that as well actually,,,
that doesn't look bad,,,
yeah we could keep that like that,,,
now we have to change on the home page,,,
right now this is going to break,,,
because we're still passing in those,,,
props so let's go to index,,,
and go to,,,
uh,,,
i'm sorry not index it's in the features,,,
features component,,,
and let's see we did that,,,
so,,,
i mean really all we have to do is,,,
instead of passing these in is surround,,,
them,,,
so we would,,,
go like that and then we'd pass in like,,,
that because that would be the slot,,,
so if i save now that it's back to how,,,
it looked so it's really up to you if,,,
your cards are always only going to have,,,
a heading and a title and body then it's,,,
fine to leave it how it was or you could,,,
add other props maybe a link or,,,
something like that,,,
so it's up to you,,,
so now we want to add our blog,,,
functionality so we can close all this,,,
up,,,
and basically what i want to do is have,,,
a markdown blog so we'll have a folder,,,
where we can have all of our posts,,,
and we'll have it automatically show,,,
the post like this on the blog page and,,,
then have a link that goes to the single,,,
post so that's what i want to do,,,
um,,,
now before we do the markdown thing i,,,
want to show you how we could actually,,,
fetch them from an api and we actually,,,
already did this with the json,,,
placeholder in fact that that's what i'm,,,
going to use but,,,
i'll show you that way as well,,,
so if you had some kind of headless cms,,,
and you had an api you you want to hit,,,
to get your posts,,,
but let's uh let's go to pages and let's,,,
create a new file called blog dot astro,,,
and we want to use our layout so let's,,,
make sure that we import,,,
we need to add,,,
all right so we're going to import,,,
layout from,,,
layout dot astro,,,
not components,,,
layouts,,,
and then down here we'll say layout and,,,
we'll give it a title of,,,
what did i say for about did i say,,,
astro blog no i said about astro all,,,
right for some reason i thought i'd put,,,
blog there so we'll say astro,,,
blog,,,
and if i save that that should be enough,,,
for this to work if i click on blog,,,
okay so now we have our layout,,,
so as far as the,,,
the html is actually very simple if we,,,
look at blog html,,,
we just have,,,
the page content section container and,,,
then we have a bunch of cards with the,,,
posts,,,
so we don't even have to copy that we,,,
can just,,,
go ahead and type that in here so we,,,
have a,,,
section,,,
with page,,,
content and then we have a container,,,
it could have put container on the,,,
section but whatever,,,
all right now,,,
as far as getting posts,,,
like i said we're going to use markdown,,,
but just to show you how easy it would,,,
be to get from an api we could just say,,,
response,,,
equals remember we have that top level,,,
async so we can just use,,,
a weight,,,
and that's not the url that i want,,,
do jason,,,
placeholder but i want to get posts,,,
and we'll do let's say underscore limit,,,
of five,,,
and then we could do const,,,
posts and set that to the response jason,,,
and we're going to use cards so we would,,,
bring that component in,,,
so import card,,,
and then down here,,,
what we would do is map through the,,,
posts so post dot map and say for each,,,
post,,,
we want,,,
a card,,,
let's say card and we want to pass in,,,
actually we're not passing in anything,,,
anymore because we're,,,
we have a slot,,,
so in here we'll put the,,,
yeah h3 in paragraph with the post title,,,
and body if i save that,,,
there we go,,,
now,,,
as far as markdown goes,,,
what i want to be able to do is have a,,,
folder in the source folder,,,
called posts,,,
so let's uh yeah let's create that so,,,
posts,,,
i mean you can call it whatever you want,,,
articles posts whatever,,,
and then let's see what did i have for,,,
files,,,
um,,,
the name of the of the file is gonna be,,,
or should be your title basically like a,,,
slug,,,
i mean it doesn't have to be because we,,,
will have a slug field in the front,,,
matter but i'm just going to say like,,,
this first one i want to be called i,,,
want it to be called astro 1.0 so i'll,,,
do for the title,,,
or the file name i'll do astro dash,,,
Jan-00,,,
and then dot md because it's a markdown,,,
file,,,
now as far as markdown goes,,,
uh it's it's pretty simple markdown i,,,
have a markdown crash course,,,
um as far as fields you're going to want,,,
to put that in the front matter,,,
so the front matter you can kind of,,,
think of as like database fields if you,,,
had blog posts in a database you would,,,
have things like a title,,,
a slug an excerpt,,,
um a date you know things like that so,,,
that's what we put in the front matter,,,
and that's set up just like our,,,
components with the triple,,,
triple hyphen,,,
okay and the these are not not this is,,,
separate from astro this is markdown,,,
so this is where we put our front matter,,,
so i'm going to put the title of the,,,
article in here actually we don't need,,,
to do it as a string it's just,,,
like this,,,
all right so that's the title then we'll,,,
do a slug,,,
and the slug is just going to be a url,,,
version of the title,,,
and then excerpt,,,
excerpt i'm just going to grab,,,
that i just have some warm ipsum i'm,,,
putting in here,,,
okay and then we'll do let's say date,,,
so for the date i'm going to do 20,,,
22,,,
0 5 1 3 and then we'll put an author,,,
john doe so that's the front matter now,,,
the the the content the body of the blog,,,
post is gonna go down here,,,
and i'm just gonna paste in a bunch of,,,
lauren ipsum,,,
okay so that's our first post we're not,,,
going to see anything obviously because,,,
we haven't added that functionality but,,,
i want to create two more posts before,,,
we do that so i'm just going to copy,,,
everything in here,,,
and then let's create another post and,,,
i'm going to call this one,,,
astro dash 1-0,,,
dash,,,
release,,,
dash update dot md,,,
okay and then we'll paste that in and,,,
let's just change the title here to,,,
uh release,,,
update and then the slug as well,,,
and i don't know we can change,,,
the author and we can change,,,
the date to something else,,,
all right and then we'll create one more,,,
so post let's create one more we'll call,,,
it astro,,,
what is this one,,,
astro on dash,,,
netlify dash,,,
edge,,,
dash functions,,,
function dot md,,,
all right and then we'll do the same,,,
thing paste that in,,,
netlify,,,
edge,,,
functions,,,
okay and we'll change,,,
that all right so now we have three,,,
three markdown posts,,,
now for those of you that,,,
took my next js course or you watched my,,,
next js video where we created a blog,,,
with markdown,,,
the amount of code that we had to write,,,
then compared to what we can do here,,,
with astro is crazy,,,
they make this really easy,,,
so and i'm talking about to get the post,,,
and to create the links to go to a,,,
single page but to get the post all we,,,
have to do we can get rid of this,,,
response because we're not dealing with,,,
an api anymore so we can get rid of that,,,
and then,,,
we can instead of awaiting response we,,,
can simply do,,,
await,,,
and then astro dot glob glob,,,
and then in here we simply put the,,,
the location of the folder which to us,,,
is going to be,,,
up one level and then posts and then,,,
we're just gonna do slash,,,
star so basically anything and then dot,,,
md so any markdown files so we're,,,
fetching those all right now the only,,,
other change we have to make is once we,,,
get these posts using this,,,
the title um,,,
the title the excerpt which is also what,,,
i want to show here those are in the,,,
front matter and that's going to be an,,,
object so instead of post dot title we,,,
can do front matter,,,
so front matter dot title,,,
okay and then i also want to put the,,,
excerpt here so we'll say front matter,,,
dot,,,
excerpt,,,
all right i'm going to save that and,,,
there we go,,,
so it's as easy as that,,,
so now any time i add a new post to this,,,
folder,,,
it's just going to show here,,,
automatically,,,
now it's that versus having a site like,,,
this with all separate html files and,,,
having to create a new html file every,,,
time,,,
having to go into your blog html and,,,
manually add a new card,,,
you know it's just,,,
it's it's much easier and much more,,,
modern,,,
so,,,
one thing i did forget is the showcase,,,
at the top i do want to use the showcase,,,
component so i'm going to bring,,,
that in,,,
so import showcase from,,,
components,,,
showcase,,,
and let's go right above the section,,,
here,,,
so showcase and we want to pass in here,,,
it takes in a heading,,,
so we'll say astro,,,
blog,,,
and also,,,
text,,,
so we'll say a simple,,,
blog built with,,,
astro,,,
there we go simple,,,
and then of course i want to have the,,,
link,,,
that goes to uh,,,
that goes to the the single blog post,,,
now that is actually going to be the,,,
slug okay because we have this right,,,
here so we want to be able to go to,,,
whatever our domain is in this case,,,
localhost 3000 slash,,,
astro10 and that should bring us,,,
to the page and that's actually pretty,,,
easy to do but before we,,,
do that let's add the link,,,
so we're gonna do,,,
an a tag and let's say ahref,,,
actually that's gonna be dynamic,,,
and let's say read more,,,
and let's give this a class of btn which,,,
is a global class,,,
okay now as far as the link,,,
in here we're going to put some back,,,
ticks because we do want to have a,,,
backslash,,,
i'm sorry forward slash and then our,,,
template literal where we can do post,,,
dot,,,
front matter,,,
and we want the slug,,,
all right so if i save that,,,
the link isn't going to go anywhere,,,
right now if i click it but we should,,,
see,,,
right here,,,
astro so it's going to be whatever the,,,
slug is,,,
all right now to do that,,,
this is going to be very similar to what,,,
we do with next js and nux js if you're,,,
familiar with those so in pages we can,,,
create,,,
a new page we're going to use brackets,,,
and then whatever the field,,,
that,,,
basically whatever the field the url is,,,
connected to it could be an id but for,,,
us it's going to be slug so we're going,,,
to say brackets slug dot astro,,,
now if you've ever used next js to,,,
create a static site and y",,,
ou had either,,,
a blog post or some kind of resource,,,
where you needed to create paths,,,
you use this function called get static,,,
paths and we do the same thing in astro,,,
so we're going to,,,
create our script up here our hyphens,,,
and then we want to export,,,
an async,,,
async function called get,,,
static,,,
paths and,,,
co-pilots probably going to get yeah,,,
it's giving me a bunch of next js stuff,,,
so just ignore that but let's create a,,,
variable here called posts,,,
and we can get post just like we did,,,
here in fact i can just copy this,,,
so using astro,,,
dot glob and then passing in the,,,
location of your posts,,,
then we want to return from this an,,,
array of objects that has a params,,,
object in it with the field that we want,,,
to use for the urls or the paths which,,,
in our case is a slug,,,
so let's say return,,,
and then from the with that post array,,,
we're going to map through it,,,
and say for each post we want to return,,,
an object so parentheses with,,,
curly braces,,,
and that should have a params,,,
object with the name of the field for us,,,
is going to be slug and we get that with,,,
post dot front matter dot slug,,,
okay and then we also want to put a,,,
comma right here and then just have,,,
props,,,
with an object,,,
and we can just,,,
put in post here,,,
okay so now we'll be able to get our,,,
post content and front matter through,,,
props,,,
so we can actually go right under the,,,
get static paths,,,
and say const and we can destructure,,,
from astro,,,
dot props dot post,,,
and we should be able to get the content,,,
so we can do that with uppercase c,,,
content and then we also have access to,,,
the front matter and i want that because,,,
we need the title,,,
okay so next thing we want to obviously,,,
output this and we want to use our,,,
layout so i'm going to come up here and,,,
import the layout,,,
from,,,
layout slash,,,
layout.astro,,,
oops,,,
this should be,,,
dot dot slash,,,
and then i'm also going to import,,,
a card,,,
from,,,
dot dot slash components,,,
card,,,
okay and then let's come down,,,
here to the output,,,
and let's do our layout,,,
and then for the title i'm actually,,,
going to pass in the,,,
front matter dot,,,
title,,,
and just for now we'll just say hello,,,
so the the path when i click on these,,,
read more buttons it should work because,,,
of this,,,
so if i click that there we go we just,,,
get hello but you can see that,,,
these paths are now working and we,,,
should have access to this stuff right,,,
here,,,
now i do want to have in the layout,,,
we're going to have our section,,,
of page content,,,
and then our container,,,
and then,,,
in here we're going to wrap everything,,,
in a card,,,
okay and we're gonna have a link to go,,,
back,,,
so let's have that go to just slash,,,
and we'll say go back,,,
actually let's give it a class,,,
of,,,
btn,,,
okay and then underneath that we want,,,
our title i'm going to put that in h2,,,
and we can just do front matter dot,,,
title,,,
and then underneath that,,,
let's put in our content we can do that,,,
just like that that'll put our markdown,,,
content,,,
all right so pretty cool pretty easy,,,
actually i want this back button,,,
to go to slash blog,,,
okay so if i click on this article it,,,
takes me to that one,,,
takes me to that one,,,
so it's pretty easy pretty easy to set,,,
up and now it's really easy to,,,
go ahead and just add posts and create,,,
whatever fields you want,,,
in fact we have the the fields we might,,,
as well add them so on the slug page,,,
we can go right under the h2 and let's,,,
put we'll put a div here,,,
and let's,,,
say written,,,
by,,,
actually yeah we'll do that,,,
so written by jane doe on,,,
now this date we can format this we can,,,
have regular javascript in here so let's,,,
do,,,
let's say new date and wrap this,,,
front matter date,,,
and to make this look even better we can,,,
do two locale date string,,,
and maybe we want to make that,,,
strong i will make you know that would,,,
make the author name strong,,,
good,,,
and we can put the same thing on,,,
this page as well if we go to blog,,,
let's go right below the title,,,
um,,,
oh we need to do post,,,
dot front matter here,,,
post,,,
cool,,,
so that's going to do it for the website,,,
now,,,
to deploy this you of course want to you,,,
want to turn this into,,,
a static website and you do that let's,,,
just stop the server here you do that,,,
with npm run build,,,
and what that'll do is it'll create a,,,
dist folder as you can see right here,,,
and then we have all of our static files,,,
in here we have our about file we have,,,
our individual blog posts,,,
as html files our blog page and then the,,,
index.html now if we look at this,,,
index.html,,,
you can see that,,,
the only javascript,,,
we have in here is my tabs component,,,
nothing else if we go down to the bottom,,,
here there's no other script tags,,,
so that's that's what's really cool,,,
about astro and that's what they mean by,,,
the island architecture is you have all,,,
this water all this html with your,,,
javascript islands,,,
all right now to host this is really,,,
easy because it's all it's just a static,,,
website so you can really host it,,,
anywhere netlify makes it really easy,,,
because you can just deploy your your,,,
entire project to github and then push,,,
it to netlify and then netlify will host,,,
the dist folder,,,
so let's actually do that first thing,,,
you want to do is create a github repo,,,
so i'm going to go to github,,,
i'll just do this later and then let's,,,
go ahead and say,,,
new,,,
repository,,,
and i'm going to call this astro dash,,,
website,,,
and i'll just call it astro,,,
crash course,,,
website and i'm going to make it private,,,
for now,,,
i'll make it public later on for you,,,
guys,,,
so create repo,,,
all right then we're going to grab the,,,
remote,,,
i'm sure you guys know how to do this,,,
so we should already have a,,,
a get project so if i just do get status,,,
we should see,,,
you know everything that's not committed,,,
and then we'll do,,,
let's say git,,,
add all,,,
and get commit,,,
and just say initial,,,
commit,,,
okay now i'm going to paste in that,,,
remote link,,,
and then you're just going to want to,,,
create your main branch,,,
and then push,,,
to github,,,
uh permission deny i hate when it does,,,
this hold on guys,,,
ssh,,,
add,,,
uh dot ssh,,,
slash id underscore rsa,,,
underscore github,,,
all right,,,
so now let's come over here and reload,,,
and there we go so now it's on github,,,
i'm going to change this is the the,,,
standard astro readme i'm going to,,,
change that i'm also going to add the,,,
theme to this repo as well but i just,,,
want to show you now if we go to netlify,,,
and i'm just going to log in,,,
okay so once you log in you'll see a,,,
you know dashboard like this and then,,,
you can just say add new site import,,,
i'm importing from github,,,
it's going to authorize,,,
and then you're going to want to find,,,
find your repo,,,
okay so it's right here,,,
now you just want to make sure that your,,,
build command is npm run build and it,,,
will be by default or it should be and,,,
your dist folder is your publish,,,
directory so that's what it's going to,,,
deploy is that dist folder it's not,,,
we're not actually pushing this disk,,,
folder onto our repo in fact that's in,,,
the git ignore,,,
as you can see here that doesn't get,,,
pushed what happens is it builds it on,,,
netlify,,,
alright so now we should be ready to,,,
deploy,,,
and now this might just take a minute or,,,
two,,,
okay so i just reloaded and now we,,,
should be all set i have my domain here,,,
and of course you could use your own,,,
domain,,,
and there we go let's check this,,,
so that's working let's go to the about,,,
page,,,
so as our about page let's go to our,,,
blog page,,,
okay so we have all of our markdown,,,
files here if i click on the button,,,
brings us to the,,,
the actual post and you can see that the,,,
path is working,,,
so it's as easy as that now if i want to,,,
add a new blog post i simply add a new,,,
markdown file push to github and that's,,,
it netlify will automatically add that,,,
deploy,,,
all right so you don't have to do,,,
anything except create the new blog post,,,
so it's a pretty pretty easy simple,,,
workflow and obviously,,,
you know you're probably not going to,,,
use this method for like a huge blog,,,
with with you know 50 60 authors but,,,
something like a personal blog i think,,,
that this is a great stack great,,,
platform,,,
but that's it guys hopefully you enjoyed,,,
this and i will see you next time",,,
qNiUlml9MDk,"[Music]
what's going on guys in this video we're
going to create a qr code generator with
vanilla javascript now what made me
think of this project is the other day i
went out to breakfast with my family and
at the restaurant and i've seen this at
many restaurants they have a qr code for
you to scan and then it opens up their
menu and you can order basically you can
pre-order so that
they have it ready for you when you get
up there in the line so i i thought why
not create
something to allow people to make these
these qr codes and i created this qr
code generator where we can enter a url
this might be like like i said like a
restaurant menu or something we can
choose the size and we can generate the
code so now if you scan this with your
phone it's going to open up that url we
can also save it as an image you can
print it out whatever so very very
simple it took me about four or five
hours to to create this and deploy it
it's at qrcodes.tech right now
so
before we get into building this i just
want to talk a little bit about side
projects because
this is this is a good example of a very
simple side project that
could bring you some monthly recurring
revenue you know if you were to
add some do some seo and then add some
google adsense on the page you might be
able to make a few bucks per month i
mean it's definitely not going to be a
gold mine there are a lot of other qr
code generators so it's not like an
innovative idea but it is something that
you could put up you know even if it's
just to put on your your portfolio or
resume i would encourage you to do small
projects like this you know not every
project has to be this big endeavor that
takes up all your time
so just something to think about and
that's that's even if your your goal is
to become a developer at a big tech
company it's nice to have these little
side projects
all right so as far as how we're going
to build this like i said we're using
vanilla javascript if you want to use a
framework you could but
i'm not really going to scale this up
and you know i'm not going to add any
more features to it so
why even use a framework it's only about
70 lines of code or so
all right and we're going to use
tailwind for the for the whole ui for
the design so we won't be writing any
css but we will be using tailwind
classes
so this is a library that i found qr
code js which is very simple all you
have to do is is create this qr code
object add the url that you want to open
add the the size the color and it it
generates it puts it on the page so
initially i was just going to show you
how to do that but i figured
it's so easy i wanted to do something a
little more in depth so i went ahead and
created an application where you can put
in the url in a form as well as the size
and generate it and also download it as
an image and then i have the repo right
here i'll have the link to that in the
description if you want to grab the the
images or anything but yeah so i figured
it'd be a nice little project so that's
it let's go ahead and get started
alright guys so i have vs code open and
all i've done is created an index html
which is completely empty and then in my
js folder i have a script js which is
also completely empty and then an img
folder with my images and you can get
those from the um from the repo in fact
you don't need the screenshot i mean you
can keep it if you want but you don't
need it
all right so to get started here let's
go into our index.html and create an
html5 boilerplate and then for the title
we're going to say qr code
generator
and then we want to link our our script
that's in the js folder so let's go
ahead and say script source
and we want to bring in js script js and
since i put it at the top i'm going to
use defer
all right and then in the body just for
now i'll put an h1
save that and you can just open up the
index html on your file system or if
you're using vs code you can use an
extension called live server which is
what i'm using so i'm just going to say
open with live server
and that will open it on port 5500 by
default all right and i'm just going to
leave the finished product here just for
just for reference
as far as the ui
we don't have a a style sheet here
because we're going to be using tailwind
and we're just going to use tail in
classes so if you go to
tailwindcss.com and then get started
there's a few ways to get started if you
want to use the cli you can i'm going to
just use the cdn just to keep it simple
so i'm going to grab that script tag
right here
and let's put it right above our script
tag
and then i do want to use a different
font i'm going to be using the poppins
font
so to do that without having to you know
add some css and say body and then font
family we can use the config object so
i'm going to grab the script tag that
has this tailwind config object and
we'll put this right under that
and then we're just going to get rid of
this colors here and let's say font
family which is going to be an object
and then this is for the sans font so we
want to say sans
and whoops that should be in
in the damn object
so let's say sans and that's going to be
an array with the fonts we want to add
so let's say poppins
and sans dash serif all right
so we'll save that
and now we should have the poppins font
all right so the next thing we need is
the qr code library so this right here
qr code js this allows us to create a qr
code object now
on in the documentation here whether
it's this page or the the github they
don't really
show you how to add it so there's no
cdn so what i did is i went to
cdnjs.com and searched for qr code and
it came up right here so i'm just gonna
right here it says copy script tag i'm
just gonna click on that
and then i'll go ahead and put this
right here
and we'll paste that in and now we
should be able to use that library
all right so that should be it for like
the head and
anything we have to any dependencies
that we have to include so now we can
start to work on the layout which isn't
going to be too bad we have just a
header here or a nav bar if you want to
call it that there's no navigation but
you know just the header and then
this is going to be a flexbox
and this will be the first flex item the
text and the form and this will be the
second flex item which is just the image
and then once we generate a code
we're gonna we're gonna add the spinner
functionality with javascript and then
the code will be shown down here with
the button to save it as an image all
right so let's get started with the
with the header so i'm going to go right
into the body here let's get rid of that
and let's say header
and actually
trying to think if i should add the
classes as we go because there is quite
a bit any of you guys that have used
tailwind you know that there are a lot
of classes
so and this is not a tailwind course i
have a full 12-hour uh udemy course on
tailwind i'll put the link to that in
the description i also have a crash
course and plenty of other tailwind
videos but i will explain kind of what
what these do
as i go along so let's say bg red 500
that's going to be the background color
of this header and then i want padding
so i'm going to do p dash 4 that's
padding all around and then margin
bottom 10
okay and then in the header i want a
container because i don't want it you
know the
i don't want this to be all the way over
here you know when we make the screen
really big or the browser really big so
let's add a class of max with max w
we'll do 5xl and then let's do margin
auto to put it in the middle
and then for the text we're going to
have a class of text
excel
extra large we want to bold the text so
we'll say font bold
and then i also want the text to be
white so text white and then the text
itself will just say qr code
generator all right so let's save that
and there we go now we have our header
so next we want under the header i'm
going to add a main tag and then we want
our flexbox
so when we when we create responsive
layouts with tailwind it's mobile first
and we can use classes like if i say md
and then i want to use the class of flex
row like that what will happen is this
class will only apply when the screen or
the browser is the medium
whatever that medium size is and then up
okay so medium screens and up would get
this class so keep that in mind because
we want to do this we want to make this
responsive so what i'm going to do is
add a class of flex which turns it to a
flexbox
i'm going to say flex dash call dash
reverse because by default or i should
say on small screens i want it to be a
column i also want it to be reversed
because i want the image to be on top
right so if we look at that the image is
on top
now if i don't do reverse if i just do
flex call then the image is going to be
on bottom when it's a column
okay so let's say flex call reverse
and let's come back over here i want to
align the items to the center so we can
use align center
justify content to center so justify
center
and then margin auto
and then on medium screens
so on medium screens i are in up i want
to use max
let's say max dash with dash 4 xl
and then also on medium screens and up i
want this to be a flex row and go
horizontal okay so that's our flexbox
and then what we'll do is we'll have
these two divs
let's just say div one for now and then
another div and we'll say div
two
and if we save that you can see it's a
column but once i hit
once i hit that medium screen it turns
into a row and they're side by side so
that's what i want
now as far as the width for both of
these
if we look at medium screens and up i
want this to be two-thirds and this to
be one-third
so what we'll do is add let's say class
and it's going to be width full to begin
with meaning it takes up the entire
thing but then on medium screens we want
the width to be one
not one half we want the width to be two
thirds this is the first div i'm also
going to add some margin on the right so
let's say margin right 24. and then for
this div
say class we want it to be with full to
begin with so mobile first and then
medium screens we want it to be with
dash one third
okay i think that's all i want here i
also want to add the class of self
center which will do align self
and set that to center
okay
so yeah there we go
and again
you go down under medium screens and
they're going to stack
so now the second div is going to be an
image so we might as well just add that
real quick so i'll say image the source
is going to be image slash qr code
and then let's add a couple classes here
so basically the image i want it to take
up
half
uh let's just see what it looks like
if i save
so i mean
that looks okay but
obviously i want this to be a little
smaller
so what we'll do is we'll set the width
to one half
okay so that's two to begin with
and then
let's move it to the middle so we'll say
margin auto and then on
medium screens
and up we can then set it back to false
so with fall
and let's also add some margin bottom
i'm going to put that
right here so mb10
yeah
all right good so if i make this bigger
yeah i think that's good
that takes care of the image now for the
the text in the form that's going to go
in this first div
first flex item here
so the first thing we want is the
heading
so let's do an h1 and let's say text
dash 3xl
and let's do font dash bold
and margin we'll do margin bottom five
and then on medium screens we'll make
the text a little bigger so let's say
text dash
we'll do 4xl
okay and then that's going to just say
qr code
generator
so we'll save that
okay
so underneath the heading we're going to
have a couple paragraphs so let's go
under that and this paragraph i'm just
going to give it a class of mb4 to push
the other one down and then i'll just
copy the text and paste that in you guys
can just
type that out
and then there'll be another paragraph
under it and i'm just going to grab that
text real quick
okay we'll save that
good
now i do want to have some padding why
am i why don't i have any padding on
this
let's see yeah
so on this div right here
the flex div let's add
let's say p dab oops
p dash 10
there we go
okay so back down here we want to go
under this this last paragraph and now
we're going to add the form so let's say
form i'm going to give it an id of
generate
we'll say generate dash form
and then as far as
classes go i'm just going to do a margin
top four
and we don't need an action attribute we
can get rid of that
okay so now inside the form here we're
going to have a text input for the url
we'll actually we'll use the url type
but then we have a bunch of classes so
we're going to do with full
let's say border dash 2
and the border color we'll do border
dash gray 200
let's make it rounded
and padding 3
and then for the text we'll do text gray
text grade doc
and let's say margin right 2
and then in the focus state i want to
remove the outline so i'm going to say
focus colon outline
none
and then let's say margin bottom five
okay so that's the classes
oops let's save that
all right and then i'm just going to add
on to that
in id because we need to access this
from the javascript so for the id let's
say url and then i'm also going to
change the type
to url as well
and then we'll add a placeholder as well
so let's say placeholder will say enter
enter a url
all right so there's our url input next
we want to select with the size
so still within the form tag let's say
select
and i'm going to add some classes
actually we can probably just copy
yeah we'll just copy all these classes
and we don't need a name
the id is going to be size
let's say class equals and then we'll
paste in
all those classes except for the mb5 we
don't need that
all right now with within
the select we want to have our options
so let's say option
the value for this is going to be 100
and then for the text we'll say 100 by
100
and then we'll copy this down a bunch
so we want 200
2 and then 3. actually i'm just going to
paste this in
okay so we just have 100 to 700 if you
want to change these up you can and i'm
going to select 300 by default
then we just need the button so
underneath the select let's say button
and let's do a bg dash gray 600
let's do
rounded and the width we'll do full
text color will be white and let's do
padding on the y-axis 3
and padding on the x-axis 4
top five and then on the hover state
i'm going to change the bg to black
okay and then let's just add in here a
type
of submit
and then we'll say generate
qr code
all right cool
so
yeah that should really do it as far as
the
the top section
yep so that looks good
now down below it is where the the qr
code is going to generate
so we want to keep that within the main
tag but we want to go underneath that
flex div that we created so i'll just
say like this is the where the generated
uh qr code will go
okay so
this div is going to have a container so
let's do max with 5xl
and margin i'm going to do margin auto
let's make it a flexbox but we're going
to make it a flex column
and then we want a text
center
align center
justify
center and margin top 20.
now there's going to be two things that
go in here there's going to be our
spinner
and it's going to be
we'll say qr code output
okay now the qr code output is simple
it's just going to be an id of qr code
i'm also going to give it a class of m
auto to center it
and then that's basically the
placeholder for the generated code
now the spinner is going to be an svg
and it's quite a bit so if you go to the
the repo link in the description
you can just copy the spinner div that
has the svg in it so i'll just paste
that in let's just uh
space this out a bit here so yeah i'll
paste that in
and basically we just have oops i don't
want two of these we basically just have
a div with the id of spinner and then
inside that is the svg and if you want
to change like the the color and stuff
like that you can change up these
attributes if you want and then we also
have just a span with the class of
sr only that says loading and
that's it so let's save that we should
see the spinner
now we are gonna in our javascript work
we can set this to hide the spinner
um but
you might get a little flicker so what
i'm going to do is just add in some
style tags up here
let's go right above the title just to
hide that spinner by default
so we'll just grab it by the id and say
spinner
and then display
none
all right so that way it doesn't show it
doesn't even show it doesn't flicker or
anything
all right so now we're ready for the
javascript so let's jump into our script
js and first thing i'm going to do is
just bring in a couple things we want to
bring in the form so i'll just say
document.getelementbyd
and i believe it's generate
dash form is the id
and then we're also going to bring in
the qr code div
which is where we want to embed it so qr
code and then let's just
variable here i'll call it qr
all right now
on the form we want to add an event
listener so we want to listen for a
submit and when that happens we'll say
let's say on
generate
submit for the function
and then we'll go ahead and create that
up here i'm going to use arrow functions
but if you want to use regular functions
that's absolutely fine
okay we want to prevent the default
behavior because it's a form submission
and then let's get the form inputs so
the url we'll say document.getelementbyd
and that's going to be the id of url
since it's an input we need to get the
value of it not just the
not just the element
all right and then we'll copy that down
and we want to get the size
which is the select box
that has an id of size as well and then
let's just do a console logs
some reason that isn't working say
console.log
of
url and size
all right so let's save that
if i come down here
and since i'm using the tailwind cdn it
does give us this warning but you can
just ignore that so i'm going to put a
url in here with the size and you can
see that it's logging that
good
so next thing
um
i do want
let's just do a little bit of validation
here we're going to say if url
is equal to an empty string
then i'm just going to show an alert i
might add a custom alert box later on
but for now we'll just do this
we'll say please
enter a url
okay and then else if they do enter a
url
i do want to show the spinner so what
i'm going to do is right under the
on generate form or on generate submit
let's say const show
spinner
okay and all we want to do here is
select the spinner so we'll say document
get element by d
spinner and we want to set the style of
display
to block okay so that's going to show it
and then what we'll do is copy this
down and let's
change the name of this to hide spinner
and all we're going to do is change that
to
none
okay and i know we put the css in but
i'm just going to call hide spinner
to begin with
all right and then down here up here
in the else this is where we want to
show the spinner
all right so if i save that and we come
over here
and i click
well first of all let's check the
validation that shouldn't let me submit
if i do put something in and click now
we have the spinner showing
okay now
i and again the spinner is completely
optional
i think it's just a nice ui effect
but i'm going to
show it for one second so i want to add
a set timeout here
so set timeout takes in a function so
i'm going to add an arrow function
and the second
argument that's passed in to set timeout
is the number of milliseconds you want
to wait i'm going to say 1000 which is
one second
okay and then i want to hide the spinner
so let's save that
and if we try to submit this again
oops
you'll see it shows the spinner for
for one second
all right so now what we want to do is
generate the qr code and that's where
this library comes in so qr
code js
and all we have to do is create this
object using new qr code takes in
wherever you want to put it so the the
element
and then it takes in an object with this
information here the text which is the
url you want to open the width and
height you can also do color dark color
light but we're not going to do that in
this particular project if you want to
add like a color input and do that you
could
so let's create a separate function for
this
we'll call it generate
qr code and
that's going to actually take in a url
and a size
and then we want to create a variable
we'll say qr code
and set that to
new
qr code that's how it is right
let's see yep all right and then we're
going to pass in
the id that we want to use which is qr
code and then an object with a text
value and that's going to be the url
that's going to come from the form but
it's going to be passed into this
function
as an argument
and then we can do a width which is
going to be the size
right and then the height which is also
going to be the size
okay and that's all we need here so
let's save that
and then let's see we want to run this
function
right after we show the spinner
um
yeah so
[Music]
i'm sorry right after we hide the
spinner so we hide the spinner and then
we call generate
qr code and we want to pass in
the url in size
which comes from here comes from the
form
so let's try it out we'll save it
and let's go ahead and put in a url
okay the spinner shows for a second and
then it generates the code if we want to
do like a hundred
okay so we have an issue
right now which is it's showing it's
gonna just keep that there so we need to
clear
the ui or clear the code
um
you know before we do anything so
let's uh
let's create a function
we'll just go right here let's say const
and i'm going to call this clear ui
because we're also going to have a save
button that we need to clear as well
but for now let's just set qr
which we brought in up here
so qr code we're going to set let's say
dot inner
html and set it to nothing
and then where i'm going to call this is
in the right here on generate submit i
want to do this before anything so clear
ui
let's try it again
okay so we get the code now if i want to
do another one let's say a hundred
clears the ui first and then generates
the qr code
okay so we have that working now the
last thing we want to do is the button
so the button i didn't add to the html
because we're going to create it from
the javascript using create element it's
actually a link not a button but let's
go down
here and we're going to create a new
function here let's call it create
save btn
and we're going to pass in save url okay
now
let me actually let me just finish this
first
all right so i'm just going to show you
real quick
if i
generate a code
and we open up
our dev tools and i go to elements i
just want to show you if we examine this
we have the canvas element and then we
have the image element here which has a
source
of this this data
image slash png and it's just it's a lot
but
that that's the url that we want to get
okay so
when we we're going to get the url up
above but we're going to pass it into
this function
and basically we want to make that the
href value of this link that we're
creating
and that will allow us to click the
button and download it as an image now
we could right click and say save image
as if you i mean you could just have a
message that says that right click save
image as but i think it's a little more
convenient to just have a button to
click to download all right so the url
is going to get passed into this
now we want to create the link so i'm
going to create a variable here called
link
and we're going to set that to
document dot and then create
element and the element we want to
create is an a tag a link
okay then i'm going to add on to that
link in id
we'll just give it an id of save dash
link
okay i want to add on to that
some classes because i want it to be
styled so let's say class list and then
we can just add in a bunch of classes
here so i'll say bg dash
red dash
500 so same as the header
on hover let's do bg dash red dash 700
and we'll do
text dash white
font dash bold
and padding on the y-axis too
make it rounded
and we'll do a width of let's say
one-third
wounded no rounded
so width of one-third
and then margin auto
and my
dash
five all right so those are the classes
that i want to add
and then like i said the href
is going to be the
save url
so yeah we'll do save url
and then link dot
download we're going to set that to qr
code
and then the inner html so link dot
inner html
uh we'll do save image
all right and then finally we want to
put it into the dom so document dot get
element by d
i'm gonna put it within the actually did
i add a class of generated
i didn't so this div that wraps around
the spinner and the qr code output
i'm going to add
let's do an id actually we'll say id
generated
okay so that way we can come down here
say get element by d
generated
and then we want to append
child
and we want to append that link
all right
so right now nothing's going to happen
because we've just created the function
to create the button
where we want to actually call this
function is up here
all right now
just to kind of quickly go over this
when we submit the form we get the url
and the size check for the url if it's
there we show the spinner we hide the
spinner after after one second
we call generate qr code which then puts
the qr code on the screen now after that
we want to output the button but there's
there's a little trick to this because
the url to the image that we need to
pass into the create save
you know to this right here create save
button it's not going to be available to
us right away so what we can do to get
around that is just do another set
timeout
and that's going to take in a function
and the second argument is the number of
milliseconds that we want to take and
we'll just say 50. so
it'll be really quick
and then
that image should be available to us so
what we'll do is create a variable let's
call it save url
and we want to
from the qr element which is the
qr code id element where the code is
actually output
we want to run query selector on that
because we want the image that's inside
of it and we want the address to that
image or the source okay then we can
finally create the save button
and then we can pass in the save url
all right so let's say let's go ahead
and save that
now we are going to have one more issue
i'll show you that in a second but let's
go ahead and just click a url choose a
size generate
now we can see the button and if we
click it it downloads the image
okay now if i
want to do something else like let's say
google
say 400 and i generate
so it generates and we get the button
but the old button is still there
so we have to clear that out that's
something that
you when you're using vanilla javascript
you really have to be aware of you know
what what's on the screen because you
have to manually take care of that and
remove it where when you're using
frameworks the framework does a lot of
that for you or gives you a lot of
helpers for you to do that stuff
but all we have to do is go into clear
ui
right we already have the function that
runs and it clears out the qr code
itself now we just want to do the button
so let's say const save
btn and we want to get it with
document.getelementbyd
and remember we gave it an id right here
of save link
maybe we should call this save save link
say save button whatever
but we want to get it save dash link
and then we'll just check for it so
we'll say if
save link
then let's go ahead and um
we'll say save link and then we'll call
the remove method we'll just remove it
from the dom completely
all right so now let's try it again
get our qr code we get the image
if i do another one
let's do 600 generate
okay so now we only have one button
if i click that that should work
all right because it clears the ui it
gets rid of the old qr code and it gets
rid of the button
right here and then it proceeds to to do
everything else all right guys so that's
it and obviously to test this out just
scan it with your phone uh so if you
open up the camera app and scan it you
should be able to open it in a browser
and if you print this out on paper or
you download it as an image you should
be able to do the same thing
all right so i mean
it's a very simple project but i think
it is useful and i want you to just keep
in mind what i said at the beginning of
this tutorial about creating your own
side projects because i i think it can
be beneficial for many different reasons
alright so hope you enjoyed this and
i'll see you in the next one",,
MMxbP8ME2Ag,"[Music]
hey what's going on guys so google
recently announced its new successor to
c plus plus called carbon and this is a
language that is experimental so it's
not like you're going to go out tomorrow
and get a job writing carbon but i i've
been looking into it for the past few
days and i figured why not make a crash
course just for fun for people that like
to learn new stuff like myself so what
we're going to do is talk a little bit
about it and i'm going to show you how
to get set up because it's not
completely clear in the docs and then
we're going to look at some basic syntax
from arrays and tuples to functions and
classes and all that good stuff and even
if you've never written a line of c plus
plus that's absolutely fine the syntax
at least on a basic level is is pretty
simple so if you know any language at
all then
most of the stuff will be pretty easy
for you to understand um because we're
not really going to get in
deep with this um so and i've seen a few
other videos on youtube fire ship has a
really good one talking you know it's
basically a summary of carbon and and
what the plan for it is and so on and
then you have a lot of click baity stuff
articles and videos talking about how
it's gonna how it might kill c plus plus
and you're always gonna have that type
of stuff um on the internet but what i
want to do is just take an objective
look at it i'm not praising it i'm not
bashing it i'm not endorsing it i just
want to
just teach it or what we know so far of
it
all right so it is
an experimental successor to c plus plus
and a lot of people might say well what
what about rust rust is you know can be
used for a lot of the same stuff that c
plus plus is used for and while that's
true
carbon is actually it actually has a
bi-directional interoperability so you
can write c plus plus and uc plus plus
libraries within carbon and vice versa
uh it says right here interoperate with
your existing c plus plus code from
inheritance to templates uh it's fast
and scalable i'll go over some of the
the plans and stuff for it in a minute
but down here you can read i've already
read all this but you can read why
they're doing this and i'll just kind of
summarize this for you so there has been
some precedence for this dynamic you
have javascript to typescript java to
kotlin objective c to swift and now
google is trying to do that same type of
thing with c plus plus to carbon now
will it succeed i have no idea there's
there's been other languages that have
tried to do the same thing from what i
can see in the c plus community there
does seem to be quite a bit of
resistance and pushback but that's to be
expected when you have developers that
have been working with c plus for years
or decades
a lot of them don't like change
especially
if they don't see enough reason for it
and if you read more on this page they
do say that it's relatively easy to work
with and migrate large c plus plus code
bases
and i think that's a big reason why rust
isn't a direct successor since carbon
can interoperate with c plus plus
they're saying that's possible
so some of the reasons why they feel c
plus needs improvement in the modern age
i guess is because it's racked up what
they call technical debt over the years
and is struggling to improve and meet
certain developer needs and
they say that incrementally improving c
plus itself is extremely tedious and
difficult and google stresses that the
best way to address these problems is to
try and avoid inheriting the legacy of c
or c plus plus directly and instead
create a new language with some solid
foundations like a modern generic system
modular code organization and a
consistent and simple syntax
and if we look at some of the language
goals uh we're designing carbon to
support the performance critical
software of course you know it has to
match the performance of c plus plus
or it's not going anywhere software and
language evolution code that is easy to
read understand and write
practical safety and testing mechanisms
fast and scalable development modern os
platforms
interoperability and within migration
from existing c plus code so
there are some some specific things that
they're trying to
improve upon one of which is memory
safety
so c plus plus is not a memory safe or
it's not it's not a managed language
like c sharp and javascript and ruby and
most of the the languages we work with
you have to manage your own memory
and there can be issues with bugs and
wish with vulnerabilities so this is the
stuff that they're that they're doing to
combat that and you can look more into
this and then also generics they provide
a modern generic system c plus uses
something called templates you can still
use c plus templates but then you also
have the ability to use generics as well
so those are just some of the things
that um that are being added here and
then there are some code samples so if
you look at this one right here this is
straight c plus plus code it's just to i
guess uh print the area of a circle and
then you have your carbon code here
which does the same thing and you can
see it is very similar but it does
to me at least look a little bit cleaner
and um
and simpler and then down here you'll
see that c plus plus code can be used
within carbon
and you can also
call
carbon from c
plus as well and you can use any c plus
plus libraries which is nice
now as far as your opinion on this if
you think it's a good idea or not i mean
that's that's really it's just it that's
up to you this video isn't to
bash or to praise it i just want to look
at it objectively so to get started
there's a couple things you can do one
you can because there's no there's no
compiler yet or there's no tool chain
yet so you have to use google's build
tool called bazel along with llvm which
stands for low-level virtual machine so
you can install those with homebrew if
you don't have access to homebrew you
can simply go to
compiler-explorer.com and just choose
carbon and you can actually write and
execute carbon code here which is
probably what i'll do i am going to show
you how to set set this stuff up with
homebrew but when we get into the actual
syntax i'll probably use the compiler
explorer now i do have another link in
the description to this gist that i
created which basically has everything
we're going to look at from getting set
up
using homebrew to
packages the main function
the print command
primitive data types
naming conventions variables basically
all the stuff that i have in most of my
programming language crash courses so
that's why i called it a crash course
because we're gonna we're gonna get into
that that syntax but let's start off
just in case you do want to install this
stuff with home brew
if not then you can just kind of skip
this part but i'm going to open up my
terminal
okay and then i already have homebrew
installed i believe i i
already have this stuff installed as
well but i'll just go through and type
the commands anyway so we want to brew
install and the package is called
basilisk so b-a-z-e-l
and i'm probably just going to get a
message that says it's already installed
uh looks like it can update yeah so
it's already installed and up to date
all right and then you're just going to
want to install low-level virtual
machines so brew install
llvm
again i think yeah i already have this
installed and it that'll probably take
two or three minutes if uh if you don't
already have it installed so once you
get those two things set up you just
want to add this to your path
so we can just copy that and again if
you're on windows or something just
ignore this this this whole part of the
tutorial
so we're going to just type that in
and then we want to clone the repo so
right here we're just going to run git
clone
so let's do that
actually is this where i want to put
this yeah it's um or my dev folder so
what this will do is it'll it'll clone
it into a folder called carbon lang so
now i can cd into carbon lang and if i
do an ls you're just going to see
everything that is in this repository
okay and
basically everything that i've learned
so far has been has been in this repo in
a couple articles too but uh you have
docs and then you have this explorer
folder and if you go into test data
you can see examples for just about
everything functions generics
if else
pointers
all the stuff we're going to talk about
i basically learned from from these
examples here all right and if we look
at
let's see
if we look at in the repo we go down
here to get started where is it
actually want to go to the
yeah if we go right here down to get
started
this is the stuff we just did and then
it's telling us to run the explorer and
to run one of the files in that test
data folder but what i want to do is
just create a separate
file to
to work in so right here we can create a
directory i just called it sandbox so
we'll go ahead and say make
directory sandbox
and then we'll cd into sandbox and then
we'll create a carbon file so let's say
touch and we'll say test dot
carbon
and then i'm going to open up
vs code in the home folder here
okay and then we should be able to run
the explorer
so let me just
open this carbon file up
now what i'm going to do
here don't worry about it i'll explain
it all in a second i just want to see if
we can get this running and you can copy
this too so we're going to say package
sandbox
api
and then we're going to create our main
function
so function main and that's going to be
a 32-bit integer so i32 and i'll explain
all this
in a minute and then let's just return
zero we'll do a print
in here as well and just say
hello world
all right so i'm going to save this and
then i'm going to run this if we look
here we can say bazel run and then
explorer and then the name of the file
so i'll just copy that
and i'm already in sandbox so if we just
run that
the first run is probably going to take
a little bit but after that it'll be you
know instant all right yeah so that took
about i don't know a minute and a half
or so and you can see we have build six
completed successfully and we're
printing out hello world and the result
is zero because i returned a zero from
my code
okay as you can see here now
if you followed along with this and all
this works you can use this for the rest
of the tutorial if you want
as far as i know there's no carbon
highlighting
uh there is this one here but it doesn't
work i installed it i tried it out and
uh
it well there is downloads there's no
ratings yeah i don't think this works
and then i couldn't find any other ones
at least for now
and i don't really like writing code if
there's no highlighting so instead of
using this and instead of having to run
you know and if you run this again it
should be instant but instead of having
to do that i'm just going to use the
compiler explorer all right so yeah i'm
just going to go ahead and close that up
and
we can close that up and we can just run
it in here
so
let's uh let's see i want to be able to
see
my output
so let's click on this right here
and yeah so this will show us our output
basically this shows you exactly what i
just saw in the in the terminal window
so let's just clear this up i'm going to
get rid of everything and we don't have
to like click run or anything it's just
instant and of course this is not going
to compile because we have nothing
written here now i want to see if i can
make this yeah we can make this a little
bigger
and now we can get started on learning
the syntax
all right so the first thing we need to
do is
create a package name so a package is a
group of libraries in carbon and it's a
standard unit for distribution the
package name also serves as the root
name space for all name paths in its
libraries so we do have to add a package
here and we can call this whatever we
want i'm just going to call it sandbox
now in addition to that
let's see so each library must have
exactly one api file this includes
declarations for all public names of the
library definitions for those
declarations must be in some file in the
library either the api file or impl file
so in order for this to work we have to
add on to this
we have to add on to this either impl or
api so we're going to say api and we do
need semicolons to terminate our
statements
all right now
if you've ever used c plus or even like
java you have a main function and that's
basically your entry point so if we look
at the gist that i created that's the
next part is the main function
so let's create that so that we can
actually compile our code now to create
a function
we don't use the function keyword we use
fn okay so we're gonna say fn and then
the naming conventions i'll go over that
in a few minutes but for functions it's
gonna be upper camel case so it's going
to start with an uppercase so if i
wanted to call this main function i
would do you know i would do it like
that uppercase every word but we're just
going to call this main
now
this is a statically typed language and
if you're let's say a javascript
developer and you don't use typescript
that's probably new to you so we do have
to define the types for our variables
for our function returns for any
arguments that we pass into our
functions so
this main function actually has to
return a an integer okay it has to
return a number
and usually that's going to represent
your exit status and 0
is going to mean that it's successful so
what we have to do here is first define
the function type
and i'll just do a string just to show
you that this won't work so if i do
string and then i return from this
function
we'll say hello
and if we take a look over here it says
type error in return
in return type
of
main uh expected i32 so i32 is a 32-bit
integer
and it's saying that um you know we
can't return a string here it has to be
this should actually be like that
um but this has to be i32
and of course hello is not an integer
so we're going to return zero and now it
should compile
so now you can see it compiled here and
we're getting a result of zero
and in c plus plus the main function
returns an integer as well even if you
don't explicitly return anything it
returns zero implicitly and again that
usually represents an exit status and
zero is success
okay let's close
close that up
um all right so
the next thing i want to look at is the
print command if we want to print
something out so let's go
we'll go within the main here and we're
going to do print and it's going to be
an uppercase p because it's a function
so in print let's print out a number of
i'm sorry not a number a string
of hello world and of course we need our
semicolon
and then we're still going to get our
result of 0 and we're also printing out
hello world
now if we want to print a number if we
if we put a number directly in here i
should say an integer
we do get an error it says type error in
print argument 0
it expected a string so if you do want
to output a number because this can
print we print strings here so if you
want to print out a number what we could
do is use a placeholder
so
and you might have seen this in other
languages so we're going to have these
curly braces and put a 0 in that and
then after the comma here will be
whatever we want to print out and this
could be like a function name or
something like that or it could just be
uh an int and now you can see that it's
printing out 200 as a string
all right
typically you're not going to have to go
you're not going to put all of your code
in the main function you're going to
have different functions and run them
from here so what i'm going to do now is
show you how we can create another
function so let's say fn and we're going
to say output
call this output text
and i want this to return a string so we
have to add here that we want this to be
a string return
and then i'm just going to return from
here
a string of hello world okay and then
obviously we can come down here and we
can call that so let's say output
text
and now that should
let's see oh you know what that's not
going to print anything out because i
didn't use the print command this is
returning something so what i could do
here is i could say print
i hate not having like uh auto complete
and stuff
but we could say print
output text and now you can see we're
getting that hello world
all right now if we have a function that
doesn't return anything like let's say
we want to do the print here
so we'll say print hello world and then
down here we don't have to call print
we'll just call the function
we can do that we are getting an error
though because this function is no
longer returning a string so we can now
get rid of it
okay so that's a void function and we
don't have to do like in some languages
you do this void that's going to throw
an error so we can just go ahead and get
rid of that that return
now let's talk a little bit about data
types and we're just going to hop into
the gist file for that so let me scroll
down here oh and by the way the reason
that um this file saved is because i did
command s if you do that it's just gonna
go ahead and download your file as a
carbon file which is pretty cool
so let's see we're gonna look at
primitive data types and
as i said carbon is a statically typed
language which means that we have to
define our types um there is an auto
type that we can use and i'll talk about
that in a little bit but primitive types
fall into these categories so we have
booleans which are true or false
we have signed and unsigned integers
so basically sign integers are positive
values unsigned are
i'm sorry signed is positive or negative
unsigned can only be positive
and when we write
that when we write the type it has to be
an i so it's an i along with the size
so we have like an 8-bit integer would
be i8 i16 i32 all the way up to
i256
and these would be signed integers if
you want to use an unsigned integer you
would use u but typically you're going
to use signed integers so you're going
to use i and 32 would be the the most
typical
you know depending on the size of the
int
now we also have
floating point types where we can do f16
f32 64 and f128
again typically i would use f32
and then of course we have string types
which are you know a string of
characters wrapped in double quotes
you can't use single quotes they have to
be double and you can also create
multi-line strings using triple quotes
and i'll go over that in a little bit
now as far as naming conventions go
upper camel case is going to be used
when the named entity cannot have a
dynamically varying value so things like
functions and name spaces and then lower
lower snake case which is just lower
case with underscores is going to be
used for
variables so when the named entities
value won't be known until runtime and
then i just put this table that i got
from the documentation that shows you
the different items or different
entities and what the the naming
convention is
all right now let's get into variables
because we haven't uh we haven't done
that yet so let's hop over here
and variables um
let's see what should we do here i'm
going to get rid of we'll still keep
this output text function
and actually let's keep the print but
instead of printing a string directly
we'll create a variable
so let's go up here and of course i
can't use that shortcut all right so
let's go in here and create a variable
now
when we create variables we use the var
keyword okay and i know a lot of you
guys at least if if you are you know a
fan of my channel you're probably a
javascript developer so
this might seem a little weird these
days because we don't really use var we
use let and const and there is actually
a let
in
carbon language i'll get into in a
minute so that that's a little confusing
as well but we'll say var and then
whatever we want to name it and again
it's it's
it's recommended that we use snake case
here so if i had two words like
whatever text hello i would do it like
that so let's say text now again this is
a statically typed language so we have
to say
what type of of data is going to be in
this variable so we do that with a colon
when it's a function we use the arrow
like that but when it's a variable we
use the colon so let's say this is going
to be a string and then we'll set that
to the value of
we'll say hello there
okay and then we should be able to just
pass into the print here the text
variable and we're calling output text
right here so you can see as a result
we're printing out hello there and we
still get our return of zero meaning
everything is okay
now when we use var
we can reassign
the the value that's in that variable so
i use var text that means that i can
reassign that if i want i can say text
equals
and then we'll say i don't know hello
brad
okay so if i do that that should work so
i can see hello brad printed out
now
there is another keyword for variables
and that's if we want it to be a
constant okay so if we want to be a
variable that doesn't change again for
javascript developers that would be
const
and you would use let for variables that
can be reassigned however in
in carbon lang we use let for constants
so i know that can be a little confusing
but
if i were to let's comment this out and
by the way i didn't even mention
comments comments is going to be to just
double forward slashes
but let's go ahead and change this to
let
and we can see that that works i'm
getting hello there printed out but if i
uncomment this and i try to reassign it
it's not going to work we get cannot
assign to our value text
okay
so just keep that in mind so you're
usually going to use var in javascript i
always use const unless i know that it's
going to be re reassigned at some point
but i wouldn't recommend you using let
um you know here all the time i'd use
var
i do the opposite use var unless i know
that it's not going to change because
typically
i notice that in most programming
languages constants aren't
called really called constants unless
they're definitely never going to change
like
in javascript you use cons with an
object because you don't directly
reassign it but you do manipulate it
like you can change a property in that
object
in most languages i it seems that
constants are used for like
like a server name or your host or
something like that something that's not
that's definitely not going to change no
part of it you know you're not going to
manipulate it in any way at least that's
that's
my view on it um so yeah just i would
say use var
i know that was kind of long-winded
now i did mention that we could use auto
as a type i couldn't use it here on the
main function if i do that
that's not going to work main must have
an explicit type but
if i wanted to create
a variable called x and set it to
auto
let's set that to a number
okay so we can see that that works that
compiles and if i change this number to
a boolean say false
that still works if i change it to a
string
that works as well so there might be
cases where you where you want to use
auto
all right now we can also have global
variables so outside of the function
scopes here i could go up here and
create a variable so let's say var
i don't know we'll just say var x and
let's say that's going to be
we'll do i 32
and let's set that to 100.
okay so that should
yep so that compiles and then if i come
down here now remember if you if you
have any experience with any languages
we have
function scope right so
this x that i created here is not
i guess yeah i guess we'll talk about
scope now as well so this is not going
to be available let's just change that
to y for now and if i come up here and i
try to print
let's try to print y
okay so that's not going to work
i wish we could see this whole actually
there we go so could not resolve y
even though i defined it down here
because this is a different function
these have separate scopes however
this x up here is a global variable so i
should be able to print x
see type error and print well that's a
number so i would actually have to do
i'd have to do this
but that should
print yeah so you can see now we're
printing 100 so we can have these global
variables
another thing i wanted to mention was
multi-line strings
so if i wanted to do that i know this
code is a mess but i'm just
kind of showing you one thing at a time
here but i guess we could clean it up
so get rid of that and that
okay so if i wanted to do a multi-line
string
let's actually change this let's
let's do
three
so we're gonna wrap this in three double
quotes and if we do that then we can put
these on separate lines
let's put this
down here and
say hello
world
hello
brad all right so now you can see it's
no we're not getting an error and it's
printing these three lines out so that's
a multi-line string with triple quotes
now as far as
function arguments go i want to talk
about that next because we have these
functions but we haven't looked at
passing in creating any any parameters
and passing in arguments
so what we'll do here let's actually get
rid of
output text and i'm going to create
another function and i'm going to call
it add
okay something we see typically see in
these crash courses so this is going to
be an int let's say i 32
and let's say we want to pass in here
two numbers so we're going to say
var
x
actually var i believe var is optional
here
let's try it without var so we'll say x
now we do have to add types here
remember that so let's say i 32
for that and then y
we'll say i 32 and then
of course we want to just return here
let's say x
plus y
and then we'll go down here we could
print this out or we could just return
since we're returning an int we'll just
return add
and let's pass in one and two
so now we get result three
okay so we just create a function if
you've used typescript i know because
again a lot of you guys are javascript
developers if you use typescript this
should look pretty pretty familiar but
um i believe
yeah i can also put var
i'm not exactly sure that if there's any
difference or if this is just
uh you know if this is just preference
or what but we can put var there as well
all right so the next thing
uh and just to show you if we wanted to
print out a string
with with uh this function we could do
that we could say print
and in here we could say
let's say
one plus two equals and then we would
put our curly braces zero and then
whatever we want to replace that curly
brace is zero with we would put here so
let's say add one two
and then we see this string 1 plus 2
equals 3.
so now we're going to look at arrays so
i'm actually going to get rid of that
we're just going to do this in the main
function here so let's return
0 and then we'll get rid of this
this line here and let's look at arrays
uh and in all these examples i have in
the snippets here so everything we're
going over is in that file
so raise our data structures that hold
multiple values when we define an array
we have to define the
the type of of data that's going to be
in the array we also have to define the
size so again for my javascript
developers that we don't have as much
freedom
with arrays as we do in a language like
javascript
so let's create a variable and let's do
an array of of integers of numbers so
we'll do var i underscore
arr
and we're going to add the type here
so again we have to do the the type and
the size so in brackets we're going to
have the type that we want in this array
which is going to be a 32-bit integer
and then we do a semicolon here not a
comma semicolon and then the size of the
array so we'll say 5. then we're going
to set it to a set of parentheses and
then we can put
i'll just do random numbers in here
and if i just stop there
and we look at the error here it says
type error in name binding
i32 four times is not implicitly
convertible to to
i32 five times so that means i'm missing
one here so i'll put in
let's do uh 19.
okay so that should work or that should
compile
now let's say i wanted to do a string
we'll say var
you know what let me make this
yeah there we go so let's do var we'll
say s underscore a r r and let's say
just wanted to have two strings in here
so i would do the type
string semicolon and then two
and then i'll set this to
a set of parentheses
and then add
my strings in here
okay and that should work
now if i want to print out a specific
value like let's say i wanted to get
this 43 right here
let's say print
um
oops
let's say print and then we'll go
add that
because this is going to be a number so
let's take the name of the variable
which is going to be i underscore arr
and remember arrays are 0 based so it's
going to be 0
1 2 3 4 for the indexes i want to get 43
which is going to be the one index so if
i do that
you'll see that it'll print out 43.
okay if i wanted to get the hello from
the string then i could do
s underscore array and i want to get the
zero index
which is going to be
the hello string
okay now
in addition to arrays
we have tuples
which are another way to store multiple
values so let's say var t
now with tuples we we have to define the
types but we don't have to define a
length so it's not as strict so let's
say um actually let's call this t
underscore one
and as far as the type goes let's just
say auto so if i say auto then i can put
whatever i want here we'll do one two
true
and hello so that that should work
now if i do var let's call this one t
underscore 2 and i want to explicitly
define the types that's going to go in
parentheses here so let's say we want a
string
a string a bool and then i 32
so then
that would have to match if i do hello
so that's a string
then a boolean
and then an int
okay now if i change this middle one
here to an integer we should get yeah
it's basically just telling us that it's
not matching you know it's not binding
to the correct types
now to access
um
the value by index is just like with an
array so let's say print
oops we need uppercase p print
and let's take
so this hello right here that's going to
be this is 0 1 2 3.
so we can do t 1 the name of the
variable and then the index of 3
and we should get hello
okay so we access it just like we would
with
with an array
so we can also convert
tuples to an array so if i say var t
auto set that to just one and two
and then we should be able to say var a
and then as far as the type
actually we'll just yeah we'll do auto
and
should be able to just set that to t
and then
down here for the return let's say we
want
t
0 which should be 1
and then we'll add a
one which should be two
and we get a result of three
all right
now
another data structure that we have to
work with is ours called structs s t r u
c t cts structs for structures
and this is like a javascript object or
a python dictionary basically key value
pairs
so let's get rid of this stuff
and let's create we'll say var person
and i'm going to set the type to auto
and the the syntax for this is a little
weird it's going to be dot and then
whatever we want the key to be so i'll
say name and unlike like you know
javascript objects where we have a colon
here we put an equal sign
we'll say brad and then let's do
we'll say locate dot loc for location
and we'll set that oops
still in javascript mode
okay so that should work and then if we
do
well that's not going to work because i
got rid of the return so we'll say
return
zero and then let's do a print
okay so now if i want to print out the
name for this person
struct then i could do person dot name
so there we go so now it's printing out
brad
all right and i could change that i can
change these values as well so if i come
down here and i say like person dot name
and i change it to
john and oops if we print that out
we get john
now if i use let here i just want to see
if we change this to let
cannot assign to our value person name
so normally in something like this if
this were a javascript object i would
use const here and we would still be
able to change
change one of these values but in this
case we're gonna
use var
now
i used auto right here but
in most cases it you should
define your types
explicitly
so let's
we'll just get rid of this and let's
create a struct with types so we'll just
say var
and then p so for points or coordinates
and i'm going to say that i want two
32-bit integers so the types we're going
to put in curly braces just like the
structs themselves and then the name of
the key so i'm going to use x and y so
i'll say that x i want that to be i 32
and then y i want that to be
i32
and then we'll set the actual values so
here we'll say
dot x equals one
and then we want to put a comma and then
dot y equals
two so that should work and then let's
come down here and we'll go ahead and
print out
and i'm just going to
i'll say value
colon and then
what i want to print
and what i want to print is going to be
p so that's the name of the variable for
the struct and then the key tha",,
",,
t i want,,,
which is going to be x,,,
and that's going to print out the value,,,
of 1. if i change the value here of x to,,,
100,,,
then it should print out 100.,,,
okay so those are structs now,,,
we also have classes so what i'm going,,,
to do here is,,,
let's get rid of,,,
that and i'm going to go above the main,,,
function here and i'm going to create a,,,
class,,,
because so class,,,
the class keyword is actually going to,,,
be,,,
lowercase,,,
and then the name of the class will be,,,
uppercase so i'm going to say class,,,
point,,,
and then classes are are structures that,,,
you use you create objects from classes,,,
and,,,
if you know,,,
literally any other language you,,,
probably know at least the basics of,,,
classes they can have,,,
properties which are just like,,,
attributes and they can have methods,,,
which are functions so let's say for,,,
this point class,,,
any object i create from this point,,,
class i want them to be able to have an,,,
x and a y attribute or property so i'm,,,
going to define my properties here with,,,
var i'll say x,,,
and then the type which is going to be,,,
i32 and then i also want to have a y,,,
value,,,
and that's going to be,,,
an i 32 as well,,,
okay,,,
now,,,
down here if i want to instantiate an,,,
object from that class i'm going to,,,
create a variable let's say var,,,
p and then for the type i'm going to use,,,
the name of the class or the name what,,,
what kind of object is this so it's,,,
going to be a point,,,
right and then we'll set that to,,,
some curly braces here and let's say dot,,,
x and we'll set that to let's say 100,,,
and then dot y we'll set that to 200,,,
okay,,,
and then if i want,,,
um,,,
let's do this let's say print,,,
and we'll say,,,
result,,,
and then,,,
let's let's take p y,,,
or p dot y so what i'm doing is taking,,,
this p object and i'm taking the y,,,
attribute which is set to 200,,,
and then we'll subtract p dot x which is,,,
going to be 100 and i'm going to get my,,,
result here of 100.,,,
all right now,,,
you can also have functions inside of,,,
classes and those are called methods,,,
okay so let's come in here,,,
um,,,
well actually i should say that there is,,,
methods and there are functions and,,,
there's a difference we're going to look,,,
at methods first which are going to be,,,
methods we can call on the actual object,,,
what we did here is we instantiate,,,
instantiated a p,,,
object and this could be anything any,,,
kind of object it could be a user maybe,,,
that would be more clear but,,,
i should say a point object p is just,,,
the variable,,,
and if you know other languages this is,,,
going to be make a lot more sense than,,,
if you don't,,,
so let's create a method we're going to,,,
use the fn keyword and let's say we want,,,
this to get the x value so we're going,,,
to call it get x,,,
and then i want to be able to access,,,
the,,,
properties of point within this function,,,
now in a lot of languages you use the,,,
this keyword okay,,,
what we do here is,,,
in our brackets we're going to say me,,,
me and then colon and then the class,,,
name of point,,,
okay and then uh,,,
this is a function so we need our,,,
parentheses and then we need to define,,,
what this is going to return which is,,,
going to be an uh a number or an int,,,
okay and then we can use this me,,,
variable in here to basically access the,,,
current class or the current object,,,
so in here let's say return,,,
me,,,
dot x,,,
okay because we're basically saying this,,,
class or this current object that we're,,,
in and then the x value of that so if we,,,
come down here,,,
let's see let's uh,,,
let's get rid of this what we want to,,,
print out and let's say p,,,
dot,,,
get,,,
x,,,
which is a function so we want to do,,,
that and notice we get 100 because,,,
that's what we set this value this p,,,
variable which is a point object we set,,,
that x property to 100 and then this f,,,
or i should say this method is getting,,,
that x value we could do the same thing,,,
with the y value,,,
so let's say get y,,,
and then we just want to get me dot y,,,
and if we come down here and change that,,,
to get y,,,
we get 200,,,
all right so those are those are methods,,,
now,,,
functions are going to run not on the,,,
instantiated object but on the class,,,
itself,,,
all right so let's come in here and,,,
let's create another function,,,
so this is kind of like a static method,,,
i would say in other languages,,,
but we're going to say function origin,,,
and,,,
it's going to have a type of point,,,
and then i'm just going to return,,,
so let's say return dot x so basically,,,
going to set x and y to zero y equals,,,
zero,,,
all right now this origin function we,,,
don't call on p so we're not going to do,,,
p dot origin we're gonna do point the,,,
actual class of point,,,
so let's come down here and,,,
let's say,,,
so this this variable of p let's change,,,
that,,,
so it is going to be point,,,
but we're going to set it to the cl the,,,
class name of point and then dot origin,,,
okay and then if we come down here,,,
and let's just print out p,,,
um,,,
i'm sorry p x p dot x or y whichever one,,,
you want to print out they're both going,,,
to be zero okay because that's what we,,,
set in this function if i change x to,,,
300,,,
then that's going to print out here,,,
all right and again if you're not,,,
familiar with object oriented,,,
programming and classes and objects this,,,
is going to be really confusing but,,,
but if you are then i mean,,,
it should be pretty simple,,,
okay so the next thing i want to look at,,,
are pointers so a pointer is a variable,,,
that holds the address of another,,,
variable and we can use the ampersand,,,
operator to get the address of a,,,
variable so let's get rid of all this,,,
and again this stuff is all in that that,,,
gist file if you want to reference that,,,
now let's go right in the main here and,,,
i'm going to create a variable called x,,,
and let's give it a type of i32 and i'm,,,
going to set it to,,,
the integer of five,,,
okay now what i'm going to do is take,,,
that x variable and then change it to 10,,,
and let's print out,,,
we'll say print and let's just say x,,,
x colon and then whatever the value is,,,
so we just have to add here x,,,
okay so right now we get x 10 right well,,,
it's 5 at first let me just get rid of,,,
that so it's 5 and then we're changing,,,
it to 10.,,,
all right now what i'm going to do is,,,
create another variable and i want this,,,
to be a pointer to,,,
the value of x,,,
so we'll call this p,,,
and then we're setting a pointer so when,,,
we do the type we do whatever the type,,,
is and then an asterisk and then we set,,,
it to ampersand and then whatever the,,,
you know the val the variable of the,,,
value we're looking to get so we're,,,
going to say ampersand x,,,
so now that i have a pointer,,,
pointing to x and in the the p here is,,,
is arbitrary i just called it p for,,,
pointer but this could be anything you,,,
call your variable anything but it's,,,
pointing to whatever this x is equal to,,,
so if i were to take that pointer by,,,
saying asterisk p,,,
and then i set that equal to seven,,,
and then we look over here you'll see,,,
that x is now equal to seven,,,
all right we didn't explicitly set x to,,,
seven anywhere but since we have this,,,
pointer and then we updated the pointer,,,
value that's going to update that that x,,,
value it's pointing to the same place in,,,
the heap in the memory,,,
that that x value is pointed to,,,
all right now if i were to create,,,
another one let's say var,,,
q,,,
and set that to i 32 asterisk as the,,,
type and then i'm going to set it to a,,,
pointer,,,
of p so so we'll actually do ampersand,,,
asterisk p,,,
and then if i come down here and i say i,,,
want to set asterisk q equal to 100,,,
and we look over here at the value of x,,,
now the value of x is 100,,,
okay so we have these two pointers,,,
they're different variables but they're,,,
they're pointing to the same place that,,,
that x value is pointing to,,,
all right so hopefully that makes sense,,,
now you can,,,
also have pointers that are strucks,,,
so let's um,,,
let's get rid of this,,,
and let's say var,,,
x and we'll set this to auto,,,
and then let's set this to,,,
to a struct so we'll say dot x,,,
10,,,
and let's say dot y,,,
whoops i'm using javascript here we want,,,
to say equals,,,
and then y equals,,,
30,,,
okay,,,
and then if i create a variable,,,
let's say p and the type is going to be,,,
i32 but it's going to be a pointer so we,,,
want to put an asterisk here and then we,,,
can set it to ampersand,,,
and then let's do x,,,
so x is the name of the variable,,,
actually maybe we shouldn't use that's,,,
kind of weird,,,
we'll call this s,,,
so let's set this to s,,,
dot x,,,
okay okay so i have this p pointer,,,
pointing to,,,
this value this s dot x which is 10,,,
so if we come down here and we return,,,
s dot x,,,
the result is 10.,,,
now if i were to update let's say,,,
that p value so we want to update that,,,
pointer so we will do asterisk p,,,
and let's set that to 55.,,,
and now what we're going to see is that,,,
that s dot x value is now 55 okay,,,
because i had a pointer pointing to that,,,
that struct property,,,
all right so we've gone over most of the,,,
the common data structures now let's get,,,
a little bit into uh conditionals so if,,,
else statements and this is really,,,
simple these are,,,
the same as they are in most c syntax,,,
languages but let's uh let's return,,,
0 here,,,
and then i'm going to have a function,,,
called actually we'll create the,,,
function first so we'll go up here let's,,,
create a function we'll call it guess,,,
number,,,
and that's going to take in an argument,,,
of let's say num that's going to be i32,,,
and we're not going to actually return,,,
anything it's just going to print so,,,
it's going to be a void function,,,
and then i'm going to test,,,
let's say if and i'm going to say if,,,
that num that's passed in is equal to 7,,,
then i'm going to print,,,
a string of you guessed,,,
correctly,,,
and then we can do an else,,,
and i'm kind of assuming that you you,,,
guys know like a basic if else in some,,,
other language,,,
so if not let's say please,,,
try again,,,
all right and then we'll come down here,,,
and let's put in,,,
say guess,,,
number and then we're going to pass in,,,
3,,,
so you can see we get please try again,,,
if i were to add a 7,,,
we get you guessed correctly,,,
now,,,
this is kind of crazy but they they,,,
actually haven't as far as i can tell,,,
they haven't implemented,,,
um,,,
angle brackets yet so if i say like if,,,
num is,,,
greater than 7 i get this invalid,,,
character,,,
error,,,
and i actually went into the issues let,,,
me see if i can find it here,,,
so if we look at um,,,
comparison,,,
i think it's this one here that i just,,,
looked at yeah,,,
so the explorer both local and on,,,
godbolt are giving an error that do they,,,
do not recognize the,,,
less than character,,,
so you can see they're getting the same,,,
error,,,
so we didn't implement comparison,,,
operators yet because we were,,,
wanting to do it,,,
just once,,,
okay and you can look through this if,,,
you want but basically we can't do the,,,
um,,,
we can't use these comparisons we can't,,,
do less than greater than or greater,,,
than or equal to we're going to get,,,
these these errors so that's why i did,,,
just the equals here,,,
okay um,,,
yeah so,,,
if else pretty simple but again we can't,,,
you just can't use the,,,
greater than or less than or even the,,,
not equal to i don't think,,,
i think we get yeah we get the same type,,,
of error if we do that,,,
all right so the next thing i want to,,,
show you is a match so a match is is,,,
pretty much a switch in,,,
other languages,,,
so what we're going to do is get rid of,,,
that,,,
and,,,
let's get rid of that i want to create,,,
another function here but i'm going to,,,
call this one,,,
lucky numbers,,,
and that's going to take in a number,,,
and let's return,,,
we'll say we want to return i32,,,
lucky numbers let me just get rid of,,,
that extra e,,,
all right so i basically just want to,,,
pass in a number and if it's 7 11 or 12,,,
which are actually my lucky numbers i,,,
always play when i play roulette,,,
if though if it matches one of those,,,
then it's going to say that that is the,,,
lucky number if not then it'll say it's,,,
not,,,
so we do this just just like you would,,,
use a switch statement we say match,,,
okay so match and what we're what we're,,,
evaluating here is the number,,,
so let's say number whoops what is wrong,,,
with my keyboard or me,,,
so we want to match the number and then,,,
we say the case so i'm going to say in,,,
the case of 7 then we want to use a fat,,,
arrow here,,,
and then we'll just print,,,
and let's say,,,
we'll say 7 is a,,,
lucky number,,,
and then we'll just return from this,,,
we'll return the number,,,
and then we'll just copy this,,,
and i'm going to do the same thing if,,,
this is 11,,,
oops not 111,,,
or if it is 12,,,
okay so it'll print those if it's 12 if,,,
it's 7 11 or 12,,,
and then we just want to add our default,,,
just like we would with a switch,,,
so default and let's print out,,,
let's see we'll go ahead and add the,,,
placeholder here and we'll say is not a,,,
lucky number,,,
and then we just want to pass in here,,,
the actual number,,,
okay and then let's,,,
also return,,,
the number from here,,,
all right and now what we'll do is down,,,
here we'll call,,,
the lucky numbers,,,
function and let's pass in seven,,,
could not resolve number,,,
oh i'm sorry i called this num,,,
so let's change that to number,,,
and we get 7 is a lucky number if i pass,,,
in 11,,,
same thing if i pass in 10,,,
we get 10 is not a lucky number so if,,,
you have multiple cases for some kind of,,,
condition then you can use a match,,,
all right so next thing we're going to,,,
do is a while loop we're going to look,,,
at iteration here so let's get rid of,,,
this,,,
and get rid of this whole function,,,
and we're just going to write it in here,,,
now,,,
again i can't use greater than or less,,,
than so it makes this a little tricky,,,
the syntax though is going to be pretty,,,
much the same as most other c syntax,,,
languages and you can look at the,,,
examples,,,
like explorer,,,
i think that there's an example,,,
yeah right hit here while,,,
go to basic,,,
oh no they use not here that's actually,,,
what i'm going to do but there is,,,
i thought they had an example with a,,,
greater than maybe that was the for loop,,,
um,,,
there is no for loop here,,,
maybe that's why anyways let's go back,,,
into here so i'm just gonna basically,,,
say if,,,
if the value if the variable is not,,,
equal to zero,,,
then we want to,,,
decrement and we'll count down to zero,,,
so we'll create a variable let's say var,,,
i,,,
set i 32 and set that to,,,
let's set it to 11.,,,
okay and then i'm going to add a while,,,
loop here basically doing what you just,,,
saw in the documentation where we say,,,
while not,,,
so while it's not and then i,,,
is equal equal to zero,,,
so i'll not equal to zero then i wanna,,,
uh decrement so we're gonna say i equals,,,
i minus one,,,
okay and then we'll just,,,
print out here and let's print out,,,
say number and then,,,
0 and then we just want to pass in i,,,
here,,,
so let's see what we get,,,
and it's going to go to 10 because,,,
remember i set it to 11,,,
and then it's going to check to see if,,,
it's not equal to 0 which it isn't it's,,,
equal to 11 then it's going to take 1,,,
away and it's going to print out number,,,
10,,,
and then it's going to keep going,,,
because until this is true once it hits,,,
zero then it'll stop,,,
okay,,,
um,,,
but yeah i can't do like,,,
at least at the moment i can't do,,,
something like that,,,
and i can't do a i couldn't find an,,,
example of a for loop either,,,
so we're going to skip that,,,
and then i want to talk about generics,,,
real quick i know generics are kind of,,,
advanced for a lot of people but we'll,,,
just kind of look at it,,,
in the most simple way i that i can,,,
so generics are a mechanism for writing,,,
parameterized code that applies,,,
generally instead of making their,,,
duplicates for similar situations using,,,
the same code for different types,,,
so i know that might not make a lot of,,,
sense but let's say we have,,,
for instance a function,,,
let's call let's say get int,,,
and it's going to take in an int so,,,
we'll say i 32,,,
and it's going to return i 32 as a type,,,
and let's say return x so it's basically,,,
it's just passing in what it takes in,,,
okay and then let's say we want the same,,,
thing for a string so we'll say get,,,
string,,,
and or let's just do get str,,,
and let's say we pass in x which is,,,
going to be a string,,,
and then it's going to return,,,
a string and then we're going to just,,,
same thing return x,,,
okay so i could come down here now and,,,
let's say print,,,
uh if i want to do the int then i'll,,,
have to,,,
just do this and then i can call get,,,
int and whatever i pass in here let's,,,
say 100,,,
then it's going to print 100. if i want,,,
to use the string i could say print,,,
and i'll just do it no we'll just,,,
we'll say get string,,,
and let's pass in a string of 100.,,,
so now we should get oops sorry that's,,,
str,,,
so we should get 100,,,
from this and 100 from this,,,
and let's say we have even,,,
some other types,,,
so instead of creating these multiple,,,
functions that do the same thing but,,,
have different types we can use a,,,
generic,,,
okay and to do that we would come down,,,
here and create our generic function,,,
let's call this get val because it could,,,
be any type since we're using a generic,,,
and the format for this is going to be,,,
some brackets and then we want to use,,,
uppercase t,,,
and then exclamation,,,
space type so basically,,,
um t is gonna it's a placeholder for the,,,
type and it doesn't have to be t you,,,
could use anything that's the convention,,,
though,,,
um and then we have the what we're,,,
passing in which is going to be x with,,,
the type of t,,,
okay and then we want to return t so,,,
this could be anything,,,
right it's it's,,,
basically a template and then we just,,,
want to return x so this,,,
is doing the same thing as these two,,,
except we can pass in any type we want,,,
all right so let's come down here and,,,
let's say print,,,
and we'll do,,,
actually you know what i'll just copy,,,
both of these,,,
and let's change get into get val pass,,,
in an int and then change this to get,,,
val and pass in a string and you'll see,,,
that it does the same thing,,,
all right so that's that that's the,,,
easiest example i could come up with to,,,
explain generics,,,
it's basically like a template,,,
so that you don't have to have multiple,,,
functions to handle multiple types,,,
and if you if you don't have if you're a,,,
javascript developer and you don't have,,,
experience with typescript which does,,,
have generics then this might seem a,,,
little weird to you because you don't,,,
deal with types in the first place all,,,
right guys so i think that's gonna do it,,,
for now uh if there's other stuff you,,,
want to learn about that i haven't gone,,,
over you can look in this,,,
explorer slash test data i mean i've,,,
went over most of it arrays classes,,,
global variables but there's there's,,,
other examples too like if we look at,,,
class,,,
you have quite a few examples here,,,
and also if you go to,,,
if you go to,,,
where is it explorer,,,
no not explorer that's where we just,,,
were uh docs and then design,,,
and let's say you want to learn about,,,
more about generics,,,
you click here and,,,
go to like overview,,,
and there's a lot of information here so,,,
this this is where i learned everything,,,
and there there were a couple other,,,
articles that i looked at as well um but,,,
yeah so just just keep in mind this is,,,
experimental this isn't something you're,,,
going to find a job doing tomorrow or,,,
even a few months from now,,,
so just keep that in mind i just wanted,,,
to do this because,,,
i was interested and whenever i jump in,,,
and i learned something i feel like i,,,
want to you know teach everyone else,,,
what i've learned in a in a more compact,,,
way than having to come here and read,,,
over all this but that's it guys i hope,,,
you enjoyed it and i'll see you next,,,
time",,,
HtunPQtr-Xw,"what's going on guys so in this video
we're going to do five separate projects
all html css and javascript and these
are actually pulled from my 50 projects
in 50 days course on udemy so if you're
interested in the entire course and all
50 projects i'll have a link in the
description with a promo code for just
9.99 all right so just to kind of show
you what we'll be doing in this video
the first project is going to be a
scroll animation which is pretty common
you see this a lot in websites where you
have some content and then as you scroll
down you have other elements come in
from the left or right or fade in or
whatever and then as we scroll up
they'll go away all right so that's the
first project second one is going to be
this rotating navigation where we have a
hamburger menu if i click that basically
the whole site just tilts and rotates
and exposes the menu here and then we
can you know close it back up
and then we'll be doing this form input
wave animation so if i click in an input
box the label has this cool animation
moves up and if i click outside of it
then it goes back to normal then we have
the 3d boxes background project where
we'll have these separate boxes and
click this button and it just gets put
together into a single image all right
so that's that then we have the
hoverboard project which will have all
these squares and as soon as we come in
here with our mouse we get these random
colors different colors and as we move
out of the boxes they fade away and it
gives us this cool cool little effect
alright so those are the five projects
we'll be doing in this video and the
point of all these projects is to
improve your css skills as well as your
javascript and being able to work with
the dom manipulate the document object
model all right and if you're interested
in the 45 other projects i'll have a
link in the description to the full
course all right so let's get started
[Music]
all right so in this project we're going
to build a scroll animation which is is
pretty simple we can most likely do this
all in one video however it's very
useful you might see these websites
where you start scrolling and parts of
the site you know images or sections of
the website start to come in so i just
created these content blocks and you can
see there's three to begin with but if i
go and i start to scroll down the next
one comes in from the left
go down some more next one comes in from
the right and it's going to alternate
where it comes in from so we're going to
use css transitions to have it come in
smoothly we're going to use javascript
to basically tell where the trigger
point is for the next box to come in and
then we're going to add a specific class
to show it and then if i go back up
it'll remove the clasp when it hits the
trigger point
and it'll all you know slide back out
all right so i think it's it's really
useful you can use this in a lot of
different uis and different websites so
that's it let's get into it
okay so this is a very useful but simple
project so we can probably get this done
in one video so let's jump into our
project starter here and for the title
i'm going to just call this
scroll animation
and we're going to go down here into the
body and all we really need is
a bunch of boxes which
would ultimately contain your website
content we're going to we're not going
to waste time creating content we're
just going to have a bunch of boxes and
then apply the animation to them
i'm just going to put an h1 here and say
scroll
to see
the animation
and then under that we'll have a class
of box
and i'm just going to put an h2
with the word content we'll just copy
this down we'll have a bunch of these
okay
now ultimately like i said you would
have these would be cards or just
sections of your website whatever it is
that you want to
bring in with that slide in animation
so let's go into our style sheet here
and i'm going to add
a
background color
and let's make that hexadecimal ef
efe
dd
six
so kind of a tannish background
and then let's do
let's see display flex
justify direction okay so that's good
i'm going to get rid of the height
and the overflow hidden because we do
want a scroll bar obviously this is a
scrolling animation
and then for the h1
let's just set margin to
10 pixels and then
let's create the style for the boxes
so i'm going to use a background color
of steel blue
let's make the text color white
and i'm going to display flex because i
just want to align
the h2 that's inside to the center both
horizontally and vertically so display
flex align items
center and justify content
center
and let's set a width
of 400 pixels on the box and let's do a
height
of 200 pixels
okay we want to separate them out so
let's do margin of 10 pixels
and let's do a border radius
so border radius will do 10 pixels and
let's add a little box shadow
obviously this stuff isn't needed but i
just want to make it look decent
so don't do 2 pixels
and 4 pixels for the offsets 5 pixels
for the blur our gpa for the color which
is going to be 0 0 0 0.3 for the alpha
value and then for the animation we're
going to use the transform property with
translate x because that's what we want
to do is move these along the x-axis
so initially let's set box the class of
box transform
and we want to set the translate y
i mean i'm sorry translate x which is
horizontal it's the x-axis
oops i forgot my semicolon up here
and i'm going to set this to 2. so 0 is
the default if i set it to 0 there's no
change if i set it to let's say 100
pixels and save you can see it gets
moved over 100 pixels gets moved over to
the right
so what i'm going to do is set this to
200 percent which is going to move it
way off the screen
to the right
and then what's going to happen
is if we have the class of show so let's
say
box
with the class of show then we're going
to set the transform
and translate y
translate x to zero which is the default
so if i go over here and i apply a class
of show to this first one
it's going to show because it's in its
regular position the rest of them are
still 200 percent over here
and then what we'll do is we'll have a
transition
so that when that class gets added it
transitions in smoothly from over here
all right so we want to add a transition
on the transform
property
we'll do a 0.4 second duration with an
ease effect
okay now
the way it is now if we add the
javascript and we add the scroll
functionality and they come in they're
all going to come in from this side i
actually want
every other one to come in from
the off from different sides
so what we can do is
right here let's take our box class and
let's use nth
of type which is a pseudo selector and
we can select all of the even elements
all the even boxes
okay so basically you know every other
one
and what we'll do is instead of setting
the initial
the initial transform translate x to 200
percent we're going to set it to
negative 200 percent which is going to
put
put them over here so all the even ones
are now over here all the odd ones are
on this side
okay and then when we have them come in
when we dynamically add the class of
show they're going to come in from
different sides
all right and we have to also
figure out where we when we want them to
come in as we scroll
so that should do it for the css
actually i just want to make the h2 a
little bigger so let's say box h2
set the font size to 45 pixels
and then we'll jump into our javascript
and first thing we want to do is bring
in our boxes so let's say cons boxes and
document.query
we want query selector all because
there's more than one
so this will put it into an array or a
node list
and then we want to fire off an event
when we scroll so on the window we're
going to add an event listener of scroll
and when that happens we'll have a
function called check boxes because we
want to check
the positioning of each box
and in a box could be anything it could
be any
section of your website or an image or
or whatever
so we're gonna have this
function
check boxes
and we need to figure out where is the
trigger point where do we want you know
when we're scrolling down where do we
want them to start to come in
so we're going to be using
window dot inner height
in fact we can just console log
that so you can see and we're going to
run check boxes to begin with anyways
right here so
i'll go ahead and run that and then if i
open this up you'll see 888 is the
window height not counting the console
if i move this console up and i reload
now that the height is 406.
so we're getting the the inner height
and we want the trigger point so
basically where we want you know it's
it's a scroll in
um
we're going to want
that to be a little less than the inner
height
and in we can't just use a fixed number
because the height could be you know
different on
at any at any point
so
what we're going to do is divide
this by 5 and then multiply it by four
so now
let me just reload this so you can see
the height here is 666.
if i save that now this gives us
this equation here gives us 532
all right so that's going to be our
trigger point
so i'm actually going to put this into
a
variable we'll call it trigger bottom
so where in the in the window do we want
it to trigger
uh so we have that now
let's go ahead and take our boxes
which we brought in which is a node list
that we can loop through
and we'll say for each box
uh yeah for each box
let's get the top of the box
and when i say box you know i mean this
the elements here so const box top
i'm going to set this to
the the whatever box we're dealing with
because remember we're looping through
them
and we there's this method called get
bounding client rect
so i actually have this i want to show
you this real quick
just so you understand what this does
so this method returns what's what's
called the dom wrecked object and dom
wrecked it's just basically a rectangle
describes the size and position of a
rectangle so it returns that
providing information about the size of
an element and its position relative to
the viewport so where in the viewport is
it
and there's a bunch of properties that
we can use on this if we go down here we
have the x y width height
where it is where the top of it is where
the right where the bottom where the
left of it is so we want to see where
the top of that particular box is so
we're going to add here dot top
okay so that will give us the top value
and then
all we need to do after that is see if
the top of the box
is less than the trigger bottom
if it is we want to add the class of
show
if it's not if it's more then we want to
remove the class of show so let's say if
the box
top
is less than the trigger bottom
then let's take that box and let's add a
class so classless dot add
of show
else then we want to remove it so box
dot class list
dot remove show
okay so now i'm gonna go and just remove
this
show that we added manually
now notice that it's only showing the
first three because those are in range
now when we start to scroll it's going
to fire off
an event and the reason we see these
come in initially is because of this
right here if we don't have that we're
not going to see them because it hasn't
this hasn't fired off yet if i scroll it
does
i mean if you want that functionality
where it doesn't show it until you
scroll that's fine but usually you would
show everything above the fold so we run
that initially first then we start to
scroll and as soon as this is true as
soon as the top of the next box is less
than the trigger bottom point
which is a little less than the you know
the entire height of the viewport
it's going to come in because it adds
that class of show and what that class
of show does
is sets it to its normal position
now if it's even it it's starts over
here so it comes in from that way if
it's not even it starts over here and
comes in from that way so every other
one comes in from a different direction
and as we scroll up it's still going to
fire off this event and it's still going
to check this
so if this is not true it'll remove the
class so as we scroll up
you'll see that they'll start to
go out
now one thing i just noticed is i do
have a horizontal scroll bar here and i
don't want that so in my css i'll just
add on
to the body here
and i'll say overflow
overflow x because we this is the x axis
scroll bar we're going to set that to
hidden so that will get rid of that
horizontal scroll bar
all right so pretty easy and and i mean
a lot of people
use jquery for something like this or a
library like animate on scroll animate
on scroll is actually a really cool
library and if you want to do some funky
stuff then
you can use that but i mean if it's just
something simple and you're just
bringing in elements
when you scroll down this is
very lightweight you know no extra
libraries or anything and it's really
easy to do so hopefully you guys found
this useful and i'll see you in the next
project
hey guys welcome to your next project so
i actually really like this project i
think it's really cool looking so
basically we just have a simple article
this could be anything at all any
website any blog whatever and up here we
have the little navigation icon if i
click this
what's going to happen is it actually
rotates the entire website the entire
container here and then it brings in
the nav here the navigation items from
the side and the icon also changes so
basically we have two icons open and
close we're going to position them so
that when we click it this circle
rotates and shows the close button
obviously we need a little bit of
javascript to be able to add and remove
the specific class which we're going to
call show nav
and that will you know rotate and bring
the menu in so i think this looks really
cool
so
it's it's going to be
mostly css that we're dealing with we
need to add specific styles for
uh specific elements when the show nav
class is present the only javascript we
really need is to add or move the class
when we click this button okay so let's
get started all right so we're going to
get started here i have my project
starter open i also have a link here to
the font awesome cdn so that we can use
some icons for the open and close
buttons
so in the title here i'm just going to
say
rotating
navigation
and down here let's get rid of this h1
we're going to have a container that
wraps everything
and in here we're going to have a circle
dash
container that's going to wrap the
circle
so another class of circle and this is
basically the you know the circle that's
going to be up in the corner with the
buttons so in here we're going to have a
button with the id of clothes
and i just want to use an icon from font
awesome so fas and then fa-times
will be the icon and right under that
we'll have a button with the id of open
and this is going to be the icon fas and
then f a dash bars
which will give us like that you know
that hamburger look
so if i save that we're just going to
see our two buttons here now we want to
be still within the main container but
outside of the circle container so right
above the last div we're going to have
our content
and you could put absolutely anything
here in this content div
we're just going to put in h1 and say
amazing article
and in small tags we'll put the author
our good friend foreign pop
and then paragraph let's do lorem 100
just to throw some dummy text in there
under the paragraph we'll have another
h3
and we'll say my dog
and we're gonna have a picture of a dog
i'm just gonna paste this uh
this image tag in here and of course
like i said you could put anything you
want here this is just an unsplash image
of a dog
and then underneath that we'll have a
paragraph we'll do lorem
75
and save and we get a cute little dog on
the screen
so underneath
the container
so the container ends here the last div
we're going to put our nav so let's just
create a
html5 nav tag with a ul
and then an li and i'm going to use
icons here as well so we'll do i f a s
and f a
dash home
and then next to that icon we'll just
say home
and let's copy that down twice so this
one is going to be about i mean you'd
probably these would probably be links
but
that's fine you can add the links if you
want so fa let's do user dash alt
and then for
this is going to be contact these aren't
going to be actual pages
the point of this project is the the
actual animation and the position of the
nav and all that not the actual inner
pages
so this will use
envelope
okay so that should do it for the html
let's jump into our style sheet and
we'll do a good part of this now we
might probably have to break it into
another video because there's quite a
bit of css but i'm going to use the lato
font so css question mark family equals
lato and then we'll add that to our body
plato
all right and then let's see we're
actually not going to use all this flex
stuff here so i'm going to get rid of
pretty much all of this
except for
let's see except for
the overflow hidden
which i'm actually going to change to
overflow x hidden so what that does is
it only hides the scroll bar on the
x-axis so going this way so we want to
be able to scroll this way
and then margin 0 and then
let's also add a
background color
of 333 which is a dark gray and then
let's have color
222
and i know that that doesn't look right
but we're going to set the container
background color to a light color so
let's do
background
color and we'll do fa three times
now with this container
basically it's gonna rotate a little bit
over when it has a specific class of
show nav so before i add anything else
to the container let's do container when
it has
show nav
and we can rotate it with the transform
property and then rotate
and i'm going to rotate it negative 20
degrees
all right and then
let's see if we go back here and we just
add that class manually to this
show
nav
then you can see it rotates and i'm just
going to keep that there for a second
we're going to want to change the
transform origin
so transform origin when you when you
rotate the origin by default is going to
be like in the middle it just it just
turns it it rotates it however we want
it to rotate from the top left position
so it rotates i can't really explain it
if you go to the mdn docs
for
for trend transform origin you'll be
able to see how it works with different
values but we want to set the transform
origin property to the top
left
okay so now you can see the rotation
point is up here instead of
in the middle
um now we do want to transition on that
because we don't want to just flick
you know rotate real quick we want it to
be smooth so let's add a
transition onto that we want to
transition the transform property
say 0.5 seconds and we'll just use
linear so it's just you know all one
speed or whatever and you can see it
actually does it when i save
because we have that class on it
now i'm going to just go ahead and get
rid of that class for now but we know
that
it does rotate when it has that specific
class added
so some other things i want to do here
is just set the width to 100 viewport
widths so basically take up the whole
you know the whole viewport
horizontally and then let's set the min
height to i'm going to set that to 100
viewport heights so we want to take up
the whole
viewport
and then for padding
let's say padding 50 pixels
all the way around
and that should do it for the container
now let's work on the circle container
which is around this
so
circle dash
container
and i want to position this in a fixed
position
and
we want it to be like a half circle on
the edge of the page so we'll set this
to negative 100
pixels for the top and then left same
thing negative 100 pixels
and right now we just don't see anything
basically the buttons are are not
showing right now
so for the circle itself
because remember we have a circle
container but then we also have a class
of circle that wraps around the icon so
this is where we're going to add like
the background color which is going to
be hexadecimal ff7979
and let's set a height of 200 pixels and
a width
of 200 pixels and now you can see it up
in the corner there
we want this to be a circle so border
dash radius we're going to set that to
50 percent make that a half circle i
mean it's a full circle but
half of it's off the screen that's what
we did negative 100 because we have 200
for the height and the width if you
increase or decrease this you want to
adjust that as well and we want to
position this relative so we can
position the buttons inside absolute
and this is going to rotate so i want to
add a transition
on the transform
property and let's make that same thing
0.5 seconds linear so same as the
container rotation
all right and then for the buttons let's
say
circle
button
and for these i want to i know we can't
see them at the moment let's actually
position them first so we'll position
them absolute oops
so we're going to position absolute and
let's put them top 50 percent
and from the left
50 percent
and then
let's make the height
100 pixels
and then let's set and i know it doesn't
look right yet
let's set the background
to
transparent
and they're both right and they're both
in the same exact spot right now we want
to take off that border so border zero
let's set the font size bigger as well
so font size will set that to 26 pixels
and let's set the color
to
white
okay and then i just want to get rid of
this border when it's in its focus state
so let's say dot
circle
and button we want to target focus
and set outline
to none
okay good
uh
let's see so
each one has one has an id of open one
has an id of clothes so i want to target
the open
so circle button
with the id of open
and i'm going to set that left value to
60
percent okay the open button is what
we're going to see initially and that's
where i want it positioned
so for the close let's say circle
and we want the
uh button that has the id of close
and i'm going to set that to top
and let's set that to 60 percent and
this is relative to the circle
okay and
we want to
rotate this
this close button so let's use transform
rotate and we're going to rotate it 90
deg so 90 degrees
and let's set this
transform origin
transform origin is going to be top
left as well
so now i save it and you can't see it
it's up here in fact if i
take my
container here and let's set just
temporarily set this to 200 pixels
you can see exactly where it's
positioned so just put that back to
negative 100 and we should just see the
the lines here
and it's going to stay fixed there no
matter what
this image though let's
let's just fix that real quick we're
going to do the rest of the css in
in the next video but i just want to
target the content
image
and set a max
width of 100 of its container because
that's bugging me but yeah you could
have absolutely any content you want
here and we can see the nav and stuff
down here but in the next video we'll
finish the css and then we'll add a
little bit of javascript to be able to
click this
and you know add the show nav class and
it will do the do its whole rotation
effect
let's actually add though onto
onto the button
let's add a
cursor
pointer
like that
alright so that's it i'll see you in the
next video all right so we need to
finish up our css we have to deal with
the the actual nav down here
but before we do that i'm just going to
add a couple more content styles
so for
uh for the content
itself let's do a
max width of
1000 pixels and we'll set margin
let's do 50 pixels on the top and bottom
auto on the left and right keep it in
the middle so even if we stretch it out
you know it's going to have a thousand
pixel
1000 pixel width max
and then for the h1 say content h1
i'm just going to take the margin away
from that so margin 0 and then for the
small tag for the author
let's set a color of 555
and let's set a font style
of italic
and then for the paragraphs
so content
paragraph we're going to set color to
333 and let's set let's increase the
line height
to 1.5
and we already have the image
at 100 width good so now we just need to
really deal with the navigation
which is right now is down here and what
i want to do since we're only going to
see this when this actually rotates when
we click this i'm going to add the show
nav
so show dash nav i'm going to manually
add it for now
and then
the actual navigation
we want that to be positioned over here
right so let's let's do this above where
we did the content stuff
and i'm just going to use the nav tag as
a selector
and i want to position this to be
fixed because we want it fixed down to
the bottom so we'll say fixed and bring
it from the bottom 40 pixels up and from
the left
zero
so that puts it you know
near where we're actually going to want
it
and then i'm just going to set a high z
index here so it's on top let's do a z z
index of 100
and then for the ul
let's say nav unordered list it's not
glass just nav
so for that let's do a margin not a
margin let's do a list style
type of none so that will get rid of
those bullet points and then i'm going
to set padding left
to 30 pixels
and then we want to style the list items
so nav ul
li
and i want them all uppercase so let's
do a
text transform
uppercase
and let's change the color
to
white
and let's set a margin of 40 pixels on
the top and bottom so we're really going
to separate them from each other
and then let's
let's bring it over here we need to have
it initially over here more to the left
because it's going to come in
as this rotates or right after it
rotates
so to do that we can use transform
and we want to translate on the x-axis
so translate x we want to bring it left
so that would be negative
we'll do negative
uh 100 percent
so if i save that now you can see that
it's
you know it's way over here
we can still see it a little but that's
fine it's just going to come in
but we want that to come in smoothly so
let's add a transition on that so
transition
the transform property and we'll do a
0.4 second
duration and we'll use ease in here
and then let's see
for the you know what let's comment this
out for a minute just so we can actually
see this
i want the this i want some more space
between the icons so
let's do nav
uli
lii
and i'm going to set the
font
size let's do 20 pixels and let's set
margin
right to 10 pixels
oops
okay so makes the icon a little bigger
also put some space in between them
now
we're going to want
each
each one of these to stick out a little
more kind of going at an angle
so what we can do is take the nav
let's say nav ul li and then the direct
li after that and let's add a margin
left of 15 pixels so if i save that what
happens is the lis after the initial li
are going to stick out
15 pixels
now i want this last one to stick out
even more so
what i'll do is take this copy it and
let's say li
plus li
plus li
so basically anything after you know
this one here so the contact when i want
to stick out double that so 30 pixels so
now you can see that it's at an angle
kind of at the same angle as the pages
here
so we have a
initially we have this negative
100
translate x so if i uncomment that
it goes almost off the screen but we're
going to want these ones to initially
start out more over as well to the left
so
i'm going to copy that and for this one
here we have our
our margin left 15 let's do negative 150
percent and then for this one here let's
add let's do negative 200 percent
because we need those to be over more
now when we have the show nav applied we
wanted to actually show the navigation
everything we just did is the default
when you first come to the page
when this class is actually there which
it is now because we manually added it
we want to see
all the navigation stuff so
let's go
we want to do this we'll go right above
the nav here and let's say
so the container div
when it has
show
dash nav
then we want to take the direct
navigation
lis after that
and we want to bring them into view so
let's set transform translate x on all
of those
to zero which is going to bring it to
its you know its original place and i
want to add a little bit of a delay so
we'll say
transition delay
spell that right transition
delay i'm going to set that to 0.3
seconds so that it comes in
you know a little bit after oops i
forgot my semicolon so it comes in a
little bit after the rotation
so now we're able to see it because we
have that show nav
so if we take this off
then we just have you know just looks
normal and then if we have it
you can see
it rotates and it shows the
the navigation
now we want to
have the functionality where we click
this then it does it adds that class
which is going to be pretty easy so
let's jump into our script here
and let's create a variable called open
and we'll use document dot
get element by d we have an id of open
we also have an id of close
so
close and then we also want to grab the
container so const
container
get element by d
actually no that's a that's a class so
let's do
i mean you could add an id or you could
just use query selector
and we want dot container it's a class
all right so let's take open
and let's add an event listener to that
so we want to listen for a click and
when that happens we're going to run a
an arrow function and then we just want
to take the container
and
from the class list we want to add
the class of show dash nav
and then close is going to be similar so
i'm just going to copy that and let's
change
this to close and then let's do
container class list
remove
all right so i save that and i click
okay so that happens
so let me just reload so i click
and that rotates these shoot in but we
can't see the
the close here so
to handle that
let's go back to our css
and we basically just want
the circle this to rotate
when there's that show nav class
so i'll go right below the circle
so let's say circle and
um dot show nav
and then we're not actually style i'm
sorry not circle container
so when the container has show nav
applied to it then we want to style the
circle and what we want to do with the
circle is rotate it so let's say
transform
rotate
and we're going to rotate it negative 70
degrees
okay so now once it rotates we can see
the close button
just because of where it's positioned
when the circle rotates it just comes
into view
all right so that looks pretty good
so not too bad i mean we're just adding
and removing a class and we're setting
certain
certain uh styles on the circle and on
the navigation
you know when we have that class applied
so you could use this on with any
website any application so that's it
let's go on to the next video next
project all right welcome to your next
project so in this one we're going to
build a simple login form here with a a
a wave effect on the labels so if i go
ahead and i click in here in the input
you can see the label will then wave up
okay so we have that cool little
animation when we click in here and when
we click out
so basically the way we're going to do
this is wrap a span around each one of
these using javascript and add a
transition so that the label moves up
when we focus on the input but we're
also going to add a dynamic transition
delay so it gives it that wave effect so
each each letter goes up at a different
time
all right so that's what we'll be doing
let's go ahead and get into it okay so
let's get started on our form input wave
project i have my project starter open
here i'm just going to say form input
wave
and then let's get rid of this h1 and
we're just going to wrap a container
around
our form so we'll have a container with
an h1 we'll just say please log in just
a basic login form
and we'll have a form tag here we don't
need an action
and in here we're going to have a form
dash control which will wrap around the
input which is going to be type text i'm
also going to add required
which will just give it some basic
validation and then the label is gonna
go underneath and we don't really need a
four so we'll get rid of that and say
email
and then i'm gonna go ahead and copy
that down
and this one is gonna be password so
type
password and label
password
underneath that form control we're going
to have a button and i'm going to give
it a class of btn and let's just say
login
and then we'll have a div with the class
of text
actually let's do a pat we'll do a
paragraph
the class of text
and say don't
have an account
and if they don't have an account then
we'll just have a link doesn't have to
go anywhere and say register
all right so that's our form pretty
simple
now before i get into the css i just
want to kind of explain
what we're going to be doing as far as
you know how to do this
and
we want to use javascript to basically
wrap each letter in a s in a span
and we're going to have a transition on
that span to move it up
so or a transform translate y value to
move it up with a transition to make it
smooth and in javascript when we",,
",,
 wrap,,,
the span around each letter we're also,,,
going to add a transition delay to each,,,
one that increases,,,
every letter so that you know the first,,,
one goes up and then this the m would be,,,
delayed then it would go up a would be,,,
even more delayed then it would go up so,,,
it gives it that wave effect so that's,,,
ultimately what we're going to end up,,,
with in fact i'll go ahead and just,,,
paste in what these labels will look,,,
like afterwards,,,
so basically we'll have you know the,,,
label tag,,,
you don't have to put this in i'm just,,,
showing you as an example we'll have,,,
each letter wrapped in a span with a,,,
transition delay that increments,,,
so i'm just going to,,,
comment that out but just so you can see,,,
what we're going to end up with but,,,
before we get into any of that let's,,,
just do some basic styling on this form,,,
because it looks horrible,,,
so i'm going to use the,,,
mully font so we'll do,,,
family,,,
equals muli and then,,,
let's set the let's set that on the body,,,
and then i'm going to set a background,,,
color for the body to steal blue,,,
and the color of the text,,,
to white,,,
that and then let's,,,
style uh let's see we'll do the,,,
container,,,
and let's add a background color,,,
of rgba i wanted to have just kind of a,,,
transparent,,,
look so black and then 0.4,,,
for the alpha value and let's add,,,
padding so padding we're going to do 20,,,
pixels top and bottom 40 left and right,,,
and let's add a slight border radius of,,,
5,,,
all right and then let's do container,,,
h1,,,
so for that i want to text a line to the,,,
center i also want to add a margin on,,,
the bottom,,,
of 30 pixels,,,
okay and then the link let's say,,,
container a which is just the register,,,
link i want to text decoration none,,,
take away the underline and the color,,,
will be,,,
let's set the color to light blue,,,
so now we want to get into the form,,,
fields first we have the form control,,,
which wraps around the input and the,,,
label so let's say form control and i'm,,,
going to position that relative,,,
because i want the label to be,,,
positioned absolute within it,,,
and then for margin let's do 20 top and,,,
bottom 0 left and right 40 bottom,,,
and i'm going to just set a width of 300,,,
pixels,,,
all right and then,,,
let's do the inputs so form control,,,
input,,,
i'm going to set the background,,,
color to transparent and then get rid of,,,
that border but i do want a border on,,,
the bottom,,,
so let's say border,,,
oops,,,
border dash bottom and i'm going to set,,,
that to 2 pixels,,,
let's do white and solid,,,
okay now i want it on its own line so,,,
instead of inline we want to display,,,
block,,,
i also want it to go all the way across,,,
so we'll set width to 100 percent,,,
and we'll add some padding let's do 15,,,
pixels on the top and bottom,,,
and,,,
the font size for the input i'm going to,,,
set to 18,,,
pixels,,,
and i think we should be good there,,,
let's set the color to white,,,
and then the the border here or the,,,
outline i should say we want to get rid,,,
of that also if i submit and it's,,,
invalid you get that border as well so,,,
let's target form control,,,
inputs,,,
and when it's in its focus,,,
also we want,,,
form control input,,,
valid,,,
and we're going to just set the outline,,,
on that to,,,
zero,,,
okay so now we don't have that ugly,,,
border,,,
now,,,
before we do it i think we're going to,,,
do the label stuff in the next video but,,,
let's finish like the button um,,,
and the text down here so we have a,,,
class of,,,
actually we'll put this up,,,
we'll do all the form stuff down at the,,,
bottom so let's do btn,,,
and i'm just going to set the cursor to,,,
a pointer i'm going to display,,,
as an inline block,,,
for our button here and,,,
i want it to go all the way across we'll,,,
say width 100 percent and let's set the,,,
background of the button to,,,
light blue,,,
and let's set the padding,,,
we'll do padding 15 pixels,,,
and let's,,,
for font family we're going to inherit,,,
and then for font size,,,
let's set that to,,,
16 pixels,,,
and the border we want to get rid of,,,
that so border zero and i'm going to,,,
make the border radius,,,
the same as the container 5 pixels,,,
and i think,,,
that's all we want to do,,,
let's say let's add let's say btn focus,,,
set that outline actually we can add,,,
that down here,,,
uh no we because we're going to add,,,
something else there yeah let's just do,,,
outline 0 on vtn focus,,,
and we can have a little hover effect,,,
too so i mean not hover,,,
click effect or hover whatever you want,,,
so we're going to do button,,,
and when it's active so when we click,,,
down on it we're gonna add a transform,,,
and just scale it down a bit so scale it,,,
from one to point nine eight,,,
so we get that little effect all right,,,
yeah so i think what else the the text,,,
here we can move that down a little bit,,,
so under the button stuff we have a,,,
class of text,,,
and i'm just going to set the margin,,,
top to 30 pixels push that down a bit,,,
now the label don't worry about that,,,
we're gonna,,,
we're gonna style that next and like i,,,
said we need to use javascript to turn,,,
the label into,,,
letters with spans around them with a,,,
transition delay we're also gonna add a,,,
transition obviously on the label span,,,
so we'll get into that in the next video,,,
okay so we're going to finish this form,,,
up so i'm going to,,,
work on the labels here so down here,,,
we'll just take form control,,,
labels and we want to position those to,,,
be absolute,,,
and,,,
absolute,,,
and that's because,,,
the,,,
the form control itself is relative so,,,
we're positioning absolute within that,,,
and we're gonna put from the top 15,,,
pixels and from the left zero,,,
now right now the way it is if i start,,,
to type in here it's going to just cover,,,
the label but ultimately the label is,,,
going to wave upwards when we click in,,,
here,,,
all right now,,,
before we actually style the span i want,,,
to add it because right now there is no,,,
span you know we don't have this it's,,,
just label and then the word so we're,,,
going to use javascript to,,,
basically turn this into this so let's,,,
jump into our script js and first thing,,,
we want to do is bring in our labels,,,
so let's use document.queryselectorall,,,
because it doesn't matter how many,,,
labels there are we want to get them all,,,
so form dash,,,
control label and that will give us a no,,,
list of all the labels,,,
so since it's a node list we can go,,,
ahead and use for each on it and we'll,,,
say for each label,,,
oops,,,
for each label,,,
i'm going to take the label dot inner,,,
html and set it,,,
now first there's a couple things we,,,
want to do we want to get the inner text,,,
oops,,,
in our,,,
text which is just going to be you know,,,
each letter so e m a i l in this case,,,
for the first one,,,
and then i'm going to split it into an,,,
array i'm going to go into the next line,,,
and call dot split,,,
what that does if we put an empty string,,,
in here is it splits the letters,,,
into an array so it'll be an array with,,,
the first value will be e the second,,,
will be m and so on,,,
now from that i want to manipulate it so,,,
i'm going to use dot map which,,,
you can use on an array which now this,,,
is to,,,
turn it into an array of something else,,,
and what we want to turn it into for now,,,
is an array of the letters with a span,,,
around it with a transition delay,,,
so let's say map and this just takes in,,,
an arrow function,,,
and we're just going to use back ticks,,,
here because we want to just turn it,,,
directly into an array of spans that,,,
we're going to have here but we need to,,,
pass in here for each letter and then i,,,
also want the index which just starts at,,,
0 and increments for every item in the,,,
array,,,
and i want to turn it into let's say,,,
span,,,
and inside here we want to have whatever,,,
the letter is,,,
so this will turn it into an array,,,
of letters with a span around it now,,,
obviously we don't want an array we want,,,
it to be a string so we can use join,,,
and just pass in an empty string and,,,
that will turn it back into a string,,,
okay so basically we have the inner text,,,
so we're looping through the label we,,,
have the inner text e m a l e m a i l,,,
for the first one we're splitting it,,,
into an array which will put each letter,,,
in its own,,,
item in the array then we're mapping it,,,
to,,,
create an array of the letter with a,,,
span around it then we're turning it,,,
back into a string so if i save this now,,,
we don't see any difference here but if,,,
i open up my elements tab,,,
and i click on,,,
the label here you'll see that now,,,
they're wrapped in spans,,,
so i'm not going to add the delay the,,,
transition delay just yet let's go back,,,
to our css and now that we have these,,,
spans we can add stock we can add,,,
styling for it,,,
so,,,
let's see let's do the just the span in,,,
general first so,,,
we'll say form control label span,,,
and i'm going to display let's do,,,
display inline,,,
block it's inline by default,,,
and then i'm going to increase the font,,,
size to 18 pixels,,,
because before this wouldn't have worked,,,
because we didn't have spans around them,,,
and then let's do a,,,
min,,,
dash width of 5 pixels,,,
and we're going to add a transition on,,,
this because when it when we add the,,,
transform value actually we'll add that,,,
first,,,
so let's go up here,,,
or down here rather,,,
and let's say form control,,,
input,,,
focus so focus meaning,,,
you know when we click inside we want,,,
the direct label span,,,
and we also want to do this on the,,,
validation so i'll actually just copy,,,
this down and we also want the valid,,,
state so input valid,,,
and what we'll do is just first of all,,,
change the color to light blue,,,
so if i,,,
click in here you can see the label,,,
turns light blue i also want to turn the,,,
the border light blue as well,,,
so up here,,,
where we did the outline on the input,,,
focus and valid let's do bottom,,,
or i'm sorry,,,
bottom border,,,
bottom and let's set that,,,
or border bottom color rather and set,,,
that to light blue so that way when we,,,
click in here both the border and the,,,
text,,,
here is light blue,,,
now,,,
let's see we want to,,,
move this up basically when we click in,,,
here so to do that we can add a,,,
transform,,,
and we want to use translate y because,,,
we're translating it we're dealing with,,,
it on the y axis,,,
so translate y and i want to move it up,,,
so it has to be a negative number if i,,,
want to move it down it would be,,,
positive so let's do negative 30 pixels,,,
so when i click in here you can see,,,
they move up,,,
and they just flicker up it's not smooth,,,
so that's why i'm going to add a,,,
transition onto the span right here so,,,
let's say transition,,,
and we'll do 0.3 seconds,,,
and then we could do like an ease ease,,,
in ease out i'm going to use a cubic,,,
bezier,,,
so cubic,,,
bezier and then for the values here,,,
basically what this is is a,,,
it defines a cubic bezier defines a,,,
curve,,,
and we can use it as a transition effect,,,
with a variable speed from start to end,,,
and it takes in four points which are p0,,,
p1 p2 p3,,,
p0 and p3 are the start and the end of,,,
the curve,,,
so i mean it can,,,
you can get a lot more complicated if,,,
you're doing like really cool animations,,,
but this is pretty simple we're just,,,
going to do a couple values here 0.68,,,
negative 0.55,,,
0.265,,,
and 1.55 so we'll have a variable speed,,,
on this transition so if i click in here,,,
you can see now it doesn't just flick up,,,
it has that cool almost like a bounce,,,
effect,,,
now we don't want the whole thing to go,,,
up at once you could do that i mean you,,,
could leave it like that if you want,,,
but uh i want to have that wave effect,,,
so that's where the transition delay,,,
comes in,,,
because we already have the transition,,,
and it's,,,
transitioning the this right here,,,
the transform translate where it moves,,,
up,,,
so in our script here,,,
let's add on to the span in inline style,,,
and we'll set that to say transition,,,
dash,,,
delay,,,
now when we set this we don't want to,,,
set it to a fixed value because it'll do,,,
the same thing it'll just wait and it'll,,,
flicker them all up at the same time so,,,
what i'm going to do here is use the,,,
index which just starts at 0 then 1 2 3,,,
and so on and i'm going to multiply it,,,
by 50. so the first one will be zero,,,
second 150 third one will be,,,
you know 150 then 200 250 and so on so,,,
now i'll save that and if i click,,,
okay that didn't work,,,
uh,,,
oh we need to add the milliseconds so,,,
after the transition delay number we,,,
need to have ms,,,
all right and there we go,,,
and of course you could change this like,,,
we could do 30.,,,
we could do you know 300,,,
which is going to be very slow,,,
so 300 milliseconds,,,
um i think that 50 is good though you,,,
can make it faster like 10,,,
but it's,,,
you can barely see the wave so i think,,,
50 is is a good number,,,
so we'll keep it at 50 ms,,,
all right so that's how you can add this,,,
cool little effect so that's it,,,
hopefully you guys like this project and,,,
we'll move on to the next one all right,,,
so now we're going to create this 3d,,,
boxes project and we're going to be,,,
using some modern css to create this 3d,,,
effect where we have this angle here and,,,
here and we connect the right and the,,,
bottom side and it just gives us a 3d,,,
box look,,,
and then we're going to be using a,,,
background image or a background gif for,,,
each of these boxes and it's all the,,,
same image it's this minion image and,,,
what we're going to do is extend the,,,
background size beyond the single box to,,,
make it as big as this container here,,,
and then what we'll do is dynamically,,,
calculate the background position so we,,,
can move these around and basically form,,,
what looks like one big image when,,,
really this is just a bunch of the same,,,
image,,,
we're also going to add an event,,,
listener onto this button here so when,,,
we click this this whole area shrinks,,,
and it also,,,
gives us this rotate effect on each box,,,
and then it combines them all together,,,
so there's no spacing in between and it,,,
just looks like one big connected image,,,
all right so we'll be using things like,,,
css transforms and transitions uh we'll,,,
use the after and before pseudo,,,
selectors we're going to be using a loop,,,
in javascript to,,,
go through these boxes and calculate the,,,
background position and also add an,,,
event listener onto this with some css,,,
transitions to give it that rotation,,,
effect all right so that's what we'll be,,,
doing let's go ahead and get started all,,,
right guys we're going to get started on,,,
the 3d boxes background project so i,,,
have my project starter open my three,,,
files here now the html for this is,,,
going to be really simple it's actually,,,
only going to have two lines in the body,,,
one will be the button and one will be,,,
the boxes container and then the,,,
individual 16 boxes that are going to,,,
transform into one box when we click the,,,
button those are going to be created,,,
from within the javascript however for,,,
now until we get to that i will just,,,
hard code them and then we'll remove,,,
them later on and and add our javascript,,,
all right so let's go ahead and get,,,
started here let's just change the title,,,
to,,,
say 3d,,,
boxes background,,,
and let's get rid of this h1 and let's,,,
put our button so we have a button and,,,
i'm going to give it an id of btn and a,,,
class of magic,,,
and inside here we'll say magic and i'm,,,
just going to paste in,,,
an emoji here,,,
you don't have to but if you want that,,,
you can just grab it from the repository,,,
um and then we're going to have our,,,
boxes container this is going to have an,,,
id of boxes because we do need to use it,,,
within the javascript and for styling,,,
we'll add a class of boxes,,,
and inside here like i said this is,,,
ultimately going to come from the,,,
javascript but for now we're just going,,,
to hard code them so let's go ahead and,,,
say class of box and we want 16 so we're,,,
going to do asterisk 16 enter and that,,,
will give us 16 divs with the class of,,,
box,,,
go ahead and save that and all we're,,,
going to see is the button because,,,
obviously these are just empty divs but,,,
we have to go ahead and style these so,,,
let's jump into our style css,,,
and we have our our boilerplate our,,,
roboto font we are going to use the,,,
poppins font for the button so what i'll,,,
do is just go ahead and duplicate this,,,
and let's go right here right before the,,,
ampersand get rid of this and let's put,,,
in poppins,,,
like that and then,,,
down here in the body we're just going,,,
to add a background color,,,
a very light gray so it's going to be,,,
fa three times i can't really even see,,,
the difference but just a light gray,,,
background,,,
and then let's start on,,,
the styling for the button which has a,,,
class of magic,,,
so let's say magic and we're going to,,,
give this a background,,,
color of a yellow so we'll use,,,
hexadecimal here with the value of f9 ca,,,
2 4,,,
okay so that'll be the background the,,,
color is going to be,,,
white,,,
let's add our font family here,,,
of,,,
poppins,,,
sans serif,,,
save that good want to get rid of that,,,
ugly border,,,
and let's make let's give it some,,,
rounded corners so border radius,,,
border radius i'm going to do 3 pixels,,,
and let's make the font size,,,
16 pixels we'll add some padding to make,,,
this bigger we'll do 12 on the top and,,,
bottom 20,,,
on the left and right good,,,
we want to have a cursor pointer so that,,,
when we hover over it we have our,,,
pointer,,,
let's um,,,
let's position this to the top so i'm,,,
going to use position fixed,,,
which will position it fixed in the,,,
browser window and we'll say from the,,,
top,,,
20 pixels okay so that'll move it up,,,
uh and then let's also add some letter,,,
spacing to space out the letters a,,,
little we'll do one pixel for that good,,,
and let's see we're also going to,,,
add a little box shadow on the bottom,,,
so for box shadow we have our x offset,,,
which i'm going to set to 0 and then the,,,
y offset i'm going to set that to 3,,,
pixels because i just want it to be,,,
slightly on down here on the y axis,,,
right on the bottom and then for the,,,
color we'll use an rgba yellow so red,,,
green blue alpha so 249 for for red,,,
202 for green,,,
36 for blue and then for the alpha which,,,
is the transparency we'll do 0.5 so now,,,
you can see that there's a slight box,,,
shadow underneath,,,
all right now,,,
i want to get rid of this ugly outline,,,
on the focus state so what we can do is,,,
take the magic,,,
class and say,,,
focus state we want to set the outline,,,
property to none,,,
get rid of that and then i also want an,,,
effect that when we click or we click,,,
and hold when it's in its active state,,,
that it moves down a little bit and gets,,,
rid of the box shadow so it gives the,,,
effect of it's going over the box shadow,,,
so how we can do that is with magic,,,
in the active state we want to first,,,
remove the box shadow so we'll set box,,,
shadow to none and then we'll go ahead,,,
and set the transform property,,,
and we're going to use translate y,,,
because we want to translate we want to,,,
move it along the y-axis just 2 pixels,,,
which will move it down if i did,,,
negative 2 pixels it would move it up,,,
so let's save that and now you can see,,,
when i click and hold it basically like,,,
covers that box shadow,,,
all right so i'm also going to add to,,,
this magic button a z index,,,
of we'll just put 100 because i want it,,,
to always be on top even if the browser,,,
is really short and the image,,,
the boxes go underneath i want the,,,
button to be on top,,,
all right so that takes care of that now,,,
we're going to start on the boxes so we,,,
have the boxes container,,,
and then we have the individual box,,,
class right now i want to be able to see,,,
what we're doing with the boxes so for,,,
now i'm just going to add a background,,,
of yellow and the height and the width,,,
here are very important so that it's,,,
going to be 125,,,
for both,,,
okay so the width is going to be 125.,,,
now the reason for that is because the,,,
boxes the container is going to have,,,
let's do a height,,,
is going to have a height and a width of,,,
500,,,
which is,,,
125 times 4 is 500 and we want 4 across,,,
now to create the rows and columns with,,,
with our css we'll go ahead and use,,,
flexbox on the container so let's say,,,
display flex,,,
okay as soon as i do that they all get,,,
put in a row however they're not being,,,
knocked down to the next,,,
i mean there's only four that can fit,,,
here so i want them to wrap basically if,,,
it hits the edge i want them to go on to,,,
the next line create a new row so we can,,,
say flex,,,
wrap,,,
and set that to wrap,,,
okay now the reason it looks like one,,,
big block is because the numbers here,,,
are exact right 125 times 4 is 500 so,,,
there's no,,,
in between here now,,,
ultimately what i want to do is click,,,
this button and have them separate have,,,
each box separate so what i'll do is,,,
i'll add a class onto this,,,
called big okay and i'm going to save,,,
that and then i'm going to say down here,,,
if there if the boxes class also has a,,,
big class,,,
then let's go ahead and extend the width,,,
and the height to 600 pixels okay so,,,
from 500 to 600,,,
600,,,
and that's gonna make the container,,,
bigger now,,,
this obviously doesn't look right we,,,
want this remaining space over here to,,,
be around each element around each box,,,
so what we can do is we cr where we,,,
display flex here we can set the justify,,,
content,,,
to be space around,,,
now if i save that you can see now the,,,
remaining space is around each element,,,
all right we're also just going to add a,,,
position,,,
let's add position relative to boxes,,,
and then down here for each box,,,
let's go ahead and replace the yellow,,,
with an image with that gif okay so,,,
we're going to say background image,,,
and we want to set that to url,,,
and the link i'm just going to paste in,,,
this is from giphy.com and if you want,,,
to use a different gif from this website,,,
or something else you can do that,,,
so i'm going to go ahead and save that,,,
and now you can see that we just have,,,
this this one image in every box as the,,,
background all right now ultimately,,,
we're going to want to change the,,,
positioning and the size of each of,,,
these,,,
so,,,
let's uh let's actually add a background,,,
repeat,,,
and we'll set that to no repeat and then,,,
for the for the size,,,
background size,,,
we want to set this to the same size as,,,
the the initial boxes because we wanted,,,
to take up that entire thing right now,,,
we have the class of big on so it's at,,,
600 but ultimately we want the size to,,,
be,,,
500 pixels,,,
on x and y,,,
okay so now you can see that it's,,,
stretched out you can only see part of,,,
the image and it's the same part in each,,,
box but later on we're going to change,,,
the positioning of each of these so that,,,
it looks like one big image,,,
all right,,,
so let's see the next thing that we'll,,,
do here we want to have a position of,,,
relative on this,,,
because we're going to be using the,,,
before,,,
and after pseudo selector to give that,,,
that cubed border look,,,
and we need to position that absolute so,,,
we want the container of that to be,,,
relative,,,
now another thing we want to do is when,,,
we do click this button what's going to,,,
happen is it's going to toggle this big,,,
class okay so it's going to go from that,,,
to that and when that happens i want to,,,
have a rotate effect,,,
so we want to add a rotation to,,,
to to the boxes,,,
if it has the big class,,,
so let's go right here and let's say,,,
so boxes has the big class we want the,,,
each individual box,,,
to have a transform,,,
and we're going to use rotate z with a,,,
360 degree angle,,,
okay,,,
now we want this when this happens we,,,
want it to transition nicely so,,,
let's add a transition on to boxes,,,
so transition just so it you know it,,,
rotates smoothly and we'll use four set,,,
point four seconds with an ease effect,,,
and then i'm just going to copy this and,,,
put the transition in the box as well,,,
and now as soon as i save you can see,,,
that it actually,,,
does that effect,,,
okay because when that big class gets,,,
added,,,
uh it,,,
will,,,
go ahead and do that and we're going to,,,
make this button ultimately,,,
add and remove that class which will,,,
make it twirl into place okay so it'll,,,
twirl,,,
or i should say rotate and then go all,,,
together and then it'll rotate and split,,,
apart,,,
all right hopefully that makes sense,,,
now,,,
the last thing that i want to do here,,,
is add that kind of that cubed effect so,,,
not only do we want like a border on the,,,
right and left but we wanted to skew so,,,
it goes like this at an angle,,,
so to to do this,,,
to do the right side we're going to use,,,
the after pseudo selector so we can take,,,
the box class,,,
and then say double colon after,,,
and you can use this to insert content,,,
it needs this content value and we could,,,
even put something in here,,,
and now you can see that after that box,,,
element it puts hello but we don't want,,,
that we just want to leave this blank,,,
the only reason we need this is to add,,,
some styling so you can think of it as,,,
kind of like a like an invisible element,,,
so this for the styling let's go ahead,,,
and add a background,,,
color and we're going to use,,,
the background color of f,,,
uh what is it f six e,,,
five eight d it's gonna be the,,,
background we're not gonna see anything,,,
just yet we need to add the sizing and,,,
position and stuff like that,,,
um so we wanna position this absolute,,,
okay so we're position positioning it,,,
absolute you need to have,,,
relative on the box because absolute,,,
should be it's relative to the box right,,,
and then for the positioning the,,,
coordinates we'll do 8 pixels from the,,,
top we want to because we want to push,,,
it down a little bit because we're going,,,
to add that skew,,,
and then over,,,
let's do,,,
from the right let's do negative,,,
15 pixels because we want it to be you,,,
know going this way,,,
and then for the,,,
height we want it to take up a hundred,,,
percent,,,
of its container which in this case is,,,
the box itself,,,
and then the width is going to be 15,,,
pixels so if i save that you can see we,,,
have this yellow part here and it is,,,
it's pushed down a little bit because of,,,
this eight in fact if i put a zero here,,,
you can see it's flush however i want to,,,
use that i want to have that skew effect,,,
here in here so it'll be on both sides,,,
and to do that we can just use transform,,,
and we want to skew on the y-axis,,,
because it's up and down it's vertical,,,
so skew y,,,
45 degrees and if i save that now you,,,
can see we have that effect of it's,,,
coming off here and going you know at a,,,
skewed angle on both the top and bottom,,,
now we want to do the same thing here we,,,
basically wanted to come from here and,,,
go over so it looks like it has that 3d,,,
effect so i'm actually going to just,,,
copy this whole thing,,,
and now we're going to use before,,,
okay and for the background color we're,,,
going to change it slightly we're going,,,
to use the same yellow whoops,,,
we're going to use the same yellow that,,,
we used,,,
um,,,
where is it,,,
where's the yellow that i used for the,,,
button right here,,,
so we're gonna just we'll just copy this,,,
background color here,,,
and,,,
set that here,,,
okay just slightly different yellow and,,,
for the positioning,,,
we want it to be absolute although we,,,
want to change,,,
we're going to go,,,
let's see from the,,,
bottom,,,
we want to go negative 15,,,
and then from the,,,
left,,,
we want to go eight pixels okay so it's,,,
basically the reverse of what we had,,,
before and then the height the width is,,,
going to be a hundred percent,,,
and then the height will be 15. so it's,,,
basically just the horizontal version of,,,
what we just did and then we want to,,,
skew on the x-axis because it's,,,
horizontal so i'll save that and now you,,,
can see we basically have that same,,,
thing but going this way so what we want,,,
to do in the next video is of course we,,,
want to add the functionality where we,,,
click this button,,,
and it does its little rotate and goes,,,
into what looks like one big image and,,,
we want to be able to toggle that but we,,,
also need to change the background,,,
position we need to make that dynamic,,,
within these boxes because right now,,,
they're just all in the same position,,,
which obviously doesn't look right we,,,
want it to look like it's one big image,,,
all right so that's what we're going to,,,
get into next okay guys so now we want,,,
to start on the javascript which isn't a,,,
lot actually it's only about,,,
about 20 lines or so a little less,,,
but i first want to just explain what we,,,
need to do with the background position,,,
so ultimately as i said before all of,,,
these boxes are going to be inserted to,,,
the dom via javascript we're not going,,,
to have these hard-coded and we're also,,,
going to add a background position to,,,
each one now i'm going to do that,,,
manually just so you can see what the,,,
values are going to be so for this first,,,
one we'll just go ahead and set a style,,,
here and set the background,,,
position,,,
so background position has an x and y,,,
property for this first box it's going,,,
to be 0 0,,,
okay which is the default so i mean it's,,,
not even going to change but that's,,,
going to be the first one the next one,,,
let me just copy,,,
this,,,
right here this whole style,,,
and put that in so this one here,,,
let's let's think about where this needs,,,
to be so remember these are 125 pixels,,,
width and height,,,
so for this one we want part of the 125,,,
pixels to be shifted this way alright so,,,
with this background position this first,,,
value is the x value so we want to go,,,
negative 125 pixels,,,
and if i save that now you can see that,,,
it basically looks like it's connected,,,
in fact if we get rid of this big class,,,
and we save it is connected,,,
so for the next one and and if you guys,,,
want to take a second think about what,,,
you should put here,,,
go ahead and do that so we did for the x,,,
value for the second box we said,,,
negative 125. now for this one here,,,
we want to actually double that right so,,,
instead of negative 125 because if i do,,,
that it's going to just match this one,,,
we want to go over 125 more so we want,,,
to change this to 250,,,
okay and now it looks like it's part of,,,
the image like it's one big image for,,,
this one here the fourth one,,,
let's go ahead and do,,,
negative,,,
375,,,
and there we go so now we have our top,,,
row now for for this one here,,,
it's going to be a bit different because,,,
now we're dealing with both x and y,,,
values,,,
so for that for this one we're going to,,,
have,,,
and i'm going to get rid of this i'm,,,
just showing you what these are what we,,,
need to do within the javascript but,,,
this is going to be 0 on the x-axis,,,
because it's it's the first one and it's,,,
going to be on the y-axis,,,
we want to do negative 125 because we,,,
want to bring it up,,,
okay now the second one we need to bring,,,
over and up,,,
or i should say that it's actually the,,,
sixth one we need to bring over and up,,,
so what we would do is on the x-axis 125,,,
and then on the y,,,
negative 125,,,
there we go,,,
okay,,,
and then we would just continue that,,,
bringing in bringing these up and over,,,
so what i'll do is just completely get,,,
rid of all the the boxes okay we just,,,
want to have the container here we just,,,
want to have this,,,
id boxes class boxes and then that's,,,
going to completely go away now we're,,,
going to jump to jump into our script,,,
and do this with javascript so first,,,
thing we need to do is bring in any,,,
elements that we need such as the boxes,,,
container,,,
so we use the document object and we're,,,
going to use the method get element by d,,,
and we're going to get the id by,,,
the boxes id,,,
and then we also want the button because,,,
we need to add an event listener to that,,,
so let's say const btn,,,
and we'll use document,,,
get element by id i believe it has an id,,,
of btn,,,
okay so we bring those in now the w",,,
ay,,,
that i'm going to do this is we're going,,,
to have a function called create,,,
boxes,,,
and we want to call that function,,,
and then inside create boxes we need to,,,
create,,,
four,,,
boxes,,,
for each row so four columns of or four,,,
rows four columns so the way we can do,,,
that is we can use two for loops,,,
okay so let's say four,,,
and i'm not going to explain,,,
what a for loop is it is expected that,,,
you know at least the fundamentals,,,
before taking this course so let's say,,,
let i,,,
so we want to set i to zero and then the,,,
condition here is going to be if i is,,,
less than four,,,
and then we want to increment i by one,,,
okay now we have rows in columns here so,,,
we want to put another for loop,,,
and we have to use something different,,,
than i,,,
so let's do let,,,
j equals zero,,,
and then,,,
as long as j is less than four,,,
and then j,,,
plus plus incremented by one,,,
now within here we want to construct,,,
those 16 boxes,,,
okay so this is going to loop through 16,,,
times,,,
and we're going to,,,
create this with document and then,,,
there's a method called create element,,,
and we want to create a div remember so,,,
we're just creating,,,
these these divs here that's all that's,,,
all we're doing right now,,,
and we can even go ahead and console.log,,,
box,,,
and if we go over here and open our,,,
console you see that we now have should,,,
be 16 divs now remember they need to,,,
have the class of box so what we can do,,,
is take our box variable or box element,,,
take the class list and call the add,,,
method,,,
and we want to add the class of box so,,,
if we save that now we can see that over,,,
here in the console,,,
now this is where we're going to do the,,,
positioning so,,,
to add a specific css style we can use,,,
dot style and then whatever property we,,,
want and it has to be in camel case,,,
obviously so we want background position,,,
and we can't do background dash position,,,
which is what we would do in css we do,,,
it like this with camel case so,,,
background position,,,
and the way we can set this to be,,,
dynamic is we can put some template,,,
literals here so we that we can use,,,
variables and expressions um and,,,
remember it's going to be something like,,,
you know,,,
negative 125,,,
125 pixels zero it's going to be,,,
something like this but of course this,,,
is going to be dynamic so what we can do,,,
is we can put,,,
a variable syntax so dollar sign and,,,
curly braces we can put a variable or an,,,
expression in here and we're going to,,,
take,,,
negative j because remember it's going,,,
to be negative,,,
um,,,
negative 125 negative 250 etc,,,
so we want to take that and multiply it,,,
by,,,
125,,,
so it'll loop through it'll be you know,,,
zero then,,,
uh,,,
negative 125 negative 250 negative 375.,,,
so that's the x value now for the y,,,
we're going to go ahead and put another,,,
variable expression in here and use,,,
negative i,,,
and also multiply by 125. so this will,,,
do exactly what,,,
i did manually a few minutes ago but it,,,
will add it you know through the,,,
javascript dynamically with these,,,
calculations now the last thing we want,,,
to do is not console.log let's get rid,,,
of that we want to take our box can,,,
boxes container that we brought in,,,
earlier and we want to call append,,,
child and we want to add in the box so,,,
if i go ahead and save,,,
let's see something's not right here,,,
let's see so we set,,,
the box dot style background position,,,
to oh i forgot pixels so right now it's,,,
just setting it to the numbers,,,
uh we need to actually add in px after,,,
these,,,
pixels,,,
and there we go,,,
so right now we have the class,,,
i'm sorry we don't have the class of big,,,
so it's 500 pixels which squishes them,,,
all together and there's no in between,,,
but if i add the class of big it,,,
separates them but it's still intact now,,,
we just want to add an event listener,,,
onto let's actually get rid of,,,
no we'll keep the class there to start,,,
with but let's go back to our script and,,,
let's go up here actually we'll go,,,
and we'll do it right here so we'll take,,,
our button and we want to add an event,,,
listener so we want to listen for a,,,
specific event now this takes in the,,,
event we want which is a click,,,
and then a function,,,
so we can either put you know function,,,
or we can use an arrow function like,,,
this,,,
okay and,,,
uh we just want to,,,
we don't even need since this is only,,,
going to be one line of code we don't,,,
even need these,,,
curly braces,,,
so we'll just take the boxes container,,,
and,,,
take class list,,,
and then toggle,,,
so it'll add and remove the class of big,,,
so let's save that let's go over here,,,
let's click,,,
and there we go,,,
so we get that cool effect,,,
and just to show you let me just make,,,
this bigger because we're just about,,,
done,,,
if i show you in the console let's put,,,
this,,,
over here and,,,
if we look at this class right so you,,,
can see that the class of big is there,,,
if i click that it adds and removes it,,,
and that's what causes that effect,,,
and we have that rotate in the css,,,
right so,,,
right here we have this rotate which is,,,
causing that to happen we also have a,,,
transition of,,,
0.4 seconds you can increase that if you,,,
want or decrease that if you want a,,,
different speed but yeah so that's,,,
pretty much it,,,
all right so hopefully you enjoyed this,,,
little project and let's move on to the,,,
next one all right guys in this project,,,
we're going to create a hoverboard so,,,
it's just kind of a cool little effect,,,
we're going to paint these boxes onto,,,
the screen we're going to style them,,,
with css,,,
and we're going to basically set a,,,
certain number,,,
so right now it's set to 500 in the,,,
javascript and it's going to paint that,,,
number of boxes and then we're going to,,,
have event listeners for mouse over and,,,
mouse out so that when we hover over,,,
it's going to give us a random color,,,
okay so you can see if i hover over that,,,
it's blue then it's purple so we'll have,,,
an array of colors that we'll,,,
basically have to choose from for each,,,
box when we hover over it so it gives us,,,
this cool effect and this could be used,,,
for some kind of drawing application or,,,
something like that uh we'll be using,,,
css transitions so we have that cool,,,
fade out effect as well all right so,,,
let's go ahead and get started,,,
okay let's go ahead and start on this,,,
hoverboard project so in the html here,,,
let's change the title up,,,
to hoverboard and all we're going to,,,
have in this html is a class of,,,
container because in this container,,,
we're going to have a bunch of,,,
divs with the class of square,,,
like this in fact what i'll do is just,,,
i'll put some in here now but,,,
later on we're going to get rid of these,,,
because they're gonna get inserted via,,,
javascript and we're gonna set a certain,,,
amount of squares to be painted onto the,,,
screen so for now we'll just throw these,,,
in,,,
and let's jump into our style sheet,,,
and,,,
let's see for the body here let's set a,,,
background,,,
and i'm going to set that to 1 1 1.,,,
so i mean font,,,
doesn't really matter we're not having,,,
any fonts here if you want to add some,,,
text or something you can but i'm just,,,
going to get rid of all that we don't,,,
need it,,,
okay and then let's do display flex,,,
and we don't need column,,,
just to put everything in the middle,,,
we're going to keep this,,,
and then we have the container which,,,
actually,,,
gave it a class let's,,,
let's give it an id as well so id,,,
container because i'm going to use that,,,
for the javascript,,,
and then here let's say class,,,
container,,,
and we want to display,,,
flex,,,
actually before we do the container,,,
let's do the squares,,,
so i'm just gonna,,,
comment that out for a second,,,
and then let's add our square class,,,
and set a background color,,,
and background color i'm going to set,,,
this to,,,
hexadecimal 1d,,,
three times,,,
so,,,
let's see we can't see anything just yet,,,
let's add a box shadow,,,
of zero zero for the offsets,,,
two pixel,,,
blur and black,,,
okay and then,,,
for us to be able to see,,,
these squares we have to add a height,,,
and a width so let's give these a height,,,
and a width of 16,,,
pixels,,,
so we'll do height,,,
width,,,
of 16 good so now we can at least see,,,
the squares,,,
i'm going to just add a margin of 2,,,
pixels as well just pull them apart a,,,
little bit,,,
and we're going to want to transition so,,,
ultimately we're going to paint these on,,,
the screen and then we're going to make,,,
it so that when we enter,,,
it turns a certain color a random color,,,
and when we leave it,,,
it gets rid of that color we want that,,,
to happen at kind of with a little fade,,,
effect,,,
so i'm going to add a transition here,,,
for let's say two seconds ease,,,
and let's also set for the square hover,,,
so when we hover over it,,,
i'm going to set the transition,,,
duration,,,
to,,,
zero seconds so that we have an effect,,,
where,,,
when we hover over it,,,
it immediately lights up,,,
and then when we come off of it,,,
it will,,,
basically take two seconds for the color,,,
to disappear so it'll have that fade,,,
effect,,,
okay,,,
we're not going to see that just yet but,,,
we'll we'll get to that,,,
so the container let's see we want to,,,
display flex as soon as i do that it's,,,
going to display in a row and i just,,,
want to set align items to center and,,,
justify content to center,,,
and i want these to wrap so we'll set,,,
flex,,,
wrap,,,
to,,,
wrap,,,
we're not going to see a difference now,,,
because we don't have that many boxes,,,
but we want to give this a max width,,,
of 400 pixels,,,
okay so if it goes beyond that then it,,,
should wrap on to the next line so just,,,
to test that out let's take these and,,,
let's,,,
create a bunch of them,,,
and save and now you can see when it,,,
gets past that 400 pixels or whatever it,,,
will wrap onto the next line,,,
okay so that looks good,,,
um,,,
i think that's all we need to do for the,,,
css so let's,,,
clear out all of these squares,,,
because like i said we're going to paint,,,
them with the javascript depending on,,,
you know what we set for the amount of,,,
squares,,,
and that's all we need is just this one,,,
container so in the next video we'll,,,
jump into our javascript and we'll get,,,
started on that,,,
all right so now we have the fun part,,,
which is the javascript so let's jump,,,
into script.js and first thing we want,,,
to do is grab the container which is the,,,
only,,,
element that we have in the in the body,,,
so let's say,,,
document.getelementbyd and that has an,,,
id,,,
of container,,,
now,,,
we want to create,,,
an array of colors here because we want,,,
to we want these to be random colors,,,
when we follow along the squares so i'm,,,
going to just paste in some hexadecimal,,,
values you can use absolutely any colors,,,
you want they can be hexadecimal they,,,
can be rgb they can be,,,
color names whatever you want and then,,,
we want a variable here i'm going to,,,
give this just all caps here call this,,,
squares and then the amount of squares,,,
that we want to,,,
put on the screen which is going to be,,,
500 in this case,,,
i don't know why i put a semicolon i,,,
don't use semicolons,,,
so those are the variables we need and,,,
then the way we're going to do this is,,,
is create a for loop,,,
okay so we want to say four,,,
and let's let i equal zero okay so it's,,,
going to start at zero and then as long,,,
as i,,,
is less than whatever we have in squares,,,
and then we want to increment i by one,,,
so in here we're going to create an,,,
element so let's say const square,,,
and on the document object,,,
there's a method called,,,
let's spell this right document there's,,,
a method called create element,,,
and we can create any type of,,,
the dom element that we want i'm going,,,
to create a div,,,
and then i want to add the class of,,,
square so i'm going to take the square,,,
element and i'm going to say,,,
classlist.add,,,
and i want to add the class of square,,,
because that's you know the square we we,,,
styled this,,,
this uh square class and that's what we,,,
want to show,,,
now this isn't going to do anything just,,,
yet we want to take the container that,,,
we brought in and we want to append,,,
child because we want to insert this,,,
into the container,,,
and we'll pass in here square like that,,,
okay now,,,
if we save this you can see that 500,,,
squares have now been painted if i,,,
change this to 200 and i save,,,
now we have 200 so you can change this,,,
to whatever you want but we're going to,,,
go ahead and paint 500 squares and then,,,
what we want to happen is when we hover,,,
over these,,,
we want to,,,
basically have them light up with a a,,,
random color so inside this for loop,,,
let's take,,,
the square,,,
and i want to add an event listener so,,,
i'm going to say add,,,
event listener and pass in the event in,,,
this case is going to be mouse over so,,,
when we just hover over a square,,,
this is going to fire off,,,
and i want this to call a function that,,,
we're going to create that,,,
says that's called set color and we want,,,
to pass in,,,
that particular square,,,
all right we want to do the same thing,,,
when we leave so we'll have an event,,,
listener,,,
on mouse out,,,
so when we leave a square and then we'll,,,
call,,,
remove color,,,
okay and then let's go down here and,,,
let's create function,,,
set color,,,
and say element,,,
and just for now let's console.log here,,,
element so if i save that and i open up,,,
my console,,,
uh let's see remove color is not defined,,,
so i just need to define,,,
remove color,,,
element,,,
all right so now if i hover over a,,,
square you can see it's just gonna or i,,,
shouldn't say hover but if i mouse over,,,
it's going to call that,,,
all right if i,,,
come out of it it's going to call remove,,,
color so should i just do like console,,,
log one two three,,,
let me go over here you'll see that each,,,
time i get out of a of a square it's,,,
gonna fire this off,,,
all right so let's get rid of that and,,,
let's do the set color first so,,,
we need to have a specific color i'm,,,
gonna have a function called get random,,,
color because we don't want it to always,,,
be the same one,,,
so down here let's say function,,,
get,,,
random color,,,
and we want to return,,,
and remember we have that colors array,,,
and we can access like the zero index is,,,
going to give us this one then one two,,,
three four,,,
so i want to get a random index so,,,
inside here instead of hard coding a,,,
number i'm going to say math.floor,,,
because i want to round down and then,,,
math.random,,,
so math.random gives me a random decimal,,,
i want to multiply that by the length of,,,
the array so colors.length that way it's,,,
going to be somewhere in between,,,
zero and what four so zero one two three,,,
four,,,
okay in fact i can go ahead and,,,
console.log here,,,
the color and if i go over and hover,,,
you'll see that it's going to be one of,,,
those colors,,,
good so now we just need to set it to,,,
the actual square in this case the,,,
element because the square is getting,,,
passed in as the element so we can set,,,
the style let's set the style dot,,,
background,,,
and we're going to set that equal to,,,
whatever the color is,,,
and then also the box shadow let's set,,,
element,,,
oops element.style.box,,,
shadow you want to use camelcase for,,,
this,,,
and we're going to set that to let's use,,,
some backticks here,,,
and it's going to be 0 0,,,
2 pixels,,,
and then whatever the color is so in,,,
here we'll pass in the color,,,
and then another shadow so a comma 0 0,,,
10 pixels,,,
and then whatever the color is all right,,,
so if i save that let's close the,,,
console up and go over here,,,
and you can see wherever i go it's going,,,
to give me a random color,,,
so you could you could create like a,,,
drawing app with this you can make them,,,
smaller and,,,
you could add some other functionality,,,
to it i just want ev i just want them to,,,
disappear,,,
once we come off it because right now we,,,
can fill the whole thing,,,
i mean if that's what you want to do,,,
that's fine but i want to remove the,,,
color so what we'll do is when that,,,
remove is called we'll take the element,,,
and set the style,,,
dot background and we want to set it,,,
back to the original,,,
the original color of the box which is,,,
this right here okay so we're gonna set,,,
that equal,,,
to that color on remove and then set the,,,
box shadow so element dot,,,
style dot,,,
box shadow we're gonna set that to the,,,
original box shadow which is this right,,,
here,,,
so pass that in here,,,
all right so let's save that and now,,,
you can see i can go over and get a,,,
random color but it disappears and it,,,
fades out like that,,,
it takes two seconds to fade out because,,,
of,,,
this transition right here,,,
okay so if i if i take this transition,,,
off,,,
then it's just going to do this and that,,,
is kind of stupid so we want to leave,,,
that trail,,,
by doing that adding that transition and,,,
just like with any other project in this,,,
course i encourage you to add to it,,,
maybe have a some select a select box,,,
where you can choose different color,,,
schemes or something like that,,,
i'm sure that you can think of something,,,
this is a just a good,,,
template to create some kind of drawing,,,
application or something like that,,,
alright so that's it let's move on to,,,
the next project",,,
Hci9Bb4_fkA,"hey guys welcome to part four of
JavaScript under the hood in this video
we're going to talk about memory storage
now just to kind of reiterate what we've
already gone over in Parts 1 through
three we know that JavaScript is a
synchronous single-threaded language at
its core operations are executed line by
line we have a call stack that manages
our functions and execution context and
if we do have a blocking operation we
can then utilize certain web apis to
write a synchronous code so you should
understand all of that up to this point
now I I want to get into how JavaScript
stores data in memory so there's
basically two places we can store data
that's on the stack and on the Heap so
it depends on the type of value that
we're that we're storing if it's
primitive or if it's referenced so let's
go ahead and jump in and start to talk
about
memory okay so I just want to go over
memory management in general real quick
so when you use a a low-level language I
should say a relatively low-level
language like C or
C++ it's up to you as the as the
developer to allocate and free up memory
manually within your code and of course
this does make those languages a little
tougher to learn and work with however
they are extremely powerful now higher
level languages like JavaScript python
Ruby C these languages automatically
allocate memory when objects are created
and then it'll free up memory when
they're not used anymore and it'll like
I said it'll do this automatically so if
you create a variable and you don't need
it anymore there's nothing that you as
the programmer need to do in most cases
um it's just taken care of for you and
this process is called garbage
collection so JavaScript is what we call
a garbage collected language C is not
C++ is not and those me in those
languages you do have to manage your
memory correctly or you can get what are
called memory leaks now there are
certain situations in JavaScript where
you can get memory leaks uh like
unwanted references you can use the
browser Dev tools uh memory tab to
create what we call a heap snapshot and
help you fix any memory leaks and that's
going a bit beyond what I want to get
into here but at the end of this video I
will show you at least how to um go into
to the memory Tab and look at some
objects and so on now to understand how
data is stored in the JavaScript engine
we need to understand the data types or
I should say the types of data types um
so I know that a lot of you may already
be familiar with this but in JavaScript
we have primitive types and we have
reference types or objects now we have
seven different primitive types and
those are strings numbers booleans null
undefined symbols in the most recent
primitive type big int so these values
are stored directly on the stack and
this is called Static data and it's
static because it has a fixed size and
it doesn't change um the JavaScript
engine can allocate a a fixed amount of
memory space for that static data and
store it right on the stack now for just
about everything else that isn't a
primitive it's a reference type or an
object so this includes arrays objects
functions when you create any of these
their value isn't fixed right an array
or an object literal or whatever you can
add to that um so it's allocated more
space than it's actually needed so it it
can't be stored directly on the stack
it's stored in a much larger area called
the Heap or the memory Heap and when we
Access Data from the Heap we access it
through reference we don't access it
directly
okay so just keep that in mind that
primitive types like numbers and strings
they're stored directly on the stack and
then everything else is stored in a much
larger area called the Heap now because
of the way that data is stored and
accessed on the stack and the Heap and
our code primitive values and objects
can behave differently so I'm going to
show you an example in a few diagrams
here of of exactly what happens as far
as how and where everything is stored
then I'll jump into some code and show
you the the same thing so let's say we
create two variables with primitive
types so we have name which is set to a
string of John and we have age which is
set to a number of 30 now since these
are primitive values they're stored
directly on the stack so we have our
variable name called name and then our
string of John and our age with the
number of 30 now let's say we were to
create a reference type so we'll use an
object literal as an example so here
we're creating a variable called person
and setting it to an object with the
name of Brad and the age of 40 okay so
as you can see that value is not going
to be put right in the stack like the
Primitive types it's going to be put in
the Heap and then what happens is person
is going to reference that object okay
as opposed to the the value being
directly put on so now let's say we
create a a variable called new name and
we set it to name okay so name equals JN
up here what's going to happen is now on
the stack we have new name and we have
the value of JN now let's take that new
name and reassign it we're using let so
we can reassign it to Jonathan now
Jonathan is put on the stack but name is
untouched right it's still John so this
is where it can get a little bit
confusing with reference types so I'm
going to kind of do the same thing here
I'm going to create a value or a
variable of new person set it to person
and what's going to happen is it's going
to point to that same reference that
person points to okay the values are not
over here on the stack they're over it's
over here so it doesn't create a new
object uh with Brad and 40 in the Heap
it just references the one that's
already there so in that case if I were
to take new person and mutate it so that
the name is now Bradley it's going to
update that reference now since person
is pointing to that reference if I were
to console log person. name I'm going to
get Bradley and that might surprise a
lot of people because we didn't directly
change person we Chang new person but
they're referencing that same object so
now we'll jump into some code and do the
same thing but keep this whole diagram
here in mind while we're doing this so
let's first off I'll just comment this
um we're going to create some primitive
some primitive types and remember these
are stored on the stack and I do have
GitHub co-pilot enabled here so let's
say let name set that to John and we
don't really need the age but we'll just
add that anyway okay so we have our
primitive types now we want our
reference types which are stored on the
Heap so I'm going to create uh let's say
we'll just do the same example we'll use
person and we're going to set that with
a name of Brad and let's do age I wish
36 but we'll say
40 all right and then we'll just go
ahead and do a console log here of name
for now so of course we get John now if
I were to create a new variable let's
say new name and set it to
name and we look down here
at new name we get John and then if I
were to reassign this so we'll say let
new name and we'll set it to say
Jonathan and we get Jonathan but if I
were to log name that doesn't change
right because I didn't I didn't update
name and remember that this value is
stored on the stack now if we kind of do
the same thing with the object which is
a uh or the object literal which is a
reference type let's say let new person
and we're going to set that equal to
person okay if we come down here and we
log new
person we get our name and age if I were
to do just like just do name I get Brad
now if I take that new
person and then I mutate the name let's
say Bradley which isn't my real name by
the way it's just Brad
but you'll see now if I save of course
new person. name is Bradley because I
that's the that's what I updated but
remember stored the object is stored as
a reference that both person and new
person are pointing to so if I were to
log person name it's also Bradley and I
think that keeping in mind this right
here this diagram is really helpful
because you can visually see that
there's a reference here that both of
those variable are pointing to I think
without knowing that this can be a
little confusing because we didn't
update person directly we updated new
person however that points to the same
object or the same reference all right
so the last thing I want to do is just
give you a very basic intro into the
memory tab here in your Dev tools
because if you do oops let me just
delete this real quick so if you go to
this tab it should look like this now if
you do have memory leaks this is a good
way to bought them you can create what's
called a heap snapshot profile and it
will show how your memory is distributed
um uh distributed did I just say
distributed
distributed among your pages JavaScript
objects and also your Dom noes so
everything that has to do with your your
application the browser uh the window
the global window object will all be put
into this snapshot so we can come down
here and click take snapshot just takes
a couple seconds and then over here
you'll see all the different objects
that are in memory you also have the
shallow size and the retained size the
shallow size is the actual object and I
believe the retained size is like any
other objects that are associated with
it um now to kind of give you an example
of of creating a custom object and
looking at it in the the heat profile
here let's go ahead and create a
constructive function to create a person
so we'll just say we'll pass in a name
and then we just want to set this name
to name and then we can create person
objects so let's say person one is going
to equal a new person named John we'll
do two and we'll do three so
person three all right so if I save this
and we come over here and just reload
and then we'll go back to this screen
and let's take another snapshot
okay so now these three person objects
should be in here and I can filter right
here if I just type in person you'll see
that I have my person Constructor which
I just created here and it says times
three because I've I've created three of
them and you can see the shallow size
and the retained size uh if we hover
over it I believe yeah we can see the
actual
values we can see the Prototype op
object and if I over here it'll show us
where this was actually created can
click on it that takes us to our sources
tab which we looked at I think in the
last video uh which will show us the The
Constructor function all right so pretty
cool I mean if you have memory leaks it
should stick out because you'll have a
crazy amount of memory um but again I
don't know too much about this I don't
use it that much but I did want to just
give you kind of a brief introduction
and show you that it is here that you
can see some of the memory in your HEAP
all right so that's going to be it as
far as the series goes uh I do plan on
adding more videos I'm not quite sure if
it's going to be right now or I might
hold off a little while but uh I do
definitely want to do more of this stuff
and I am revamping my modern JavaScript
from the beginning as well that's that's
why I've been working with this type of
thing lately but uh that's it guys hope
you enjoyed it and I'll see you next
time",,
Fd9VaW0M7K4,"what's going on guys welcome to
javascript under the hood part two in
this video we're going to talk about
execution context now i just want to
kind of refresh what we talked about in
the last video and what you should know
up to this point so we know that
javascript runs on a single thread the
thread of execution and that thread is
synchronous at its core and any
functions that are going to be executed
are going to be placed on the call stack
which is a data structure that is
last in first out okay so it's important
to understand that up to this point now
we want to go a level deeper into
execution context all right so let's get
into it
all right guys so whenever we run our
javascript code whether it's in the
browser or in node.js it creates a
special environment that handles the
transformation and the execution of that
code and this is called the execution
context it's going to contain the
currently running code and everything
that aids in its execution
now there's a couple types of execution
context we have the global execution
context that's what's created right away
when we create when we run our script
and then we also have a function
execution context anytime a function is
invoked so to help you visualize this
environment just think of a box with
aside from memory which is going to be
where your variables and functions are
stored this is called the variable
environment and then you have your
execution which is you know going line
by line and executing your code now
whenever an execution context is created
there's two phases that happen and it's
really important that you understand how
these phases work so the first is called
the creation phase or the memory
creation phase the second is the
execution phase
so to visualize this you can think of it
as passing over your code twice so the
first is to create memory second is to
actually execute now the first thing it
does in the creation phase is it creates
the global object in the browser this is
called window and node.js is just called
global that's why if i go to any script
and i go in my console and type in
window it gives me my global object and
this has everything from
you know inner width and inner height
properties to the entire document object
so if you're ever wondering where this
comes from it's generated when the
execution context is created
now the second thing it does is it
creates the this object and it binds to
that window object that's why if i if
i'm in the global scope and i type in
this it gives me the same thing gives me
that global window object all right so
it does that and then it sets up a
memory heap for storing the variables
and function references in your script
or in your function okay now when it
stores these it does store the entire
function but when it comes to variables
it stores them as and sets them to
undefined okay so if we go back to this
box here during the creation phase it
will store the entire function but for
single variables it's going to store
them as undefined first and that's
important to know
when it comes to hoisting which i'm
going to talk about in a little bit
all right so that's the memory creation
phase then we have the execution phase
where it just goes uh line by line
executes your code and then whenever it
hits a function
um
whenever we invoke a function it'll
create a new function execution context
so what i want to do now is go over a
block of code and show you exactly
what's happening through the creation
phase and the execution phase and i use
var for a reason i'll talk about that in
a little bit when we get to hoisting
so remember the creation phase runs
first so it's going to go through all
our entire script and just put
everything into memory so line one it
sees we have a variable called x it's
going to allocate memory for that and
the heap and it's going to store it as
undefined because it's a variable next
it's going to look at y it's going to
store that as undefined then line 3 is a
function so remember functions they do
actually get stored the entire function
will get stored all right next we go
down to
line seven sum one is going to get
allocated stored as undefined same thing
with sum two all right so that's the
entire creation phase then we're gonna
start on the execution so it's gonna go
back to line one and it's gonna place
the value of 100 into the x variable
then on line 2 it's going to place 50
into the y variable
it's going to skip when it gets to line
3 it's going to skip that func that
function definition because there's
nothing to execute but then when it gets
to line seven it invokes the get some
function now remember whenever we invoke
a function it creates a new function
execution context so now we're gonna go
into that so you can kind of think of it
like this we have our global execution
context and then inside that is our
function execution context and at this
point the get sum function is going to
be on the call stack all right and we
talked about that in the last video
so we're going to start off with the
creation phase for the function it's
going to take n1 and n2 which are
arguments but they are variables so
they're going to get stored and set to
undefined and then the sum variable will
also get allocated and stored as
undefined then the execution phase for
the function will start so it's going to
assign n1 and n2 to
150 because we passed in x and y which
are 150.
then it's going to do the calculation on
line 4 and it's going to put it into the
sum variable
and then it's going to return from the
function execution context to the global
with the value of
150 or some
okay so then it will take all that put
it into the sum one
in memory and then we move to line eight
and we do the whole thing over again all
right so we hit a function we go ahead
and uh have a new execution context with
the creation phase and then the
execution phase so hopefully that gives
you an idea of how this all works well
so now what i want to do is jump into
the browser and do the same thing so i
have the code here the exact code we
were just looking at and i'm going to go
to sources
and what i'm going to do is press place
a breakpoint at the very beginning of
the script okay and over here we'll see
the call stack we only have one function
so we'll just see that but we what we
want to really pay attention to is this
scope right here so what i'm going to do
is just reload the page
now nothing has executed because i put a
break point here so everything is paused
however the creation phase has run
and remember the creation is going to
put our variables into memory as
undefined and it's going to store the
the entire function so now over in scope
you can see we have global
so and that's that's our window object
and if we look for the function of get
sum there it is it's right here
and the entire thing is stored the
entire function if we hover over it we
should see that it's um
yeah that it's stored as well but if we
look at any of these variables so
undefined x and y now they are here if
we go come down
we should see x and y yep right here but
they are undefined so at this point the
creation phase has run now we're going
to step through and go through the
execution and you'll see the same stuff
will happen as we as i showed you in the
slides so if i go if i run that piece of
code it's going to store 100 in x so now
if i come up here i wish this wouldn't
change but i've defined it again so now
y is still undefined because it hasn't
executed it's only gone through creation
but x is set to 100 okay now if i click
this arrow again
now y should be set to 50.
so let's go up here and
find y
yep so now x has 100 and y has 50.
now if i go ahead and click this arrow
again it's going to
run this line right here which is the
get sum function so now if we look at
the call stack you should see get sum is
now on the fault in the fall stack the
call stack
and we're now in that execution context
okay so if i come up here in addition to
our global scope we also have our local
scope
and you can see we have n1 and n2 are
set to 150 but some is still undefined
because it hasn't been executed if i
click this again
and we go back up
to our local scope now you can see that
sum is
assigned 150.
so now what i want to do since we we now
know about the execution context you
understand that there's a creation phase
and then an execution phase variables
function gets stored now i want to talk
about hoisting so hoisting is often
referred to as the process where the
interpreter appears to move the
declaration of your functions and
variables to the top of their scope or
to the top of the page prior to the
execution of the code so this is a
pretty elementary explanation of
hoisting now that you understand the
global execution context and the
creation phase you can understand how
hoisting works so let me show you
exactly what i mean
so in javascript we can take let's see
let's just let's get rid of this
and then
actually get rid of that too so i can go
above my function call right here and
even though i created the get some
function below it i can still call it
here in fact i'm going to wrap it in a
console log because it doesn't actually
have any output
so let's say console.log getsome and
then i'm going to just remove this
breakpoint for now and go to the console
and let's reload
whoops we need to pass in
let's pass in x and y
okay so now we get 150. now the reason
that this works should be pretty clear
so
if if you don't understand it just stop
and and think for a second
what what execution context does it has
two phases has a creation phase it where
it adds all of your functions in your
script to
uh an area in memory in the memory heap
and it also adds variables but it sets
them to undefined so the entire function
is in memory before the script is
actually executed before the execution
phase that's why we can use it now a lot
of definitions of hoisting it makes it
sound like the interpreter physically
moves the function to the top of the
page or to the top of the script and
then you can access it so i i don't
really like to explain hoisting without
explaining uh execution context and the
creation phase because i think that
really puts it in perspective into
perspective and and lets you know how it
works so with that said what do you
think happens if i come up here and then
i console log x before i actually define
it
i get undefined the reason for that is
because it's already stored in memory as
undefined
because of the creation phase
now as a lot of you probably know when
you use var var is treated different
than let and const because let and const
are block scoped so i'm going to go
ahead and change this to let and let's
see what happens
so i'm trying to log x which i defined
here with let before i actually defined
it and i get an error that says cannot
access x before initialization
all right so to kind of show you
why this happens i'm going to come back
to the sources tab and let's just get
rid of the console log
and then i'm just going to change this
to let as well
and let's go ahead and
again i'm going to put a breakpoint
up at the top here
and then i'm going to reload
and let's see what happens so we know
when we used var
our our
variables were stored as a set in the
memory as undefined but they were put on
the global scope right so now you can
see that there's another scope here
called script and x and y are set to
undefined if i come down here
there's no x and y on the global scope
that's why it can't find it so it's
actually put in a separate area now
there are some articles and even some
videos when talking about hoisting it
says only functions and and variables
that use var are hoisted that's not true
as you can see right here they are
hoisted they are set to undefined
they're just not accessible and rightly
so you don't want them in the global
scope that's why they're block scoped
and lat and const were introduced into
es2015 for a reason we wanted block
block scoped variables like just about
every other programming language all
right so
as far as how they're stored they're
stored in something called the temporal
dead zone which i know it sounds kind of
like a science fiction movie but i have
a
diagram here it's not that great but it
just shows you how var and let are
different i should say let or const now
var you know creation phase we have it's
put into memory is undefined and it's
directly accessible with let our cons
it's not so we have our creation phase
and then it's in the temporal dead zone
where it's not accessible and then once
it's assigned we can go ahead and use it
all right now even though i mean this is
just kind of my my personal advice but
even though you can do stuff like this
you can define your functions down here
and you can call them above it i
wouldn't recommend it um there's really
i can't think of any good reason to do
it so i i would suggest doing it like
you would with any other language where
you have your declarations for your
functions and your variables above where
you're going to use them
all right guys so hopefully this gave
you some insight into the execution
context and the two phases
hoisting so in the next video we're
going to look at how a synchronous
javascript works under the hood",,
7aRjGIhwyQM,"[Music]
hey what's going on guys in this video
we're going to set up a linux server an
ubuntu server from scratch and we're
going to be deploying a mirnstack app to
production now there's a lot of
different ways and there's a lot of
different services that you can use when
it comes to hosting and there's certain
platforms that can take some of the work
out of it for you however the downside
with that is you don't have complete
control over the server so i really want
to just dive in here and not just show
you how to quickly deploy a mirn app
this isn't like uh you know deploy your
app in two minutes type video we're
gonna create a server we're gonna set up
some ssh keys
create a user we're going to get our
files onto the server with git we're
going to set up nginx we're going to set
up a process manager to run our node app
so
it's going to be maybe 30 40 minutes and
as far as a server we're going to be
using lenode which is a cloud hosting
provider and we're going to set up a
linux ubuntu container although if you
want to use a different distro that's
fine i'll be using ubuntu and lenode is
actually sponsoring this video however
the process is the same for any ubuntu
server whether it's from some kind of
cloud service or your local machine
whatever it is and we got lenode to give
us a 60-day 100 credit so that you can
follow along with me absolutely free
you'll get to use lenode for a couple
months you can experiment install
whatever you want on your servers so uh
you can again use that use your own
machine use a different service whatever
you'd like so i just want to just
quickly go over the plan for this video
i do have a gist in the description that
has absolutely everything it's basically
a text version of the video it has all
the commands we're going to run so you
can use that as kind of a supplement but
just to quickly go over the plan here
first thing we'll do is set up a server
and again i'll be using lenode with the
ubuntu distro but if you want to use
something else that's fine
then we're going to set up some ssh keys
so we have to generate some keys on our
client machine and we have to add the
public key to the server and we're going
to log in using ssh keys as opposed to
using just the password
all right then we're going to create a
new user because i don't want to use the
root user so i'll show you how to create
a new user for the server then we're
going to get our app files onto the
server using git and the application
that i'm going to deploy is the goal
setter app that we built in the mern
series that i did about two months ago
if you want to deploy something else
that's fine but i'll show you how to how
to deploy this application and we'll
install any dependencies we'll set up a
mongodb database real quick in atlas and
then once we do that we need to set up
the pm2 process manager to manage um the
running of the application okay so
we'll get it running on whatever port
5000 then we want to set up a firewall
to
block any ports except the ones that we
need which are going to be the http port
https and ssh okay and then finally
we'll set up and uh configure an nginx
server and we'll set up a proxy so that
we can access our app through port 80
which is the http port all right and
then also show you how you can add a
domain through lenode obviously this
this process is going to be different
depending on what you're using what
services but i will talk a little bit
about that afterwards as well all right
so that's it let's go ahead and get into
it
all right guys so this is the gist that
i was talking about and i'll have the
link to this in the description and it
basically has everything all the
different commands that we'll be running
throughout this video so you can use
this as
a supplement to the video
and then this tab is the mirn tutorial
repository it's the goal setter app that
that i did in the the mern series
so that's what we'll be deploying and
then we're going to need a mongodb
database so we'll just quickly set up an
atlas database later on but first things
first we need to set up our server like
i said i'm using lenode but you could
use anything you want
and this link right here is actually
lenode.com
traversie which as i mentioned will give
you a hundred dollars credit so you can
you know follow along with this tutorial
absolutely free if you want so i'm just
going to log in here with one of my
accounts and then in the dashboard we're
going to see this is where you see your
list of what are called the nodes which
are basically just linux servers and i
want to create a new one so i'm going to
click this button here and you can
choose from all different
all different distros here i'm most
comfortable with ubuntu so that's what
i'm going to use i'm going to use the
22.04 long term support and then the
region closest to me i'd say is new
jersey and then as far as packages i'm
going to use the dedicated 4 gig okay so
this is
uh it has an hourly cost but it it caps
off at 30 a month and remember if you
use that link you have a hundred dollar
credit so you have a couple months
and then for the label let's just change
that we'll call this youtube
dash
just call it youtube dash linux
and then the root password so this is
going to be the password for your root
user so let's go ahead and add that
and then for ssh keys
i'm going to show you how to set this up
you don't have to do this you can just
go with the password but it is a bit
more secure if you set up ssh keys and i
just want to show you how to do it so i
do have one stored called windows pc but
i want to create a new one for the
machine that i'm on right now
so if i click add an ssh key i get this
text box here and it's asking me to put
in a public key so you have to generate
your keys on your your machine so i'm
going to open up a terminal here
and
before we generate a key i just want to
show you where they're stored so they're
typically stored in your home directory
whether you're on mac or windows and
then in your
it's a hidden folder called dot ssh so
if i list out here let's say from my
home folder slash dot ssh you'll see i
have a couple here for github okay and
it's going to be a private key and a
public key that's what we're going to
generate
if i wanted to i could use this public
key but i like to keep things separate
so what we'll do is let's go ahead and
run ssh dash keygen
and then what that's going to do is ask
us where we want to save it and what we
want to call it so by default it's going
to be like i said in your users folder
and then dot ssh and by default it'll
call it id rsa now i want to change that
so if if you want to call it something
different you have to put the whole path
here so we're going to do
let's say slash users slash and then
obviously your path will be different
and then dot ssh and i'm going to call
it id underscore rsa underscore lenode
all right and then you can put a
passphrase if you want i'm just going to
hit enter and not use one all right so
now if i do an ls in the ssh folder
you'll see now i have a
private key and then the public key has
the dot pub
all right now the public is what we want
to put in here so there's a couple ways
we can grab it i'm going to use the cat
command which will just kind of print it
out in the terminal so i'll do cat and
then let's do from the home till day is
just a shortcut for your home directory
and then dot ssh slash
id underscore rsa lenode and then dot
pub okay make sure you get the public
key
so it's going to start with this ssh rsa
we want to grab from there all the way
to the very end
and we can just copy that right from the
terminal and paste that in
and i'll just call this mac pro because
that's the machine i'm on
so go ahead and add that now you can see
that it's in there
and that's it we just click on create
lenode
and what it's going to do now is just go
through and provision everything
it usually takes 30 to 60 seconds so i'm
just going to pause the video and wait
until this says running before we move
ahead
okay so now you can see the status says
running and what we have here is our ip
address we have our ip version 4 and 6
and then to log in via ssh we can do
this okay that will log in as the root
user and then down here it's not
available yet but once your server is
running for a little bit you'll see some
analytics here you'll see some network
stats your storage
backups so if you want to take backups
you can get an exact image of a certain
point and then you can revert back to
that exact point if you need to and then
there's all types of stuff over here
volumes node balancers firewalls but
we're not going to really get into
lenode specific stuff because you could
you could do what we're doing here on
any any server
so let's go ahead and try to log in so
i'm going to open up go back to my
terminal here
and
you can see here the ssh root so that's
what we want to do is log in as the root
user so we'll do root at and then
obviously your ip address will be
different than mine so make sure you put
yours
so minus 79158.102
and you'll get this message the first
time you try to log in just say yes or
type in yes and it's going to ask for
your root password that we just we just
set a few minutes ago
so i'm going to
add that
i think that was it
yeah so now we're logged in and if you
want to just use passwords like we just
did that's absolutely fine but what i
want to show you is how we can use our
ssh key and not have to type in a
password in fact i want to disable
password authentication altogether to
make it more secure that way you can
only you can only access the server from
your client
so i'll go ahead and just clear this
stuff up and
one of the first things i like to do
when i set up a new server is just
upgrade my packages
so
if you're logged in as a another user
that's not root usually you would do
sudo
since we're logged in as root we don't
have to
and we're going to use the we're using
the aptitude package manager which is uh
the debian uh you know debian ubuntu
package manager so we just do apt and we
can install packages like this like if i
wanted to install curl or something
so what we're going to do is just run at
apt update
and that's going to update our package
lists
to the most recent and tell us basically
we know how many packages can be
upgraded and you'll see right here 48
packages can be upgraded so now i'm
going to go ahead and run apt upgrade
and i'll say yes
and then this can take
like one or two minutes to do this
so i'm just gonna pause the video and
i'll be back when it's done
all right so now that that's all set i
want to create a new user and you can
see we're logged in as root it says root
at localhost but you can also use the
command who am i and that will always
show you who you're logged in as so to
create a user we can just use the add
user command and then whatever we want
to call it i'm going to call the user
brad
and that will create a user we want to
add the password that we want to use
okay and it's going to ask for some some
information but you can just enter
through all these
yes all right so now we have that user
and if i do id and then the user name
it'll show me the user id along with any
groups that that user belongs to
now
i want this user to to be able to run
commands as
with root privileges so we want to put
it in the sudo group so we can do that
by saying user mod we want to modify
this user and then dash lowercase a
uppercase g
and then we want to put the
pseudo group and then the name of the
user which for me is brad all right so
now if we do id brad again it should say
sudo
all right now
as far as the ssh keys go i want to be
able to log in as this brad user with
ssh keys and the one we added was for
the root so we actually have to add our
public key for for this user for every
new user you create now every user has a
a directory in the home directory so we
want to cd into slash home slash brad or
whatever whatever you called the user
and then from here we want to have a dot
ssh folder just like we have on our
client so i'm going to make a directory
and i'm going to call it dot ssh
and then we're going to cd into dot ssh
and then from here where we want to put
our public key as a file called
authorized keys so we can create a file
in linux with the touch command so we're
going to say touch authorized
underscore keys
okay so now if i do an ls we should see
that file and now we want to edit that
file and i'm going to do that with a
text editor called nano so i'm going to
say nano and then authorized keys
oops
authorized keys
and now i'm in that file so and it's
obviously empty because i just created
it now to get the public key i'm just
going to open up a new terminal just say
new window here
and from here i'm going to do the same
thing where we use the cat command to
get the key so i'll say cat and then
from the home directory and remember
this is my local machine this is not the
server so my home directory i'm going to
go into dot ssh
and i want the id underscore rsa
underscore
lenode and i want the public key so we
want to put dot pub
okay then we can go ahead and just grab
this
just make sure you copy it correctly
from front to
front to back or front to end so we'll
copy that and then i should be able to
just paste that in here
yeah and then we'll just go ahead and
command or control x and then hit y to
save and then enter
all right then we can close this one up
so now we have the keys in in that file
so before we move on i want to disable
password login and this is optional you
don't have to do this but it is a good
security measure to take
so we're going to edit a certain config
file actually i don't need sudo because
we're in root but let's say nano and
then the file is going to be in slash
etc
ssh slash sshd underscore config which
is like the ssh config file
and i'm going to page down here
and i'm looking for that right there
password authentication which is set to
yes right now
so i want to set that to no
all right so we can set that to no and
then there's also this right here permit
root login so sometimes people will set
this to no so that it's it's not even
possible to log in as root but i'm just
going to keep it at yes and let's do a
controller command x hit y and then
enter
and now we have to do is just restart
the sshd service so we can do that with
system
ctl
and we want to restart
sshd
okay
so now
we should be all set to log in as as
brad
with our ssh key so i'm going to go
ahead and log out of the server with
logo
and now you can see i'm back on my local
machine brad traversing at mac pro and
now i'm going to try to ssh in
but i'm not going to use the root
account i'm going to use my new user my
brad user
so you're probably going to see this
permission denied and when you get this
i put this in the
the gist here so basically we have to
run two commands one is to start up the
ssh agent and one is to add the the node
key to that ssh agent all right so let's
go back here and let's say we do this
with eval
and then
some backticks ssh dash agent
and then dash s and we should get back a
process id
okay that's not really important to us
but that's what we get back and then we
can do ssh dash add
and we want to add let's see from
the home directory remember i'm on my
local machine here so home directory dot
ssh and we want id underscore rsa
underscore lenode and that's our private
key
so it says identity added now let's try
again
to log in with the brad user and there
we go so now we're logged in we didn't
have to enter any password and you can
see it says brad at localhost localhost
is is the name
that's configured with my server i can
change that if i wanted to
all right so let's clear that up and now
we're in the server logged in as brad or
whatever whatever you used
so before we get our files onto the
server to deploy we do need node.js if i
do a node
version we're going to see command not
found because node is not is not
pre-installed there are images that you
can use with lenode to get stuff
pre-installed but i usually prefer to
just start from scratch
so to install node is obviously a little
different than we would do on windows or
mac because we don't have a gui right so
we have to do it all from the terminal
but it's it's not difficult at all it's
basically two commands so the first one
is a curl command
and you can see this this deb node
source this is for version 18.x so the
latest version and just to show you
where i got this from if we just search
for node.js
install debian
and click on this link you'll see all
the different linux or all the different
operating systems here and if you see
you can see this debian and ubuntu
and then if you click on node.js binary
distributions takes you to this this
readme file here and then installation
instructions and it just shows you the
commands for each version of node so
obviously we want the latest version
that's where i got this all right so i'm
just going to grab that curl command and
let's just copy that
and we can close this up
and then i'm just going to paste that in
here
put our password this is your new user
password not the root
all right so now since we did that we
should be able to now just do um
use apt so no
not node sudo
apt
install and let's just add dash y here
and then nodejs
so this will install both node.js and
npm if you see this screen just hit
enter twice
okay so now if i do a node dash version
it'll show that if i do npm dash dash
version
you should see that as well
all right cool so now that we've done
that we want to deploy this this goal
setter app this mirn tutorial repository
so
what we're going to do is clone it with
git
and git should already be it's already
on the system so if we do
get version you should see that it is
installed and then
right here under code i'm going to go to
clone and
you could set up your ssh key on the
server for github but i'm just going to
use https so i'm going to copy that that
url
and then we're just going to
figure out where we want to put this app
on on the server so right now we're in
the our home directory which is empty
uh so what i'll usually do is create a
new directory called like sites so we'll
do that and we'll cd into sites and then
from here we'll run git clone and then
i'll paste in the link i just copied or
the url i just copied
and let's run that and now if i do an ls
in my sites folder i now have the mern
tutorial so i can cd into mern tutorial
and if i do an ls we should see the
files and folders
now you have to go to the project and
kind of follow the steps to to get going
now this is a mirnstack app so we do
need a uh mongodb database and you
can see it says rename the env example
to dot env and add your uri
so the easiest way to create a mongodb
database is using atlas
which allows you to create a mongodb
database in the cloud so i'm going to go
ahead and log in with an account that i
just cleared up for this
i think it's this this account here
and i just cleared everything out so if
you don't have an account just create
one
mongodb.com and now
it probably asks you to create an
organization which i already have and a
project which i already have called
traversing media and then we can create
a database so i'm going to say build
database
and this is absolutely free if we use
the shared account so let's choose that
we're going to just leave aws as the
provider
cluster 0 as the name and then create
cluster
okay once we do that we can just add a
user i'm going to say brad1234
password i'll do the same thing
and click create user
already exists
oh oh wait a minute
oh i forgot i already had that user okay
we'll just just create a new user looks
like i already have one and then here
this is really important because we need
to specify where we want to access the
database from
so we're using a server that's in a
cloud environment so i'm going to choose
that
and then right here under ip access list
we'll click configure and then we just
want to grab the ip address of the
server
okay we want to let we want to let atlas
know that this it's okay to use this
database from this ip address and you
could add a comment in here if you want
add entry
and we should be all set if you're
working from your local environment as
well you might want to add your current
ip address but i'm not i don't need that
so i'm just going to click finish and
close
and we'll click go to databases
and then this animated border this is
just telling us that it's setting
setting everything up this can take like
one or two minutes or one to three
minutes as it says all right so i will
be back when this is done
okay so now we're going to do is click
on browse collections and you would see
any data in your database here obviously
we don't have any but i'm going to click
add my own data because i want to create
a database with a specific name and i'm
going to call it goal setter all right
and then the collection name if you want
you can add a collection we'll create
the goals collection and this isn't
mandatory but i just want to specify a
database name otherwise it'll just
create uh it'll create one called test
and it'll use that
so let's click create
and then we're going to go back to
overview and then click connect and then
from here we'll say connect to our
application and we want to copy this
string right here now there's a couple
things that we need to change here so
what i'll do is just open up
let me see i'll just open up a new
sublime text file doesn't really matter
and i'm going to paste this in
and there's just a couple things that we
want to change here one is going to be
the password so this brackets password
you want to change that to the actual
password and then after the slash we
want to put the the name or like i said
it's going to use tests so the name is
goal setter
and that should be good so now that is
what we want to use so we want to whoops
oh
we want to copy that
and we can close this up and then if we
look at the github
uh readme here it says that we need to
add it to the the dot env
okay we have to rename env example now
we don't see in the example here because
it's hidden it starts with a dot so it's
a hidden file but if we do ls dash a we
can see hidden files and you can see
env or dot env example so we can rename
that with the move command mv so we'll
say mv and then dot env
example and we want to rename that to
just dot env so now if we do an ls-a
again we have that dot env file and
that's what we want to edit so let's say
now we have to do sudo so sudo nano dot
env
and now a couple things we want to
change first is going to be the
the environment here i want to change
that to production
so development we're going to change
that to production
and then we want to put our uri here
so let's get rid of that and then we
should be able to just
paste right in
okay there we go i know it looks a
little weird but it is there if i come
over
you'll see that the whole thing is there
so now we want to command or control x
hit y to save and enter and now that
should be all set
so we also need to install our back end
dependencies and our front-end
dependencies
so that's pretty easy let's go ahead and
right now we're in the root so that's
where we want to run npm install or npmi
and that installs all the back end
dependencies like express and mongoose
and anything else that we used in the
api or in the back
end and then after that we can cd into
the front end and install the front end
dependencies so let's do that cd
into front end
and run npm install
now the way that this works let's just
take a quick look at the code in this
the back end server js that's the entry
point on our server
so if we're in production
right here it's going to check and see
if we're in production then it's going
to look for the the react build folder
which is going to be in front end build
because you know when you build a react
app you run npm run build and it creates
all your static assets in that build
folder so what we're saying here is if
if we're in production and we hit any
route we're going to
uh we're going to display the index html
that's in that build folder so we're not
running like the react dev server or
anything in production that's that's for
development
um if we're in production we're just
we're using the built assets so we do
have to run npm run build from the front
end so the dependencies are installed
now we'll just go npm run build make
sure you're in the front end on your
server
and that will create this
this front-end build folder and then the
server will look for that
okay so creating optimize and there's so
many different ways to do this
you can set it up so that this runs
automatically i mean
what i'm showing you is just kind of the
bare bones
um just so you can learn that and then
you can look for you know
more complicated stuff later
or more complicated setups i should say
once you get everything set up it's easy
i mean once we we do all this
all we really have to do is is push to
our repo and push to production
so let's clear this up now
if we cd dot dot back into the root of
our app and we run let's say npm start
we can see that it's running on 5000 and
if we were to go to i'm just going to
copy the ip address
obviously yours is different
and then if we go to
that if we if we don't put in the port
it doesn't work right because that's
port 80. but if we do colon 5000
there it is is our app
now there's a couple problems here one
we don't want users to go to port 5000
and and just pretend this is a domain
you can add a domain easily but we don't
want users to go to 5000 we also don't
want to have this running like on our
client if i stop this
you know if i stop this here and i
reload it doesn't work so that's where
pm2 comes in which is a pro
process manager for our application
all right so to set that up we want to
install it globally so let's say sudo
and then npm install dash g for global
and then pm2
okay so basically this is going to
handle starting stopping restarting
showing us the logs all that stuff
so to start up our application we simply
do pm2
start and then our entry point which is
backend slash server
dot js
all right so now you can see
it has an id of zero the name of this is
server right so if we want to like
uh
stop it we would do pm2 actually i'll
just show you we can do pm2
and stop and server
and now you can see the status is
stopped so i'll start it back up pm2
start
server
now it's online and if i go to
local not localhost this
ip5000 then it works
but we still have the issue of this
being port 5000 so that's where engine x
comes in
um but before we install and set up
nginx i'm going to enable the firewall
because we don't even want people to be
able to go to port 5000 or any port
aside from 80 443 and 22 because that's
http
https and ssh
so we already have a firewall
with linux ubuntu and it's called ufw so
we can say sudo ufw enable
and we'll say yes to that so now the
firewall is active if i come back over
here and reload
even though my app is running it's not
going to work because we're not we can't
access any ports right now okay so
everything is closed
so to open the ones we want
we can just we can put in either the
port or we can put in the name of the
service that runs on that port
so for instance we can do ufw allow
and then ssh
so that will add that rule or open that
port we also want http
and we also want https
okay so now what we need to do
is install nginx because that's what we
want to use for our web server we want
to have a proxy that allows us to access
our application
that is initially running on 5000 to
access it through port 80 which is the
http port which is the the default port
when you don't add you know colon
whatever
so let's install nginx we'll say sudo
apt install
nginx
yes
okay so that is we just want to hit
enter here twice
so now it's installed but we have to
configure it so there's a file we need
to edit so we'll say sudo nano and this
is going to be
etc
nginx slash and then sites
dash
available and then slash default
okay we're just going to page down here
until we see this server block so server
and then some
open parent curly braces
and down here
you'll see this location block and also
server name
now later on when you add a domain
whatever domain you choose you want to
put here so
i have a domain for instance called
app002
so i'll put that here we want to do that
we also want to do the www version so
app
002.dev
okay now as far as the location
this block right here
let's just get rid of all this stuff
and then in that gist i have
i have what you need to put in here
so let's go over to the gist
and
we already did all this
this right here so we want this proxy
pass
and that's where we put the local hose
5000 that's where our port is our app is
running and we want to add this the rest
of this stuff for our proxy so what we
can do is just copy this everything
that's inside of that
that location and then let's
come back over here and we should be
able to just paste that in between the
curly braces
and we'll just bring whoops we'll just
bring that back
alright so that should do it as far as
this file goes so let's go ahead and
commander control x hit y and enter
and now we just want to restart nginx
and if you want to check the
configuration you can do that with
nginx
t and it says that the syntax is okay
the test is successful and now we just
want to restart nginx we can do that
with sudo service
nginx
and then we just want to restart
all right so we should be good if we go
back over here and we go to just
just the domain not
port 5000
there it is
okay so our application is now deployed
and you can add a domain name through
lenode or through whatever you're using
but let's go ahead and just register a
user here we'll say john doe
john at gmail
oops
and let's submit
there we go welcome john doe just ignore
that thing
goal we'll just say goal
1
there we go we can add a goal we can
remove it we can log out
so now it's deployed now as far as
domain names if you are using lenode you
can go to
domains
and actually already have
two here but actually i won't delete it
but if you click create create domain
you just put in your domain
and then you can choose insert default
records from one of my nodes and then
you can choose the node you want to use
that domain with all right then it will
show up here and if you click on it
it'll show you all kinds of stuff like
the name servers the uh a records
all that stuff
um
actually this isn't for that you know
what i'm just going to delete this
i'm going to delete that and
say create domain i'm going to use that
you just need to enter an email address
too and then i'm going to choose the
youtube linux
now these name servers ns1 through
ns5.lenode you would put in your domain
registrar so for instance i use
namecheap
[Music]
so you would just log in and find your
domain which is this one right here
click manage
and then right here it says name servers
i could say custom dns
and i could add in ns1
so we actually need five
so we would do that and then
let's see that would be two
oops
three
four and five
and click the check
and then that's going to take a little
bit to propagate as you can see here up
to 48 hours so you might have to wait a
little bit but it should uh it should
connect and then as far as ssls you
could
like from name cheap you can see i have
a ton of them here um
you could purchase one and you could
install it or an even easier way and a
free way is to use let's encrypt and i
actually included the commands down here
for that as well
okay so you should be able to run these
and and create an ssl absolutely free
but yeah i mean that's it
there's a lot more to you know
deployment and devops but
i'm not gonna obviously get into it in
this video i think that this is a good
it gives you a good understanding of the
basics of you know how to set up a
server and so on um you can get into
like docker and using containers and in
kubernetes you can see there's actually
a
you can use kubernetes with lenovo as
well
um you can set up databases as well we
use something different like we used a
third-party database with with
atlas but you can set it up through your
terminal or you can even do it through
the interface here
alright guys so hopefully you enjoyed
this and learned something from it and
i'll see you next time",,
vxqBm6_0vyk,"[Music]
what's going on guys so in this video
we're going to be looking at pi script
which is a new framework that allows us
to
write python and use python packages
within the browser within our html which
is really cool now i have seen some some
memes on twitter and some youtube videos
saying you know is this going to replace
javascript or is javascript doomed and i
really hope nobody believes that because
we're not going to be using this for the
same stuff we use javascript for like
basic front end dom manipulation
fetching data from a server and
displaying it etc
where i see this being really valuable
is with like data science and bringing
those powerful python packages like
pandas and and numpy being able to use
those within a browser environment i
think uh is going to be really useful
and really powerful all right so it is
an alpha it's it's very very new um
there's not a lot of content on it so
this isn't going to be like a full crash
course where we build a larger project
we're just going to mess around with it
so if we go to pi script.net you'll see
that we have some html tags and then
there's a pi script tag and inside that
you can write any python you want just
like you can write javascript within a
regular script tag and to get set up
there's there's an install button but if
you click on it it says just kidding you
don't need to install anything and you
do need to include this this pi script
js
all right and then there's also a pi
script css which i believe is just
tailwind it has all the tailwind classes
and then of course you could download
those files if you want
and if we come down here it tells us a
little more about how this works and it
works using webassembly or wasm along
with this piodide so piodide is a python
distribution for the browser and i
believe node.js as well and it's based
on web assembly so it makes it possible
to
to run python and install python
packages in the browser and it uses
something called micropip
so
some bullet points here just to quickly
go over
so external hosting application hosting
there's no reliance on server side
configuration okay so python in the
browser we can use the python ecosystem
we can install different pat or use
different packages
python with javascript i thought this
was pretty cool it has bi-directional
communication between python and
javascript objects and namespaces so you
can actually write python code and
javascript code right right with each
other
which felt a little weird but i can see
that being really useful and and you can
even access uh you know browser web apis
with python
so environment management you can define
what packages you want to use and what
files you can have multiple files um
visual application development there's
ui components like buttons and lists and
containers
so yeah i mean like i said there's not a
lot of content on this but if you go to
this link here project home on github
and then you go to pi script js and then
examples there's quite a few examples
here to get you familiar with like how
this works and that's what i did i just
cloned this onto my machine and i just
went through some of these and a lot of
these use other packages like bokeh and
d3
what else numpy
and then there's also this to do html
and this is kind of how i saw
how we can actually
use the dom for with python so if you
can see here there's an input and then a
button and this button has a has this
this pys on click which points to an add
task function which is a python function
and if we go into to do dot pi you can
see
the add task function
and this shows you how to
basically select from the dom and
how to how to take in inputs and create
tasks so this is a nice little project
to see how things work especially if
you're not familiar with
you know these other python packages
so let's go ahead and just jump right in
i'm going to grab those two files so
right here we want the
script tag and the css link we're going
to copy those
and let's make that smaller and then i
just have just a
empty folder here in vs code and i'm
going to create an
index.html
and let's just create a boilerplate and
we'll say pi script
demo and then i'm just gonna paste in
those
two links there and then we should be
all set so i'm gonna open up live server
and we're going to see this loading run
time and we just have a blank page
obviously because we haven't done
anything so in the body we can go ahead
and create a pi dash script tag
and in here we can write python so for
instance we'll create a variable called
name just set it to a string of brad and
then i'll print
that name now i'm going to have an issue
when i save and a lot of you guys might
as well
so i have format on save enabled with
prettier and you can see this is not
going to work python is very strict with
indentation and formatting so we have to
shut that off and you can do it globally
or you can just create a new folder
called dot vs code and then inside here
we can create a file called
settings.json
and we'll create an object and we want
to use editor
editor dot and then format on save we
want to set that to false
so now if we come over here and fix this
fix this formatting
and then save now it's not going to
format automatically and we should just
see brad on the screen
now we can put any python we want in
here if we want to define a function
like let's say get some
something very simple and x y
and then we'll return from this x plus y
okay and then we'll create a variable
called sum and set that to get some
we'll pass in 5 and 5 and then let's
just print
so we'll say print
sum save
and we should get 10.
all right
now like i said you can
you have access to
some javascript objects and namespaces
so for example if i want to console.log
some i could do that as well right from
within my my python code
so if i were to open up my console we
should see
somewhere we should see 10 right here so
you can see that's getting logged in the
console
now at the moment we're just printing
this out on the screen we're not
targeting it so usually if you have some
output you're going to want to
specify where that goes so let's go
above the pi script tag and let's have a
div with the
id of output and what we can do let's
say we want to put this this sum value
in that div we could go ahead and say pi
script
and then do a
dot write and that's going to take in
two things the first is going to be an
element with the id where we want to put
it the value in the second will be the
value so if i save that we're still just
going to see 10
on the screen however if we go to our
chrome tools and i go to elements you're
going to see that that 10 is actually
inside of a div with the id of output
all right and i'll actually add
let's add a class
class to this of we'll say text dash
3xl because we have all the tailwind
classes available to us because of this
pi script css
all right now before we move on here i
just want to show you another tag that
we can use called pi repl
and if we just do that and save you're
going to see that now on our right on
our web page we have a way to just
access our python interpreter so for
instance i could set a variable here and
then just say x
and then run that and i'll just get a
hundred i can even access my code here
so if i want to use that getsum let's
say
we'll say getsum and then i'll use that
x value and then let's add another 100
to it and we should
get 200
all right so you can do that as well but
i'm just going to comment out that rebel
now if you wanted to use
let's say a module from the python
standard library let's actually just get
rid of this
so let's say we want to use math we
could import math
and let's say in our output we want to
do
math dot
square root
of 10
save that
and that should output the square root
now let's say we wanted to import numpy
which is a
very popular package for data science
and mathematical operations arrays and
so on so if i try to let's say import
numpy
as np
and then we'll come down here actually
let's create
an array
so we'll say array equals np dot array
and then we'll pass in here an array of
just we'll just do some random numbers
all right so we have some random numbers
and then
here in our output let's
let's just output the array like that
and we should get
an error message
so we get this message here no no module
named numpy so if we want to use a
package like this we have to define it
in our environment and the way we do
that is in the head
so we'll go right in the head here and
we're going to use the pi dash env
tag
and then any any other files or packages
that we want to use we need to define
here so we just simply say say hyphen
and then numpy
and we'll save that
and now we get our array so now we're
able to use that package we don't have
to do any kind of like installation or
anything like that so very very powerful
so if i wanted to let's say just want to
put the array i don't want this the the
array type around it we could use an f
string in python so we could go like
this
and then wrap that
like that we could even say like my
array
is and then
save that
and it should just print it out my array
is and then the array
now you're probably not going to write
much python from within your html file
within a pi script just like you
wouldn't really do this with javascript
you'd have a separate file so let's
create another file here i'm going to
call it main dot pi
alright so a python file and then i'm
just going to grab what we have here and
cut that
paste that in here
let's fix this up a little bit
all right and and you'll probably get
some swiggly lines like this
i don't have any kind of i couldn't find
any extension to fix that so we'll just
deal with it for now but i want to
include that file right so if we come
over here
we can add
let's say source just like a javascript
file and then dot slash main dot pi
all right so if we save that we should
see the same result we're just targeting
that output div and we're putting in
this my array is now ultimately what i
want to build here is something very
simple and kind of silly but just to get
you understanding how this stuff works
we'll have the array
the numpy array and i want to have a
button that we click
to shuffle it around
so let's go ahead and actually add add
some styling onto this i want to put
this array in the middle of the page i
also want to remove the my array is i'm
going to keep the f string though
because i don't want to have that array
parentheses around it
so we should just see
the array now we'll go ahead and just
add let's do a main tag and we're going
to do container
and
i want it to be the entire height so
we'll do h dash screen these are just
tailwind classes
and then let's do flex make it a flex
column and we'll center everything let's
say items dash center
and justify dash center
and then we're just going to move that
id of output into that and then that
should be right in the middle
all right cool so now let's create a
button underneath it so under that div
i'm going to create a button and give it
an id of shuffle
and then let's just add some classes so
mt4 p
2 will do
text dash white and background will be
blue 600 and rounded
and then we'll say shuffle
save that we should now see our blue
shuffle button
now i want to add an event listener
we're going to do this with pi script so
let's add on to this
an attribute of pys so pi script dash on
click and we're going to set that to a
function called shuffle underscore array
and then we want to create that in our
main dot pi
so we'll go ahead and define
shuffle underscore array and this is can
take in args so we're going to do star
args
and we want to
go ahead and actually you know what
before we do
before we actually do the shuffle let's
just do pi script dot
write
and we'll replace let's say output for
now we'll just replace it with hello
just to make sure the button actually
works
all right so now if i come over here and
i click this
okay so now that turns to hello so to
actually do the shuffling
i don't i don't really work with numpy i
don't know it very well so i found a
solution to use the random module so
let's say import random
and then we're going to come down here
let's
go right here and we'll say shuffle and
we're going to
set a variable called shuffled and set
that to a function called our sorted and
then that's going to take in our array
and then a key
key equals lambda
and
then k colon
random and then we're just going to call
the random method here
and that should shuffle it so if we
replace this now with
shuffled
let's save that
okay so now if we come down here and i
click this
there we go so now it shuffles it and it
prints it back out
now
obviously this is very simple and kind
of silly but i just want you to pretend
that we're doing some really advanced
data science stuff with numpy all right
and we're able to do that and have it in
the browser have events change things so
that's where i think that this is going
to be you know really helpful
all right so let's um there's a couple
other things i want to show you
to target an element we can use this pi
script dot write but there's we can do
it in more of a javascripty kind of way
so i'm going to go up to the top here
and create a variable called output l
and we can set it to capital e element
and then whatever id we want like output
all right and then we can do uh
console.log
of let's say output underscore el
and then we'll save this let's open up
our console
and what that gives us is this this
object right here this proxy
so it doesn't give us the direct element
if we want the direct element we have to
actually add on to it dot element like
that all right so let's go ahead and
save that now and see what it gives us
all right so now you can see the actual
div
with the the data inside so it gives me
the actual element and instead of doing
this this pi script
dot write what i could do is
i could say output
element and then we could say dot inner
html equals and then we could set that
to an f string with
the array
in it
so let's get rid of that console log so
this is more of like a javascript
friendly way of doing it and then down
here we could do the same thing
um
so we would just take this
we'll comment that out
paste that in and we'll set that to
shuffled so now that should give us the
same same exact functionality
so now if we click that now it shuffles
so you might want to have
you know more python files that you want
to import that you want to bring in so
let's create a new file called utils.pi
and i just want to give you an example
of bringing in something from a separate
file so i'm going to have a utility
function to add a css class so let's say
define
add underscore
class and we want this to take in two
things the element itself and then the
class name that we want to add
okay and then here we're going to say
the element
and then we want the classlist object
and we're going to call add
and then we want to add the class name
oops we're using the syntax class name
all right so we'll save that and i want
to be able to bring this add class
function into my main dot pi but to be
able to do that we need to add it to our
environment so here where we have the
the pi inv we have our numpy package if
we want to bring in any external files
that we want to define here paths
and then we just want to define each
file so we want utils.pi
like that
okay so any packaging packages you use
any files you use you're going to put
here it's almost like a package.json
so
in our main.pi now let's bring that in
so we'll say from
utils
we want to import add underscore class
okay so now we should be able to use
that function and all i want to do is
make it so that when we click shuffle we
add a color class and change the color
of the array so we'll do that right here
let's say change
color
and we can call add underscore class and
the element that we're changing is
output l
and the class that i want to add let's
say
text dash blue dash 500.
all right so now i'll come over here and
click that shuffle
and there we go so now you can see it
turned blue because it added that class
all right so the real power here is the
the ability to use a package like numpy
within the browser within the front end
without having to set up
you know python on a server and
installing packages i mean we can just
set up our environment like this and i
think that that is is huge it's not
about just being able to simply traverse
the dom with python
versus javascript that's stupid why why
even bother making something like that
um the the real advantage here is is
being able to use the power of python in
in the packages that it comes with in
the browser so hopefully that's clear
it's it's not about building this silly
little application just pretend that the
the shuffle was like some crazy data
science functionality i don't know i'm
not really into data science uh it's
something that i do want to look more
into though
uh but that's it guys hopefully this you
learned something from this video i
would suggest going and playing with all
the examples that are offered to kind of
you know wrap your head more around this
but that's it thanks for watching and
i'll see you next time",,
QsH8FL0952k,"[Music]
hey what's going on everyone so it's
dennis ivey here and i'm filling in for
yet another video on brad's channel and
in this one i'm going to be teaching you
about webrtc while we build out two
awesome video calling applications so
what i'm going to do here is first give
you a high level overview of what webrtc
is and how it works and then we're going
to move on to our first project to
implement everything that we learned so
the first project is going to be a
simple peer-to-peer video call an
application and in this project we're
just going to have a lobby where we can
go ahead and join a room and invite
another user with some kind of room id
into our room so in this room you're
going to be able to have video calling
functionality like muting your mic
toggling the camera and that's about it
for that application and all in all that
project is going to take up about an
hour and 10 minutes of this video now in
the second part we're going to move on
to a group video calling application now
this second project is going to take up
a little bit more time in the video and
that is because of all of the
functionality that i added into it i
really wanted to make this special so in
this project we have a group video
called application with the ability to
actually have full controls along with
the ability to share your screen with
that we're also going to be able to see
all the room participants and have
real-time chat inside of that room so
users can actually communicate in real
time and one of the cool things i wanted
to add in here is that feeling for like
a discord clone maybe a twitter spaces
application where users can join the
application and all their video frames
will be in those little circles and if
you actually click on one of those
circles you can actually put a user into
focus and then switch between any user
that you want to put into that frame and
then you can also go back into group
video calling mode where everybody is
inside of that frame one thing i wanted
to mention is that there should be a
link to the live demo down in the video
description for project number two so if
you want to go ahead and test that out
i'd highly recommend checking it out
before getting started and just check
out all the features and see how things
work before we continue so with that
being said while project number one does
use webrtc project number two will use a
third-party service called agora so
agora will give us an sdk for the group
video calling functionality along with
real-time messaging and agora is a paid
service but they do have a great free
tier that gives us 10 000 free use
minutes each month and that should be
more than enough to complete this video
and have your own demo so test that out
and agora actually does not require a
credit card on file to get started so
anybody should be able to go ahead and
get started now if you're only
interested in one of the projects in
this video i'm gonna make sure there's
timestamps down in the video description
so you can actually find out where we
work on each project and just skip
through because project number one and
project number two don't have anything
to do with each other so you can
actually start straight with project
number two
and continue there so if you're here
just for webrtc you can only complete
the first part you don't have to worry
about the second part or you can just go
ahead and start at part two so now that
we have that taken care of let's go
ahead and run through a couple of slides
and we're just gonna go ahead and do an
introduction to webrtc and i'll give you
that high level overview before we get
started with project number one okay so
before we get started i just wanted to
let you know that these slides right
here will be linked to the video
description if you want to access them
along with a detailed article to go with
this so that'll be all linked up you can
go ahead and check that out once the
video is posted and let's go ahead and
get started so first of all what is
webrtc so as i have it in the definition
here webrtc is a set of javascript apis
that allows us to establish a
peer-to-peer connection between two
browsers to exchange data such as audio
and video all in real time so this is
real-time communication so the thing
that makes webrtc so special is the fact
that the connection is between two
browsers and the data that transmits
between the browsers never actually
reaches a server so it doesn't mean that
we don't need a server involved at all
but as this picture shows right here
let's say we have two clients that data
is transmitted directly once the
connection is made and never has to
reach that server so this makes webrtc
ideal for exchanging audio and video
because any latency that would be added
by having to hit the server first would
actually cause a slight delay
so i know some of you are thinking if
it's real-time communication this sounds
a lot like web sockets so websockets and
webrtc are similar in a lot of aspects
so i want to break down what websockets
are and how that functions and then
we'll make some comparisons on when you
might want to use one over the other so
websockets the connection is peer to
server right here so we have a browser
to server connection versus webrtc where
the connection is browser to browser so
one is peer-to-peer one is peer to
server so they both allow us to
communicate in real time but with
websockets let's say peer one right here
wanted to send a chat message to pr2
they would send the message that message
would go to the server and then out to
peer two now if peer two wants to
respond they would send that message to
to the server and then out to peer one
so there's a little bit of latency with
websockets and having to first go to the
server but it happened so fast that half
a second or maybe a second wouldn't
really make much of a difference for
something like a chat message or a
notification but
if we wanted to send audio and video
data through websockets that latency
would be very noticeable i'm sure we've
all been on a call or seen a video where
the two people are talking there's a
little bit of latency and they're
talking over each other so that creates
a pretty big issue right there so this
is where webrtc thrives so by not having
to reach the server first the connection
is directly between the two browsers and
that video data can be exchanged or
audio data can be exchanged much faster
now with that webrtc uses udp as its
protocol to transport the data and udp
is very fast and more on that in a
second
so if webrtc is so fast why would we
need websockets if they both give us
real-time communication and one can
transfer data faster for us it seems
like webrtc is the optimal path here any
more speed in our application always
seems like a better thing here so
there's some limitations to webrtc so
let's talk about this and then when you
might want to use one over the other so
first of all
webrtc uses udp and udp is not a
reliable protocol for transferring
important data so the way udp works is
that it sends data really fast but it
never validates if the data was received
so because of that if we're sending
something like an audio or video data
if we lose a couple of frames from our
video it's no big deal it'll catch up
your video might look a little bit funny
for a second but everything will turn
out and it's not a big issue if we're
sending something like a file to someone
if we lose a couple of bytes of data
from that file that entire file can be
corrupted so because of that udp is not
reliable you would not want to use it
for sending important data now also with
webrtc there is no built-in signaling so
this means that you can't just use
webrtc and make a connection webrtc
actually leaves it up to us to make that
initial connection and then once a
connection is made then webrtc takes
over so this is where websockets and
webrtc actually go good together we
would use a process called signaling
with websockets we would send the
information between the two peers the
connections made and then webrtc takes
over so webrtc has its limitations in
that way
so how does all of this work so i'm
going to give you a quick example first
and then we'll actually start breaking
down the details of this but at a high
level overview we have two peers and if
they want to communicate we would have
one peer initiate a connection and they
would say hey you want to chat and they
would have to send this message out to
peer 2. so they would send out a message
it doesn't matter how it's done this can
be done through signaling they can send
that message through an email a tweet
it's irrelevant but that message would
contain some information about this peer
right here so they would have to send
their network information to peer two
now if peer two accepts this offer they
would go ahead and send some information
back to peer one the means of
communication right now is not relevant
but the second that information is
exchanged data can begin to flow and now
the two peers do not need a server
involved they can start transmitting
data so this can be audio and video data
and that connection is made so what
exactly are we sending between the two
peers and how are we sending this data
so as i mentioned earlier that means of
communication in the beginning is
actually irrelevant that could be a
tweet or an email but usually this is
through a process called signaling
that's a more practical way of putting
this into an application
and that can be through websockets or
some kind of third-party signaling
service it doesn't really matter so
you'd get the two peers in some kind of
room so they can at least know about
each other then they would transmit the
initial data now
in that data there are two main
components there's a session description
protocol an sdp and some ice candidates
so first of all both peers will need to
exchange a session description protocol
one in the form of an offer one in the
form of an answer and a session
description protocol is simply an object
containing some kind of information
about both peers usually like the codec
address media type audio and video so
just a bunch of information about your
network and how to connect to you so
both peers will need to know about each
other's network now along with
exchanging session description protocols
between the two peers both peers will
also exchange a series of ice candidates
and an ice candidate is simply a public
ip address and port that could be
potentially used as an address to
receive data so each peer will typically
have multiple ice candidates that are
gathered by making a series of requests
to a stun server and they are exchanged
between the two peers so we'll actually
get into this exchange process and we'll
go more into detail about what's
happening so
exchanging session description protocols
and ice candidates so right here we have
two peers right here and we have a
server and then we also have stunt
servers that we're going to connect to
so we'll go through that process again
the one that we went through in that
high level overview and the first peer
will say hey let's connect here's my
session description protocol so it'll be
sent to the server through a signaling
process and sent to peer two now peer
two will receive that sdp
and they can accept it and they'll say
hey sure here's my stp let's connect the
second that's exchanged the two peers
are connected but data can't start
flowing yet they've simply made that
connection
so before data can start flowing between
the two peers we still need to
coordinate the discovery of our public
ip addresses so that's because most
devices nowadays sit behind firewalls
and nat devices so to do this we're
going to use a method called ice so this
means we're going to make a series of
requests to a stun server get our ice
candidates and then transfer them
between the two peers and a stun server
is not something that you're going to
have to worry about setting up it's
really cheap and easy to maintain so
there's a lot of publix done servers and
in our example we'll use a google stunt
server so let's go ahead and continue
with this process
so what's going to happen here is once
the sdp offer and answer are exchanged
this peer right here will go ahead and
ask the stunt server hey what's my
public ip address now the stunt server
will reply and they'll send over a
series of ice candidates to this pier
and this pier will send over the ice
candidates to pier 2. now pier 2 will do
the same they're going to go ahead and
request make a request to the stun
server and say hey what's my ip address
or public ip stun server will respond
and the ice candidates are exchanged now
once we find where the network finds an
optimal path to communicate through with
these ice candidates
data can start flowing between the two
peers and that entire connection is
complete
now i wanted to talk about one more
thing and that is trickling ice
candidates so how you send over ice
candidates is up to you but there's a
few ways you can go about doing this and
let's go ahead and take a look at this
process all over again and i'll try to
break this down so
when we first create our stp offer we
also make a series of requests to a stun
server to generate our ice candidates
now what we could do is create our stp
offer wait till all our ice candidates
are generated and then send over the stp
offer and the ice candidates all
together now more traditionally what you
want to do is not have to wait for this
process to complete you want to send
over your stp offer and then trickle in
your ice candidates as they're created
so you'll notice that we sent over the
stp offer and then
we don't get back our ice candidates in
a batch they're sent over individually
so we would signal over each ice
candidate over to our peer as they are
generated so we would send over the
offer send over an ice candidate and
another and another and then that
process would continue so that is called
trickling ice and we're actually going
to run through this so it's going to
help us fix a little bit of a delay here
so let's go ahead and jump to the next
slide and i want to show you this in
action before we start coding so i have
a live demo here so this is actually a
gif in that live demo
and let's go ahead and click on this and
go over how this exchange works between
the sdp offer and answer
so let's go ahead and open this up make
sure my camera is on so the gif is
actually at the top of the link right
here
so here i am this is all live right now
source code is all here
and what i'm going to do here is open up
two tabs side by side
so i want to make a connection between
two peers
okay so
we have pier one and pier two so if we
go through these instructions what we're
gonna do is first create an offer so
this is what an offer looks like so i'm
going to create an offer and you see
this object right here is just a bunch
of gibberish about our network we're
just going to go ahead and copy the
entire offer
and i'm going to paste this over to pier
2. so we're creating an offer from pier
one peer one will initiate that offer
pass it over to peer two and this is the
more manual way of doing this you
wouldn't actually do this in a real
application i'm just trying to or i
built the demo so you can see that
exchange process
so peer two will get this offer and then
we're going to create an answer so
whenever we added an offer here from
pier one
let's go ahead and create an answer from
pier 2. so now we have an answer and you
can see the object one's an offer one's
an answer
let's go ahead and copy this entire
answer
and send it to peer two
okay so we've exchanged those
and once we've exchanged the offer and
answer i'm gonna go ahead and add the
answer to peer two and now we see a
connection both peers are connected so
we have
peer one and peer two and then pier two
and pier one right here okay so one
thing you'll notice that there was no
ice candidates exchange at this point
and that's because we're not using
signaling so by the time the ice
candidates were generated they were
actually added to the offer so i didn't
need to actually generate those on my
own those were created so i didn't have
to actually send those over because
we're not using signaling so that's the
demo uh check this out before you get
started and let's go ahead and get right
into coding this
okay so let's start with a quick
walkthrough of project number one before
we start building this out so this is my
room right here it's full screen and
here are my controls and here is the
room name so it's simply a parameter
added in the url so at this point i have
full control here with my camera and i
can toggle this on and off with a mic
and i'm just going to go ahead and leave
the room and to create a room we can
just go ahead and add in any value here
let's go ahead and give it a name and
we're just going to call this test so
this is peer-to-peer i can only have one
other person in this room and let's say
i want to share this url with someone
and i want to tell them to join the room
i'll just go ahead and give them the url
to the website let's say they try to
join the room without an extra parameter
here so no room name it's going to
redirect them back to the lobby so the
room name is test here so they're gonna
have to add that in here so we'll just
go ahead and do test
and here we go they are now in the room
so we have two peers in the room and
here are my full controls sorry about
the quality is going to take a minute to
adjust we do actually cover this in the
video where we exchange or change up the
video size here but we don't go into
much detail about it so here we have two
peers both peers can see each other so
if i go ahead and mute the camera here
for pier one the entire camera feed will
be hidden here so my current user where
i'm at is always going to be in the top
left and peer number two so the person
i'm talking to will always be in the big
frame so that's why right here if this
pier has their camera muted we're not
going to see anything here so if i
unmute this we're actually going to see
that video frame so that goes both ways
and both piers can actually have full
controls here so if i'm inside of this
room right here or let's say pier 1 is
inside of their application and pier 2
leaves what's going to happen here is my
video frames automatically going to go
into full screen and pier one leaves so
we can join a room and leave it and
that's pretty much the application so
let's go ahead and close this out and
start building this okay so we're going
to be building this project out from
scratch so the first thing i want to do
is go ahead and create an empty folder
on my desktop and give it a name and
i'll just call my project peer chat so
once i have this folder i'll open this
up inside of my text editor i'm using vs
code here and i'm just going to go ahead
and find the project folder right here
and open things up so here's my project
i'll close this out and the first thing
i want to do is go ahead and add in an
index.html file that's going to be our
room page eventually and then i'll add
in a main.css file
and a main.js file
okay so inside of the index.html file
i'm going to set up that boilerplate
html code so in vs code if i start
typing in html i should get this drop
down select menu i'll click this one
right here and that should build all of
this out for me so if you don't get this
just go ahead and type it out from
scratch follow along with this video
pause it whatever you need to do here so
for the css file and the javascript file
those are already linked up because i'm
using the same name here so the file
path is all set so we have our main.js
and main.css
but what i like to do is i like to get
this script tag right here and bring
this down below my closing body tag okay
so we have this and next i want to go
ahead and build out our video frames and
the container for those so we'll create
a div here and this div is going to have
the id of videos so this will hold the
two video frames we're doing only peer
to peer so it's not going to be group
video calling we're only doing a
peer-to-peer connection so inside of
this we're we're going to use a video
tag and inside of this video tag i'm
going to go ahead and give it the class
of video dash player
and then for the id we'll just give it
an id of user dash 1. so we're only
going to have a user 1 and user 2. now
for the other properties here we're just
going to go ahead and do auto play
so auto play and then we'll do plays
in line
okay so once we have this tag right here
we'll go ahead and copy this bring it
down here and we're just going to change
this to user two so we have our two
users and that looks good so that's all
we need inside of our html template
right here for now so let's go into our
main.css and i just want to make sure
that we can see this that we're actually
outputting this and then we'll actually
start adding in our our camera stream or
video feed into these tags here so
inside of main.css let's go ahead and
grab our videos tag or the
video frame the container and then we're
just going to go ahead and display it as
a grid and for this for the actual
columns we'll do grid template columns
of one fraction and one fraction so i
just want to make sure that both videos
take up exactly half of that container
so we'll just go one fraction one
fraction that's going to make that 50
each for each container now we'll also
want to make sure that there's some
space between them so we'll do gap of
2em and that's it for the videos so for
the actual video containers so for these
elements right here for the video player
let's go ahead and grab this and we'll
style this so we can actually see this
so we'll do video
dash player
and for this we're just going to go
ahead and set a background color so we
can actually see it so we'll make this
black and then for the width we're just
going to set this to 100 so i just want
to make sure that the width is full
width of that container right here so
i'll let the actual column specify the
width of that video player so we'll set
that to 100 and for the height let's
just do 300 pixels for now and we'll
leave it at that
so we'll save this and let's go ahead
and take a look at this so i'm going to
use live server we'll open up our
index.html file give it a second
and this is what you should have right
here so we should just have those two
players and that's it and the next thing
i want to do is output my camera's video
stream inside of our page here so i want
to get access to my camera's audio and
video and output it here so for this
let's jump back into our code here and
let's move on to our main.js file so
in here i want to create a variable for
my local stream and i'll leave it
undefined and then one for my remote
stream so local stream will be my local
camera's video feed and my microphone's
audio and then the remote stream once
we're connected to another user that
will be that remote users camera and
audio data so once we have that let's go
ahead and create a function called init
and let's make sure it's an async
function
so with this function we're just going
to go ahead and call this right away so
this will be the function that starts
everything up and when we load our page
what's the first thing that we want to
happen so typically when you go to a
website that takes your camera's audio
and video usually it has to request
permission and actually get access to
that so we're going to call a function
that's actually going to ask for
permission for access to our cameras
video and audio and then we're going to
go ahead and actually add this to the
dom
so for this we're going to call local
stream and then we're going to set this
value to await
navigator.mediadevices.getusermedia
so the getusermedia function what this
is going to do is this will actually
request permission to our camera feed
and our audio and we can actually pass
in the parameters and what we want
access to so for now we'll just do video
this will be true so we do want access
to the video and for audio we can also
set this to true but for now i'm going
to set this to false because when we're
testing this i don't want to hear an
echo back inside of the mic so i just
want to make sure that it doesn't mess
with us but we'll change this later so
we want access to the camera but not the
audio so that's what this will do and it
will actually set this value inside of
local stream so once we have this and
i'll actually go over where you can find
these functions in a second so let's
just finish this up
so once we have access to that let's go
ahead and call document.getelementbyid
and we're just going gonna get user one
so this is gonna be our camera's audio
and video feed and the video tag has a
property called source object and we're
just gonna set this to local stream
so i'm gonna save this and this
specifically is to this video tag so
once we have that let's just go ahead
and test this out so
let's open this up here
and i'm going to refresh the page and it
looks like i've already accessed or
denied the camera's audio and video
because i think it refreshed it by
default so this is actually a good
teaching moment we're going to go ahead
and go into settings and we'll go into
privacy and security we'll go into site
settings and we're just going to go into
camera so we're just going to go ahead
and remove this so by default it already
blocked access we're just going to
remove that and then now on that first
load this is what you're going to see so
that's what that function calls it
actually requests access to our camera
so once we allow this we should see our
camera feed in a second and there we go
so now you can see me we've successfully
displayed our camera's video feed here
so we don't have the audio right now so
let's open this up in another tab here
so now we have two users but the two
users can't see each other so we haven't
created that peer-to-peer connection all
we did was got access to our camera and
displayed it so let's move on to that in
the next section here so before we do
that though i want to go ahead and show
you where you can find these functions
because
in your projects you're probably not
going to be doing the same exact thing
that i'm doing eventually so you want to
be able to actually find this so i'll
show you a great resource for this so
let's go to webrtc or let's do a search
and in this site right here i'm going to
go ahead and link this up in the video
description this is where you're going
to find access to everything so if we
look down here here are all the
functions we're going to use this rtc
pureconnection function
read about it see how to use it and this
will tell you a lot more so i'm not
going to go into the details about all
of these i'm going to expect you to do
that research but i just want to make
sure you know where to find it okay so
let's go ahead and close this out and
let's move on to the next section okay
so now it's time to start the process of
connecting two peers together and
creating an offer and then sending that
offer over to the other peer along with
the ice candidates so let's go ahead and
create another function right here just
below the init function and let's call
this create offer so when we first load
up our page and another peer joins we
want to create an offer and send it over
to them so we'll create the function
let's make sure it's a async function
here and the first thing we want to do
inside of our create offer function is
create the initial peer connection here
so we're going to create a variable
called peer connection
and we're going to set this right here
inside of create offers so we're going
to create a new peer connection and
essentially this is that interface that
stores all the information between us
and that remote peer and it provides us
with a bunch of methods to actually
connect to that peer so this will be
that core interface to actually connect
to another user so we're going to go
ahead and set this up and we're going to
call this new rtc
peer connection
we'll call the function and there we go
so in create offer we're going to
establish that peer connection object
and then what we're going to do is we're
going to get our remote stream and we
just want to set up a media stream
inside of this video player 2 right here
so inside of this other video tag we
want to set up the media data or the
actual media stream and then we'll add
data to it later so we're just going to
go ahead and do new media stream
we're going to call this and then we're
going to do the same thing that we did
right here so we're going to take this
right here
paste this below and set this to user 2
and then take our remote stream and set
it up so again there's no actual video
feed in there just yet because we
haven't gotten that from our user but
we're setting it up and just creating it
and making sure it's ready for that so
once we create our peer connection and
set up our media stream let's go ahead
and actually create an offer so we're
going to go ahead and create a variable
called offer and this is going to be a
weight
peer connection so this is what's given
us access to all this all these methods
right here we're going to call peer
connection dot
create offer so each peer connection
will have an offer and an answer we're
creating that offer and then we're just
going to go ahead and go to our peer
connection and we're going to set the
local description so we are the local
description so we're going to
peerconnection.set
local description and we're throwing in
our offer so every peer connection is
going to have an offer and answer
okay so once we have that let's just go
ahead and console this out so we'll do
console.log
and let's just see our offer i just want
to show you what it looks like right now
so we'll just do
offer
and let's just go ahead and call this so
at this point i'm just going to call
this on init so we're going to call it
immediately
once we load up our page so if i go in
here let's open this up refresh it make
sure it's all working let's go into
inspect maybe we have something wrong
here
okay it's all working we see our video
feed and here we go we see our offer so
we see an object we see the offer here's
our string we see the type of offer and
there we go so we just successfully
created it now i also want to set up my
stunt server and as i mentioned earlier
we're going to use a free stunt server
from google so we'll set that up and
then pass that into our peer connection
so locally you actually don't need to
set this up if we're just doing this in
testing but eventually once you're
actually using this project in a
production environment you'll need to
actually set this up here so let's just
go ahead and do servers
we'll set up the servers and i don't
need equals right there
so we'll set up the servers and this is
simply going to be an object and we're
going to start with ice servers
let's just do this slowly so do i
servers and then this will be an array
right here and inside of this array
we're just going to go ahead and create
an object here and we're going to
specify the urls
and for this i'm just going to go ahead
and copy the actual google stunt servers
so you can find a lot of different stunt
servers we're just going to go ahead and
use these
so i'm going to copy this from some
notes that i have here and paste this in
so the urls here we set up two of them
right here and there we go so just copy
that information and paste it exactly as
is
so there's our servers and we just need
to go ahead and pass this into our rtc
peer connection
okay so once we set up our stun servers
we still have some more work to do so
i'm going to create some space between
our offer and this section right here
and i just want to get my local tracks
and actually add them to the peer
connection so i have my local stream
right here and i just want to loop
through all the audio and video tracks
and actually add them to the connection
so my remote peer can actually get them
so we'll just do local stream and we're
just going to go ahead and call get
tracks here so get tracks and we're
going to loop through every single track
so we're going to call four for each
here
let's see i need to throw each not fro
four each
and let's just go ahead and loop through
every single track so we're getting all
the tracks we're gonna use an arrow
function here
and we're just gonna go into pier
connection
dot add track so that's a method that
that object gives us and we're just
going to add the track and then local
stream okay so on create offer we're
going to add our tracks to that peer
connection and the next thing i want to
do is listen for when our peer actually
as their tracks too so anyt",,
",,
ime the,,,
remote peer as their tracks we want to,,,
also add it to the peer connection and,,,
then listen for that event so there's,,,
going to be an event listener here we're,,,
going to call this pure connection and,,,
then we'll do on track so when our,,,
remote pier as their tracks we're going,,,
to go ahead and grab the event here,,,
so we'll grab the event set up the arrow,,,
function,,,
and then here we're just going to go,,,
ahead and do event,,,
dot streams,,,
and then we're grabbing index zero and,,,
then we're just gonna go ahead and do,,,
get tracks again calling the same thing,,,
and we're just gonna do dot for each,,,
we're looping through every single track,,,
from our remote pier,,,
and we're just gonna go ahead and set,,,
that to the remote stream,,,
okay so we're doing remote stream,,,
dot add track,,,
okay so remember when we set up our,,,
remote stream right here and we pass,,,
that into the video container well now,,,
we're actually adding the track so any,,,
track we add will be added to this,,,
object right here to that video tag so,,,
that's why we set it up and then we,,,
actually add in the tracks,,,
okay so we have another thing to do and,,,
that is when we create an offer we still,,,
need to create ice candidates so anytime,,,
we set the local description by default,,,
we have an event listener that can fire,,,
off here and it's going to go ahead and,,,
actually start generating our ice,,,
candidates so at this point we're just,,,
going to generate them and then console,,,
them out and then we'll deal with,,,
signaling them over later here so let's,,,
go ahead and also go into peer,,,
connection and then we'll call dot on,,,
ice candidate so that's the event,,,
listener every single time we create an,,,
ice candidate we're gonna go ahead and,,,
create an async function and we're gonna,,,
take that event,,,
and in here we're first going to check,,,
if we actually have an ice candidate so,,,
event dot candidate so we want to make,,,
sure that the current event is a,,,
candidate here and then once we get that,,,
candidate let's just go ahead and,,,
console out,,,
console.log and then we'll just say,,,
new,,,
ice candidate,,,
and then here we'll just do,,,
event,,,
dot candidate,,,
okay so i can't spell candidate let's,,,
just copy that bring that in here and,,,
then we'll go there we go okay so let's,,,
recap here so we create an offer and we,,,
set the local description when we set,,,
the local description it's going to,,,
trigger the ice candidates to start it's,,,
going to start making a series of,,,
requests to the sun server and it's,,,
going to create the ice candidates so,,,
set local description we'll fire this,,,
off and we'll just have a few candidates,,,
created now we also create our where we,,,
take our local stream get all the tracks,,,
and we add them to our remote pier and,,,
then we also want to listen for any time,,,
our remote peer adds tracks and we're,,,
going to add them to that remote stream,,,
so we're just kind of connecting a few,,,
things here,,,
okay so let's save this again and let's,,,
try this let's see the ice candidates so,,,
if i refresh this,,,
here we're going to see an offer and,,,
then we see new ice candidate new ice,,,
candidate and new ice candidate so there,,,
we go we created the offer and the ice,,,
candidates so now we need to take this,,,
information and send it over to our,,,
remote peer to establish that initial,,,
connection so we're going to take this,,,
offer right here along with each ice,,,
candidate that we generate and we're,,,
going to send that data over to that,,,
peer now once that remote peer gets this,,,
information they're going to create an,,,
sdp answer with their information send,,,
it back to us and once that exchange,,,
takes place the two peers are now,,,
connected and data can begin flowing,,,
between the two peers now this is,,,
usually done through a process called,,,
signaling where essentially you would,,,
get some users in a room together and,,,
then use something like websockets to,,,
exchange this data in real time so it,,,
all happens seamlessly in the background,,,
now instead of building out our own,,,
signaling server and using web sockets,,,
manually what we're going to do is we're,,,
going to use a third-party service,,,
called agora that gives us an sdk to,,,
make all this possible without having to,,,
actually build all this out on our own,,,
now agora is a paid service but they do,,,
have a great free tier that's going to,,,
allow us to use a lot of their service,,,
before we actually cross that page,,,
threshold so let's go ahead and actually,,,
create an account on agora i want you to,,,
sign up and we're just going to go ahead,,,
and create an app there grab our app id,,,
and then make this connection happen now,,,
with agora you also don't need a credit,,,
card on file so that's one of the cool,,,
things so you can actually sign up,,,
before you actually need a card for that,,,
paid tier so go ahead and actually sign,,,
up create your account and once you,,,
create an account you're going to see,,,
your agora console here and in here what,,,
you're going to want to do is actually,,,
go into your project section and you're,,,
going to want to create a new project so,,,
go ahead and create a project here,,,
specify the name we'll just call this,,,
peer chat and then for the use case,,,
we're just going to specify social and,,,
then chat room,,,
now for the authentication mechanism,,,
we're going to select testing mode app,,,
id so this way we don't need a token,,,
you'll need this in production but for,,,
now we just want to use the app id,,,
so i'm not going to create my app go,,,
ahead and submit this i already have an,,,
app that i want to use so i'm just going,,,
to go ahead and grab one of these now to,,,
actually download the sdk let's go back,,,
into our console and we're going to go,,,
into downloads,,,
and we're just going to grab,,,
the web platform so there's different,,,
platforms that we can use this for we're,,,
just going to go ahead and select web,,,
and we're going to grab the real-time,,,
messaging sdk so let's go ahead and,,,
click on this,,,
open this up this will download a zip,,,
file and we're going to want to open up,,,
this folder right here we'll go into,,,
libs and we're just going to grab this,,,
one right here so the dot js extension,,,
now i'm going to go ahead and minimize,,,
all of this bring this into my desktop,,,
close this out and we're going to drag,,,
this into our peer chat folder so once,,,
we have that in our folder let's go,,,
ahead and actually make this connection,,,
so we want to actually connect the sdk,,,
itself and we're going to bring this,,,
down here so we're going to copy main.js,,,
and then bring that,,,
just above the main.js file so we're,,,
going to go ahead and click rename i,,,
just want to get the name here so make,,,
sure it's like that with that js,,,
extension,,,
now remember you could build out your,,,
own signalling server you don't need to,,,
use something like agora if you're just,,,
looking for the concept here what i'd,,,
recommend to do here is just go ahead,,,
and actually do it this way use that,,,
free tier and then if you want to try,,,
using your own signaling server go ahead,,,
and do that that's completely up to you,,,
i just want to make sure it's easier for,,,
this video and i don't limit this to,,,
anybody with a specific backend because,,,
there's ways to do this with python with,,,
nodejs and all these other platforms,,,
this way we have one universal way to do,,,
it okay so we have the agora sdk so,,,
that's all set up here it's in our,,,
folder right here so the file path is,,,
connected and what i want to do next is,,,
actually go into our main js file here,,,
or main.js and we're going to use our,,,
app id from agora and i'm actually going,,,
to blur this out so when this does go,,,
live nobody can use my app id you want,,,
to make sure that this is actually,,,
hidden here so let's go ahead and,,,
specify the app underscore id and then,,,
we'll add this in here and that's also,,,
where when you go into production you're,,,
going to want to use token,,,
authentication and i actually have more,,,
videos on my channel about how to do,,,
that so let's go ahead and actually grab,,,
an app id so go back to your project,,,
here,,,
so we'll go into projects whatever you,,,
just created and you're just going to,,,
click on the app id here so i click on,,,
it it copies that immediately we're,,,
going to go ahead and bring that in,,,
we'll paste it in here and that is now,,,
set up now the next thing we'll want to,,,
do here is set up our token value and at,,,
this point because we set up our,,,
authentication to use app id only we can,,,
actually set this as null and we'll,,,
leave it there but i do want to at least,,,
set the value so i can pass it in where,,,
i need and then when you want to update,,,
this you can actually change it directly,,,
here so once we have our token we also,,,
need a uid for each user so every single,,,
user in our application when you join a,,,
channel this is how we identify who's,,,
who so users can actually send messages,,,
to each other and we know how many users,,,
we have in each channel so how you do,,,
this is completely up to you you can use,,,
some kind of id from a database you can,,,
use a uid generator but in my case what,,,
i'm going to do here is just generate a,,,
random number and i'm going to make sure,,,
it's a big number so we have less of a,,,
chance of having some kind of duplicate,,,
so we're just going to go ahead and call,,,
math.random and we're just going to do,,,
this by 10 000. so we're going to,,,
generate some kind of random uid and,,,
that's it for now so i'll leave this up,,,
to you but in this case we also want to,,,
make sure that this is a string so we're,,,
just going to go ahead and wrap that so,,,
we'll do string math.floor math.random,,,
and that should give us our uid so on,,,
each click or anytime a user goes to,,,
this page we're going to have a new uid,,,
generated and then later on we can talk,,,
about storing this uid inside of session,,,
storage or local storage but for now,,,
let's just leave it like this so,,,
at this point what we need to do is go,,,
ahead and create a client object and,,,
this is going to be our client right,,,
here that we log in with and the client,,,
that we have access to all these,,,
functions with so it's actually a lot,,,
like this peer connection right here,,,
where we establish that object and this,,,
is going to give us access to everything,,,
that we need so when we create our,,,
clients we're also going to need a,,,
channel so this will be the channel that,,,
two users actually join so we're gonna,,,
create a channel and then join it and,,,
this is what's gonna allow us to send,,,
messages to this channel and no,,,
information about this specific channel,,,
okay so we set up our app id our token,,,
uid client and channel and now it's time,,,
to actually start triggering this so,,,
inside of our init function let's go,,,
ahead and set this up right here and the,,,
first thing we're going to create is,,,
going to be our client object so we're,,,
going to call agora rtm dot create,,,
instance,,,
and we can just throw in our app id here,,,
now the reason why we have access to all,,,
of these is because of the sdk that we,,,
added in here and if you have any,,,
questions about all these methods that,,,
we're using go ahead and go into your,,,
console and check out the agora,,,
documentation so we have the,,,
documentation right here and the api,,,
reference go ahead and just find web and,,,
then real-time messaging right here and,,,
any function that we use in this video,,,
just go ahead and reference it right,,,
here if you need to know more about it,,,
if you want to try something different,,,
this will tell you everything that you,,,
need here so we're later on going to use,,,
the send peer-to-peer message you're,,,
going to see the login method that we're,,,
about to use the create instant method,,,
that we just used and so on so go ahead,,,
and check this out this will also be,,,
linked up in the video description,,,
okay so let's go back into our project,,,
here and once we create our client,,,
object the next thing we need to do is,,,
actually log in so we're going to call,,,
await and then we'll do client.login,,,
and to log in we just need our uid and,,,
token but at this point because our,,,
authentication mechanism is set up to,,,
only app id we'll just throw in our,,,
token which will be a no value and,,,
that's it so we create our client we log,,,
in then we need to go ahead and create,,,
the channel so we're just going to do,,,
channel and this will be,,,
client dot create channel so this is all,,,
coming from that client object right,,,
here and to create a channel we're just,,,
going to go ahead and give it a name so,,,
this function will either find a channel,,,
by this name or it will create it and,,,
later on this will be some kind of,,,
dynamic value like room id something,,,
like that from the url and we're just,,,
going to go ahead and have that in our,,,
url like this so we'll just do something,,,
like index.html,,,
if i can type little slower and then,,,
we'll just throw in the room id and,,,
that's going to be some kind of number,,,
like that so for now we're only going to,,,
have one channel we're just going to,,,
call it main but i'll leave this right,,,
here so you can actually reference this,,,
and then we're going to update this okay,,,
so we're creating our channel and once,,,
we create a channel we need to join this,,,
channel so we're going to call await and,,,
then we can just do channel,,,
dot join,,,
okay so that's it we just created a,,,
channel we joined we logged in with our,,,
client and we are set up to go now what,,,
we need to do here is actually listen,,,
for whenever any other client actually,,,
joins the same channel so another user,,,
when they actually pull up the website,,,
we need to know about them joining the,,,
channel and then we need to send them a,,,
message so with this we actually have,,,
some event listeners that we can,,,
actually work with so using this channel,,,
method right here this channel object we,,,
can actually call channel.on and there,,,
is an event listener in the,,,
documentation that you can find called,,,
member,,,
joined so anytime somebody calls the,,,
join method on the other end we can,,,
trigger this and it's going to respond,,,
with the function that we're going to,,,
create and this is going to be called,,,
handle,,,
user,,,
joined so let's go ahead and test this,,,
out so let's go ahead and create this,,,
function and then we're going to check,,,
this in the console so we'll go ahead,,,
and bring this down here we'll call it,,,
handle user joined we'll make this an,,,
async function and by default we will,,,
get that member uid so we're getting,,,
that member's uid then we'll go ahead,,,
and just continue here and let's just,,,
console out a new user has joined so,,,
console.log,,,
a new user joined the channel,,,
okay so with this i also want to know,,,
their ids let's go ahead and throw this,,,
in and there we go so when a user calls,,,
a join method on the other end we're,,,
going to respond with this function,,,
right here and let's check this out so,,,
if i open this up,,,
let's go ahead and do inspect element,,,
let's see let's open up the console,,,
and i'm going to open this up in another,,,
tab we'll make this smaller so we can,,,
actually see the console and you're,,,
gonna see this respond in real time so,,,
we're gonna see this console get,,,
triggered right here so we'll go ahead,,,
and join and there we go so we see a new,,,
user has joined the channel and we see,,,
this user's id it's two five three five,,,
so the user just joined the channel and,,,
it triggered this function for us now,,,
when a user joins what's the first thing,,,
that we want to do well inside of our,,,
application what we need to do is we,,,
need to send this user a message from,,,
peer one so we have peer one and peer,,,
two so we need to send a message over,,,
with our original offer so right now,,,
let's just work on sending that message,,,
over so once a user joins we want to go,,,
ahead and actually create the offer so,,,
let's take this create offer method and,,,
let's move this down into the handle,,,
user joined so we'll go ahead and paste,,,
that in here and what i want to do here,,,
is actually send out a message from the,,,
create offer function so what i'll do is,,,
take this member id we'll pass that in,,,
as a parameter here and inside of the,,,
create offer function we'll bring that,,,
down here and let's go ahead and,,,
actually send out the message now at,,,
this point we deal with all the logic,,,
here with creating our peer connection,,,
we create an offer and we want to go,,,
ahead and actually send out the offer,,,
once it's created so we'll remove this,,,
right here and we can actually access,,,
the client object so we'll do client dot,,,
send,,,
message,,,
to peers so this is a function that we,,,
have here and we're going to go ahead,,,
and send the actual message so this will,,,
be the text value and then we can just,,,
say something like hey so we'll just,,,
throw that in like that and then we need,,,
to know what peer to send this to so to,,,
actually send it to appear we're just,,,
going to go ahead and get this member id,,,
and that's how we know who to direct,,,
message here so we'll go ahead and add,,,
that in and this will send a message to,,,
appear with this id,,,
now on the other end we need to respond,,,
to this message so we need a way to,,,
listen for that event and then actually,,,
process that specific message so let's,,,
go ahead and access our client object,,,
inside of the init function and the,,,
event listener that we want to handle is,,,
going to be message,,,
from here so anytime somebody calls the,,,
send message function specifically to us,,,
so our client object we're going to go,,,
ahead and respond here and the function,,,
i'm going to create here is going to be,,,
called handle message,,,
from here and let's go ahead and,,,
actually create the function so we want,,,
to process the actual message so let's,,,
go ahead and create that handle message,,,
from here we'll make that an async,,,
function and in here we're just going to,,,
get the actual message and we're going,,,
to get the member id so we want to know,,,
who sent this message so let's go ahead,,,
and finish up the arrow function and at,,,
this point i just want to console it out,,,
so we're going to get that message value,,,
and specifically we need to get the,,,
message dot text value so message dot,,,
text and that's going to be,,,
this part right here so let's go ahead,,,
and test this out we'll open up two,,,
browsers side by side once we have this,,,
set up here we'll actually be able to,,,
start sending the offers and answers,,,
okay so let's go ahead and close this,,,
out so if i join with another peer so if,,,
i refresh this we're gonna get an alert,,,
that tells us a peer has joined and then,,,
peer two should get a message from this,,,
user so right now if i open this up we,,,
should see this alert we see a new peer,,,
has joined the channel and then on this,,,
pier's end we should have received a,,,
message so let's check this out and here,,,
we go we see the message of hey and it,,,
looks like everything's working so,,,
awesome so let's actually go ahead and,,,
send an offer instead of just a message,,,
like that so we do need to send a string,,,
here so let's go ahead and actually call,,,
json.stringify,,,
so we'll stringify an actual object and,,,
this will be the message that we send,,,
and then we'll parse it on the other end,,,
so at this point i want to send some,,,
more information with the message so i,,,
want to send a type so later on when,,,
we're sending offers and answers and ice,,,
candidates i want to know the type of,,,
message that i'm receiving so this type,,,
will be of an offer and then we send the,,,
actual offer,,,
and that is going to be this offer right,,,
here so we're just going to go ahead and,,,
send this offer to our peer,,,
now on the other end let's go ahead and,,,
actually get this offer so we'll just go,,,
into handle message from pier and i'm,,,
just going to get that message value and,,,
we're just going to do json.parse,,,
and we're just going to parse the actual,,,
message here so let's just go ahead and,,,
grab this,,,
bring this into here and then change,,,
this to just message because we already,,,
parsed the text value and let's just try,,,
this one more time so i'm going to need,,,
to refresh a few things,,,
and let's see so at this point this is,,,
pier 2 now because i just refreshed this,,,
here we have a message type of offer and,,,
then the actual offer and we sent that,,,
out to the peer now with the offer i,,,
also want to send the ice candidates as,,,
they get generated so this is going to,,,
be that trickle ice method so let's take,,,
this entire method right here let's copy,,,
that and let's bring this in right here,,,
so let's just paste this over this,,,
console.log right here and at this point,,,
we're going to send a message of,,,
candidate,,,
and then the actual message itself so,,,
the type will be candidate we're going,,,
to change that to candidate and then the,,,
type of or the actual message will be,,,
event dot candidate,,,
so let's check this out okay so type is,,,
candidate and then we send over the ice,,,
candidates all right so let's try that,,,
one more time let's refresh this and,,,
then we'll refresh this so this will be,,,
peer two so here we have an offer,,,
then we have the actual candidates so we,,,
have one two and three so each candidate,,,
was trickled in one by one so there we,,,
go that looks good awesome okay so,,,
there's one more thing that i want to,,,
fix up before we move on to the next,,,
section so we're about to start creating,,,
an answer,,,
and at this point ever since we removed,,,
the create offer function from init to,,,
handle user joined for some reason the,,,
local stream doesn't get created right,,,
away if i refresh the page too fast so,,,
essentially we're calling,,,
localstream.gettracks and every once in,,,
a while when the page refreshes this is,,,
basically a null value and then we can,,,
get the tracks and then it throws some,,,
kind of error so let's go ahead and,,,
actually fix this so what i'm going to,,,
do here is just underneath our remote,,,
stream we're just going to ask a quick,,,
question and we're going to say if not,,,
local stream so we're using the not,,,
operator if we don't have it on create,,,
offer let's just quickly,,,
create the local stream and append it to,,,
the dom so if we happen to not have it,,,
it's kind of like an extra check here,,,
i'm sure there's different ways to do,,,
this but that should be a quick fix okay,,,
so that's it for the create offer,,,
function and let's go ahead and start,,,
creating the answer so just below our,,,
create offer function let's go ahead and,,,
create a new function and we're going to,,,
call this one create answer,,,
so we'll call this create answer and at,,,
this point we'll make this an async,,,
function,,,
and we also want to pass in the member,,,
id here so we have this function and a,,,
lot of the logic inside of the create,,,
offer or create answer function is going,,,
to be very similar to the create offer,,,
function so in the create answer,,,
function on peer two side we still need,,,
to create that pure connection we still,,,
need to set up that remote stream which,,,
will be user two for peer two so,,,
technically on the receiving end the,,,
user that sent the offer will be user,,,
two and so on so it kind of flips it and,,,
they still need to go ahead and create,,,
all these local tracks the ice,,,
candidates and the,,,
peer co or not the ice candidates but,,,
the uh basically set up the local and,,,
remote tracks and then send out ice,,,
candidates now this is the part that's,,,
going to be a little bit different for,,,
create answer so let's take everything,,,
that's going to be repeated in both of,,,
these functions and let's put that into,,,
its own function and have that fire off,,,
before we start repeating all of our,,,
code here so let's go ahead and go above,,,
create offer and you'll see what i'm,,,
doing here in a second if it doesn't,,,
make sense so let's go ahead and create,,,
a function called create,,,
so create,,,
peer connection,,,
okay so we'll go ahead and make this an,,,
async function and inside of pure,,,
connection we still need a member id so,,,
we're basically just going to keep,,,
passing this down,,,
and we'll create the function finish,,,
this up here and inside of create pure,,,
connection let's go ahead and take this,,,
pure connection from create offer all,,,
the way down to on ice candidates so,,,
we'll copy this let's remove that we'll,,,
clean up the function here let's bring,,,
that into create peer connection,,,
so now we can take all this logic inside,,,
of create pure connection and we can,,,
move this down into create offer so,,,
let's just go ahead and call,,,
await create peer connection and pass in,,,
the member id so that's what we're,,,
trying to do we're trying to take all,,,
that logic that was repeated bring that,,,
in here and now inside of create offer,,,
or create answer i can do the same right,,,
here so we create that peer connection,,,
and there we go so we just cleaned up a,,,
bunch of code just to make sure you can,,,
recap this we took everything from peer,,,
connection down to on ice candidates so,,,
both users will have to do the same,,,
thing,,,
okay so now inside of create answer,,,
let's go ahead and continue here and,,,
actually,,,
process this so in create answer we're,,,
going to get the member id and we're,,,
also going to get the offer from our,,,
user,,,
so let's go ahead and get that offer and,,,
when we call this function you'll see,,,
where this actually comes from so we're,,,
getting an offer on create answer when a,,,
user sends this over and what we need to,,,
do with this offer is go ahead and set,,,
this as a remote description so every,,,
single peer will have a local,,,
description and they will have a remote,,,
description so each peer connection has,,,
two descriptions so let's go ahead and,,,
call this so we'll do pureconnection dot,,,
set,,,
remote description,,,
and we're just going to go ahead and,,,
pass in the offer so the offer for peer,,,
two will be that or the remote,,,
description for peer two will be the,,,
offer now peer two also needs to create,,,
an answer to send back to peer one so,,,
we'll go ahead and create an answer and,,,
the answer will be await and we're just,,,
going to go ahead and call peer,,,
connection,,,
dot create answer,,,
so earlier we called,,,
create offer and for peer 2,,,
or the remote peer we're calling create,,,
answer i guess i shouldn't call this,,,
peer to i should just say the the,,,
receiving peers so basically the second,,,
period that joined,,,
okay so we create an answer and now we,,,
need to set our local description for,,,
that second peer so we're gonna go ahead,,,
and call pureconnection.set,,,
local description so remember we called,,,
this for peer one on create offer we,,,
took that local description and set that,,,
as the offer but in peer two's case,,,
we're going to go ahead and throw in the,,,
answer so for pier 2 the remote,,,
descriptions the offer and the local,,,
description is the answer,,,
all right so,,,
once the peer once the second peer,,,
creates the answer what do they need to,,,
do well they need to send back their sdp,,,
answer so let's go ahead and do this so,,,
we're going to take this entire method,,,
right here and we're just going to send,,,
this back to peer1 or the first peer,,,
okay,,,
so we're calling client.send message to,,,
peer and the type will be of answer and,,,
then we're going to take the actual,,,
answer,,,
let's copy that and we'll send the,,,
answer to peer one we have the member id,,,
because we passed that in here okay so,,,
now we actually want to call create,,,
answer so let's go into our handle,,,
message from peer function and this is,,,
where we need to process everything so,,,
we'll minimize all this so we'll,,,
minimize the create offer and create,,,
answer and then inside of handle message,,,
from peer let's go ahead and ask a few,,,
questions so the first question we're,,,
going to ask is going to be the type of,,,
message so we're going to say if message,,,
dot type remember we're sending that,,,
entire object so we actually have this,,,
type value so if the message is an offer,,,
let's go ahead and actually create an,,,
answer so we're going to go ahead and,,,
grab this function right here so we pass,,,
in the member id,,,
and the offer into it so if we received,,,
an offer let's go ahead and paste this,,,
in so we'll go ahead and throw in the,,,
member id so we need to know who to send,,,
this message back to so we'll just go,,,
ahead and do message dot offer okay so,,,
that's the member id and that's the,,,
offer and that's where we get it so this,,,
offer will be set as a local description,,,
now we want to ask this question one,,,
more time and what i want to do here is,,,
also process the answer so when this,,,
peer creates the answer and sends the,,,
answer back we need to also process this,,,
from handle message from peer so let's,,,
copy all of this right here and we're,,,
going to say if the message type is of,,,
an answer let's go ahead and actually,,,
add the answer so we're going to create,,,
this function right now so we'll call,,,
this add answer and let's go ahead and,,,
actually process it so,,,
in add answer we're just going to do,,,
message.answer we're going to get this,,,
back from up here and we don't need the,,,
member id anymore because we're not,,,
sending a message back so that's going,,,
to complete that transaction,,,
so let's go ahead and actually add the,,,
answer so we'll go down here just below,,,
create answer so this will be that first,,,
peer the peer that initiated the offer,,,
they're going to get back the answer and,,,
then they need to process this so we'll,,,
go ahead and call add answer and we'll,,,
make sure that this is an async function,,,
and let's go ahead and grab the answer,,,
we'll complete the function and all we,,,
need to do here is go ahead and set the,,,
answer so we're first going to check if,,,
we have a current remote description so,,,
we'll use a not operator so if pure,,,
connection,,,
dot current remote description so this,,,
is actually how we can get it so,,,
if,,,
pureconnection.currentremote description,,,
just want to type that slowly so if we,,,
currently don't have a remote,,,
description let's go ahead and set it so,,,
we'll just do pure connection dot set,,,
remote description and we're just going,,,
to throw in the answer,,,
so i just want to recap this real quick,,,
so,,,
remember peer one sends out,,,
the offer so let's see we create,,,
everything oh that's pure connection,,,
let's go into crete offer so peer one,,,
sets their local description and sends,,,
out the offer and then peer two when,,,
they get that offer sets their remote,,,
description and their local description,,,
but the last thing in this process is,,,
peer one still needs to set their remote,,,
description which is going to be,,,
that answer okay so,,,
pier one or the first pier is going to,,,
go ahead and set that remote description,,,
and that almost completes the process,,,
but we still want to do one more thing,,,
we still want to set the ice candidates,,,
so let's take this right here and let's,,,
copy and paste it and we're going to say,,,
if the message type is of candidate so,,,
remember inside of create peer,,,
connection,,,
both peers will send out these,,,
candidates as the candidates get,,,
trickled in so let's go ahead and go up,,,
here,,,
so if the message type is of candidate,,,
what do we want to do here so we're just,,,
going to go ahead and check if we have a,,,
pure connection so let's just double,,,
check this so we'll say if we currently,,,
have a good peer connection let's go,,,
ahead and call peer connection dot add,,,
ice candidate,,,
so this is actually how,,,
we add a candidate to our peer,,,
connection so we're just going to call,,,
message.candidate,,,
so we sent out the candidate right here,,,
so we're just calling message dot,,,
candidate,,,
all right so let's just recap a few,,,
things let's make sure everything's,,,
going goo",,,
d let's see let's go back up,,,
here so we get the offer we create the,,,
answer and we get the answer we add the,,,
answer and then when we get a candidate,,,
we go ahead and set that candidate now,,,
there's one other thing that i noticed,,,
here so inside of our create peer,,,
connection function i actually forgot to,,,
add in a track on peer connection on,,,
track so let's take this track and to,,,
the remote stream let's throw that in,,,
and at this point everything should be,,,
working well so we're going to open up,,,
our two tabs and we're going to see that,,,
peer connection take place let's hope,,,
everything went well so let's go ahead,,,
and give this a shot so we'll open up,,,
our browsers and we're going to need a,,,
refreshing everything here so i'm sure,,,
we're going to have some kind of errors,,,
at first so let's just refresh,,,
everything,,,
and it looks like it's already working,,,
awesome so here we go we'll close this,,,
out so you notice how,,,
pier 2 i guess it's on this side i'm,,,
frozen right there that's because i left,,,
and we're going to deal with that leave,,,
functionality in a second but at this,,,
point if i refresh this we're only going,,,
to see pier one so that looks good now,,,
when another peer joins,,,
we're going to see pier 2 join and then,,,
on that other peer side we're going to,,,
see pier 2 or pier 1. so essentially we,,,
just successfully exchanged the offer,,,
the answer the ice candidates and,,,
everything's working well so if that,,,
part,,,
didn't fully make sense go through that,,,
slowly and just kind of try to,,,
understand everything and watch the,,,
beginning of the video where i talk,,,
about that exchange process but we just,,,
finished that up and everything is,,,
working well so let's go ahead and,,,
actually deal with this because right,,,
now if i make a funny face i'll just do,,,
this,,,
and there we go so i'm frozen awesome,,,
so that's what i wanted to do so we want,,,
to fix that,,,
okay so let's go back in here and the,,,
first thing i want to do here is,,,
actually go into my css file and i want,,,
to make sure user one is hidden until,,,
user or user two is hidden until we join,,,
so we're gonna go ahead and grab this,,,
second,,,
video container or the video tag and,,,
we're going to hide it and then display,,,
only when appear joins so we're just,,,
going to go ahead and do user 2,,,
not video but user,,,
2 and we're just going to do display and,,,
we're going to set that to none,,,
okay so user 2 is going to be hidden and,,,
now we can go back into our code or into,,,
our website and there we go,,,
we see user 2 is hidden now the next,,,
thing i want to do is go ahead and,,,
actually display that user as a block,,,
element once they actually join the,,,
stream so we want this for the local and,,,
remote users so both peers want to,,,
trigger this so let's go ahead and go,,,
into create peer connection and we're,,,
just going to copy this right here and,,,
we're going to paste this just below and,,,
we're going to call user2.style.display,,,
and we're going to display this as a,,,
block element so when they join we're,,,
just going to go ahead and display that,,,
as a block element or when they're about,,,
to join and that'll go ahead and get,,,
that taken care of now the next thing i,,,
want to deal with is when i use our,,,
leaves so anytime they leave i want to,,,
go ahead and hide that again and there,,,
is another event we can listen for with,,,
this channel so we're going to call,,,
channel,,,
on,,,
and we can listen for,,,
member left so that's the event and then,,,
we'll add in the function and that's,,,
going to be handle user,,,
left okay so let's create the actual,,,
function we'll bring this down here and,,,
we'll just create this called handle,,,
user left,,,
and this is going to actually take in,,,
the member id we don't need it here but,,,
i figured i want to show you how to pass,,,
that in if you want to actually maybe,,,
remove a specific dom element so we'll,,,
pass in that id and then you can use,,,
this later if you need it so at this,,,
point all we need to do is go ahead and,,,
grab that user2 value so we'll do,,,
document.getelementbyid,,,
and we're just going to go ahead and,,,
grab user-2,,,
dot style,,,
dot display and this is going to be set,,,
to,,,
null or actually we'll just do none,,,
okay so on user leave we're going to go,,,
ahead and hide it but we still have a,,,
few things we need to take care of so at,,,
this point,,,
when a user tries to leave here we're,,,
actually not leaving with that user from,,,
the channel so we can close out the,,,
browser but by default if agora sees any,,,
activity after about 20 or 30 seconds,,,
then that user left will be triggered so,,,
we want to actually trigger this,,,
whenever the user actually leaves so it,,,
happens right away so let's go down here,,,
and let's actually log a user out and,,,
leave the channel,,,
so we're going to create another,,,
function called leave,,,
channel,,,
and we're just going to go ahead and,,,
make this an async function again and at,,,
this point let's go ahead and call the,,,
two functions so the first thing we want,,,
to do is create or call await,,,
channel,,,
dot leave so we want to leave the,,,
channel and then we want to log out as a,,,
user so we're just going to go ahead and,,,
call client,,,
dot log out,,,
okay so leave channel should be called,,,
anytime a user leaves now one thing we,,,
could do is we could just go ahead and,,,
actually trigger this anytime a user,,,
clicks a leave button but we all know,,,
users don't actually work that way they,,,
usually just close their laptop or click,,,
x up here and we want to account for,,,
that so at this point let's just go,,,
ahead and call leaf channel on window so,,,
we'll add an event listener to the,,,
actual window and we can add an event,,,
listener called before unload so,,,
basically before the website actually,,,
closes we can call before unload and,,,
anytime a user closes this out we're,,,
just going to call leave channel so that,,,
will ensure that a user leaves or,,,
actually leaves a channel whenever their,,,
window just closes out,,,
now at this point i'm going to need to,,,
wait a little bit because we've,,,
technically joined with a new user every,,,
single time that channel is refreshed so,,,
go ahead and give this about maybe 30 to,,,
40 seconds let every single user leave,,,
the channel if you've been refreshing it,,,
and then we'll just test this out from,,,
scratch because what's going to happen,,,
is if a user,,,
joins right now and then we actually try,,,
to join with another user it's going to,,,
toggle that handle user left function,,,
anytime another user leaves and if we,,,
have two users in there but a third user,,,
leaves it's going to remove that dom,,,
element so i think that might have been,,,
about 30 seconds let's go ahead and just,,,
check this out,,,
let's see so we're seeing this handle or,,,
this member left function being called,,,
so it looks like it completed all of,,,
those and let's go ahead and just try,,,
this out so we'll open this up in,,,
another tab,,,
so we see two users perfect and now when,,,
we leave so let's just close this out,,,
there we go it removes it and that looks,,,
good so let's try this one more time,,,
let's give this a test there we go it,,,
looks good awesome okay sweet yeah we,,,
just needed to do that delay because by,,,
default again if we don't call a,,,
function in fact let me just show you,,,
because uh i guess while we're here i,,,
want it to make sense here so let's,,,
remove that and let's not actually call,,,
the leave channel function,,,
so let's open this up here and let's,,,
join with the user and then let's really,,,
quickly,,,
leave with this user and join with,,,
another so at this point we see two,,,
peers in the chat and they're connected,,,
they should be able to communicate but,,,
the problem here is about after 30,,,
seconds because i left with that,,,
original user they are going to leave,,,
the channel by default after that time,,,
and it's just going to remove this,,,
window so that's why we need to call it,,,
manually because then agora will just,,,
respond on its own so i might just fast,,,
forward here give it some time there we,,,
go it just triggered it and we're,,,
supposed to be still in our conversation,,,
but because that other user that just,,,
left left the channel officially now,,,
that element was removed for the dom so,,,
yeah that was kind of our issue so now,,,
if i actually go ahead and,,,
remove this or comment this out or take,,,
out that comment now the user will be,,,
removed whenever we tell them to,,,
so the next thing i want to do here is,,,
go ahead and start creating dynamic,,,
rooms so up until now we only have one,,,
room name and that's main and i told you,,,
earlier that we were going to go ahead,,,
and append a room name to the url so we,,,
can actually create multiple rooms and,,,
have people join those rooms so how,,,
we're going to do this is we're going to,,,
create another page and this will be a,,,
lobby and essentially we're going to,,,
have a form where we can enter a room id,,,
share that room id with somebody and,,,
then they can go ahead and enter that,,,
same name and join this specific channel,,,
so let's go ahead and create a new,,,
template here and we're going to call,,,
this lobby.html,,,
and inside of this page let's go ahead,,,
and set up our boilerplate code here so,,,
we're just going to start typing in html,,,
we'll set this up i'll go ahead and set,,,
the title here,,,
and in here inside of the body i'm just,,,
going to go ahead and actually remove,,,
that script tag and we're going to,,,
change this to,,,
lobby.css because we're going to add in,,,
our own css in a bit so let's actually,,,
add that right now so it doesn't throw,,,
any errors so we're going to call this,,,
lobby.css,,,
okay so inside of lobby.html let's go,,,
ahead and build out our form so we're,,,
going to go ahead and create some tags,,,
here,,,
so for this we're just going to go ahead,,,
and do form give it an id and the name,,,
is going to be join,,,
dash form,,,
so with this form let's go ahead and add,,,
in some input fields so we'll do input,,,
and for this value this will be a type,,,
of text here so that's going to be the,,,
actual invite code and for the name i'm,,,
just going to call it,,,
invite link,,,
so we'll do invite underscore link and,,,
you can call this whatever you want i,,,
just,,,
made it like that when i built out the,,,
demo so we're going to leave it like,,,
that and i'm going to make sure that,,,
this field is required so you can't join,,,
a room without an invite link so you,,,
have to enter that so the next input,,,
value this is going to be the actual,,,
submit form so we're going to go ahead,,,
and set the type to submit,,,
so type is going to be equal to submit,,,
and then the value so we want to,,,
actually have some text here we're just,,,
going to say join,,,
room and that's going to be it okay,,,
let's create some space here so let's go,,,
ahead and check out the page make sure,,,
that we have this set up here so we're,,,
just gonna do lobby,,,
and we'll close out the second one,,,
so here's our join form and we are ready,,,
to add in some functionality here so,,,
we're gonna throw in our invite code,,,
here or let's say we have a room name,,,
like,,,
learn code or something like that,,,
whatever we want it's up to us we're,,,
just going to throw in some kind of,,,
values in here so let's go ahead and,,,
move to this part here and we're just,,,
going to go ahead and add in our,,,
javascript code directly in line so,,,
we're just going to go ahead and create,,,
the script tag and in here the first,,,
thing i want to do is go ahead and get,,,
my form so the forum is going to be,,,
document.getelementbyid,,,
and we're just going to get the join,,,
form so we'll get that join form once we,,,
have that let's go ahead and add an,,,
event listener to it so we'll do form,,,
dot add event listener and specifically,,,
we want to listen for the submit event,,,
and we're going to create the function,,,
in line here so we're just going to go,,,
ahead and create the arrow function,,,
and when we submit this form the first,,,
thing i want to do is actually just go,,,
ahead and prevent that default action so,,,
i don't want the form submitting,,,
anything i want to actually take care of,,,
what happens next so what i'm going to,,,
do here is just go ahead and grab the,,,
invite code so we'll set a variable so,,,
we'll do invite,,,
code and this is going to be e.target so,,,
we're going into the form and we're just,,,
going to grab,,,
the value of invite link so invite,,,
underscore link so we're going to grab,,,
that invite link right there and we're,,,
going to set that to invite code and,,,
then we just want to redirect our user,,,
to the next page so we're going to do,,,
window.location,,,
and this is going to be with the,,,
backticks we're going to do,,,
index.html,,,
and then we're just going to throw in,,,
the room id so we'll do room is equal to,,,
and then we'll throw in the invite code,,,
okay so,,,
when you're actually creating this,,,
invite code try making sure that it's,,,
only one word you could just go ahead,,,
and actually parse it make sure there's,,,
no spaces in there because that could,,,
throw issues i'm not going to focus on,,,
that in this video but i would highly,,,
recommend forcing users to make this one,,,
word because if they're spaces when,,,
we're actually creating that room id,,,
that might be an issue,,,
okay so we have the form and when we,,,
submit it it should go ahead and,,,
redirect a user to the index page with,,,
the invite code so we still have some,,,
more work to do but let's go ahead and,,,
test this out so we'll just test this by,,,
adding in some kind of id we'll do one,,,
two three we'll do join room,,,
and it looks like we have an error so,,,
let's go ahead and see what's going on,,,
there so for some reason the invite code,,,
is not actually working so we did,,,
e.target oh we need the value so there,,,
we go,,,
i thought that looked weird because we,,,
actually got the object okay so we'll,,,
refresh that we'll do one two three,,,
join and there we go so we have,,,
index.html in the room of 123. so to,,,
actually make this room we need to go,,,
ahead and get this value from the url so,,,
back in index.html,,,
or main.js actually let's go ahead and,,,
open this up and at the top of the page,,,
let's go ahead and actually get that url,,,
so just underneath our uid actually,,,
we'll bring bring this right here let's,,,
go ahead and parse the url and get the,,,
values,,,
so the first thing i want is the actual,,,
url parameters so we'll go ahead and set,,,
up the query string here and this is,,,
going to be window.location.search,,,
and then once we set this up we're going,,,
to go ahead and get the url parameters,,,
so we'll do url params and this is going,,,
to be,,,
new,,,
url search params and we're just going,,,
to throw in query string in here okay so,,,
we're going to get all that and then,,,
we're going to go ahead and get the room,,,
id so we're going to do let,,,
room id so we'll set this variable up,,,
and this will be url params and we'll,,,
just call get and then throw in the,,,
actual room value so once we get that,,,
room id i just want to make sure that a,,,
user does have a room id before they,,,
actually go to a specific room so we're,,,
going to use a not operator and we're,,,
going to say if there is currently not a,,,
room id so let's say that a user tries,,,
to go to this page they just try to go,,,
to index.html or whatever we call that,,,
page we just want to redirect them back,,,
to the login page whenever they don't,,,
have a value in here so we'll do,,,
window.location,,,
and we'll just do lobby.h,,,
okay so we have our room id and let's go,,,
ahead and bring this in here so on,,,
channel we're no longer going to join,,,
the main channel we're just going to go,,,
ahead and throw in that room id so,,,
that's going to replicate this right,,,
here so let's go ahead and just remove,,,
that now so let's go ahead and open up,,,
our page and check this out so at this,,,
point let's just go into index.html and,,,
this should redirect us so if i click,,,
this it redirects us back to lobby so we,,,
cannot join,,,
index.html without some kind of room id,,,
so let's go ahead and add in one two,,,
three we'll join,,,
and here we go we see ourselves here so,,,
let's go ahead and open up another tab,,,
here and let's go ahead and send the,,,
user to the lobby page so we'll just do,,,
lobby.html and let's say this user right,,,
here wants to invite user number two,,,
we'll give them this invite code we'll,,,
just do one two three and then when they,,,
join there we go we're in the same room,,,
now if this user leaves back to the,,,
lobby and let's say they join with one,,,
two three four,,,
they're gonna join a room but they're,,,
gonna be in their own room because that,,,
room name actually changed so perfect,,,
everything's looking good this is,,,
exactly what we wanted here and at this,,,
point what i'm ready to do before we,,,
actually start styling this is i'm ready,,,
to add in some controls so we're gonna,,,
add in some controls here to toggle our,,,
mic toggle our camera and actually leave,,,
our room and then we'll actually start,,,
making this application look pretty,,,
awesome so a lot of good work so far if,,,
you got this far you should be proud of,,,
yourself let's go ahead and move on to,,,
the fun stuff of actually making this,,,
thing functional and look good so we'll,,,
go back into index.html here and in here,,,
what i want to do is go ahead and create,,,
a container for my controls so we'll add,,,
this just below our videos we'll go,,,
ahead and create a div here and i'm just,,,
going to go ahead and give this the id,,,
of controls so we'll do controls here,,,
and then let's go ahead and actually add,,,
in some controls so we'll create some,,,
space here and each control item is,,,
going to be wrapped inside of a div so,,,
we'll create a div and i'm going to give,,,
this a class of control dash container,,,
so we have our control container and,,,
this specific item right here will be,,,
the camera button so we'll do camera,,,
btn and i'm actually going to give you,,,
some images to work with if you want to,,,
use your own icons you can go ahead and,,,
throw those in but i want to give you,,,
some specific images to use here so we,,,
have our control container and our,,,
camera button and let's go ahead and add,,,
in the image and then we'll drag it in,,,
here so we'll go ahead and do image,,,
close this out and then we'll set up the,,,
source here,,,
now for the images i'm going to go ahead,,,
and refer you to the github repo if you,,,
want to use the same exact icons that,,,
i'm using so i'll go ahead and drag this,,,
into frame and this is going to be,,,
linked up in the video description so go,,,
ahead and download this entire repo so,,,
at this point i just want to walk you,,,
through this just to kind of make sure,,,
you see all the steps here and let's,,,
just go ahead and bring this into our,,,
desktop so we have the folder,,,
we'll go ahead and open up the zip,,,
folder grab the icons folder and drag,,,
that out here and then let's close this,,,
up here so we'll close the repo again,,,
find that in the video description and,,,
then drag this into your peer chat,,,
folder,,,
okay so now we have the icons here and,,,
here we have a camera uh invite a mic,,,
and a phone icon so we'll just have a,,,
few of them in there and we're just,,,
gonna use the ones that we need right,,,
now so at this point let's go ahead and,,,
actually set up the images here,,,
so we'll go into the icons folder and,,,
the first one i want to grab is going to,,,
be camera.png so these are all in here,,,
so we see camera.png and once i have,,,
that i just want to go ahead and,,,
duplicate this two times and set up the,,,
other icons here so this one's gonna be,,,
a mic button and we're gonna do,,,
mic dot png and then for the leave,,,
button we're gonna go ahead and change,,,
the id to leave so leave btn and then,,,
this is just gonna be a phone so it's,,,
going to be like we're hanging up the,,,
phone and there we go we have our icons,,,
so these still won't be visible because,,,
the icons are white and our background,,,
is currently white so let's go ahead and,,,
actually create some styling so we have,,,
this container here for the actual,,,
buttons here and this wrapper so let's,,,
go ahead and style these up so we'll go,,,
into not lobby.css but main.css here and,,,
let's go ahead and actually style the,,,
controls so the first thing i want to do,,,
is actually get the buttons here so,,,
we'll do control,,,
dash container,,,
and for this let's go ahead and give,,,
this a background color so i'll do,,,
background color and i actually have an,,,
rgb color that i want to use here so,,,
we'll just do rgb and i'll just add in,,,
these values so 179 and then we'll do,,,
102 and then we'll set some opacity here,,,
so 249 and then the opacity of point,,,
nine here so i just want to make sure,,,
that you can sort of see through them,,,
because we are going to be placing the,,,
icons over in the video frame okay so we,,,
have a background color let's go ahead,,,
and add in some padding,,,
so for the padding we'll just do 20,,,
pixels all around,,,
set that up here and then we'll just,,,
make sure there's circles so we'll do,,,
border radius 50,,,
and then after that we also want to make,,,
sure that the button is centered or the,,,
actual icon image is centered and set in,,,
inside of this container so we'll just,,,
do,,,
display flex here,,,
so we'll display flex and then we'll,,,
just do justify content and that's going,,,
to be centered and then we'll do align,,,
items centered so we want to make sure,,,
it's centered horizontally and,,,
vertically okay so we're going to center,,,
that and we also want to make sure the,,,
buttons look clickable so we'll do,,,
cursor,,,
pointer and then we want to style the,,,
actual images inside of this container,,,
so let's go ahead and take the control,,,
container and we'll just take the image,,,
tag and we'll give it a heightened width,,,
of 30 pixels so 30 pixels and then,,,
width is going to be 30 pixels and then,,,
for the leave button i want to make sure,,,
that this is red so we're just going to,,,
go ahead and give this a different,,,
background color so leave button we're,,,
just going to do background color and,,,
this is going to be an rgb color so rgb,,,
and the value here is going to be 255,,,
and then we'll do,,,
80,,,
80 and then we're just gonna set that to,,,
point,,,
nine actually for this let's just not,,,
give it any opacity okay so the next,,,
thing i wanna do is style the actual,,,
container so inside of our page here,,,
index.html we're gonna style the,,,
controls wrapper so we just want to make,,,
sure we position this at the bottom of,,,
the page and we want to make sure that,,,
it's centered so let's go ahead and get,,,
that container so we'll do controls,,,
and we're going to do position fixed,,,
here so fixed position so this way we,,,
can place it anywhere in the page,,,
and we want to make sure this is at the,,,
bottom but not exactly touching the,,,
bottom so we'll just set that at 20,,,
pixels and then we want to center this,,,
so we'll do left 50,,,
and then we can do transform,,,
and this will be transform x right there,,,
and then we can do negative 50,,,
so that's going to go ahead and center,,,
that and then we want to inline all the,,,
items so we'll do display flex and we,,,
can just do,,,
column,,,
of one em which want to make sure that,,,
we're not call them but we wanna add in,,,
a gap so some spacing between each item,,,
and we'll just do one em,,,
all right so let's go ahead and check,,,
this out now let's see what we have,,,
let's join the page we'll just join the,,,
room of one and there we go so we have,,,
our control buttons and everything looks,,,
good so let's go ahead and actually link,,,
this button right here up to the page so,,,
we'll go ahead and actually make this a,,,
link so we'll just wrap it,,,
so just above the div here let's go,,,
ahead and,,,
create a href here and we'll just point,,,
this to lobby.html,,,
so on the leave button all the users,,,
going to do is just go back to the lobby,,,
so just go ahead and,,,
wrap this entire item fix the,,,
indentation and we should be good to go,,,
okay so if i click this there we go we,,,
can leave if i go ahead and add in a,,,
room name we're here and that should be,,,
good to go okay so let's add in the,,,
functionality to these buttons so right,,,
now if i'm clicking it nothing actually,,,
happens so let's go ahead and create,,,
some functions here and toggle a few,,,
things so let's go back into our main.js,,,
file and at the bottom of the page just,,,
before or just after leave channel let's,,,
go ahead and create this function so the,,,
first thing we want to do is toggle the,,,
camera so we're going to call this,,,
toggle camera and we'll make this an,,,
async function,,,
and in here what we need to do is first,,,
find the video track so the actual,,,
camera we'll just we're just going to go,,,
ahead and set this to video track and,,,
we're going to look inside of local,,,
streams and we're just going to search,,,
all the tracks we're going to call it,,,
get tracks and we are specifically,,,
looking for a track that has the value,,,
of video so we're going to call find,,,
and in here we're just going to loop,,,
through look for the track and,,,
specifically we're going to check if the,,,
track dot kind value,,,
is equal to video,,,
okay so let me just go ahead and close,,,
this out so we're getting the video,,,
track we're going into local streams,,,
we're finding the track video,,,
and once we have that we just want to,,,
check if this video track is enabled or,,,
not and then we want to switch what,,,
we're going to do with it so we're going,,,
to go ahead and check the video track,,,
and we're going to call enabled,,,
so,,,
enabled,,,
okay so we're checking enabled if the,,,
video track is currently enabled what we,,,
want to do is go ahead and turn it off,,,
so we're going to call video track dot,,,
enabled and we're going to set this to,,,
false that means we're disabling the,,,
track and the camera is going to be,,,
turned off temporarily it's going to be,,,
muted so once we do that we're just,,,
going to go ahead and change the color,,,
of the actual button so we're going to,,,
get the actual button value and this is,,,
going to be,,,
camera,,,
btn,,,
so camera button and we're just going to,,,
do dot style,,,
dot,,,
let's see we're getting background color,,,
and we're going to set this,,,
to,,,
rgb,,,
and the actual value is gonna be 255 and,,,
we're getting 80 and then 80. so that,,,
should go ahead and set that to red so,,,
if the camera track is currently not,,,
enabled that means it's currently muted,,,
then what we want to do is just go ahead,,,
and turn it back on so we're going to,,,
get these two values right here paste,,,
this in we're going to set the camera,,,
enable to true and then we're just going,,,
to change this color right here and,,,
we're going to do 179 and then we can do,,,
102,,,
and,,,
249 and then we can actually do the 0.9,,,
opacity okay so that should toggle the,,,
camera and we're simply toggling the,,,
actual video track and changing the,,,
color so once we do that let's go ahead,,,
and add in the event listener so we're,,,
going to get the camera button we'll add,,,
an event handler to it so we'll bring,,,
this down here dot add event listener,,,
and we're gonna we're gonna listen for a,,,
click event and we're gonna call toggle,,,
camera,,,
okay so that's all we need to do let's,,,
go ahead and test this out we'll open,,,
this up,,,
let's go ahead and click the camera,,,
button turns it off turns it back on and,,,
it looks like we're good to go okay so,,,
at this point we need to go ahead and,,,
toggle the actual mic so before we do,,,
that we're gonna go ahead and go up here,,,
and we're gonna set audio to true,,,
because we have not gotten the audio yet,,,
so that was because i didn't want the,,,
echo to occur so at this point i'm just,,,
going to be able to mute it once it,,,
starts happening but once we set that to,,,
true we're just going to go ahead and,,,
copy this toggle camera function and,,,
paste that down here and simply update a,,,
few values here so we're going to call,,,
this toggle mic now and we need to,,,
update this to audio track so we'll do,,,
audio track and then the type of track,,,
that we're looking for is going to be,,,
audio,,,
and let's go ahead and just update this,,,
so audio track enabled we're going to,,,
update the actual audio track here,,,
update this part right here,,,
and let's see we actually want to,,,
change this to mic button,,,
so mic button and then,,,
mic button okay so we're doing the same,,,
exact thing we're simply checking if,,,
it's enabled if it is we turn it off if,,,
it's not we turn it back on and we style,,,
the button okay so now that we have this,,,
toggle mic function let's just go ahead,,,
and copy this paste it and change this,,,
to mic button and then we're going to,,,
toggle the mic,,,
function here or the call the toggle mic,,,
function,,,
okay so at this point i'm going to hear,,,
some kind of echo and i might have some,,,
issues because we only allowed the video,,,
feed so if you're seeing this right here,,,
this is probably because we need to,,,
reset some settings here because,,,
originally we denied permission for,,,
audio but we need to go ahead and just,,,
reset this so let's go ahead and check,,,
this out we'll go into privacy and,,,
security go into site settings and at,,,
this point let's just reset everything,,,
here so we'll go into camera,,,
we'll reset all of this and then we'll,,,
go back here,,,
site settings and then we'll go into mic,,,
so we denied it earlier so now it's,,,
confused and why we're having access to,,,
it if we already denied it okay so now,,,
let's go ahead and refresh this and now,,,
it's going to ask me for the camera and,,,
microphone tracks before it only asks me,,,
for the camera and i'm going to get my,,,
headphones in here,,,
okay so let's go ahead and allow all,,,
and there we go okay so i hear the echo,,,
it's really loud it's throwing me off,,,
but now i can actually toggle the camera,,,
toggle the mic on and off and both users,,,
can do this so let's go ahead and try,,,
this out so,,,
let's mute it here so if user one turns,,,
off their camera user 2 is also going to,,,
see that user's camera turned off so if,,,
i turn this back on it's going to turn,,,
it on on both sides and that's it for,,,
the control functionality so,,,
we're almost done here we are ready to,,,
style up the page so what i'm going to,,,
do here is go ahead and just add in,,,
styling to the lobby page and this page,,,
we're going to go through this pretty,,,
quick and then we'll move on to setting,,,
the video quality so when the screen,,,
actually gets big you're going to notice,,,
the dimensions of the video itself are,,,
going to be a little bit messed up,,,
they're not going to be messed up,,,
exactly but the quality of the video is,,,
going to be,,,
not the best so we just want to reset,,,
that so that's the last step that we,,,
have to do so let's go ahead and finish,,,
this up and i'm going to go ahead and,,,
close this part out here okay so let's,,,
go ahead and go into our,,,
main.css file and let's start changing,,,
things up so the first thing i want to,,,
do here is go ahead and start resetting,,,
the global settings here so we'll just,,,
go ahead and set this for everything and,,,
we're going to set margin to zero so,,,
basically margin on every single item in,,,
our page is gonna be zero and then,,,
padding is also going to be zero and,,,
then we wanna go ahead and set box dash,,,
sizing to border box so just,,,
just so we actually fit the parameters,,,
of any item that we have so the padding,,,
isn't extended outside of the parent,,,
element i don't know why i'm teaching,,,
css here but yeah,,,
okay so,,,
for the videos we'll display this as,,,
grid we only want one frame here so we,,,
no longer want two frames because of the,,,
style that we're going for we don't need,,,
a gap anymore and we're just going to,,,
set the height to 100 viewport height,,,
so let's go ahead and just see what we,,,
have here so,,,
let's also set overflow to hidden so,,,
overflow,,,
just add hidden here,,,
okay and let's check this out so let's,,,
just see what we have so far,,,
so at this point we just adjusted a few,,,
things so let's see display grid height,,,
is 100,,,
and let's just set the height of the,,,
actual video player to 100 so that's why,,,
i didn't fill it all the way out,,,
okay so this is more of what i wanted,,,
and let me just reset my camera here so,,,
it's more pointed at me now so this is,,,
the height and width that we currently,,,
have we just took up the entire frame so,,,
let's go ahead and just complete the,,,
styling so for the video player,,,
let's also do object fit and we'll do,,,
cover so i make sure that we cover the,,,
entire item,,,
so we'll just set that up and then for,,,
user two let's see we're going to leave,,,
this as is but we want to go ahead and,,,
style the remote user so the remote user,,,
will take up the big screen so as we're,,,
talking to someone we want to see them,,,
in frame but we want to make sure that,,,
our video frame is here in the top left,,,
right here so let's go ahead and,,,
actually add in a new class that we're,,,
going to append to our user so we're,,,
going to create a class called small,,,
frame here,,,
so we'll go ahead and set this up the,,,
position is going to be fixed because we,,,
need to position this anywhere we uh we,,,
need to position it wherever we want on,,,
the page so that will allow us to do,,,
this,,,
for the top here we're going to do 20,,,
pixels from the top,,,
and then we're going to do,,,
left at 20 pixels,,,
okay so for the height let's just go,,,
ahead and set this to 170 pixels and for,,,
the width let's set this to,,,
300 pixels so we want to make it sort of,,,
like a rectangle here and then we want,,,
to give it some round borders here so,,,
we'll just do a border radius of five,,,
pixels,,,
and let's see for the border itself i,,,
want to make sure that it's a purple,,,
border with two pixels make sure that,,,
it's solid,,,
and we need to add px right there and,,,
then for the hex value we'll just do,,,
b,,,
three,,,
and then we'll do six six,,,
f9,,,
now i also wanna make sure that we have,,,
some shadow here so i'm gonna go ahead,,,
and just copy some values here and just,,,
paste them in so we added a box shadow,,,
and then a z index just to make sure,,,
we're,,,
at the top of the page that this element,,,
is always uh towards the front so it's,,,
not hidden somewhere so to actually,,,
adjust our video frame and add this,,,
class let's go back into main.js here,,,
and on pure connection we're gonna go,,,
ahead and actually add this class to our,,,
video frame so let's go ahead and grab,,,
our current user right here so now we're,,,
gonna get user one we're gonna copy and,,,
paste this right here let's create some,,,
space we'll change this to user one so,,,
that's us,,,
and we're just gonna go ahead and add in,,,
a class so we're gonna do classlist,,,
dot add and we're just gonna go ahead,,,
and add the class of small frame,,,
so that'll change our frame and then,,,
after this we also need to make sure,,,
that we remove it anytime a user leaves,,,
so on handle user left wherever that's,,,
at let's go ahead and actually update,,,
this,,,
somewhere here handle user left we're,,,
going to go ahead and grab that same,,,
element and at this point we're going to,,,
remove that class so essentially when a,,,
user joins we'll add in all this styling,,,
to our video frame when they leave we'll,,,
take it out,,,
okay so let's save all of that let's,,,
make sure we can refresh this and let's,,,
check this out,,,
okay so,,,
i'm in here alone i'm going to go ahead,,,
and mute my mic,,,
and we're just going to go ahead and add,,,
in a new user,,,
and there we go so look at that so when,,,
this user joined this video frame went,,,
up here so that's us right here at the,,,
top in this section and this is that,,,
remote user so if i leave,,,
now we're in that big frame so this is,,,
us right here and the remote user is no,,,
longer here so if i add this again let's,,,
go ahead and just watch this update,,,
so our video frame that's currently in,,,
here will jump to the top left so go,,,
ahead and add that and there we go so,,,
that's exactly what we're looking for i,,,
think that looks pretty dang cool and it,,,
kind of represents more of something,,,
that you would see,,,
on a phone or something like that so,,,
speaking of phones let's go ahead and,,,
fix that and i know the quality is kind,,,
of bad here so we're going to adjust a,,,
few things uh in a minute so let's go,,,
ahead and make this actually responsive,,,
so right now if i start bringing this,,,
down,,,
i don't want my face covered up here in,,,
fact i can just do inspect here,,,
and let's just bring this over so when,,,
this video frame actually gets small i,,,
want to make sure that we can adjust for,,,
that so let's go ahead and add in some,,,
styling and some media queries so we'll,,,
go into our main.css,,,
go down below the leave button and we'll,,,
just do at,,,
media screen and,,,
we are going to do and,,,
600 pixels so max width 600 pixels,,,
so basically when we get to 600 pixels,,,
that's when we want things to adjust and,,,
we're just going to go ahead and get the,,,
small frame and we're going to set a,,,
height of 80 pixels and then the width,,,
of 120 i'll leave the actual details up,,,
to you whatever you want to do in your,,,
application is,,,
is a in your control here so i also want,,,
to make sure that the control buttons,,,
are small so control container image i,,,
want to make sure to actually restyle,,,
these so we're just going to set a,,,
height of width height and width of 20,,,
pixels so we just want to shrink those,,,
down a little bit just so they look a,,,
little bit more proper,,,
save that and let's just go ahead and,,,
test it so here we go so that video,,,
frame is much smaller so if i adjust,,,
this there we go when we get to 600,,,
pixels that looks a little bit better,,,
okay so for some reason the control,,,
containers don't seem like they're,,,
resizing,,,
i think they are i just can't really,,,
tell let's just try doing this at like,,,
one pixel or 10 pixels let's just see,,,
okay so that's actually working that's,,,
good that's just the button here okay i,,,
guess i could adjust the padding but,,,
we're not gonna focus on that okay so,,,
we're about to get to the video quality,,,
but before we finish this up i also want,,,
to style that form here so what i'm,,,
going to do here is actually copy and,,,
paste some values so i don't want to,,,
focus on html and css in a webrtc,,,
tutorial so i'll just go ahead and add,,,
in some of the main template code and,,,
then we'll style this up i'll just paste,,,
in some css or i guess we'll just see,,,
how things go so we're going to create a,,,
main container here and we're going to,,,
call this lobby container it's a lobby,,,
container and that's going to wrap the,,,
entire page and inside of this main tag,,,
right here we're going to create a div,,,
and this will be the form container so,,,
we're going to do id,,,
that's going to be form dash container,,,
and if you're looking for the actual,,,
code here you can just go ahead and,,,
check out the github repo and that'll,,,
all be in there so you can see the,,,
actual examples,,,
so in here inside of the form container,,,
we want a header so we're going to do,,,
form container header so form,,,
underscore container,,,
then we'll do underscore header and this,,,
these are double underscores so in here,,,
i'm just going to paste in a value so,,,
we're just going to throw in a p tag and,,,
it's going to have this wave emoji here,,,
and it's going to say create a new form,,,
so after that we're going to go ahead,,,
and create another section for the,,,
actual form so we're going to create,,,
another div,,,
and we're going to go ahead and call,,,
this form content wrapper so give it an,,,
id of,,,
form double underscore content,,,
and then we'll do double underscore,,,
wrapper,,,
and the form itself will actually go in,,,
here so let's take this join form copy,,,
that remove it and paste it into form,,,
content wrapper,,,
okay so that should be it for the actual,,,
template so let's go back in here and,,,
let's go ahead and leave the page here,,,
is our form and let's actually add in,,,
the css now so we'll open up lobby.css,,,
so in lobby css we're going to go ahead,,,
and add in some background color to the,,,
body so i'm going to paste in some code,,,
so that'll give that'll give it a dark,,,
background so i'll save this,,,
and we'll just check this out so that,,,
changes the styling here so once we have,,,
that we'll take the form container so,,,
i'm going to paste in some more code,,,
here so it's going to be the form,,,
container centered with a width here so,,,
we have a border radius a background,,,
color and we position it in the center,,,
so if we open this up here is our form,,,
container,,,
we'll just go ahead and bring this down,,,
and again i'm doing this for the sake of,,,
speeding up the video because this is,,,
not what we want to focus on so the next,,,
thing i want to style is going to be the,,,
actual form container header so in,,,
lobby.css we'll throw that in we're,,,
going to add in some border radius a,,,
different background for the actual form,,,
header some font size and so on so here,,,
we go we see that container there and,,,
for the form content wrapper we'll add,,,
in some padding so we're going into,,,
form content wrapper,,,
let's save that,,,
we're going to add in some padding and,,,
then the actual input fields,,,
so we're going to go ahead and grab two,,,
input values so we're getting the actual,,,
input field here we're styling it up and,,,
we're going to change the submit button,,,
to be purple,,,
okay so that looks much better and that,,,
is our join form so let's say we want to,,,
join our room we'll just call this one,,,
two three again,,,
we'll join,,,
here is our page and when we go back,,,
that looks a lot better okay so the last,,,
thing we have to do here is actually add,,,
in some quality to this video chat here,,,
so let's go ahead and fix this up here,,,
so this is going to be very easy all,,,
we're going to do is go ahead and add in,,,
some constraints here so we'll go into,,,
main.js here and i'm going to create a,,,
variable just above my init function and,,,
i'm going to call this constraints,,,
so constraints and we're just going to,,,
go ahead and throw this into,,,
let's actually fix this up real quick so,,,
we have our constraints and we're just,,,
going to throw this into our get user,,,
media function,,,
so let's see where is that that was on,,,
create pure connection,,,
oh no that was uh i think was in the,,,
init function yeah right here so we're,,,
just going to go ahead and throw this in,,,
here we'll take all those constraints,,,
and throw those in here and let's just,,,
go ahead and recreate these so the first,,,
thing i'm going to do is go ahead and,,,
set the video so instead of just setting,,,
video and audio to true or false we're,,,
actually going to add in some values so,,,
when we add the values it'll be assumed,,,
that these values are true so we'll go,,,
ahead and throw in the width of our,,,
video and what we can do is set a,,,
minimum value so we'll do min as 640 for,,,
the frame size and then we'll set an,,,
ideal width this is what we actually,,,
want our frame to be and we'll set that,,,
to 1920,,,
and then for the max we're going to set,,,
this to 1920. so ideally we want that,,,
video as big as possible because when we,,,
load it up in here we want to make sure,,,
that it's not stretching a small video,,,
frame so that's why the quality is so,,,
bad right now besides maybe other,,,
settings but we're not going to deal,,,
with anything else other than height and,,,
width here so we'll set the width and,,,
then we're going to set the height here,,,
so let's just go ahead and copy all of,,,
this,,,
we'll change this to height,,,
and for this the min is going to be 480,,,
so we're making a rectangle and then,,,
we're going to do 1080,,,
and 1080.,,,
and then for the audio we're just going,,,
to set that to true that's going to be,,,
it,,,
so this is how you can actually adjust,,,
it so we just specify values for our,,,
video so we throw in this entire object,,,
and we throw that into get user media so,,,
now if i save this let's look at the,,,
difference,,,
so look at the video quality it's more,,,
zoomed out now the frame is bigger and,,,
everything looks a lot better so that's,,,
it for this project we are done with,,,
this application and what i want to do,,,
next is spend a moment talking about,,,
group video calling with webrtc so at,,,
this point our application only handles,,,
two users so it's just peer-to-peer and,,,
group video calling is an entirely,,,
different topic in webrtc and there's,,,
multiple ways we can go about doing this,,,
so we're not going to build anything out,,,
but i do want to give you a high level,,,
overview of how to handle that before we,,,
move on to the next project in this,,,
video,,,
so how do we take a technology that's,,,
fundamentally designed to handle,,,
peer-to-peer connections and go beyond,,,
that well it turns out there's actually,,,
three different approaches to solve this,,,
exact issue so let's go ahead and go,,,
over them the first approach we have is,,,
called the mesh network and with the,,,
mesh network we are creating a network,,,
of peers that will all maintain a,,,
peer-to-peer connection with every other,,,
peer inside of a group video call so,,,
let's say we have a call with five peers,,,
well peer one will have to create a,,,
peer-to-peer connection to peer two then,,,
to peer three four and five and all the,,,
other peers in the network will have to,,,
create that same connection with every,,,
other peer inside of that network so it,,,
kind of meshes them together and this,,,
will happen for every other peer that,,,
has to join after this so every new peer,,,
that joins will have to create this,,,
connection and all the other peers will,,,
have to connect back to this peer so,,,
every single time a new peer joins we,,,
now have to maintain a new connection,,,
and this technically does accomplish,,,
what we need here but this approach has,,,
a massive downside and does not scale at,,,
all the problem here is that every,,,
single time a new peer joins we now have,,,
to upload our stream and maintain that,,,
connection so this requires a lot of,,,
upload bandwidth so once you go beyond,,,
four to five peers you're gonna start,,,
seeing a lot of issues here so this,,,
approach is not recommended if you're,,,
looking to scale,,,
now the second approach we're going to,,,
talk about is less of a peer-to-peer,,,
architecture and more of a,,,
peer-to-server architecture and that is,,,
the mcu approach which stands for,,,
multi-conferencing unit so how this,,,
works is now each peer will be connected,,,
to the server and unlike the mesh,,,
network we're going to upload our stream,,,
to that server and that server will take,,,
in all the incoming streams process them,,,
mix them together and then send them,,,
back to the peers now the upside to this,,,
is that it does scale better and you,,,
only have to upload your stream once the,,,
downside is that that server that you're,,,
going to send this to has to be very,,,
beefy it has to process all of this so,,,
it could get very expensive to actually,,,
handle this so it scales better but the,,,
downside is is that it's going to be,,,
more expensive for the third and final,,,
approach we have the sfu method which,,,
stands for selecting forwarding unit and,,,
this is very similar to the mcu approach,,,
in the sense that we still have appeared,,,
to server architecture and we're still,,,
only uploading our stream once to that,,,
server now where this differs from the,,,
mcu approach is that we're no longer,,,
going to mix those streams together and,,,
process them the server will now act as,,,
a router and simply just make sure that,,,
we get all of our peer streams and that,,,
all of our peers get our stream so it's,,,
simply going to direct traffic and,,,
that's all it's doing so the benefit to,,,
this is that because we're no longer,,,
mixing and processing all those streams,,,
we now don't need such a beefy server,,,
and it's going to be a lot less,,,
expensive now while this approach does,,,
have a lot of benefits to it one thing,,,
to be mindful of is that we're still,,,
only uploading one stream but we are now,,,
having to download multiple streams so,,,
if we start having a group video call,,,
with maybe 20 30 40 people,,,
you do have to be mindful of people's,,,
download speed most people nowadays,,,
would probably be fine with this but,,,
it's just something to consider is the,,,
fact that you do need download speed in,,,
order to start downloading all those,,,
streams so the benefit that the mcu,,,
approach has is that users only need to,,,
upload once and download once with the,,,
sfu method the upload once and then,,,
download multiple times now in part two,,,
of this video we are going to be,,,
creating a group video called an,,,
application but instead of using one of,,,
the three approaches that i talked about,,,
we're gonna go another route and we're,,,
just gonna use a third-party service so,,,
anytime you're building out an,,,
application like this you have to decide,,,
do i want to build all this out by,,,
myself do i want to set up that,,,
infrastructure and deal with scaling,,,
this application or is there a third,,,
party service that can make my life a,,,
lot easier so the trade-offs is that,,,
usually a third-party service is going,,,
to cost you some money but that can also,,,
save you money down the line if you're,,,
having to still pay engineers or spend,,,
time on building this out so i wanted to,,,
make sure that you can see both,,,
approaches make that decision for,,,
yourself and if you're going to follow,,,
along for the next project go ahead and,,,
stick around and i'll see you in part,,,
two,,,
hey welcome to part two of this video i,,,
have no way of knowing if you just,,,
skipped ahead to this part or if you,,,
followed all the way along up until this,,,
point but either way this is a great,,,
place to start for project number two,,,
and with that being said let's go ahead,,,
and do a full walkthrough of the project,,,
i'll show you where to get the source,,,
code and we're just going to start,,,
coding this up so,,,
if you want to get the source code for,,,
the project there will be a link in the,,,
video description go ahead and download,,,
this i'll add in instructions on how to,,,
actually get started there's also a,,,
starter template here we're going to,,,
cover this and that's all down in the,,,
description so this is our project and a,,,
little back story behind this is i,,,
actually ran a,,,
open source project for a project called,,,
mumble and it was a social network that,,,
we built out and after about 20 days and,,,
500 plus prs it just got way too,,,
overwhelming to manage it so i just kind,,,
of let it go but i did want to keep the,,,
name because i love the logo love the,,,
name so i decided to make this like a,,,
version of mumble so that's going to be,,,
the name of our project here and that,,,
logo and all that's going to be also in,,,
the source code so right away when we,,,
join this website we're going to see or,,,
when we join a room we're going to see a,,,
mumble bot send us a message and it's,,,
always going to welcome us to the room,,,
here so we have a chat room right here i,,,
can say hey and then hi that's all real,,,
time and any other user in this room,,,
will actually see this and i also see my,,,
name right here now if i actually want,,,
to share my screen i can go ahead and,,,
toggle this right here select the screen,,,
i want to share i have two screens let's,,,
say i'm teaching someone a code or i'm,,,
doing a tutorial we can actually go,,,
through and share everything that we,,,
have so if another user wants to join,,,
this room what we're going to do is go,,,
ahead and copy and paste this link right,,,
here and immediately if they don't have,,,
a name it's going to redirect him to the,,,
lobby so let's say user number two is,,,
paul and the room name is one so we see,,,
dennis in the room as a participant,,,
and when paul joins the room,,,
immediately paul is going to see,,,
dennis's stream so if paul wants to put,,,
dennis's stream into focus all he has to,,,
do is click on this and this will expand,,,
it into focus and we can always toggle,,,
it just keep changing that and it's just,,,
going to adjust our actual video frames,,,
basically change what's in focus so let,,,
me actually hide this so when paul joins,,,
we see welcome paul and now we see two,,,
participants here so paul will not see,,,
any messages that were in the room prior,,,
to his stream or him joining the room,,,
and if we go back to this room dennis is,,,
going to see that paul has joined the,,,
room so if paul actually wants to join,,,
as a presenter here we're not going to,,,
deal with invites maybe in the live demo,,,
we'll actually add this but at this,,,
point anybody can join the room so if,,,
paul joins now this is paul's stream so,,,
if paul wants to show his face in the,,,
frame here we can toggle back and forth,,,
here and if we go back to dennis's,,,
screen dennis can also toggle back and,,,
forth so dennis can now see paul,,,
now if paul leaves the room we can go,,,
ahead and just leave like that by,,,
closing this out we'll actually get an,,,
alert that paul has left the room so,,,
that's the core functionality we just,,,
have participants we have full,,,
capability of toggling the mic toggling,,,
screen sharing changing up our video,,,
frame and actually one thing is when you,,,
actually go from sharing your screen,,,
back to presenting,,,
i made sure that your mic is muted and,,,
that your camera is muted,,,
i don't know i just thought of this,,,
funny situation that if you were sharing,,,
your screen but maybe you had someone in,,,
the room with you and then you went back,,,
to just turning off your screen sharing,,,
and your camera turns back on that might,,,
be a little bit awkward it just might,,,
create a funny situation so you'll,,,
actually have to toggle your camera i'll,,,
just show you that one more time so for,,,
sharing and then we go back to here so,,,
we toggle the camera or screen sharing,,,
off camera starts as off and so does the,,,
mic so a little warning there,,,
anybody can create a room and again the,,,
messages are in real time so if i,,,
message something right here everybody,,,
in the room will actually see the,,,
message so source code live demo and,,,
with that being said let's go ahead and,,,
close out this demo and let's get,,,
started,,,
okay so to get started with this project,,,
we're going to want to download the,,,
initial project files get that starter,,,
template and then we'll just start,,,
building on top of this so this github,,,
repo is linked up in the video,,,
description go ahead and clone it or,,,
download it from here we'll download it,,,
as a zip file in this case and we're,,,
going to want this starter template,,,
right here so this is the code for the,,,
entire project specifically though we,,,
want this starter template and this is,,,
what we're going to build on top of so,,,
let's go ahead and drag this into our,,,
desktop and i'm going to close out the,,,
github repo and we'll open up this,,,
folder and specifically i want this,,,
starter template so we'll bring this out,,,
here,,,
and at this point i'm just going to,,,
delete the zip folder because i don't,,,
need it if you want to actually test it,,,
out get that project up and running you,,,
can go ahead and do that but i'll just,,,
remove that and let's just rename this,,,
to mumble,,,
2,,,
okay so i'm going to open this up in vs,,,
code whatever you want to use as your,,,
text editor that's your choice i'm going,,,
to use vs code because i like live,,,
server so let's go ahead and open this,,,
up,,,
and we'll just check out what this,,,
project looks like and we'll recap the,,,
files that are in here right now so the,,,
first file i want to look at is going to,,,
be room.html i'm going to open this up,,,
in live server because i first want to,,,
see the output and then we'll actually,,,
take a look at the code here so we have,,,
a header bar right here a sidebar for,,,
the chat some stream controls and,,,
participants on the left now if we go to,,,
create room we have a lobby.html page,,,
and this is simply,,,
a form with a form to enter your,,,
username the room name and then an,,,
actual button to go to that room so not,,,
much of a template there's just some,,,
functionality added here so let's go,,,
ahead and actually go back to the room,,,
so we'll go back to room.html and,,,
let's take a look at some of the,,,
javascript that was added here so we do,,,
have responsiveness right here if we,,,
move that in our participants can be,,,
opened up by toggling this right here,,,
and we can also toggle the chat by,,,
clicking this right here so we're,,,
actually going to build in this section,,,
in the middle right here for the actual,,,
stream right here this is something that,,,
we're going to take care of and actually,,,
hand code out i just left it empty for,,,
now but that's what this looks like,,,
right here pretty simple template so,,,
we'll just review some of the code here,,,
and actually take a look at the ids and,,,
classes that we're using and how all,,,
this was done,,,
so let's go ahead and start with,,,
room.html i'll try to zoom out a little,,,
bit here so we can see that we have our,,,
header bar right here that's repeated on,,,
both pages right here not much to it,,,
we're not really going to mess with this,,,
section we can actually leave it alone,,,
if we go down to our container we have a,,,
room container that encapsulates the,,,
entire room,,,
and we have a section for our members,,,
right here so this members container,,,
actually,,,
goes down pretty far if you can see this,,,
line right here,,,
it actually goes down,,,
pretty far with the demo users that we,,,
currently have in here and if i minimize,,,
this let's go ahead and,,,
minimize just this section right here so,,,
we have the members container,,,
and right after the members container we,,,
actually have the stream container so,,,
this is that middle section right here,,,
so this is that stream container let's,,,
just see what we have in here so we have,,,
some buttons we have the stream actions,,,
with buttons right here we have svgs for,,,
the actual icons we can minimize those,,,
stream actions we'll minimize the stream,,,
container and then we have our messages,,,
container right here so that's an id,,,
that wraps the actual messages and then,,,
each message,,,
uses the class of message wrapper so if,,,
i scroll down we're going to see a lot,,,
of repeated messages eventually we're,,,
going to get rid of all this dummy code,,,
here at least this stuff right here this,,,
will be auto-generated when users type,,,
in a message but if i minimize that,,,
there we go,,,
that closes this section out and here's,,,
the entire page here so our navigation,,,
bar main container room container we,,,
have a members container stream,,,
container and messages so,,,
left side middle and right so if we go,,,
to the lobby let's go ahead and check,,,
this out i'll minimize the head tag,,,
right here and in here we have our,,,
navigation let's go ahead and actually,,,
fix that i want to delete something and,,,
screw something up right away so we'll,,,
minimize the header then we have our,,,
main container which is the room lobby,,,
container here we have a form container,,,
which is going to make up this section,,,
right here that actually contains the,,,
entire form there's some styling there,,,
and if we minimize,,,
this section i guess i don't need to,,,
minimize it so that's our header and,,,
then we actually have the actual form so,,,
lobby forms the class we have our field,,,
wrappers and then the actual input,,,
fields,,,
so not much to the template right there,,,
we just have some styling that's in,,,
styles.css we have a,,,
main.css file this is going to be the,,,
entire template code we're not going to,,,
mess with this at all actually this is,,,
just our base code in our navigation bar,,,
basically any code that's repeated now,,,
any code that's associated with the,,,
lobby and room,,,
let's go ahead and just save those i,,,
hope i didn't delete anything,,,
inside of the room right here this is,,,
any code to the actual room here we have,,,
the styling for our members the,,,
participants the messages all that sort,,,
of stuff here and inside of lobby.css,,,
our form container and so on,,,
now i mentioned javascript here so we do,,,
have a little bit of javascript for our,,,
room and our lobby,,,
so inside of our room we need to make,,,
sure that messages as they're added are,,,
always placed at the bottom here so we,,,
did add a little bit of javascript to,,,
actually make sure that when someone,,,
types this scroll bar automatically goes,,,
to the bottom so we want to see the,,,
latest message here so here we have some,,,
functionality that actually scrolls and,,,
make sure that the message is at the,,,
bottom,,,
and let's see let's just kind of go over,,,
the chat container here we have the,,,
functionality to open and close that,,,
chat container and then also,,,
for the participants right here so the,,,
members container this is that,,,
functionality for that responsiveness we,,,
added something that can toggle this and,,,
make sure that it opens and closes so,,,
that's really the entire template right,,,
here you can kind of go through that,,,
familiarize yourself with everything not,,,
much that we're going to do here in fact,,,
we won't touch this at all,,,
and any code that's currently in here,,,
we're not going to modify anything we're,,,
just going to simply add to it so let's,,,
just go ahead and get started and what i,,,
want to do is go into the room.html page,,,
and i want to start by making a,,,
container for our video frames and then,,,
the actual large display that's giving,,,
the frame that takes up that focus of,,,
the entire page so all the streams will,,,
sit inside of this section right here so,,,
stream container let's go ahead and open,,,
this up we'll minimize this and then,,,
let's just go ahead and add this just,,,
above stream actions so we have our,,,
controls on the bottom i'm also going to,,,
minimize those right there we'll create,,,
some space here and we're going to,,,
create a div and this div is going to,,,
have the id of,,,
streams,,,
underscore container or double,,,
underscore so make sure there's two,,,
underscores right there and inside of,,,
this section we're going to create,,,
another div and these will be the actual,,,
circles that you'll see so each circle,,,
is going to have a video,,,
double underscore container class,,,
okay so we have a video container class,,,
and then the actual,,,
containers themselves will have ids this,,,
will be how we know which containers,,,
associated with which user and when to,,,
actually add in a video frame so we need,,,
a way to actually identify them so for,,,
now let's go ahead and give each user an,,,
id we'll just do user dash container and,,,
this user will have the id of one so,,,
later on this will be dynamic but for,,,
now we'll just do one and then we'll,,,
just increment those so we have the,,,
actual container now we're gonna add in,,,
a video element here later but for now,,,
let's just add in an h1 tag so we can,,,
actually see it and then we'll just go,,,
ahead and throw in the number one so,,,
let's go ahead and create some space,,,
here,,,
and what i'm going to do here is copy,,,
each container and i'll just duplicate,,,
this a few times,,,
so let's just go ahead and copy and,,,
paste a few change the id to 2 the,,,
actual value to 2 here and then we'll do,,,
three,,,
three and,,,
four,,,
so,,,
we're gonna go ahead and style this so,,,
we can see it and here we go we have our,,,
stream container or streams container,,,
and then the actual video container now,,,
above this whenever we click on one of,,,
these streams right here just like just,,,
like i showed in the demo we're actually,,,
going to take that video stream and then,,,
present it into the big container so,,,
let's say someone's sharing their screen,,,
or you want to put focus on someone,,,
this is going to be that section where,,,
we actually add them in and display them,,,
in a larger frame so let's go ahead and,,,
create the div here and this id will,,,
just be,,,
stream whoops made this outside of the,,,
quotes here we'll do stream double,,,
underscore box like that okay so that's,,,
all we need for this section let's go,,,
ahead and just check this out let's,,,
display it and here we go we have some,,,
elements here we don't see much here so,,,
let's go ahead and just style that so,,,
we'll go into our,,,
room.css file so inside of styles we'll,,,
go to room.css,,,
and let's just go ahead and find where,,,
we want to put this so,,,
i want to put this underneath the stream,,,
container section to kind of keep that,,,
hierarchy so we have the main container,,,
and we'll just add the styling here,,,
so we have an id there so we'll just do,,,
stream,,,
double underscore box,,,
and in this section at this point let's,,,
just go ahead and add in some background,,,
colors so we can see it and for the,,,
color i'll just pick one of these i,,,
guess let's just go ahead and grab that,,,
color,,,
and let's just set a height of 60,,,
viewport height,,,
okay so,,,
let's just take a look here we go so,,,
that's going to represent that big frame,,,
right there,,,
and then we actually want to style these,,,
video containers so let's go ahead and,,,
underneath here let's just grab the,,,
video,,,
double underscore container section a,,,
little bit slow there okay so we have,,,
the video container we have the actual,,,
circles here let's grab that,,,
and let's go ahead and start styling,,,
this so the first thing is i have that,,,
number inside of them so let's just go,,,
ahead and make sure that's centered so,,,
we'll do display flex,,,
and let's just go ahead and do justify,,,
content we want to make sure it's,,,
centered this is technically not really,,,
relevant to what we're doing but let's,,,
just go ahead and center it so even the,,,
demo looks good align items let's center,,,
this horizontally and vertically and,,,
then for the actual item let's go ahead,,,
and set a border we'll set this to two,,,
pixels,,,
solid and then i have a shade of purple,,,
that i want to use it's going to be a,,,
hex and this is going to be b,,,
3,,,
6 6 f,,,
9. so that should give us a purple shade,,,
right there,,,
okay so,,,
we should see output let's just make,,,
sure it's connected here we go so,,,
they're not circles yet but we'll fix,,,
that,,,
now underneath here let's go ahead and,,,
make that a circle we'll just do border,,,
dash radius and we'll set that to 50,,,
that'll give us a circle and then,,,
underneath that let's go ahead and do,,,
cursor pointers so we want to make sure,,,
users do know that they can click on,,,
that to expand it so we want to make,,,
sure it's clickable and that will,,,
visually show someone that that is,,,
and then after that let's just go ahead,,,
and set overflow to,,,
none or let's just do hidden so the,,,
video frame itself will be a square and,,,
we want to make sure it doesn't actually,,,
overflow from this container so we want,,,
to make sure anything that overflows,,,
just gets cut out,,,
and let's just finally end this with a,,,
height of 300 pixels,,,
and a width of 300 pixels and we'll make,,,
sure this is responsive too,,,
okay so we have a height and width here,,,
and here we go we have our circles so,,,
now we want to style that container and,,,
actually put these in line so they're,,,
actually correctly placed inside of that,,,
frame,,,
so i'm a little bit zoomed in so that's,,,
why it looks funny normally on a screen,,,
you'd see it maybe around this width,,,
right here but because i'm so zoomed in,,,
it's going to look like they're being,,,
crushed down,,,
so what i might have to do is make those,,,
responsive a little bit sooner than i,,,
planned so let's just go ahead and start,,,
with the container and we'll just see,,,
how that looks,,,
so now we want to style this actual,,,
streams container that holds all those,,,
circles so we'll just do streams double,,,
underscore,,,
container,,,
and let's first display it as flex i,,,
want to make sure it's a flex and then,,,
we'll do flex wrap so whenever they,,,
whenever it starts collapsing in on the,,,
circles they actually go down and,,,
actually wrap the element so do flex,,,
wrap set that to wrap justify content,,,
let's just set that to center,,,
and align items let's also center that,,,
see why do i have space here,,,
okay so i do want to set a margin at the,,,
top let's just go ahead and give some,,,
space so margin top let's set that to 25,,,
pixels and then margin bottom the reason,,,
i want to set some margin at the bottom,,,
we'll actually do,,,
225 pixels the reason why i want to do,,,
this is that if we start zooming in or,,,
let's say we get a lot of frames if,,,
someone scrolls to the bottom if we have,,,
no margin here the buttons will actually,,,
cover that person's video frame so we,,,
just want to make sure that we actually,,,
have some space here so that's why i,,,
added that now i should actually add in,,,
a gap here so let's do that too,,,
so let's just do gap,,,
create some space between the users set,,,
that to 2 em,,,
and there we go,,,
okay so,,,
let's crush down here i want to make,,,
sure this is responsive so this is what,,,
it would actually look like right here,,,
the demo always looks funnier when i'm,,,
videotaping okay so,,,
let's go ahead and actually update this,,,
so let's see the video container let's,,,
create our own media query right here so,,,
let's just copy and paste that and i'm,,,
going to set this at,,,
1400 pixels so what i'm going to do is,,,
grab this video container,,,
copy and paste that in because i'm too,,,
lazy to type it out and let's just,,,
update the height and width so whenever,,,
we're at 1400 pixels we'll set that to,,,
200 pixels in width for the video,,,
container,,,
and then let's just go ahead and copy,,,
this again,,,
and then at around,,,
768 pixels i just want to go ahead and,,,
make these 100 pixels in height and,,,
width,,,
okay so let's check this responsiveness,,,
out,,,
so if i start crushing that down there,,,
we go it starts shrinking,,,
and then they just slowly adjust based,,,
on whatever the current width is so i'll,,,
just keep the zoom at about right here i,,,
think that's a good size if anything,,,
i'll just reduce them down to 200 pixels,,,
permanently and we'll leave those at,,,
least for this video okay so now that we,,,
have our template ready it's time to,,,
move on to displaying our video stream,,,
to the page and also connecting to other,,,
members inside of this video chat,,,
application so we want to see our own,,,
face on here and our peers so let's talk,,,
about how we're going to do this so,,,
in the first part of this video if you,,,
built out that webrtc peer-to-peer chat,,,
application i talked about how we can,,,
scale webrtc to group video calling as,,,
opposed to just peer-to-peer and i,,,
mentioned the three main approaches and,,,
we have the mesh network that we can,,,
build out that has a lot of cons it's,,,
very limited and we also have the sfu,,,
method and mcu method now instead of,,,
going into all of that and building out,,,
our entire network what we're gonna do,,,
is use a third-party service called,,,
agora that builds on top of webrtc and,,,
agora provides us with a lot of,,,
functionality to actually build out and,,,
scale our applications so with agora,,,
we're going to create an account,,,
download an sdk and then just use the,,,
agora sdk to build all the video part of,,,
this application out along with the,,,
real-time messaging so this chat box,,,
participants that's all going to be real,,,
time using agora so agora is a paid,,,
service they,,,
do have a free tier to it we have up to,,,
10 000 free minutes that we can use when,,,
we get started so that should be plenty,,,
for this video to actually build out,,,
your demo so let's go ahead and get,,,
started you don't need a credit card on,,,
file so we'll just go ahead and get,,,
started with agora and i'll just teach,,,
along the way so,,,
let's go ahead and go to agora io the,,,
first thing we're going to want to do is,,,
create an account so do that we're going,,,
to create an app on agora and then,,,
download and connect the sdk,,,
so let's go ahead and,,,
go to login,,,
once you're logged in and you have an,,,
account you'll have this console right,,,
here and in this console we have our,,,
projects here so go ahead and go to more,,,
create a new app here so i already have,,,
a few i'm going to use one of these but,,,
at this point go ahead and create an app,,,
and go ahead and give it the name of,,,
something like mumble 2. for the use,,,
case we'll do,,,
social,,,
live stream i guess we can just do chat,,,
room and then for the authentication,,,
mechanism go ahead and select testing,,,
mode app id if we select this method,,,
right here that's going to require us to,,,
have a token that we have to keep,,,
refreshing so we don't want to deal with,,,
that right now let's just go ahead and,,,
authenticate with only an app id,,,
so once you have this set up go ahead,,,
and click submit i'm not going to click,,,
this because i already have an app so go,,,
ahead and submit that and then you're,,,
going to see your app right here so what,,,
we're going to need is this app id so,,,
you can actually click on this and that,,,
will just go ahead and copy that app id,,,
so we'll get back to this in a second,,,
so at this point once you've created,,,
your app go ahead and go back to the,,,
main console and you should see this,,,
download section right here so agora has,,,
two main sdks we have,,,
let's see we'll actually want to select,,,
web here so let's go ahead and do that,,,
get this out of the way so agora has rtc,,,
so that's one of the sdks that stands,,,
for real-time communication which will,,,
give us video and audio and then we have,,,
rtm which is for real-time messaging so,,,
we'll use that one later but for now,,,
let's start with video sdk,,,
and select four point x so there's a,,,
three point x here we wanna make sure,,,
we're at four point x go ahead and click,,,
on this,,,
go into this section and we're gonna,,,
want this file right here so i'm going,,,
to minimize this and i'm going to drag,,,
this into my desktop and then i'll drag,,,
it into the mumble 2 folder so that's,,,
the sdk we're just going to want to go,,,
ahead and download that and then connect,,,
it,,,
now,,,
at this point i'm just going to grab,,,
this sdk and drag that into my,,,
javascript folder i just wanted to move,,,
that in there i'm kind of doing things,,,
manually but i like to keep it very,,,
simple so if you're more advanced you,,,
can use your more advanced methods but,,,
this way everybody can follow along so,,,
once we have the sdk let's go ahead and,,,
bring that in here,,,
copy and paste this script tag right,,,
here and we'll want to make sure that we,,,
take this agora sdk,,,
let's just copy the name and paste this,,,
above this room.js script tag so we'll,,,
want to make sure that's above it,,,
and now that we have the sdk let's go,,,
ahead and actually create a javascript,,,
file specifically for all the logic,,,
dealing with agora so at this point,,,
inside of the javascript file we're,,,
going to call this room underscore rtc,,,
rtc.js,,,
so that's the agora sdk that's agora rtc,,,
so at this point we're creating a,,,
javascript file that's going to have all,,,
of this logic with agora,,,
so the first thing we need is our app id,,,
to actually use an app with agora so,,,
we'll just go ahead and create a,,,
variable called app underscore id,,,
and in here we're going to need to get,,,
that app id so we can actually,,,
authenticate our user,,,
so back in your console,,,
let's go ahead and actually,,,
go to the console itself so we'll,,,
actually go back in here and we'll find,,,
our app here so go back to your projects,,,
and go ahead and grab the app id here,,,
that you just created so go ahead and,,,
copy that i'm obviously going to blur,,,
out my app id because if somebody gets,,,
this they can start using it and then,,,
use up all of your minutes so let's go,,,
ahead and copy that app id we'll bring,,,
that in here and then i'm going to hide,,,
this later but make sure it's at the top,,,
of your page and just paste that in and,,,
that's how we connect the agora sdk to,,,
our project right here along with the,,,
app inside of our console,,,
so inside of this room underscore rtc js,,,
file let's go ahead and start,,,
configuring everything that we need here,,,
so we have our app id and,,,
at this point what we need for each user,,,
is a uid so each user has to have some,,,
kind of identification here so what i'll,,,
do here is we're going to generate a,,,
user if there's not one inside of,,,
session storage so the first thing i,,,
want to do is go ahead and go into,,,
session storage and we just want to do,,,
dot get item and we want to get a value,,,
of uid so at this point we don't have,,,
this user so we're gonna run a check,,,
here,,,
and we're just gonna say if we don't,,,
have a uid so we're gonna use the not,,,
operator,,,
let's go ahead and just generate a uid,,,
so we're gonna set this variable right,,,
here so we either have nothing or we're,,,
gonna create it,,,
and we're just going to do string so we,,,
want it to be a string value,,,
and we're just going to generate a,,,
random number between 1 and 10 000 so,,,
later on if you had a full scale,,,
application this can be like a uid in,,,
the back end or something that actually,,,
connects to your user so it's more,,,
permanent but at this point we're just,,,
going to generate a number and i'll,,,
leave that other part up to you and,,,
actually i'm going to have a lot of,,,
videos on my channel about how to do,,,
this so,,,
just go ahead and check those out and,,,
i'll actually scale this up so anyways,,,
i'm going on a side tangent okay so,,,
we're just going to generate a number,,,
between 1 and 10 000. so if we don't,,,
have a uid in the session storage go,,,
ahead and generate a uid and then what,,,
we want to do is go ahead and take this,,,
newly generated uid and we're just going,,,
to do session storage dot set item so we,,,
get an item with get item and then set,,,
it with set item we have the key and,,,
then the actual value which is going to,,,
be the uid,,,
so each user is going to need a uid this,,,
is how we know who's who in a stream,,,
this is how we can identify each other,,,
so once we create a uid we'll store it,,,
in the session storage and now we don't,,,
have to create a new uid every single,,,
time a user goes back to the page so,,,
let's go ahead and set a few more values,,,
we also need a token and in production,,,
this is how you would generally,,,
authenticate users with agora we have a,,,
token that we would actually generate,,,
but for now because our authentication,,,
mechanism was set to app id only this is,,,
going to make this process a little bit,,,
easier so we can focus on the core,,,
functionality of agora and get our,,,
application working and,,,
i actually do have a few videos on my,,,
channel on how to do this specific thing,,,
with the token but we're not going to,,,
worry about that right now,,,
so after our token we're going to need a,,,
client object at this point we're just,,,
going to set the variable we'll leave it,,,
like this and the client object will be,,,
like that core interface for all the,,,
functionality for audio and video,,,
streaming it's going to store all the,,,
information about our user and basically,,,
any functionality that we need to,,,
actually start this video stream with so,,,
we're not going to worry about this,,,
until we actually start coding this up,,,
so the next thing i want to do is make,,,
sure that we can get a room id from some,,,
kind of url parameter so our url will,,,
look like this will be room id and then,,,
room and then let's say our room name,,,
will be some kind of number like that,,,
let's just do 234. so what we're going,,,
to need to do is go to our url and get,,,
this room value and then find out what,,,
our room is going to be named so let's,,,
go ahead and get this value we're going,,,
to need to parse that url so,,,
let's go ahead and first get the url,,,
value we'll get the query string,,,
we'll do window.location.search,,,
we first want to get this value then we,,,
want to set the url parameters value and,,,
then get the actual room value out of,,,
this so we'll do url params,,,
and this will be,,,
new,,,
url search params,,,
and we're going to throw in the query,,,
string into this so we have the query,,,
string and then we can actually set the,,,
room value by doing room id,,,
is equal to url params.get,,,
and we're going to look for this room,,,
value so let's just go ahead and pass,,,
that in and this is how we create custom,,,
rooms this is how we can actually have,,,
multiple rooms inside of the same app,,,
right here so what i'm going to do at,,,
this point is if we don't have a room so,,,
if not room id we're going to use a not,,,
operator typically we could just,,,
redirect our user,,,
to the login page but at this point i'm,,,
just going to go ahead and set a room id,,,
for,,,
this purpose so we're not having to,,,
constantly create a room id in the url,,,
and we're just going to call it main so,,,
if we don't have an id in there we'll,,,
just go ahead and call the room main and,,,
that's it so we'll change this later,,,
okay so we have our room id we're just,,,
setting up some core code here and what,,,
i want to do here is go ahead and,,,
set some variables for our local tracks,,,
here so local,,,
tracks this will be our actual audio and,,,
video stream we're going to store this,,,
inside of an array here,,,
now we also want a place to store remote,,,
tracks so when users join a stream we,,,
want to get their audio and video,,,
streams and also store them,,,
in a variable here so we'll do,,,
remote users and this will be an object,,,
here so we'll have like a key value,,,
store where we'll have like the user's,,,
id let's say the user's id is 54 and,,,
then we'll just have like the audio and,,,
video track like this which will be,,,
automatically created for us so we're,,,
not going to worry about that but this,,,
is why we're going to make it an object,,,
so it can be key value pairs,,,
okay so now that we have the track set,,,
up our room id and url setup let's go,,,
ahead and actually,,,
get going with having a user join a room,,,
and displaying their stream here so,,,
first let's set up a function called,,,
join,,,
room init and let's make sure it's an,,,
async function,,,
and in here we're going to go ahead and,,,
make sure this function triggers right,,,
away so on load we're just going to call,,,
join room init and the user will join,,,
the room so join room init we're going,,,
to create the function trigger it right,,,
away now in here we're going to take,,,
that client variable that we just set up,,,
right here and we're just going to go,,,
ahead and call agora,,,
rtc dot create client so we're going to,,,
use a create client function and the,,,
reason why we have access to this is,,,
because of the sdk that we downloaded,,,
and added right here so we're calling,,,
agora.createclient which will create the,,,
client object and in here we have two,,,
required parameters so first we have the,,,
mode which can be live or rtc and this,,,
is simply the optimization algorithm to,,,
be used and then we have the codec here,,,
which is simply the encoding method that,,,
the browser will use for encoding so,,,
we'll set codec and this will be vp8,,,
okay so,,,
first piece of agora that we use right,,,
here are the agora sdk and at this point,,,
what i want to do is reference the agora,,,
documentation,,,
and i just want to make sure that you,,,
know where to find everything so from,,,
your console or even from the agora,,,
website we have the documentation here,,,
that you can follow so go ahead and,,,
select the platform that you're using or,,,
the product we're using video calling,,,
right here,,,
select the actual platform so we're,,,
using web and here you have a bunch of,,,
documentation along with the api,,,
reference here so here you have it again,,,
select the platform and at this point,,,
we're using,,,
video calling use the 4x documentation,,,
and go ahead and look at all the methods,,,
here so right now we just called create,,,
client if you have questions click on it,,,
read about it and here are going to be,,,
all the functions and everything that,,,
we're doing here and this will explain a,,,
lot more so i'll go over what i can and,,,
i'll explain the functions as we're,,,
using them but i would highly recommend,,,
looking through and actually studying up,,,
the details here so i'm also going to,,,
link this up in the video description so,,,
make sure to check that out here okay so,,,
let's get back to it so we created a,,,
client object and what i want to do now,,,
with a client is actually join a room so,,,
we're going to go ahead and call await,,,
here and using this client object we're,,,
going to call,,,
client.join so this will actually join a,,,
room here so we need to use some,,,
credentials here so the first thing we,,,
need is our app id so we set the app id,,,
at the top let's go ahead and use that,,,
now then we want to go ahead and throw,,,
in the room id so what room do we want,,,
to join,,,
and then we want to go ahead and pass in,,,
the token so token at this point is null,,,
so we can leave it just like that we set,,,
the variable right here so we have the,,,
token,,,
and then we want to throw in our uid so,,,
this is how we join with a specific user,,,
so we joined a room and we're ready to,,,
go so let's go ahead and save this and,,,
let's just make sure that everything,,,
works so far so i'm going to go ahead,,,
and click inspect element and if you're,,,
seeing something like this it means it's,,,
working well agora is going to consol,,,
console out a few things for us so that,,,
means we're connected and ready to go so,,,
now that we joined a room i actually,,,
want to display our video stream here so,,,
what i'm going to do is create another,,,
function that's actually going to output,,,
our stream so we're going to get our,,,
camera feed or camera and audio and then,,,
actually display it to the dom,,,
so underneath here let's go ahead and,,,
create another function we'll call this,,,
join stream so we joined the room but,,,
now we want to join a stream as like,,,
another presenter so we'll make this an,,,
async function,,,
and let's just go ahead and continue,,,
here,,,
okay so we have the join stream function,,,
which will be called on the initial,,,
room joining here so later on we'll,,,
actually join through a button here,,,
we'll actually click a button to join,,,
the actual room as a as a presenter but,,,
we'll call it on load right now and,,,
let's just go ahead and continue here so,,,
when a user wants to join,,,
we first want to go ahead and get our,,,
audio and video tracks now i think this,,,
should say,,,
tracks here so let's make sure that's,,,
plural let's add an s i thought that,,,
looked a little bit funny,,,
and let's just go ahead and call await,,,
agora,,,
rtc,,,
dot create,,,
microphone,,,
i'm going to type this slowly some,,,
microphone,,,
and,,,
camera,,,
tracks,,,
okay kind of a long word there,,,
okay so create micro,,,
phone and camera tracks so we're going,,,
to call this function and what it's,,,
going to do is it's actually going to,,,
ask a user if this is your first time on,,,
the site it's going to ask you for,,,
access to your audio and video feed so,,,
make sure you have some kind of webcam,,,
added to your laptop or if you have a,,,
desktop make sure you have a webcam and,,,
this will actually trigger that and,,,
request that permission on the first,,,
load so it's going to get your audio and,,,
video tracks add it to local tracks and,,,
this will be stored in an array so,,,
that's why we added it like that so,,,
we're going to get that feed and then,,,
what we want to do is create an actual,,,
video player so we're going to go ahead,,,
and do player and we're going to use,,,
backticks here so we can actually add in,,,
some dynamic values and let's just go,,,
ahead and grab one of these video,,,
containers so we'll grab this right here,,,
and we're just going to paste that in,,,
and let's just go ahead and format it,,,
so at this point we don't want the h1,,,
tag in the middle what we do want to do,,,
here though is make sure that the id is,,,
based off of our user so we want to,,,
remove the one and then we'll just pass,,,
in our uid,,,
now inside of this div what we're going,,,
to do is go ahead and create another div,,,
for the actual video player and this is,,,
where that player will be added so we're,,,
going to create a div here,,,
and this player will have a class of,,,
video dash player so we'll do video dash,,,
player,,,
and then we we also want a custom id,,,
sorry my voice squeak there we want a,,,
custom id and,,,
we're going to call this user dash and,,,
then,,,
the user's uid so this way we actually,,,
have some unique values that we can,,,
actually access so we're going to create,,,
like the container for the video frame,,,
it's not going to be in here just yet,,,
now once we create that container where,,,
we're going to store this we want to go,,,
ahead and add this video player,,,
to this streams container right here so,,,
we'll just do document,,,
dot get element by id,,,
we'll get,,,
streams underscore container double,,,
underscore and then we'll just do,,,
insert adjacent html,,,
and we'll just throw in,,,
the player before end,,,
and then we'll actually throw in the,,,
player as a second parameter so that's,,,
going to take,,,
this player right here that we created,,,
and add it to the dom here so we're,,,
simply going to add it and once we do,,,
that we want to go ahead and actually,,,
play this video stream right here so,,,
we're gonna call local tracks and,,,
the audio track is stored in index zero,,,
the video track is stored in index one,,,
so we're gonna get the video track and,,,
we're gonna call the play method and,,,
what this play method needs it's,,,
actually gonna create like a video tag,,,
for us and it needs a place to append,,,
that actual video stream here so what,,,
we're going to do is go ahead and append,,,
it to this div right here so we're going,,,
to take this value so user,,,
uid make sure you're using backticks,,,
right here and we're just going to call,,,
play and that's going to add in that,,,
video stream into this video player,,,
so let's go ahead and make sure that,,,
this file is linked up here so let's,,,
just take this script tag right here,,,
copy and paste it and then add in,,,
underscore rtc so we first want to make,,,
sure that this file is connected,,,
let's save that let's save this file and,,,
we're going to run into one small issue,,,
here so i want to show you it and then,,,
we'll fix that so let's go ahead and,,,
open this up here so at this point on,,,
load we're going to see our 4 and then,,,
our fifth circle once that user joined,,,
so we call this function,,,
and we added this player to the dom but,,,
we're not seeing the video stream here,,,
so,,,
one thing also i guess i wanted to show,,,
you something else here let's go ahead,,,
and actually deny access to our camera,,,
feed so that way you can see what it,,,
might look like on the first load here,,,
so let's go ahead and,,,
move all these websites out we'll just,,,
remove those and then if i refresh this,,,
on first load it's going to ask me for,,,
access to my camera we'll click allow so,,,
if you're doing this for the first time,,,
you'll see that and here we go,,,
so,,,
that actual video element doesn't have a,,,
height and width so we want to make sure,,,
it actually fills out that container so,,,
we'll go into,,,
our styles room.css,,,
and let's go up here inside a video,,,
container and let's just go ahead and,,,
style this up so,,,
just below video container we're going,,,
to get that video dash player value,,,
and we're going to set a height and,,,
width so we'll do height 100 percent,,,
and then we'll just copy and paste that,,,
we'll just do with,,,
and then we'll just leave it at 100 so i,,,
forgot the h there,,,
so with that we also want to make sure,,,
the video tag is selfish style so we'll,,,
do video dash player and then we'll get,,,
that video tag,,,
let's get this value and then we'll just,,,
do border radius so we want to make sure,,,
it doesn't overflow just in case we also,,,
want to make sure that that's cut off,,,
okay so let's try this one more time so,,,
we added a height and width to this,,,
video player let's make sure that that's,,,
saved so now when we actually add that,,,
item to the dom we should see it,,,
okay so here we go if i refresh that,,,
again,,,
we got access to the camera it takes a,,,
second and there we are so that looks,,,
good we're actually able to display our,,,
stream so if i add in another tab here,,,
let's go ahead and load that up we're,,,
also going to see that video stream but,,,
the two users can't see each other so we,,,
want to start adding that in next here,,,
so what i want to do is actually hide,,,
this display because eventually we're,,,
going to be able to click on these,,,
frames right here and add whatever frame,,,
that we clicked on to this big stream,,,
here so let's go back into room.css and,,,
for the stream box at this point let's,,,
just do display,,,
none and then it's going to look a,,,
little bit better,,,
and there we go so let's just go ahead,,,
and move on to the next step let's go,,,
back into the code,,,
so for this next step what we're going,,,
to want to do is actually publish our,,,
stream and then create a function that's,,,
going to handle the event whenever,,,
another user publishes a stream so,,,
right now we're simply taking our local,,,
track and we're playing it but we're the,,,
only ones that can see it so we need to,,,
publish this track to the channel and,,,
then anytime another user joins and,,,
publishes their track we're going to,,,
need this function to run as like a side,,,
effect and then take that track from,,,
that user and display it into our stream,,,
so this is how we're going to get remote,,,
users and view them inside of our,,,
browser here so let's go ahead and,,,
create the function that's going to,,,
handle this so this will be handle,,,
user published,,,
so we'll create the function let's make,,,
sure it's an async function,,,
and,,,
for the actual parameters we are going,,,
to get the user value so the actual,,,
tracks here from the user and then the,,,
media type so media type here and this,,,
function is going to run as a side,,,
effect so what we're going to do is go,,,
ahead and place this function inside of,,,
the join room init so we're going to,,,
create like an event listener and this,,,
is going to take this client object then,,,
we have an event listener so we can go,,,
ahead and call on,,,
user dash published,,,
so anytime a user publishes we're going,,,
to listen for that and we're going to,,,
call handle user published so this is,,,
the function that's going to trigger,,,
whenever a user publishes now let's go,,,
ahead and actually build out the,,,
function and then we're going to publish,,,
our track and we'll actually see this in,,,
effect so when a user publishes what,,,
we're going to do is go ahead and call,,,
remote users so this object right here,,,
that we set up right here we're going to,,,
go ahead and get that and we're going to,,,
add the user to this track so we'll go,,,
ahead and call,,,
user.uid so we get that user's uid and,,,
then we'll just throw in the entire user,,,
object now once we add that user to the,,,
list of remote users or i guess this key,,,
value store of remote users we're going,,,
to go ahead and subscribe to that user's,,,
track so we can call client.subscribe,,,
and then,,,
for this we're going to subscribe to the,,,
user and then we'll just throw in the,,,
media type right here so we're going to,,,
subscribe to that users track and then,,,
what we're going to do next here is,,,
create a player for that user and this,,,
player will be the exact same player,,,
that we have right here so let's copy,,,
this value right here let's paste that,,,
in and we are going to need to update a,,,
few things here so let's just go ahead,,,
and,,,
change this uid to be the uid from the,,,
user that was just added here so we'll,,,
just change this to user.uid,,,
and we'll do the same here we'll just do,,,
user dot uid,,,
so we have the player then we also need,,,
to append that to the dom so let's just,,,
grab this we'll bring this down here,,,
paste that in we'll fix the indentation,,,
and there we go we just added the player,,,
now when we add a new player we also,,,
want to make sure that this player,,,
doesn't already exist in the dom just so,,,
we're not having duplicates so let's go,,,
ahead and actually make a query for this,,,
player by the user container and then if,,,
this player doesn't exist then we'll add,,,
it so let's go ahead and,,,
remove this value right here so we'll,,,
remove the let right there and we'll,,,
actually set the variable up here and,,,
we'll just do document.getelementbyid,,,
we'll just take all of this in right,,,
here,,,
let's go ahead and copy that let's use,,,
backticks right here paste that in and,,,
then we'll just ask a question here so,,,
we'll just say if the player is equal to,,,
null so if it doesn't exist let's go,,,
ahead and create a new one so we'll just,,,
finish that statement here,,,
and we'll just copy all of this and,,,
bring this in here so that's just making,,,
sure that we don't have any duplicates,,,
and i know it's a little bit repetitive,,,
and now i'm just copying and pasting a,,,
bunch of stuff so we check if the player,,,
exists if the player doesn't we just go,,,
ahead and set this value grab that,,,
element and append it to the dom so we,,,
add the player to the dom but now we,,,
need to actually play that track so,,,
let's go ahead and check the media type,,,
so we're gonna have two media types come,,,
through we're gonna have an audio track,,,
and a video track here so let's go ahead,,,
and first check the media type we'll,,,
just do if,,,
media type is equal to,,,
video,,,
then what we'll want to do here is go,,,
ahead and take that user object access,,,
to video track parameter so video track,,,
and then we'll just call the play method,,,
here and in here we'll use backticks and,,,
we're just going to append that video,,,
tag to the user dash and then the id,,,
value here so this is the same exact,,,
thing that we did right here for the,,,
local track where we actually create a,,,
video tag and then append it to this tag,,,
right here into this div so we're doing,,,
the same thing for the remote user at,,,
this point we just call user.video track,,,
and then play so we also have the media,,,
type of audio so we'll just go ahead and,,,
get that we'll do if media type is equal,,,
to,,,
audio then let's just go ahead and play,,,
the audio at this point we're not doing,,,
anything with the dom so we'll just do,,,
user dot audio track,,,
and then we'll just call dot play and,,,
that'll just play the audio,,,
okay so,,,
we have the listener for or the event,,,
listener for the user published event,,,
and now what we need to do is go ahead,,,
and actually publish our local tracks,,,
here so whenever a user joins the room,,,
we call join stream and we have our,,,
local track so the last thing we need to,,,
do here is actually publish that track,,,
so we'll just go ahead and call await,,,
then we'll do client,,,
dot publish,,,
and we need to specify the tracks that,,,
we want to publish here so we're going,,,
to throw in an array so we can publish,,,
multiple tracks and at this point we're,,,
gonna publish our local tracks audio,,,
first so audio is index zero so we're,,,
publishing the audio track and then,,,
we're gonna publish the video track,,,
right here so we're gonna do index one,,,
for video and then audio right here so,,,
we're publishing those and this function,,,
right here is what's going to trigger,,,
this event listener so whenever we call,,,
publish every other user inside of the,,,
stream is going to go ahead and trigger,,,
this and then call handle user published,,,
and that's what's going to trigger this,,,
function right here so let's go ahead,,,
and test this out i'm going to save it,,,
we'll open up the browser here,,,
okay so we see our track in here and at,,,
this point what i'm going to do is go,,,
ahead and just copy and paste it,,,
and we're just going to go ahead and,,,
back to this user and we're going to,,,
wait a second and here we go now we see,,,
another track and for the remote user we,,,
also see this track so i'm using the,,,
same webcam if i go ahead and actually,,,
publish more,,,
we're gonna see three right here so,,,
those events are firing off and,,,
everything's working good we're actually,,,
seeing remote users here now we do have,,,
one issue,,,
and that is i actually hear an echo,,,
right now so i can actually get my,,,
headphones and bring that to the speaker,,,
i don't know if you can hear that,,,
so essentially whenever a user leaves we,,,
have nothing that tears down this,,,
element from the dom so right now if i,,,
close this one out we're gonna see this,,,
go black here because the video tag is,,,
no longer functioning it's not published,,,
anymore and if i close this one out here,,,
we go now we just see ourselves so we,,,
need to handle that event of not only,,,
publishing a track but also removing,,,
that track from the dom whenever a user,,,
leaves so we're listening for the,,,
publish event let me just refresh this,,,
so we're the only ones in here,,,
okay there we go,,,
so we're listening for that event but,,,
now we want to go ahead and just remove,,,
that,,,
element so we're going to add in another,,,
function here so we'll just go ahead and,,,
create a handle user left function so,,,
we'll do handle,,,
user left so that's gonna be the name of,,,
the function it'll be an async function,,,
and at this point we're just gonna throw,,,
in the user object here so we know what,,,
user left and we need to add in an event,,,
listener so let's go ahead and actually,,,
go up here to the join room init,,,
function,,,
we'll copy this and the client object,,,
has another event that we can listen for,,,
and at this point this is going to be,,,
for user left so whenever a user leaves,,,
we're going to call handle user left so,,,
this is the function that's going to,,,
respond to that leave event now let's go,,,
ahead and bring this down here and let's,,,
finish up this function here so in this,,,
function what we want to do is first,,,
delete the user from that object of,,,
users so we're going to go into,,,
remote users and we're just going to go,,,
ahead and delete user dot uid so that's,,,
the key we're going to remove that user,,,
and let's see what did i not do here oh,,,
i didn't finish the arrow function,,,
okay so there we go so we're deleting,,,
the user and then we just want to go,,,
ahead and remove that user's frame from,,,
the dom so we'll do dot get,,,
element by id and we're just going to go,,,
ahead and get the user dash container,,,
we'll throw in,,,
user,,,
dot uid,,,
okay so here we go let's go ahead and,,,
give this a test so we'll save that,,,
we'll go ahead and add in another user,,,
give it a second to load this user in,,,
we'll add in a second,,,
and then a third,,,
okay so we publish the users if i go,,,
back to this first one and close this,,,
out,,,
here we go oh i forgot to call remove,,,
okay so give me a second we'll just do,,,
remove,,,
okay so we're simply removing that,,,
element from the dom,,,
let's go ahead and,,,
save that we'll add another user here,,,
and if i click x here,,,
there we go,,,
and there we go so now we can publish a,,,
track and we can also remove that track,,,
and if i join with another user it'll,,,
obviously do the same thing so the next,,,
thing i want to do here is focus on,,,
actually presenting these video frames,,,
into the big stream here or into the big,,,
frame so right now it's hidden but at,,,
any point let's say a user is sharing,,,
their screen or i just want to focus on,,,
let's say user number two here that's,,,
talking i want to be able to click on,,,
this user add them to that big frame and,,,
then switch between which users in that,,,
frame along with also removing them so,,,
let's go ahead and actually move on to,,,
the next section and before we get,,,
started with that i want to go ahead and,,,
actually remove some of these containers,,,
here so we'll just remove container,,,
three and four,,,
so i just wanted to make sure that,,,
whenever we add a new frame into the dom,,,
we're not having all of those,,,
placeholder elements taking up the space,,,
so we can actually see it so that just,,,
looks a little bit cleaner so let's go,,,
ahead and move on to the next step here,,,
so we'll close out room.css,,,
and let's just open up room.js so,,,
anything that has to do with the dom and,,,
click functionality we'll leave that in,,,
room.js anything to do with the agora,,,
rtc sdk we'll leave in room underscore,,,
rtc so let's keep these files separate,,,
and in here let's just go ahead and,,,
scroll down from all of these events,,,
here and let's just set some variables,,,
to start with and then we're going to,,,
build out a few functions that will,,,
actually handle the click events for any,,,
time we click on one of those video,,,
frames so the first thing i want to do,,,
is actually go into room.html and i just,,,
want to query all the stream,,,
actually let's see i want to query the,,,
stream box right here so i can actually,,,
add event listeners to that and append,,,
elements to this div right here and i,,,
want to get all of these video,,,
containers so we can add in click events,,,
to them so let's go ahead and call this,,,
display,,,
frame,,,
i guess that's the most uh descriptive,,,
thing i can think of it's just a display,,,
frame so it's the one that's going to,,,
display the main element so we'll just,,,
do document.git,,,
element by id and this will be stream,,,
underscore box or double underscore so,,,
then we want all the video containers so,,,
we'll just do video frames and this will,,,
be document.getelementbyclassname,,,
get elements by class name so elements,,,
by class name and we're just going to,,,
get all the video containers,,,
double underscore container let's make,,,
sure that's the name of the class here,,,
so that's all of these containers so,,,
that's going to be an array of html,,,
elements or a collection,,,
and then the next thing i want to do is,,,
set a variable for the user,,,
id in display frame,,,
so anytime we click on an element i want,,,
to know what user is actually inside of,,,
this display frame because we're going,,,
to take this element put it into this,,,
box right here and we just want to know,,,
what the current id is and there's a few,,,
reasons for that but before we have a,,,
user in there this this value is going,,,
to be null so we're going to leave it as,,,
blank but at some point we want to know,,,
which item is actually in there so now,,,
what we want to do is go ahead and,,,
create a function that will be in charge,,,
of expanding a video frame and adding it,,,
inside of this div right here whenever,,,
we click on it so this will be called,,,
expand,,,
video frame we'll go ahead and create,,,
the arrow function pass in the event,,,
here so,,,
finish up the arrow function and,,,
essentially what we're going to do in,,,
this function is we're going to first,,,
check if we have any item inside of the,,,
stream box if there is one we'll remove,,,
it and add in the new frame that we just,,,
clicked on and then we'll change the,,,
actual styling of this stream box so,,,
right now in the css you don't see it,,,
because we have it as display none so,,,
we'll be this function will be in charge,,,
of actually changing that styling and,,,
then moving an element in or out of that,,,
stream box so let's go ahead and,,,
actually first go ahead and get that,,,
display frame we'll just do display,,,
frame dot style,,,
dot display,,,
and we'll just do,,,
block let's see if i can write display,,,
here,,,
so we'll do display and then block so,,,
first we'll make sure that we can,,,
actually see that element so if i save,,,
this let's actually go ahead and add the,,,
event listener to all these video frames,,,
so we'll loop through all the video,,,
frames so we'll just do four,,,
finish up this for loop we'll do let i,,,
is equal to zero,,,
then we'll get the length of video,,,
frames i'm one of those people that,,,
writes my for loops like this so i like,,,
to keep it old school,,,
so while the video frames is less than i,,,
let's go ahead and increment i,,,
and let's just go ahead and add the,,,
event listeners so we'll get each video,,,
frame get the index right there to add,,,
event listener and we're just going to,,,
say on click,,,
let's go ahead and expand the video,,,
frame okay so,,,
this right here is actually going to add,,,
the event listener only to the frames,,,
that were already there so i'll show you,,,
what i mean by this so,,,
when we're here if i click on this event,,,
it's going to expand that video frame,,,
that's all the function does but if i,,,
refresh that and i wait for a new video,,,
frame to be added,,,
if i click on this nothing's going to,,,
happen because this item was just added,,,
and that event was not added to it yet,,,
so we'll actually deal with that in a,,,
second so right now only one and two,,,
right here can actually expand that,,,
frame so let's continue here so we're,,,
going to call expand video frame and the,,,
first thing i want to do is check if we,,,
have an item in here so right now we're,,,
just displaying it as block that's,,,
actually going to be the next step here,,,
so let's go ahead and check for a child,,,
element we'll just do child is equal to,,,
display frame and we'll just do dot,,,
children,,,
get the first index so we want the first,,,
child which would be that video frame,,,
we'll say if there currently is a child,,,
so we'll get the child,,,
and we're just going to take that child,,,
take them out of this stream box right,,,
here so we'll remove them from this,,,
element and we want to stick them back,,,
into the streams container,,,
so we'll say if child,,,
let's go ahead and do document dot,,,
get element,,,
element by id we'll grab the streams,,,
double underscore container make sure,,,
there's an s right here so streams not,,,
stream i know we have two,,,
ids here so i want to make sure that,,,
or two ids that have a very similar name,,,
so i wanna make sure we don't confuse,,,
that,,,
yeah so we have stream container and,,,
streams we're adding that to here so,,,
we're taking that streams container and,,,
we're just gonna do dot append,,,
child,,,
so this function will take that child,,,
element and add them back into the,,,
stream so it'll remove it from that,,,
mainframe now what i want to do next,,,
here is go ahead and take the current,,,
item that we clicked on and add them,,,
into that main stream box we're,,,
basically going to reverse what we just,,,
did right here so at this point we,,,
remove any item inside of that stream,,,
box down to stream containers but the,,,
current item needs to be placed into,,,
that main stream box now so we'll just,,,
do display frame dot append child so,,,
we're gonna call this function again,,,
we'll go ahead and get e dot current,,,
target and i know sometimes e dot target,,,
works but for some reason it was,,,
clicking on the actual video tag and it,,,
was placing the wrong element in here so,,,
if you want to follow along exactly make,,,
sure you don't get an issue go ahead and,,,
just do e dot current target so we're,,,
taking the current element and we're,,,
adding this into that display frame and,,,
what i also want to do is go ahead and,,,
take that current user in display or,,,
that user's id and we'll just do e dot,,,
current target dot id so now we know,,,
what item is in this display frame,,,
so let's go ahead and actually test this,,,
out here just bring this down here,,,
remember the actual video frame that,,,
gets added this will not work because we,,,
have not added the event handler but if,,,
i click on one here we go we see one and,,,
don't worry about the size here we'll,,,
rework all that out so if i click on two,,,
it's going to take one bring them down,,,
here and it's going to place two in here,,,
now if i click on that or if i click on,,,
one it's just going to keep changing so,,,
those items keep flip-flopping we're,,,
removing an item and adding one in so,,,
the next thing i want to do here is,,,
actually shrink these items right here,,,
so whenever we have an item inside of,,,
this main frame i want to make sure that,,,
all these items in here are set to 100,,,
pixels in height and width just so they,,,
have some room there and it looks a,,,
little bit better i think that way so,,,
we'll just go ahead and create another,,,
for loop here so as we expand an item,,,
we're just going to loop through all the,,,
items here so let's copy and paste this,,,
loop right here just so i'm not typing,,,
that out again and we're just going to,,,
do,,,
video frames i and we'll just do dot,,,
style,,,
dot height not scroll height but height,,,
like that,,,
and that's going to be equal to 100,,,
pixels and we're going to do the same,,,
to the width here so we'll just do,,,
with and there we go so the only issue,,,
that occurs here is the fact that we,,,
don't want the main item in that display,,,
frame to have the height and width of,,,
100 pixels we actually want to expand it,,,
and make it large so these are shrinking,,,
but we want to make sure this item stays,,,
big here so let's go ahead and add in a,,,
quick question we'll just do,,,
if the current item in the display frame,,,
so we want to check this condition let's,,,
actually copy and paste this,,,
into the if statement so we're just,,,
going to go ahead and say if the video,,,
frames,,,
id so the current id value,,,
if this is not equal to the user id and,,,
display frame the value that we just set,,,
right here then go ahead and change the,,,
height and width so let me go ahead and,,,
just try this again we'll click on one,,,
two and there we go so right now the,,,
height and width is going to be like,,,
that because it actually adjusted it,,,
because we clicked on it at some point,,,
but if i click on it for the first time,,,
one stays the same while these are,,,
actually shrunk here so let's go ahead,,,
and actually add this to this video,,,
frame now so we'll go ahead and add this,,,
event so we're going to take this expand,,,
video frame event we'll bring this into,,,
room underscore rtc here and we're just,,,
going to call this as we append this,,,
item to the dom here so we're just going,,,
to go ahead and grab the currently,,,
newly added item here so on handle user,,,
published actually let's do this at join,,,
stream here let's start here,,,
so let's go ahead and,,,
grab this we'll just do document dot get,,,
element,,,
by id we'll just get the,,,
user,,,
dash container,,,
dash uid,,,
and we'll just do dot,,,
add event listener on click,,,
and we'll just do expand video frame so,,,
i just pasted that in so once we add the,,,
item to the dom go ahead and add the,,,
event listener so let's copy this entire,,,
method right here and let's just bring,,,
this or line of code and let's bring,,,
this down into handle user publish so,,,
anytime a new user publishes their,,,
stream let's go ahead and add this down,,,
here too so we want to make sure every,,,
single user has that now at this point,,,
we're going to have to do,,,
user.uid,,,
and i think we're good there,,,
okay so let's go ahead and just try this,,,
out,,,
okay so when a new video frame gets,,,
added we can click on this there we go,,,
click on one,,,
two and then that frame and let's just,,,
go ahead and add another user,,,
now we can just switch between these two,,,
you can see that's changing and all of,,,
that's working okay so let's move on to,,,
the next step,,,
so the issue that we're currently having,,,
is the fact that that video frame is,,,
actually small because we're not,,,
adjusting the size of that container so,,,
let's go into room.css and what i'm,,,
going to do is go ahead and find the,,,
stream box here so,,,
let's see we'll go into stream box and i,,,
just want to make sure that the current,,,
video container that has the height and,,,
width set right here we're just going to,,,
take this value and we're going to say,,,
anytime this item is inside a stream box,,,
let's go ahead and do this we'll just,,,
stream double underscore box,,,
let's go ahead and also style that,,,
stream boxes video container so at this,,,
point let's just go ahead and set the,,,
border to two pixels solid and we'll,,,
just change the color to black so we'll,,,
just do,,,
i believe we can do zero zero like that,,,
or triple zero and that'll work we're,,,
gonna set the border radius,,,
to zero so we just want to change that,,,
make sure it's not a circle anymore and,,,
we're also going to set the height of,,,
100 percent or to 100,,,
and we'll just use the important,,,
property there and we'll do the same for,,,
width,,,
so 100 and we just want to make sure,,,
that this happens so it overrides what,,,
we currently have there and poor can't i,,,
don't know why i can't spell that word,,,
okay so we set the height and width and,,,
that's it for this box right here but we,,,
also want to style the actual video,,,
tag here so we'll just do stream,,,
underscore box,,,
and we'll just do video,,,
and the video tag doesn't have a height,,,
and width so we're going to make sure,,,
that the border radius is set to zero,,,
like that so we want to make sure that,,,
it's not a circle once it's added so,,,
let's go ahead and test this out so,,,
we'll just go ahead and click on this,,,
actually if i just refresh it there we,,,
go,,,
so give it a second let that video frame,,,
come in then we'll click on two,,,
this one right here and that looks a lot,,,
better so now we're actually able to,,,
display the frame and style these,,,
elements so that looks a lot better so,,,
we still have a few things that we want,,,
to fix up here and one of those issues,,,
is the fact that if we've clicked on one,,,
of these video frames when that frame,,,
expands all these other streams right,,,
here actually get shrunk down into these,,,
small circles here so,,,
they expand and shrink but what happens,,,
is if we're currently displaying someone,,,
in that mainstream,,,
anytime we add in a new user that user,,,
stream by default is going to be set to,,,
a height and width of 300 pixels because,,,
we haven't restyled that new user we've,,,
only restyled what we currently have,,,
here so i'll show you what i mean by,,,
this so let's go ahead and add in a new,,,
user,,,
and when this user is added,,,
automatically their frame is set to 300,,,
pixels in height and width now when i,,,
click on it it does adjust it so that's,,,
fine everything works out but we want to,,,
make sure that any time we handle that,,,
user joined event we fix that issue here,,,
and we also want to fix the issue of the,,,
current user in that frame leaving so,,,
let's go ahead and refresh everything,,,
and we'll go back in here inside of room,,,
underscore rtc.js,,,
and we're just going to bring this down,,,
into,,,
handle user published event so we're,,,
going to take that video player we're,,,
going to check if it exists we're going,,,
to add it to the dom and then we're,,,
going to run one more check so the check,,,
we want to look for is to see if we,,,
currently have any styling to that,,,
display frame so we're going to do,,,
display frame i want to make sure i'm,,,
saying that right so if we currently,,,
have a style to that display property,,,
then that means we're currently,,,
displaying a user there so let's go,,,
ahead and just change that so we'll take,,,
this player right here and we'll just do,,,
player dot style,,,
dot height and this is going to be set,,,
to 100 pixels so we'll do,,,
100 pixels and we'll just do the same,,,
for the width so we'll just copy and,,,
paste that and this will be the width,,,
here so when they join if we're,,,
currently displaying someone set them to,,,
100 pixels of height and width,,,
so let's go ahead and do this we'll,,,
actually display this user,,,
we'll display another user now when this,,,
user joins automatically this is set to,,,
100 pixels in height and width so we,,,
checked is someone in this frame change,,,
that styling now for this other user,,,
because there's no one being displayed,,,
this is going to stay at 300 pixels now,,,
i want to show you another issue that's,,,
going to occur here so we're going to,,,
have to kind of bounce around here and,,,
fix up a few things so right now this is,,,
that remote user and this is the user in,,,
this tab so if i click on this user and,,,
they're displaying their stream if i,,,
close this user out so they leave the,,,
stream,,,
what's going to happen here is,,,
automatically,,,
that video tag is going to be removed,,,
but that frame is still going to be,,,
displayed out there so we want to make,,,
sure that we read which user left and if,,,
they were the ones that were currently,,,
displaying their stream we just want to,,,
resize all of these back to their,,,
original 300 pixels in height and width,,,
and just make sure that's fixed up so,,,
let's go ahead and just move back in,,,
here so this is going to be inside of,,,
handle user left right here so whenever,,,
a user leaves let's go ahead and see if,,,
they were the user that was currently,,,
inside of that main frame so we're just,,,
going to go ahead and check,,,
what that id was so we'll do if the,,,
current user id,,,
in display frame so we're going to get,,,
that id and we're just going to check if,,,
that was this current user so we're,,,
going to get this entire id so we we're,,,
about to remove it or i guess we did,,,
just remove it but we also want to know,,,
do we need to hide that mainframe so if,,,
that's the case if they were the ones in,,,
there let's just go ahead and do display,,,
frame,,,
dot style,,,
dot display and we're just going to set,,,
this to null so we're going to remove,,,
any styling that they have there and the,,,
next thing we want to do is make sure,,,
that all the video containers that were,,,
there all get resized back to 300 pixels,,,
so i just want to show you issue by,,,
issue,,,
okay so this is that remote user when,,,
they leave there we go we change the,,,
styling but these right here should be,,,
set back to 300 pixels so we just want,,,
to go ahead and resize those next so,,,
we're gonna go ahead and remove that,,,
mainframe then we're just gonna go ahead,,,
and get the video frame so we already,,,
have this value stored right here so,,,
we'll just get,,,
all the video frames actually i'm going,,,
to query it again because i just,,,
realized i need to get the new video,,,
containers so let's just grab this and,,,
we'll bring this back into handle user,,,
left we're going to get all those video,,,
frames we're gonna make that query again,,,
and we're just gonna loop through those,,,
video frames and resize them,,,
so we'll do let i is equal to zero,,,
and then we'll do video frames,,,
dot length we'll get all the video,,,
frames that are currently in there if,,,
this is less than i,,,
increment i,,,
and let's see we'll just do video frames,,,
okay each size,,,
dot style,,,
dot height and this is going to be set,,,
back to,,,
300 pixels,,,
so that means the main user left we're,,,
just going to reset everything back to,,,
normal,,,
okay so,,,
let's go ahead and try this out so we'll,,,
just go ahead and,,,
open this up we'll make ourselves the,,,
main frame we'll add in a few new users,,,
now i'm just going to select this newly,,,
added user and if they leave i think,,,
it's this user there we go we just reset,,,
those video frames and that looks good,,,
now if we open one of these up i don't,,,
know which users what right now so i,,,
think this is this remote user,,,
click on that there we go that looks,,,
much better so we're actually resizing,,,
everything and just kind of moving,,,
things around now if someone's in this,,,
main frame i want to be able to click on,,,
this and actually shrink the frame down,,,
and set it back to where we were so i,,,
want to have the ability to remove,,,
frames without always having somebody in,,,
this mainstream so once we finish this,,,
little section up we're going to work on,,,
actually changing this video quality,,,
right here and then we'll just move on,,,
to the next step so let's go ahead and,,,
go back into room.js here and we're,,,
going to create a function,,,
to hide,,,
a stream here so let's just do,,,
hide,,,
display frame so not a stream but the,,,
main frame here and we're just going to,,,
go ahead and make an arrow function,,,
and,,,
what i want to do here is set user,,,
in display frame i want to set this to,,,
null so i just want to reset this value,,,
then i want to go ahead and get the,,,
display frame we'll just do style,,,
dot display and this is going to be set,,,
to,,,
null also so we want to set these values,,,
and we also need to grab the current,,,
element in there so we want to see if,,,
there's a current element in that,,,
mainframe which there is going to be if,,,
we're hiding it so we're just going to,,,
copy and paste all of this we're going,,,
to take this child and i guess we don't,,,
need to ask this condition because there,,,
is a child in there that's why we're,,,
hiding it and we're just going to add,,,
them to the streams container so we're,,,
going to move them down now at that,,,
point i just want to go ahead and loop,,,
through all those video frames let's,,,
just copy this right here inside of,,,
handle user left and i just want to,,,
resize all those frames,,,
back to 300 pixels so we're just going,,,
to loop through all of them resize them,,,
and that's it for the function so the,,,
last thing we need to do here is go,,,
ahead and do display frame dot add event,,,
listener and we'll just listen for,,,
a click event and we'll just do hide,,,
display frame,,,
okay so let's check this out let's make,,,
sure it's all working,,,
so we're going to open this up we'll,,,
open up a user we'll add in second user,,,
and if we're in here okay so it restyle,,,
that,,,
let's see why is that user not showing,,,
actually we're having an issue here so,,,
let me try this one more time so i'll,,,
click on this user we'll remove them and,,,
we'll add them again that might have,,,
just been a lag here,,,
okay there we go so it's all good so if,,,
i click on this i want to hide it and,,,
resize it so i can go ahead and toggle,,,
all these users i can go between them,,,
and i can also hide a user and reset all,,,
of this so that looks good i want to go,,,
ahead and just remove those placeholders,,,
right here we can remove one and two i,,,
just wanted to keep that there just to,,,
work on that toggle functionality so,,,
let's actually remove the second frame,,,
there we go so that's all in there now,,,
and now let's go ahead and move on to,,,
setting the video quality here so right,,,
now if you look at this frame,,,
it doesn't really look that good and if,,,
we actually look at the settings here so,,,
let's just go ahead and minimize that,,,
it's a little bit blurry here if we,,,
actually go to inspect you'll actually,,,
be able to see the video size here so,,,
right now the video dimensions are 640,,,
by 480 and there's a lot we can do here,,,
we can actually set the frame rate set,,,
the actual dimensions here so for now,,,
i'm just going to set the dimensions of,,,
this and actually make this frame a,,,
little bit bigger so it'll look nicer,,,
so you can actually read about how you,,,
can do this in the documentation if you,,,
want to really advance from here and,,,
actually set a lot of like really,,,
advanced settings but for now let's just,,,
go ahead and go back into create camera,,,
and microphone track so this is where we,,,
want to set it and because we're setting,,,
microphone and camera tracks we can,,,
actually set two encoder configs here so,,,
we can do one for the audio we're not,,,
going to work on that right now so let's,,,
leave that as an empty object and then,,,
we're also going to set the encoder,,,
config for the video so the audio is the,,,
first object the video will be the,,,
second so once we have this object let's,,,
go ahead and add in encoder,,,
config,,,
okay so let me actually move a few,,,
things out of here so we can see this,,,
we'll do encoder config and then this,,,
will be an object right here so i'll,,,
move that down so remember we have two,,,
objects and then an object inside of the,,,
encoder config just make sure you set,,,
that up correctly and we're going to set,,,
up a width here now for the width we're,,,
also going to throw in an object here,,,
and we're just going to set the minimum,,,
frame here so let's see we'll do min,,,
and for this value let's just go ahead,,,
and set 640 for the minimum width then,,,
we'll just go ahead and set our ideal,,,
width so this is what we always want it,,,
to be we'll just do 9,,,
20 and then the max width will also just,,,
be,,,
9,,,
20. okay so once we have the width we're,,,
just going to go ahead and move down,,,
we'll set a height here and we'll create,,,
another object we'll also set the min,,,
and this will be 480 and then the ideal,,,
will be,,,
let's see we want to have this at 1080,,,
so do 1080 and then the max will also be,,,
1080. so this is completely up to you i,,,
just want to show you where we can,,,
actually adjust this and i just want to,,,
make sure our video quality is a little,,,
bit better so,,,
an object here this wraps it everything,,,
looks good i think we're all ready to go,,,
and let's take a look at this,,,
so now if i open this up look at the,,,
video quality it's a lot bigger so if we,,,
do a before and after you can see the,,,
frame right here you can see the picture,,,
frame the outside and then you can see,,,
almost the entire bed but if i remove,,,
this we're going to see all that shrink,,,
and the quality will actually go away,,,
so let's go ahead remove it,,,
save it and,,,
take a look at this again i'll extend it,,,
and there we go so it's cut off so you,,,
can actually see that adjustment and the,,,
quality itself actually changed so i'll,,,
just go ahead and undo that save it and,,,
there we go so now what i want to do is,,,
actually go on and move on to setting up,,,
the controls the control buttons for,,,
muting our mic turning our camera on and,,,
off and that sort of stuff so all that,,,
functionality that you see on the bottom,,,
right here,,,
all these controls so let's go ahead and,,,
start adding some functionality here so,,,
we're going to start by going into,,,
room.html and i'm going to change these,,,
buttons here so right now if we have a,,,
class of active on a button it's going,,,
to be purple here so by default when we,,,
first join i want to make sure that our,,,
camera and audio is active so let's set,,,
that to true and then we're going to add,,,
in some custom ids so we'll take this,,,
class of active,,,
move that to this button and this is,,,
going to be our camera button so we'll,,,
do camera,,,
dash btn,,,
and we'll just copy this,,,
bring this down here this will be the,,,
mic button,,,
so we're going to add in some event,,,
handlers to these so we want to make,,,
sure we have a way to identify them this,,,
will be screen,,,
and this button right here will be leave,,,
so we're not going to add the class of,,,
active to these because they're not,,,
going to be active right away and this,,,
button eventually will be read the leave,,,
button so we'll just call that leave,,,
button here,,,
all right so let's go ahead and move on,,,
to the next step here so what i want to,,,
do is first toggle,,,
the,,,
camera actually i was going to toggle,,,
the mic first but i actually want to,,,
toggle the camera so you can see it,,,
because when i toggle the mic you might,,,
not hear it i'll have to just put in my,,,
headphones see if i hear an echo and,,,
we'll test it that way so let's start,,,
with the visual part first then we'll,,,
adjust it,,,
so,,,
to do this let's go back into,,,
room underscore rtc so we'll close out,,,
room.js here and i'm just going to move,,,
down to the very bottom here and we'll,,,
create that function here so we're going,,,
to create a function,,,
called toggle camera,,,
so,,,
in toggle camera we're going to throw in,,,
the event here,,,
we'll finish up the arrow function here,,,
and we're also going to make sure it's,,,
an async function here so i always like,,,
to do that just in case i need to use a,,,
weight somewhere,,,
okay we've got the async function and,,,
let's just talk about the logic here so,,,
the first thing i want to do is go ahead,,,
and just get the button so we'll just do,,,
e dot current target so that's the,,,
button that we clicked on current target,,,
so we'll get the button and then i also,,,
want to set the class to it so i want to,,,
adjust the actual active class so if we,,,
are currently active we'll remove the,,,
class of active meaning we're turning it,,,
off and then we'll just flip it and,,,
we'll change it up based on what the,,,
current status is so to check if we're,,,
currently muting the mic so muting is a,,,
word that we can actually use for the,,,
camera itself so it makes more sense for,,,
the mic but you can actually mute the,,,
camera which means it'll turn off the,,,
camera stream,,,
so for this we're going into local,,,
tracks and the camera is index one so,,,
we're gonna go ahead and say if index,,,
one so the video,,,
we're just gonna go ahead and do if it's,,,
muted we'll check the status of muted,,,
then we'll just go ahead and unmute it,,,
so we'll just do await,,,
we'll do local tracks,,,
one so we're grabbing the video track,,,
and we'll do set muted so this is how we,,,
can actually change the status and we're,,,
just gonna do false so if it's currently,,,
muted we're gonna unmute it so false,,,
meaning it's gonna turn on the camera,,,
with this we also want to change the,,,
class of the button so we're going to do,,,
button.class,,,
list dot add and we're just going to add,,,
the class of active so this will make,,,
sure the button's purple and then we'll,,,
just add in else,,,
and in this section all we're going to,,,
do is simply,,,
invert this right here so we're going to,,,
set,,,
muted to true that means that if we are,,,
currently muted then we're just going to,,,
go ahead and or if we're not muted we,,,
are going to mute it so we're going to,,,
set media to true and we're just going,,,
to remove the class of active so that's,,,
going to change the color of the button,,,
so that's all we need to do there i'll,,,
save that and then the next step here,,,
would simply be to add in an event,,,
handler so let's just go ahead and do,,,
document,,,
dot get element by id,,,
we'll get the camera button,,,
camera dash btn and then we'll just do,,,
dot add event listener on click so we'll,,,
click the button let's go ahead and,,,
toggle the camera so let's go ahead and,,,
test this out,,,
so we'll open this up here,,,
so i'm going to bring that into frame,,,
we'll click it so right now you see that,,,
the purple was removed and you don't see,,,
the camera if i toggle that again,,,
purple's added and it just switches so,,,
perfect that's exactly what we wanted so,,,
to do this for the mic it's actually,,,
very easy it's the same exact function,,,
so we're just going to update this so,,,
we're going to take our toggle camera,,,
function and i'm just going to paste,,,
this above so we have toggle camera and,,,
this one's going to be toggle mic,,,
so we'll change this to toggle mic now,,,
the only functionality that we're going,,,
to change here is we're going to get,,,
index 0. so index 0 in local tracks is,,,
the audio,,,
so we're going to go ahead and check the,,,
same thing if the audio is currently,,,
muted we'll set it to false meaning,,,
we're unmuting it and so on and we're,,,
just simply updating the class and all,,,
we have to do here is simply add in the,,,
event listener now so we'll bring this,,,
down here and let's just go ahead and,,,
update this to listen for the mic button,,,
click right here and then we're just,,,
gonna do toggle,,,
mic for this one,,,
okay so one toggles the camera one,,,
toggles the mic and i'm gonna need to,,,
throw in my headphones here so i can,,,
hear the echo it won't actually capture,,,
it in a screen recording so let's give,,,
this a second and we'll just click,,,
actually here i need to add in a second,,,
user,,,
okay,,,
now i hear the echo,,,
and if i mute it and then unmute it,,,
perfect i can hear the echo it's all,,,
working and then i can also toggle the,,,
mic now one thing i want to work on here,,,
is whenever this mic is toggled see this,,,
black frame right here i want to make,,,
sure that we actually have some kind of,,,
background so it looks a little bit,,,
better than just having it black so if,,,
we have a bunch of people in the stream,,,
let's say they're just meeting their,,,
camera i want to make sure something is,,,
visible because it looks like,,,
something's broken and actually at this,,,
point it does seem like something's,,,
broken here i don't know what's going on,,,
here uh i'll fix this background first,,,
and then i'll see what's going on in,,,
that section,,,
okay,,,
so right now let's go ahead and unmute,,,
the camera there we go then we mute it,,,
again,,,
and all right perfect so to do this,,,
background right here what i'm going to,,,
do is uh go ahead and look into my,,,
images folder so we have this logo right,,,
here so this is the mumble logo it's,,,
actually the same logo that we're seeing,,,
up here,,,
so this logo that we have in the header,,,
bar we're just going to set that to the,,,
background color now i can't see it,,,
because,,,
i'm not sure why i can't see it but i,,,
guess that's irrelevant it's there,,,
let's just go ahead and actually go into,,,
our css and we're going to go into our,,,
video container now for this all we're,,,
going to do is set a background image to,,,
that video container so we'll just do,,,
background,,,
dash image and the actual image we just,,,
need to set the url so we'll do url and,,,
we're just going to point this to the,,,
images folder so we'll do slash,,,
images and we're just getting the logo,,,
dot png,,,
okay,,,
so we'll save that and if i go ahead and,,,
check this out,,,
there we go so we see a logo there and,,,
it's repeating it doesn't look that good,,,
so let's go ahead and just finish up the,,,
styling so we're just going to go ahead,,,
and do background repeat,,,
and we'll just do,,,
none for this or no,,,
repeat so we're going to make sure the,,,
image isn't repeating and i also want to,,,
make sure it's centered,,,
so let's center that in the middle,,,
so we can just do,,,
background position,,,
and this will be center and i also want,,,
to set the background size so we'll just,,,
do background,,,
size to 75 pixels let's do 75 like that,,,
and that should be good,,,
okay so now when a user mutes their,,,
camera we actually see something so if i,,,
meet my camera on this side this other,,,
user will see it and then if we unmute,,,
it there we go so we both see the,,,
extreme and then when we mute,,,
that's the output so what happens when i,,,
click on this so if i happen to click on,,,
that user let's say this user mutes it,,,
so,,,
if you mute it this logo looks a little,,,
bit small so let's go ahead and just,,,
make sure this is uh filled out to size,,,
so we'll just go up to,,,
stream box video container and if the,,,
video container is in here we'll just,,,
set the background size and make that a,,,
little bit bigger let's see we'll do,,,
background size and let's just set this,,,
to 300 pixels i think that should be a,,,
good size here,,,
all right so there we go so if it's in,,,
here it's large and if i move it down,,,
it's small down here that's perfect,,,
that's exactly what i wanted okay so i,,,
just took a few minutes and i tried to,,,
solve that issue that was occurring,,,
where when we started adding multiple,,,
video frames it looks like some of the,,,
frames weren't being added and it came,,,
to a few conclusions here and i really,,,
don't think it was an issue i think the,,,
problem was the fact that,,,
when the camera quality is so high it's,,,
kind of overloading this camera right,,,
here so that's kind of the theory,,,
because when i went into this section,,,
right here and i would highly recommend,,,
that if you're having this issue test,,,
this out and if you're still having it,,,
let me know maybe we'll see it in the,,,
comment section if i fix it at some,,,
point we can,,,
try doing something else and maybe i can,,,
add a fix for that but,,,
when i remove this right here and i just,,,
try to add on a bunch of streams and i,,,
think i got up to like 15 streams no,,,
issue occurred it was only when,,,
i added in this quality right here so,,,
when i set the height and width i think,,,
what's happening is it's overloading the,,,
camera and it's just making it hard for,,,
the camera to actually,,,
load up in time and it's breaking,,,
something so i think that's the issue,,,
again try just taking all of that out,,,
testing it if you're having it and if,,,
that doesn't fix it,,,
then i'm not exactly sure what to do,,,
we'll come up with a fix later but it,,,
seems like it's only because i'm loading,,,
it all in one camera so if you're,,,
working with remote users it shouldn't,,,
really be an issue because they're,,,
loading up their own camera,,,
so yeah i think that's the only solution,,,
we'll see kind of what happens here i'm,,,
going to leave it at the high quality if,,,
we see that issue we're just going to,,,
assume that that's what it is and we'll,,,
move on from there now there was one,,,
issue that i saw i noticed that whenever,,,
remote peers were being added we have,,,
this function right here let's see where,,,
was that inside of handle,,,
user published i think,,,
we were calling player.style and i,,,
realized until this item is added to the,,,
dom we actually can't do this so what,,,
we're going to do here is let this item,,,
be appended to the dom and then we're,,,
just going to go ahead and actually,,,
query and then update it so we'll just,,,
uh,,,
call let's see what i want to do here,,,
actually wrote this as a note so we're,,,
going to go ahead and get this video,,,
frame so we'll do video frame,,,
and we'll do document,,,
dot get,,,
element by id and we're just gonna grab,,,
this item,,,
right here,,,
and we'll throw that in just use the,,,
back ticks and there we go so let me,,,
just comment this out real quick and,,,
i'll show you what was happening so,,,
essentially,,,
when i expand the video frame,,,
and if i add another user we'll look at,,,
the console,,,
this is the issue that i'm seeing so,,,
let's add another user,,,
and when it adds this user it looks like,,,
it's saying,,,
no hi for undefined or that type of,,,
property um sorry i hear an echo so it's,,,
throwing me off but essentially uh we're,,,
not setting a height to a real element,,,
yet so we're just going to go ahead and,,,
query the video frame then we'll do,,,
video frame and we'll just set,,,
the height and width to that so let's go,,,
ahead and give this a test so we're,,,
grabbing that new video frame that was,,,
being added and handle user published,,,
and let's try that one more time so i'll,,,
mute my mic make this full screen,,,
add another user actually here let me,,,
refresh it again,,,
just so i see the latest console,,,
and let's try this so when i add this,,,
user,,,
i think i'm good here,,,
so yeah i don't see any issues so now,,,
we're actually able to query that item,,,
and yeah that just solves that so i just,,,
want to fix those two issues i'll try to,,,
fix bugs as i go but also we'll try not,,,
to interrupt the video as i'm doing,,,
right now i just want to make sure we,,,
catch everything so the next thing i,,,
want to do actually is i want to go,,,
ahead and actually learn how to display,,,
our screen here so very often you might,,,
be in a meeting let's say maybe you're,,,
using this as a streaming platform you,,,
want to be able to share your screen if,,,
you're playing a game or maybe coding,,,
we want to be able to toggle this and,,,
actually see what's going on here so,,,
let's go ahead and work on that so at,,,
this point inside of our room.html,,,
function,,,
we have our,,,
screen button right here so what i'm,,,
going to do here is i'm going to create,,,
a function,,,
and we're going to go ahead and toggle,,,
that function and that's actually going,,,
to request our screen,,,
basically request access to see our,,,
screen we'll select which screen we want,,,
to show and then we're going to,,,
unpublish our video track and actually,,,
show that screen so let's go ahead and,,,
take care of that so we'll go into room,,,
rtc and the first thing i want to do is,,,
set some parameters here so some default,,,
values so right here we have our local,,,
tracks remote users let's go ahead and,,,
do local,,,
screen tracks,,,
so we'll set something up for that and,,,
at this point it's just going to be,,,
undefined we don't have any screen,,,
tracks not everyone's going to want to,,,
share that so the next thing i want to,,,
do is go ahead and set a value called,,,
sharing screen,,,
and this will just be set to false so by,,,
default until we share our screen this,,,
value will be false and we just want to,,,
make sure that we can check this if we,,,
need to now let's go all the way down to,,,
the bottom and underneath toggle camera,,,
what i'm going to do is create a,,,
function called toggle screen so we'll,,,
do let,,,
toggle screen,,,
and we'll make this an async function,,,
let's go ahead and add in our event,,,
and i want to call the event listener,,,
right away so let's copy and paste one,,,
of these here,,,
and we'll just do,,,
screen button we are going to toggle the,,,
screen whenever this is clicked so when,,,
we click this button what do we want to,,,
do so right away i want to make sure i,,,
can get a few buttons here so we want to,,,
get the screen button so we'll do a,,,
screen button that's going to be equal,,,
to e dot current target because that's,,,
the button that we clicked on and then i,,,
also want to make sure that the camera,,,
button is hidden so the only way to,,,
toggle the screen off is to actually,,,
click this again so when we click this i,,,
want this camera button to go away we're,,,
going to unpublish the stream and then,,,
only when we toggle this again do i want,,,
this camera button to actually appear,,,
so we'll go back here and we'll just do,,,
camera,,,
button and this will be document dot,,,
get element by id we'll just do,,,
camera,,,
btn so we'll get both buttons,,,
and let's go ahead and check a condition,,,
here so we'll first check if we're,,,
sharing the screen so we'll do if,,,
sharing screen and i actually want to,,,
use the not operator because right away,,,
i want to see are we if we're not,,,
currently sharing i want to actually,,,
work on that functionality right away,,,
which means that we're about to toggle,,,
that screen and share so if we're not,,,
sharing then let's go ahead and set,,,
sharing to true that means that we're,,,
about to toggle it so we'll first change,,,
that value,,,
and then i want to change the button so,,,
we'll go into our screen button and,,,
we'll add in a class here so we'll just,,,
screen button dot add,,,
class list here and we're going to set,,,
this to active so we're going to go,,,
ahead and toggle this and right after,,,
this i want to grab our camera button,,,
and we're just going to go ahead and add,,,
in the class list of where we're going,,,
to remove,,,
the class of item or active,,,
so the reason why we're doing this is,,,
because when we toggle our screen off,,,
again and we want to turn our camera,,,
back on uh by default i'm going to have,,,
the camera set as muted so the audio and,,,
video will be muted so if you want to,,,
turn off your screen you're not,,,
surprised if your face all of a sudden,,,
just appears on camera so i want to,,,
right away make sure that the camera is,,,
not active,,,
so we'll also take our camera button and,,,
we'll do style.display,,,
and we're going to display it as block,,,
here,,,
so the reason why we'll display it as a,,,
block element is because,,,
if we are currently sharing we're,,,
actually going to hide it in fact let me,,,
just go ahead and add this right now,,,
we'll do else and,,,
if we,,,
are currently sharing let's go ahead and,,,
set this value let's see i'm trying to,,,
remember how i wanted to do this,,,
so we'll set sharing screen to false so,,,
that means that we're actually turning,,,
off our screen and one of the things,,,
that we'll do is camera button right,,,
here,,,
we'll take this value and set it,,,
to,,,
none here,,,
okay so that's kind of why i'm,,,
changing this up here so the style here,,,
is going to be,,,
actually this is going to be blocked,,,
okay so there we go so we're going to,,,
hide it up here but then we'll show it,,,
down here so there we go sorry i,,,
confused myself up a little bit i just,,,
wanted to make sure you understand,,,
what's going on with the buttons so,,,
let's actually just try this,,,
so,,,
right now i guess nothing's going to,,,
happen so if we want to share our screen,,,
we're going to click that our screen,,,
will be toggled and then when we click,,,
it again we're going to turn this off,,,
and then turn the camera back on so,,,
we'll work on that in a second,,,
okay so the next thing i want to do once,,,
we finish the button functionality here,,,
is i want to go ahead and actually get,,,
our,,,
screen,,,
sharing track i was about to say screen,,,
recording now to do this,,,
we,,,
earlier used a function called get,,,
camera and audio tracks where was that,,,
let's see,,,
somewhere here so i'm trying to,,,
reference this so we got the microphone,,,
and camera tracks but at this point we,,,
already have our audio track so the only,,,
thing we need is a screen track so we'll,,,
set this to a weight and we're just,,,
going to call agora rtc,,,
dot create,,,
screen,,,
video track okay,,,
and what this is going to do is again,,,
it's going to toggle us and ask us what,,,
screen we want to share and if we,,,
approve just like we would with the,,,
camera on the first time now once we do,,,
that let's go ahead and remove our,,,
current video track so we're only going,,,
to be able to share our video or camera,,,
track and sorry about the outside noise,,,
uh let's go ahead and do git,,,
element by id and we're just going to,,,
grab,,,
the user,,,
dash container,,,
and we'll grab our current uid so,,,
throw in the uid and we're just going to,,,
remove it so we'll remove the current,,,
item our current video track and then,,,
after that we also want to automatically,,,
display our screen into the big frame so,,,
we'll do style or display frame,,,
dot style,,,
and we'll just do,,,
dot display and this will be equal to,,,
block so right away if i'm sharing my,,,
screen i want to be able to see if it,,,
all worked if the users are seeing,,,
exactly what i want to show them and so,,,
on so i figured it'd be good practice to,,,
automatically display that now after,,,
this what i need to do is create a,,,
player a video player so let's just grab,,,
one of these,,,
let's take this value we'll bring this,,,
down here,,,
so we'll create the video player and,,,
we'll have to actually initialize the,,,
variable here so we'll get the player,,,
and at this point we're just getting our,,,
current uid we don't need to get the,,,
user uid because that's for remote users,,,
and let's see the next thing i want to,,,
do is go ahead and add this player into,,,
the dom so we're going to display that,,,
mainframe as a block here and then we're,,,
just going to go ahead and do,,,
display frame,,,
and then we'll just do dot insert,,,
adjacent html and we'll throw in,,,
the player before end we'll throw in the,,,
value like this and we'll just call the,,,
player,,,
okay so we're going to take this new,,,
video player we'll throw it in there and,,,
the next thing i want to do is go ahead,,,
and actually,,,
uh actually let's go ahead and add in,,,
the event handler so,,,
when we add in this player into the,,,
video frame automatically i want that,,,
frame to be clickable so a user can,,,
actually toggle that so we want to,,,
add in that expand video frame,,,
function so we'll just do document,,,
dot get element by id,,,
and we'll just go ahead and,,,
grab,,,
the current item,,,
so get element by id let's see,,,
we'll just grab this user container i,,,
guess i could have set that into a,,,
variable,,,
so we'll grab that item and we'll just,,,
do dot add event listener,,,
and we'll just listen for a click event,,,
and we're just going to go ahead and add,,,
in expand video frame so every new item,,,
that we add in we want to make sure it,,,
has,,,
that function so in this case we're just,,,
adding it to the new element that we,,,
just created,,,
okay so once we do that let's go ahead,,,
and set the user in display frame id so,,,
we want to go ahead and take this,,,
current id so we are now inside of that,,,
display frame and we use this later to,,,
check certain values so let's go ahead,,,
and again we'll grab,,,
this value right here so that uid of,,,
this video player will set this value,,,
and after that i want to go ahead and,,,
actually play that screen track so just,,,
like we did earlier with that screen or,,,
the video track,,,
so we grab all or we create the track,,,
and then we call local tracks play and,,,
it's going to go ahead and create a,,,
video tag and throw it into,,,
this frame well we're going to do the,,,
same exact thing here so once we set,,,
user and display frame we're just going,,,
to go ahead and grab the local screen,,,
tracks and at this point we only have,,,
one track so we don't have to do,,,
anything like index 1 or anything like,,,
that we can just grab that local screen,,,
track and we'll just call,,,
play,,,
and where do we want to add this well we,,,
want to add this to,,,
user uid right there so we want to throw,,,
that into this value,,,
okay so that's going to go ahead and,,,
play it so at this point it's only going,,,
to play locally but it won't work for,,,
remote users but i just want to make,,,
sure that you can see what's going on,,,
here so let's try this,,,
so i talked a lot there let's go ahead,,,
and just try this so when i click on,,,
this it's going to go ahead and ask me,,,
hey what screen do you want to share so,,,
let's go ahead and just share this,,,
current screen,,,
and there we go now i am sharing the,,,
screen,,,
so if i move all this code to my right,,,
screen,,,
let's actually restart this,,,
i'll share that right screen now,,,
so we'll go in here and let's say we're,,,
asking somebody for some help well we,,,
can just share our screen and the code,,,
is very small because that screen is not,,,
still zoomed in and there we go that's,,,
how we can do it and then we're going to,,,
work on the toggle functionality but,,,
what happens when another user joins,,,
here so if another user joins they're,,,
only going to see our video track and,,,
not our screen track so we have to do a,,,
few things here,,,
we are currently still only publishing,,,
our video track and not that screen,,,
track so we need to publish we need to,,,
unpublish our video track and republish,,,
the screen track so this is only,,,
happening locally so let's go ahead and,,,
fix this,,,
so i'll drag my code in here let me go,,,
ahead and just refresh this again,,,
okay give that a second,,,
all right so let's go back in here and,,,
what i want to do here is go ahead and,,,
unpublish the current video track so,,,
we're just going to call,,,
await,,,
we'll call client,,,
dot unpublish,,,
so just like we have published now we,,,
can un publish,,,
and we're going to unpublish only,,,
the video track so we're just going to,,,
call local tracks,,,
and we're going to unpublish index 1. so,,,
we still want our audio track to be,,,
published because if we're sharing our,,,
screen we still want people to hear us,,,
so we're only unpublishing the video,,,
track and the reason why we have to,,,
unpublish it is because right now with,,,
this client object we can only publish,,,
one track at a time now there's ways to,,,
do two uh we're not gonna get into that,,,
for now we're just going to publish,,,
one track at a time so that means we,,,
have to unpublish this local track and,,,
then we're just going to go ahead and,,,
copy and paste this,,,
bring that out down here and we're going,,,
to call client.publish and now we're,,,
going to publish our local,,,
screen tracks,,,
so you see what we're doing here we're,,,
unpublishing our video track because we,,,
can only publish one at a time and we,,,
publish our local screen tracks our,,,
audio is still published,,,
all right so let's go ahead and save,,,
this now and let's check out what this,,,
looks like for a remote user so i'm,,,
going to drag this code into the right,,,
screen if i toggle this,,,
we'll go ahead and publish that and now,,,
if i join as a remote user,,,
i can see myself as a remote user now if,,,
this user is sharing their video track,,,
or screen track,,,
i can actually see that there we go so i,,,
can toggle myself and see this remote,,,
user's screen track it's all working,,,
perfect so now we're going to work with,,,
some untoggle functionalities let's go,,,
ahead and continue here so i'll close,,,
this out,,,
we'll refresh this,,,
and we'll drag the code back in i know,,,
it's kind of getting a little bit slower,,,
here but i just want to make sure we go,,,
step by step and i explain everything,,,
now at this point,,,
if we do this i just want to make sure,,,
that when we publish our screen,,,
automatically it's going to get,,,
displayed in the big frame so i want to,,,
make sure that we loop through all of,,,
our video frames and,,,
set those,,,
frames to a heightened width of 100,,,
pixels,,,
so let me find where i did that,,,
i just i'm just going to copy the code,,,
here we go so we'll just grab all the,,,
video frames and let's just update them,,,
so we'll take this,,,
and we'll bring this actually let's see,,,
that was,,,
setting them to 100 pixels,,,
here let's just um,,,
we'll actually go back into room.js and,,,
we'll do this right here,,,
so we'll take this entire for loop,,,
and we'll just bring this in this is,,,
where i'm getting lazy and i'm copying,,,
and pasting code so after we publish it,,,
the last thing we're going to do is go,,,
ahead and loop through all our video,,,
frames and at this point let's just go,,,
ahead and set,,,
document or actually we're going to set,,,
video,,,
frames it's going to be equal to,,,
document dot get elements by class name,,,
and we're just gonna grab,,,
video underscore container,,,
let me just move this over,,,
okay so,,,
that looks correct here just want to,,,
make sure we're setting that,,,
and there we go,,,
okay so,,,
now we need to work on unpublishing and,,,
republishing our video tracks so right,,,
away if we're currently streaming we're,,,
going to set sharing screen to false now,,,
and we're still going to make sure that,,,
our camera track is or now we're going,,,
to make sure our camera track is visible,,,
after we do that what i want to do is,,,
remove the current item so i'm just,,,
going to go ahead and,,,
take this value right here so we're just,,,
going to take that container again and,,,
we're just going to remove it,,,
so we're going to remove that current,,,
screen,,,
container once we do that let's go ahead,,,
and unpublish our,,,
local screen track so i'm going to take,,,
this unpublish method,,,
we'll bring this down here and now we're,,,
going to unpublish,,,
local screen tracks so once we do that i,,,
want to publish my video track so i'm,,,
going to put all of that inside of its,,,
own function let's see i'm seeing an,,,
issue here i just want to make sure,,,
everything's working,,,
okay it looks like i have this extra,,,
bracket right there okay so at this,,,
point we're going to call a function,,,
called,,,
switch,,,
to let's see what i want to i'll switch,,,
to camera so switch to camera,,,
okay so we're about to call this and i'm,,,
just going to comment this out because,,,
we're going to create it in a second so,,,
let's go ahead and make this function,,,
right here next to,,,
join stream so a lot of the,,,
functionality is going to be the same so,,,
i'm just going to go ahead and make this,,,
underneath join stream,,,
and let's just go ahead and create the,,,
function so we'll just call this switch,,,
to camera,,,
we'll make this an async function,,,
all right so what do we want to do in,,,
switch to camera so the first thing i'm,,,
going to do is create another video,,,
player so some of this functionality is,,,
getting redundant so we're going to take,,,
this bring this down here we'll create,,,
the video player then i want to make,,,
sure that this is added to the dom so,,,
let's grab,,,
let's see,,,
grab one of these,,,
stream containers so at this point we'll,,,
just grab this right here paste this in,,,
here and i just want to make sure it's,,,
in the big frame so we can kind of,,,
notice that something happened so let's,,,
just go ahead and do,,,
document.getelementbyid,,,
and at this point let's just go ahead,,,
and,,,
change this to display frame actually so,,,
we'll take that display frame,,,
and we'll throw in our new player in,,,
there so this is going to be that video,,,
stream once that's done let's go ahead,,,
and,,,
mute our video and audio track so just,,,
so nobody gets confused let's call await,,,
local,,,
tracks here,,,
and we're just going to take the index,,,
of zero so that's going to be our,,,
audio track we're going to do set,,,
muted and we're going to do true here so,,,
we're going to mute ourselves,,,
immediately,,,
copy and paste that we'll take the video,,,
track now,,,
that'll also be true and we're also,,,
going to take that,,,
mic and screen button and change up some,,,
of the classes here so automatically,,,
we're just going to do,,,
document.getelementbyid we'll take that,,,
mic button,,,
so mike,,,
btn and then we'll just do dot classlist,,,
dot,,,
remove and we're going to remove active,,,
so we're going to be muted so we want to,,,
make sure that the user knows that,,,
they're muted whoops what i do here,,,
okay so we're muting or removing the,,,
class of active from the mic button and,,,
we're also going to remove this from the,,,
screen button so we want to adjust that,,,
we'll remove the class of,,,
active there,,,
that looks good and now we just want to,,,
go ahead and play our local video track,,,
again so we'll take this right here from,,,
join stream we're going to do the same,,,
thing and we're just going to go ahead,,,
and bring that down here we're going to,,,
play it and we're also going to publish,,,
it we're going to publish our video,,,
track here but we're going to do,,,
something a little bit different so i'll,,,
bring this into that switch to camera,,,
function and we've already published our,,,
audio track so that's already published,,,
it's muted at this point but it is,,,
published so let's go ahead and just,,,
remove this one we don't want to,,,
republish that,,,
that's going to cause an issue so we're,,,
only publishing our video track,,,
okay so kind of a lot of jumping back,,,
and forth there but,,,
if anything just go through that again,,,
it should make sense so now we have the,,,
switch to camera function and we just,,,
want to go ahead and call that right,,,
here so let's see if everything worked i,,,
hope i don't have any issues,,,
all right so we'll save that and let's,,,
go ahead and try this,,,
so i'm actually going to take this code,,,
move it to the right screen let's go,,,
ahead and here let's actually refresh,,,
that and i'm going to toggle this right,,,
away and see how it actually adjust that,,,
frame,,,
so we'll toggle this we'll share this,,,
screen screen number two,,,
now i'm sharing the screen,,,
and i want to toggle my camera again so,,,
i'm going to click,,,
this it's going to go ahead and,,,
deactivate my mic,,,
my mic my camera and the screen and now,,,
here we go i can see myself so you see,,,
how that republished the camera so let's,,,
see what this looks like for a remote,,,
user,,,
so right now i'm currently showing my,,,
face,,,
let me mute the mic here so i don't hear,,,
that echo,,,
so if i go ahead and share my screen,,,
again so i can re-toggle it the remote,,,
user now sees,,,
this right here,,,
the screen and we'll go ahead and,,,
untoggle,,,
or toggle that again and now we're just,,,
seeing that mic muted so the local user,,,
just sees black we can fix that later i,,,
won't worry about that right now but,,,
here we go now we're seeing that and we,,,
can just keep going back and forth so,,,
it's all working let's just double check,,,
that's good,,,
awesome awesome,,,
and,,,
we are good to go there we go,,,
all right so,,,
that is the screen sharing functionality,,,
what are we doing next so let's see let,,,
me go back into the code,,,
bring this over,,,
and i think at this point what i want to,,,
do is actually give users the ability to,,,
create new rooms so i think i'm going to,,,
close out a few of these tabs actually,,,
but i want to make sure that users can,,,
actually go to create room and specify,,,
their name because we are going to get,,,
to the point where we're actually going,,,
to display user's name in the chat so i,,,
want users to be able to create or join,,,
a room so let's start dealing with this,,,
functionality so right now if i do,,,
something here nothing will happen,,,
let's go ahead and build this in so,,,
let's jump back into we're not back into,,,
but let's jump into,,,
join form for the first time so in the,,,
js file we'll go into,,,
lobby not join,,,
and in here we'll also pull up,,,
lobby.html so let's just uh oops let me,,,
open that in live server,,,
we'll close out room rtc room html room,,,
css,,,
and we'll do lobby html we'll open that,,,
to the side,,,
okay so here we have a form we have a,,,
container and we have a lobby form so,,,
let's get this form and add in an event,,,
listener that actually responds to when,,,
someone submits it so we'll set the,,,
value of form and this will be,,,
document.getelementbyid,,,
we're going to go ahead and get,,,
lobby,,,
double underscore form,,,
and we'll add the event listener right,,,
away so we'll do form,,,
dot add event listener and we're going,,,
to listen for the submit event and we'll,,,
just add in the function right in here,,,
so i'll make that an arrow function and,,,
let's see so the first thing i want to,,,
do is prevent default so we want to take,,,
care of all the functionality that,,,
occurs when the form is submitted and i,,,
need to get the room name so i want to,,,
make sure that this is not required,,,
because i want to do something a little,,,
bit different here so the name will be,,,
required we'll leave that right there,,,
but for the room value here this is all,,,
inside of the form,,,
let's go ahead and get that so,,,
let's just go ahead and specify the,,,
value of invite code and this could be,,,
the room name invite code the reason why,,,
i call the invite code is because if i'm,,,
in a room and i want to add another user,,,
i would just send them the room name or,,,
invite code it really doesn't matter at,,,
this point so we'll go ahead and get the,,,
target value so that's gonna be the form,,,
and we're getting room dot value,,,
okay so we're going to get that invite,,,
code but if an invite code doesn't exist,,,
we're going to use the not operator and,,,
we're going to go ahead and say hey if,,,
we don't have an invite code let's just,,,
go ahead and create a new invite code so,,,
for this we're just going to go ahead,,,
and do string and we're going to,,,
generate a random number between 1 and,,,
10 000. so we're going to do math dot,,,
floor and in here we can do math.random,,,
to generate a random number so we'll do,,,
random,,,
and at this point we'll just do,,,
by ten thousand,,,
okay so there's different ways to do,,,
this you can maybe force users to create,,,
a uid this part's up to you i'm just,,,
showing you the functionality so,,,
let's go ahead and do window,,,
dot location so we're just gonna,,,
redirect the user so once the form is,,,
submitted we're going to redirect the,,,
user to the room.html page now at this,,,
point we also want to throw in the room,,,
value and this is how we're going to get,,,
this from the other page here so we'll,,,
do room and then this is going to be the,,,
invite code,,,
okay so inside of our,,,
room underscore,,,
rtc.js file we're getting the room id,,,
from the url right here so we're getting,,,
that room value and then up until now,,,
we've just been setting that room to,,,
main but we want to actually change this,,,
so let's go ahead and just give this a,,,
test and see what's happening so if i'm,,,
in the room here let's go to create,,,
i'm just going to add in a name because,,,
that is required if i go to go to room,,,
we just see a random room generated now,,,
if i go ahead and paste this in as long,,,
as we're in the same room we can see,,,
another user but if i change this value,,,
right here we're in that room page but,,,
this user and this user are in two,,,
separate rooms here so let's say i can,,,
add in a random,,,
random amount of characters it doesn't,,,
really matter we're in two separate,,,
rooms so that's how we're able to do,,,
that but if i want to create a room and,,,
have a specific name so let's say i name,,,
my room test here i can go to the room,,,
here i'll see it so if i send this,,,
number or this value to another user,,,
let's just go ahead and bring this in,,,
here give me a second here,,,
okay so if another user goes here and,,,
they specify their name let's just do,,,
dennis and i tell them hey the room name,,,
is test so they can go here,,,
and now we're in the same room okay so,,,
that's the idea here either generates a,,,
random room number or a room invite code,,,
id whatever you want to call it or,,,
create another one or a custom one now,,,
the next thing i want to do is go ahead,,,
and actually have a display name so at,,,
some point we're actually going to have,,,
a chat here and i want users to be able,,,
to actually,,,
see our name here so on the sidebar and,,,
then when we're actually messaging so,,,
what i'm going to do here is go ahead,,,
and try to get the name from local,,,
storage so right here let's just go,,,
ahead and do let,,,
and we'll call this display,,,
name and the idea here is to get the,,,
name from local storage so we'll call,,,
local storage,,,
dot get item and we're just gonna go,,,
ahead and get display,,,
underscore name so if we've actually,,,
been on this website before and we've,,,
entered a name in we should just go,,,
ahead and get that value from local,,,
storage so that way we're not having to,,,
type this in again now we can always,,,
update it but we're just going to go,,,
ahead and get that value now if this,,,
value does exist we're just going to go,,,
ahead and do if display name if it does,,,
actually exist here let's go ahead and,,,
just add it to the form here so we'll,,,
just do form,,,
oops okay form,,,
dot name dot value and we're just going,,,
to set it sorry i don't know what's,,,
going on here so form dot name,,,
dot value,,,
okay and that's going to be equal to,,,
display name so let's go ahead and test,,,
this,,,
actually before we finish this up we're,,,
just going to go ahead and actually uh,,,
submit the form with this so when we,,,
submit the form we need to update this,,,
name so we'll just do,,,
local storage,,,
so local storage dot set item so when we,,,
submit it if we don't have a name yet,,,
we'll just do display underscore name,,,
and we're just going to set the,,,
name values which we'll do e dot,,,
target,,,
dot name and every time i do name for,,,
some reason it seems to mess this up so,,,
we'll just do that slowly so we're going,,,
to set the name value any time we submit,,,
it okay so let's try this out so we'll,,,
go in here go to create room,,,
okay so it looks like i already have the,,,
name peter inside of local storage so,,,
that's the beauty of local storage it,,,
automatically filled this in so if i do,,,
dennis we'll just go ahead and set the,,,
room name as one now if i go back to,,,
create room if i refresh this dennis is,,,
right here so if i go ahead and do,,,
inspect here,,,
i'm not going to go into the difference,,,
between local storage and session,,,
storage other than the fact that session,,,
storage will be cleared once we're off,,,
this website it's just for the session,,,
whereas local storage will store this,,,
value in here for a set amount of time,,,
or whatever we actually want to leave,,,
that as whether it's permanent or a,,,
specific amount of time this value will,,,
always be in here so that's how we get,,,
the local storage so if i remove that,,,
now and i refresh that let's try this,,,
again so right now if i refresh it,,,
nothing's going to be in there if i,,,
added dennis that value was added to our,,,
local storage and that's always going to,,,
be there so for testing purposes though,,,
because i want to open up multiple tabs,,,
let's change this to,,,
session storage and then we'll do,,,
session storage right here so that's all,,,
we wanted to do here and what i want to,,,
do is make sure before we jump into the,,,
next step here is i want to make sure,,,
that a user always has a display name if,,,
they don't i want to make sure that we,,,
simply just redirect them so let's,,,
actually take this display name value,,,
and let's copy that and let's move this,,,
into room underscore rtc,,,
so we'll bring this in here so we're,,,
going to get that display name now we're,,,
going to check we're going to say if,,,
there is not a display name so we'll use,,,
the not operator,,,
not dispatch event so if there's not a,,,
display name,,,
let's go ahead and simply redirect the,,,
user so we'll not allow the user to be,,,
in here without a display names we'll do,,,
location,,,
so window.location and that's going to,,,
be equal to the lobby page so lobby.html,,,
okay so let's try this,,,
so if i go ahead and,,,
try to enter the room without a name so,,,
just go ahead and add in some kind of,,,
room name,,,
it actually requires it so let's just go,,,
ahead and add in dennis,,,
now i'm in the room but if i go in here,,,
and i clear that local storage let's go,,,
into application let's go into session,,,
storage actually not local storage we'll,,,
clear that there,,,
and in session storage if i remove this,,,
and refresh it it's just going to,,,
redirect me back to the lobby page so i,,,
cannot enter,,,
a room,,,
without a name,,,
okay so let's move on to the next,,,
section here and what i want to do now,,,
is start adding in some real-time,,,
features into this project by listing,,,
out participants that are currently in,,,
the room so as users join or leave the,,,
room we want to be able to update this,,,
right here and the participants total,,,
along with a chat room on the side so,,,
this is all going to be in real time now,,,
typically you would need to use,,,
something like websockets to add in,,,
real-time communication and some kind of,,,
signaling server but for this agora,,,
actually provides us with another sdk,,,
called agora rtm and we're going to be,,,
able to use that sdk to build all these,,,
features in so there's a lot of cool,,,
stuff with that and up until now we've,,,
worked with the rtc sdk so real-time,,,
communication that has everything to do,,,
with audio and video now it's time to,,,
add in another sdk and start building,,,
this out so if we go back into our agora,,,
console go ahead and go into,,,
let's see we'll go into documents here,,,
or downloads actually let's start with,,,
the api reference and let's look up the,,,
rtm sdk so go ahead and select web right,,,
here for your platform,,,
and down here if we scroll we can see,,,
real-time messaging so this is the sdk,,,
this is the api reference and if you,,,
look here we can see a lot of features,,,
here so we can send peer-to-peer,,,
messages we can send messages to a,,,
channel and we can also get information,,,
about this channel like who's in it and,,,
get updates on when people join or leave,,,
a channel so that's how we're able to,,,
communicate is by joining channels and,,,
sending messages either directly to,,,
peers or to these channels so let's just,,,
go ahead and get started and you'll see,,,
how all of this works so what we're,,,
going to do here is go back into our,,,
console and i'm actually going to go,,,
into,,,
the download section and we're just,,,
going to go ahead and download the sdk,,,
for rtm so we have real-time messaging,,,
let's go ahead and click that and we're,,,
just going to need to add this into our,,,
application and connect a few things,,,
so i'll move this over here and i'll,,,
minimize this let's just grab the zip,,,
file right here let's go ahead and go,,,
into the libs folder and let's take this,,,
one right here,,,
so the js extension and we're going to,,,
drag this into our project so we'll,,,
close all of this out and back inside of,,,
our code here let's just go ahead and,,,
connect a few things so,,,
the sdk is right here let's drag this,,,
into the js folder so let's move,,,
everything in one section here and then,,,
we'll go back into lobby.html,,,
and let's just connect it down here,,,
let's see that's actually supposed to be,,,
in,,,
room.html,,,
so we'll minimize that and let's go in,,,
here and we'll just bring this down here,,,
so let's copy and paste this and i'm,,,
just going to go ahead and get the name,,,
here so this is agora rtm make sure you,,,
grab the right one we're going to copy,,,
that name and i'm just simply going to,,,
update everything,,,
from after js all the way to dot js okay,,,
so let's jump back into room underscore,,,
rtc.js and what we need to do now is,,,
configure the rtm sdk here that we just,,,
added so just like we did with the rtc,,,
sdk we created a client object then we,,,
take our room name and uid that we have,,,
generated and we join a room with a,,,
specific user so we join a room right,,,
here we use the uid token app id and so,,,
on well we're going to do a lot of the,,,
same stuff with the rtm sdk except for,,,
in this case we're going to join a,,,
channel which is going to be like a room,,,
so it's kind of similar here and with,,,
this room we're able to send messages to,,,
and get information about all those,,,
users so the first thing i want to do is,,,
configure a client object and at this,,,
point let's just call this rtm,,,
client,,,
and i'm just going to prefix it so we,,,
know that this is for the rtm sdk and we,,,
also want a channel and this can also be,,,
called room channel that's kind of the,,,
same thing i'm just going to go ahead,,,
and keep it that way because that's a,,,
common convention when we're dealing,,,
with something like this so we have our,,,
client and our channel and we want to go,,,
ahead and initialize this so,,,
inside of the join room init when we,,,
join this video call we're also going to,,,
join the channel using the rtm sdk so,,,
let's actually move this down here so,,,
we're basically joining two things at,,,
once here and we're gonna go ahead and,,,
get the rtm client and at this point we,,,
can call await,,,
agora,,,
rtm so before we did rtc now we're doing,,,
rtm right here because we have that sdk,,,
and i also need to set this value so,,,
we're calling agora rtm dot create,,,
instance so again i would highly,,,
recommend you look at the agora,,,
documentation go back to the same place,,,
that i showed before look at the api,,,
reference and you'll see the details,,,
about all these functions if you need to,,,
do something else there,,,
so at this point we're just going to go,,,
ahead and pass in our app id so that's,,,
how we create an rtm client instance now,,,
once we create that rtm client instance,,,
let's go ahead and actually,,,
log in with this client so we're going,,,
to call that client object we'll call,,,
login,,,
and to log in we are going to need our,,,
uid so we have the uid that we specified,,,
earlier along with the token now,,,
remember that we set our token or the,,,
authentication to app id only so token,,,
is okay if we leave it as null so let's,,,
just recap this we created the uid and,,,
we also have our token so we're using,,,
the same exact values to log into rtc,,,
and rtm okay so we log in here and the,,,
next thing we want to do is go ahead and,,,
actually create or join a channel so,,,
we're going to take that channel value,,,
that we just created and we're going to,,,
go ahead and call await,,,
and here we're going to do rtm client,,,
dot create channel so again if this,,,
channel exists we're just going to join,,,
it if it doesn't we're going to create,,,
it and we're going to take that same,,,
room id so the room id that we created,,,
for the rtc client here well we're going,,,
to join the same thing so we're creating,,,
or we're joining a room with that room,,,
id from the url,,,
and,,,
once we actually create the channel we,,,
need to join the channel so i actually,,,
misspoke there we're going to create it,,,
and then join it so we're going to call,,,
channel dot join let me just throw in a,,,
way here just in case,,,
okay so we create the rtm client we log,,,
in with that client using our uid and,,,
token and then we go ahead and create a,,,
channel and we join that channel so,,,
we're in that channel now once we're in,,,
that channel what i want to do here is i,,,
want to see everybody else that's in,,,
this channel so at this point let's just,,,
go ahead and create another javascript,,,
file so any of the functions dealing,,,
with the agora rtm sdk we're going to,,,
keep that separate so we're not adding,,,
to this file and making this longer i,,,
think we're at about 210 lines of code,,,
right now,,,
so we'll still work in this file here,,,
but i just want to make sure that any,,,
functions that could be separated are,,,
separated here so we're joining the,,,
channel at this point everything's,,,
looking good so let's go into the js,,,
file and we'll create a new file and,,,
we're going to call this room underscore,,,
rtm dot js here and let's go ahead and,,,
create this function so,,,
when we join a channel there's going to,,,
be an event listener just like we had,,,
right here where we had client on user,,,
publish so anytime a user publishes,,,
their stream or leaves right here we,,,
have these side effects that get called,,,
well with rtm we're going to have the,,,
same thing here and this is how we're,,,
going to be able to update those,,,
participants in the dom and actually,,,
know when someone joined so we're going,,,
to go ahead and call the channel here,,,
and we're going to call the on,,,
and then we'll do member,,,
join so make sure it's a capital m and,,,
capital j so on member joint we're gonna,,,
call a function and this is gonna be,,,
called handle,,,
member,,,
joined,,,
so we're just gonna go ahead and,,,
actually call this function here and,,,
we're gonna build this function inside,,,
of agora rtm and before we actually,,,
start working with this let's go back,,,
into,,,
room.html and i want to make sure that,,,
we actually connect rtm here so let's go,,,
ahead and bring this down here,,,
and we're going to change this to rtm,,,
like that okay so we added that in we,,,
want to make sure that we have access to,,,
everything and actually just in case let,,,
me bring this above rtc,,,
so i just want to make sure that we're,,,
actually having access to all these,,,
functions so i think placing that above,,,
would actually be better okay so we'll,,,
go back into,,,
room rtc so we're calling handle,,,
member joined and in room rtm or room,,,
underscore rtm dot gs let's go ahead and,,,
create this function so we'll do let,,,
handle member joined we'll make this an,,,
async function,,,
and by default when we call this,,,
function we want to know the member id,,,
so we actually have access to that so,,,
we'll do member,,,
id,,,
and let's go ahead and make this an,,,
arrow function and close this off here,,,
and for now let's just console this out,,,
so we can actually see it so we'll do,,,
console.log and we'll just do a new,,,
member,,,
has joined,,,
the room and then let's just console out,,,
the member id so let's just get the core,,,
functionality in and then we'll actually,,,
start working with the side effects here,,,
so we have the function,,,
we call the function here on member,,,
joined so listens for that event and,,,
here we go so let's check this out,,,
so if we go back into,,,
our application here let's open this up,,,
let me close out a few of these,,,
so let's go ahead and actually go into,,,
inspect here check the console i'm going,,,
to refresh this so we're in the room,,,
right now but if i join as another,,,
member we should see,,,
this console out we should see a new,,,
member has joined the room and then that,,,
should actually show up here okay what,,,
did i do here,,,
okay so we should actually see this,,,
consoled out because it's going to fire,,,
this off so let's try this,,,
and we're also joining the same room so,,,
the room is going to be 5 six nine four,,,
so we have to make sure it's the same,,,
one so let's move this down here,,,
and let's join copy and paste that,,,
oh i guess i need the room name here,,,
and let's just join as tim so let's,,,
throw in a name so we'll go to room and,,,
write it right away we see,,,
here let me mute this so i'm not hearing,,,
the echo,,,
okay,,,
so,,,
immediately we're seeing this get,,,
consoled out so we'll just say a,,,
new member has joined so here we go we,,,
can see it so we can see that user's id,,,
and we know someone else has joined the,,,
room so perfect now let's go ahead and,,,
actually add them to the dom so when a,,,
new member joins i want to be able to,,,
update this so what i'm going to do here,,,
is go ahead and clear this out and we're,,,
going to start updating that sidebar so,,,
let's go into room.html and let's go,,,
into,,,
the members section so when a new member,,,
joins we're just going to go ahead and,,,
create this element and actually add,,,
them,,,
so i'll leave this top one right here,,,
and i'll just comment this out because i,,,
do need one at least to work with,,,
because i want to take the styling and,,,
let's just take all these member,,,
wrappers,,,
and we'll go down to the last one and,,,
we'll clear that out,,,
let's see this save it,,,
okay so we see no members and i'm also,,,
going to reset participants to zero,,,
because we're going to update that,,,
okay so when a new member joins let's,,,
take this div so i'm going to copy this,,,
and let's go back into room rtm,,,
here i'm hearing an echo somebody to,,,
close one of these out so we're going,,,
into room rtm here and we're going to,,,
create another function and this is,,,
going to be called add member,,,
to dom so we're going to go ahead and,,,
add a member we're going to make this an,,,
async function,,,
and at this point we're just going to,,,
pass in the member id so member id and,,,
we're just going to call this,,,
let's see let,,,
member item and i'm just going to paste,,,
in what i copied so i'm going to use,,,
backticks we'll paste this in and we're,,,
going to add this item to the dom so at,,,
this point we're going to want to change,,,
this value of 1 to the actual user id,,,
because when a user leaves we need to be,,,
able to query this and remove it,,,
and we're also going to update the name,,,
later on we'll actually add this as a,,,
name value but for now we'll just throw,,,
in the member id,,,
so let's go ahead and actually add this,,,
to the dom we'll just do let members,,,
wrapper oops accidentally capitalize,,,
something there and then we'll do,,,
dot get element by id,,,
and this is going to be,,,
member,,,
underscore list or double underscore so,,,
we'll take that members list,,,
and that's right here and we just want,,,
to add that item to this section so,,,
let's go ahead and get that member and,,,
we'll just do,,,
members wrapper,,,
dot,,,
insert adjacent ht or adjacent html not,,,
element so we'll do html and we'll just,,,
go ahead and add this before,,,
end,,,
and we'll throw in the member item,,,
so take that member item we'll add it,,,
and then let's go ahead and call this,,,
function right here so we'll add the,,,
member to the dom pass in the member id,,,
and let's try this out,,,
so,,,
let's open this up,,,
and if i go ahead and join with another,,,
member let me mute a few things here we,,,
should see this pop up here actually,,,
here i keep forgetting to join the room,,,
so we'll join as tim again,,,
and we'll meet her mike,,,
and here we go we see the member has,,,
joined the room so we don't see the name,,,
and we don't see our own id so we're,,,
going to fix that so the other member,,,
joins we don't see all the participants,,,
so we're going to fix all of this right,,,
now so let's go ahead and join with,,,
another room or with another member,,,
we'll just do eric and this is five six,,,
nine four,,,
yeah five six nine four we'll go back,,,
here,,,
and as that member joins we can see them,,,
enter the room so perfect and then this,,,
one's only going to see that newest,,,
member and then the current member that,,,
just joined won't see that so we're,,,
going to update this in a second now,,,
what happens when we actually leave the,,,
room so when we leave a room the members,,,
don't get removed so we want to actually,,,
remove these members here so as they,,,
leave we have another event that we can,,,
listen for and this is going to be,,,
called member left so we're simply going,,,
to take that element from the dom find,,,
out which member left the room and we're,,,
going to remove them so there's going to,,,
be a little bit more functionality here,,,
so let's go ahead and add this so we'll,,,
go back into room rtc and we're going to,,,
take this event right here let's copy,,,
this and we'll do,,,
member,,,
left here,,,
so,,,
left and then we'll do handle member,,,
left so we'll go back into our room,,,
underscore rtm file and create that,,,
function so let's go ahead and create,,,
that handle remember left make that an,,,
async function we do need the member id,,,
so we'll pass that in create the,,,
function itself and in here what i'm,,,
going to do here is actually go ahead,,,
and create another function that's going,,,
to remove this member from the dom so,,,
later on we're actually going to want to,,,
call some other stuff inside of this,,,
function so that's why it's going to be,,,
its own function but we're going to,,,
create another function like this where,,,
we add the member to the dom here we're,,,
also going to remove it so let's go,,,
ahead and just create that or call it,,,
right here so we'll do remove remember,,,
from dom,,,
and we're going to pass in the member id,,,
in here and then we'll create that,,,
function so remove,,,
remember from dom,,,
and we'll make that an async function,,,
pass in the member id,,,
and let's go ahead and close this out so,,,
all we want to do here is go ahead and,,,
grab the specific member wrapper and,,,
remove it so we'll just do,,,
member,,,
wrapper so this specific wrapper we're,,,
going to grab it by the id so we're,,,
looking for this id we're going to query,,,
this so this tells us which member left,,,
we're going to go ahead and get that,,,
member and then delete them so the,,,
document,,,
document type but document,,,
what the heck is going on here so,,,
document.getelementbyid,,,
and this is going to be,,,
remember,,,
double underscore,,,
passing the member id,,,
and then we'll do double underscore,,,
wrapper,,,
so we're getting that number and then,,,
we're calling,,,
remember wrapper dot remove and that's,,,
it so we're just going to go ahead and,,,
actually remove the member now to,,,
actually leave the channel if i just,,,
close out my browser uh technically the,,,
member will still stay in there after,,,
about 30 seconds agora by default if it,,,
senses an activity it'll actually just,,,
call the leave function and we'll leave,,,
the channel but we want this to happen,,,
immediately so when a user closes out,,,
their room leaves a channel turns off,,,
their computer or whatever happens we,,,
want this function to be called now we,,,
could call this on click of some kind of,,,
back button or some exit button but,,,
that's all not always practical because,,,
some people leave the room by simply,,,
shutting their laptop or turning off,,,
their computer not everybody always,,,
clicks a button so for this just to,,,
ensure we actually call this function,,,
here we're going to go ahead and call it,,,
on the unload or before unload event,,,
listener with a dom here so we'll first,,,
create a function and this is going to,,,
be called,,,
leave channel so when a user leaves a,,,
channel we're going to go ahead and,,,
actually call this so leave channel,,,
we're going to go ahead and do await,,,
channel dot leave and then we're going,,,
to log out with the rtm client so we'll,,,
just do await,,,
rtm,,,
client.log out so we're simply leaving,,,
and logging out now to call this,,,
function and again this is what's going,,,
to trigger,,,
this event right here so handle member,,,
left this is going to be that response,,,
right here so when we call this function,,,
so now to ensure that this is always,,,
called let's do window,,,
dot add event listener and we're just,,,
gonna do before unload so before unload,,,
so basically once the dom is being torn,,,
down once we're starting to tear this,,,
down before it actually completes it,,,
we're gonna call leave channel okay so,,,
now we can join and leave a channel so,,,
let's go ahead and try this,,,
here let me make this,,,
room number a little bit easier to,,,
remember we'll just do one so we're,,,
gonna be in this room,,,
and now when another user joins,,,
we'll do,,,
1 and this will be tim,,,
so we'll just keep adding these users,,,
and this one will be,,,
eric or i guess that name is irrelevant,,,
but okay so the members are being added,,,
but when i close this out this is going,,,
to call that before leave before unload,,,
function it looks like it's freezing up,,,
a little bit so let's go ahead and close,,,
this out so when a member leaves we see,,,
that be removed from the dom and there,,,
we go and then if that member tries to,,,
join again we'll join as,,,
tim,,,
one,,,
all right there we go so that,,,
functionality is ready so what i want to,,,
do now is make sure that when we first,,,
load our page if there is a room with,,,
members already in here so right now i,,,
joined as a new user i want to see,,,
myself and i also want to see the user,,,
that was in there before me because,,,
right now we're only seeing the new,,,
members that are joining so if i join as,,,
paul and i join this room you'll notice,,,
that the first user is going to see the,,,
two new users this user will see the,,,
most recent user and this user won't see,,,
any so let's go ahead and call a,,,
function to get all those members and,,,
load them in here so we'll save,,,
everything,,,
and let's go ahead and down below the,,,
leave channel function actually we'll do,,,
this above right here so just below,,,
remove member from dom,,,
let's call this get members,,,
so we're going to go ahead and make a,,,
call for all the members in the channel,,,
on the first load,,,
so to get the members we're going to,,,
create the variable members,,,
and the channel has a function i,,,
actually want to make sure to add in a,,,
weight right here we have a method,,,
called get members so it's going to go,,,
into this channel and it's going to give,,,
us every single member that's currently,,,
in this channel it's just going to,,,
return back an array of their ids,,,
so once we get this we're going to,,,
create a for loop and we're just going,,,
to loop through each channel member and,,,
then add them to the dom so let's go,,,
ahead and do let i is equal to zero,,,
and then we'll do members,,,
dot length,,,
and if that's greater than i then we'll,,,
go ahead and increment i and then go,,,
ahead and add this function in here so,,,
we'll do add member to dom and at this,,,
point because of that iteration in that,,,
loop we're actually getting the member,,,
ids so we'll do members and then get,,,
that current member's id so we're going,,,
to go ahead and call add member to dom,,,
and then render them out here so to get,,,
the members on the first load let's go,,,
ahead and grab this we'll bring this,,,
into room underscore rtc and i'm going,,,
to bring this just underneath the,,,
channel,,,
functions right here so let's go ahead,,,
and call this so we'll go ahead and call,,,
get members so we want to have time for,,,
everything to load we'll load all our,,,
channel members in there we'll join,,,
ourselves and then we'll call the,,,
function so let's go ahead and open this,,,
up here we go so on the first load i'm,,,
already seeing my own id that's perfect,,,
now when i join as a new user i want to,,,
see my id that's going to be the new,,,
user's id and then the users that are,,,
currently in there so we'll join the,,,
first room,,,
there we go we see two ids and two ids,,,
so mute that,,,
mute that there,,,
i guess that didn't mute it,,,
and then we'll join again,,,
let's call this paul,,,
okay and let's go ahead and join perfect,,,
so every single member now sees,,,
themselves and it's lagging right now,,,
it's not an agora issue my network,,,
actually has been bad all day for some,,,
reason so um yeah that's i wouldn't,,,
worry about this part that's not an,,,
issue with the app so here we go we see,,,
the members everything looks good as we,,,
leave,,,
all that gets updated and perfect so,,,
having an idea is not really practical,,,
we want to actually see member names so,,,
we want to know who's in the room so,,,
let's go ahead and add that next so this,,,
is actually going to be very easy and i,,,
think it's about two lines of code here,,,
so all we need to do is go ahead and as,,,
we join a room we're simply going to add,,,
in an attribute to our members so when,,,
we join we kind of like upload our id,,,
into that room so our channel id gets,,,
stored there so that user object is,,,
stored in the channel room and we just,,,
want to basically add in an attribute to,,,
that,,,
user object and that's going to be a,,,
name so we can add in whatever attribute,,,
that we want here so let's go ahead and,,,
as we log in let's go ahead and create,,,
this attribute so we're going to do,,,
await,,,
rtm client,,,
dot add,,,
or update it's kind of a long function,,,
so add or update,,,
local,,,
user attributes,,,
like that,,,
and then in here we want to first,,,
specify the attribute that we want to,,,
add so this is going to be named so we,,,
want to add in a key value here and then,,,
we're going to take our current display,,,
name remember we have that up here,,,
stored somewhere so we have our user's,,,
display name and we're just simply going,,,
to add that in there so we're adding it,,,
as a channel attribute,,,
okay,,,
so first we add the attribute so now all,,,
other users can actually get this,,,
channel attribute by,,,
finding our user's id so now we'll go,,,
back into room underscore rtm and we're,,,
going to get this channel attribute,,,
so in the add member to dom function we,,,
have the member id here so let's go,,,
ahead and actually call this right here,,,
so we're going to call let and then name,,,
so we actually want to destructure the,,,
return value here and we're going to,,,
call await and then we can do rtm client,,,
dot get,,,
user attribute,,,
by,,,
keys,,,
and we're just going to go ahead and,,,
call this function first we want to know,,,
what user attribute we want to get or,,,
what users attributes we want to get so,,,
we're going to pass in that member id,,,
we're saying hey this is the user that,,,
we want to receive some more information,,,
from and we're going to pass this in as,,,
an array and we want a list of the,,,
attributes that we want so we added this,,,
as name right here so we want to get,,,
this value right here so we're saying go,,,
ahead and get the name value from this,,,
specific user so get user,,,
attributes by key so that should be s,,,
right there i want to make sure i got,,,
that right,,,
and let's go ahead and test this so get,,,
user attributes just want to make sure,,,
all the spelling's correct so once we,,,
get that value we can go ahead and,,,
change the member name to name let's go,,,
ahead and just update that and let's,,,
give this a test so there we go i see my,,,
own name we'll join in as another user,,,
whoops,,,
okay copy the wrong value here so let's,,,
go ahead and join what the heck is going,,,
on won't copy the entire url,,,
okay so we'll join as,,,
paul,,,
let's go ahead and join room one,,,
here we go we see paul and dennis and,,,
then on this end i see,,,
the user's name so perfect we're able to,,,
add in those channel attributes and join,,,
with those users so we can actually see,,,
who's in that specific room so the next,,,
thing i want to do is update this total,,,
so we want to make sure to actually get,,,
the list of channels find out the length,,,
of that array that we have in that,,,
participants list or members list and,,,
we'll just go ahead and update this,,,
total so let's go back into,,,
room underscore rtm,,,
so underneath our add member to dom,,,
function let's go ahead and create,,,
another function and we're going to call,,,
this one update member total so update,,,
member,,,
total and this is going to be an easy,,,
function here so we'll just go ahead and,,,
make this an async function by default,,,
let's go ahead and complete the function,,,
and let's just go ahead and set the,,,
value of total or let's go ahead and,,,
actually get that dom element so we'll,,,
do total and that's going to be document,,,
dot get element by id,,,
this value was,,,
member count so we want to get,,,
this element right here and we're simply,,,
going to update the value inside of that,,,
so,,,
total is going to be dot inner text here,,,
so we're going to update that text from,,,
0 to members,,,
dot length so we're going to go ahead,,,
and actually pass in the members array,,,
into here,,,
so throw that into the parameters and i,,,
want to call this anytime a member joins,,,
here so when a new user joins let's go,,,
ahead and call this we'll call update,,,
member total we'll throw in members here,,,
and let's actually get the members on,,,
the first load so we'll do let,,,
members is equal to channel,,,
dot get,,,
members and also need to throw in a,,,
weight right here,,,
okay so we're going to go ahead and,,,
throw the channels in here update the,,,
total let's copy this again we also want,,,
to update it when we leave,,,
so or when a user leaves so handle,,,
member left we'll bring that in here,,,
update that value and then we also want,,,
to update the total on the first load so,,,
inside of get members let's also call,,,
the function right here and here we,,,
already got the members,,,
so let's paste that in and let's check,,,
this out,,,
okay so i just need to refresh,,,
everything so we saved it a bunch of,,,
times probably screwed up a few things,,,
so let's go ahead and just mute this and,,,
here we go,,,
okay so here we see two members let's go,,,
ahead and bring in another one,,,
paste that in we'll call this one eric,,,
join the room we see three total and,,,
then these were updated to three and,,,
this one is updated to three if we leave,,,
that should be updated,,,
and there we go so we are now updating,,,
the participants totals and we have all,,,
the information so we took care of most,,,
of the core functionality here and now,,,
it's time to move on to actually adding,,,
in chat messages,,,
so just underneath our get members,,,
function here let's go ahead and create,,,
a new function and we're going to call,,,
this one send message so this function,,,
will be responsible for actually sending,,,
out a message to the entire channel so,,,
anybody that's a part of this channel,,,
can have an event listener that can,,,
listen for this and this is a channel,,,
message so we have channel messages and,,,
we have peer-to-peer messages we won't,,,
work with the peer-to-peer messages,,,
right now but i just want to let you,,,
know that there's ways to actually,,,
direct message people based on their uid,,,
so inside of the send message function,,,
let's go ahead and,,,
prevent the default so we'll do e dot,,,
prevent,,,
default and then after this what i want,,,
to do is go ahead and get the message,,,
from the form so we'll go ahead and grab,,,
that message is going to be e dot target,,,
and then we'll just go ahead and get the,,,
value so target dot,,,
message dot value so i want to make sure,,,
that this is,,,
the name that i actually give that form,,,
field so let's go back into that form,,,
field inside of room,,,
let's see where was that so we have our,,,
stream or messages container so let's go,,,
ahead and,,,
go to the bottom here so we have our,,,
message form and then we have the name,,,
of message okay so we're grabbing the,,,
right value so we're just going ahead,,,
and,,,
grabbing that message here and then once,,,
we actually get that message we want to,,,
send out a channel message so we can go,,,
ahead and grab that channel value and,,,
then we have a method called send,,,
message so this is going out to,,,
everybody in that channel or i guess in,,,
that entire channel now in here we want,,,
to go ahead and send the actual text,,,
value so we could do something like this,,,
and then pass in the message let's say,,,
the message was hey like that we can go,,,
ahead and pass in a string well in our,,,
case i want to send a little bit more,,,
data i want to send our name,,,
the type of message that we're sending,,,
because we can actually send different,,,
types of messages so what i'm going to,,,
do here is send an object but first i'm,,,
going to stringify it and then we'll,,,
parse it on the other end so we want to,,,
make sure it's sent as a string so,,,
inside of stringify we'll go ahead and,,,
add that object,,,
and then let's go ahead and specify the,,,
type,,,
so type will be a chat message and then,,,
the actual message value let me create,,,
some space here so you can see,,,
everything so we'll go ahead and get the,,,
message and this is going to be the,,,
message from the form,,,
and then after that we'll go ahead and,,,
send our display name so do display,,,
name and we'll camel case that and then,,,
we'll throw in the display name that we,,,
currently have,,,
okay so,,,
let's go ahead and continue to the next,,,
step here so we're sending our message,,,
and before we actually start adding this,,,
to the dom i'm just going to go ahead,,,
and console this out so let's go ahead,,,
and just reset our form and then we'll,,,
actually see what it looks like in the,,,
console and then we'll actually start,,,
adding it to the dom so let's take this,,,
one step at a time,,,
so we'll do e.target.reset so the form,,,
will reset after we send it let's just,,,
make sure that that's working so if i,,,
type something out here hit enter it's,,,
just going to reset it looks like it,,,
actually refreshed the page so i forgot,,,
one more thing here let's actually add,,,
in the event listener so down here and,,,
this is all inside of room underscore,,,
rtm let's go ahead and get that message,,,
form select and we'll call this message,,,
form,,,
and this is going to be document,,,
dot get element by id,,,
and we're just going to go ahead and,,,
grab the message,,,
double underscore form,,,
double check this,,,
we have message form perfect and then,,,
let's add in the event listener so do,,,
message form don't add event listener,,,
and the event we're listening for is,,,
going to be submit or on submit and then,,,
we're just going to call send message so,,,
this will send out a message now on the,,,
other end i'm sure you're starting to,,,
see this pattern now we need a way to,,,
actually handle the response to this,,,
message so if we go to room underscore,,,
rtc,,,
right here we have this channel member,,,
joined channel member left we also want,,,
to listen for a message so let's go,,,
ahead and copy this one right here paste,,,
this below and then we're going to,,,
listen for,,,
the event of,,,
let's see i actually need to add in the,,,
channel here so channel or the c there,,,
and we're just going to listen for,,,
channel message so again in the agora,,,
documentation these are all the events,,,
we can listen for so anytime someone,,,
calls the send message function that's,,,
going to trigger channel message because,,,
that's the type and we're just going to,,,
handle the channel message so we'll call,,,
handle,,,
channel,,,
message and now we need to create this,,,
function to actually respond to that,,,
message so what's going to happen when,,,
appear gets this message so let's go,,,
ahead and build that out so we'll go,,,
back into room underscore rtm and just,,,
above send message let's go ahead and,,,
create the handle channel message,,,
function,,,
so we'll go ahead and call this handle,,,
channel message,,,
we're always making them an async,,,
function,,,
and here we're going to get the message,,,
data and we also want to know who this,,,
message came from so we're going to get,,,
the member id so those are two values,,,
that we can access right away,,,
and then we'll continue on with the,,,
function and the first thing i want to,,,
do is console this out so let's just go,,,
ahead and do console.log and we'll just,,,
say,,,
a message,,,
let me fix this a new,,,
message,,,
was received,,,
okay so we got a new message and i don't,,,
know why i can't spell received,,,
let's,,,
see whoops okay so a new message was,,,
received then we want to get the actual,,,
message so we're going to create a,,,
variable called data and remember that,,,
the message was actually stringified so,,,
we need to go ahead and parse it so,,,
we're just going to do json.parse,,,
we're going to parse,,,
messagedata.txt so we're just getting,,,
the text value right here so we want to,,,
get everything inside of this object so,,,
there's more data that comes with this,,,
message but we're just wanting to get,,,
that value because that's the actual,,,
date of the message and at this point,,,
let's go ahead and do console.log and we,,,
want to see the message so message and,,,
then let's pass in the message so this,,,
will be an object we're not getting,,,
message data but data,,,
okay so we send a message to the channel,,,
we resell our form we have the event,,,
listener that listens,,,
for that submission,,,
in this section we actually listen for,,,
that event here and let's go ahead and,,,
check this out see if we did everything,,,
okay,,,
okay so i'm gonna go ahead and mute this,,,
bring in a new member here and let's,,,
change the,,,
whoops what's going on here okay i need,,,
to reset this entire thing so let's join,,,
the room name of one,,,
and we'll do that again so we'll do,,,
peter,,,
i don't know where i come up with these,,,
names i guess more common names i'm just,,,
going to stick to that,,,
okay so i'm going to mute this,,,
okay so let's go ahead and do inspect,,,
here and we're going to have this user,,,
right here send this user a message well,,,
technically to the entire channel so,,,
let's go ahead and make sure we can see,,,
the console and let's just do,,,
hey like that,,,
we'll send it and then on this end here,,,
we go we see that chat message so that,,,
happened in real time i didn't have to,,,
refresh anything,,,
this other user automatically got that,,,
message let me try this again,,,
we'll just do hi this time and i just,,,
want to see how that works,,,
so as i'm typing this out you can keep,,,
seeing the messages right here so we can,,,
see the actual chat or the message type,,,
the message itself the display name and,,,
so on so we're able to actually go ahead,,,
and get all of this data so the next,,,
thing i want to do is actually add this,,,
to the dom so,,,
i guess the fact that we're sending out,,,
a channel message you should assume that,,,
both users can actually send messages,,,
back and forth so this user can now,,,
respond to this one and so on okay so,,,
we'll go back here and we're going to,,,
create a function called,,,
add message to dom,,,
so i'll just go ahead and bring this,,,
right here just underneath send message,,,
and let's just go ahead and add this so,,,
add,,,
message,,,
to,,,
dom,,,
and we want to take the parameters of,,,
the user's name so whoever sending it,,,
and the actual message value so the text,,,
of the message and then let's go ahead,,,
and actually create an html element so a,,,
message and then we'll append it to the,,,
dom so before we do that we want to go,,,
ahead and get the messages wrapper so we,,,
want to know where we're adding this,,,
element so we'll do,,,
document.getelementbyid,,,
and we are looking for the container for,,,
all the messages here so all the,,,
messages are added into this div right,,,
here so we have the id of messages so,,,
let's go in here we'll grab that,,,
container and then we want to create the,,,
message items we'll call this new,,,
message,,,
and let's go ahead and use backticks,,,
here and i want to find a message that's,,,
not from a bot here so we have a mumble,,,
bot message and that looks a little bit,,,
different from an actual user message so,,,
we want to get this one and then later,,,
on we'll use the mumblebot message so,,,
any message that's from the bot that's,,,
going to be extended by underscore bot,,,
right there so we want to scroll down,,,
and grab one of these right here so make,,,
sure it doesn't say bought,,,
so let's grab that entire message,,,
wrapper,,,
and we'll bring that down here give me a,,,
second oh i keep thinking i need to open,,,
up a new tab here so we'll paste that in,,,
right there inside of the back ticks,,,
let's create some space here and then,,,
for the actual name all we need to do is,,,
go ahead and take this out and we're,,,
just going to pass in the name of the,,,
sender and then we'll take in this,,,
message right here and we'll just remove,,,
the entire text value,,,
then we can just go ahead and throw in,,,
the message so we'll throw a message,,,
right there and there we go so we have,,,
the new message we have the message,,,
wrapper and we just need to go ahead and,,,
append this to that messages wrapper so,,,
we'll do messages wrapper dot,,,
insert adjacent,,,
not element but html we'll add this,,,
before,,,
end,,,
and we'll throw in new message,,,
okay so now we want to actually call,,,
this here so there's a few things that,,,
we want to fix up here but the add,,,
message to dom we want to go ahead and,,,
call on send message so right now only,,,
the sender will actually see that,,,
message and we're going to have to,,,
actually add in something on the other,,,
end for a user to receive that message,,,
so in add message to dom we're going to,,,
go ahead and throw in the display name,,,
and then we'll just do,,,
the message itself and let's test this,,,
out here so,,,
let's go ahead and look at this let's,,,
send a message so if i say hey,,,
if i scroll down we're going to see that,,,
message now if i say hi,,,
we have one slight problem here and that,,,
is the fact that new messages we want,,,
them to appear at the bottom here so as,,,
we're typing we want to make sure that,,,
they always go into frame if you look at,,,
the scroll bar it keeps scrolling up,,,
here or it keeps adjusting but we want,,,
to make sure that the newest one is,,,
always in frame at the bottom so let's,,,
go ahead and add something to fix that,,,
so down here after this messages wrapper,,,
here after we actually add in the,,,
element what i want to do is go ahead,,,
and get the last message so we'll do,,,
last,,,
message and this is going to be document,,,
dot,,,
query selector so we'll use the query,,,
selector and we want to go ahead and get,,,
the messages div,,,
and then we want to go ahead and get the,,,
message,,,
double underscore,,,
wrapper,,,
and we want to get the last one so we'll,,,
do last,,,
child and that'll ensure that we always,,,
get the latest message in that wrapper,,,
now once we get that last message all,,,
we're going to do is call scroll,,,
into,,,
view so this will just make sure that,,,
this element is in view so if it's out,,,
of view by default it'll just quickly,,,
adjust and we're going to scroll that,,,
into frame now for some reason i've,,,
actually had issues with this before so,,,
let's actually check if we have a last,,,
message for some reason when i try to,,,
call scroll into view uh it doesn't,,,
always read it as an element i feel like,,,
if there's no messages then it tries to,,,
call it and then that's when it throws,,,
an error so anytime we're calling it for,,,
the first time that's where i get that,,,
issue,,,
okay so that should fix it we get the,,,
last message then we scroll into view so,,,
if i go ahead and just refresh,,,
everything,,,
let's uh try this again so we'll say hey,,,
and there we go so now we see it if i,,,
say hi,,,
hello the latest message comes in so now,,,
i want to make sure that remote users,,,
actually get this message so right now,,,
we're only calling it when we send it so,,,
we want to go ahead and make sure we,,,
call add message to dom on the receiving,,,
end so at this point we need to do this,,,
inside of the handle channel message so,,,
anytime we receive a message,,,
we want to actually get the message and,,,
then append it to the dom so here we go,,,
we have handle channel message let's go,,,
ahead and clear this out we'll just,,,
leave this right here just in case we,,,
need to debug later so at this point,,,
let's go ahead and check the type of,,,
message and if we get a chat message so,,,
data dot,,,
type if this is a chat message so,,,
remember we sent that with the object of,,,
chat right there we want to go ahead and,,,
actually,,,
get this message so we want to append,,,
the message to the dom but we first need,,,
to get the user's name so the sender so,,,
let's go ahead and throw in name and,,,
then we'll do data,,,
dot message so we're getting the message,,,
value and then we're getting the display,,,
name so at this point we can just go,,,
ahead and do data dot display name,,,
so let's go ahead and save that and,,,
we'll try this one more time so i'll,,,
bring this to the left here and then,,,
i'll take another one bring it to the,,,
right let's make sure we're in the same,,,
room i believe the room id is one so,,,
let's just go ahead and rejoin again so,,,
we'll do dennis one,,,
and then we'll do,,,
tim and then we'll also do one so let's,,,
go to the room we'll open up the chat,,,
here and i'm gonna mute the audio so i,,,
don't hear an echo and let's try here,,,
we'll say hey so dennis says hey to tim,,,
or everybody in the room and then tim,,,
says hi to everybody in the room and,,,
there we go so we have real-time,,,
communication between them awesome it's,,,
looking good so let's go ahead and do a,,,
little bit of cleanup so i want to go,,,
ahead and get rid of these extra,,,
messages right here and we're just going,,,
to comment this out because we're about,,,
to add in this bot right here so i want,,,
to comment out that bot message make,,,
sure that we have it so we can actually,,,
use it in the new function we're about,,,
to create so we'll go to room and let's,,,
go ahead and go to the bottom of the,,,
messages and let's grab every single,,,
message,,,
but this last one at the top so delete,,,
all of them but one we'll go ahead and,,,
save this because this is a bought,,,
message and let's go ahead and comment,,,
this out create some space here so we,,,
have a fresh start here so right now,,,
i'm gonna go ahead and start all over,,,
again there we go that looks good and,,,
there's one issue here is that the chat,,,
box right here doesn't actually have,,,
this background until i add a message so,,,
i'm going to go ahead and work on some,,,
css so when you get the template this,,,
should be updated i'll make sure to fix,,,
that but now let's go ahead and move on,,,
to adding in this bot message so let's,,,
go back into room underscore rtm and,,,
what i'm going to do here is take this,,,
entire add message to dom function and,,,
let's just copy everything and duplicate,,,
it and we're just gonna add in another,,,
function to deal with bot messages so,,,
let's take the one on the bottom so we,,,
have add message to dom and then this,,,
one's gonna be add,,,
bot message to dom now in here we're,,,
just going to go ahead and change up a,,,
few values here so we're going to call,,,
this one bot message so we'll do bot,,,
message and we're only going to throw in,,,
this one parameter because of how we're,,,
going to throw in the text based on the,,,
message from the bot,,,
and at this point let's go ahead and,,,
change this value so let's actually take,,,
this entire div right here,,,
let's grab that and we'll copy it and i,,,
guess i could just remove it right away,,,
here so let's just go ahead and take,,,
that out,,,
save it and let's go back into this,,,
function so we'll take this value right,,,
here,,,
and paste that in let's fix the,,,
indentation and we have this bought,,,
emoji so there was a hex value to that,,,
you could just literally look up a robot,,,
emoji and then copy that and that's,,,
going to save the hex value for you so,,,
that's how it shows up like this,,,
so the name will be mumble bot and then,,,
for the actual value well that's going,,,
to be the message that the bot is saying,,,
so this will either be a user left or a,,,
user just joined us so we just want to,,,
go ahead and throw that value in so,,,
that's the actual thing that the bot is,,,
going to say,,,
now with this we have this underscore,,,
bot so the styling is going to be a,,,
little bit different so we change this,,,
up and now all we need to do is go ahead,,,
and call this so the first place i want,,,
to call this is going to be when we,,,
first join a room so i want users to,,,
know that there is an active chat box,,,
right there so this way it'll just,,,
welcome them to the room and it'll just,,,
notify them that something's actually,,,
going on here so let's go ahead and,,,
throw that in and then the actual,,,
message here let's just do welcome,,,
to the room and then we'll just go ahead,,,
and take in their display name so we'll,,,
do,,,
display name and this is what i meant by,,,
that emoji here so let's just go ahead,,,
and actually grab it so i'll just go,,,
find one we'll just call this wave emoji,,,
looks like i already looked it up,,,
and if you just grab this right here,,,
this should work just go ahead and copy,,,
that and i believe that's going to turn,,,
it into a hex value actually i've seen,,,
it before and i've never done it before,,,
myself until this video so it's kind of,,,
cool to try that so we just want to wave,,,
to the user and say hello i kind of want,,,
it to look a little bit different,,,
okay so the bot message is going to say,,,
this and we're just going to go ahead,,,
and make sure that that is inside of,,,
this text area so let's check this out,,,
so this is on join room init just after,,,
we get all the members,,,
so let's try this close this out,,,
and there we go so welcome to the room,,,
dennis makes me feel special,,,
there we go,,,
and now i want to make sure that anytime,,,
another user joins i also want to see a,,,
welcome message i want them to see the,,,
welcome message but i also want to be,,,
alerted that someone has joined,,,
this way we can see them in the,,,
participants but we see an active chat,,,
move in here so,,,
let's see at this point i want to go,,,
ahead and call this in the handle,,,
member joined function here so grab this,,,
go back into room underscore rtm,,,
and we have handle,,,
channel or handle member joined,,,
and let's see where i want to add this,,,
so let's just go ahead and put this at,,,
the bottom so we'll go ahead and grab,,,
the user and we'll say welcome to the,,,
room and then the user's name so i don't,,,
want it to say display name so what i,,,
want to do is go ahead and change this,,,
value to name and earlier i showed you,,,
how to get a name here so we can,,,
actually grab it from this section so,,,
we're simply going to go ahead and grab,,,
that user's,,,
name attribute based on their member id,,,
so when they join we have their member,,,
id so let's go ahead and grab this value,,,
bring this in so we're going to take,,,
that name and then we'll say welcome to,,,
the room and then whatever their name,,,
was so,,,
let's go ahead and test this,,,
so we're in the room and if another user,,,
joins,,,
i should see,,,
a message in a second oh let's see okay,,,
let's do tim and then i'll do one and,,,
then i'm going to jump back to this one,,,
real quick so as tim joins here we go so,,,
tim sees welcome to the room tim and,,,
then i see that tim was here now i want,,,
to add in one more bot message and,,,
that's going to be when a user leaves so,,,
i really don't see much value into this,,,
but it's kind of a cool feature i guess,,,
you can learn how to do it and then it's,,,
up to you if you ever want to add this,,,
in but essentially i want to know,,,
whenever a user leaves so i want to be,,,
able to notify everyone uh just i guess,,,
a small alert that we can add in it,,,
feels like since the app the app isn't,,,
that active it feels nice to actually,,,
have something filled up in that chat,,,
bot or the sidebar there,,,
so at this point we want to go ahead and,,,
call this function whenever a user,,,
leaves so instead of creating an,,,
entirely new function for that let's go,,,
ahead and just call this on remove,,,
member from dom so rather than querying,,,
that user's name again we're just going,,,
to go ahead and call this right here so,,,
let's go ahead and,,,
call the message or the function down,,,
here so take this value,,,
we'll go into remove member from dom,,,
and we're going to call this down here,,,
and we're just going to change the,,,
message up and we're going to say name,,,
so we're going to start it with name,,,
and then,,,
we're just going to go ahead and say has,,,
left the room so we're not sending the,,,
user the message we're just letting,,,
everyone else know because that user,,,
left they're not concerned about what's,,,
going on in the room anymore so it has,,,
left the room okay,,,
so we have a message and now we need to,,,
get this user's name so how are we going,,,
to do this well at this point i'm just,,,
going to go ahead and do this very,,,
simply and i'm just going to grab it,,,
from this member wrapper so right now,,,
we're actually getting this member right,,,
here and we're simply removing this,,,
element from the dom so before we,,,
actually remove that i can just go ahead,,,
and get the name so we'll just do name,,,
and we'll just go ahead and grab the,,,
member wrapper,,,
and we'll just do get,,,
let's see remember wrapper dot get,,,
element,,,
or elements by class name so we'll go,,,
ahead and get elements by class name and,,,
we're going to get the,,,
member name to be specific so member,,,
underscore name and make sure it's one,,,
underscore and not two because i've been,,,
using double underscores but at this,,,
point it's only one so we're getting all,,,
the elements that are the child of that,,,
member wrapper that have the class of,,,
member name and there's only one but,,,
it's still going to return an html,,,
collection because of this so it's still,,,
going to be an array so let's go ahead,,,
and get the first element so we return,,,
an actual item and then we'll just get,,,
the text content of this item so that's,,,
going to be the name itself so this is,,,
how we get the name we're going to go,,,
ahead and throw that in here so as a,,,
user leaves before this item is torn,,,
down from the dom we're also going to,,,
get a message so let's just go ahead and,,,
refresh it just in case here we don't,,,
have any errors and we'll open this up,,,
we'll join as a new user so we'll just,,,
do tim,,,
and we'll join the room,,,
so tim has joined the room we see tim,,,
and let me just mute this because i keep,,,
hearing the echo,,,
okay so i'll mute that and we'll just do,,,
paul,,,
i just want it to look busy,,,
okay,,,
so,,,
right here we see dennis has joined the,,,
room so that's us we see tim and paul so,,,
right now if paul leaves the room if i,,,
click this we're going to see paul,,,
removed from here and removed from here,,,
so where we'll see the message so paul,,,
has left the room,,,
and tim has left the room so perfect now,,,
we're getting all the alerts along with,,,
us engaging with the chat so that's the,,,
participants and the chat bot there we,,,
added in the agora rtm everything's,,,
looking really good or the rtm sdk,,,
everything's looking good and the next,,,
thing we want to do is we want to work,,,
on how a user actually joins a stream so,,,
the idea would be to turn this into,,,
something like more like a social,,,
platform where people can stream and,,,
talk have people join the video call but,,,
also be able to come in and just view it,,,
so it's almost like a twitch maybe,,,
twitter spaces type of clone whatever,,,
you want to call it,,,
kind of a mix of that so,,,
right now when we join it automatically,,,
turns on our camera we could mute it but,,,
we don't want everybody to join that way,,,
so what i want to do here is add in a,,,
join button so if i want to join as a,,,
viewer i can actually click join and,,,
then enter the room and then later on in,,,
the live demo of this i'll probably have,,,
it to where,,,
the host can invite people so not just,,,
everybody can join whenever they want i,,,
can,,,
imagine that can get pretty messy if we,,,
just start letting everybody join the,,,
room so yeah we'll make this to where,,,
these controls won't be here until,,,
someone clicks join when they join then,,,
they'll pop up on screen so when they,,,
join a room they'll still they'll still,,,
see their name here so we'll still see,,,
that they're in the chat just not in a,,,
video stream so to get started with this,,,
let's go ahead and actually jump into,,,
our room.html page and we're going to,,,
create a new button here so,,,
we have the stream container so let's,,,
actually get rid of some of this,,,
stuff that's commented out we might as,,,
well get rid of this so we don't have,,,
extra space in here,,,
so where we don't have a more code,,,
taking up space so we have our stream,,,
actions and it ends right here so just,,,
underneath stream actions let's go ahead,,,
and create a button here and this will,,,
be the join button so we'll do button,,,
and we'll give this an id of,,,
join,,,
dash btn okay so we'll have our join,,,
button and we're just going to say join,,,
stream so we want to prompt a user and,,,
then let's go ahead and also style,,,
whoops i should autofill that let's also,,,
style the leave button so i want to make,,,
sure that this is red so we want to give,,,
users the ability to still be in the,,,
room but also leave the stream so if,,,
they don't want to be,,,
publishing their video stream anymore so,,,
we'll just do this in line we'll add in,,,
a background color and for this i have a,,,
red hex value that i'm going to use so,,,
this is going to be,,,
pound,,,
f f f we'll just do capital f and then,,,
we'll do 5 0,,,
5 0 so that should give us a red color,,,
so let's see style background color why,,,
does that look off oh i have two pound,,,
symbols there okay so we have our stream,,,
button and what i want to do is just,,,
make sure that it's there and then we'll,,,
actually style that so there's our,,,
stream button now we have a red back,,,
button so if anybody wants to leave it's,,,
more obvious so let's go ahead and go,,,
into our room.css and now we want to,,,
style up that stream button so for this,,,
i'm just going to go down to the very,,,
bottom i'm just going to start a new,,,
little section here and we'll do join or,,,
join dash btn,,,
and the first thing i want to do is set,,,
a background color to it so we'll do,,,
background,,,
so background color and this is going to,,,
be pound eight four five six nine five,,,
so i'll make that a purple color i guess,,,
i could have just copied and pasted it,,,
right there and then we're gonna set a,,,
font size so we wanna make sure that,,,
this is a little bit bigger so we'll do,,,
font dash size we'll set this to 18,,,
pixels,,,
and then i want to set some padding here,,,
so do padding,,,
and for this i'm just going to do,,,
25 pixels and then 50 pixels here,,,
okay so,,,
i also want to make sure there's no,,,
border so we are going to style this,,,
from scratch so let's just go ahead and,,,
set that to none so we're actually,,,
not going to use any of the button,,,
styling for one of these even though,,,
it's going to look the same but i just,,,
want to do all this from scratch,,,
so let's see for the actual color we,,,
want to set a text color and this is,,,
going to be white so we'll do pound ff,,,
okay,,,
and let's see for the position i want to,,,
make sure this is at the bottom so we'll,,,
do fixed,,,
that way we can place this anywhere we,,,
want,,,
and,,,
for that now that it's a fixed position,,,
we'll set the bottom value at 1 rem,,,
that's how much space we'll have from,,,
the bottom we'll set the border radius,,,
here of the button itself so border dash,,,
radius and this is going to be 8 pixels,,,
and then we want to make sure that this,,,
is actually completely centered so we'll,,,
do left,,,
positioning at 50 percent here so 50,,,
and then we just want to do transform,,,
and for this we'll do translate,,,
x,,,
and that's going to be negative 50 so,,,
this is how we're going to center this,,,
item here and we'll also do cursor,,,
pointers i want to make sure that people,,,
know it's clickable,,,
okay so,,,
that should place the button right here,,,
so let's see,,,
join button i don't know why it's not,,,
working maybe i didn't save something,,,
we'll go back to room.html join btm i,,,
need n,,,
okay so let's try that one more time,,,
here we go okay perfect so that's where,,,
we want it now,,,
in the beginning before we actually join,,,
a stream i want to make sure that this,,,
stream actions container is hidden so we,,,
don't see those buttons in the,,,
background so let's go ahead and,,,
actually hide those so let's see we're,,,
looking for stream,,,
underscore actions or,,,
we'll do double underscore actions,,,
and at this point,,,
it's display flex so that's how we,,,
inline the buttons so let's go ahead and,,,
set this to none and then we'll display,,,
it as flex when we actually make this,,,
appear so we'll go ahead and hide those,,,
buttons,,,
and there we go so that looks good and i,,,
want to make sure that i'm not joining,,,
the stream right away so let's go ahead,,,
and change that now so we'll go into,,,
room underscore,,,
rtc,,,
and at this point when we join a room we,,,
have a join room in it we call,,,
this join stream function so i want to,,,
go ahead and get rid of this so let's,,,
copy this actually,,,
and let's just go ahead and go down to,,,
the bottom and we're going to create an,,,
event an event handler not event handler,,,
so we'll do a,,,
document.getelementbyid and we're going,,,
to create an event listener for the join,,,
btn so for the join button so we'll do,,,
add event listener,,,
let's go ahead and listen for,,,
the click event,,,
so we'll do on click let's go ahead and,,,
call join stream so now we're only going,,,
to join a stream when this button is,,,
clicked so for this we're going to go,,,
back to our join stream function and,,,
let's change up a few things here so,,,
before we actually get that audio and,,,
video track let's go ahead and change up,,,
a few values so we'll just go ahead and,,,
grab the join stream button so we'll do,,,
document.getelementbyid,,,
and this is going to be join. btn and,,,
immediately what i want to do here is,,,
just go ahead and actually hide this,,,
button so we'll just do style dot,,,
display and we're going to set this to,,,
none,,,
okay so we're going to hide the join,,,
button because we just joined and then,,,
we want to go ahead and actually grab,,,
the stream actions container and go,,,
ahead and actually display that so the,,,
document dot get element,,,
by class name or elements so,,,
let's see in the template it's actually,,,
set to class here so we'll go ahead and,,,
grab stream actions and we only have,,,
this once so it should be an id or it,,,
should be an id but at this point we'll,,,
just go ahead and just grab the class,,,
because that's fine so we'll just grab,,,
the stream actions class we need to get,,,
the one item so we'll just go ahead and,,,
get the first index of zero and then,,,
we'll just set this or style dot display,,,
and this is going to be to flex so,,,
remember the original display when the,,,
in the template was flex so instead of,,,
saying display block we're going to do,,,
display flex so they're all in line okay,,,
so we're just going to go ahead and hide,,,
the button and then display this one so,,,
we still have more work to do but let's,,,
test this out so right away when i join,,,
i'm no longer toggling my camera so,,,
we're just in the room we can chat we,,,
can see that we're in it other people,,,
join or if they join we can also see,,,
them in the chat here so let's just,,,
find a different name so let's just do,,,
peter,,,
and we'll join one okay so we have,,,
dennis and peter in the room and they,,,
can message each other okay so let's say,,,
dennis wants to join the room so dennis,,,
can click join let's say we have,,,
approval to join the room and there we,,,
go so we toggle it and now we are in the,,,
room so if i go to peter's side peter is,,,
currently not in the room but peter can,,,
see dennis streaming now if peter wants,,,
to join peter can just go ahead and,,,
click join there we go,,,
now they are both inside of the stream,,,
and it's working exactly how we want it,,,
so what i want to do is actually give,,,
users the ability to leave now and then,,,
also to be able to rejoin the room so,,,
we're going to add in an event listener,,,
to this button right here that's,,,
essentially going to allow users to,,,
leave unpublish their stream but still,,,
stay in the chat and then if they want,,,
to join back again let's say the host,,,
gives them permission they can actually,,,
jump back into the room so we're just,,,
dealing with a little bit of toggling,,,
over here making sure that all the,,,
functionality actually works so all the,,,
clicks are working correctly,,,
so let's go ahead and go down to the,,,
bottom of the page here and i'm going to,,,
create a function called leave stream so,,,
it's not going to leave the room but,,,
it's simply going to leave the stream so,,,
go ahead and do leave,,,
stream,,,
and we'll make sure that this is an,,,
async function so we'll do async,,,
and let's go ahead and throw in the,,,
event here,,,
and let's go ahead and continue the,,,
function itself so leave stream is going,,,
to be called on the leave button so,,,
let's add in that event listener right,,,
now so let's copy this,,,
and we have a button called leave so we,,,
have leave btn let's go ahead and add it,,,
to this we can close out room rtm there,,,
so we'll do,,,
leave dash btn,,,
and then we're going to add the event,,,
listener of leave stream okay so how is,,,
a user going to leave the stream so what,,,
exactly is gonna happen,,,
so the first thing i wanna do is go,,,
ahead and change the styling of the,,,
buttons so we'll go ahead and go into,,,
join stream and let's just reverse this,,,
right here so right here we hide the,,,
join button and then display the,,,
controls but the first thing i want to,,,
do in the leave stream button is go,,,
ahead and change this up and i also want,,,
to go ahead and prevent default so maybe,,,
this was set to a link for some reason,,,
so by habit any link i always do prevent,,,
default if i,,,
feel like that can mess something up,,,
here so let's do that,,,
and for the join button let's go ahead,,,
and do display block so we're inverting,,,
this so the join button is now going to,,,
be displayed once we leave a stream and,,,
then for the stream actions we'll do,,,
display none so we simply invert those,,,
that looks good and then we want to go,,,
ahead and turn off our tracks so i'm,,,
going to go ahead and create a loop and,,,
we're going to loop through every single,,,
track inside of local tracks here and,,,
we're going to stop and then close each,,,
track here so let's go ahead and create,,,
our variable set that to zero then we'll,,,
just grab our,,,
local tracks so local tracks,,,
dot length here,,,
so we'll go through that make sure that,,,
when that's bigger than i i will just,,,
simply increment and then we can go into,,,
local tracks and then actually go into,,,
each value,,,
so let's see local tracks i,,,
and then we want to do dot stop so we'll,,,
stop the track from playing,,,
and just do dots sorry i'm like,,,
stuttering a little bit so we want to,,,
stop the track and then we'll want to go,,,
ahead and close it so you can actually,,,
close and,,,
or you can actually stop and start a,,,
track but once you close it it means the,,,
track is closed and you're actually,,,
going to create a new one so we're,,,
stopping it and then we're closing it so,,,
we're looping through all the tracks and,,,
stopping that stream now once we do that,,,
we want to unpublish our stream so right,,,
now our stream is still technically,,,
published so we want to go ahead and,,,
unpublish it from the channel so we'll,,,
call client and then we can do dot,,,
unpublish so we've done this before so,,,
client.unpublish and we're just gonna,,,
unpublish our,,,
local tracks audio and video so we're,,,
gonna grab the first index which is the,,,
audio then we'll do local tracks and,,,
then unpublish the video so we'll,,,
unpublish those and then if for some,,,
reason let's say we were sharing our,,,
screen we want to check if we were so,,,
we'll just do if,,,
local screen tracks so if we ever click,,,
share let's make sure we unpublish these,,,
too so the local stream screen tracks,,,
having a hard time talking here and then,,,
we'll just simply unpublish local,,,
screen tracks so we're unpublishing all,,,
of our tracks then what i want to do is,,,
go ahead and remove my item from the dom,,,
so i want to make sure that my video,,,
frame is removed so we'll do document,,,
dot get element by id we'll go ahead and,,,
grab our own user container so we'll use,,,
backticks user,,,
dash container,,,
and then we'll throw in our uid so now,,,
we're going to remove our video frame,,,
from the dom so let's go ahead and call,,,
the remove function and that'll get rid,,,
of it so the next thing i want to think,,,
about is if we happen to join a stream,,,
and if our video frame is in focus here,,,
so let's say we clicked on our own video,,,
frame if we leave i want to make sure,,,
that we actually go ahead and hide this,,,
display frame and that we resize all the,,,
circles that were here so we've dealt,,,
with this before we've done this a few,,,
times but we haven't dealt with this,,,
when we actually leave our stream but we,,,
still stay in the room because this,,,
functionality is a little bit different,,,
before we've just been leaving the room,,,
so we don't really have to think about,,,
what happens when we actually leave and,,,
tearing anything down after that so,,,
let's go ahead and run this check so,,,
again this should be all really familiar,,,
now we're just going to go ahead and,,,
check the user in display frame function,,,
and we're just going to check if we're,,,
currently the id that was in there so,,,
if the value is,,,
this user container with our id then,,,
let's go ahead and take that display,,,
frame,,,
and we're just going to go ahead and do,,,
dot style,,,
dot display,,,
not display frame but display and then,,,
we're going to set that to no so we're,,,
just going to go ahead and hide it now i,,,
also want to make sure that all the,,,
circles are resized so we're going to go,,,
ahead and run through this loop again,,,
and at this point let's just go into,,,
room.js and i think i should have this,,,
somewhere here so we're just going to,,,
take this loop right here this is inside,,,
of the expand video frame function let's,,,
grab this,,,
and actually i guess we can grab one of,,,
these right here so let's grab this one,,,
inside of high display because we want,,,
to make sure that those frames are,,,
actually expanded since we just hit it,,,
so we'll bring that in here paste that,,,
so we're going to loop through all those,,,
video frames and then reset the size so,,,
let's try this again,,,
let's join,,,
then i want to join as a second user so,,,
we'll join as,,,
let's do steve,,,
and then,,,
let steve join the stream,,,
we'll mute the mics and then let's see i,,,
think this is my display frame so if i,,,
leave there we go it resized it and then,,,
we still see steve's frame here so,,,
that's perfect that's exactly what we,,,
wanted to deal with,,,
so,,,
at this point what i want to do is make,,,
sure that any time we leave a stream we,,,
also remove that video frame for the,,,
remote user so i'll show you what i mean,,,
by this so right now if we join the room,,,
i'll just mute the mic and if we join,,,
again with another user let's just do,,,
paul this time,,,
so if we're in the stream and we happen,,,
to leave,,,
what happens here is if we leave we tear,,,
down our video frame and everything,,,
looks good but for the remote users we,,,
technically unpublished our stream but,,,
we never left the room so the only way,,,
we we've actually been tearing down this,,,
div right here or that video frame is,,,
inside of the,,,
handle,,,
user unpublish function i believe let's,,,
see where did we call that so,,,
somewhere,,,
down here we called client or user left,,,
and that was handle user left,,,
so let's go ahead and check out this,,,
function so we call this when we,,,
actually leave the stream well the issue,,,
here is we're actually not leaving the,,,
stream we're simply unpublishing but,,,
we're still in that video stream our,,,
video is not publishing but we're there,,,
so we haven't left so the way that i'm,,,
going to solve this is,,,
right now technically if this user just,,,
leaves then it'll work but if that user,,,
is still in the video stream i'm just,,,
going to handle this in another way so,,,
we'll have both functions actually,,,
handle that and essentially what i'm,,,
going to say is,,,
i'm just going to go ahead and send out,,,
a message using agora rtm we're just,,,
going to send out a message to everybody,,,
in that channel saying hey this user has,,,
left go ahead and remove their element,,,
or their video frame from the dom so,,,
it's simply going to be a message that,,,
we're going to send out when we actually,,,
leave the stream but not the room so in,,,
this function right here if we leave a,,,
stream let's go ahead and at the bottom,,,
let's go ahead and actually send out a,,,
chat message so we'll just go ahead and,,,
do channel,,,
dot send,,,
message,,,
and,,,
with this message type we're going to go,,,
ahead and throw in text we'll go ahead,,,
and stringify that again so we'll do,,,
json.stringify,,,
and let's throw in the object and the,,,
type here,,,
of the actual message is going to be,,,
uh let's see what i want to call this,,,
i'm just going to go ahead and call this,,,
user underscore left so that's what,,,
we'll call the type or the the message,,,
type so we'll do,,,
user underscore left okay so we're,,,
sending this message and the other thing,,,
that i want to send here is simply the,,,
user id or the uid so i want to know,,,
what user left so we can send this,,,
message to all the other users find that,,,
container in the dom and then remove it,,,
so we'll throw in our uid so as we leave,,,
we tear everything down we unpublish and,,,
then we send a message and then we're,,,
passing in the type of user left with,,,
that uid now if i go into room,,,
underscore rtm we have this function to,,,
handle these messages,,,
so remember we we can send a lot more,,,
than just a chat message this can be any,,,
kind of message just as long as we're,,,
sending data so in that handle message,,,
function let's see,,,
somewhere here it's a lot of work that,,,
we've done here so it's kind of hard to,,,
find it,,,
handle,,,
i think it's towards the bottom,,,
okay add message to dom send message,,,
handle channel message okay,,,
so at this point we're just gonna do if,,,
data dot type if this is,,,
user underscore left so user underscore,,,
left let's go ahead and remove this user,,,
from the dom so if this is the type,,,
let's go ahead and do document,,,
the document dot get element by id,,,
and we're just going to go ahead and,,,
grab that user container so we'll do,,,
user dash container and then we'll throw,,,
in that user id so at this point it's,,,
data dot uid because we sent that with,,,
that channel message and then we're just,,,
simply going to remove it so we'll do,,,
remove and then i guess all we need to,,,
do at this point is see if this user was,,,
in the display frame and then simply,,,
resize everything so let's go back in,,,
here let's take the same exact value,,,
and let's just go into this user left,,,
function and i think that's all we need,,,
we can simply just repeat this make sure,,,
everything's resized and then we'll be,,,
good to go,,,
okay so let's go ahead and check this,,,
out we'll join the stream,,,
so let's bring in another user,,,
and we'll just call this one steve,,,
join,,,
okay so here's paul's stream so if paul,,,
leaves,,,
now this stream was removed from here,,,
and that's perfect so it's working,,,
exactly how we wanted it and paul can,,,
join again and everything is working so,,,
there's one last thing that i want to,,,
work out it's not really an issue but,,,
it's gonna remove an error from the,,,
console and that is if i happen to leave,,,
the stream and if i go into inspect,,,
element if i happen to actually close,,,
out with this user,,,
we're gonna see oh it was actually in,,,
this frame right here we're gonna see,,,
this at this error right here and,,,
essentially when we call handle or user,,,
left with agora rtc we're also trying to,,,
remove that dom element or we're trying,,,
to remove that entire video frame so,,,
that's going to cause an issue because,,,
that video frame technically doesn't,,,
exist because we removed it by sending,,,
that message so inside of room,,,
underscore rtc in handle user left let's,,,
go ahead and just do this let's just,,,
make this a quick fix we'll patch it up,,,
we'll just do item is equal to,,,
this right here,,,
so let's go ahead and run a condition so,,,
we'll just do,,,
if item so if it actually exists then,,,
let's remove it so we'll just do item,,,
dot remove so it's a quick fix here,,,
okay so,,,
i just noticed it as i was finishing up,,,
this video so let's try this again and,,,
let's see so if we join,,,
we'll be in frame and if we join as,,,
another user,,,
just think of another name,,,
okay so let's go into inspect here,,,
so in console,,,
if i leave,,,
and then i go in here and then close,,,
this out that error doesn't show up,,,
anymore everything looks good and it all,,,
checks out so that's it for this video i,,,
had a lot of fun with this project i,,,
hope you enjoy it and be sure to check,,,
out the live demo down in the video,,,
description so that demo might look a,,,
little bit different from what we built,,,
out here because i will keep adding,,,
features to that so be sure to check,,,
that out and make sure to check out my,,,
youtube channel dennis ivey that's,,,
linked up in the video description so,,,
thank you brad for allowing me to,,,
collaborate again this is a lot of fun,,,
i'm sure it's not going to be the last,,,
time i always enjoy doing this so see,,,
you all in another video and thank you,,,
for everything",,,
XW1aGkzyjQg,"hey what's going on guys so this is a
different kind of video kind of personal
so if you don't like that stuff then you
might want to just move on to the next
tutorial
[Music]
so back i think it was my 300 000
subscriber video i basically came clean
to my audience and told everyone that i
was a drug addict or am a drug addict in
recovery and was into hard drugs into
opiates for for years um from when i was
about 17 to 25 years old i'm 40 now
um and
the reason that i wanted to tell people
that in the first place well there's a
few reasons one is because i like to
be kind of an open book i like people to
know me and
where i come from and what i've
experienced
and then i also
tell it to give inspiration and show
people that
you can be in
one really really shitty point in your
life and that doesn't mean that you're
going to stay there you can get out of
that and you can do things that you
never thought you would you could do
so that's the main reason and i was
going through some stuff some keepsakes
and i found this i'm gonna try to cover
the number up but this was my my
massachusetts ebt card so this was this
is my food stamp card and i was probably
about 22
in that picture and this is this is
where i come from um you guys see all
the nice stuff behind me i've done
office tours and all that and it's
pretty obvious that i do pretty well
financially but it definitely wasn't
always like that in fact when i met my
wife we had lived we lived in a rooming
house
so eventually we got a one bedroom
apartment but before that we lived in a
place where we had one room and there
was a bathroom one bathroom on the floor
and we shared that bathroom with like
four or five other dudes that lived on
the floor at that time
so um you know when she was pregnant
with my daughter at that time so that's
where we were at at one point
and now we have a a beautiful
five-bedroom house that we own uh and i
don't say that in like a bragging way
but just to show you the you know the
stock difference in between then and now
and and it's not
because i'm special or have any special
qualities or anything like that i'm not
smarter than anyone else's i'm not a
better programmer than anyone else you
know
i think that that really what
what i can attribute the most to my
success
is is just consistency it's just brutal
consistency keeping my eye on the ball
for what i wanted and just just never
taking it off you know and doing what i
needed to to get there and i think that
um
just about anybody can do that you know
and your goal might be different mine
was to have my own business that made a
lot of money i could keep my my family
safe and secure
um so that was my goal but you might
want to work at a fang company or
create a startup or create some kind of
sas whatever it is that you want to do
and i was looking through some other
stuff as well i found this which i
thought you guys could kind of get a
kick out of which was my booking photo
when i went to jail for a year and uh in
20 what was it 2002
and i also have my record here
so this is a five page criminal record
you can see some of the charges
um possession of class a substance which
is like heroin opiates
class d class a
breaking and entering in the daytime so
it's all either drug charges or stealing
to get drugs which you know obviously
wasn't a good thing
and i can remember the first time i went
to jail i was in the courtroom
and
i was trying to do whatever i could to
for the judge to give me a lesser
sentence or get out of it or whatever
and i had my lawyer which was just a
public defender at the time he had told
the judge or i had told him to tell the
judge that i planned on going to the
local community college here
for computer science because i was
always interested in tech even when i
was younger getting into trouble i i
still
enjoyed technology you know um so that's
something i did want to do but he told
the judge that and the judge just looked
at me right in the eye and just laughed
and he said in a very sarcastic
sarcastic voice he said that the
computer industry is going to have to
wait for mr travesty and basically said
you know
[Music]
a year in jail or whatever it was that
that he said
um so
i think that i think that that was the
right decision at that time and and the
other times as well
you know i was just
i i probably would have died and
i was just a person you know
stealing from people and all that and of
course i regret that stuff but i don't
regret the overall experience because i
think that it helped bring me to where i
am today so and the reason i say that is
for you guys look at your struggles
whether that's money so whether you're
you know in poverty
or whether it's mental health if you
have bad anxiety adhd depression
whatever any of that stuff relationship
issues social anxiety something else
that i've dealt with my whole life
try to look at those things as
as things that help you rather than hold
you back i think that we live in a world
where
everyone wants to be some kind of victim
and i just i don't think that that's a
healthy way to be i think that you
should take those things and you try to
turn them around and use them as your
strength you know if that makes sense
and i know some people might even get
offended by that but that's just the way
that that i think and that's my advice
to people
and and try to use my situation where i
was at point a and where i am now at
point b
and apply it to yourself because again
there's no there's nothing special about
me uh i i can just attribute it mostly
to just brutal
consistency you know whether it was when
i started freelancing uh and trying to
get clients or when i even when i
started my youtube channel i was just
consistent you know
you don't want to just stop you want to
keep your eye on the ball and just keep
going
and and you can imagine with the record
that i just showed you
trying to get a job with that especially
like in the tech industry i couldn't
even get hired at wendy's never mind at
a at a tech job so i had to just
do something else i had to go around the
system and create my own business and
start freelancing and that didn't that
didn't start off very well either in
fact they have a video talking about my
first
gig which was a disaster but again i
stayed consistent and and just kept
going after that and jobs were getting
better and easier i was learning things
along the way so you're going to go
through rough times you're going to have
a tough time getting started but don't
let that just make you quit you know you
just want to keep your eye on where you
want to be and just work towards that
goal and i know there's a lot of like
cringy
um
self self help positive thinking kind of
thing like this the book the secret or
the movie the secret where you know you
think if you think positive and things
will just happen and that's not how it
works but
if you do think in a positive way that
causes you to do positive actions that
can then lead to where you where you
want to be you know so you want to try
to have some kind of knowing that you
will get to where you want to be someday
um and try not to fall victim to
whatever your circumstance is
and i and i know people have a tough my
story isn't the toughest i know that i
know there's people especially that
don't live in the u.s that are in other
countries going through situations
believe me i know that it's bad i talk
to people from all over the world and
you just don't want it don't let it tear
you down inside you know you still want
to keep pushing and keep trying as much
as you possibly can
um so that's it guys i just i wanted to
share more of my story because there's a
lot of new people i haven't really
talked about this in years
and uh and i just want to let the new
people know you know let you know where
i'm coming from and to try to use
my story as as some kind of inspiration
and and relate it to your own in
whatever issues you're going through i
also want to give a shout out to
underdog devs on twitter and i talked to
rick who is the he created this group
which basically they help um people that
are incarcerated or have been through
the system
and help them get into coding which i
think is a friggin great idea and i just
wanted to give them a shout out that's
underdog devs on twitter and they're not
sponsoring me or anything like that it's
just i thought it was a this is an
appropriate place to mention them and uh
you know anytime i can help anybody else
that's in that kind of situation i want
to so thanks for watching guys and i
will see you next time",,
0xMQfnTU6oo,"hey what's going on guys so in my
opinion every web developer should learn
css grid at least if you're working in
the front end and in this css grid crash
course we're going to break it into a
couple different parts so first we're
going to look at some slides just talk
about what css grid is we'll compare it
a little bit to flexbox then we're going
to jump into a sandbox where we look at
all the different css properties that we
can use on grid containers and grid
items learn how to span rows and columns
and things like that and then finally
we're going to build a small project
which is going to be a testimonial
landing page all right so i think that
this will give you a lot of foundational
knowledge in creating layouts with the
grid so hopefully you enjoy it and let's
get into it
[Music]
this grid crash course is sponsored by
inmotion hosting and i've used inmotion
personally for years in fact my
traversalmedia.com website is hosted on
one of their vpss so they offer
everything from shared hosting and
wordpress hosting for small businesses
to vps's and dedicated servers and i can
speak from experience that their
services fast secure and reliable and
great for just about any project so you
have accounts starting from just 2.99
per month and that includes not only web
hosting but email accounts marketing
tools free ssls and more so to learn
more visit
inmotionhosting.com or click the link in
the description below all right guys so
i just want to jump into some slides
real quick to talk a little bit about
what css grid is
so the grid is a powerful tool that css
gives us to easily align elements or
items on the page create two-dimensional
layouts with rows and columns and i do
want to mention flexbox here because
they can be similar they are used a lot
in in similar ways and a lot of people
ask me which one they should learn or if
sh they should learn both and my answer
is always to learn both now flexbox was
created first it has a bit more browser
compatibility but
if you're using modern browsers you're
not going to have any issues with either
of these
now it's going to come down to
preference on where and when you use
grid or flexbox so i can just tell you
what i do so what i do is i use css grid
for the overall layout of a website or
user interface so laying out headers and
cards and all that stuff and then if
there's inner elements that need to be
aligned that's where i'll use flexbox so
i may have a layout of cards that i use
with you know use css grid and then if
there is maybe a header in the card with
the title of a blog post or a
testimonial or something and then maybe
a picture of the person the date that's
where i'll use flexbox is to align those
inner elements all right so that's just
what i do but again it's going to be
preference i do know some developers
that only use flexbox and don't even use
css grid unless you know they have to
for
an existing project but again it's gonna
it's gonna come down to
breakfast it's gonna come down to
preference
so with the grid we have just like with
flex we have containers and items so we
have uh you know an an element that's
going to be your container and then any
direct children of that element will be
your items and we create a grid just
like we create a flexbox and that's
using the display property
and then we have specific properties
that are available on the grid container
and then specific properties on the uh
on the grid items and we're going to get
into all of these within our in our
sandbox part of the of this crash course
all right so with flexbox you have the
ability to create one-dimensional
layouts with either a row or a column so
you know use flex direction set it to
row or column but with css grid it's
it's a little more powerful where we can
create two-dimensional layouts and we
can use rows and columns in the same
grid and then we also have the the
ability to span
certain rows or certain number of rows
and columns and it's just i to me it's a
better option
too especially for
more sophisticated website layouts and
user interfaces but we'll get into all
that later on
all right so enough with the slides
let's go ahead and jump into vs code and
let's start to learn css grid okay so i
have vs code open of course you can use
whatever text editor you want and i have
a grid.html and a grid.css file that's
it and they're both completely blank
so we're gonna
basically go through and learn all the
different properties that the grid gives
us and how to size things how to
create columns and rows and span items
across multiple columns and rows and so
on so we'll start off with the html
which is going to be really simple so
just exclamation enter will give us a
template in with using vs code and emmet
and title i'll just say css grid crash
course
and then we want to bring in the css
file so that's called
grid.css
and then the body is actually going to
be really really simple so we're going
to have a container that's going to be
our grid container and if you're
familiar with flexbox it's kind of the
same thing you have your container that
you have specific properties that you
can use with the grid and then you have
your grid items inside and you have
specific properties on those as well all
right so in this container i want to
have nine divs they can be anything it
can be divs images headings anything at
all could be a grid item but we're going
to do nine divs with the class of items
so i'm going to say dot item and then
i'll add some text i'll say item and
then whatever the current number is and
let's times that by nine and we get nine
divs the class of items so i'm going to
save that and then open that up with
live server of course you don't have to
use live server but i i am
all right so now we just see item one
through nine so we can go over to our
css
and
i just have some
some base css that i want to add
okay so basically here we just have a
reset we have some body styling font and
so on
um the container
i put a max width of 960 of course you
could make that whatever you want margin
100 pixels on the top and bottom and
auto on the left and right so you can
see there's a 960 pixel container here
and that's going to be our grid
container and then just some padding so
these items i don't want to just use
text
so i'm going to basically turn them into
just blue boxes so we can clearly see
our items so let's say dot item
and let's set the background
of course you can use whatever color you
want i'm going to use steel blue
and then let's do color of white for the
text and let's do a font size of 20
pixels
and let's say padding will do
20 pixels okay let's actually add a
border as well so we'll say border let's
do sky blue
and one pixel solid just so we can see
where these end and begin so we just
have three and three we have nine blocks
or nine items now to make this container
a grid container just like with flexbox
we use the display property right so if
we said display flex it would put it
into a flex row we can see that
immediately now if we say display grid
it doesn't do anything we can't see
anything
happen just yet because we need to
specify how many columns we want and how
how big we want those columns to be
so the first grid property we're going
to look at is grid template columns
so the way this works is we set some
sizes so i can say for instance the
first column 100 pixels second 200
pixels if i save that i'm going to get
two columns first 100 second 200. if i
wanted a third column of 300 pixels i
could go ahead and do that as well
now and it doesn't have to be just
pixels i could use percentages so if i
do 30
40
30 percent
and save that you can see now we have
percentages but most commonly you're
going to be using fractions
so if i do 1fr and 1fr these are
fractional units
and
this is just going to give me two
columns that are the exact same width if
i
make this browser wider you'll see it's
going to it's just going to take up the
entire width of whatever the container
is which in this case is 960 but of
course i could change that to 1160 and
make it bigger i can change it to 660
and make it smaller so whatever the
whatever the width of that container is
all right now i could of course add more
here and i can make
i can make certain columns bigger so if
i want to do 2fr here now you'll see
that the third column is bigger than the
first two if i want to make the middle
one 3fr then that one's going to be
bigger all right now i actually want to
have three of the same so i could do 1fr
three times or i could use the repeat
function and just say repeat three times
one fr and if i save that you'll see
it'll give me the same result as if i
did one fr three times
now when it comes to spacing between
these items between the columns and rows
we could add
margin and then say like 10 pixels onto
the item itself which is probably what
you would do with flexbox but with grid
we have some extra properties we can use
on the container such as column gap so
i'll say column gap 10 pixels and you'll
see that will add space going vertically
between the columns and then we also
have row gap which you can probably
guess what that does it adds a space
between rows now if you want to use both
of these
instead of
using two properties we could just go
ahead and do gap
and we'll set that we'll do 10 pixels
and you'll see that it gives us the the
same exact result all right so we know
how to divide
the items up into columns and we know
how to make columns certain widths so
now let's talk about height so the
height right now
is going by the content that's in each
each grid item and it's all basically
the same content so they're all the same
size
so i'm just going to go ahead and
replace this with let's say alarm 30
and save that and now notice that the
height expands to fit the content by
default and then all of the columns that
are in that row also expand on height by
default
so there's a couple properties that i
want to show you that have to do with
with rows and height so the first one is
grid dash
auto dash rows so with this we could set
all of them to 200 pixels regardless of
the content you can see it actually gets
cut off here
now there's also a function called min
max that we can use on both columns and
rows so let's say min max and as you can
see it defines a size range greater than
or equal to min and less than or equal
to max so basically it takes in a
minimum we'll do 100 pixels and then max
we'll just do auto so now we can see all
of the content that's set to auto and
then these other ones are going to be
set to 100. if we want those set to 200
then we could do that
all right now
just like we have this grid template
columns we also have grid template rows
so that's what i want to look at next so
let's say grid template rows and we
could use pixels or percentages or
fractions for now let's just say like
200 pixels 100 pixel
200 pixels
and it's just like grid template columns
except instead of going this way it goes
this way so we have 200 pixels 100 and
200
all right and you can also use like we
could say repeat we could say repeat
three times one fr
save and now by default the height is
going to be of whichever the the most
content so if i were to come over here
and slash this in half
and save then that's going to resize the
height of all of these
so i i don't find myself using grid
template rows that much because most of
the layouts that i build just the the
content determines the height and then
i'll align things with the alignment
properties that i'll show you in a
minute
but it's good to know
how these work
so i'm just going to comment all that
out
and let's um
let's move this up here i just i just
want to have this i'll probably create a
repository so you guys can have this as
kind of a reference
so let's see what do we want to look at
next let's look at
let's look at some of the alignment
properties which if you know flexbox you
probably already know so line items
justify content and so on now before we
do that i do want to show you that in
the
google chrome dev tools and firefox dev
tools i'm not sure about the other
browsers i don't use anything else
if you have a grid container as we have
here you have this little grid button
and if i click that you'll see we get
this highlighting and you can also get
these numbers now if you don't see the
numbers you can just go down to layout
and under grid just choose show line
numbers you can also show the track
sizes so here you'll see like 1fr
and the number of pixels and here as
well but i don't want to keep those
displayed so i'm going to uncheck that
but i do want to keep the numbers
because when i show you how to span
across rows and columns these numbers
really come in handy
so let's see i want to start off with
align items so let's go
we'll just go here and let's say align
items now the default for this is
stretch okay if i save that we're not
going to see any difference
and what that does is is this right here
it stretches
uh go
according to whichever one has the most
content now you might not want that so
we could set this to
let's say start
all right so what that's going to do is
align it to the top here okay if i want
to
align it to the center i could do that
if i want to align it to the end
i could do that as well
all right and and this will take effect
if any of these are have have height to
them like if i
if i go ahead and uncomment this grid
auto rows you'll see now they're all
aligned to the bottom
but i'm going to just make sure i
comment that back
so as far as justify content in order
for us to really see how that works we
can't have the the content taking up
this whole space so just temporarily i'm
gonna set let's say repeat three 100
pixels all right so now we have three
100 pixel rows or sorry columns and if i
wanted to align all of these let's say
to the end i could use justify content
and set that to end and it would move
them over to the end i could do center
move them to the center and so on we
could do also like space around
you know so all those different
values uh and if you're familiar with
flexbox then
you already know those
so let's set this back to 1 fr
and now you can also align self
meaning
on the item itself
so i don't have specific classes like
item one item two item three to to grab
these but of course we could use pseudo
selectors so i want to grab the second
item so what i would do is item
colon and then we could use nth of type
and then i'm going to pass in two so
that will select the second one
and i'm just going to change the height
just temporarily just to show you how
this works
the height and
weight
the height and width to 100 pixels
okay and now if i want to align this
let's say a line item i'm sorry not
align items align items is for the
container align self is for the actual
item so i want to align that to let's
say end
and you'll see that it gets moved to the
bottom so i want to move it to center i
could do that and then if i want to move
it along along the x-axis i could do
justify self
and let's say we want that to be center
all right so i'm not going to keep this
i just wanted to
show you that that is
those those
properties are available
so the next thing i want to move to is
spanning items across a number of rows
or columns so i'm going to start with
this the first one here so i'm going to
change this 2 to a 1 that's going to
select this first one
and we'll just go ahead and change the
the color we'll change it to black
and let's say that i want this to span
from
line 1 so these are grid line numbers
from one to three
instead of just one to two which is the
default so i could do grid dash column
dash start and set that to one which is
where it is currently but then i want
grid column end
i want that to be 3 instead of 2. if i
put it to 2 and save it's the same thing
but if i put it to 3 it's now going to
stretch over to column 3. all right so i
should say line three now there's a
quicker way to do this instead of doing
start and end you can simply say grid
column and then we can just do one and
then slash three like that and then we
can actually get rid of this
and that will do the same thing another
way we could do it is we could say grid
dash column
column and we could say
1
and then do slash span
two so instead of just specifically
saying we wanted to go from one to three
we could say start at one and then span
two so if i comment that out and save we
should see the same same result but i
prefer to do it this way and explicitly
say where it starts and ends
now we can also span rows or span down
so let's say item three here which right
now is goes from two to three let's say
we want it to go from two to four
so i'll just go ahead and grab this
and let's select item three
and we'll change the color
lighten it up a little bit and then
instead of a grid column we're going to
do grid row
and it starts at 2 so we're going to say
2
and we want that to go now to 4. so it's
going to go from here 2 to 4.
all right so we'll save that and now you
can see that that spans from two to four
now let's do the same thing with item
four
so i'm just going to grab that and then
we'll say this is going to be four
and we'll just keep the same color and
then grid row is going to do the same
thing we want it to go from 2 to 4 so
save that
so you can see that css grid it is more
more powerful than flexbox it's
two-dimensional like there's no way to
do something like this in flexbox have
these two here and this unless you use
multiple flexboxes this is all one grid
um so now what i'm gonna do is
turn off the grid lines here
shut those off
and then let's
comment out
this stuff here where we did all the
spans so we just have three
three columns across and i'm actually
going to just change this back to item
one
all right because now i want to talk
about responsiveness so right now no
matter how how the browser is sized we
have three columns right and that's
probably not what you what you want
so what i usually do is just create
media queries and just have them stack
on
on smaller screens so for example i come
down here and say at media
and we can do max
we'll say max with 500 pixels
and then we can set the
let's take the container
and let's set the grid template columns
to just simply one fr
so now if we take the browser and we s
we resize it down to 500 pixels then you
can see they all stack
all right so we can do that now if you
want these two and of course you can set
other media queries and you might set it
to to 1fr 1fr or use repeat 2 1fr for
maybe 768 or something like that but you
can also make these uh make these wrap
like with flex blocks you have flex wrap
so to give you an example of that we'll
go up here and
let's copy this grid template columns
down and then comment it out
so
what we could do is pass in here let's
say auto dash fill
and then instead of just one fr because
if we do it like that we're just going
to get that result so instead of that we
can do we can use min max here
and we want to pass in here whatever the
minimum
width you want so let's say 200 pixels
for example and then we could do one fr
here so now what happens is we get three
across because
we're saying
if it's 200 pixels then put it in but if
we go below that
so let's see we're gonna go keep going
and as soon as one of these
goes below 200 pixels then it wraps and
now we have two columns
okay and then we still have our media
query so if i keep going and i hit 500
then they're going to stack if i stretch
it out long enough we should see four
columns as well
all right so that's how you can
make your grids responsive now obviously
if you're going to keep like the grid
the spans like this then you have to
account for those in your in your media
queries as well
all right so though that's pretty much
it for for the basics and and how to use
the grid now there's one more thing i
want to show you before we move on to
the little project they have and that is
grid template areas which is kind of a
different way of of doing things so i
think what i'll do is just create two
more files say grid
2.html
and then we'll say we'll do grid
let's say grid two dot css
all right and i'm gonna just close up
grid html and grid css so we have the
two new files and then let's go to
grid2.html which is completely blank
right now
so i just want to show you a picture of
what i'm whoops i don't want to open it
in photoshop let's open it with preview
so this is the layout that i want to
create which is a pretty common
type of layout so we have the header at
the top that goes all the way across
have some navigation on the side that
goes all the way down under the header
the content and then the sidebar and
then the footer that goes under the
sidebar and the content
so i'm going to show you how to do this
with grid templates or grid template
areas
so first thing let's add our html which
is going to be really simple we'll just
throw in a template here and
let's say css
css grid
template areas
and let's add in a link here and this is
going to go to grid 2
dot css
now
um in this case i'm going to use the
body as our as our grid as our grid
container and then any
direct elements are going to be grid
items so first we'll have a header and
i'm just going to put some text in here
so we have header we'll have a main tag
and here we'll say content then we'll
have our nav
say navigation and
let's do an aside
so that'll be our sidebar and then
what else our footer
which will be for all right so that's
all i want to have and i want to turn
this into this using grid template areas
so let's go into
our i'll get this out of the way now
let's go into our css
and there's some just
basic css i'm going to pass in here so
just to reset
some body sizing
and then
let's make the
wait a minute there we go so let's make
the body the grid
actually before we do that let's take
all the elements and let's make turn
them into blue boxes so we'll say header
footer
main
aside
and nav
and let's do background color
and we'll do steel blue
let's do color we'll set that to white
and then
padding
20 pixels and let's do border
we'll do sky blue
one pixel solid
alright
so we have no
positioning or anything like that we
just have a bunch of blue blocks just
like we did
in the last you know in the last file
so like i said the body is going to be
the grid so we'll say display grid
which does
right now
it
the reason that it did this is because i
set the
height of the body to 100 vh
if i didn't do that it wouldn't stretch
it wouldn't stretch like that but i do
want it to take up the entire viewport
height
now
for the grid areas let's go ahead and
say
grid
dash template areas
the way we do this is a little weird but
i think it's it's cool because it's like
a
it's like a physical representation of
what we're trying to do so the first row
let me bring back over our image so you
can see exactly what we're doing
so the first row is going to be the
header now in total this there's three
columns right one two three the header
we want to span all three
so the first row let's say header
header
header three times
now the second one let's put in some
quotes here we want our nav
we want our content now these words that
i'm putting in here these are going to
be the grid areas it doesn't have to be
called header we could call this
anything but i'm just being specific so
nav then we'll do our
content
and then let's say sidebar
okay so that's the second and then the
third row is going to be the nav again
because here the nav is going all the
way down right and then the footer i
want under those two so i would say
footer
and footer
so this is is like a text representation
of
how we want our layout
okay and hopefully that makes sense
header we want to go all the way across
the three columns so we have it three
times we have the nav content sidebar
and then we have the nav
footer footer
all right so let's get that out of there
now just saving this
it's not going to do anything except
put them in side by side what we need to
do now
is create our grid areas
so we want to
use our selectors so we want the header
tag and then we're going to set that
grid area
using the grid area property and we're
going to set it to header now what i put
here this header pertains to this
okay so this could be anything i could
have brad three times here and then just
have brad here all right as long as i'm
using the correct selector so let's save
that and now you see the header goes all
the way across
all right so the next thing is let's do
the nav
so we'll say nav
and set that to the grid
area of
nav because that's what i called it
so now the navigation is going all the
way down
so next we have
what i we have the main tag and i
believe the grid area i called content
so let's say grid area content
not much difference there and then the
sidebar so we'll grab that with a side
and we'll say the grid dash area
is going to be sidebar
and then finally the footer
and we want to set the grid area to
footer
all right so we'll save that and now you
can see it's very similar to what i have
here right it's just the sizing the
positioning is all correct
now if i wanted the footer to go all the
way across here and have the navigation
end here along with these content
sidebar i could just change this
template area up here and instead of nav
i could say
footer
and save and now you can see the footer
goes all the way across
all right but i'm going to put that back
to nav now as far as the the sizing the
width and the height we can still use
our grid template columns and grid
template rows so let's say grid dash
template columns and i'm going to set it
to 1 fr and then the middle the main
content that should probably be the
widest right so we'll do 4 fr and then
the sidebar will do 1fr
okay we'll save that now you can see the
content is the biggest part now we also
don't want the header and footer to be
this tall
so let's use grid
dash
template dash rows here
and let's set the
header we'll do 80 pixels
and then let's just do one fr which is
just basically the remaining area
from the header and then the footer
which i'll do 70 pixels
okay so now if i bring my
image over there we go same exact thing
okay so i think it's really cool that we
can lay things out like this
now you won't always use this i i don't
use this a lot um
but if i'm if i were to create something
like this i definitely would and i've
been you know i've been doing web
development for quite a while and those
of you that that have been too
you might remember when we did not
layouts like this with tables like we
would actually use html tables and style
them to look like this
and then doing it with floats and having
the sidebar go all the way like a color
background color go all the way down
it was just a pain in the ass so the
fact that we have this kind of thing now
it's just i mean newer people just you
don't know how good you have it really
when it comes to this this kind of thing
but i think that's pretty much it as far
as
as the properties that i wanted to show
you so now let's get into uh to creating
our little project
okay so we're going to get into our
project now the layout that we're going
to build is it comes from the frontend
mentor.io website which is a really cool
challenge website where you can build
html css and javascript projects and
there's some premium options but there's
also a ton of free
layouts here so the one that we want to
create is let's see it's the
testimonials right here so testimonials
grid section and you can actually
start the challenge and you can download
all the images and design files and
stuff but i will have a repository in
the description that will have the
images and stuff that we need all right
so it's going to look like this
have i think this is a great example to
use css grid with because we can use the
we can span columns and rows and all
that
all right so what i've done here is i've
put all the the other files that we've
already created the grid.html and all
that into a folder called sandbox and
then i have a new folder called project
with an empty index html and style.css
and then i just have the images of like
the people and i have an svg for
this this quote right here and you can
get this again from the front end mentor
website or from my repository
so let's go ahead and jump into our html
first and i'm just going to
make this a little wider since html
takes up more room
and let's go ahead and add our
boilerplate
and we'll just say testimonials for the
title and let's link in
our style sheet style.css
and the way i'm going to do this is have
a testimonials
class and that's going to be our grid
container and then inside that we're
going to have a bunch of cards so first
one will be a div let's give it a class
of card and i'm also going to give it a
class of card dash dash bg oops card
dash dash bg dash purple
because if you look at the
project here this one has the purple
background so we need to add a little
bit of styling and i'm using the bem css
syntax or the bem syntax which i've been
really liking lately
so inside the card we're going to have a
header and let's give that a class of
card double underscore header
and inside that will have the image and
we want images
slash and this one is daniel
i'm probably just going to type this
card out and then i'll paste the rest of
the rest of them in and you can just
grab it from the
repo if you want
so let's add a class here of let's say
card double underscore image
and then underneath that we're going to
have a div
and that's going to have the h3 with the
name so daniel
clifford and then a paragraph with
say verified graduate
and we'll use flexbox to align like this
here this are the stuff here all right
so underneath the header let's see we
have some more text
so basically we have the large text or
the lead text and then the quote which
is the smaller text
so under header we'll have let's do a
paragraph
class of card underscore double
underscore lead
and
i'll get the i'll get the actual text in
a second but then we're going to have a
class of card
quote
okay and then i'm just going to grab
those
pieces of text
and if you just want to put dummy text
you can of course do that as well
and we'll save that
okay so we have our first card which
looks absolutely horrendous but we'll
fix that in a little bit
so for the rest of this let me just grab
i'm going to grab the rest of the cards
and just paste them in because there's
no sense in typing them out they're all
the exact same except for the content
all the classes and all that are all the
same so we want to go still within
testimonials but
after this first div with the card
we'll paste those in and now you can see
we have all of the um
all the cards and then i'm just going to
add a footer just to give credit to
front-end mentor for this for this
project they're not sponsoring this
video or anything
but uh yeah let's say footer and
say h3 we'll just say project
you don't have to do this but i'm going
to say project from and then we'll put a
link in here
let me just grab the
link
so this is the link to the actual
challenge
and in here we'll just say front-end
front-end mentor
all right cool
so now we go into our styling and we can
make this a little smaller now since css
doesn't
usually take as much room
and i'm going to just paste in just a
little bit of of styling here we're
importing the
bar low semi condensed font and a reset
and then just setting some background
color and so on and the text is pretty
small for this project there is a style
guide when you download the resources
from front-end mentor if you want to
check that out
so i think first we should style
everything but the grid just to get
these these cards looking good and then
we can go ahead and add all the grid
properties so we'll start with with the
testimonials container
so let's at least add like our max width
which is going to be 1440 pixels going
by the style guide
and then let's do margin let's say 100
pixels top and bottom and
auto okay and then
this is where obviously we're going to
have display grid and all that but we
won't do that just yet
and i know what we're doing for the next
10 minutes or so
isn't has nothing to do with the grid
but it's part of the project so i like
to do things from start to finish and
not just you know paste things in so
you might learn some other stuff along
the way
so let's grab the class of card because
we know that that that's on all of these
and
we're going to add background so the
initial background color is going to be
white so
we'll say white
and then let's give that a border radius
we'll do 10 pixels
oops 10 pixels
and then
i'm going to add some padding
30 pixels of padding
and we're going to have a box shadow so
i'm going to just paste that in so i
have t",,
",,
o type that out,,,
and if you want to change any of this,,,
stuff,,,
obviously you can and just for now i'm,,,
going to add a margin dash,,,
bottom to the cards just to separate,,,
them a bit,,,
but we can get rid of that after,,,
okay so the the header which is the,,,
image and then the div that has these,,,
two,,,
uh pieces of text in it i want to use,,,
flexbox on that to align okay that's,,,
what i was talking about,,,
when we started the video and i said,,,
where you know where i use the grid and,,,
where i use flexbox,,,
so i'm going to display that as flex and,,,
it's going to put the text right next to,,,
the image into a row let's use a line,,,
items center to align vertically,,,
and let's add margin dash bottom,,,
10 pixels,,,
okay and then let's grab the card header,,,
h3 which is the the name,,,
and we'll go ahead and just set that,,,
font size to 15 pixels,,,
and let's see we'll just grab this and,,,
oops,,,
just grab that and bring that down and i,,,
want to do the paragraph,,,
in the card header which is that,,,
verified,,,
was it verify graduate,,,
and that's going to be a little lighter,,,
so we're going to do opacity,,,
and set that to 50,,,
okay and then for the,,,
for the image,,,
that has a class of card double,,,
underscore img,,,
and we're going to set the width let's,,,
say width of that to 40 pixels and then,,,
we also want the height,,,
to be 40 pixels and let's make it,,,
rounded so set the border radius to,,,
let's do 50 percent,,,
okay and then we want like a light,,,
purple border so,,,
say 2 pixels solid and the color for,,,
that,,,
is going to be 996,,,
ed9,,,
all right so now we have the border and,,,
then let's just add some margin right to,,,
push the text over so we'll do 10 pixels,,,
all right so that's our header,,,
now for the text we have lead this is,,,
the lead and then this is the quote,,,
so let's grab the we'll say card double,,,
underscore lead,,,
and for that we're gonna do,,,
uh font,,,
let's say font size of,,,
we'll do we use rem units here 1.5 ram,,,
because it's going to be quite large,,,
and then the font dash weight is going,,,
to be 500,,,
and let's change let's add the line,,,
height,,,
for that which will be 1.3,,,
and then the,,,
margin,,,
actually no yeah let's do margin,,,
bottom,,,
20 pixels,,,
okay and then for the quote,,,
i'll just copy this,,,
so we have the card,,,
underscore quote and the font size for,,,
that is going to be 15 pixels,,,
so really small and then font weight's,,,
the same,,,
line height will do 1.4,,,
and then we're also going to make this,,,
lighter with opacity,,,
70 that's actually in the style guide as,,,
well,,,
now we want to because these look pretty,,,
good now so we want to work on the the,,,
different colors so the different styles,,,
of variations,,,
so we have the purple,,,
remember the first one is this card bg,,,
purple and then we also have two others,,,
this one here card bg,,,
gray blue,,,
and card bg black blue okay so here this,,,
is the gray blue that's the black blue,,,
and the purple so let's take care of,,,
those,,,
so say bg purple,,,
and for this set the background,,,
and the background is going to be hsl,,,
so that's taken from the style guide as,,,
well from front end mentor let's do 263,,,
55,,,
and then 52,,,
is it 50 yeah 52 percent,,,
so that's our background and then of,,,
course we want to lighten,,,
the text and then this one actually has,,,
a background image of the quotes,,,
so let's say url and,,,
we want to go let's see,,,
just dot sl is it where is it,,,
yeah so i'm in style css so we just want,,,
to go into images if you used a css,,,
folder then you wanna gonna wanna do dot,,,
dot slash,,,
let's do dot slash images slash,,,
and yeah we want that,,,
okay so,,,
that doesn't look good let's do a,,,
background,,,
repeat and set that to no repeat,,,
and then let's do background,,,
position,,,
so i'm going to do top,,,
will do top,,,
yeah i guess we'll do top 10 pixels and,,,
right,,,
yeah that looks good,,,
all right now the other ones here so,,,
let's,,,
just grab that and then we don't need,,,
the the image for the other ones,,,
so the color for this is going to be bg,,,
black let's do bg gray,,,
yeah gray blue,,,
and the hsl value for that is going to,,,
be 2,,,
17,,,
19,,,
and then 35,,,
all right and then we'll just grab that,,,
and bring that down,,,
and this one's going to be called bg,,,
black blue and the hsl for this is 219,,,
and then,,,
29 percent,,,
and then 14,,,
which is this one here,,,
all right so,,,
i think that's just about it oh the,,,
footer down here i do want to just,,,
center that so i'm just going to say,,,
footer,,,
and let's text align that to the center,,,
all right,,,
so now for the grid so we know that we,,,
have the testimonials up here that's,,,
going to be our grid container so let's,,,
go ahead and display,,,
grid,,,
and then we know we have we're going to,,,
need four across and then you see only,,,
three items but remember this one is,,,
spanning,,,
it's spanning across two lines right so,,,
it's going to be one,,,
two,,,
three four five but it's going to be uh,,,
it's gonna be five lines but,,,
the tracks it'll have,,,
four tracks so let's do,,,
grid dash,,,
template columns,,,
and we're gonna repeat and,,,
say repeat,,,
four times,,,
one fr,,,
so let's take a look at that all right,,,
so we have four going across,,,
we'll make this a little wider here,,,
now,,,
this one,,,
we want to span,,,
from actually let's let's open up the,,,
the grid tools,,,
so we're going to just click that all,,,
right so now we can kind of see what's,,,
going on a little better,,,
so we want this one to go from one,,,
to three,,,
so what we can do is,,,
go down here to the bottom and let's say,,,
dot,,,
card and we want nth,,,
of type and we want the first one,,,
so if you want to pause the video and,,,
try to do this yourself i would,,,
recommend that,,,
of course you know you don't have to but,,,
i would suggest it but let's do column,,,
grid column so,,,
one,,,
two three,,,
all right cool so now that goes from one,,,
to three now i do wanna add gap as well,,,
so let's go up top here and where we,,,
have our display grid we're going to add,,,
gap and let's do 30 pixels,,,
to split those up,,,
and then i want to do,,,
the fourth one patrick,,,
we want to go from here so,,,
patrick will have grid column,,,
this is going to be 2 right so 1 2,,,
and then 3 and then 4. so we want him to,,,
go from 2 to 4 as far as the column goes,,,
and we want him to go from two,,,
to three,,,
as far as the row goes okay so,,,
let's,,,
just grab that,,,
and that's going to be,,,
four that's the patrick that the dark,,,
background here,,,
so like i said grid column is going to,,,
be two,,,
we want it to go two to four,,,
and then grid row,,,
we want to be from two,,,
so it's going to be two to three like,,,
that,,,
right so he's going from two to three as,,,
far as the row goes now since it's it's,,,
just the next one like two to three we,,,
can we can do this but we can also just,,,
say grid row two,,,
all right so now yeah we have patrick in,,,
the right place and then the last thing,,,
we want is for jeanette to go all the,,,
way down okay,,,
so let's uh grab,,,
this and,,,
jeanette is five,,,
item five so grid column,,,
is gonna go from four,,,
four to five right so this is one two,,,
three,,,
four,,,
five we want to go from four to five,,,
so grid column,,,
and since it's just four to five we can,,,
just do four,,,
and then as far as the row goes,,,
which is this way we wanted to go from,,,
one two three,,,
so grid row is going to be one,,,
three,,,
save that and,,,
there we go,,,
if we stretch this out a little bit it,,,
should look,,,
very similar to that,,,
awesome now the last thing i want this,,,
to do is stack,,,
on small screens because if we make this,,,
really small then you know that,,,
obviously doesn't look good so let's,,,
let's do that let's add a media query,,,
so say,,,
i'll just do 768 so at media,,,
max with,,,
768 pixels,,,
and then,,,
for testimonials which is the container,,,
we'll set the,,,
grid template columns just to 1fr now,,,
that's not going to be enough,,,
because we have the spans going on so,,,
basically when you when you want to,,,
stack them and you're doing this kind of,,,
thing you have to reset them,,,
alright so let's go,,,
let's set this to width,,,
100,,,
all right and then i'm just going to,,,
copy these three,,,
and then we just,,,
need to reset and let it know where we,,,
want these to go on smaller screens,,,
so for the the first one that's pretty,,,
easy we just want it to be at one i,,,
should probably show the,,,
numbers here,,,
for some reason they just disappear,,,
sometimes,,,
all right,,,
so we want this one to just,,,
as far as the column goes so this way,,,
just one to two instead of one to three,,,
so here we could do one slash two or we,,,
can just do one,,,
okay so now yeah you can see that goes,,,
to one to two now for,,,
four which is,,,
patrick who is way down here,,,
we want as far as the column goes to be,,,
one,,,
okay so column is going to be one and,,,
then for the row,,,
he's the fourth one so let's set the row,,,
going from four to five right or just,,,
four,,,
and then for the fifth one,,,
grid column again is going to be one,,,
because it's just one column so they're,,,
all going to be one to two and then,,,
instead of going from,,,
one to three as far as the row goes,,,
she's the fifth one so she's gonna go,,,
from fifth to six so just five,,,
okay so now yeah we have,,,
daniel so he's going one to two one to,,,
two,,,
jonathan's going,,,
two,,,
two three one to two,,,
jeanette is one to two three to four,,,
patrick is one to two four to five and,,,
kira is one to two,,,
five to six,,,
all right so hopefully that makes sense,,,
and it can be a little,,,
frustrating to you know figure out for,,,
for media queries to figure out where,,,
you need to reset them so that they're,,,
in the right spot you know like,,,
unless it doesn't matter the you know,,,
where they fall because you could set,,,
five which is kira to like one,,,
and now she's at the top all right which,,,
is actually kind of cool that you can,,,
switch around the order as well and not,,,
touch the html but,,,
but yeah so i think that that looks,,,
pretty good let's shut this,,,
grid,,,
grid thing off,,,
all right and yeah so once we get to 768,,,
we get our layout,,,
cool so i i really hope you guys enjoyed,,,
this and,,,
learn something from it and have some,,,
you know some foundational knowledge in,,,
css grid it's probably going to take,,,
more than just this one video for you to,,,
be comfortable with it so i would,,,
suggest,,,
looking for some more uh project based,,,
tutorials where where you can use the,,,
grid all right thanks for watching guys,,,
i really appreciate it especially if you,,,
watch the whole video thank you so much,,,
and i will see you next time",,,
-0exw-9YJBo,"foreign
hey what's going on guys so I want this
channel to be a resource for anybody
that wants to learn web development that
can start anywhere including just HTML
CSS and then kind of go through and
learn different Technologies and
Frameworks and I basically want to have
all up-to-date content because right now
some of my crash courses are out of date
I'm working on you know updating those
but I wanted to do something with the
merge stack because that's really
popular with with my audience and
instead of just doing everything in one
video I figured we could do a single
project and spread it across three or
four videos and work on something
different in each video so for instance
in this video we're going to build a
rest API with Express which is a
back-end node.js framework and mongodb
for our database as well as Mongoose
which we'll use to connect and interact
with mongodb so that's what we're going
to do in this video and then in the next
one I want to add authentication which
is some something that's very important
in in building apis so we'll be able to
create a login endpoint a register
endpoint and we'll be able to get a Json
web token once we authenticate and then
we can use that token to access
protected routes all right so after that
on the in the third video we'll start on
the front end we'll start on the user
interface and we'll have a register form
login form and basically we'll have a
dashboard where we have goals so the the
main resource in this project is going
to be goals and that's what our rest API
is going to be we can create read update
and delete goals all right and in the
front end I also want to use Redux
that's something that I haven't really
done in a while on my channel we're also
going to use Redux toolkit now this this
is basically just a smaller version of
my support ticket application from the
react front to back 2022 course so if
you did take that course and you did
that project this is very similar it's
just a little smaller uh same
authentication and everything it's just
we don't have the support ticket side of
it we're doing goals instead all right
so I think that this will give you a
really good foundation in the Marin
stack and and how everything works and I
would definitely recommend that you you
follow along code along with me and
really just immerse yourself into the
learning and if if you don't understand
something pause it look at some
documentation some other resources and
uh and just really get into it I think
that's the best way to do anything all
right so that's it let's get into it and
start on our rest API
okay so before we get into the code I
just want to go over what a rest API is
and how it works so this is an image
that I found from Network
op.co.uk and I like this because it has
a lot of information in one small image
so basically we have our client which is
going to be ultimately our react
application and that's where all the UI
stuff goes all of our components our
state with Redux everything is on the
client and then the back end or the
server we're going to build with Express
which is a node.js backend framework and
this will be our API so we need these
two to communicate and we do that with a
rest API and that includes basically a
bunch of HTTP requests and the
operations that we want to do here are
are called crud create read update and
delete now in this case if you look at
these endpoints API slash devices this
example they're using devices as a
resource but ours will be goals so the
endpoints will be API slash goals Now to
create a goal or a device in this case
you would make an HTTP post request post
is the method okay so you can see these
have different methods so to create
something or to post to the server you
use a post request and then the the
endpoint is going to be slash API slash
devices or goals in our case and you
also send a payload of data because if
you're creating something obviously
you're going to send some data with it
and that goes in the HTTP body which
we'll talk about in a little bit so this
gets back a 201 status code from the
server which means everything went okay
and something was created now to read
devices in this case we would make a get
request so get is for reading data and
it would be just the endpoint API slash
devices and you'll see that these are
these two endpoints are the same but
they do have different methods okay and
then you just get back of 200 which is
everything's okay and then to update
you'd make a put request and this time
you'd include the ID in the actual
endpoint in the URL because you need to
know which which device or which goal in
our case is being updated all right you
get a 200 response back and then same
thing with delete so you make a delete
request to API slash devices slash and
then whatever the ID is and you get a
200 response back so basically in this
video our goal is to create an API just
like this for goals and we're going to
be using Express mongodb for our
database and Mongoose to to connect and
interact with our database now obviously
we don't have a front end to work with
so while we build our API we're going to
be using a tool called Postman which is
an excellent tool excellent HTTP client
if you want to use something different
if you know something that is similar to
postman and you want to use that that's
absolutely fine but I'll be using using
Postman and then mongodb is what we're
using for our database we're going to
use mongodb Atlas which is a cloud
database so we don't actually have to
install it on our system or anything
like that all right so many times I'll
start with creating the database but I
think what I want to do first is just
get our API up and running create our
routes and then we'll start to set up
our our Cloud database and then connect
to it at our models and all that so the
first thing we're going to do is create
our project folder so I'm going to just
open up my terminal and we're going to
go into wherever you want to create this
I have a folder called Dev and then I'm
going to make a directory so mkdir and
I'm going to call this mer Dash tutorial
and of course you can call it whatever
you'd like and you can create this
through your your graphical user
interface if you want and then I'm going
to CD into the uh not make there I'm
going to CD into the mern tutorial
folder and then from there I'm just
going to run vs code with code Dot
all right so we should just have an
empty folder now this is going to be the
route to our full stack application so
I'm first going to create a folder in
here called back end and this is where
all of our routes our models controllers
everything is going to go in this folder
so I'm going to create in that folder a
file called
server.js which is the entry point to
our server and just for now I'm just
going to console log and I don't know
we'll just do hello world
and we'll save that for now so in the
root here not in the back end folder but
in the root is where all of our our back
end dependencies are going to go so
Express and all that will be in a folder
called node modules in the root so I'm
actually going to open up my terminal my
integrated terminal here you don't have
to use this you can use your regular
terminal if you want but I'm going to go
ahead and run npm and knit
and we'll just go through this so
version that's fine description I'll say
goal
goal Setter app for YouTube
say for YouTube tutorial I guess
and then I'm going to use server.js as
the entry point and let's see keywords
we don't need that
you can put your own name in here if you
want and I'm going to use an MIT license
so that will create a package.json in
the root and then before we install any
dependencies I'm going to create another
file in the root called dot git ignore
because I do want to initialize a git
repository but I don't want the node
modules folder to go in or the dot EnV
file so I'm going to add both of those
to this git ignore all right and then we
can install our dependencies so from the
root we want to do npm install and we're
going to install Express we're going to
install something called dot EnV so that
we can have environment variables and
then Mongoose and then there's a utility
called colors that I like to use so we
can use colors in the console and I
think that's all we need for now there's
other stuff that we need later but I
think
yeah I'm pretty sure that's that's all
we need for this video
now as a Dev dependency I'm going to npm
install Dash uppercase D and then node
mon which is a tool that will constantly
watch our server.js file so we don't
have to keep restarting it
so now what we can do is go into our
package.json and you should see your
dependencies and node one as a Dev
dependency and we're going to add a
script here called start and then let's
get rid of this
and we want this to run with node.js we
want to run our backend slash
server.js file and then what I'll do is
copy this down and we also want to run
node mon
and the script for this will be called
server all right so we should be able to
run npm run server for node mod to run
our server.js file so let's try that out
we'll come down here we'll say npm run
server
and there we go so it spits out hello
world and it's just constantly watching
for changes I'm going to go ahead and
just stop that with command or control C
and now we have that set up now I would
recommend that you create a git
repository so I'm going to go ahead and
get a knit
and then we'll do get add all and then
git commit
M and I'll just say initial commit and
we're probably going to deploy this to
Heroku so we do use git to do that so I
would recommend doing that and just
making commits As you move along
so as far as the front end we're going
to do that later on I just want to
create our backend API first so we're
not even going to create a front-end
folder just yet
now we have our server.js like I said
this is the entry point so let's get rid
of this and we're going to go ahead and
bring in Express which is our back end
web framework so it's
bring that in and then I'm also going to
bring in dot EnV so that we can have
environment variables
don't Dot
and V and set that to require
dot EnV and then we just want to call a
function called config so we just do dot
config like that and that will allow us
to have a DOT EnV file with our
variables in it and then for the for the
port I'm just going to create a variable
I'll just put 5000 in it for now it's
the port we want our server to run on
now we need to initialize Express so
we're going to create a variable called
app set that to express and then with
that app object we can call listen which
takes in a port number so our Port
variable and then you can also have a
second argument with a function and I
just want to do a console log with some
backticks and we'll say server
started on Port and then
the port number all right so just having
this we should be able to run npm run
server
and we should see Server started on Port
5000 but I'm going to cut this off
because I want this port number to
actually be in an environment variable
so in the root here not in the back end
folder but in the root we're going to
create a DOT EnV folder
file sorry and I'm going to put in here
a couple things we'll have our node
environment and we're going to set that
to development
and then we're also going to set our
port and for now I'm going to set it to
8 000.
so now here where we set our Port I'm
going to go in front of the 5000 here
and say process Dot
env.port and what that does is it allows
me to access
that Port variable in my DOT envn and we
can use this anywhere in our server but
I'm going to also just add or 5000 if
this isn't found for some reason so now
if we go ahead and run npm run server
again we should see it on 8000 because
it's reading it from the port here
however I'm going to change it back to
5000 here because that's what I
ultimately what I wanted to run on now
whenever you change or add something to
the dot EnV you do have to restart your
server other than that we can run it now
and we should be all set even if you
want to install other packages and so on
so to create a route I'm actually going
to open up
where is it where the hell's Postman I'm
going to open up Postman and let's close
this up
so just download it from postman.com or
you can use a different HTTP client you
could even use your browser right now
because it's only a get request but
basically we open a tab and we can make
any type of request any method we want
I'm going to choose get and then to
access our server we can do localhost
it's on Port 5000 so colon 5000 and then
let's say we want to do slash API slash
goals so ultimately that's going to get
our goals right now we just get a 404
not found response and it just sends an
HTML page but this is the route that I
want to create to get all of our goals
ultimately from our database so we could
go in here and say app.get because get
is the request we want to listen for and
then the end point would be slash API
slash goals and then we just have a
second argument of a function that takes
in a request response variable
and then to respond we could do just res
dot send
and we could pass a string in here and
just say we'll say get
get goals because ultimately that's what
this is going to do so now if I send
this we now get a 200 status which is
okay and then we have a string of get
goals
now usually you're going to return Json
so for the most part we would do dot
Json and
pass in here a Json object or Json or an
array and we can say like message and
we'll set that to a string of get goals
all right so we'll send that and now you
can see we get a 200 response we get
this and then if we look in our headers
the content type should be application
slash Json
all right and even though we didn't add
like you know double quotes on the key
it just gets uh parsed into Json with
the double quotes
so you can set the status yourself now
this does give us a 200 as you saw but I
still usually like to do status
and set it to 200 and then just add dot
Json and that will give us the same
result
all right now
you're probably not going to want to
have all your routes in this one
server.js file you really want to clean
your your folder structure up or else
it's going to get really messy so in the
back end I'm going to create a folder
called routes
and then in that I'm going to have a
file called goal routes
go routes.js so basically each resource
in your API will have its own route
folder route file sorry now to use the
express router we're going to first
bring an Express into this file so let's
require
Express
and then we can create a variable called
router and we can set that to
express.router uppercase r
and then you just need to export this so
we're going to say module exports and
set that to router
okay and if this syntax if you've never
seen this before this is common JS
module syntax which is different from
you know when you would import Express
or whatever that's es2015 syntax and
that's what we use in the front end with
react and View and so on you can use
that syntax in node.js but there's some
additional steps you need to take at
least at this time so I usually stick to
the common Js
so to create a row what we can do is
copy that or cut this
and then put that in here right above
where we export and just change the app
to router now this API goals I want to
have this if if we hit this from the
front end I want it to direct to this
file so I'm actually going to just
make this a slash and then what we can
do is under where we initialized express
we can do app.use
and we can say slash API slash goals and
as a second argument we can require the
file that we want that to pertain to
which is going to be routes and then
goal routes so now if I hit API slash
goals it's going to look into this file
here and all I need is a slash because
the API slash goals was already
specified so if I make a get request to
API slash goals we now get the same
response and we were able to move that
to this file all right now I'm going to
have a couple other
routes here so let's copy that and we're
going to have four because we want to be
able to get we want to be able to create
a goal so that'll be a post request and
we'll just leave this AS Slash
which ultimately is going to be
slash API slash goals and a post request
will create a goal so I'm just going to
change this to or let's say set goal
okay and then down here so to update
it's going to be a put request
all right so we're going to say put and
then we do need to include the ID
remember that image that I showed you
this right here to make a you make a put
request and then it's going to have
slash ID same with a delete request so
what we do is put colon slash ID here
and that's going to be our param now you
can access this within your route so I'm
going to actually use backticks here
instead of quotes so I can include a
variable and we'll say update
let's say update go and then
we can use this syntax to add a variable
and I can take that request object so
request.params and then dot ID because
that's the param that I want to get
okay and then we'll do the same for the
delete so I'm going to just copy this
and then this is going to be a delete
request
and we'll test these routes in a minute
and then let's see we'll paste that in
and we'll just change that to delete
and we want to make sure that we add a
colon ID here as well because remember
it has to include the ID so now let's
come over and test these routes out so
get request that works post request is
going to be the API slash goals so you
can see we get a 200 and it says set
goal if we make a put request to goals
slash and then whatever some number
which would be the goal ID we get update
goal and then that number if I do a
delete request to that same endpoint we
get delete goal and then that number
all right so now we have all of our
routes set up they're not doing anything
except just spitting out you know a
message but they are set up now we could
proceed to add our functionality in the
body of these callback functions but
it's much better practice to actually
create a controller and have your
functions there so in the backend folder
let's create a controller our
controllers folder and then we're going
to go ahead and add here goal
controller.js and then here we can just
create some functions so for instance we
want to get goals function and it's
going to take in request response
all right and then we'll have the same
you know same thing just respond with uh
status and message now to use this I'm
going to export it down here so I'm
going to say module.exports
and set that to an object and then we're
going to pass in the get goals function
now in our routes we can bring that in
from the controller so let's say const
and that's going to be from require and
then we want to go let's see out of the
routes into controllers and then goal
controller and what we want to get is
the get goals
function now this right here the get
request to slash which is slash API
slash goals I'm going to replace this
whole function here with get goals
all right now that should still work if
I make a get request
to
API slash goals you'll see that it does
the same thing and now I have that
functionality moved to my controller
file now I want to do this with the rest
of these as well so let's uh actually
before I copy this one thing I want to
do and if you guys have ever taken a
node.js course for me you know that when
I create my my controller functions I
like to add a couple things in the
comments I like to add a description of
what this does so we'll say get goals
and ultimately this is going to get all
goals but after we add authentication
it'll only get a specific user goal all
right now I'm going to add the route
so let's say route and I also add the
method here so it'll be a get request to
API slash goals and then I also like to
put the access
so it can be public or private all of
these are going to be private after we
add Authentication
so now let's copy this whole thing
paste it in four times because we're
going to have four different functions
the second one is going to be we'll call
this set goal
make it singular
and then let's see we'll change this
stuff up here so this will set
a goal and it's going to be a post
request since we're setting it or
creating it to the same route and then
let's see for the response here we'll
just copy this
and paste that in all right and then
let's see down here this one is going to
update
goal and it's going to be API goals
slash and then ID
and it's going to be a put request since
we're updating
and we'll change the name of the
function here to update goal oops
and then let's grab this
okay we'll paste that in here
and then to delete we'll say delete goal
and API goals
slash colon ID and that'll be a delete
request
and we'll change the name of the
function here to delete goal
and then we'll just grab this
this here oops I'll just
copy that and paste that in and then we
just need to export all these so we want
set goal
update goal and delete goal all right
now we can bring those in so up here we
say set goal
update goal and
delete goal and we just want to replace
these functions so this is the post
request so that's going to set goal this
one here is the put
that's going to update goal and then we
have our delete
so delete whoops delete goal so we you
can see we really cleaned up the the
routes file here now we can clean it up
a little more and because we have these
two are the same route and then these
two are the same route we can do router
and instead of dot get and Dot post we
can actually do router dot route
and then pass in the route we're looking
for and then we can add on to that or
chain onto that dot get and we want that
to call get goals and then we can chain
onto that dot post
and we can do set goal and then we don't
need these two lines right here so it
saves us a line of code and then we can
do the same thing let's copy this down
and we'll say for the route of ID
we want the put let's do delete
is going to call delete goal
and then put
is going to call
update goal and then we can get rid of
these two lines so now you can see we've
really cleaned this up and now we don't
have to touch this anymore
so let's test out all the routes we have
our get request that's still working uh
let's do Post
that's working let's do put and it's
going to be goals slash something
that's working and delete
that's working
okay so now we have our controller
functions here that we can use before we
get into uh you know connecting to the
database and or creating it then
connecting to it and all that I want to
set up our error Handler so first of all
if we um
if we want to make a post request right
to API goals we need to send some data
to create a goal so we would do that by
adding data in the body so right here
you'll see we can do raw which is just
raw Json or form URL encoded and that's
what I'm going to do I'm going to send a
value of text and for the actual value
I'll just say my first
goal and obviously if I send this
nothing different is going to happen
because we haven't handled this yet now
to get body data
let's go to the pertaining function
which is set goal
and I'm going to do a
console log of request so the request
object has a body property on it and if
I send this with the text in the body
you'll see that it actually console logs
undefined and the reason for that is in
order to use body data you just have to
add a couple lines of middleware so in
our server.js I'm going to go
right here and to add middleware we just
use app.use and then on Express we have
the body parser for raw Json which would
just be dot Json and then for URL
encoded we can do app.use
Express dot and then URL encoded and we
just pass in an object with an extended
extended value of false so now since I
added that middleware if I come back and
I send this
with the text in the body now you'll see
that it's actually logging an object
with text and then my first goal
so what I want to do here is check for
that so we'll say if
request.body dot text because that's
what I sent and obviously you know you
can send other other fields here as well
and we'll we'll be doing that when we
get into users but uh if this we
actually want to check if not so if
that's not there then I'm going to set
the status to something different we
don't want 200 because that means
everything's okay this is going to be a
client error or a bad request which is a
400 status all right and then we could
do this like we could just add on dot
Json and we could add in a message
and say please add
a text field
okay so now if I come over here if I
send it with the text nothing hap you
know same thing but if I uncheck it and
don't send it I get a 400 bad request
and please add a text field
now I would prefer to use the express
error Handler because it does have a
built-in error Handler so I'm going to
get rid of the dot Json still set the
status but then here I'm going to say
Throw new error
and I'm going to say please add a
a text field
okay now let's see what happens if we do
that we leave the text unchecked send it
and we do get the 400 response but
you'll see that by default the error
Handler gives us an HTML page it does
have what I you know the error the text
I passed in but if we look at the hair
and the errors the headers the content
type is text HTML so what I want to do
is change the default Express
error Handler so to do that we need to
add a middleware function so in back end
I'm going to create a folder called
middleware
and inside there let's create a file
called error
middleware and all middleware is oops
that has to have a an extension
dot Js
so all middleware is they're just
functions that execute during the the
request response cycle so when you make
a request
um so as far as what I want to add here
is a function
called error Handler
and to overwrite the default Express
error Handler you just want to pass in
err here this object and then the
request response and then next to call
on the further middleware
all right and then I want to get the
status code so if it's set like I set
right here before I throw the error I
want that if not I want it to be 500
which is a server error so I'm going to
create a variable here called status
code and I'm going to set it to a
ternary which is a conditional so we'll
say if res dot status code meaning you
know what I set in the controller if
that's there then I want to use that
or put that in the the value of this
variable else then I want it to be a
500. then we just call res dot status
and pass in that status code
whether it's what I set or 500 and then
respond with Json so dot Json will pass
in a message and then on that error
object we have a message text so I'm
going to use that and then we can also
get the stack Trace which gives us some
some additional information but I only
want that if we're in development mode
so we can say process dot EnV Dot and
then node underscore EnV and we'll say
if that is equal to
production so for in production then we
only want we want that to be no else
then we'll show on the error object
we'll show the stack which will give us
like line numbers and stuff like that
all right so then we just need to module
Dot
boards I'm going to export an object
with error Handler
because you can have other types of
error handlers as well if you want and
then we're going to go into server.js we
can close that file up go into server.js
and bring in the error Handler
and we're going to say error
Handler and we want to bring that in
from our file which is going to be in
the middleware folder and then error
middleware then we just want to go
underneath our routes and say app.use
our error Handler okay and that will
that'll overwrite the default Express
error Handler so now
if we come back over here
so before I didn't I didn't have the
text field and I got a 400 response and
I got this HTML so now if I send without
the text field I get 400 and I get an
adjacent object with the message and
then also the stack which gives us some
more information okay and we only need
this in development mode now if I were
to change my DOT EnV to you know you
guys don't have to do this but if I
change it to production
and you do have to restart the server
when you change that so now if I send
that I don't get that that information I
just get null for the stack which is
what I want so let's change that back to
development
and let's restart that
okay good so there's one more thing that
I want to do before we get into the
database and that is in the controller
when we use Mongoose in each of these
functions to interact with the database
we get back a promise so we're going to
be using a sync await so we do want to
add a sink
to to these functions so here
sync and on the delete a sync now if by
default well if you use the the dot then
dot catch syntax you'll have to do your
dot catch if we use a sync await like we
are we would do our try catch now if I
we don't want to use try catches and
just use the error Handler we can use a
package called Express async Handler so
we're actually going to install that I'm
going to open up a new tab in my
terminal and say npm install
and it's called Express Dash async Dash
Handler
and then
once that installs we'll go ahead and
add that up here in the controller so
we'll say const
and we're going to call this async
Handler
and set that to require
s a sync Handler and then all we have to
do is wrap each one of these so right
before where we put a sink I'm going to
put async Handler and just wrap the
entire function so that will end here
and then I'll just
I'll just copy this
we're going to do that to all these so
for the set goal we'll paste that and
then we'll end it
paste that here and that here and then
for delete
same thing good so now we can save that
and now we're ready to start to work
with the database so obviously we have
to create a database actually let me
make a get commit here and you guys can
if you want
we'll say get add all and then get
commits and we'll just say um
goal goals controller
and routes set up
all right so let's go back to
mongodb and we're like I said we're
using mongodb Atlas which is a cloud
database we're going to set that up
there's also another
tool called Compass which is uh
basically a desktop app a desktop GUI so
that you can manage your database from
there if you want so I would suggest
downloading and installing but you don't
have to I'm just going to open up mine
let me see I'm actually logged in here
let me
quit that and just open that up again so
when you open you're going to have this
input for a connection string so let's
create our database and then I'll show
you how we can connect with that so if
we go to mongodb sign in
excuse me you can use your your Google
account or your email I'm going to use
let's see I have a bunch of accounts
this one I just cleared out so it's
basically like a new account
so we'll log in and you should see
something like this we need to create an
organization
we want mongodb Atlas click next
oh we have to name it so I'm going to
use travesty media and next
and you don't have to actually add
anything here just click create
okay once we do that we need to create a
project so for the project name I'm just
going to say
I don't know mern app
create project
and once we do that we can create a
database cluster so right here you'll
see this build the database button now
there's there's paid Services here if
you're going to create a you know a real
production app but there's a shared plan
that is absolutely free no credit card
or anything it's great for testing it's
great for really small projects so we're
going to choose that
AWS is our provider and then everything
else you can leave is default I'm just
going to change my cluster name
to Traverse cluster
all right and then we'll click create
cluster
so here how would you like to
authenticate your connection username
password so you do have to add a
username I'm going to say Brad t1234 and
I'm going to use the same for the
password and make sure that you actually
I don't know if I entered that right
um front t one two three four all right
so make sure you click create user
sometimes people miss that and then down
here where it says uh where would you
like to connect from we're going to go
ahead and keep local environment and
then if you click this button add my
current IP address it'll add your IP
address or in my case my VPN address and
then we'll click finish and close and go
to database
okay so now this is going to take a
couple minutes to create actually I
already had a cluster so mine I think is
all set but it might say wait one to
three minutes or something like",,
",,
 that but,,,
once you get these options right here,,,
you'll see if you click connect you have,,,
a couple options connect with the,,,
mongodb shell connect your application,,,
which we'll be using very soon and then,,,
also connect to Compass which I'm also,,,
going to show you but before that let's,,,
go to browse collections and from here,,,
you would see all of your collections if,,,
you're not familiar with nosql or a,,,
document database which is what mongodb,,,
is we have something called collections,,,
which you can almost think of as tables,,,
in a relational database in a relational,,,
database you have tables of rows and,,,
columns in a nosql document database you,,,
have collections of documents and,,,
documents are really just Json objects,,,
so the structure of them you guys should,,,
already understand,,,
so we're going to go ahead and click add,,,
my own data and I'm just going to put,,,
mirn app for my database name of course,,,
you can put whatever you want and,,,
ultimately we're going to have a goals,,,
collection and a user's collection,,,
because we're going to add,,,
authentication in the next video for now,,,
let's add a goals collection so we're,,,
going to click create,,,
all right so now we have,,,
our over here you can see we have our,,,
murnapp database and our goals,,,
collection now if we go back to overview,,,
and we click on connect,,,
let's click on Connect using Compass and,,,
then copy this connection string,,,
and I'm going to open up compass and,,,
paste that in now there's two things we,,,
want to change here one is that this,,,
test right here since I I use the name,,,
mirn app for my database I'm going to,,,
put that instead of test and then I'm,,,
also going to replace the brackets and,,,
password with my actual password which,,,
is the same as my username and then,,,
we'll click connect,,,
and now you should see this admin in,,,
local but you should also see this mirn,,,
app and if we click on that you'll see,,,
your goals collection which if we had,,,
any documents we would be able to see,,,
them here all right and you'd be able to,,,
edit them and delete them and all that,,,
so I'll just leave that open and,,,
minimize it now we want to go to connect,,,
here where is it right here connect to,,,
your application and copy that that,,,
string and then let's go into vs code,,,
and we don't want to just put this in,,,
any old file we're going to put this as,,,
an environment variable so here let's,,,
say underscore URI and then we're,,,
going to set that to that and we just,,,
want to change with this it actually,,,
puts my first database I'm going to,,,
change it to myrn app because that's,,,
what I called it and then the password,,,
of course we want to change that,,,
to the correct thing and save that and,,,
then just restart your server because,,,
you did add a new environment variable,,,
so now to connect we're going to go into,,,
our backend folder close these up here,,,
so in backend I'm going to have a folder,,,
called config and again if any of you,,,
have taken my node courses on udemy WE,,,
this is I pretty much do the same thing,,,
so in config we're going to have a file,,,
here called db.js and this file is is,,,
what we're going to use to connect to,,,
mongodb and we're going to use Mongoose,,,
so let's bring in mongoose,,,
so equals require,,,
Mongoose and just make sure you have it,,,
installed if you look in your,,,
package.json you should have it and I,,,
did also install this colors which I,,,
want to use so I'm going to actually,,,
bring that into server.js because then,,,
we can use it from anywhere,,,
so we'll just go right here and say,,,
const,,,
colors,,,
colors and set that to require colors,,,
all right and then in our dbjs we bring,,,
in Mongoose we're going to create a,,,
function called connectdb,,,
is going to be an arrow function and,,,
it's going to be a synchronous because,,,
all of our Mongoose methods are,,,
asynchronous they return a promise,,,
so here we're actually going to use a,,,
try catch,,,
and in the try we're going to connect so,,,
we'll create a variable called Conn and,,,
then we're going to await on Mongoose,,,
and then there's a function called,,,
connect,,,
so Mongoose connect and this takes in,,,
our URI which we can get from,,,
process,,,
I don't know I can't type today process,,,
dot EnV Dot and then underscore,,,
URI or whatever you called it,,,
and then once it connects I do want to,,,
just do a console log and I'm going to,,,
use backticks in here and say DB,,,
connected oops,,,
connected and then we'll do a colon,,,
space and then I'm going to put our,,,
money sign curly braces because I want,,,
to take from that connection variable,,,
There's an actual object called,,,
connection and then there's a host so I,,,
want to I want to put that there,,,
um and then I do want this to be a,,,
different color and underline so after,,,
the back tick we can say dot and there's,,,
all different types of colors we can use,,,
I usually use cyan and then I like to,,,
add an underline as well so this is from,,,
the colors package,,,
now if there's an error we're going to,,,
first just console log that error and uh,,,
we're going to close the process so,,,
we'll say process dot exit so we want to,,,
exit the process with failure so we pass,,,
in a 1 here and then all we have to do,,,
is export this so module.exports,,,
connect DB and then we just need to,,,
bring it into server.js and run it so in,,,
server.js,,,
let's go right here and say cons connect,,,
DB and we're going to get that,,,
from Let's see we want to go dot slash,,,
config slash DB,,,
and then we just want to call it so,,,
we'll go right here we'll say connect DB,,,
and run that function so now you should,,,
see in your console oops what am I doing,,,
you should see something like this so,,,
it's just showing my host and it's in,,,
cyan it's underlined and of course you,,,
can use different colors,,,
if you don't get this you may it might,,,
take like 10 to 20 seconds and then,,,
you'll see an error if that happens it's,,,
usually because you forgot something in,,,
like uh the dot EnV so maybe you forgot,,,
your to put the password or you put the,,,
wrong password or maybe you put,,,
um the wrong uh you didn't set up the,,,
database access right so if we go into,,,
here and you go to network access make,,,
sure that your IP address is in there or,,,
you can also click enable for everyone,,,
so just make sure that that stuff is all,,,
set if you do see any errors you know,,,
so let's close that up and now that,,,
we're connected we can start to create,,,
our models or I should say our model,,,
we're going to do the users model in the,,,
next video right now we're going to,,,
create our goals model so in the back,,,
end create a new folder called model,,,
and this is where we basically Define,,,
any resources we have you know blog,,,
posts to Do's or whatever it is that you,,,
have in your application we're going to,,,
create a goals or goal model dot JS file,,,
so here's where we Define our schema,,,
which is going to be the fields for this,,,
particular resource now for our goals,,,
we're just really going to have a text,,,
field that's really it aside from some,,,
time stamps and also the ID obviously,,,
and the user now the user We're not,,,
gonna we're not going to create that,,,
relationship until the next video,,,
because we do you know we need to have,,,
our users model first so this is,,,
actually going to be pretty simple first,,,
we're going to bring in Mongoose so,,,
let's require mongoose,,,
all right and then we're going to create,,,
our schema so let's say const goal,,,
schema and we set that with Mongoose Dot,,,
schema and then we pass an object in,,,
with our Fields so like I said we're,,,
going to have a text field and you just,,,
need to define the type now you could do,,,
this or you can set text you can set it,,,
to an object and then have a type,,,
of string,,,
and then you can also add like unique,,,
which we don't need this to be unique of,,,
course required so we'll say required,,,
which you can set to True like that or,,,
you can set it to an array with true and,,,
then a message like please add,,,
uh please add a,,,
text value,,,
all right and that's pretty much all we,,,
need now for time stamps we could add,,,
them manually or you can go after this,,,
curly brace and add a second argument,,,
here after your schema of an object and,,,
then we can say time stamps and we just,,,
set that to true and that'll create a an,,,
updated ad and created that field,,,
automatically,,,
all right and that's all we really need,,,
here so we just want to export it so,,,
module exports and we want to export,,,
Mongoose dot model,,,
and we're going to name this the goal,,,
model,,,
and it's going to take in the goal,,,
schema which we just created so pretty,,,
simple,,,
now what we can do is go to our,,,
controller we can close up that let's go,,,
to our controller and we can bring in,,,
our model,,,
so go set that to require,,,
and then we want to go let's see we're,,,
in controller so we want to go out of,,,
that into model,,,
actually that should be models not model,,,
let's rename that,,,
all right so it'll be models and then,,,
slash goal model,,,
and then this will have a bunch of,,,
mongoose methods on it that we can use,,,
to create,,,
in our database or read or whatever it,,,
is that um,,,
you know that we want to do so let's,,,
start off with our get goals remember,,,
this is connected to this route so,,,
basically all we need to do here is,,,
create a variable called goals and we,,,
can get them from our database through,,,
our Mongoose model we need to await,,,
because remember this this is,,,
asynchronous and we can take our model,,,
and it has a method called find and you,,,
could pass in an object and find it by,,,
something actually later on we're going,,,
to find it by the user but right now,,,
we're just going to get all of them and,,,
then as far as what we want to return,,,
instead of just a message we're going to,,,
return the goals,,,
and now if I come over here to postman,,,
they make a get request to API goals,,,
goal dot find is not a function let's,,,
see,,,
um,,,
goal model,,,
okay that's weird what did I mess,,,
something up in here,,,
oh I get two P's in exports,,,
all right let's try that again so we'll,,,
go ahead and send and we get a 200,,,
response with an empty array which is,,,
what we should get because we haven't,,,
created any goals,,,
so let's do that now we're going to go,,,
to the set goal function and we check,,,
for the text if it's not there we throw,,,
an error if it is so we'll just keep,,,
going here let's say Kant goal,,,
and let's await,,,
and then goal has a create method that,,,
we can use and we want to pass in an,,,
object I'm going to set a text value,,,
which we can get from request dot body,,,
dot text,,,
okay and then for the Json that we want,,,
to send back let's get rid of this and,,,
we're just going to send back that goal,,,
so now let's try to set a goal so come,,,
over here I'm going to open up a new tab,,,
and we want the same endpoint so we can,,,
copy that and just make a post request,,,
with a text field so click on body URL,,,
encoded and let's say text and we'll say,,,
my,,,
first goal and send and there we go we,,,
get back at 200 we get back the new goal,,,
with the text the underscore ID is the,,,
field that mongodb uses and created at,,,
updated at so if we want to create,,,
another one let's go ahead and just do,,,
my,,,
a second goal and we'll send that and,,,
now if I go back to the get request and,,,
send that again now you can see we have,,,
two goals,,,
so next we want to be able to update so,,,
let's go to our update function here and,,,
first thing we want to do is,,,
get the the goal that we're trying to,,,
update so we'll say cons goal,,,
we're going to await,,,
our go model and use find by D and,,,
remember the way we get the ID is with,,,
request Dot params,,,
dot ID because that's going to be in the,,,
URL and then we'll check to make sure we,,,
have it so we'll say if not go,,,
then let's do a res dot status,,,
400 because they are not you know,,,
providing the the goal the ID and then,,,
let's say Throw new error,,,
and we'll just say goal not found,,,
okay so that'll get the goal then we,,,
want to update it so I'm going to say,,,
const We'll create a value or variable,,,
of updated goal not update make sure,,,
it's updated because we called this,,,
update goal and then we can await Gold,,,
Dot and then there's a find by ID and,,,
update,,,
so you can see Mongoose makes this all,,,
really easy we just pass in our ID which,,,
is,,,
request.params dot ID second argument is,,,
the the data which we're going to do,,,
request.body which will be our text our,,,
updated text and then our last a third,,,
argument with options an options object,,,
with new that will set to True which,,,
will just create it if it doesn't exist,,,
and then as far as what we want to,,,
return or respond with it's going to be,,,
that updated goal,,,
so now let's come over here let's open,,,
up a third Tab and I'm going to let's,,,
see,,,
the end point is going to be goals but,,,
then we also need an ID so I'm going to,,,
get the ID of the second goal,,,
this right here let's grab that and,,,
let's put that in the URL,,,
and let's make a put request and then in,,,
the body I'm going to say I want the,,,
text,,,
to be changed to,,,
updated goal,,,
we'll send that and we should get back,,,
the updated goal and if I come back to,,,
the get request and send it again you'll,,,
see we have my first goal and then we,,,
have the updated goal,,,
and then the last thing is the delete so,,,
what I want you guys to do is pause the,,,
video and see if you can do this,,,
yourself I'll give you one hint and that,,,
is that once you get the goal once you,,,
you know find it you can use the dot,,,
remove method to actually remove that so,,,
if you want to try it out go ahead so,,,
we're going to get the goal which I can,,,
actually copy from here,,,
and then we'll paste that in here so,,,
we're going to get that goal and then,,,
like I said there's a remove so we just,,,
need to await,,,
goal dot remove we don't even have we,,,
don't have to assign it to a variable,,,
because there's no reason to save it uh,,,
it's not going to be there I'm sorry,,,
remove has to be a function but what I'm,,,
going to return is just an ID,,,
so let's say ID and I'm just going to,,,
return that with,,,
request.params.id and the reason I'm,,,
doing this is for the front end later on,,,
we're going to need the ID but that,,,
should do it so let's come over and,,,
instead of a put request let's delete,,,
this second goal so I'm going to go,,,
ahead and send that we get back the ID,,,
but if we go back to our get request and,,,
we send you see we only have one goal so,,,
that was deleted so we now have complete,,,
crud functionality for our API,,,
now later on in the next video we're,,,
going to create authentication so we'll,,,
create a user's model we'll have a login,,,
a register so we still have a lot of,,,
work to do and even after that we're,,,
going to create the front end so right,,,
now I'm just going to make we'll say git,,,
add all,,,
and let's say git commit M and I'll just,,,
say initial rest,,,
uh initial rest API for goals,,,
or just rest API for goals,,,
okay and I'll have the code in the,,,
description as well,,,
all right guys so that's it I will see,,,
you in the next video I'm not sure,,,
exactly when that'll be it might be,,,
right away or it might be a couple days,,,
but that's it thanks for watching and,,,
I'll see you soon",,,
d_BhzHVV4aQ,"[Music]
hey what's going on guys welcome to my
remix crash course so in this video
we're going to learn all about remix
while building a blog application also
using prisma and sqlite for a database
so before we jump into the code i just
want to talk about what remix is and why
it's beneficial so remix is a new
framework it has a lot of hype it was
created by the same creators of react
router in fact it's basically built on
top of react router and the good news is
it's not just a new framework with no
purpose other than to just create
another framework it's for react
developers and it's a full stack
framework that solves a lot of problems
that single page applications or purely
client-side apps have now we do have
next js which also offers
rendering react on the server next.js is
a fantastic framework i use it a lot i
have a course on it and i don't think
it's going anywhere i do think remix
feels a bit different in the way that it
does things particularly using what are
called loaders and actions which we'll
get into in a little bit but i'm not
going to compare the two i'm not going
to say one is better than the other but
i do think that we're moving away from
the single page application and moving
more towards building with next js remix
next for vue and you know full stack
frameworks like this or you should say
server rendered applications so as far
as some of the benefits of course server
side rendering is huge it has some great
benefits especially with seo file system
routing is also great you don't have to
explicitly define all your routes you
just create a file and put it in a
certain folder and it just works as a
route similar to how old school i
shouldn't say old school but how php
sites work
you also have nested routes with remix
which is pretty cool we can use the
outlet element from the react router and
build a hierarchy of routes these nested
routes are server rendered and it's
almost like a hybrid of a single page
application and a server side rendered
application now loaders and actions i
think really make learning remix worth
it you get a lot of control when it
comes to dealing with the request and
response loaders are basically functions
that you can put directly into your
route modules and they run on the server
side and if you need to fetch some data
and load it into your page you can do it
from there in our case we'll be using
prisma which is an orm to get data from
an sqli database and we'll be able to
put it right into our route loader or
right into our page
actions are also something that caught
my eye and if you guys have worked with
php before
you know that when you submit an html
form you can you can make a post request
with a form without javascript without
having to add an onsubmit handler and
remix allows us to do that by using
something called action functions so we
can actually make requests directly from
html without javascript using these
action functions and we'll get into that
you know in a little while
so you can also have easy access to head
tags from any route module if you want
to add a meta tag like let's say
keywords or description on any of your
pages or any of your routes you can do
that really easily same thing with links
if you want a specific css file in our
css link in the head you can do that
really easily with remix error handling
is also included and really easy to use
you can export an error boundary
component inside your route module which
will basically handle any error for that
specific route and you can also create a
root error boundary you also get
typescript right out of the box you can
generate your your boilerplate app with
typescript and tsx files or you can do
it with javascript and you can pick and
choose which files you just want to
change to typescript all you have to do
is change the extension we also have
built-in support for cookies and
sessions which is really cool there's a
function that remix provides called
create cookie remix has built-in support
to work with sessions using cookies the
file system
server memory or custom storage so these
are all really cool features that remix
offers so my plan is to get a remix app
up and running and talk about what it
offers and show you how loaders and
actions and nested routes work but also
build a blog application at the same
time where we can use prisma which is an
orm and also use sqlite as our database
which you could easily switch out for
postgres or something else so we'll get
some basic functionality done today and
then
probably in my next video i want to add
user authentication so people can come
and they can register sign in create
posts and delete their own posts we can
get into cookies and sessions and all
that all right so let's go ahead and get
started all right guys so we're going to
get started and i would suggest that you
follow along and code along with me i
think that's the best way to learn and
to retain information but of course it's
up to you
so this is the documentation and you can
see we can get started with npx create
remix and they're telling us to use at
latest and you can do that or you can
use the the version that i'm using which
is the latest at this point is 1.0.6
so you can either use latest or you can
use the the version that i'm using
so i'm going to go ahead and run npx
create dash remix at latest
and it's going to ask us some questions
the first being where we want to put
this i'm going to have a folder called
remix blog
and then where do you want to deploy so
you have some options here like fly dot
io versel netlify i'm just going to
choose the remix app server and then you
have the option to use typescript if you
want which i probably would if i was in
production but
since it's a tutorial and some people
might not know anything about typescript
i'm going to go ahead and choose
javascript and yes i want to run npm
install
okay so that's all set let's cd into
remix blog and i'm going to open up
visual studio code from here and of
course you can use whatever whatever
text editor you want
so we have the files and folders i'm
going to go over in a second but let's
run the dev server first so if we open
up uh integrated terminal i'm going to
run npm run dev that's the command to
run this on localhost 3000 and then you
should get something like this it's just
a simple demo so if we go to like
actions it has a form where you can
submit to an action function and we're
going to get into all that but i want to
basically just blow everything away all
the demo stuff and start from scratch
because i think that that's the best way
to really learn what's going on here so
let's go into the package.json and
you'll see under dependencies
we have react we have react dom
and then we have remix and we also have
this remix run react remix run serve
and then the dev script that we just ran
so npm run dev npm run build will build
for production and it actually creates
two build folders one in the root which
is the server files and then one in
public as well
which is the client
so the public folder you can use for
static assets like images fonts etc but
most of the stuff that we'll be doing is
going to be in this app folder okay so
this is our basically our application so
let's go through some of this the
the entry
files here entry client entry server
are really just that they're the entry
points
this one here entry dot client this is
going to be the javascript the first
javascript that's run
when our app is ran in the browser and
you can see we're using react-dom here
and it basically hydrates our react
components and then entry dot server
uh this is going to be ran
basically when we make our request to uh
to the server remix handles the loading
of the data and we're responsible for
sending back a response and that's one
of the reasons i really like remix is
the amount of control that we get when
it comes to the the whole request
response cycle
now the the routes folder this is going
to be where our route modules go which
are basically just react components
functions
and i'll get into how the the nested
routing works and all that in a little
bit
styles so you we have a global css and
you can also create style sheets for
specific routes and then we have the
root jsx which is basically our root app
component and there's kind of a lot
going on here so what i want to do and
what i want you to do if you're
following along is just to get rid of
everything here in the root and save
so this is going to give us an error it
says route root has no component please
add a default export in the route module
file so we're going to go ahead and add
an export
we want to export as default a function
called app
and then in here i'm just going to
return and this returns jsx it's just a
react component if i put an h1 in here
and just say my app
and we save that we come over here and
reload we should see
my app
all right i'm just going to resize these
so if i view the source of this all we
see is a doctype and an h1 that's it
there's no html head body tags nothing
and we have complete access to to that
root document so in this app function
that's where we want to put that stuff
so we want an html tag let's put a lang
set that to en
and i don't know why this didn't change
too so html and then inside that we're
going to want our head tags
and then i'll just put a title tag in
here we'll say my remix blog and then
let's uh that's all i want in the head
for now then we'll have our body
now in the body we're going to have an
outlet so the outlet is
basically whatever route we're on
whatever route module that's going to be
output here now we do have to bring that
in
so let's go up here and let's say import
outlet
which is part of react router dom but
remixes is actually built on top of
react router dom so we're bringing this
in from remix okay so if i go and save
go ahead and save that
we're now seeing the index page again
which is in the the routes index file
now before we get get into routes
there's a couple other things i want to
show you so one if we want to have live
reload
so if i go ahead and just type in hello
here
and then if i do hello one and save
you'll see it's not it's not reloading
automatically so we want to bring in
live reload from remix and what we'll do
is right under the outlet we'll have an
expression and we'll say
where the process dot env dot
node env where the node environment is
equal to
development when that's true then we
want to have our live reload
else then we're just going to say no
all right so now you'll see if i change
that one to a two and save
now it auto reloads if i get rid of it
and save it goes away
now instead of putting all the the
document stuff here like the head body
html and it's right inside the app
component what we're going to do is have
a function called document
and that document is going to take in an
object with children because we want to
be able to wrap this document around
something so it's going to take in
children and we'll also pass in title
and then what i'm going to do is take
everything from within here and cut it
and we want to then return
we're going to return
and then i'm going to paste that in here
now instead of the outlet in the
document we're going to put the the
children okay because whatever we wrap
this around
we want that to output here
all right and then up here we can simply
put the
document
and then we want to have the outlet
all right so if i save that we should
get the same result and we could do for
the title
we could do something like
if title then
title else then
my remix blog
i don't know why i put my
i'm going to change that
okay so we'll save that good
now the next thing i want to do is
create a layout because we might want to
have a we we will want to have
a little bit of navigation
on the page and i could put it up here
like whatever i put in here
is going to be on every route if i go to
this route we're still going to see that
hello so i could do it here but
a nicer way to do this and what they had
before i deleted it was a just a layout
component that we could wrap around the
outlet so let's do that let's create
another function called layout
which is going to take in children
because we want to be able to wrap it
around something
and from here let's return
i'm just going to return
an empty fragment and then we'll have a
nav with the class of
navbar and you're going to want to copy
these classes because
i have a global style sheet that i'm
going to be bringing in as well
so in the nav bar i want to have the the
the logo it's well it's just going to be
text but i want to wrap it in a link
and instead of using an a tag it's going
to be an inner link so we actually want
to use link from remix not from react
router dom but from remix so i'm going
to auto import that
so now links being brought in
so and it's used the same way we just
add a two attribute this is just gonna
go to slash and i'm also gonna give it a
class name of logo
and then here we'll say
remix
okay now we're not gonna see anything
just yet because all we've done is is
created the function but i just want to
finish this up
so in addition to the logo we're going
to have
ewell i'm going to give this a class of
nav
with a list item that's going to have a
link
to
and that's going to be to slash posts
and we'll say posts
and then under the nav we'll just have a
container class
and that's where we want to put the
children
okay so whatever we wrap it around
now we can come up here into our app and
we can just
wrap the outlet
in the layout
okay so we'll save that now we can see
the
the logo and the link which you know
doesn't look too good because we have no
css now i'm going to show you how we can
add some styles but i just want to clear
some things up first so in routes
there's a folder called demos i'm going
to completely delete that
and then
in styles i'm going to delete that demos
the demos folder and then i'm also going
to delete the dark css
and in global css
i have some styles i'm going to paste in
and you can grab this from the the
repository in the description so i'm
just going to paste those in
and we'll save
and then let's go into the routes index
j jsx here and i'm just going to clear
all that up and we just want to create
just a a basic function a react
component that returns jsx and i'm using
this
extension here a lot of you guys
probably use it
this es7 react redux
react native snippets and it just allows
me to generate
react components i like to use just a
regular function with the export at the
bottom which is rfce
okay now i don't want to include i don't
want to import react at the top because
that's not it's no longer needed so with
this component you can just add an
underscore rfc enter and then it gives
you the function without the import and
i'm just going to call this home
okay and then we'll just have an h1 in
here
and we'll just say welcome for now
okay so now we just have the showing now
the styles even though i put the global
styles in they're not showing up because
we haven't put them anywhere right so i
want to show you if we go to the root
jsx
i want to bring in the global style
sheets we'll say import let's say global
styles
url and we're going to import that from
now we can actually use the tilde here
that's just like the the root so we'll
say all right not the root but the app
folder so from there we want to go to uh
where we go styles
styles and then
global.css so we're bringing the file in
now what i could do since i'm in the the
root here and i have access to the head
tags i could just go ahead and put link
in here and set the href
to that global styles url if i save that
you'll see that now the styles take
effect however if i'm in another route
module and i want to load another style
sheet i won't be able to do it this way
so what we can do let's get rid of that
and what we can do is bring in from
remix we can bring in links
and we can put that links element in the
head so i'm going to put it right above
the title
links and then all we have to do from
any route module we can just
export a new function called links i'm
going to use an arrow function
and all this has to return is an array
with an object that has a rel
in this case we want this to be
stylesheet
and then just an href
and we can set that to our global styles
url if i save that now you can see that
styles the styles take effect so i could
put this in any component loading any
style sheet
and then
similar to that we can do the same with
meta tags so in some cases you'll have
meta tags where you're going to want the
same ones on every page so for example
i'll paste in the character set and the
viewport but like keywords and
description you're going to want that to
be different
on you know in every route so we can
bring in meta
which works in a similar way i'm going
to put this
right here we'll just say meta
and then in any route module we can
create
or export a function called meta
and what we want that to do is return an
object with whatever meta tag we want we
could say description
and then we can set it here or i'm just
gonna
create a variable up here
so description and we'll set it to
we'll say a cool
blog
built
with remix
and then we could do keywords so cons
keywords
oops
and set that to we'll just say remix
react
javascript doesn't matter
and then we'll add keywords to the
return here
okay and then that should do it so i'll
save
uh keywords is not defined i don't know
what is up with my typing
okay now if i look in the
um the source code for this if we check
this out we have the viewport and and
and uh was the other one the character
set and then we also have the
description right here you can see the
description and
the keywords so any any meta tags you
want to set on other pages you can do
here which obviously is good for just
seo so now we're going to start to look
at routing so i'm going to close up the
root file for now and right now we just
have the routes folder with this one
index.js and this file isn't going to do
much it's just the home page so i'm just
gonna have an h1 in paragraph in here
you guys can put whatever you want on
this but let's go ahead and create in
routes
a file called posts
dot jsx
okay now the routes these route modules
are just basically component functions
so we're going to just generate a
function here
and i'm going to call this posts
and for now let's just put an h1 we'll
say this is the
post
route
and then
i'm just going to go to slash post we
already have a link here
and it just works so similar to like how
next js works it's just it's it's file
system
based routing so you don't have to go
and manually create your routes with
react router dom although you can do
that because that's included with remix
you can
explicitly set your routes or you can
just put put pages right in and they
just work
now you do also have nested routing
which is pretty cool so in the routes
folder i'm going to create another
folder called posts so i'm matching the
name of this this post file here and
then i can nest routes within this file
so i do that with the outlet from
well from remix but also from react
router dom so let's import the
outlet
from remix
and then down here under the h1 i'm
gonna put the outlet
okay so now if i create in my post
folder let's create a file called
new.jsx
and let's just create a function here
we'll call it
new post and then we'll have an h1 in
here and we'll say new post
and i'll save that and then let's go
over to the browser
and let's go to post slash new
and it shows the content that's in new
post but it's still it still also shows
the content that's in the main post file
because i'm nesting this new route into
this post route okay so anything i
create in this post folder it'll show
but it'll also show what's in the parent
route which is pretty cool you could
have like a post
only navigation that you you only want
to show on the post routes
now
in in our situation for this particular
app we don't need to put anything else
in the main on the parent posts so i'm
just going to leave it as an outlet and
we'll just use a fragment here
but we'll keep it this way just so if
you want to add something here you can
and it will show on all posts
now since i do want to have a just slash
posts
what we can do is in the post folder
just create an index.js
sorry index.jsx or tsx if you're using
typescript and then we'll go ahead and
create a function
that didn't work for some reason and
we'll create a function called
let's call this we'll call it post items
because that's what we're going to do
here is list post items
and then we'll have an h1 and we'll just
say
posts
so now if we come over here and reload
we're at slash posts we should just see
posts
and we also have the new
post slash new and then there's one
other route that i'm going to going to
want to add and that's to show the
single post now with that the url that i
want is post slash and then whatever
some kind of id like this
and i'll we'll go over error handling in
a bit too but it's going to be just some
id so this is going to be dynamic so the
way that we can handle that is by
creating a new file in the post folder
and we're going to use a money sign
because this is basically like a dynamic
like a variable route and then we want
to call it whatever we want to name that
param in this case it's going to be post
id
dot jsx so money sign post id jsx
and then we're going to create
a function and we'll just call this post
and then down here we'll just say post
actually make this an h1 and say post
so now if i go to post slash and then
whatever a bunch of numbers it shows me
this this content
now if i want to grab this which i'm
going to want to later so we can get a
single post from the database we can
just use the use params hook okay which
is the same as in with react router dom
so use params i'm going to bring that in
from remix
and then we just
above the return create params and set
that to use params
and then down here if i wanted to output
that i could just do params dot and then
post id and the reason it's post id is
because that's what i call the name of
the file that's what i call the param so
now we'll get post slash
whatever i put here if i put one we get
post one alright so at least now we have
our routes created they don't do much
but we haven't created and now we're
going to look at one of the coolest
features about remix which are loaders
so i'm going to go ahead and just keep
open the the posts index
so it's the po in the post folder the
index.js
and we want to use what's called a
loader and and it's used to do that it's
used to load data and that could be from
a database like ultimately we're gonna
do but it could also be from an api it
could be anything really any anything
that you want to load when the page
loads so up here we want to import a
hook called use
loader data
and that's going to be from remix
all right so we have the hook and then
to create a loader we just export a
function
called loader
and then this has to return something so
for now i'm just going to return an
empty object and i just want to do a
console log here i'll just console.log
one two three and you'll notice that it
logs down here and the reason for that
it doesn't log in the browser console it
logs here because loader runs on the
server okay so you can do your
server-side stuff right in this function
and the idea is you you do your server
stuff you get your data and then you can
use this hook down here in your function
to access it on the client so ultimately
like i said we're going to use a
database we're going to use prisma with
sqlite but just for now
i'm going to create uh just some
hard-coded data so this will be an
object and let's do posts
with an array of objects that'll have an
id
we'll do an id a title
say post one
and we'll do a body
for body we'll say
this is a
test post and then i'm just going to
copy this down we'll do three of them
and then we'll just change the titles
here so this will be two
three and then we'll change the id so 2
3 and then i'm just going to go ahead
and return
this data
now like i said we access this data now
with this use loader data hook so we
come down here above the return and we
can say const data
set that to
use loader data and now we'll come down
actually we can destructure this we can
just take the posts
out of the data
and then we should be able to take our
posts
map through them just like any react
component so we'll say for each post
we want to then let's render a list yeah
let's wrap this actually
in a ul we'll say ul will give us a
class of post dash list because we do
have some classes we can use to make
this look decent
and we'll take this
and we'll put this in here
okay and then we want to map through
each one and render a list item and this
has to have a unique key so the key will
set to the post dot id
and then in here we'll do uh let's have
a link
we need to bring that in from remix so
the link will say two and for now we'll
do post dot id
and i'll put an h3 in here this will be
the
post dot
title
and then under that we'll have uh we're
gonna have the date the created at but
we don't have that yet because it's just
dummy data so let's just save that as is
and you can see we get our post one two
three and the styling is just from the
the global style sheet
all right so i mean and right now
obviously it's just hard coded data but
it can be from a database later on we're
gonna pull it from
uh
from a mysql not mysql and sqlite
database using prisma
so i just want to kind of format this a
little better this h1 we're going to
have a div up here with the class of
page dash header
and the div with this wrapping div we
can just
use a
fragment and then i'm going to move this
h1 in here and then underneath that
we'll have a link
and this is going to go to the new page
so we'll say two
slash post slash new
and i'm also going to just give this a
class name of btn
and then here we'll say new post so
we'll save that and then we have a nice
little post page so loaders are pretty
powerful because they they're they run
server side so we can do a lot more
right from you know the same file that
we have our output in which is i think
really valuable
now there's also something called
actions where usually you have a form
say we have a react app or angular
whatever you have a form you have an on
submit function that actually stops the
form from
you know naturally submitting to a file
in the browser to catch it and then do
something in javascript well with remix
we have something called actions where
we can we can really submit the form so
we're going to have a form we can
actually submit it to
the server without having to add an on
click and we can just we can catch it in
something called an action function so
we're going to go to new
jsx to this uh to this new post and
let's first just build out the form it's
not going to be too bad it's just two
fields a title and a body so we'll go
ahead and let's add a page
header here
so page header we're going to move this
up here and then we're just going to
have a back button or back link so i'm
going to import this from remix
and this is going to go to just slash
posts
and we'll give it a class name of btn
and btn reverse
and it's just going to say back
so if we look at that now we just have
this back
button here
and then down here under the page header
let's create we'll say page dash content
and this is where we're going to have
our form now this action we could use
this but since we're submitting to the
same page we don't need the action but
we also don't need an on submit in fact
we need to make sure that we set the
method here to post because we want to
make a post request
and this might if you know if you if you
used to be a php developer like me this
looks very you know it's very familiar
so or if you are a php developer so
let's create a form control
class here and then we're going to have
a label this is going to be for the
title
title and then underneath that we'll
have an input
and
it's going to be type text and then
we're going to use a name when's the
last time you actually needed a name
so name is going to be title
because that's how we can access it in
the action
and then it's going to have let's do an
id
of title as well
and then we're just going to have the
body so i'll just uh we'll just copy
this down and we'll change
this
to body and
we'll say post body
we'll change this
and the title i mean the id
to body actually you know what this i
want this to be a text area
so we'll say text area
okay
so if i save that we should see the two
fields now we just need a button so
let's do button we'll give it a class of
btn and btn-block
and
yeah and here we'll just say add
post
and we'll just make sure we add a type
here of submit
because we want to make sure this
submits the form
okay
now to you to create an action very
simple just like a loader we just create
a function an exported function so we
want to do explore const and call it
action
all right and this has to return
something so we're going to actually
bring in
redirect
from remix
so lots of little tools to help you here
so we want to return redirect and we're
going to redirect to let's just say
slash posts
okay now i just want to show you
if i console.log here we'll do one two
three again
and then i come over here and i submit
this form
we should see down here in the server
console you should see one two three
all right so we're able to submit to the
server and we can do whatever we want in
here now action it should take in or an
object with a request
so that's the server request
or the http request and the way that we
get these fields so obviously we're
going to need to get this data right
from the form we simply create a form
variable and we can set that to a weight
because this is going to return a
promise so we want to await request
actually this should be asynchronous
so async and then request dot form data
and if you if we just want to see what
that looks like we could console log it
so if we submit that and then we look
down here you'll see it's a remix form
data object and it has these url search
params with title and body now obviously
we want each value so what we'll do is
go up here we'll say const title
uh we'll say title and the way that we
can get that is with the get method so
form dot get and we want to get the
title and we'll do the same
with the body
all right and then um what we'll do is
oops we'll create
an object called fields and we'll have
we'll say title
body
and then we'll just console.log here
uh we'll console log those fields
okay so now if we come over here and we
submit and we add post if we look down
here we should see right here an object
with the title and the body
all right so i mean all we have to do
now we'll just put a
i'll just put a to-do here and say
submit to
database and we'll do that in a little
bit before we do i want to show you how
we can handle errors because remix is
actually really good with
errors
using the this error boundary so if we
look right here in the docs it says
remix sets a new precedent in error
handling
and it automatically catches most errors
in your code so this is really helpful
and it actually does a lot for us in
terms of of throwing errors
and
and catching them and all we can all we
have to do is add an error boundary we
can do that within the route module we
can also add a root error boundary so
first i'll show you how we can do it
here
and let's let's throw an error on
purpose so on the new on the form page
here on the new dot jsx it has to return
something so i'm just going to comment
out the return
and then submit and we get this weird
cannot read property route of undefined
in server.js like who knows what the
hell that means
so let's create down here at the bottom
we'll create
an error boundary so we can do that
by actually want to go above the export
and let's say export
function
error boundary
okay and then this is going to take in
an object with an error
and from this we could console.log the
error so we have it in the console but
then we want to return what we want on
the page
so that's going to be in this case we'll
just do a
div
and it's not working for that
so a div and then we'll do
an h1 and we'll say error
and then underneath that we'll do uh
we'll do a pre tag and then we'll have
that error object has a message on it so
we'll do error.message
so that should work if we come back here
and we try to submit again with that
with nothing being returned
now you see we get error you define an
action for route
but didn't
return anything from your action
actually let's put that in a
paragraph yeah it's better
okay so now we have a nice clear error
message
now
like the documents documentation said
you can h",,
",,
ave a root error boundary and,,,
you can have both but what i'm going to,,,
do is just take this,,,
out of there and put it into the root,,,
jsx so we'll open that up i'll go down,,,
to the bottom of that page,,,
and paste that in,,,
now if i try this again,,,
i just want to show you if i try this,,,
again,,,
it does show me the error but notice,,,
the the whole layout's gone,,,
because we're just from the root we just,,,
have a div and this and that what what,,,
we can do though is change this to,,,
our document,,,
and then have our layout,,,
around it all right so we'll just take,,,
this,,,
move that into our layout,,,
and now it should,,,
if we get an error now,,,
now we have the layout around it and,,,
that's going to work for all routes and,,,
of course you could put,,,
you could put the error,,,
boundary if you wanted to do something,,,
specific on a specific row because it's,,,
going to look for the closest error,,,
boundary,,,
all right so now that we've talked about,,,
actions and loaders and,,,
you know routes and all that i want to,,,
now get into the the database stuff so,,,
we're going to be using something called,,,
prisma and i'll just do a kind of a,,,
quick intro,,,
to that for those of you that have never,,,
used it so,,,
it's it's an orm or an object relational,,,
mapper and it's basically you can think,,,
of it as an abstract or a layer that,,,
sits over your database whether that's,,,
sql lite like we're going to use or,,,
postgres or whatever and it gives you an,,,
easy syntax to use to make queries to,,,
that database so it's it's like mongoose,,,
if you if you guys have used mongodb,,,
with mongoose it makes it easier you,,,
create your model and then you can do a,,,
syntax like this so this is just prisma,,,
dot and then whatever the table,,,
dot create in this case and then just,,,
pass in an object of data so really,,,
really nice syntax easy to use and if,,,
you want to switch from sqlite to,,,
something like postgres it you just,,,
change the config everything else stays,,,
the same so really really cool and goes,,,
really well with this type of,,,
with this type of framework,,,
so let's go ahead and,,,
install a couple things i'm going to,,,
close these files up,,,
and,,,
i'm gonna just stop this,,,
and we want to npm install prisma,,,
and then we also want the client so it's,,,
at prisma slash,,,
client so we want to get those installed,,,
then we want to go ahead and clear this,,,
up and run npx,,,
prisma,,,
and we want to run init and we want to,,,
provide a data source provider so we're,,,
going to say dash dash data source,,,
dash provider and like i said we're,,,
going to be using,,,
sqlite so we just want to do space and,,,
then sqlite and that should go ahead and,,,
create a schema,,,
so over here now in our file structure,,,
we have a folder called prisma and we,,,
have the schema.prisma,,,
file,,,
so this file is where we add our models,,,
all right so whatever basically whatever,,,
like tables you're going to have you're,,,
going to put here,,,
so we're just going to have a post table,,,
i'm most likely going to do a video,,,
where we add authentication to this then,,,
we'll add a users table our users model,,,
but for now we're just going to do model,,,
post,,,
and we want to set a few fields here so,,,
let's do id,,,
we're going to set that to,,,
a string,,,
so that's the type and then,,,
we can do at id,,,
which i believe makes this the like the,,,
primary key and we can also set a,,,
default so we're going to say default,,,
and pass in here uuid parentheses that's,,,
going to create an id automatically for,,,
us in the format of a uuid,,,
and then let's do title,,,
so title will be,,,
string,,,
let's just,,,
yeah so title string we don't need a,,,
default value and then body,,,
will be a string,,,
and then we're also going to do created,,,
at,,,
so created at is going to be date,,,
date time,,,
and for created at,,,
i'm going to want the,,,
the current date date and time for the,,,
default so let's say at default and then,,,
we can pass in here now with parentheses,,,
and then finally i want an updated at,,,
and that's also going to be date,,,
time,,,
and we can use this at,,,
updated at and what that'll do is it'll,,,
it'll add whatever the the date and time,,,
is when we update and that um you know a,,,
post in the database,,,
so,,,
we'll go ahead and save that,,,
and then we want to push that,,,
onto our database so down here in the,,,
console,,,
let's clear this up and i believe it's,,,
npx,,,
prisma db push,,,
okay so now it says,,,
sqli database dev db created,,,
all right and if we look in our prisma,,,
folder now we have this dev.db,,,
and i have an sqlite extension,,,
so i forget how to use it though,,,
oh yeah i have it right here so if you,,,
have it installed just search for sqlite,,,
in your extensions install it and you,,,
can search for it here and then just,,,
open database,,,
dev.db and it should show up,,,
i thought it showed up like yeah down,,,
here my my microphone's in my way so,,,
right here dev db and if we look we now,,,
have a post table with,,,
uh you know with those those uh those,,,
values not values those fields,,,
all right so,,,
now,,,
i want to create a database seeder so,,,
that we can get some some posts in there,,,
so to do that,,,
we're going to create a file in in the,,,
whoops,,,
let's close these up we're going to,,,
create a file in the prisma folder,,,
called seed.js,,,
and,,,
let's see actually the dev.db you should,,,
add that to your git ignore so i'm just,,,
going to do that real quick so let's say,,,
prisma,,,
so we'll do slash prisma slash,,,
dev dot db just add that so it doesn't,,,
get added to your repo,,,
all right and then in the seed file here,,,
we're going to bring in since this is,,,
run on the server and i'm not using,,,
typescript we're going to use the common,,,
js syntax,,,
so let's say prisma,,,
client and that's going to be from,,,
at,,,
prismaclient so we want to bring that in,,,
let's close that up,,,
and then let's say constdb,,,
set that to new,,,
prismaclient,,,
and then we're going to have a simple,,,
function,,,
called get posts,,,
and all this is going to do is return,,,
an array of a couple of like four posts,,,
let me just grab those real quick,,,
because we just want to we want to get,,,
these posts in the database so this,,,
function is just going to return them,,,
and you can either grab these from the,,,
repository file or you can just copy,,,
just some posts with a title and body,,,
and then what we'll do is create an,,,
asynchronous function,,,
called seed,,,
oops,,,
and we're going to await,,,
promise dot all,,,
and in here we're going to run we're,,,
going to have get posts,,,
and then we want to do a dot map,,,
and say for each post,,,
we want to put put them in the database,,,
so we want to return here let's say db,,,
that's our database and then post is our,,,
model or our table,,,
and then we want to create,,,
and we're going to pass in an object,,,
and set data to the post so we're just,,,
mapping through looping through our,,,
posts and,,,
you know putting putting each one in the,,,
database,,,
and then we just want to run that seed,,,
function here,,,
all right so now we can actually run,,,
this if we come down here we can say,,,
node,,,
slash,,,
seed,,,
and that should have ran the file and,,,
now if we look at actually we don't even,,,
need that sqlite thing because prisma,,,
has a tool,,,
i think we can do npx,,,
prisma,,,
studio,,,
and on localhost 555 you'll see here we,,,
have under all models we have posts,,,
and there we go so we have our four,,,
posts in there,,,
yeah so prisma is really cool i i plan,,,
on doing a video just all on prisma,,,
but let's go ahead and stop that,,,
whoops,,,
did our server stop,,,
i think it did,,,
okay just make sure this is running,,,
all right now,,,
that seed we can also add a prisma,,,
script in our package.json,,,
so in here we can go above the scripts,,,
and do prisma,,,
and we'll do right here we'll say seed,,,
and then,,,
we want to run node,,,
prisma,,,
slash seed,,,
and just make sure we put a comma here,,,
all right so we're almost ready to use,,,
our database there's one more file that,,,
we need to create so that's going to go,,,
in actually we're going to create inside,,,
of our app folder a folder called utils,,,
utile,,,
i don't know what's wrong with my typing,,,
today so in utils we're going to create,,,
a file called,,,
db.server and we're actually going to,,,
use typescript for this,,,
so we're going to do a dot ts extension,,,
and adding this this dot server,,,
we don't need this but what this does is,,,
it enforces,,,
remix to run this server side okay so,,,
that's why we did the dot server,,,
and then here since we use typescript we,,,
can still use the import syntax and,,,
let's say prismaclient i'm going to,,,
bring that in,,,
then we're going to,,,
um,,,
declare we're actually going to declare,,,
a global scope so this is typescript so,,,
we're going to declare our global scope,,,
and then,,,
actually i think we need to,,,
this is from the documentation i believe,,,
we have to,,,
set that,,,
and then set it to a type of,,,
prismaclient and then in the global,,,
scope,,,
we do var and then double underscore,,,
db,,,
which the type we're going to set to,,,
prisma client or undefined,,,
and then we want to check to see our,,,
environment and and the reason we're,,,
creating this file,,,
is because in development,,,
we don't want to restart the server with,,,
every change but we also don't want to,,,
create a new connection with every,,,
change so this is going to stop it from,,,
doing that,,,
so we're going to check the process,,,
dot,,,
env dot node,,,
env we'll say if that is equal to,,,
production,,,
then we're simply going to say db,,,
set that to a new,,,
prisma client,,,
and then db dot and then we can do money,,,
sign connect so that will connect,,,
else so if we're in development then,,,
we're going to say if,,,
not,,,
and then the global so that global,,,
namespace dot double underscore db,,,
so we'll say if not then,,,
we want to then connect with that so,,,
global dot double underscore db,,,
set that to new,,,
prismaclient,,,
and then,,,
global,,,
dot double underscore db and we want to,,,
then dot money sign,,,
connect,,,
and then right under that if statement,,,
we're just going to set db,,,
to,,,
that global dot double underscore db,,,
okay and then we just want to export,,,
that db object,,,
so now this db this will we can bring,,,
this file in to work into any route,,,
where we want to use the database and we,,,
can then use that db variable to create,,,
or read or whatever it is we want to do,,,
so the first thing let's go to our posts,,,
index,,,
so all that database stuff should be all,,,
set i know that was kind of,,,
kind of weird um but let's go into,,,
routes and then let's go into posts,,,
and then index.js where we just have our,,,
dummy data,,,
and then this is where um,,,
you know we're going to want to get the,,,
post from the database so let's import,,,
db,,,
and that's going to be from,,,
um,,,
we actually will use the tilde so from,,,
the app folder and then utils and then,,,
db dot,,,
server we just save that make sure we,,,
get no weird errors,,,
all right so we're able to bring that in,,,
now instead of just defining the post,,,
like we did here,,,
actually we're just going to replace,,,
this array,,,
so we'll get rid of that and instead,,,
we're going to await,,,
because this is asynchronous so we need,,,
to set this function this loader,,,
to async,,,
and then we're going to await,,,
db.post.find,,,
many okay because we want to find many,,,
we don't have to put anything in here,,,
but i just want to show you we can add,,,
some options for instance we can say,,,
take,,,
take 20 so it'll just basically fetch 20,,,
posts,,,
we can select specific fields if we want,,,
oops,,,
so let's say id,,,
TRUE,,,
title,,,
true and let's say created at,,,
true we don't need the body because,,,
remember this is just for this page for,,,
the list we're not going to show the,,,
body here,,,
so we can do that and then we can also,,,
order we can say order by,,,
and we'll order by,,,
created at,,,
and we'll order it,,,
descending,,,
okay so now,,,
we're setting,,,
we're getting it from the database,,,
putting it in in this data.posts and,,,
then we're still getting it down here so,,,
if i save this,,,
there we go now we're actually pulling,,,
the data from the database,,,
now i do want to just add the the date,,,
underneath as well so let's go down here,,,
and where we have the,,,
the title we'll go right underneath that,,,
and let's open up an expression here and,,,
we'll say new date just to format this,,,
and we'll pass in post dot created at,,,
and then we'll add on to this,,,
dot 2 locale,,,
2 locale string,,,
so if i save that now we can see the,,,
dates,,,
all right cool,,,
now let's work on creating a new post so,,,
we're actually done with this we can,,,
close that up let's go into the new jsx,,,
and right now we're just submitting,,,
we're able to,,,
you know get the data but we're not,,,
doing anything with it so let's bring in,,,
our db file,,,
so we want to import that from,,,
utils,,,
slash db server,,,
and then,,,
let's um,,,
i never uncommented that so right here,,,
we want to add it to the database and,,,
i'm not this we're not doing like a ton,,,
of error checking and stuff like that i,,,
might add that later on but,,,
this is getting kind of long so i just,,,
want to,,,
get our crud functionality,,,
or at least our crd functionality we,,,
probably won't do the updating in this,,,
video,,,
but let's say const post and we'll set,,,
this to,,,
a weight db dot,,,
post dot,,,
create,,,
and then i'm going to create just like,,,
we did in the seed we're just going to,,,
set data,,,
and we're going to set that to fields,,,
okay,,,
title and body the created that and all,,,
that that'll get set on its own,,,
and then when we redirect instead of,,,
redirecting to posts let's redirect to,,,
post slash,,,
and we'll actually use a template string,,,
here,,,
so that we can go to post slash and then,,,
post dot id,,,
so let's go to new post,,,
okay we'll add post,,,
and there we go it brings us to,,,
the post page which,,,
all we all we're doing there is just,,,
showing the the id so we'll we'll get to,,,
that,,,
what we're going to want to do is fetch,,,
that i fetch the single post but now at,,,
least we can see it here,,,
we have,,,
can go to each one,,,
so now let's take care of the single,,,
page,,,
so we'll close that up we'll go to,,,
our money sign post id because that's,,,
what's what we're seeing here,,,
and let's go ahead,,,
and bring in from remix we're going to,,,
want to use a loader so let's say use,,,
loader data,,,
um and we don't even need to use params,,,
because the loader we can get the params,,,
from the loader so we don't need this,,,
just get rid of this for now,,,
and then let's,,,
export,,,
function called loader,,,
so we want that to be an async,,,
function,,,
all right and then all we want to get,,,
from here we're going to destructure,,,
this,,,
property and get the params,,,
for this object and then let's say const,,,
post,,,
we'll set that to a weight,,,
and then we need our db file so let's be,,,
sure to bring that in,,,
so that's going to be from,,,
utils slash,,,
db server and then let's await,,,
db.post,,,
dot and we're going to use find unique,,,
so find unique and we're going to pass,,,
in here an object,,,
and say where,,,
and we'll say where the id,,,
let's say where the id is equal to,,,
params dot and then post,,,
id,,,
okay so whatever the url is,,,
and then,,,
here we'll say if i guess we could have,,,
done this in the other one too we'll say,,,
if not post then,,,
we'll throw a new error,,,
say post,,,
not found,,,
and then,,,
otherwise we'll set kant's data,,,
and we'll set that to we'll have post in,,,
there so we can,,,
get that and we'll return data,,,
so then down here,,,
we can use that hook we'll say const,,,
data actually we'll destructure that,,,
we'll get the post,,,
from use loader data,,,
and then this h1 i should be able to,,,
output the post dot title,,,
and there we go,,,
so i'm just gonna,,,
add the page header,,,
here and then we'll move this h1,,,
into here and then let's just do a back,,,
button or back link so we'll do link,,,
bring it in from remix,,,
to,,,
let's we'll say two slash posts,,,
and we'll give it a class name of btn,,,
and btn reverse,,,
and say back,,,
okay and then for the body,,,
we'll go underneath the page header,,,
let's say page dash,,,
content,,,
and this is where we want to put the,,,
body so we'll just do post dot,,,
body,,,
all right cool now let's do the delete,,,
so i want to have a delete button so on,,,
this this post id page what we're going,,,
to do is add under the page content,,,
we'll do page dash,,,
footer,,,
now,,,
this is a little weird we could add a,,,
delete event,,,
but we can also just,,,
submit a form,,,
and just add a hidden field letting,,,
remix know that it's a delete request,,,
because,,,
i mean normally you can only do a post,,,
or get with a form so let's go ahead and,,,
add a form and we're going to specify,,,
here that we want the method to be um to,,,
be a post request because it's it's,,,
going to actually get submitted as a,,,
post request but then we just add in,,,
the hell's that we just add an input,,,
here and it's going to be the type of,,,
hidden,,,
and then the name we want to set that to,,,
underscore method,,,
and then the value,,,
we're going to set to delete so that's,,,
going to let the server know that we,,,
want to make this a delete request and,,,
then we just want to have a button,,,
i'm going to give it a class of btn and,,,
btn-delete,,,
and we'll say delete let's go ahead and,,,
save that so now we have a delete button,,,
here,,,
and then the way that we handle this is,,,
with an action,,,
so let's go up,,,
here we'll go under the loader,,,
and let's say export,,,
const,,,
action uh we're gonna set this to a sync,,,
okay and then we're gonna do const form,,,
await,,,
request,,,
dot,,,
form data,,,
just like we did,,,
in the in the new form,,,
now to check the method what we can do,,,
is say if form dot get,,,
and then we can,,,
check underscore method so a form dot,,,
get underscore method is equal to,,,
delete,,,
then we want to,,,
delete the the post so let's do const,,,
actually we can just copy this right,,,
here,,,
so we'll go ahead and just copy that,,,
and put that right in here in the,,,
conditional,,,
and then underneath that,,,
we'll say a,,,
weight db dot,,,
post dot,,,
delete,,,
and this just takes in an object with a,,,
where clause so we'll say where,,,
and then we'll say where id is equal to,,,
the params,,,
dot post id,,,
now params we need to bring in up here,,,
in the action just like we did with the,,,
loader so just pass that in params,,,
actually we need requests too so let's,,,
say request,,,
and params because we use requests right,,,
here which i misspelled,,,
all right so we're deleting where the,,,
post id and then after that we'll go,,,
ahead and just uh redirect so we'll,,,
return,,,
redirect,,,
which is brought in from remix,,,
that i bring it in,,,
yeah,,,
so return redirect and we'll go to,,,
slash pose,,,
all right so let's come over here let's,,,
hit delete and now the test post is gone,,,
awesome,,,
go back there we go we get that post,,,
there delete and now it's gone,,,
all right so,,,
i mean this we went over a lot here and,,,
you,,,
i hope that you can see the the value in,,,
this framework,,,
rather than having a completely separate,,,
back end you know express server or,,,
whatever and then having a single page,,,
application you have,,,
one framework where you can manage,,,
everything and i think it's,,,
i think it's really useful i do and i,,,
think it's the future of react this and,,,
next js i think server side rendering is,,,
definitely the future it's in and it's,,,
funny i've seen a lot of videos and,,,
articles that have really said that,,,
we're kind of going back to the old days,,,
where you know we used php and we,,,
submitted the server we submitted forms,,,
to the actual server and um,,,
you know everything was rendered on the,,,
server so i like it i like the direction,,,
we're headed but that's it guys,,,
hopefully you enjoyed this i will try to,,,
get the the the next video up soon where,,,
we add you uh user authentication to,,,
this so i'll try to get to that soon and,,,
that's it thanks for watching",,,
PtQiiknWUcI,"[Music]
hey what's going on everybody and
welcome to this course where we are
going to be learning how to build out
awesome websites with D jeno from the
ground up so we're going to start as
absolute beginners where I'll first
introduce you to what D Jango is and how
it works and then we'll move on to
building out a basic website where we'll
spin up a server we'll render some
templates and add a database to that and
we'll even learn how to work with that
database so we'll add in things like
authentication and search and we'll
really focus on the core features of
jeno and how things work now in the
second half of this course what I'm
going to do is take the same project and
we're going to start adding features
into it and turning this into a really
cool application so I'm about to demo
this for you in a second but this
project is kind of like a Discord clone
and a search engine for people that want
to study and find other people to study
with now it's not specific for
developers but uh imagine that you want
to uh let's say study D Jango so you can
go ahead and create like a chat room
people can find this chat room and then
join in and communicate with you so with
that being said let me just go ahead and
demo the project and then we'll talk
about the core structure and how things
will continue from here okay so this is
the project that our website will
eventually turn into as we progress
through the course here so if you
actually want to see a live version of
this website go to studyb dodev and you
can check it out and actually see the
site for yourself here so in this
website we have a basic feed here of
different study rooms so we can see this
list right here it kind of looks like a
social networking feed where you just
see post anybody here can create a room
here they can set up a topic here and
they can see their room posted out here
so let's say I go to this website and I
see this room right here and I want to
learn about view here so view is an
awesome front-end framework so I want to
check it out I can see how many people
have joined I can see five people there
and when it was posted so the host here
is prene so I can see his profile so the
host does get credit for sharing the
room I can click on this room and I can
see the conversation so on the right
side I see all the participants here and
I can see the chat room right here so
this is supposed to kind of look like
Discord here so uh it's like a Discord
server where anybody can hop in and they
can just message something and I'll just
say anyone here so I'll ask a question
see if anyone's on and my message
appears right here so it tells me when
it was posted anybody can click on my
account and they can view my profile so
we'll go back to the homepage here and
on the side here we have multiple ways
of searching so we have a search bar
here where I can just say uh C for
example I want to see if any topic or
any room has this topic or uh maybe has
C in the title so if I type that in I
can see C developers right here so I can
clear my search here I can use this
search bar or I can go in here and just
search for all the topics with python
here I can see all the designers and so
on so this is going to filter my rooms
down by the topic and it's also going to
filter down the activity feed so just to
create more engagement on the website I
thought it would be cool to add in this
activity feed here so you see how I just
commented something well I added this in
where we can always see activity based
on certain rooms here so I can see that
Dennis replied to vue.js developers and
here is my message so it creates a
little bit more engagement here so
that's pretty much the application here
so anybody can go and view my my profile
here I can see all of my post here so if
I go to someone else's account I can see
their post we can modify our application
we can go here upload pictures here and
it's I'm a little bit too zoomed in so
that's why it looks like that so we can
edit our account there is authentication
so we can log out here log back in or
register and we are good to go so that's
essentially the site here so we're going
to start from the beginning and this is
what the project will morph into so
we're going to learn a lot throughout
this process let's take a quick look at
some of the things you should understand
before taking this course so the first
thing is is you should have a basic
understanding of the Python syntax so
things like variables if and else
statements functions Loops classes if
you know these things then that's enough
to move on with Jango as far as the
front end you should have a basic
understanding of HTML and CSS we are
going to be working with templates here
so if you don't know HTML at all well
it's going to be pretty difficult here
we won't write too much we are just
going to install a theme but you will
need to understand what's going on in
order to install that theme so those
three things python HTML CSS and you
should be good to go so before we get
started since this video does not have
an official sponsor I guess I'll be the
sponsor here and tell you about my new D
Jango course that recently went public
where I cover jeno from a toz in 19
hours so in this course I go into detail
on a lot more topics I cover certain
topics that we don't address here so if
you want to become a better Jango
developer and enhance your skills go
ahead and check that out there is a
promo code in the video description for
50% off so it's going to be $9.99 and
use a promo code Brad now this course
from the first month that it was
launched on udemy also so I have it on
my own platform and on udem me this was
a top seller immediately so there's a
lot of good reviews on it people really
like this course and are learning a lot
from it so definitely check that out
okay so before we get started I just
want to run through a couple of slides
here get you introduced to what jeno is
and then we'll move on to setting up our
environment so what is D jeno so D jeno
is a python based web framework and it
is a backend framework so it's on the
server side and this just means that we
can use Python to build websites so
python is one of the top programming
languages jeno is one of the top
Frameworks for python is actually the
number one used framework so it's an
absolutely great choice great for
beginners and it makes for building
building websites super fast I
absolutely love it so it is more of a
heavyweight framework so it uses a
batteries included approach and that
means that it really is more opinionated
in how you build out your application
and that's not a bad thing uh we'll get
into that later but with this you get
more packages libraries and modules and
you follow a good design structure where
uh in Python a lightweight framework
might be something like flask and some
people may like it cuz it's not
opinionated but because of that you're
typically installing a lot of packages
yourself if you're newer you may not
follow the best design structure so you
may not have a good I guess framework or
structure in how you're building your
application so the fact that D Jango
really forces you to do things a certain
way I think is a great thing and it does
not mean that you cannot customize it
companies customize this all the time a
lot of big organizations that have great
Engineers completely Bend Jango to their
will and how uh they actually want
things structured so uh if I were to
compare Jango to another framework for
another language I'd probably say it's
more like rails Ruby and rails um with
PHP and larvo it's more like larvel
whereas flask is more like uh Express
for node.js and I'm trying to think of
another one I'll just use that one as a
last reference but it's more lightweight
one you can do whatever you want D Jango
kind of forces you to do things a
certain way but I think that's a great
thing especially if you're newer to web
development so it uses the mvt design
pattern a lot of people may have heard
of MVC model view controller for Jango
it's model view template and we'll get
into that in a
minute so what is a web framework so for
those of you that don't even know what
this is a web framework is simply a
collection of modules packages and
libraries designed to speed up web
development so it's just kind of like a
package if you can think of it in one
way where you're not having to use
Python code to do absolutely everything
it really
preconfigured for one specific purpose
purpose in this case for building
websites so uh I would strongly advise
against you hand coding absolutely
everything by yourself so it's going to
make things a lot easier so backend
Frameworks versus frontend Frameworks uh
I already mentioned lville but on the
left side there we have our backend
Frameworks we have PHP which is the
language larel or larel however you say
that that's the framework for python we
have D Jango there's also other ones for
python obviously I mentioned flask for
node we have Express so you have the
language and the framework now there are
front frontend Frameworks so client side
uh these actually work well with our
backend languages so uh we have react
angler view uh I actually used angler
and view with d Jango so they're not in
competition to each other they handle
different parts front-end Frameworks
handle all the front-end logic typically
uh we would probably build out some kind
of API to connect to one of these and
that's how we would communicate it
doesn't mean that we need a front-end
framework Jango has its own uh
templating engine but if you wanted to
use a frontend framework that would
absolutely work so what can you build
with d jeno so this is one of my
favorite topics here because I like to
just show the companies that use jeno
and let them validate the power of what
jeno can do so if I were to mention a
few things myself I would say an
e-commerce website a social network uh
you can build out an API for a mobile
app now jeno can't actually build a
mobile app for you you can use part of
Jango to build one though so if you want
to provide some API dat
uh you can do it that's a topic for
another day so uh in these companies we
have Pinterest we have Spotify udemy
Dropbox all of these companies should
validate whether Jango is the right
choice for you or if it can do what you
desire it to do so this is pretty much
showing that it can do pretty much
anything doesn't mean that it's always
going to be the best option but it can
do a lot I know Instagram relied heavily
on Jango in the beginning um I'm not
sure what version of it they use or how
much they've customized it but I know a
lot of these comp companies used it at
some point and probably modified it to
whatever they needed now YouTube I can't
really confirm whether YouTube used it
or not and the reason why I put it here
is because I read a lot of articles on
uh YouTube using it a lot of people
saying that they did but I couldn't find
anything that validated it so I put it
here just to say that there's a chance
that they used it but this is something
that you can build with Jango there's no
reason why you couldn't build something
like a YouTube website or a YouTube like
website so building a apis a lot of you
might be wanting to learn D Jango just
to learn how to build out apis and
that's totally fine if you want to build
out a mobile app or use some kind of
front-end framework you need some API
data D Jango makes this absolutely easy
they have something called the D Jango
res framework which is built on top of
jeno and the rest framework helps you
build rest apis or just apis so this
makes this really fast absolutely love
it we'll get into this towards the end
of the series I'm super excited for this
part
so I did want to mention some other
Frameworks before we get started uh just
to kind of let you do your own research
I mentioned flask earlier it's a python
based web web framework it's more
lightweight I would recommend you check
it out I personally think D Jango is
much better I don't see why You' want to
use flask but uh in some cases it could
be useful cherry pie web2 pie and
pyramid I've never used those but I
would say check it out do your research
but I really think the competition here
if there is any is between D Jango and
flask here I wouldn't probably even
mention the other three but still don't
take my word for it do your own research
so the mvt model structure or design
pattern so Jango follows the mvt
structure there's the model view
controller structure which a lot of you
from other Frameworks may be familiar
with uh Jango follows the mvt and the
only difference here is that D Jango
takes care of the controller aspect of
things so for those of you that are
completely new mvt we have model the
data access layer that's your database
that's how we model data this is going
to be your database tables built out in
classes your templates that's your
presentation layer this is what the user
sees that's going to be their page their
web page and then the view is the
business logic so if you were to look at
an example here we have facebook.com and
when someone goes to facebook.com
they're going to be going through some
URLs here we're going to find a URL that
matches some kind of function in the
back end and that's going to be our
views those views right there in the
view layer that's going to go ahead and
get some data from the models and it's
going to render some kind of template to
us and we send that back to the user so
that's the flow here we're requesting
data the views of business logic and we
just get this and send it back to the
user so that's the mvt design pattern
very similar to
MVC okay so let's go ahead and get
started we'll start setting up our
environment and in the video after that
we will start setting up our project
okay so let's first start off with some
helpful resources for this course as you
go along with the tutorial here so the
first thing is is the source code so
that is up on GitHub it's in this link
right here and it will be linked down in
the video description so I would highly
recommend you clone this project check
out the source code and review the code
as you're coding along and look through
areas where you have any questions all
the code here will be what I coded up
throughout the tutorial now uh if you
want to clone it and set it up locally
there will be instructions in the readme
file on how to do that so that way you
can get a feel for the project and use
it maybe Tinker with with the actual
source code and just see how it all
works so after the source code I would
highly recommend you use the D jeno
documentation I will reference this
throughout the tutorial but jeno has
some of the best documentation I've ever
seen and I would highly recommend you
use it now I understand that it could be
intimidating for people uh just to start
with a documentation so that's why
you're watching a tutorial like this so
I can guide you but once you have a
question on maybe how something works or
specifics reference the documentation
please it will help you a lot so let's
go ahead and close that out and let's
talk about my environment setup so I'm
going to be using vs code you can use
whatever text editor you want if you
have atom uh Sublime Text even notepad++
any one of those will work but I like vs
code so if you're using VSS code I want
to show you my setup the theme and some
extensions that I will be using so uh if
you're not using VSS code I still want
you to watch this because I am using
some extensions that are going to change
up how things function so I want to make
sure you see that and understand why
it's happening so uh adom one dark Pro
is the theme I'm using so if you want to
use a theme everybody asked me about it
uh go ahead and use atam 1 dark Pro it's
a really cool theme and for some reason
it's not say here right now but that is
what I'm using so that's the theme and
I'm also using an extension called
prettier so prettier is really cool
because it auto formats my code here so
if I use the prettier code formatter
this right here will basically basically
format my code anytime I save it so if I
write out some HTML code and it's not
perfectly formatted if I hit contrl s or
save you'll see my code just kind of
jump into place so when you see my code
jump like that it's because of prettier
it really helps me it's absolutely
amazing I love it I'm also using
something called Auto rename tag so Auto
rename tag this basically allows me to
rename a opening tag and the closing tag
will also rename so it's Auto renaming
it so if you look at this example right
here uh when this tag gets renamed you
see the closing tag get renamed and it
goes vice versa if you rename the
closing tag so you're not going to see
me edit both HTML tags as I go through
that so that's it I would recommend you
check out the documentation the source
code these are the extensions that I
have if I forget at any point I'll try
to mention those throughout the uh
course and let's go ahead and get on
with installing our project and setting
up our uh python download and Jango in
installation okay so before we get
started here I first want to make sure
that you have python installed on your
computer and if you already have it
installed I also want to make sure that
you have the most upto-date or
compatible version of python in order to
work with jeno here so if you already
have python installed what you could do
is simply go ahead and update it to the
latest version that way once you're
installing D Jango it's going to make
sure that you have the latest versions
of both and those two should be
compatible now if you don't want to
update it maybe you need python in a
specific version or you think it's up to
dat uh just go ahead and go to this link
right here in the D jeno documentation
uh just look up python Jango
compatibility if you can't find this
link and it should show you this section
right here and this simply tells us the
version of jeno that's compatible two
specific versions of python so at this
point in time the latest version of D
Jango is
3.2 and this is compatible with python
3.6 all the way to 3.9 so the these are
the latest versions if you're watching
this video maybe a year or two out you
might want to check this uh maybe just
make sure that you're either in the
latest versions or that whatever you're
using is compatible so I already have
python 3.95 downloaded so I'm good to go
uh but if you're wanting to update or
download for the first time go to
python.org and then go ahead and click
on the downloads link and in here go
ahead and download the installer make
sure you get whatever you need for your
operating system and then go ahead and
click on that installer I'm not going to
do this cuz I already have it but this
should take a minute or two maybe just
to go through and install python or
simply update it so once you have that
complete let's go ahead and move on to
the next step here so my entire project
is going to be on my desktop and I am
using a Windows machine so let's go
ahead and open up our Command Prompt
here so later on I will switch to vs
code but just to get things started I'm
going to use a command prompt and you
can host your project wherever you want
but I'm going to host mine on my desk
desktop I cleared it for everything and
I just want to make sure everything's
here so it's easier so we're on our
desktop and if you just downloaded
python or you want to check the version
go ahead and do that that's going to
tell you the version of python in my
case I have python 3.95 I'm good to go
and let's go ahead and hit exit so at
this point we'll clear that terminal uh
what we could do is go ahead and just
install Jango globally so if I do pip
install Jango this is going to install D
Jango on my computer now I like to use a
virtual environment in theory you don't
actually need one but it's really good
practice to use them it's going to
separate all your installs from your
Global machine or uh any other
environments that you have and that way
there's not going to be any conflict so
uh you can skip this step and go ahead
and install Jango directly but ID
recommend you follow this and we're
going to use uh virtual EnV so we'll do
pip
install
virtual EnV so I always have a hard time
spelling that one for some reason okay
so I already have it installed that
tells me I'm good to go there's also pip
EnV that you can use so this is just a
package that allows us to set up virtual
environments so virtual EnV is installed
and now I can just run the command
virtual EnV and I can call my
environment whatever I want in my case
I'm just going to call it EnV you can
call this my EnV or whatever name you
want and because I'm running this from
my desktop so make sure that wherever
you're running this from you know that
file path go ahead and hit enter and
that's going to create your environment
so this should take a second
so on my desktop I can now see this file
right here or this folder so I'm pretty
zoomed in you should be able to see that
so we have a folder called EnV and
that's our virtual environment we're not
going to open it up we're not going to
deal with it the only thing we're going
to do here is go ahead and activate it
so make sure the file path is there and
on Windows I can just do EnV scripts so
whatever I call the environment scripts
and then we'll just do activate so on a
Mac it might be a little bit different
just look up the difference here it's
not too much um I don't remember exactly
what that was but we just activated our
virtual environment so now we're inside
of here instead of our Global machine
now we know it's activated because we
can see the environment name right there
and we can always deactivate our
environment so we can just do deactivate
like that that's going to turn it off so
now you don't see that right there in
the file path and we can reactivate now
the reason why I show you that is
because I've had people set this process
up and then turn off their computer log
back in and they don't know why J go
where all the commands aren't working
that's because they forgot to turn on
their environment so every time you open
this up you're going to have to turn on
the environment because all the installs
and other packages that we set up will
be in here if you set this up here like
this so now let's go ahead and clear
that so we created the environment it's
active right here make sure you run that
script and let's just do pip install
jeno so that's all we need to do and
this is going to take a second or two
it's going to install Jango for us we
can do this now because we have python
in
installed let's see maybe I need to hit
enter again so that's going to take a
second here so give us some
time okay so we have D Jango installed
and at this point it looks like
everything's successful so if you're
seeing this we're good to go we have D
Jango and at this point I'm just going
to clear this again so we'll do CLS and
I'm going to do django-admin so now that
I installed Jango I have access to this
command if I hit execute or enter I'm
going to see all these commands that I
can now run from
django-admin and in here we're going to
focus on a few here so the main ones
that we're going to see are going to be
make migrations migrate these are
commands that we're going to work with
or used to work with our database we're
going to use run server that's going to
start up our development server and
we're also going to use start project or
start app and start project so we now
have access to this we know D Jango is
installed so let's go ahead and clear
this again and now let's go ahead and
just do
django-admin and we'll do start project
so once we do start project we need to
give our project a name so let's go
ahead and call it study bud you can call
it whatever you want so this is going to
be the project name and what this
command is going to do is it's going to
create my boiler plate files to set up
my Django application so it's going to
give me my core configuration and
basically my project here so once I run
this on my desktop we're going to see
study Bud right here and we can see our
virtual environment so these are the two
things that we created and we're going
to go through the D Jango files in a
second here but at this point if you're
running this from your command prompt
just go ahead and CD into study bud so
CD into your Jango project we'll look at
the files in a second and now let's just
go ahead and run python manage.py
run server so we're going to start up
the D Jango development server and we're
going to take a look at what we
currently have so at this point it looks
like we're good we see this this note
right here that tells us we have
unapplied migrations we'll get to that
once we start working with the database
and we also see that we are currently
running on Port 8000 right here so we
can go ahead and just copy this so on
the command prompt it's a little bit
harder I can highlight that and I
typically have to go to this bar right
here and hit edit and then copy so you
could just write that out manually but
once you have that copied uh you can
just go ahead and open up your browser
and paste that into the browser one
thing I like to do is paste it in and I
also save that as a tab so I can always
hit this shortcut here so I could do
this manually like that or if I open up
a new tab I hit that shortcut and there
we go so I like to save it there so
every time I'm working with it I'm not
having to copy and paste so we just
started up our D Jango server and this
is the project that we currently have so
we actually have something running right
now we have a server on and the boiler
plate configuration that Jango gives us
so if you see this we're good to go so
far and we can move on to the next step
here so at at this point what I'm going
to do is go ahead and actually close
that out so I turned off my server we'll
have to refresh that and everyone can
store their environment in a different
way what I like to do here is take the
virtual environment and drag that into
my D Jango project so I'm going to open
up my text editor so in this case I'm
using VSS code if you're using something
else you will still just use the command
prompt unless it's already built into
the text editor in VSS code it's already
built in so at this point we'll go ahead
and open up the folder we'll go to the
desktop and let's just go ahead and go
to the project files so we see study bud
and we see all our boilerplate files
along with a virtual environment I just
dragged in so I like to have it in here
and if I open up the terminal we could
open it up by just going to terminal
right here and do a new terminal or we
could do a shortcut by just hitting
control and then til it so it's that
weird back tick looking thing on the top
left of your keyboard typically so go
ahead and uh open up your terminal that
way so at this point my virtual
environment is already activated by
default you might have to run EnV
scripts activate in this case the file
path is inside of the project folder so
here we see it and it's activated so
make sure that you do that and that's
all set up so I'll turn on my server
right now again so we'll do Python
manage.py and then run server and if my
face is blocking it we'll uh go ahead
and move that so we just ran run server
and yeah that was all the command so it
just blocked that last part there so we
see these unapplied migrations we're not
worried about those right now it's not
going to give us an error we'll go back
to that server refresh it and we're
still good so let's do a quick breakdown
I'm not going to go into too much detail
in my full Jango course I really try to
break down as much as I can here but
we'll just go over the core Jango files
here so python manage.py or the
manage.py file this is where we execute
our commands from we're not going to
touch this uh that's something that
allows us to execute those commands we
do get a default database with d Jango
so so SQL light is a default database in
production you typically use something
like MySQL postgress you can even use
nosql databases uh with Jango but we're
going to stick with uh the SQL light
database here so we're not going into
the virtual environment here that's our
different file inside of our project
we're going to see some more here so we
have a wsgi file this stands for web
server Gateway interface right here this
is the actual server and then we have a
urls.py file so this is going to be all
the routing the URL routing to our
project so when you go to a specific uh
specific page so if you're going to the
home page or the about page of a website
this is where we configure all the URLs
here so this is going to be just a list
of different URL paths like this so one
would be something like home and then
You' have about and so on so it's just a
python list of URL routes so that's how
that's going to be configured later on
here so I'm just going to go ahead and
get rid of that comment right there so
we'll save that then we also have a asgi
file this is going to be for
asynchronous um I guess asynchronous
calls here we can actually change that
up D Jango does have async support we
won't deal with that and at this point
the main file that we're going to work
with is going to be settings.py and
urls.py so settings.py is like our core
project configuration this is like the
command center to our entire project if
we go through it I'm not going to go to
every single item but here we have
things like all the URLs that are
allowed to go to this website or to
point to it we see all installed apps
which we're going to get to we see all
middleware configuration templates
database configuration for example we
see the database and this is pointing to
the base directory which is the root
directory right here and it's pointing
to the SQL light database so this is how
we can actually see how it's connecting
to everything so we have templates
databases URLs and everything like that
inside of our application along with
step file
configuration so think of settings. Pui
as the core project
configuration okay so now we actually
want to work on rendering some things
out and changing that default template
that you saw where we're just getting
that boilerplate file in Jango once we
see our server so in D Jango we are
going to work with something called apps
here so we already see default apps
configured there are apps that handle
different parts of our application
things that handle uh sessions in our
inside of our application user manag
agement and so on and basically apps are
little components of our website they
handle different parts of a website now
imagine it this way so if you had
something like facebook.com imagine that
was built by or built with using D Jango
uh you would have an app for handing
handling all your users then you can
have an app for handling uh all the
groups inside of Facebook you can have
an app for handling all user post so
these are just broken down into
different parts now the application that
we're going to have here is is not going
to be that big so we're just going to
stick to one app and this app is where
we're going to configure all of our
models which is our database all the URL
routing and all the views that are going
to handle uh basically the business
logic of our application so I'm done
talking just wanted to give you that
overview let's go ahead and move on so
in order to create our first app here
we're going to go ahead and uh you could
open up another command prompt or
another terminal if you're using the
command prompt or you could just go
ahead and hit plus here that way we're
not turning off our server
and we're just going to open up a new
terminal and then run a command here so
we're just going to do
python manage.py start app so just like
the start project command we can now Run
start app and this is going to be able
to create an app for us and I'm going to
call this base it's going to be like our
base application so we're just going to
hit enter and we're going to see a
folder get generated in here so at this
point the Jango project doesn't actually
know about this app yet so we're going
to have to connect it all it is is a
folder inside of our Jango project so
inside of Bas we see our views and this
is basically what happens when someone
goes to a specific URL these are going
to be functions or classes and these are
going to fire off things like uh any
kind of queries to the database any
templates that we need to render this is
what's going to be called when someone
goes to a specific URL so those are
going to be our views we have our
models.py file this is where we're going
to configure the database and then
different parts like",,
",,
 our admin panel and,,,
core app configuration so let's go ahead,,,
and go back to the main project file so,,,
study button here and let's go back into,,,
settings.py so we need to let this,,,
project know about this new app that we,,,
just added so inside of installed apps,,,
what we could do is we could just go,,,
ahead and add in base like that and it,,,
will know about this folder here now,,,
what I like to do is I like to specify,,,
the direct file path to configure it to,,,
the app so what I'm going to do is go,,,
into base we'll go into Apps here and,,,
this is going into the base folder so,,,
pay attention to the file structure,,,
we're going into the apps. py file and,,,
we're going to the base config class so,,,
this is going to connect it to the app,,,
directly so we're just going to go ahead,,,
and do dot base config and now this,,,
project right here knows about this new,,,
app that we just added so I'll just go,,,
ahead and install some defaults that vs,,,
code wants me to install run that,,,
installation we'll close that out and,,,
there we go so now Jango knows about our,,,
app so let's talk about our URL routing,,,
and our views so typically all of our,,,
views are going to be handled inside of,,,
the views.py file from that app that we,,,
created so I want to show you a quick,,,
shortcut because I want to show you how,,,
this logic works so let's go ahead and,,,
go into urls.py so this is our core URLs,,,
file now we can have multiple URLs files,,,
here uh we're going to actually use just,,,
two here we're going to have a root URLs,,,
file and then one for our specific app,,,
so to create a view we're going to use,,,
function based views here so we're going,,,
to create a function and we're going to,,,
call this home and let's go ahead and,,,
pass in the request object so the,,,
request object is going to be the HTTP,,,
object this is going to tell us what,,,
kind of request method is sent what kind,,,
of data is being passed in what's the,,,
user sending to the backend here so we,,,
have a request object which we'll print,,,
out and show you later and then what we,,,
need to do is simply return something at,,,
this point I'm just going to return back,,,
a simple HTTP response we're not,,,
actually going to render a template yet,,,
so we'll just do from Django HTTP import,,,
HTTP response that's a capital h and a,,,
capital R so we're just going to return,,,
back a simple response here so we're,,,
just going to go ahead and say home page,,,
so it's just going to be a string that,,,
we're going to render out and now we're,,,
going into our URLs and we're going to,,,
say when someone goes to the homepage so,,,
we're going to set a path here so that's,,,
imported right here we're going to set a,,,
path here,,,
and then the homepage is going to be the,,,
root domain you can see a path right,,,
here we have an admin file we're not,,,
going to work with that yet so when,,,
someone goes to the homepage which is an,,,
empty string so that means that that's,,,
just a core URL we're going to send that,,,
user to home so we're going to trigger,,,
this function and that's it so we're,,,
just going to tell it which function,,,
we're going to trigger and we're going,,,
to return back this HTTP response so,,,
we'll go ahead and save that and let's,,,
open up our website so now when I,,,
refresh this we don't have the that,,,
default we see the homepage so that's a,,,
simple HTTP response right here so we'll,,,
zoom in a little bit and there we go now,,,
I want to show you one more page so,,,
we'll create another,,,
function typically we won't create our,,,
views here I'm just doing this for,,,
practice and uh let's just say let's see,,,
what's another route we're going to do,,,
we're going to do rooms so our website,,,
is going to have rooms so we're going to,,,
have rooms for different conversations,,,
we're going to pass in the request,,,
object and this is going to return a,,,
specific page for a room so we'll just,,,
go ahead and do return and we can pass,,,
in HTTP response and we'll just say room,,,
like that now in order to specify the,,,
path we would specify it like that set,,,
the route so we're going to have a few,,,
parameters this one is going to be the,,,
route that we're going to so we'll just,,,
do room forward slash and then the,,,
function that we want to call so in this,,,
case because we're using function based,,,
views it's just going to be a function,,,
we'll throw in the room function now if,,,
we go to this route,,,
you can guess it it's just going to,,,
return back that call so we can go to,,,
forro and I accidentally added in an,,,
extra parameter and there we go so we,,,
have a room and we have a homepage so,,,
views Trigger or URLs trigger views and,,,
that's what the user gets back in return,,,
that's going to be an HTTP response,,,
that's going to be a template or when,,,
we're setting up our API it's going to,,,
be a Json response so this isn't the,,,
best practice if we create a really big,,,
project it would be really messy to have,,,
all our views here and our URL patterns,,,
because there's going to be a lot of uh,,,
a lot of logic in these views there's,,,
going to be a lot of functionality and,,,
this is going to get really messy and,,,
this is why Jango creates apps for us,,,
and they give us a structure to separate,,,
all of our code so let's go ahead and,,,
take these two,,,
views we'll copy those we'll remove them,,,
I'll remove HTTP response save that and,,,
then let's go into our app which is BAS,,,
and let's go to views.py so in views.py,,,
we we are going to paste in the homepage,,,
or the home View and this room view,,,
right here now this isn't going to work,,,
so we have our functions right here and,,,
this file doesn't know how to call those,,,
so what we're going to do is we're going,,,
into our app and we're going to create a,,,
URLs file just for this app remember if,,,
our project gets really big we're going,,,
to have to have different apps so we,,,
want a URLs file just to handle all the,,,
routing for this app so let's create a,,,
urls.py file so this will be our app,,,
URLs file and this will be our root,,,
directories URLs file so this is going,,,
to be for a full project this is going,,,
to be for a specific app so in here,,,
let's go ahead and make a quick import,,,
so we first want to import the path,,,
function that's what triggers these URLs,,,
right here so we'll actually remove them,,,
and we want to make this import so from,,,
Django do URLs let's import path so from,,,
Jango URLs import path so we have the,,,
path function and in here because the,,,
views are going to be in their own file,,,
they're in the same folder so we see,,,
views and URLs let's go ahead and go,,,
into that file so we'll do from Dot and,,,
then we'll,,,
import,,,
views okay so now we need a list called,,,
URL patterns and we're going to specify,,,
all the URL paths that a user can go to,,,
so we're just going to go ahead and go,,,
go to URL patterns or add URL patterns,,,
set that to a python list and we're,,,
going to set the routes here so we're,,,
going to use the path function right,,,
here and the path function can take in,,,
three parameters at this point so we're,,,
going to specify the direct path so for,,,
the homepage it's going to be an empty,,,
string we can leave it like that then we,,,
need to go into the views file here so,,,
we're going into views and we need to,,,
get the home view so we'll do views.,,,
home and then we can actually give our,,,
view a name and we'll talk about why,,,
this is good later but uh we're just,,,
going to call this home so later on we,,,
can actually to reference a view or a,,,
specific URL by its name so that's going,,,
to be convenient and it's going to make,,,
things more Dynamic so we have our,,,
homepage and we also want a room page so,,,
we'll just do room slash and we'll do,,,
views.,,,
room and we also want to give it a name,,,
so we just go ahead and do,,,
room and there we go so we always want,,,
to add in a closing comma there and make,,,
sure that's correct and now we have our,,,
two views which we also need to import,,,
HTTP response CU that's going to give us,,,
an error so from Jango HTTP import HTTP,,,
response okay so that error is going to,,,
go away and look at this so we have two,,,
views and we have two URLs and if I go,,,
to the page here so let's go to the hom,,,
page and let's check this out if I click,,,
on this we're going to get an error so,,,
what's happening here is we have not,,,
configured our URLs to the apps URLs,,,
file so what's happening is we have all,,,
these URLs and we see some kind of error,,,
let's actually fix this first so we have,,,
home what's going on here maybe I didn't,,,
save the root URLs file here so let's,,,
try that one more time we'll save this,,,
one and we're going to save this,,,
one so looks like everything should be,,,
good now let's try that one more time so,,,
we'll go to the website and now we have,,,
the default D Jango template that Jango,,,
already has PR for us so what's,,,
happening here is we have two URLs but,,,
Jango does not know about these so we,,,
need to go back to our URLs file and,,,
we're going to include or import a,,,
function called,,,
include and then we're going to tell D,,,
jeno when we go to the website this file,,,
is going to handle all the core URL,,,
routing but instead of adding all the,,,
URLs in here we're going to create a,,,
path here and this is going to be an,,,
empty string so every URL that matches,,,
an empty string go ahead and use the,,,
include function so we'll do,,,
include and send the user to base and,,,
then URL so we're to the base app and,,,
we're going to the URLs file so let this,,,
URLs file take care of all the routing,,,
so the user is going to go to this page,,,
it's going to match this route then it's,,,
going to go to this url's file and these,,,
routes will be matched so I hope that,,,
makes sense so now if I go back here,,,
it's going to remove the default D Jango,,,
template and now we can go to,,,
room so it's actually a lot faster than,,,
that typically I'm just doing a lot of,,,
explaining but we just configured all of,,,
our URLs and our views and now we're,,,
ready to to render out some real,,,
templates so let's talk about templates,,,
so we have SIMPLE HTTP responses and,,,
these aren't Dynamic we can't add our,,,
own HTML to that uh there is a way to do,,,
it but it's going to be very messy so,,,
let's go ahead and add our templates so,,,
in order to add templates we're just,,,
going to go into our main project files,,,
here and let's just go ahead and add in,,,
a new folder so we're just going to add,,,
in a folder called,,,
templates and this is where we're going,,,
to store our templates and there's a few,,,
ways to configure these so we'll we'll,,,
talk about that in a second here so,,,
we'll go ahead and uh pay attention to,,,
the file path so now it's in the same,,,
directory as the app so in here let's,,,
create a template called,,,
home.html so now we can actually write,,,
some HTML code and we won't worry about,,,
the HTML semantics just yet so we'll add,,,
in an H1 tag and we'll say home template,,,
and that's going to be it for now and we,,,
also want to add in a room. HTML and and,,,
we'll just do H1 and we can do room,,,
template so now we can actually add in,,,
markup instead of rendering out a simple,,,
response we have two templates and we,,,
need to return these inside of our views,,,
now the first thing we need to do is let,,,
D Jango know about this templates folder,,,
it doesn't know that this exists yet so,,,
we're going back into our uh main,,,
project folder in settings.py and we,,,
need to go into templates here and this,,,
is where we're going to let Jango know,,,
that we have a new folder for our,,,
templates and it's going to tell it,,,
where to look so we're going to use a,,,
variable called baster that stands for,,,
base directory and it's set right here,,,
and this just sets the file path back to,,,
the base directory of our project so it,,,
basically goes all the way back there so,,,
we can access any folder from that area,,,
and we'll go back to templates so we'll,,,
set baser and we can just do forward,,,
slash and then we'll just do templates,,,
so we're saying go back into the base,,,
directory and find the templates folder,,,
and now jeno knows we have templates in,,,
this specific folder so in order to,,,
reference these templates we need to go,,,
back to our views we can actually get,,,
rid of our HTTP response so at this,,,
point we can use the render method so,,,
this is imported by default and the,,,
render method takes in two parameters,,,
that are needed and then one optional,,,
here at this point and the first one is,,,
going to be the request object so that's,,,
going to be the HTTP request we need to,,,
pass that into render this is how we,,,
pass data back into forth and then we're,,,
just going to specify the template name,,,
in this case it's going to be,,,
home.html now I can also do that for the,,,
room here so we'll just go ahead and do,,,
render pass in request and we'll just do,,,
room. HTML so that's how we know about,,,
the templates now if we go back here we,,,
see the room template and we see the,,,
home template so now we actually render,,,
the templates and we can do a little bit,,,
more with it so let's go ahead and,,,
remove the HTTP response and I want to,,,
talk about template inheritance now just,,,
rendering a template isn't the best,,,
thing if we're uh maybe adding in like a,,,
navigation bar imagine having to code in,,,
the navigation bar into every single,,,
template adding in all those tags all,,,
the styling and then if we change out,,,
one Link in the navigation bar we're,,,
going to need to go back to all the,,,
templates and update every single,,,
template so there's something called,,,
template inheritance and we can also,,,
include sections of templates tempates,,,
inside of other templates so let me show,,,
you what I mean by this so we're going,,,
back into the templates folder and we're,,,
going to create a file just to contain,,,
our nav bar so this is going to be our,,,
navigation bar and we're going to call,,,
this navigation and all we're going to,,,
do here is create a link here and this,,,
is going to be a link to the homepage,,,
like a logo so we'll just say hre that's,,,
going to send the user back to the,,,
homepage we'll just direct it to a,,,
forward slash and then we'll just say H1,,,
and we'll say logo so imagine this is,,,
our website logo and we just want to add,,,
in an H1 tag here so we'll just do H1 or,,,
not H1 tag but just an HR so like a line,,,
break and this will be our ugly,,,
navigation bar until we fix this so this,,,
code needs to be seen on every single,,,
page so we could do is we can simply go,,,
into our home.html,,,
page and we can use a template tag and,,,
don't worry about these curly braces and,,,
percent symbols we'll talk about that in,,,
a little bit here so we can use these,,,
and at this point use two curly braces,,,
and two percent symbols and then write,,,
in,,,
include so we're going to add in include,,,
and then in single quotes we're just,,,
going to say navb bar. HTML so we're,,,
going to include this template inside of,,,
this template right here so if I go to,,,
the homepage if I refresh that now we,,,
see this logo now if I go back to or if,,,
I go to the room we don't have it so,,,
what I could do is just take the same,,,
template tag,,,
and I can move that to room and simply,,,
include it in the top section here so I,,,
can refresh that now we have a homepage,,,
and the logo up there we have the full,,,
navigation bar and we can include this,,,
multiple times so we can do something,,,
like this and that's just going to add,,,
it in all throughout our template okay,,,
so we need to go to room for that I,,,
think I did that in the room page and,,,
there we go so now we see that,,,
navigation bar so we're including,,,
sections of templates now what we could,,,
do is we can also talk about template,,,
inheritance so instead of including it,,,
what we could do here is go ahead and,,,
create a main template so we'll do main.,,,
HTML and this is going to allow us to,,,
create like a wrapper around all our,,,
templates so every single template that,,,
we have uh by default our application is,,,
going to have different styles or a main,,,
theme and then different styles per page,,,
and we want to be able to Simply include,,,
like one style tag and uh little,,,
sections into our main theme of our,,,
website and we want that be displayed,,,
all over and simply encap encapsulate,,,
all the templates in our project so,,,
let's go ahead and in main. HTML let's,,,
start typing out HTML and most text,,,
editors if you start typing that out,,,
it's going to give you the boiler plate,,,
HTML if not you're just going to have to,,,
write all this out it's just a doc type,,,
two HTML tags a body tag an opening and,,,
closing tag and a head tag with some,,,
metadata so let's go ahead and give it a,,,
title so we'll just do study bud and,,,
let's go ahead and remove the Javascript,,,
file we don't want that at this point,,,
and we also don't need the CSS file,,,
because we don't have one yet so we have,,,
our main template and this is the,,,
template that we want to inherit from or,,,
all the other templates to inherit from,,,
at this point so in the body tag what we,,,
need to do is we need to create these,,,
things called Tags and again we'll talk,,,
about this syntax in a second but let's,,,
go ahead and create a block so we'll do,,,
block and then we'll say content,,,
and then we're going to need to close,,,
this block tag so we'll just do end,,,
block so what this is going to do is,,,
it's going to tell our website where to,,,
add all these child templates when we,,,
wrap a parent or another template in our,,,
website so in our homepage we're going,,,
to have our main page and then all the,,,
homepage content will be in here then,,,
when we go to our uh room page all that,,,
content is going to be inside of these,,,
two tags so it's in in a sense just,,,
wrapping that content so what this is,,,
doing for us right here is instead of,,,
having to include this navigation bar in,,,
home and then inside of our room page,,,
I'm just going to copy this remove it,,,
and then add this into main. HTML so I,,,
want this at the top of my page inside,,,
of every page so I'm adding that above,,,
my blog tags and now we have our main,,,
template and I can go into home here and,,,
I can simply extend that template so,,,
instead of include we're going to use,,,
these tags here and we're just going to,,,
do extends and we're just telling it,,,
which template are we extending so we're,,,
extending main. HTML now in order for,,,
this content to be seen we need to use,,,
these two tags right here so inside of,,,
main. HTML we need to specify where this,,,
content is inside of our template so,,,
we're just going to,,,
say,,,
block content and then we're just going,,,
to do end,,,
block and block like,,,
that and then we'll just do,,,
content okay so now not much is going to,,,
change we're still going to see our,,,
navigation bar but the nav bar bar is no,,,
longer inside of this template we're no,,,
longer having to add it to every,,,
template even though that was pretty,,,
simple to do uh we just want to be able,,,
to add it to our main template and,,,
that's it we need it there once and,,,
that's going to be good for us so if I,,,
go in here we'll refresh it the room,,,
doesn't have the main parent template,,,
yet but the homepage does so we see that,,,
the nav bar is is inside of the main,,,
template and we see the home template,,,
underneath it now let's go ahead and add,,,
this to our room. HTML so you might be,,,
using D Jango just to create apis uh so,,,
if you're not worried about the template,,,
syntax in theory you could just go to,,,
databases and not worry about this but a,,,
lot of people still use the Jango,,,
templating engine so we're going to,,,
stick to that for now and make sure that,,,
we cover it so we'll just do extends,,,
here and we can go into main. HTML we're,,,
specifying the template that we're,,,
extending and then we need to wrap the,,,
child content so we'll just do block,,,
content and we can do end,,,
blog okay so the Navar is now only,,,
inside of main. HTML but if I go to,,,
room there we go we see the room,,,
template and the home template so that,,,
is including and extending a main,,,
template so let's go ahead,,,
and actually pass in some data into the,,,
template so how do we pass in data when,,,
we query a database so first of all I,,,
want to talk about the D Jango,,,
templating engine here so D Jango,,,
actually uses its own templating engine,,,
it looks like Ginga so uh let's just do,,,
Jango wow I can't spell so Django,,,
template,,,
engine and let's talk about tags here so,,,
first of all uh I just want to point out,,,
two main ones we can add in variables so,,,
inside of our template we can pass in,,,
variables any kind of data and in order,,,
to do this we just add in two opening,,,
and closing curly braces around the,,,
variable and that's going to pass in the,,,
dynamic data so my first name is and,,,
then whatever first name was that's,,,
going to get passed in the template and,,,
then last name so variables are simply,,,
two curly braces now we also have tags,,,
here so there's different types of tags,,,
and this is basically a way of passing,,,
in Python like logic into a template so,,,
uh at some point we might have to or we,,,
will have to Loop through data and pass,,,
out like a list of uh rooms or users,,,
that we want to display and these tags,,,
are simply a curly brace with a percent,,,
symbol like you saw so there's different,,,
types of tags so we can create for Loops,,,
if and else statements and so on so we,,,
can add in a lot of logic so imagine,,,
that we have a user and we want to,,,
change uh like a Hello message so in,,,
this case we're going to check if the,,,
user is,,,
authenticated go ahead and render the,,,
username and then we have to close the,,,
and if statement so in Python you just,,,
have to write if in the templating,,,
engine we have to close that if,,,
statement so we have different types of,,,
tags and filters and so on so just think,,,
double curly brace or curly brace with,,,
percent symbols and we're going to work,,,
with a lot of built-in templates so,,,
that's what we saw here we're using like,,,
the include tag or the extends tag and,,,
we're using those tags to add in Dynamic,,,
data so those are D Jango template tags,,,
there we'll address those as we go and,,,
and at this point let's go ahead and go,,,
into our view so imagine that we have a,,,
view here that has some data so at some,,,
point we're actually going to render,,,
some rooms so let's create a variable,,,
and this will be a python list and we're,,,
going to have some rooms which which,,,
will just be dictionaries or uh they'll,,,
represent like objects and each room,,,
will have an each room will have an ID,,,
so we'll just have an ID and we'll start,,,
at one and then we'll just have a name,,,
to that room and for this first one,,,
let's just say uh Let's Learn Python so,,,
our room is going to be people posting,,,
these kind of requests so we'll do Let's,,,
Learn Python add in a closing comma,,,
after that and let's just copy and paste,,,
this a couple times and we'll just do,,,
two and three here okay so for the next,,,
one we'll just give it a name I just,,,
want to make sure that we have something,,,
here so we'll just do design with me and,,,
then we'll just do front end developers,,,
so these are like Discord servers I,,,
guess so front endend,,,
developers okay so we want to be able to,,,
render this data out inside of the,,,
template so inside of home.html so let's,,,
close out the navb bar we'll close out,,,
room and Main and settings and we want,,,
to render this out so at this point what,,,
we could do is go ahead and take rooms,,,
right here so we have a variable it's,,,
outside of the function but it is,,,
accessible here and we can simply pass,,,
in a dictionary and specify the value,,,
name so it's a key value pair we can add,,,
in as many as we want and specify how we,,,
want to address it in the template and,,,
then we specify what we're passing in so,,,
if I save that now we have access to,,,
this list right here inside of the,,,
template so this is passed into home,,,
into,,,
home.html so we'll go into home and,,,
let's go ahead and just render this out,,,
so we'll just create some kind of div,,,
for our main page and let's create a div,,,
that renders out all these items here so,,,
we'll just do um two curly braces so,,,
we're creating a four Loop so so this is,,,
going to allow us to create it with a,,,
tag here and we'll just say for uh room,,,
in,,,
rooms and the difference here in uh,,,
regular Python and in this templating,,,
engine syntax here we'll just do end,,,
four so we have to close it instead of,,,
just closing out or just writing a,,,
simple for Loop so we have to always,,,
close our for loops and our if,,,
statements now on each iteration what do,,,
we want to do here so I'm just going to,,,
create a,,,
div and if I can type this out,,,
let's go ahead and on each iteration we,,,
want to pass in some kind of tag here,,,
let's just do an H5 tag and we want to,,,
pass in the ID so variables can be,,,
passed in with two curly braces and we,,,
can just do room so we're getting the,,,
room object on each iteration and we're,,,
just doing ID and then we'll just do two,,,
hyphens and then we want to pass in the,,,
room name so we'll just do room. Nam,,,
we're accessing the dictionaries names,,,
right here or key value pairs,,,
so if I save this we can go ahead and,,,
refresh it and there we go so as I add,,,
data we can render that out so we passed,,,
that through the view and into the,,,
template now we could just pass it in,,,
directly like this I like to create a,,,
context dictionary so you can call it,,,
whatever you want I just call it,,,
context and I set that value right here,,,
and then I pass that in as the third,,,
parameter into the render function so,,,
that passes in the data now if I want to,,,
create an if L state payment I can go,,,
ahead and do that so we can say,,,
something like uh age or something like,,,
that and we can say if the age is a,,,
certain number render this out if not,,,
render something else out and that's how,,,
it would work so we'll actually see that,,,
in practice so I won't show that in the,,,
demo and I want to go ahead and show you,,,
a few more things with the templates,,,
here so we created a templates folder,,,
for all the templates inside of our,,,
application now in the future as I,,,
mentioned we have different apps that,,,
handle different parts of our website,,,
and what I like to do here is create a,,,
templates folder that represents every,,,
single template that is going to be,,,
available throughout the application or,,,
is not specific to a uh part of our app,,,
here so in this case main is going to be,,,
available everywhere in our application,,,
and so is the navbar now home and room,,,
are going to be specific to the base app,,,
now if this was a bigger application,,,
this would be an app probably called uh,,,
users and then rooms or something like,,,
like that uh we would separate it but,,,
for now let's go ahead and create a new,,,
folder inside of our app so I'm showing,,,
you two different ways to do templates,,,
and I guess the reason to why you would,,,
separate them so we'll create a new,,,
folder and we'll call this,,,
templates now the weird thing about this,,,
is that Jango requires us to create,,,
another folder inside of this templates,,,
folder so if I go ahead and do new,,,
folder we're going to call this base so,,,
it has to be named whatever your app is,,,
called so if you call your app something,,,
else make sure you have the app name,,,
which is base templates and then inside,,,
of templates a folder with your app name,,,
in this case it's bass so it's a weird,,,
structure um it's kind of confusing at,,,
first to some people but there's a,,,
reason to why it's like this now inside,,,
of the templat folder inside of bass,,,
we're just going to go ahead and create,,,
a new file and we're going to call this,,,
home.html and we're just going to go,,,
into the home templates here from the,,,
root directory and just copy all of this,,,
and paste that into this new home.html,,,
file so we're just going to go ahead and,,,
delete home.html from the root,,,
directories templates folder and in,,,
order to actually work with this new,,,
template all we need to do is go into,,,
the view and we need to specify the app,,,
now before and then for slash so Jango,,,
tells us to do things this way so let's,,,
make sure that template is connected so,,,
if I refresh it we're all good and at,,,
this point instead of deleting the,,,
content we'll just go into to the,,,
application we'll go into the templates,,,
folder and we're going to copy,,,
room we'll go into our app into,,,
templates base and we're going to paste,,,
that in here and then we'll go into the,,,
root directories templates folder and,,,
we'll go into room and delete that so,,,
don't let that confuse you it's just,,,
this weird prefix stuff that Jango does,,,
and they do it for a reason but there we,,,
go so now in order for room to work we,,,
need to go into,,,
basro so our app templates are in inside,,,
of our app folder and our main templates,,,
are inside of the root templates folder,,,
okay so now I also want to talk about,,,
Dynamic URL routing so how do we get a,,,
specific object of a uh single room here,,,
so for example let's say I want to link,,,
this up here I want to be able to click,,,
on this and then see information about a,,,
specific room so at this point the room,,,
really has no way of doing that and the,,,
way we're actually going to set this up,,,
is by changing up the URL here so what,,,
we can do is pass in a dynamic value,,,
here so we're going to use two angle,,,
brackets and we're going to say Str Str,,,
for a,,,
string and we're going to pass in a,,,
value name so PK is going to be for,,,
primary key or ID it really doesn't,,,
matter now this value could be an INT so,,,
an integer or a slug but a lot of people,,,
do like to actually have string values I,,,
like to use it so in this case uh I'm,,,
just going to do Str Str even though I'm,,,
using a uh integer here so we're passing,,,
in the ID into the URL now inside of the,,,
view we need to pass in another,,,
parameter here so I can pass in PK right,,,
here so now I have access to whatever,,,
value is inside of that parameter inside,,,
of the room here so if I go ahead and,,,
save this before I actually render the,,,
value out now I can actually go to,,,
room let's go ahead and do room and then,,,
for slash1 so now this will work so I,,,
can pass in a dynamic value and that'll,,,
change so let's go ahead and go back to,,,
our main page and let's finish this up,,,
so from our homepage uh I'm just going,,,
to add in a link here so around each H5,,,
tag We'll add in an a tag and we're just,,,
going to wrap this so we'll make all of,,,
this clickable actually let's just make,,,
the room ID clickable or the room,,,
name so we only want to wrap one section,,,
because later on I do want to add in,,,
more links so we're just going to do hre,,,
and then we'll go into forward slash,,,
room forward slash and then we're going,,,
to pass in the variable,,,
of the room ID so we'll just do room. ID,,,
like that and then later on we're,,,
actually going to update this URL too so,,,
we pass in the URL it's going to go,,,
ahead and set this value and pass in,,,
that value into the ID here so if I,,,
refresh it I can click on this we see,,,
the room ID if I go to three we're,,,
seeing that value okay so in order to,,,
actually get this value later on we'll,,,
actually use this primary key to query,,,
the database but for now we're just,,,
going to use this variable and let's go,,,
ahead and actually write in this logic,,,
here so we're just going to set a value,,,
here and we'll just call this room set,,,
that To None So when we first go to it,,,
it's not going to have a room then we're,,,
just going to Loop through the rooms,,,
value so we'll do 4 I in rooms so that,,,
list of objects or dictionaries and,,,
we'll say if I and then because it's an,,,
because it's a dictionary we have to,,,
access the values this way so if i. ID,,,
is equal,,,
to let's see PK,,,
and I'm",,,
 just going to go ahead and make,,,
sure that's an integer so we'll wrap,,,
that because I believe it might be a,,,
string so this might not match so if we,,,
find the current room so we're going to,,,
go ahead and loop through this list here,,,
we're checking all the IDS whatever ID,,,
matches that primary key that's in the,,,
URL we're just going to go ahead find it,,,
and we're just going to say room is,,,
equal to I then what we can do is simply,,,
set a context dictionary so we'll do,,,
context and that needs to be a python,,,
dictionary and we'll just say room and,,,
we'll throw in room here so we'll bring,,,
in context as the third parameter make,,,
sure you add that in right here paste,,,
that in and that should give us our room,,,
here so now in the template we can pass,,,
in the value into the room here so let's,,,
just say uh we'll pass in a title I,,,
guess we'll just do room. name because,,,
that's passed into the template we can,,,
access it this way that's going to be,,,
the H1 tag so let's go to Let's Learn,,,
Python there we go it finds it and we,,,
see frontend developers and design with,,,
me so we're able to get the values now I,,,
want to show you how to get Dynamic,,,
values from our templates here so let's,,,
go ahead and change this up a little bit,,,
so there's a reason why we added in a,,,
URL name here so let's say that at some,,,
point we change this to room page or,,,
something like that like we want to,,,
update it what's going to have to happen,,,
is we're going to have to go into every,,,
single template or anywhere that we,,,
access this URL here and we're going to,,,
have to update all these values and,,,
that's going to be really annoying so,,,
what we can do here is we can update,,,
that value all we want but we can,,,
specify or access this value by the name,,,
so if this value doesn't change then we,,,
don't have to update anything so we can,,,
keep this as room name or room it,,,
doesn't matter but as long as this value,,,
is the same we can keep accessing it,,,
that way and it's just going to point to,,,
this URL here so let's go into the,,,
homepage and instead of specify find the,,,
PATH here so we're not having to update,,,
it we're going to use the URL tag so,,,
it's a built-in tag into the D Jango,,,
templating or inside of the Jango,,,
templating engine and we're going to,,,
specify the tag name so URL and then,,,
make sure that if you're using double,,,
quotes out here you're using single,,,
quotes out here and if you're using,,,
single quotes out here you're using,,,
double quotes in here so inside of URL,,,
we're passing in the URL name so that's,,,
this,,,
value and we can pass in the dynamic,,,
value so the room ID I just want to make,,,
sure that I'm not covering that we're,,,
just going to pass in,,,
room. ID so make sure that's outside of,,,
these quotes but still in the URL tag,,,
now if I save this we can go ahead and,,,
refresh it and that's going to work here,,,
so that tag is just going to Simply,,,
generate the URL based on that tag so we,,,
don't write it out that way but that's,,,
how it's seen because we have the tag,,,
name so now if we happen to change that,,,
URL path uh we don't have to go ahead,,,
and update everything so it's really,,,
convenient and it's uh much faster to,,,
deal with things that way so we just,,,
worked with setting up our application,,,
we talked about views and URLs and we,,,
worked with templates we rendered some,,,
data out in the templates and now what,,,
we want to do is actually set up a real,,,
database which is going to be in our,,,
sqlite database and we want to actually,,,
query the database and render data from,,,
the database out here so we don't want,,,
to use this anymore so let's go ahead,,,
and prep that so at this point we have,,,
our SQL light database it's not prepped,,,
it's just sitting there it's an empty,,,
file and we want to work with that so if,,,
I open this up here we see this alert,,,
and it says we have 18 unapplied,,,
migrations in our application now inside,,,
of,,,
settings.py we have apps in our project,,,
so apps are simply again different parts,,,
of our application and a lot of these,,,
apps have database sections so basically,,,
we have like a database prepped so we,,,
already have a couple of tables that are,,,
ready to be migrated like Jango builds,,,
out a user table for us uh for,,,
authentication they already build out a,,,
table to store session IDs like if a,,,
user's logged in so we have all these,,,
tables that jeno has already pre for us,,,
now what happens is D Jango creates,,,
these migrations and these are basically,,,
like SQL commands prepped and are ready,,,
to be executed so they're ready to be,,,
activated but they haven't been,,,
triggered yet so once I run these,,,
migrations these commands are going to,,,
be activated and they're we going to,,,
build out all these tables which are,,,
inside of here so we have sessions and,,,
then a couple of different uh items in,,,
here and those tables are going to be,,,
built out so we don't even have to,,,
configure these Jango is really good at,,,
setting this up for us and making this,,,
easy now we are still going to build out,,,
our own tables but these are just the,,,
default ones that Jango gives us so all,,,
we need to do is run python,,,
manage.py migrate so it's going to,,,
execute these commands so we're going to,,,
see all these migrations being applied,,,
and and basically what just happened is,,,
that built out our database for us so it,,,
executed those commands and now if I run,,,
my server so we'll do,,,
python manage.py,,,
run server so if we activate this now,,,
we're no longer seeing those unapplied,,,
migrations so the migrations that we had,,,
ready are officially applied and they're,,,
ready to go so we want to add in our own,,,
tables and we'll see a few of those,,,
tables already we're going to have,,,
something called ajango admin panel that,,,
lets us view our data database uh,,,
because we're not using like a,,,
production database there are some uh,,,
plugins and extensions that let you view,,,
the SQL light database like the actual,,,
tables but we don't really care about,,,
that we're going to stick to the admin,,,
panel and later on if we want to use,,,
something like postgress we can use PG,,,
admin some kind of interface to actually,,,
view all the tables and the rows and and,,,
all the items inside of that database so,,,
let's go ahead and close out settings,,,
here we'll close out room.,,,
HTML I guess we'll close everything and,,,
inside of our app here so the base app,,,
let's go ahead and go into models.py so,,,
models.py is where we're going to create,,,
our database tables now I do have a,,,
picture that shows you a representation,,,
of what a model is going to do so I'll,,,
just go ahead and find that and then,,,
explain it here so uh I pulled up some,,,
pictures from that full Django course,,,
and let's see we want to work with,,,
models here so what we're going to do is,,,
we're going to create python classes now,,,
the class that we create is going to,,,
represent the database table so uh in,,,
this example let's say we had a project,,,
this would create a table in the,,,
database called projects now or project,,,
uh now every single attribute inside of,,,
that python class would represent a,,,
column inside of the database so we,,,
would have an ID we would have a title,,,
and a description now every single time,,,
we create a new row in that table that,,,
would be like an instance of a class and,,,
that's going to add in the row so the,,,
table name or the class name is the,,,
table name the attributes are the column,,,
so this is what it's going to create,,,
it's a replication it's in a sense a,,,
model of a table that's why they're,,,
called models so this concept is not,,,
specific to Django I've seen this in,,,
other Frameworks here so it's nothing,,,
new as far as the style so let's go,,,
ahead and get started so the first table,,,
we want to create is going to be our,,,
table for our room or actually yeah we,,,
want to create a room first so we'll,,,
create a class here and we're going to,,,
create a room and I'm going to,,,
capitalize the r that's the tradition,,,
for classes and we're going to inherit,,,
from Models so this is what's going to,,,
change it from a standard python class,,,
to an actual Jango model so we're going,,,
into models. model and model is with a,,,
capital m so there's going to be,,,
different attributes here the first one,,,
is going to be the host like the actual,,,
user that's going to be connected until,,,
we work with that I'm going to go ahead,,,
and comment that out we're also going to,,,
have a topic until we add that I'm going,,,
to comment that out and we are also,,,
going to have a name so this value I,,,
will add so we're going into models.,,,
Char field so it's a character field and,,,
this is simply a text field so I have to,,,
specify the attribute and what type of,,,
value is that attribute so at this point,,,
the character field takes in the value,,,
of max length or it needs this parameter,,,
this is something that is required for,,,
this value now we can also add in a,,,
description so we'll just go ahead and,,,
do,,,
description so we do description here,,,
and this is going to be models.,,,
textfield so it's the same thing as a,,,
character field in this case it's just,,,
going to be a bigger text field and what,,,
I want to do here is I want to specify a,,,
value of null and I'm going to set that,,,
to true so by default null is set to,,,
false so if I don't set it to True like,,,
a name here it's set to false here what,,,
what this means is that the database,,,
cannot have an instance of this model,,,
here without this value having something,,,
in it so it can't be blank now if I set,,,
null to true it means that it can be,,,
blank so it's saying null is alloud so,,,
it's true now we also have a parameter,,,
called blank here and what this means is,,,
that when we run the save method like,,,
when we submit a form uh that form can,,,
also be empty so we're going to set that,,,
to true so this is for the save method,,,
so when we're adding a form and this is,,,
for the database so we're going to make,,,
sure these two values can be left blank,,,
maybe someone created a room and they,,,
didn't add a description they want to,,,
add it later we want to let them do that,,,
and we'll just allow them to update that,,,
later so we have a room or we have a,,,
name and description and we also want to,,,
add in later participants so,,,
participants I can never spell this name,,,
I have to like sound it out in my head,,,
so I had to be quiet there so we'll just,,,
do participants I'm going to comment,,,
that out so what that's going to do is,,,
store all the users that are currently,,,
active in a room so if you comment in a,,,
room you are now a participant like in a,,,
Discord server you get to join one and,,,
we are going to add in an updated value,,,
so this is going to take a snapshot of,,,
anytime this model instance was updated,,,
so anytime we run the save method to,,,
update this model or the specific table,,,
or the item it's going to take a,,,
timestamp so in this case we're doing,,,
models. date time field so we want the,,,
date and the time that it happened and,,,
we're going to do Auto uncore now and,,,
this is going to be set to true so that,,,
means every time the the save method is,,,
called go ahead and take a time stamp we,,,
don't actually have to add in any value,,,
it's going to do it itself Jango already,,,
has that built in now we also want to,,,
know when this was created so we're,,,
going to do created and this will be,,,
models. dat time field so it's the same,,,
thing as updated and in this case we're,,,
going to set auto underscore now and,,,
we're going to do auto now excuse me one,,,
second so we're going to do auto now add,,,
and we're going to set that to true so,,,
the difference between Auto now and auto,,,
now add is Auto Now takes a snapshot on,,,
every time we save this uh item right,,,
here now Auto now add only takes a,,,
timestamp when we first save or create,,,
this instance so if we save it multiple,,,
times this value will never change it'll,,,
just be the initial Tim stamp whereas,,,
updated with auto now is going to take,,,
it Tim stamp every single time and,,,
that's going to be very useful depending,,,
on how you want to organize and display,,,
data so we want to know when a room was,,,
created and maybe every time it was,,,
updated and when the last time it was,,,
updated so that's going to be it for our,,,
room model at this point and we're going,,,
to create a string representation of,,,
this room so we're going to do Str Str,,,
and we're going to pass in self here so,,,
it's a python class you should know this,,,
if you know Python and we're just going,,,
to return back let's let's see we'll,,,
just do self. name so this does have to,,,
be a string value so if you do a date or,,,
try to concatenate values uh or any,,,
numbers make sure you wrap around the,,,
string method like that so at this point,,,
name is going to be just like that and,,,
we're always going to require it so it,,,
should be good and we're ready to go so,,,
when we add a model we're going to add a,,,
few more here so when we add a model to,,,
the database the first thing we need to,,,
do is make migrations so we have this,,,
migrations folder and what it's going to,,,
do essentially is basically create a,,,
file that's going to have like a list of,,,
SQL commands and how to execute this and,,,
add it to the database so we already uh,,,
migrated our database so we executed,,,
built-in migrations and now we are,,,
making new migrations so we're just,,,
going to do python manage.py make,,,
migrations so it's one word so if I hit,,,
enter we're going to see a new file here,,,
a new one a new file or a new migration,,,
is going to get generated every single,,,
time so right now it's 01 next migration,,,
you're going to see another migration,,,
get created so here we go we see this,,,
class right here and it's basically,,,
showing all the migrations that we're,,,
going to apply and what to add to the,,,
database so it's kind of like a staging,,,
area before we actually update the,,,
database so once we make a migration,,,
you're going to have to do this every,,,
single time so make migrations and then,,,
python let's see what's going on here,,,
let's clear it so we'll do python,,,
manage.py,,,
migrate so migrate will go into the,,,
latest migrations and it will execute,,,
those and then we're going to see these,,,
migrations being applied so we see apply,,,
all migrations and it's applying this,,,
migrations file which is Base,,,
001 right there so it applied those and,,,
now that table is in the database now,,,
let's say we want to view this so,,,
because we're not adding in any third,,,
party package to work with that sqlite,,,
database we're going to use the built-in,,,
D Jango admin panels so if I go in here,,,
into the URLs file so we'll go into,,,
study Bud into the root directories uh,,,
if you go to this file right here now,,,
that we have a database you can go to,,,
that URL and see the built-in Jango,,,
admin panel so we'll go to Port 8000 if,,,
you haven't saved that as a tab go ahead,,,
and do that or just write that in and,,,
we'll go to forward SL admin so here we,,,
have an admin panel and Jango already,,,
has built-in authentication for us and,,,
in order to log in we need a user and,,,
this user specifically has to have have,,,
admin level permissions so we're just,,,
going to create this from the command,,,
prompt here so we'll generate that user,,,
and then we'll make sure that we can,,,
actually see this data so let's just go,,,
ahead and run python manage and then,,,
we'll just do py create,,,
super user so it's all one word and by,,,
default it's going to follow the,,,
computer name here or whatever my,,,
username is on the computer I'll just,,,
add in Dennis and then we'll just do,,,
Dennis at email.,,,
and we'll specify some kind of password,,,
so as you're typing it it will start,,,
filling out but it won't see it so I'm,,,
typing it and you don't see it that's,,,
for security reasons and there we go so,,,
the password was created or the user was,,,
added to the database now my server is,,,
still on so I have two different,,,
terminals open and now I can go to the,,,
admin panel and already has the password,,,
saved here I have dummy passwords I use,,,
for tutorials so we'll go ahead and,,,
click login by the way is my face,,,
blocking the terminal okay okay good,,,
just thought I might be blocking it so,,,
go ahead and add in the user credentials,,,
that you just made with that command so,,,
log in and here we go so if I go into,,,
this admin panel we are able to work,,,
with the database and actually see what,,,
we have at this point so we have a,,,
groups table we also have a users table,,,
which shows us the user that we just,,,
created we can add new users so I can go,,,
ahead and create a user add in the,,,
password and that'll generate a new user,,,
so I can actually deal with crud,,,
operations right now now I do want to,,,
build these into my own application so I,,,
typically don't use this in a production,,,
environment I build out my own interface,,,
but if you want to go ahead and start,,,
working with the database right away,,,
it's really good for getting set up,,,
really quick so we added in the room,,,
table here but we don't see it and the,,,
reason for this is that we technically,,,
don't have to use the admin panel so in,,,
order to actually see these what we need,,,
to do is go into admin.py inside of your,,,
U base app whatever you called it and,,,
and let's first import our models so,,,
they're in the same file pad so we'll go,,,
into,,,
from models and we're just going to,,,
import room now we need to register this,,,
model with the admin panel and we're,,,
basically saying uh we're basically,,,
saying to the admin panel that we want,,,
to be able to view this item and also,,,
work with it in the built-in admin panel,,,
so we'll just do admin. site.,,,
register so we're registering it with,,,
the admin panel and we want to specify,,,
the model that we want to register so,,,
we'll throw that in now if I refresh it,,,
now we see rooms if I go in here we see,,,
Zero rooms I can go to add room and,,,
let's see let's just do let's learn,,,
JavaScript like,,,
that we'll add in a few here um I'll,,,
also add in a description so we'll just,,,
do laurum,,,
ipsum just Google this up grab some,,,
dummy text here some kind of description,,,
to a,,,
room paste that in so I can also delete,,,
I can save now we see that's added to,,,
the database we'll add in a new one and,,,
let's just do 100 days of code,,,
Challenge and we'll just grab some more,,,
lurum some text here,,,
so click the D calendar and there we go,,,
so we have two items inside of that room,,,
table here so now we added those we're,,,
able to work with the CR operations and,,,
we want to be able to render these out,,,
inside of the list and also view the,,,
details so we added those to the admin,,,
panel now we want to see those here this,,,
is still that python dictionary so let's,,,
go ahead and update this so we have the,,,
model now inside of the view here I'm,,,
just going to go ahead and uh actually,,,
I'll comment this out in a second so,,,
before I do that we'll just do from do,,,
models so we're in the same file path,,,
views and models are right here and,,,
we're just going to import room so first,,,
we import the model that we want to,,,
query now there is something called a,,,
model manager so I'm going to set a,,,
value here we're just going to do rooms,,,
and we can make queries by going into,,,
the model so we'll just do room and then,,,
we have a model manager called objects,,,
right here so I want to show you one,,,
more picture I guess I'll show you two,,,
so I also talked about this in the full,,,
course and this is how we can make,,,
queries to the database here so let me,,,
move this picture because my face is,,,
kind of blocking it or I'll just shrink,,,
down the circle here so we have a,,,
variable we have a model name so in our,,,
case it's room then we go into the,,,
objects model manager so we do do,,,
objects and then we can specify what we,,,
want to get so if we do do all it's,,,
going to query all the models or all the,,,
items inside of that database table so,,,
we specify the method now there's a lot,,,
of methods here we have get we also have,,,
filter which lets us filter data down,,,
we'll work with that we can also do,,,
exclude and that's going to filter items,,,
out in like a reverse order so get right,,,
here is to get a single object whereas,,,
all INF filter are to get multiple so,,,
this is how it's going to work and if I,,,
open up this picture right here there's,,,
a whole type or a whole list of query,,,
sets and how they work so it's basically,,,
the same file you just saw right here,,,
except for this is how we're passing in,,,
values so we can uh we can filter by a,,,
specific attribute we can change up like,,,
greater than less than filters so,,,
there's a lot that we can do with it we,,,
can also order values by different,,,
attributes and so on and we have,,,
different methods that we can call on,,,
these objects so that's all covered in,,,
more detail in the full course so we'll,,,
go ahead and close that out and we'll,,,
just see it in practice so let's go,,,
ahead and expand this a little bit so I,,,
think it's right here I'm trying to see,,,
where my mouse is so I think that should,,,
be,,,
good all right,,,
so okay for some reason the mouse is not,,,
being recorded okay so let's just go,,,
ahead and uh work with it and see how,,,
this works so we have our rooms we're,,,
going into rooms doobs and then we'll,,,
just do do all so that's going to give,,,
us all the rooms in the database now in,,,
this case this variable is the same as,,,
this one but it's going to overwrite it,,,
in one second let me try to fix this,,,
because my mouse is not showing so I'll,,,
pause it and get back to it okay so I,,,
just turned off my computer I had to,,,
restart everything and for some reason,,,
the mouse is still not showing up so it,,,
shows up in these sections right here,,,
and anywhere up here but as I scroll,,,
down it just disappears so if I need to,,,
show something I'll try to highlight it,,,
I might have to fix some in editing,,,
maybe to point something out if you,,,
don't see it but I'll try to uh maybe,,,
emphasize what exactly I'm pointing at,,,
so that's kind of annoying I I have no,,,
idea why it's doing that but we're just,,,
going to move on here so at this point,,,
now that I've restarted my computer so,,,
we want to just kind of recap a few,,,
things here and uh we have this query,,,
for our rooms here so we're querying the,,,
rooms it's overwriting this variable and,,,
now we're actually going to the database,,,
so we just imported it and that's what's,,,
being passed into the the template so,,,
now if I go ahead and go in here and if,,,
I refresh it now we're going to see the,,,
items from the database so we see the,,,
admin panel as opposed to that list of,,,
dictionaries now if I click on these it,,,
technically is still going to work if,,,
your ID start with one or two because,,,
those are inside of that dictionary and,,,
that's one thing that I forgot to,,,
mention is that models by default have,,,
an ID generated for them so the ID value,,,
just starts at one and it increments in,,,
the database as the instances go on so,,,
we could override this value you could,,,
just specify the ID and then use,,,
something like a uu ID field or,,,
something more advanced uh that is,,,
something that I like to do in my,,,
projects but uh for now we're just going,,,
to stick to the number value and just,,,
use integers so we have those IDs and we,,,
want to do the same for the specific,,,
room so let's go ahead and actually,,,
comment this out I'll probably leave,,,
this in for this course for the source,,,
code so you can see that and in the room,,,
let's just get rid of all of this and,,,
let's let's just get these specific room,,,
so we'll just do room and that's going,,,
to be equal to models or the model name,,,
so we're doing room doobs so the model,,,
manager and then we're doing do get,,,
which is going to return back one single,,,
item so we need to get this by a unique,,,
value because if this value uh let's say,,,
we have two items with the same value,,,
like a name or something like that it's,,,
going to throw an error because it needs,,,
to get back a single object so in this,,,
case we're going to specify the value,,,
that we want to get it by IDs should be,,,
unique you should never have a duplicate,,,
ID in the database in a table and we're,,,
just going to pass in the primary,,,
key so if I save this let's go ahead and,,,
refresh it click on 100 days of code now,,,
we see that so when we go to this page,,,
it goes to that view queries a database,,,
gets back that single item and then it,,,
renders it in the table so the names are,,,
all the same so we didn't have to change,,,
any logic in the front end and now it's,,,
all working well here so at this point,,,
we want to add in a few more models to,,,
the database so we have rooms here but,,,
each room should have some kind of,,,
category so we want to bring that in so,,,
we'll go ahead and set this up here so,,,
let's go ahead and start with a new,,,
model and we're going to call this let's,,,
see actually I want to start with a,,,
comment or a message so each room is,,,
going to have a message and I'm going to,,,
put that beneath here so we're going to,,,
do message and we're going into models,,,
dot model like that so we're making this,,,
a model and for the values for an actual,,,
message first we want to specify a user,,,
so the user that's sending the message,,,
and we're going to build this in in a,,,
second then we want to specify the room,,,
and this is a relationship here so this,,,
is going to be the first type of,,,
database relationship that I'm going to,,,
talk about this is a on to many,,,
relationship I go into more detail in,,,
the course about this uh in the full,,,
Django 2021 course but we have a mini to,,,
one relationship so in this case that,,,
means you have one model that has many,,,
children so imagine uh this is Twitter,,,
where you have a user and that that user,,,
can make multiple tweets so multiple,,,
post so that post can only have one user,,,
but the user can have multiple posts so,,,
one to many or many to one and in the,,,
database they identify each other by the,,,
IDS so we'll close this out and let's,,,
build this in in order to create a many,,,
to one or a one to many relationship we,,,
specify the attribute so that's going to,,,
be the room and we can do,,,
models. foreign key and in here we,,,
specify the parent name so this case,,,
it's going to be connected to the room,,,
so that is what's going to establish the,,,
relationship in the database and that's,,,
how we know what's connected to what so,,,
in here we're just going to specify,,,
value here we're going to do onore,,,
delete this is something that we do with,,,
many to1 relationships and we have a few,,,
options here so the first one is we can,,,
do model or,,,
models. set I believe it's models yeah,,,
models. setor null and this means that,,,
when the parent is deleted so imagine,,,
that someone deletes this room what do,,,
we want to do with all the children here,,,
so all the instances of the children so,,,
all the messages we could set it to null,,,
which would mean that that message would,,,
still stay in the database or we could,,,
do Cascade which is what I want to do,,,
here so when a room is deleted I want to,,,
Cascade so that means that we are simply,,,
going to delete all the messages in that,,,
room so if a room gets deleted all the,,,
children will also get deleted so we,,,
just want to get rid of those now you,,,
can decide how you want to use that but,,,
in this case I'm just going to keep it,,,
that way so we're going to set that to,,,
Cascade now let's see after the room we,,,
also want the body so the actual message,,,
in this case we're going to do models.,,,
text field and we're just going to leave,,,
it like that because we do want to force,,,
a user to write a message they shouldn't,,,
be allowed to write a message if they,,,
don't have a value and let's see we'll,,,
just take updated and created and bring,,,
that in here so we'll do updated created,,,
we'll create the string version so we'll,,,
do a function Str pass it in,,,
s and for the return method we'll just,,,
take in the body so we'll do return,,,
self. body and in this case we're going,,,
to trim it down and we only want the,,,
first first 50 characters now in the,,,
preview we want the first 50 characters,,,
so that way if that's a lawn message we,,,
don't want all the content in it,,,
cluttering our Jango admin panel so we,,,
have the message value and we created a,,,
relationship and in here we also want to,,,
add in a user so Jango already builds in,,,
a user model for us and this is,,,
something that we're going to address a,,,
little bit more uh in the last part of,,,
this video but we're going to start with,,,
a default user model so let's just,,,
Google this up really quick and looks,,,
like I have a spelling,,,
error so Jango already has a built-in,,,
user model and by the way I open up the,,,
figma design so we can start following,,,
this once we start adding in the items,,,
so we'll just do Jango user model and,,,
let's look at this so this is in the,,,
Jango documentation and the user model,,,
is simply a class it has things like a,,,
username first name last name email,,,
password uh different permissions like,,,
is this user staff member is it active,,,
uh is this a super user when's the last,,,
time this user logged in and so on so we,,,
can use this value and we can also,,,
import the user so we're just going to,,,
look up the import method I guess it's,,,
not in this file so I'm just going to go,,,
ahead and import this manually so we're,,,
going to import this user into the file,,,
and create a relationship so in here,,,
we're just going to do from,,,
Jango do contrib so this is a different,,,
part of Jango here. o and we're going to,,,
import,,,
user so the user with a capital u and,,,
that's what Jango already has built into,,,
the admin panel so we're going into o.,,,
model so it's a,,,
model okay so again later on we're going,,,
to customize this and there's a few,,,
reasons for why I'm doing it this way,,,
without building it in right away and,,,
let's take this user model and let's set,,,
the relationship so in this case this is,,,
going to be a on to many relationship so,,,
a user can have many messages whereas a,,,
message can only have one user so we're,,,
just going to do,,,
models. for and key we already know how,,,
to set this we're going to paste in the,,,
user and on delete when a user is,,,
deleted we just want to delete all the,,,
children here so we're going to do,,,
models. Cascade okay so we have a room,,,
relationship and a user and now we want,,,
to go up to room and in this case,,,
because a room is going to be a child of,,,
a topic I want to specify the class,,,
above it so we're just going to do class,,,
here and we'll create it as topic this,,,
is going to be,,,
models. model and we're just going to,,,
add in one attribute here so all the,,,
topic is going to have is a name and,,,
this is going to be a character field so,,,
we'll do models. Char,,,
field and we need to specify the max,,,
length so this field does require it,,,
there's no need for a topic to have more,,,
than 200 characters and we'll set the,,,
string value underscore passive cell,,,
and we'll just,,,
return and that's going to be the name,,,
self. name so we need to access that,,,
value okay so now we want to specify the,,,
relationship to the room so a topic can,,,
have multiple rooms whereas a room can,,,
only have one topic now we can change,,,
that up to a different type of,,,
relationship but for now a room can only,,,
have one topic so in this case let's,,,
just take this field right here let's,,,
bring that into room and we're going to,,,
paste that in so it's going to be,,,
models4 and key and we're going to,,,
connect that to topic now because topic,,,
is placed above room in the code uh if,,,
we happen to bring topic down here,,,
somewhere we can still access this,,,
inside of this value but we would have,,,
to wrap that in a string like that but,,,
for now we specify the topic so the,,,
actual value and if a topic is deleted,,,
let's see what do we want to do with the,,,
room now in this case I don't want to,,,
delete the room we'll just do setor or,,,
null now that might cause some issues in,,,
our code later we can add in some fixes,,,
for that but uh let's see okay so we're,,,
seeing a warning right now and this,,,
basically is saying that if this value,,,
is set null that means that in the,,,
database we have to allow it to be true,,,
so we have to allow it to be empty,,,
because when it gets removed and set to,,,
null we need to make sure the database,,,
will allow it now for the host we need,,,
to set the user so I'm going to copy,,,
this value paste this in and that's,,,
going to freak out here and throw an,,,
error we're just going to take this,,,
user I don't know why that got imported,,,
so we're going to take that user and,,,
then change this value so I'm pointing,,,
at it right now I guess I can't see that,,,
in the code but I'll highlight it we can,,,
see the user here so online 15 so now we,,,
have a relationship to a host so,,,
somebody has to host the room and then a,,,
topic which is right here okay so what,,,
do we do after we add into models well,,,
we're we going to go through that same,,,
process that we went through earlier and,,,
we are going to have to open up a new,,,
terminal,,,
here and we'll just do python,,,
manage.py,,,
make migration so we're going to prep,,,
the migration so when I execute that,,,
inside of the migrations folder now,,,
we're going to see a second migrations,,,
file get prepped it's going to prep the,,,
migrations for any changes or any new,,,
table so anytime you make a change to a,,,
model specifically to an attribute or,,,
add in a new one we need to run that and,,,
then we need to execute that so python,,,
manage.py,,,
migrate okay so we're going to execute,,,
that and that's going to add it to the,,,
database and after we run those,,,
migrations we need to register these,,,
models with the admin panel so we're,,,
going into here and we're going to add,,,
in topic and message now the user models,,,
already registered by default so let's,,,
just go ahead and do admin. site,,,
register register the topic and then,,,
admin. site. register and this is going,,,
to be the,,,
message okay so let's go ahead and check,,,
this out so we'll go in here go into the,,,
admin panel if I refresh it now we see,,,
topics and rooms so we'll go to a topic,,,
let's go ahead and add a few so we'll,,,
just add in,,,
Python and let's add in j,,,
Ango uh let's see we'll just do,,,
developer or web,,,
development so we want to do something,,,
more generic so we'll give users plenty,,,
of options and at some point you want to,,,
customize this go ahead and give users,,,
uh the option of adding their own topics,,,
and let's just do,,,
JavaScript okay so we have four topics,,,
so what we can do is now go to our rooms,,,
and in the rooms because we added that,,,
uh the host and the top Toc value you're,,,
going to see this drop down menu and,,,
you're going to be able to add in some,,,
users so for the topic 100 days of code,,,
let's just do web development so that's,,,
how many to one relationships are,,,
displayed in forms and we can also add,,,
in a host so I'm going to specify that,,,
as,,,
Dennis we're going to go ahead and save,,,
this so I'll shrink down my face here,,,
just to make sure we can see that and,,,
let's add that to let's learn JavaScript,,,
so we'll do Dennis and then I guess,,,
we'll do JavaScript for the topic and,,,
we'll hit save okay,,,
so I'll expand that a little bit and now,,,
that should be good okay so I just,,,
wanted to make sure you can see me,,,
clicking that save method so now that we,,,
added that we also want to add in some,,,
messages so let's just go ahead and add,,,
in a user and let's just chat inside of,,,
the let's learn JavaScript room we'll,,,
just say hey and we'll submit that so,,,
now I'm clicking the save button or I,,,
guess I can do save and add another and,,,
let me actually add in a user and I'm,,,
going to call this user Tim we'll add in,,,
the,,,
password and we'll do password,,,
confirmation save that so now we have,,,
two users and the password is by default,,,
hashed so D Jango takes care of all that,,,
so now we can see two users and we'll,,,
add in another message and Tim will,,,
say hi so we'll just do hey high and,,,
that should be good we'll save it and I,,,
just want to make sure those are all to,,,
to the same room so,,,
messages hi is let's learn JavaScript,,,
and hey is let's learn JavaScript okay,,,
so we added two messages and we added,,,
some topic so we just made some,,,
connections there and let's go ahead and,,,
update this section here so let's see,,,
how do we want to render this out here,,,
so uh we want to go ahead and actually,,,
render out the user value so we'll go,,,
into the,,,
template and let's go into home right,,,
now and let's check out the design here,,,
so in the design we we want to render,,,
out the username and we also want to,,,
render out the topic so it's not going,,,
to look this good yet we haven't added,,,
the template yet but I just want to,,,
display more information so we'll go in,,,
here let's see down inside of the div,,,
here let's just add in a span,,,
tag so we'll do span and then uh we'll,,,
just do at and then later on this will,,,
actually be clickable so we can actually,,,
go to a specific user account here so,,,
we'll do at and then we'll go into,,,
room. host so we can actually query,,,
upwards to the parent item instead of,,,
just an attribute so the model does have,,,
a value called host so we can actually,,,
go to the host object and then we'll,,,
just do host. username so we can do that,,,
with Jango and that should display the,,,
host name so if I refresh that now we,,,
can see Dennis posted those let's go,,,
ahead and go down here let's add in some,,,
kind of line break so we can actually,,,
see the difference so we'll do an HR tag,,,
and let's just do,,,
small and we'll add in the actual topic,,,
here so in this case we'll just do room.,,,
topic. name save that and let's take a,,,
look so there we go that looks a little,,,
better so I can actually click on this,,,
and later on we'll just display the,,,
actual room information so we're done,,,
with rendering out the items I showed,,,
you how to query the database for,,,
multiple objects a single object and,,,
also how to render this stuff out inside,,,
of the template like rendering out a,,,
parent or two parents here and uh just,,,
working with that data and also the,,,
admin panel so now what I want to do is,,,
show you crud operations so this stands,,,
for create read update and delete it's,,,
the core of any uh functionality on a,,,
website you're going to want to view,,,
data that's the detail uh you're going,,,
to want to update that's the UN crud,,,
read this information and delete this so,,,
uh let's go ahead and add that so we,,,
want to learn how to work with a,,,
database outside of using the Jango,,,
admin panel so in order to do this the,,,
first thing I'm going to do here is,,,
create a form for a room so we're going,,,
into the apps templates folder so in,,,
templates inside of base and let's,,,
create a template for a room here so,,,
we're just going to go ahead and do room,,,
form. HTML so we're going to create a,,,
template that is going to represent a,,,
form for updating and creating a room so,,,
one template for two different views,,,
now sorry about the weird breathing,,,
there almost like choked on air so the,,,
first thing we're going to do is do,,,
extends and we're going to extend the,,,
main template so main. HTML and we're,,,
going to wrap all the content so we want,,,
to inherit from that main template this,,,
is what we just worked on and we're,,,
going to specify the content,,,
block and then we're going to do end,,,
block content so,,,
end block content,,,
okay so in this page let's go ahead and,,,
create a div here so I just want to I,,,
want to wrap the main page even though,,,
we're not styling it I want to create a,,,
form and in the form we need to specify,,,
the method so we are going to be sending,,,
data so this is going to be a post,,,
method for creating and updating and the,,,
action well if I don't specify the,,,
action it's going to send it to the,,,
current URL that we're at so I could,,,
send it to a specific URL or I can just,,,
say when we hit post send it to the same,,,
URL except for now send post data,,,
instead of get data now inside of every,,,
form in D Jango if we're using this,,,
templating engine we need to add in a,,,
csrf token so this token will be sent on,,,
every form submit so when we're sending,,,
post request in jeno we need to pass in,,,
this token and this is going to send it,,,
just to make sure that there's no,,,
malicious attempts this is helping us,,,
from Cross site forgery attacks I,,,
believe that's the term for it if I got,,,
that wrong sorry so we're just sending,,,
that token along with request and it's,,,
making sure that the user didn't uh try,,,
to do anything malicious with that and,,,
um I guess mess with our form input so,,,
now we also want a submit button so,,,
we're going to specify the type here and,,,
we're going to say,,,
submit,,,
and the value is going to be submit so,,,
I'm going to make that lowercase so,,,
that's the value or the type and then,,,
the value the actual text in that button,,,
will say submit so we have a form and,,,
now we can go back to our view here and,,,
let's go ahead and create that view for,,,
this so we're going to create the,,,
function and we're going to say,,,
create,,,
room pass in request here and inside of,,,
or after request let's just go ahead and,,,
do return and this is going to render,,,
out,,,
request okay so you can see everything,,,
just want to make sure and for the,,,
template we're going into base and we're,,,
going into room _ form. HTML so we're,,,
just rendering out the template and,,,
we're going to pass in context which we,,,
don't have yet so we'll add that right,,,
here so I'm just doing some prep work,,,
some boilerplate stuff and we'll pass in,,,
the empty dictionary so I'll save that,,,
we render out the template now we need,,,
to create a URL here so we'll just do,,,
path add in a new route and this is,,,
going to be create room forward slash,,,
the view is going to be,,,
or views. create room name will,,,
be create D,,,
room okay so we have our URL we have a,,,
view that renders a template and let's,,,
just go ahead and Link this up so let's,,,
go into our home.html page and this is,,,
where a user can create a room from so,,,
at this point just above all our rooms,,,
let's just add in uh some kind of value,,,
here and we'll just add in a link so,,,
we'll just say,,,
create room and let's just do,,,
href and the value will just go to that,,,
URL so we're going to use the URL tag,,,
and the name of the URL that's what we,,,
want to access that's going to be create,,,
Dash room so I just highlighted that so,,,
you can see it and we're doing create,,,
Dash,,,
room okay so let's check this out so the,,,
form is not ready yet but if I click on,,,
it I should be able to see the template,,,
let's see online 3 content inside of,,,
create,,,
room where is that room form extends,,,
main. HTML content oh this is supposed,,,
to be block,,,
content so it's the block and then the,,,
block name so I just got that wrong if I,,,
refresh that there we go okay so I could,,,
manually create this form and then,,,
submit that to the back end now jeno has,,,
uh different ways of going about this,,,
now if we have class based views it's,,,
all built in already for us we really,,,
don't even have to do much we just,,,
submit it and it kind of just processes,,,
that magically and now that's also why I,,,
don't like class Bas views especially,,,
for beginners because they're hard for,,,
people to understand they're easy to use,,,
in basic structures but once you need,,,
need to uh customize something or to,,,
understand how it actually works it's,,,
hard to make sense of it so they're,,,
useful when you know them they're really,,,
good for now we're going to use function,,,
based views and for this instead of,,,
writing out that form manually we're,,,
going to use something called a model,,,
form now there is a layer of abstraction,,,
to this where there is kind of some,,,
magic under the hood but it's easier to,,,
understand than a class-based view so,,,
let's go ahead and build out a model,,,
form so a model form is like a,,,
class-based representation of a form so,,,
we'll just start this and I'll explain,,,
what's happening so let's go ahead and,,,
create a new file inside of our base app,,,
here and we're going to call this,,,
forms.py now inside of our forms.py file,,,
first we're going to import our model,,,
form so we're going to do from D Jango,,,
do,,,
forms and then we're just going to,,,
import model form so there's different,,,
types of forms we can create so let's go,,,
ahead and import our models really quick,,,
we'll just do,,,
from Models so it's in the same file,,,
let's just in import room okay so we,,,
have our model form and we have our room,,,
now all we do to create a model form is,,,
we create a class and the tradition here,,,
that I like to use is specify the model,,,
name and then form so this is going to,,,
be the form for the room so I call it,,,
room form and this is going to inhere,,,
from,,,
model model form here okay now there are,,,
two minimum values that we need here so,,,
when we set the metadata here we're,,,
going to specify the model that we want,,,
to create create a form for so that's,,,
going to be the room model and we have,,,
to specify the fields so we could do,,,
Fields like this and what this is going,,,
to do is this will create the form based,,,
on the data the metadata of this room,,,
right here so that means that it's going,,,
to create this form field for us which,,,
will be that drop-down list the topic,,,
value it'll create a text field for our,,,
name and then the description and then,,,
updated and created well those won't,,,
show because those aren't uh editable,,,
Fields so it's creating a form based,,,
around these values so if I specify all,,,
here it's going to give me all those,,,
fields now later on I am going to want,,,
to hide values like the user because,,,
that should be just autogenerated like,,,
the logged in user that creates it the,,,
application should know a user shouldn't,,,
be able to specify uh who they are,,,
necessarily in a drop- down menu so,,,
later on we're going to say things like,,,
give us the name then give us the body,,,
of the form and so on so it's just a,,,
list and we can also add values that we,,,
want to exclude so for now we're going,,,
to leave that as all so we're creating a,,,
form now inside of our view we're going,,,
to import that form so we're going to do,,,
from do forms so it's in the same file,,,
path let's import room form I'm kind of,,,
losing my voice here so let's see how,,,
long I can record today so we have the,,,
room form and inside of create room,,,
we're just going to do form that's it's,,,
going to be room form after we import,,,
that and we can render this out in the,,,
template so we're going to render that,,,
out as form it's in the context here and,,,
we can pass that into room form HTML so,,,
in here we pass in a variable and we'll,,,
just do form because that's how we,,,
passed it into the context,,,
dictionary if I refresh that look at,,,
what we have here so we have this form,,,
with all these field values now we're,,,
going to work on styling this and making,,,
this look a little bit better,,,
but for now we're going to use a quick,,,
shortcut and we're just going to do,,,
form. asore p what that's going to do is,,,
it'll wrap a paragraph tag around every,,,
input field that the form has and it'll,,,
just render those out now in the Jango,,,
course uh the full Jango course that I,,,
have I do talk about customization and,,,
we do work a lot with this so if you,,,
really want to see how to modify this,,,
form uh we go into depth there so now,,,
this form looks a little bit better we,,,
see the submit button and we're good to,,,
go so what we need to do now is process,,,
this data so if I go back to this view,,,
we'll go to form and we'll just,,,
say if,,,
request. method so remember method is or,,,
request is an object so we'll do if,,,
request.,,,
method is equal to post so we'll just do,,,
Post like that then let's go ahead and,,,
print out the form Valu so we'll just do,,,
or the value that will was sent so we'll,,,
just do request. poost and that's going,,,
to be all the data so if you want to,,,
look into request look up the Jango,,,
documentation and it's going to show you,,,
that in detail here so uh let's just,,,
print this out so if I go ahead,,,
and minimize this I guess we'll uh add,,,
in some data we'll specify Dennis as the,,,
host D Jango as the topic and we'll just,,,
say,,,
let's,,,
learn okay so if I submit this data I'm,,,
going to print out what we send to the,,,
back end so this is just going to be,,,
like a dictionary of key value pairs,,,
that's sent to the back end so if I,,,
submit it let's see I can do submit like,,,
that and here we go so we see the,,,
dictionary we see the csrf token we see,,,
the host with the host ID the topic ID,,,
the name which is let's learn right,,,
there I want to make sure that's not,,,
hidden and then the description which is,,,
empty at this point and so on so this,,,
data is sent so what I could do is I,,,
could process all of this manually so I,,,
could do something like,,,
request.,,,
poost doget and then get me uh the name,,,
and then extract all those values and,,,
then run the save method on the model,,,
but in this case we have a model form,,,
that takes care of all this Logic for us,,,
so all we have to do is take in this,,,
form so we're just going to do let's see,,,
how do I want to process this so we're,,,
just going to take in the data so we're,,,
going to specify the form and we'll just,,,
do room form,,,
then we're going to pass in,,,
request. poost so it's passing in all,,,
the post data into the form so the form,,,
already knows which values to extract,,,
from that and then we can check if form.,,,
isore valid so these are all methods,,,
that the form does have so if it's valid,,,
data if there's nothing wrong with it,,,
they all match the types of values are,,,
correct um we can just do form.,,,
saave that's it so we're going to save,,,
that value and this is going to save,,,
that model in the dat database so once,,,
that's saved I want to redirect the user,,,
back to the homepage so we're just going,,,
to add in or import a value called,,,
redirect so redirect save that and let's,,,
bring that down here so if the form is,,,
good we'll just,,,
do return redirect and we're just going,,,
to send the user to the homepage so,,,
again because I have the name in the URL,,,
I can access it by the name instead of,,,
this value here so that's what makes,,,
that name value so cool so,,,
let's go ahead and check this out so we,,,
have a form we send the post data add,,,
the data to the form check if it's valid,,,
if it's good we save it and then we,,,
redirect a user so let's try this out,,,
again so we'll go back to the,,,
homepage we'll go to create a room,,,
specify Tim as the Creator we'll do web,,,
development and we'll just say I want to,,,
learn,,,
HTML this person's a complete Noob and,,,
let's just um I guess we don't need to,,,
add a description we'll submit that,,,
so now I see I want to learn HTML down,,,
here so it's at the bottom so that value,,,
was submitted and or it was submitted,,,
and now we have a create method now,,,
before we get into update I want to,,,
change something here so I could,,,
actually go to the model and render out,,,
new items first here so when someone,,,
adds something to the database I want to,,,
make sure the newest item is first so,,,
we'll go into models here and there's a,,,
couple ways of doing this one is uh we,,,
can actually add this to the query set,,,
or we can add it directly to the model,,,
method here so let's go ahead and add,,,
this in we'll just do class,,,
meta and we can specify ordering so,,,
there's different values that we can set,,,
and this is going to be a list so what's,,,
going to happen here is the first items,,,
in this list are going to be prioritized,,,
and then it's going to chain on that,,,
that way so uh what I'm going to do here,,,
is order the value by updated so the,,,
most recently updated value and then,,,
we're just going to order it by,,,
created okay so if I do Dash so here's,,,
what's going to happen so if I do this,,,
like if I do the value like this it's,,,
going to order it in uh ascending order,,,
so that means the newest one will be,,,
last so if I go here if I refresh it uh,,,
it didn't really change much here now if,,,
I want the newest updated item to be,,,
first I could just reverse that so I can,,,
just do a dash and that's going to,,,
invert it and we'll do that for created,,,
so if I save that now the most newest,,,
updated item will be first so I want to,,,
learn HTML we'll just do Dennis now jeno,,,
test add it and test is right there so,,,
now it goes in the reverse order so,,,
that's ordering so now let's go ahead,,,
and go into updating a room,,,
so to update this we already have a,,,
template so we have this template that,,,
submits that post form or the post,,,
request now we need to create a view so,,,
we're going to create a new view and,,,
we're going to call this update room so,,,
it's going to look a lot like the create,,,
room method with a few changes here so,,,
we're going to pass in request here then,,,
in after request we also need to pass in,,,
the primary key so we need to know what,,,
item are we updating then what we want,,,
to do here is get the item that we're,,,
going to update so in this case we're,,,
going to update the room that's going to,,,
be room,,,
doobs doget we're going to get this,,,
value by the ID so that's going to be,,,
the primary key then we need to add in,,,
the form so let's actually quickly add,,,
in the return,,,
method so return render we pass in,,,
request if this is getting repetitive,,,
that's good it means you're,,,
understanding it and we'll go,,,
into,,,
base let's get these notes out of here I,,,
don't know why that's doing that or all,,,
that extra stuff so we'll do,,,
room undor form. HTML and then we'll,,,
pass in context and we'll set the,,,
context,,,
dictionary okay so we get the room then,,,
we get the form so we're going to do,,,
form this is a lot like the method up,,,
here so let's just copy and paste that,,,
now the only difference is when we click,,,
to edit a room we want to be able to,,,
actually know what room we're going to,,,
edit so this is going to give us an,,,
empty form that we're going to render in,,,
the context dictionary so how do we get,,,
that data pre-filled now what we can do,,,
here is we can actually add in instant,,,
or,,,
initial so we can add in initial and we,,,
can pass in the room value so I just,,,
want to make sure I'm doing this,,,
correctly I have some notes that I'm,,,
looking at and that's going to be,,,
instance okay so we pass in the instance,,,
so this form will be prefilled with this,,,
room value now if the values don't match,,,
then that's not going to work but now we,,,
have a form that's pre-filled so before,,,
we actually submit this let's go ahead,,,
and add in an edit value so we'll go,,,
into let's see we'll go into our,,,
home.html,,,
page and let's go ahead and add in an,,,
edit button so we'll just add this,,,
somewhere here let's just add it at the,,,
top here so we'll just do a link here so,,,
a tag and we'll say edit later we'll add,,,
a delete button so we'll just throw in,,,
href and the URL which we didn't create,,,
so we want to create that first the URL,,,
is going to be like create room and in,,,
this case we're going to change this to,,,
update and then this will be,,,
update room and,,,
then update room for the name so we're,,,
going to access it by this value here so,,,
update room in home we're just going to,,,
do URL for the URL tag and then we can,,,
do update Das room and then we need to,,,
pass in the ID so this URL right here,,,
does need an ID so we're going to go,,,
ahead and throw that in so two angle,,,
brackets with a closing forward slash,,,
we'll do Str Str and then we'll pass in,,,
PK so in The View we do need that ID so,,,
that's looking good inside of home we,,,
need to pass in the actual room ID so on,,,
each iteration we get the room and I can,,,
throw in the ID as that parameter so,,,
little bit of boiler plate there and,,,
let's check that out so we see edit here,,,
so I can click on that so let's say I,,,
want to edit one of these we edit learn,,,
or I want to learn HTML I click on that,,,
and that data is now pre-filled so we,,,
see that information now we need to,,,
process this so it's also going to look,,,
a lot like this right here so we'll,,,
specify the method here so we'll just,,,
do if,,,
request,,,
dot method if this is equal to post so,,,
if it's a post method then what we want,,,
to do is get the form we'll just do uh,,,
room room form and as we're processing,,,
this what we're going to do is pass in,,,
the request. poost so the post method,,,
all that data but we need to tell tell,,,
it which room to update because if we,,,
process this information it's just going,,,
to go ahead and add in a new room so we,,,
need to tell it what room to update in,,,
this case we're going to set the,,,
instance just like we did above and,,,
that's going to be this room value so we,,,
specify that here and down here so this,,,
data is going to go ahead and replace,,,
whatever that room value is so now the,,,
rest here is easy we just do if,,,
form. isore valid if that's that's valid,,,
let's save it form. saave and let's just,,,
do return redirect send the user back to,,,
the,,,
homepage all right so let's try this out,,,
we'll go back here go to the homepage,,,
let's say we want to edit test now those,,,
lines are a little bit close here but,,,
we're going to click edit and we're just,,,
going to,,,
do updated we're going to save this,,,
value and here we go we see test updated,,,
and that value is now updated so I can,,,
click on it and see that here so that is,,,
update functionality so we have create,,,
update and we want to close this out,,,
with delete at least a crud,,,
functionality so let's go ahead and,,,
finish this up,,,
so first what I'm going to do is add in,,,
a new link here so we'll go into the,,,
edit,,,
button we'll change this to delete and,,,
until we add in the URL tag I'm just,,,
going to go ahead and clear that so we,,,
don't have any issues here so now we're,,,
going to see a delete link so we have,,,
edit and delete and for this let's see,,,
how do we want to handle this now if a,,,
user goes here we need to send a post,,,
method so we're going to create another,,,
template just to handle deleting so,,,
inside of our app here inside of the,,,
templates base folder we're going to,,,
create a new file and we're going to,,,
call this delete. HTML now this is going,,,
to be a dynamic template meaning that uh,,,
later on when we go to delete a comment,,,
it's going to be the same template to,,,
delete any item inside of our website so,,,
we're going to make this pretty generic,,,
it's just going to extend from the main,,,
template so we'll just do extends here,,,
and all it is is going to be a,,,
confirmation so you click on it it's,,,
going to say are you sure you want to,,,
delete and then whatever item we're,,,
deleting then we have a back button that,,,
we can click or we can we can uh click,,,
on confirm and actually delete that item,,,
so we're going to extend main. HTML and,,,
let's go ahead,,,
and do block content so repetitive stuff,,,
here we're just wrapping,,,
all the content so we have our styling,,,
and our navigation bar later on here so,,,
we'll do n block and then,,,
content and let's see so we're going to,,,
add in a form this form needs to send a,,,
post request the action well we're going,,,
to leave that as an empty string it's,,,
going to send it to the same URL here we,,,
do need to pass in a csrf token because,,,
we are sending a post request so,,,
csrf,,,
token and let's just go ahead and ask a,,,
question so in the form we'll just say,,,
are you sure you want to delete and then,,,
the item so are you sure you want to,,,
delete and then in quotes we're going to,,,
pass this in as obj like that or object,,,
let's just do that actually we'll just,,,
say obj so obj is going to be short for,,,
object and then a question mark so we're,,,
not going to say room because later on,,,
when it's a message this will have to be,,,
message so we're going to pass that in,,,
then down here we're going to add in an,,,
in put,,,
button the type will be submit so this,,,
is going to submit the form and again,,,
we'll add styling so it'll look a lot,,,
better once this is complete so the,,,
submit button here and let's see for the,,,
value I just want to say,,,
confirm okay so we're going to confirm,,,
the delete or we can just use an a tag,,,
here and we'll just say go back here,,,
so let's see how do we want to do this,,,
section so I want to make sure that the,,,
user goes back to the previous page,,,
because if they click on the delete,,,
button from a uh post it's going to send,,,
them back to the post page if we,,,
manually set that URL but what if they,,,
clicked on it from a message so we want,,,
to be able to redirect the user back to,,,
the previous page not a specific page,,,
that they're on so inside of delete what,,,
we could do is just add in hre and we,,,
can actually access the request object,,,
directly inside of the template so we,,,
can do,,,
request. meta so we have some data about,,,
all the URLs and we're going to do,,,
httpcore,,,
refer like that so that's going to send,,,
the user to where they came from so,,,
let's go ahead and check this out so we,,,
have the template okay so I'm getting,,,
ahead of myself we ask a question and,,,
then we are going to have two buttons,,,
here or guess two links so now that we,,,
have the template let's go into URLs,,,
here or into the views and we're just,,,
going to add in a delete view so we'll,,,
do delete or a function delete this will,,,
be,,,
room pass in the request object and then,,,
we're going to return that template so,,,
we'll do return,,,
render pass in request here and we're,,,
going into,,,
basd delete.,,,
HTML now I'm not going to create the,,,
context dictionary or I'm not going to,,,
actually specify the variable we'll just,,,
add this in here and here's what we'll,,,
do so we're going to pass this in so you,,,
access it in the template by the name of,,,
the key so whatever we named it here so,,,
we're going to call it obj and then this,,,
will be the actual room so the room will,,,
be called object in the template so,,,
that's why we did that and now we can go,,,
ahead and get that value so we're going,,,
to pass in the primary key we want to,,,
know which room are we deleting first of,,,
all we want to get the room so we'll do,,,
room,,,
doobs doget that is going to be the ID,,,
value by the primary key so we pass that,,,
primary key in and then we're going to,,,
check the method here so we're going to,,,
do if,,,
request.,,,
poost or if request.,,,
method is equal to post so in a string,,,
value what do we want to do here so in,,,
this case we're going to do room. delete,,,
so there's a lot of different methods we,,,
have the save method there's I guess,,,
different things I'm not going to go,,,
through the list of them but delete is,,,
simply going to remove that item from,,,
the database and delete it so if it's a,,,
post method that means we click confirm,,,
that submitting that form and it's,,,
deleting the room so let's go ahead and,,,
save that and then where do we want to,,,
re redirect the user so we'll just do,,,
redirect,,,
or return redirect and we're going to,,,
send the user back to the homepage if,,,
they deleted that room all right so,,,
let's go ahead and check this out so,,,
we're missing the the URL here so we're,,,
going to copy this one paste that in and,,,
we're just going to do delete room this,,,
is going to be updated to delete room,,,
and then delete for the,,,
name so we have the URL we have the view,,,
we have the template now inside of the,,,
home template we need to add in the URL,,,
tag to send a user there so we're going,,,
to do URL in single quotes we're going,,,
to do delete Das room that's not going,,,
to delete the user or the room it's,,,
going to send the user to the,,,
confirmation page so the room ID will'll,,,
pass that in and let's check this out so,,,
if I refresh this this click on delete,,,
let's try this let's learn JavaScript so,,,
are you sure you want to delete let's,,,
learn JavaScript so we could go back and,,,
it doesn't do anything so it just sends,,,
us back to the last page Let's uh Delete,,,
test updated and if we could,,,
confirm now we see that that's gone here,,,
so we don't see test updated anymore,,,
let's try to,,,
delete let's see I guess we deleted it,,,
we know it's working so we sent that,,,
method it removed it from the database,,,
and it sent us back so that is the,,,
delete method so at this point I want to,,,
build in some search functionality into,,,
our application here so I want to do two,,,
things here the first one is to go ahead,,,
and build in like a sidebar here so this,,,
is that figma design so it's not active,,,
this is going to be some quick search,,,
functionality which means that we can,,,
render out all the topics that we have,,,
here and a user can simply click on one,,,
of these and it's going to filter down,,,
by topics so that's going to throw this,,,
into like the search parameters and,,,
these rooms will be filtered now after,,,
we have that in the search bar here so,,,
if I go too close to that it's going to,,,
go ahead and hover over there but you,,,
see that search bar we're going to add,,,
that in so a user can also type in a,,,
certain parameter based on a topic or,,,
the actual title of a room or maybe even,,,
buy some contents in that specific room,,,
so we want to add in some beginner,,,
functionality here and then we'll,,,
actually advance that as we go through,,,
this section so what we'll do here first,,,
is we're actually going to add some,,,
styling here now as far as the styling,,,
goes it's going to be uh very,,,
minimalistic so don't worry about the Cs,,,
if you don't understand it we're going,,,
to add in only a couple lines here once,,,
we do that uh we're actually going to,,,
add in the template that's going to make,,,
this look better here so let's go ahead,,,
and build this in to start so we're,,,
going back to,,,
home.html and the first thing I want to,,,
do is make sure the entire page is,,,
wrapped in a div here so I'm going to go,,,
ahead and wrap that in a div and we're,,,
going to give this the class of Home Das,,,
container so we're going to have to use,,,
CSS grids for this again don't worry if,,,
you don't know how they work we're going,,,
to just type it out here and it's going,,,
to be very minimalistic,,,
and inside of this home container we,,,
want to create a div here for our,,,
sidebar so this is going to be uh the,,,
sidebar that says browse topics here so,,,
we're we're just going to go ahead and,,,
add that in here so we'll just do an H3,,,
tag and we're going to say,,,
browse wow we can't spell browse so,,,
browse topics okay so that's going to be,,,
our sidebar we'll just add in some kind,,,
of HR tag there so a line and then we,,,
also want to wrap all of this right here,,,
so all the rooms we want to wrap that in,,,
a div here so we're just going to go,,,
ahead and take everything from this link,,,
down to this div and we're going to,,,
paste that into this container so we're,,,
about to have two columns one we have a,,,
main container around everything then we,,,
have a container around our topics and a,,,
container around that list of rooms so,,,
let's go ahead and check this out here,,,
so if I refresh it they're all in line,,,
so we want to create some layouts here,,,
so we'll go ahead and add in some,,,
styling right here so we'll just add in,,,
a style tag and we're going to take that,,,
home container so we're going to get,,,
that class home-,,,
container and let's wrap this so we're,,,
just going to go ahead and create a grid,,,
so we'll just do display,,,
grid and we're going to do grid template,,,
columns and we're going to do one FR and,,,
then three F FR so that's going to stand,,,
for one fraction and three fractions so,,,
technically we created two columns and,,,
this is specifying how many fractions of,,,
the website or the page that this is,,,
going to take up so don't worry about,,,
the details go ahead and create this and,,,
make sure you have two columns here so,,,
if I save this this column on the right,,,
should be wider so if I refresh that,,,
there we go so we see our topics on the,,,
left side and then this section is,,,
taking up three fractions now what I,,,
want to do is list out all the topics,,,
here so we're going to go to this View,,,
and we're first going to go ahead and,,,
make a quick query for all the topics so,,,
we need to go to our models and we need,,,
to import the so this will be the first,,,
type of search that we do and we're just,,,
going to do,,,
topics and this is going to be topic,,,
doobs doall now for now we're just going,,,
to list out everything but if we start,,,
adding in thousands of topics into our,,,
website we want to maybe filter these,,,
down by just the top topics or maybe the,,,
topics with the most rooms but we'll,,,
leave that up to you to figure that out,,,
here so that needs to be topics we want,,,
to make that plural we're going to throw,,,
that into the cont context dictionary,,,
whoops we'll just type that out so we'll,,,
do topics and we'll just do topics right,,,
here okay so we have all of our topics,,,
and we want to render these out in the,,,
homepage so we just want to go ahead and,,,
loop through all the topics so we'll do,,,
for,,,
Topic in topics and we're going to,,,
create that closing Loop so we'll just,,,
do end form not form and in each,,,
iteration we're going to create a,,,
wrapper and in here for now we're just,,,
going to do uh link here so we'll add in,,,
a link and this is going to be the topic,,,
name so we want to be able to visibly,,,
display it and then what we're going to,,,
do is add in a link now this link so,,,
we're going to use the URL tag one,,,
second here so we'll do href inside of,,,
this link we're going to send the user,,,
back to the homepage so the URL is going,,,
to the homepage except for outside of,,,
this curly brace we're going to add in a,,,
question mark then we're going to pass,,,
in the parameter name so that's going to,,,
be q and we're going to represent query,,,
so it can be whatever you want and we're,,,
going to set that to equals to and then,,,
that's going to be the topic name so,,,
we'll just do topic. name and here we,,,
just want to also list out the name I,,,
want to make sure you can see that so,,,
the topic. name and there we go so,,,
what's going to happen here is we're,,,
going to the same page when we're in,,,
this sidebar so we're going to click on,,,
this it's going to send the user to the,,,
homepage and we're throwing in the topic,,,
name now if I go ahead and refresh this,,,
when we click on that that's going to be,,,
added to these parameters right here so,,,
we you can see python if I go to Jango,,,
web development JavaScript that's going,,,
to be added in in the parameters and we,,,
can get this value right here inside of,,,
the view here so we're going to get that,,,
value and use that to filter down some,,,
data here okay so now that we have that,,,
I also want to make sure that when we're,,,
filtering this down I can also refresh,,,
the filter and go back to get all the,,,
values so in this case we're going back,,,
to the main URL and we're just going to,,,
specify,,,
all so if I go ahead and refresh that so,,,
if I go to Python and then Jango and,,,
then back to all it just gets rid of,,,
that and we're back on the homepage so,,,
in the view for the actual functionality,,,
we can use the filter method so if I,,,
don't do anything here it's going to,,,
work just like the all method it's just,,,
going to go ahead and uh get back all,,,
the rooms because we haven't added any,,,
parameters now what I'm going to do here,,,
is create a variable and this is going,,,
to be q and Q is going to be equal to,,,
request.get so the get method and then,,,
we're going to use the G function here,,,
and and we're going to get Q here so Q,,,
is going to be equal to whatever we,,,
passed into the URL now what I could do,,,
is just go ahead and go into the topic,,,
so I can go to the model and get the,,,
topic and then I can actually query,,,
upwards so to the parent so double,,,
underscore and then say topic name is,,,
equal to Q now we're going to get a,,,
couple issues here so if I save this,,,
let's check this out here so it's going,,,
to filter this value down and where we,,,
should get back this data so on the,,,
first search we have an issue here here,,,
and that is because we don't have any,,,
parameters here and none of the,,,
parameters fully match the specific,,,
topic that we're looking for so it just,,,
gives us back nothing but if we go to,,,
JavaScript we can see JavaScript if we,,,
go to web development we can see back to,,,
results here so we need to create some,,,
kind of condition here so the first,,,
thing is we're going to use an inline if,,,
statement so we're going to check if the,,,
request method has something and we're,,,
going to say if request.get,,,
do getet and then we're getting Q so if,,,
Q is not equal to,,,
none then we're going to go ahead and,,,
make sure Q is the parameter else we can,,,
say Q right here Q is going to be equal,,,
to an empty string so we'll throw that,,,
in here and instead of setting the value,,,
directly because at this point it's just,,,
going to set it to nothing if we have,,,
nothing in the filter still won't work,,,
we can use a value called double,,,
underscore I contains well the value is,,,
actually just uh I contains not double,,,
underscore but that's how we have to add,,,
that in so what this means is that it's,,,
going to make sure that whatever value,,,
we have in the topic name at least,,,
contains what's in here so that means,,,
that uh let's say we start typing out a,,,
a specific value like Python and we only,,,
add in py into the search parameter so,,,
it's going to see that it contains at,,,
least those two letters and then it'll,,,
run that filter and that will return a,,,
positive match now the I there just,,,
means that we can make that case,,,
insensitive so that that means that if,,,
it's a capital P or lowercase one it,,,
won't make a difference we also could do,,,
contains like that and that will be case,,,
sensitive now there's also other options,,,
like starts with ends with and so on so,,,
there's different opportunities here but,,,
we're going to leave it at that so let's,,,
try this one more time we'll go ahead,,,
and clear that and here we go so we get,,,
back everything so that means that we,,,
don't have a parameter and technically,,,
all of these topic names match that now,,,
if I go ahead and go to JavaScript web,,,
development that still works and I also,,,
could manually start typing this in and,,,
say we and go ahead and search that and,,,
that'll work because we see web,,,
development and that matches this query,,,
now we want to add in an actual search,,,
bar so you see how I did this manually,,,
where I just added in that search well,,,
we don't want a user doing that and we,,,
also want a user to be able to do that,,,
from their own search bar so they don't,,,
want to have to manually do that or be,,,
limited to these links right here so,,,
what if a user wants to search by a,,,
specific name or maybe by somebody that,,,
created a room let's say you have a,,,
favorite uh room Creator or a host and,,,
you want to be able to find them so you,,,
can say something like U go ahead and,,,
find me all rooms made by Dennis so,,,
you'll type in my name and it would,,,
display those so we're about to make,,,
this Dynamic so in the header bar here,,,
so we're going back to the nav bar let's,,,
go ahead and create a search form so,,,
just underneath the link right there,,,
we'll create a form here and this form,,,
is going to go ahead and set the method,,,
to get and the default method is get so,,,
we technically don't have to set that,,,
and the action well this is going to,,,
send the user to the homepage so we're,,,
specifying the URL that's going to the,,,
homepage and then we want to add in the,,,
input field we don't need a csrf token,,,
because this is a get method the type,,,
here is going to be,,,
submit so we'll add in submit and then,,,
the value well we're not actually going,,,
to have a submit form I just realized I,,,
would rather have the user just hit,,,
enter rather than clicking a button so,,,
let's just do this we'll specify the,,,
type as text so this will actually be,,,
the input field but I do have to give,,,
this a name so we'll specify the name as,,,
Q so it's going to take whatever we have,,,
here and throw it into that URL with Q,,,
before that so that's all we need at,,,
this point so now what we can do is,,,
actually run that search so just before,,,
I do that I actually want to add in a,,,
placeholder and we'll just say search,,,
rooms so we want to prompt the user and,,,
that'll be dot dot dot and let's make,,,
that a capital R so we're going to,,,
search the rooms let's check this out,,,
here so if we go back up here we're,,,
going to see this filter here so that's,,,
in the nav bar so that means that if I'm,,,
on another page here it will take me,,,
back here so let's try this let's go,,,
ahead and search for JavaScript room so,,,
we'll just do Java and then we'll start,,,
typing in script but we won't finish it,,,
if I hit search now it's going to match,,,
this right here and there we go now now,,,
if I'm inside of a different room let's,,,
say I go to um let's go to viewer room,,,
and I start typing in Java like that or,,,
JV it's going to go back to the homepage,,,
and that filter works now I want to show,,,
you one more thing here and that is how,,,
we can make Dynamic values here or,,,
dynamic searches so at this point we're,,,
only searching by the topic name and I,,,
mentioned earlier we want to search by a,,,
name of a user or a room and so on and,,,
technically we could chain these filters,,,
down here so we could say something like,,,
like a comma there and then we'll just,,,
add in let's see we'll do name of the,,,
room so now we have name that's going to,,,
the,,,
room and we can say the room uh or the,,,
name contains whatever value now the,,,
only issue with this is that that means,,,
this search parameter has to match,,,
everything now we do have a method it's,,,
called a q lookup method that Jango,,,
gives us and this is going to allow us,,,
to add in things like and or or,,,
statements into that search and I'll,,,
show you what I mean by this so let's,,,
add this above here and we're just going,,,
to make a quick import so we're going to,,,
do from,,,
Jango dot let's see where are we getting,,,
this from we'll do DB do models and then,,,
we're going to import q and that's going,,,
to be a capital Q now with Q we can,,,
actually wrap these search parameters so,,,
we're going to add in a capital Q add in,,,
the,,,
parentheses and then we can go ahead and,,,
just chain this so I'm going to fix some,,,
indentation here and I can add in an and,,,
statement so I can do and and then go,,,
ahead and write in Q down here so we'll,,,
do q and we'll just say,,,
namore I contains and then we'll throw,,,
in the search parameter now the only,,,
issue here is that both of the values,,,
here have to contain that so I can,,,
actually do an or statement so I can add,,,
in a pipe and that means or so that,,,
means the search parameter has to match,,,
this one or this one so I can throw in,,,
one more we'll copy and paste that,,,
actually,,,
and let's see let's go by,,,
description so we'll do description so,,,
description contains the search,,,
parameter so we'll close out that,,,
Closing one there and that's it so now,,,
we can search by three different values,,,
so if I go here let's go ahead and clear,,,
this what just happened here I contains,,,
it looks like I misspell contains,,,
somewhere okay so we need to fix that,,,
and let's go back here refresh that,,,
okay so name double underscore and then,,,
this one has to be a double underscore,,,
okay now that should work so if I,,,
refresh it still um supported contains,,,
okay I just have a bunch of misspells,,,
one second contains so description I,,,
contains name I contains that should be,,,
good all right sorry about that okay so,,,
what if we don't want to search by the,,,
topic we want to search by a title so,,,
we'll just start typing in i w to um,,,
let's say we only remember like the star,,,
of a room name but we don't remember the,,,
full name here so we can click that,,,
right there and there we go so we can,,,
search by the room name and then later,,,
on if I add in a user we can search by,,,
the user so that's it for the search,,,
functionality I just want to throw in,,,
one more thing here and I want to be,,,
able to get the room count here so the,,,
actual count of how many rooms we have,,,
here so if we go back to the figma,,,
design we see steady rooms and then we,,,
can see total rooms found near you in,,,
our case I'm going to change that up a,,,
little bit um I actually don't like how,,,
that looks so we'll go ahead and do,,,
something like this so we'll go into the,,,
home container and we'll take the,,,
container for the feed here just above,,,
our create room link we'll go ahead and,,,
add in,,,
H5 and we'll just,,,
do let's see we'll just do room undor,,,
count so we're going to pass this in in,,,
a second and we'll just say blank rooms,,,
available like that okay so in the view,,,
we need to pass this in so we'll just go,,,
ahead and take this room here so these,,,
are going to be filtered down and in,,,
Django we can just go ahead and do room,,,
uncore count and then we can get rooms,,,
so room count is equal to rooms. count,,,
now in Python you could use the Leen,,,
method and just wrap that and that's,,,
going to give you the length of a list,,,
in this case we get the length of a,,,
query set and this actually works faster,,,
than the python uh Len method or Len so,,,
we're going to do that we'll pass that,,,
in,,,
and let's check this out here so if I go,,,
ahead and refresh that now we see we,,,
have one room available if I clear all,,,
of those we see three rooms so as a user,,,
searches we see two rooms available for,,,
this topic right here and that's exactly,,,
how we wanted it to be so we always see,,,
the room count now we're going to talk,,,
about authentication so at this point,,,
I'm going to build in a user login form,,,
user registration and also log out,,,
functionality now before we get into,,,
this I want to talk about how Jango,,,
deals with this so,,,
Jango by default has session based,,,
authentications and how this works is,,,
it's the same as what we have in this D,,,
Jango admin panel so when we go to this,,,
admin panel when we provide our,,,
credentials this gets sent to the,,,
backend and in the back end there is a,,,
database table called sessions here so,,,
if we go to installed apps inside of,,,
settings.py let's see we'll do settings,,,
here we see our sessions here and if you,,,
go and actually use something like PG,,,
admin and postgress you'll be able to,,,
see this,,,
so when a user logs in this is sent to,,,
the back end and a session token is,,,
created and this stores information,,,
about a user so once that user is,,,
authenticated we now know when this user,,,
logged in who this user is and all this,,,
information about them so at this point,,,
let's go ahead and do inspect element,,,
and we're going into application and,,,
then we're going to go into cookies here,,,
so depending on what browser you use,,,
it's going to look a little bit,,,
different but we want to go into cookies,,,
so we're going to clear these on On's,,,
out right here and we're going to log,,,
this user in so that session will get,,,
created in the database and then we're,,,
also going to take that session and,,,
we're going to store it in the browser,,,
now as we navigate through pages on our,,,
website we don't have to keep logging in,,,
that session is going to be stored and,,,
on each request it's going to be sent to,,,
the backend and we're going to check is,,,
this user actually someone that's in,,,
this website are they allowed to be here,,,
are they authenticated and what,,,
permissions do they have so if I hit,,,
enter here so if I submit this login,,,
form where we're going to see a session,,,
get created I don't know what the heck,,,
happened okay so I removed the csrf,,,
token so that's going to be there by,,,
default Jango does that for us so we're,,,
going to hit log in and look at this so,,,
I'm logged in now and I see the session,,,
ID so here's the value here it's this,,,
token right here so I want to make sure,,,
you can see that and this is now stored,,,
inside of the cookies here in the,,,
browser so we went into application and,,,
then cookies on each request we double,,,
check this session or Jango will take,,,
care of that and then it lets me persist,,,
here so let's me go through all the,,,
pages like when I go to this next page,,,
we quickly check the session and it made,,,
sure hey this person's allowed to be,,,
here so Jango has a built-in by default,,,
and what we're going to do is we're,,,
going to build this in ourselves so,,,
we're going to use that authentication,,,
system and we're going to log users in,,,
here so let's go ahead and close out the,,,
admin panel because we don't want users,,,
to uh have to use that we want to have,,,
our own,,,
authentication so for this let's go,,,
ahead and start by building out a,,,
template and we're going to call this,,,
registration login so we'll just do,,,
login,,,
uncore registration or register so login,,,
register. HTML so we're going to have,,,
one template for a login and register,,,
form and then the form itself will,,,
change based on uh what page the users,,,
on whether they're logging in or trying,,,
to register so we're going to go ahead,,,
and do some boiler plate here I,,,
accidentally hit caps lock we'll just do,,,
extends here and we're going to extend,,,
main.,,,
HTML trying to type faster and I start,,,
messing up here we need to create the,,,
block tags we've done this a lot so,,,
we'll just do block,,,
content and then close that off here and,,,
we'll just,,,
do end block content okay so in here I'm,,,
going to create a div here so I want to,,,
wrap the entire,,,
website so we'll do,,,
div and it looks like I missed something,,,
here and now let's go ahead and create a,,,
form here so this is going to be our,,,
login form now Jango does have a,,,
built-in login form there's different,,,
ways of doing this and they also have a,,,
built-in registration form what I'm,,,
going to do here is just use my own,,,
login form it's going to have two fields,,,
of a username and password later on,,,
we're going to talk about doing this,,,
with an email instead of a username and,,,
uh we're just going to submit it now for,,,
the register form that will just be,,,
generated for us so the method here well,,,
this has to be a post method we're going,,,
to send data back to our view and the,,,
action well we're going to leave that as,,,
an empty string and we need to add in a,,,
csrf,,,
token Okay so now for the input value we,,,
want,,,
to go ahead and tell the user to log in,,,
so the type will be,,,
submit and then the actual value well,,,
we're just going to say log in and let's,,,
create the two Fields here so we're,,,
going to create an input field this one,,,
is going to be the type of let's see,,,
text here so that's going to be the,,,
username the value is going to be,,,
username so we need to know the name of,,,
the field when it's submitted and we'll,,,
just say placeholder,,,
enter user name,,,
here okay I also want to add in a label,,,
here so we'll just do label and we'll,,,
just say,,,
username and we'll throw that in and,,,
let's just copy this right here we'll,,,
add this down here so label is going to,,,
be password and let me turn off the fan,,,
really quick it's actually getting cold,,,
just wanted to turn that off I'm,,,
freezing in here okay so add in a,,,
password the type is going to be a,,,
password field and this is going to make,,,
sure that there's the dots instead of,,,
actually displaying the value and then,,,
the value itself will be password so we,,,
want to be able to get these in the,,,
backend and then enter,,,
password okay so we have our form we,,,
just have a simple form no styling here,,,
and extends the main template now inside,,,
of our views here we're going back into,,,
the views and we're going to create a,,,
view for this login page so let's go,,,
ahead and add this above our homepage so,,,
it's kind of like the first step in this,,,
process and I'm going to call this login,,,
page page now do not call this view,,,
login because we have a function that,,,
we're about to use it's a built-in,,,
function called the login and there's,,,
going to be a conflict if you use that,,,
name so try to do something else uh in,,,
this case I'm just going to call it,,,
login page you can call it login view uh,,,
just not login on its own so we'll go,,,
ahead and return that template,,,
render and we'll throw in the request,,,
object render that template so that's,,,
going to go into Bas and we're going to,,,
get log inore,,,
register.,,,
HTML and let's go ahead and actually,,,
pass in the context dictionary and we'll,,,
create that in a second so,,,
context set that up,,,
here okay so we need a URL now so we'll,,,
go ahead and put that up here so we'll,,,
put that at the start and add in the,,,
closing comma and this is going to be,,,
login with the closing forward slash and,,,
then views. login page now the name,,,
we'll just do login like that and that's,,,
going to work here so leaving the name,,,
like that it's good that works here and,,,
at this point I want to let's see I want,,,
to render this link at the or inside of,,,
the navigation bar so we'll just go,,,
ahead and bring this in let's see we'll,,,
just do this above the or just after the,,,
form let's just do this right here so,,,
we'll add in a link,,,
here and this is going to be to log in,,,
and the URL is going to point to login,,,
here so we'll add in the URL tag here,,,
and we're going to the login,,,
page okay so let's check this out here,,,
so we see login if I click on that,,,
that's going to take me to the login,,,
page I see the username uh not sure why,,,
that's the case enter username I guess,,,
okay so I just use that value let me,,,
double check why that's happening that,,,
looks a little bit odd so the value is,,,
username and,,,
okay so this needs to be the name,,,
actually sorry not the value I don't,,,
know why that why I did that that's,,,
that's an issue right there so now I see,,,
the username so if I remove that there,,,
we go okay so we have the form and now,,,
we want to be able to log in a user so,,,
at this point when we send this,,,
information we need to extract these,,,
values so earlier on we did a Model form,,,
or we used a model form for this and,,,
that kind of took care of everything,,,
here so instead of having that done,,,
manually and using the user login form,,,
that's already built in we're going to,,,
do all of this by hand so up here we're,,,
first going to check the method here so,,,
we're going to do if,,,
request. method if this is equal to post,,,
so that means the user entered their,,,
information and logged in here well we,,,
want to be able to get the email and,,,
we're just going to go ahead and go into,,,
request. poost doget and we're going to,,,
get the not email but the name here or,,,
username,,,
okay so that's going to be,,,
username so after that we also want to,,,
get the password so we'll just do,,,
password and that's going to get the,,,
password so these two values will be,,,
sent from the front end so we're just,,,
getting the values here and once we get,,,
those I want to First make sure that,,,
this user exists so I'm going to use a,,,
try catch block so we're going to do try,,,
and we're going to say user and we'll,,,
just try to query that user so let's see,,,
I need to import that user model so go,,,
into models here and I imported that,,,
built-in user right here we'll bring,,,
that into our,,,
views and let me close out the,,,
navigation bar so I bring in the user,,,
and we're going to check if this user,,,
exists so user doobs doget and we're,,,
just going to go ahead and say username,,,
is equal to username so I want to make,,,
sure this user exists if it doesn't we,,,
want to throw some kind of error so,,,
we'll just go ahead and do accept here,,,
and at this point instead of working,,,
with something like flash messages we're,,,
going to go ahead and just,,,
render let's see actually how do I want,,,
to do this I actually might be able to,,,
use Flash me flash messages so let's try,,,
this let's actually look up D Jango,,,
flash messages I wasn't planning to do,,,
this but let's go ahead and try this so,,,
these messages are really cool because,,,
they store this uh inside of D Jango as,,,
far as uh I think they're in the,,,
sessions and they only are stored inside,,,
of One browser refresh so we won't go,,,
into the details here but what I'm going,,,
to do here is just grab these messages,,,
here so I'm going to grab this,,,
import actually let's see so we're going,,,
to import this like that so from Jango,,,
do contrib import,,,
messages and we're going to bring this,,,
in right here so just underneath render,,,
and redirect and I'll show you what this,,,
means or what this is in a second so,,,
then we need to be able to add in a,,,
message here so we can go ahead and do,,,
messages Dot and then we can specify a,,,
type of message so if a user doesn't,,,
exist we want to be able to throw in an,,,
airor message so I'm going to take in,,,
this one so we're going into messages. a,,,
that's going to give us the type of,,,
message we throw in the request and then,,,
the actual message that we want to,,,
Output so we'll bring this in right here,,,
if a user doesn't exist we'll throw in,,,
an air message and we'll say user does,,,
not,,,
exist okay so like that so if a user,,,
doesn't exist we're going to throw in,,,
that message and let's try this really,,,
quick so we're not doing much here we're,,,
just going to go ahead and try this so,,,
let's say we want to throw in a user,,,
that isn't in our database we're going,,,
to click that and I just realize we need,,,
to Output this flash message so now to,,,
actually output it we're going to go,,,
down here inside of the Jango,,,
documentation and let's copy this entire,,,
statement here so we're going to see if,,,
we have any messages in our template if,,,
we do we're just going to go ahead and,,,
output all the messages so we're going,,,
to bring this,,,
into let's see I'm going to bring this,,,
into the main template,,,
here so we'll add this to main. HTML,,,
sorry if I'm going a little bit fast I,,,
didn't plan for this part but I do want,,,
to search this or I do want to show you,,,
this so underneath our Navar let's add,,,
this in so that means anywhere we have a,,,
flash message it will appear so messages,,,
are going to be passed into our template,,,
here just like that so we can see the,,,
messages here we can access the messages,,,
like this so we see if we have any,,,
messages then we just output those,,,
messages here and there's that weird if,,,
statement if you just copy and paste it,,,
directly that's what it's going to look,,,
like so let's actually just take,,,
out this tag here and let's just say,,,
I'll put the message here and that's,,,
it so that'll clean it up a little bit,,,
better so we have a UL tag if we have a,,,
message we output it so we check if we,,,
have them there we go so let's try this,,,
one more time so we'll go ahead and try,,,
to refresh this so if I type this in and,,,
hit login it says user does not exist,,,
and then if I try to refresh that that,,,
only appears for that page so we have a,,,
message that gets that tells us what's,,,
happening here and that's a little bit,,,
convenient there to be able to actually,,,
just output this instead of not knowing,,,
what's happening so we're just going to,,,
check if this user exists if they don't,,,
we're going to Output that error now if,,,
the user does exist we're going to go,,,
ahead and continue here so we're going,,,
to go ahead and do user and we're going,,,
to use the authenticate method so,,,
authenticate like that and this is a,,,
method that we have to import here so so,,,
we're just going to go ahead and import,,,
this and this is going to be from D,,,
Jango do,,,
contrib me spell Django there so Jango,,,
do,,,
contrib doo and we're going to import,,,
authenticate and we're also going to,,,
import the login method and this is why,,,
we couldn't name that specific view,,,
login and we also want to import the log,,,
out method so we're going to use,,,
authenticate and once we make sure that,,,
we have a user we want to uh,,,
authenticate this user so we want to,,,
make sure that whatever the credentials,,,
are for this specific user we want to,,,
make sure that they're correct so we'll,,,
just go ahead and do authenticate we'll,,,
pass in request here and then we're,,,
going to pass in the username and we'll,,,
throw in the username that we got here,,,
so from here and we're going to throw,,,
in the password so we're going to,,,
authenticate the,,,
user so what authenticate is going to do,,,
is it's either going to give us an error,,,
or it's going to return back a user,,,
object that matches these credentials so,,,
we have a user now if the user,,,
credentials were correct if they weren't,,,
well it's going to give us an error so,,,
now we're just going to go ahead and do,,,
if user is not none so that means if we,,,
got a user so it's either a user or none,,,
then let's go ahead and log in this user,,,
so we're going to use the login method,,,
so we'll do login and for the login,,,
method all we do is pass in the request,,,
object and then the user and log in what,,,
that's going to do is G it's going to go,,,
ahead and add in that session in the,,,
database and then inside of our browser,,,
and the user will be officially logged,,,
in so once the user is logged in we'll,,,
just go ahead and do,,,
return redirect and we want to send the,,,
user to the homepage so that's going to,,,
log in a user so let's recap this we get,,,
the username and password we check if,,,
the user exist if the user does exist,,,
somewhere we make sure that the,,,
credentials are correct we get the user,,,
object based on the username and,,,
password we log a user in this creates a,,,
session in the database and the browser,,,
and then we redirect a user now we want,,,
one more thing here if the user is not,,,
logged in we'll just say else and we're,,,
going to create another flash,,,
message so we're going to write in else,,,
and we'll just say,,,
username so username,,,
or password does not exist let me scroll,,,
up here so username or password does,,,
does not,,,
exist okay so let's check this out here,,,
so if I go in here we'll refresh it,,,
we're going to enter in our credentials,,,
mine are already entered in there so go,,,
ahead and write your stuff in there log,,,
in and now I'm redirected to the,,,
homepage so if I go here go into,,,
application we'll check out that session,,,
I can just remove the session ID and,,,
that's automatically going to log my,,,
user out here so if I go ahead and,,,
refresh that go to the home page page,,,
the user is not there now we're not,,,
doing anything like restricting a user,,,
from certain pages like that so uh we,,,
haven't done that just yet we'll take,,,
care of that in a bit here so if I log a,,,
user in session gets created and we,,,
redirect a user now what if I want to,,,
log out a user so let's go ahead and add,,,
that in here so we can actually access,,,
the request object directly inside of a,,,
template so we'll go into the navigation,,,
bar and we're going to write in a,,,
condition here so we're going to first,,,
going to check if a user is,,,
authenticated so we'll do if user so we,,,
can access or if,,,
request. user. isore,,,
authenticated so if a user is,,,
authenticated then let's go ahead and,,,
output the log in button or the log out,,,
button so we'll add in another link and,,,
we're just going to say log out and,,,
we'll fix out or we'll fix up that URL,,,
in a second so we'll go ahead and close,,,
that end if statement or the if,,,
statement so we'll just do end if and,,,
then we're going to add in an else,,,
statement so we'll just do else so if a,,,
user is authenticated that means we have,,,
a session in the browser then go ahead,,,
and add in the log out button if the,,,
user is logged in or logged out or not,,,
authenticated then go ahead and prompt,,,
him to log in so let's go ahead and,,,
refresh that so we see a log out button,,,
right now so we want to be able to log,,,
out a user now so let's go ahead and,,,
go back into our views and we're going,,,
to create a log out View and this is,,,
going to be just a view we don't need a,,,
template for this and we already,,,
imported the login or the log out,,,
function so we'll go down here just,,,
underneath login we'll create a method,,,
here and we'll just say log out user,,,
like that so we'll throw in,,,
request and this method is just going to,,,
be a get request so we'll just go ahead,,,
and return redirect and we're going to,,,
send the user to the homepage so let's,,,
just go ahead and do that now all we,,,
need to do here is use the log out,,,
method pass in request and this is going,,,
to delete that token therefore deleting,,,
that user so in the URLs here let's go,,,
ahead and bring this in we'll copy and,,,
paste,,,
login and we'll just do log out like,,,
that and then we can do logout,,,
user and then the name will be log out,,,
and now we can go to the navigation bar,,,
and specify the URL tag to point to log,,,
out so we'll just do URL and,,,
then log out okay so let's give this a,,,
shot here so if I go ahead and go to the,,,
homepage we're logged in if I go to log,,,
out it's going to clear the user,,,
information and now we're officially,,,
logged out so I can go to login I can,,,
log in the user right here and we see,,,
that be updated here so at this point,,,
what I want to do is restrict some pages,,,
here based on the user user and their,,,
status of whether they're logged in or,,,
uh just a user browsing through the,,,
website here so we have the login Lo log,,,
out functionality but it really doesn't,,,
do much for us here so the first thing I,,,
want to do is make a quick import here,,,
and actually add in a decorator above a,,,
view that I want to restrict now with,,,
class based views we use mixins for this,,,
uh we can also use uh middleware for,,,
this there's a lot of different ways to,,,
actually restrict a user but we're going,,,
to use Simple decorators for this,,,
functionality so the first thing I'm,,,
going to do is import this decorator so,,,
we're going to go into D Jango do,,,
contrib so from D Jango do contrib and,,,
we're going to go into,,,
doo. decorators and then we're going to,,,
import login required now the page that,,,
I want to restrict here is going to be a,,,
create page so the create room here uh,,,
at one point I actually want to remove,,,
the button completely if a user is not,,,
logged in or maybe just redirect them I,,,
don't know exactly how I want to figure,,,
this out here so uh let's just go ahead,,,
and do login required so that's that's,,,
all we have to do here now this doesn't,,,
check the type of user what permissions,,,
they have that's going to be a little,,,
bit more functionality but at this point,,,
once we add this decorator a user that,,,
is not authenticated if their uh session,,,
ID is not in the browser and it's not,,,
credible they will be simply redirected,,,
now we can specify where we want to,,,
redirect that user in this case I want,,,
to redirect the user to the login page,,,
so let's let's go ahead and try this,,,
what the heck did I do there so I'm,,,
going,,,
to oh I clicked on that decorator okay,,,
so I'm going to save that we have the,,,
login required decorator above the,,,
create view method so I want to log out,,,
here and it looks like because of that,,,
thing that I just did had some kind of,,,
big error so let me clear that and,,,
restart the server so log in required,,,
Let's see we have a login URL and I need,,,
to remove that forward,,,
slash okay login required got an unexp,,,
expected argument uh this needs to be,,,
login URL sorry about that okay so now,,,
we have a login URL and that issue goes,,,
away so we'll go back to this page here,,,
we log out a user and if I try to go to,,,
create room we're redirected back to the,,,
login page and for now I'm just going to,,,
leave it like this actually so I,,,
actually like this because uh we want to,,,
prompt a user to create a room but if,,,
they're not registered we want to,,,
encourage them to either log in or,,,
register which which uh we'll add here,,,
in a second so once we have that I also,,,
want to add in login required to update,,,
room so I don't want just anybody,,,
updating a room and I also want to make,,,
sure that only authenticated users can,,,
delete a room so that's how we can,,,
actually restrict users now in this case,,,
in theory if I know somebody's room ID I,,,
can just log in and I'll be allowed to,,,
go ahead and update their room so I want,,,
to restrict a user so let's see how do I,,,
want to do this so at this point I'm,,,
just going to write in a condition right,,,
here there's a bunch of different ways,,,
of doing this uh we'll just say if,,,
request. user is not equal,,,
to let's see so we can do if request.,,,
user is not equal to,,,
room. user then we just want to,,,
return we'll just do return um let's see,,,
we'll just do some kind of HTTP response,,,
so I'm going to import that really quick,,,
I know I removed it but we'll just add,,,
that in right here so we'll just do from,,,
Jango HTTP import HTTP response so if a,,,
user is not the correct user meaning,,,
they're not the owner here let's just do,,,
return and then we'll just do HTTP,,,
response and they will'll just say uh,,,
you are not allowed,,,
here okay so if they're not the owner,,,
we're going to yell at them here so if,,,
they're not the room user so if they're,,,
not equal to that let's go ahead and,,,
stop them so update room let's check,,,
this out here so we'll log in log in as,,,
Dennis and let's just try to edit Tim's,,,
room so as a super user at some point we,,,
will want to add in functionality so an,,,
admin can edit this so let's see which,,,
room does Tim own so we have Tim right,,,
here so we'll go to edit and room object,,,
has no attribute user so we'll do room.,,,
host like that so that's what it was so,,,
we just want to check that again we'll,,,
go ahead and see this so I am not,,,
allowed here because that's Tim's room,,,
and let's say I want to edit my own well,,,
I'm allowed to do that so we could do,,,
something like that and we can also say,,,
if request. user is not the host,,,
or,,,
request. user or we can say maybe and,,,
and we can just say if the user is not a,,,
super user so I won't worry about that,,,
and we're just going to add in this,,,
check here for update and we're going to,,,
add this for delete okay so now only the,,,
correct user can update this now let's,,,
see at this point I should probably hide,,,
this button completely here here from,,,
any user that's not the owner so we see,,,
my rooms right here I'm logged in as,,,
Dennis we'll go to Tims and we're going,,,
to remove this stuff right here so we'll,,,
go ahead and go into the,,,
homepage so we'll close out the nav bar,,,
all these links that I have open here,,,
we'll close out URLs here and let's go,,,
to home and I just want to make sure,,,
that if I'm not the user I don't see the,,,
delete and edit button so I'm just,,,
getting rid of this right here so we'll,,,
go up here let's see so that is inside,,,
of rooms and we'll just say if the user,,,
is not authenticated remove it so if,,,
user dot or if,,,
request. user is not equal to the owner,,,
let's just do that let's just do,,,
room. host then let's just make sure we,,,
hide this information so let's see if,,,
the user is the host so we'll just do if,,,
if the user is equal to the host then,,,
we'll display that information so we'll,,,
just do end if like that okay so that,,,
should hide that information now so,,,
let's try this here so we'll go ahead,,,
and refresh it so now Tim can only edit,,,
his I can only edit mine or delete mine,,,
and we are good to go okay so let's see,,,
what else do I want to do here now I,,,
also maybe want to restrict a user from,,,
going to the login page so at this point,,,
if I'm already logged in and I try to go,,,
manually to this URL maybe we can just,,,
redirect a user here so um we don't want,,,
a user Rel loging in so we'll just go,,,
ahead and add this functionality in here,,,
we'll go,,,
into,,,
login and we'll just do if,,,
request. user. isore,,,
authenticated so this is a method that,,,
really helps us here,,,
authenticated okay can't spell that word,,,
uh we'll just do return redirect and,,,
let's just send the user to the homepage,,,
okay so if I'm logged in I shouldn't be,,,
allowed to be on this page okay looks,,,
good here all right so what do we want,,,
to do next here so only the owner can,,,
update and delete their information we,,,
restricted Pages here um only a user can,,,
edit their own post now let's go ahead,,,
and move to registration so for,,,
registration let's log out here we'll go,,,
to the login button here and we want to,,,
add in a link for that Reg register page,,,
so we'll first go to login register so,,,
that template and we're just going to go,,,
ahead and add this inside of this div,,,
right here so we'll create another div,,,
actually so we'll just wrap this for the,,,
login page and then we'll have a,,,
register page so I'm just going to copy,,,
this div right here we'll paste that,,,
down here and we're just going to change,,,
up the contents here so we'll just say,,,
register for this,,,
button okay and then for the actual form,,,
Fields we're going to autogenerate that,,,
so we don't need that and we want to,,,
write a condition so at this point both,,,
form fields are going to be rendered,,,
here so we want to hide this in a second,,,
so what we can do here is we can,,,
actually pass in like a page name so,,,
we'll just do page and this is going to,,,
be the login page so we're just going to,,,
specify a variable here in a string,,,
value and we'll just say login why can't,,,
I write that,,,
login and there we go okay so we're also,,,
going to take this page throw this into,,,
the context dictionary paste that in,,,
right here that's the login page and,,,
then we're going to create a register,,,
page too so register will be underneath,,,
log out and we're going to call this,,,
register user okay we'll throw in,,,
request here we'll specify the page the,,,
page is going to be,,,
register,,,
return render we'll pass in request and,,,
then the,,,
template okay so we're returning back,,,
the same template and we're passing in,,,
the page now I just want to make sure to,,,
create a view for this so we'll copy,,,
login and we're just going to do,,,
register we'll bring in register right,,,
here and this is going to be register,,,
page so did I call the view there so,,,
we'll do register page like that,,,
so I can copy that save it bring that to,,,
the URL paste that in save it and now we,,,
have two links so on or in the template,,,
here we are going to point the user to,,,
the register page here if they're not or,,,
if they want that option here so in,,,
figma here we have a design for the,,,
register page so on the login page we,,,
ask haven't signed up yet and then we,,,
have a signed up or a sign up link and,,,
then on the register page we'll say,,,
already signed up and we're going to,,,
point the user back to the login page so,,,
let's go ahead and ask that question,,,
right here so we'll ask that after the,,,
form and we'll,,,
say haven't,,,
signed up yet so we'll ask a question,,,
and then we're going to add in a link,,,
here and that's pointing back to this,,,
page and we're just going to say,,,
register or sign,,,
up guess that's two words and we're,,,
going to create the link itself and,,,
we're going to point that to the,,,
register,,,
page okay so in this case we're going to,,,
take this same question and we're going,,,
to put that underneath the register form,,,
and we'll say already signed up so we're,,,
asking the,,,
question,,,
and we're just going to send the user,,,
back to log,,,
in and this will be the login page okay,,,
so we passed in the page value here for,,,
a reason so this case all I'm going to,,,
do is check if the page is login if it,,,
is we'll render out the login form and,,,
if it's not we'll render out the,,,
register form so we'll just add in the,,,
question right here so we'll just,,,
do if page is equal to,,,
login then we'll just do end,,,
if end if we'll close it and then we'll,,,
add in the L statement between the two,,,
divs here so we're just going to,,,
separate,,,
those just do else,,,
and let's save that so just a little bit,,,
of prep work let's go back here and,,,
let's check this out so haven't signed,,,
up we go to we go to this page and then,,,
already signed up we can go to the login,,,
page now Jango has a user creation form,,,
that already makes a lot of this easy,,,
for us so we'll go ahead and add this in,,,
here so we'll just go ahead and make an,,,
import here really quick so let's see I,,,
need a second here uh I just need to,,,
remember what the actual import was so,,,
we'll go back to the Views so we have,,,
the template the UR LS here and let's go,,,
back to the views or views.py and let's,,,
just import this so this is going to be,,,
from Jango do,,,
contrib,,,
doo. forms and we're just going to,,,
import the user creation form so it,,,
works a lot like the model forms that,,,
we've already used so we're actually,,,
going to customize this form later but,,,
for now we're just going to work with,,,
the defaults here so we'll copy this and,,,
we're going to bring this down into the,,,
register View so we'll go ahead and pass,,,
in form and this is going to be user,,,
creation form just pasted that in and we,,,
want to pass this into the template here,,,
so we'll just do form or the context,,,
dictionary so we'll just throw that in,,,
right here and we'll throw in,,,
form okay so at this point I guess we,,,
don't actually need the register page,,,
variable because we already have that,,,
for login and register shows in the else,,,
statement so we're just going to pass s,,,
the form into the context dictionary now,,,
let's take this form value and let's go,,,
into this page here and let's just,,,
render this out so underneath our csrf,,,
token and between our submit button,,,
let's just go ahead and pass in form.,,,
asore P remember ASP wraps the paragraph,,,
tags which makes the styling a little,,,
bit better so if I save this let's go,,,
ahead and check out what this looks like,,,
so we'll go to login if I go to sign up,,,
now we have an entire registration ation,,,
page now later on I'm going to want the,,,
user to submit things like their Avatar,,,
or their profile picture maybe their,,,
name their email here and so on but for,,,
now we're going to leave it like this,,,
until we get to the customization and,,,
now there's a reason why I'm leaving,,,
that for later because we're going to,,,
have to customize a few things here and,,,
I just want to kind of focus on the,,,
basics here so we have a registration,,,
form here and now we can actually,,,
process this so let's go ahead and,,,
actually go through this so we'll go,,,
ahead and go into the view now we have,,,
our form we pass in the token we set the,,,
method here and let's continue so we,,,
want to check the method here so we just,,,
do,,,
request. method or request. method if,,,
this is equal to post let's go ahead and,,,
process this form so we're going to do,,,
form here form and that's going to be,,,
user creation form and we want to go,,,
ahead and actually pass in the data so,,,
we'll do request. poost so that's going,,,
to be the password and the username and,,,
all the credentials that we send then we,,,
want to check if the form is valid so if,,,
form. isore valid so this is all pretty,,,
uh redundant here at this point we've,,,
done this before so if the form is valid,,,
then let's go ahead and process the user,,,
now we're going to want to customize,,,
this user submission here so we can,,,
actually do something like this so we'll,,,
just do form and or actually we're going,,,
to do user and we're going to do,,,
form form. saave and we're going to,,,
commit this to false here so commit is,,,
going to be equal to false so,,,
technically what we're doing is we're,,,
actually saving this form and we're like,,,
freezing it in time here because we want,,,
to be able to access the user that was,,,
created meaning if the form is valid the,,,
user is going to get created but we want,,,
to be able to access the user right away,,,
so to do that we have to just add in,,,
commit is equal to false so we can,,,
actually get that user object so the,,,
reason why we want to do this is if for,,,
some reason the user added in uh like a,,,
uppercase in their or they capitalize,,,
their name or maybe their email,,,
depending on how they're registering we,,,
want to make sure that that's lowercase,,,
automatically so we want to be able to,,,
clean we actually want to be able to,,,
clean this data so let's go ahead and,,,
do user. username so we got the user,,,
that was just created and we're just,,,
going to do,,,
user. username do lower so we're getting,,,
the current user's name and we're going,,,
to update it to a lowercase method so,,,
we're just making sure that that name is,,,
cleaned so once we have that we can,,,
actually save this user so we'll just do,,,
user. saave and I actually noticed one,,,
thing here I want to take this lowercase,,,
method and I actually want to add this,,,
into the login method because what if,,,
the username is one way and then when,,,
they log in they accidentally capitalize,,,
something so in this case we want to,,,
take the username and we'll just do,,,
lower also in the login method so we,,,
just want to get rid of that issue here,,,
there's different different ways of,,,
doing that too so once we register a,,,
user we can go ahead and just redirect a,,,
user so we can just do,,,
redirect and we want to send the user,,,
back to the homepage so we'll just do,,,
return redirect and we're going to send,,,
the user back to the homepage now before,,,
we do this I also want to log a user in,,,
so let's go ahead and do this we're,,,
going to use the login method so we have,,,
that method we're just going to throw in,,,
request and we pass in the user object,,,
so the user that just registered we're,,,
going to log them in send them to the or,,,
and send them to the homepage now if,,,
something didn't go correct here let's,,,
go ahead and process this we'll just do,,,
else here and I'm going to use a flash,,,
message here so we're going to do,,,
messages do error so if there was an,,,
error let's see I think we just need to,,,
pass in request so we're going to pass,,,
in request and then the actual message,,,
here so let's try this we'll throw in,,,
request and then we'll just say uh an,,,
error so an error occurred during,,,
registration here let me just move this,,,
down so you can see it during,,,
registration and that's supposed to be,,,
two RS okay so yeah that's supposed to,,,
be two so now we want to Output this,,,
error now you can add in different types,,,
of error handling for maybe uh if a,,,
username already exists in the database,,,
you can do this with JavaScript or in,,,
the back end there's a bunch of,,,
different ways that we can actually go,,,
up about this but for now we're just,,,
going to look for any kind of error in,,,
registration so we pass in the user data,,,
we throw that into the user creation,,,
form we check if the form is valid if it,,,
is we get the username we make sure that,,,
the username is lowercase we save the,,,
user we log the user in and then we send,,,
the user to the homepage so let's give,,,
this a try now so we'll go ahead and,,,
first I want to throw in that error so,,,
let's just try this we'll throw in,,,
something like this and we'll just make,,,
sure the passwords don't match or,,,
something something like that so we'll,,,
just click register and we see that,,,
error so an error occurred during,,,
registration so we'll go ahead and try,,,
that again uh let's see we'll just do,,,
Eric for the,,,
name so we'll throw in Eric type in a,,,
username and,,,
password and we'll confirm,,,
that and let's go ahead and hit,,,
register and it looks like we are good,,,
to go so so I'm officially logged in and,,,
just to test this out let's go ahead and,,,
add something into the header bar so,,,
we'll go to the navigation bar and we'll,,,
just say if request. user is,,,
authenticated let's just output some,,,
text that says hello and then the usern,,,
name so we'll just do,,,
hello and then request.,,,
user so request. user and let's check,,,
this out so if I refresh this now I'm,,,
logged in as Eric so there we go we can,,,
add in new users this user is now in the,,,
database so we just took care of log in,,,
log out restricting pages and,,,
registration so what I want to focus on,,,
next is going to be user uh comment,,,
creation here so if we go to a room here,,,
so let's say I want to go to uh I want,,,
to learn HTML I'm logged in as Eric at,,,
this point I want to be able to actually,,,
make comments and join the conversation,,,
here so let's go ahead and first work on,,,
the room,,,
page so we'll close out the navbar close,,,
out registration and our URLs and I,,,
promise we'll get to styling here in a,,,
little bit here we're almost there so,,,
we'll go ahead and go to templates we'll,,,
go into room and let's see what we have,,,
here so at this point I also want to add,,,
in the room description if we have one,,,
so we'll just,,,
do room.,,,
description Okay so so we throw in the,,,
description and I also want to Output,,,
the comments that already exist in this,,,
room so if we have a comment here I want,,,
to make sure to Output that so uh let's,,,
see at this point let's just go ahead,,,
and add in another div here so we'll,,,
create a div and this is going to be to,,,
Output the actual conversation so we'll,,,
just do uh comment Das wrapper and let's,,,
just add in some kind of H3 tag and,,,
we'll just say,,,
conversation so we want to be able ble,,,
to Output this throw in some kind of,,,
line break and let's output all the,,,
conversation or the comments so let's,,,
see why is this div oh I didn't close,,,
this up here okay so inside of the room,,,
view we'll go down here room let's just,,,
get all the comments here so we'll just,,,
uh get all the children of this room so,,,
let's just go ahead and do comments or,,,
messages let's just do that so we'll do,,,
messages and this is going to be equal,,,
to,,,
room. message unor set.all and I just,,,
realized we haven't talked about this,,,
yet so at least I don't think we have so,,,
message unor set.all uh this can be,,,
tricky for the first time if you just,,,
see this now we can query child objects,,,
of a specific room here so if we take,,,
the parent model in this case we have a,,,
room to get all the children all we have,,,
to do is specify the model name and in,,,
this case it's message and we don't put,,,
that in a capital letter we put that in,,,
a lowercase value so message the model,,,
name and then we can do underscore,,,
set.all so it's basically saying give us,,,
the set of messages that are related to,,,
this specific room so we got the room,,,
and now we got all the messages so let's,,,
go ahead and pass those into the context,,,
dictionary we got all the messages and,,,
in here we can just go ahead and loop,,,
through and output all of those so we'll,,,
just create the for Loop so for message,,,
in,,,
messages close out that Loop,,,
so,,,
end4 and I'm going to wrap these inside,,,
of a div so we'll throw in the div right,,,
there and let's see we just want to,,,
Output like the username and the message,,,
so let's see what this is going to look,,,
like in the end here so we'll go back to,,,
the actual room design so we're going to,,,
Output this we're going to Output the,,,
title hosted by and then the tag which,,,
we won't worry about in detail so let's,,,
just output the username when this was,,,
posted or when this comment was posted,,,
and then the actual message here so the,,,
username message and the time since it,,,
was posted so let's go ahead and do this,,,
so we'll create uh some kind of span tag,,,
let's just do small and first we want to,,,
Output the username so we'll just go,,,
ahead and do,,,
message. user so we're outputting their,,,
name then we're going to create some,,,
space and we can just,,,
do message. created so message. created,,,
and there is actually a filter that I,,,
can add to this so let's go ahead and,,,
actually check this out first so we'll,,,
refresh that and let's see where we have,,,
a conversation so let's,,,
see let's learn JavaScript I think I,,,
added in some messages here so I can see,,,
these messages right here and we have we,,,
have a small issue here because uh those,,,
messages inside of the D Jango flash,,,
flash messages are showing up here too,,,
so we want to rename this,,,
actually so let's change this to uh room,,,
messages here so in the template that's,,,
how they're being output and that's,,,
going to give us an issue so we'll just,,,
do room and then messages and we'll,,,
camel case that actually let's just do,,,
underscore M so room messages like,,,
that so we'll change this name right,,,
here let's go back to the room let's do,,,
form message in room messages we'll,,,
remove that so we get those removed,,,
right there and now we can see each,,,
message so Dennis and Tim were added or,,,
we're messaging in this room and then we,,,
can see the time so I don't want to,,,
actually see the date what I want to do,,,
is have like a Time sense stamp here so,,,
if I posted this like a minute ago I,,,
want to be able to see like posted one,,,
minute ago or 5 days ago whatever that,,,
value is so to do this I can actually,,,
add in a pipe here so that's going to be,,,
a filter and we can do time since I,,,
believe that's how it is right there so,,,
if I add that in and refresh that now I,,,
can see 20 hours ago or 20 hours and 10,,,
minutes a go here so we'll just add in a,,,
go like that so we'll add in a space,,,
here and there we go so Dennis posted 20,,,
hours and 10 minutes ago Tim commented,,,
20 hours and 9 minutes ago and what I'm,,,
going to do here is filter these down to,,,
only get the most recent message so,,,
we'll just go ahead and uh I can,,,
actually add in order uncore bu like,,,
this and we're going to order by the,,,
created value so in this case I want to,,,
order it by descending order so the,,,
newest will be first and we'll just do,,,
created so the most recent message at,,,
this point should be first so there we,,,
go so those just flip their order so now,,,
we can see the actual message so we'll,,,
close this out right here and I also,,,
want to Output the actual message value,,,
so for now The Styling is just going to,,,
be pretty rough here so let's just add,,,
in a line break so there is separation,,,
and we'll add in a paragraph tag and,,,
we'll just do room dot or message.,,,
body okay so we'll throw that value in,,,
and let's check this out okay so we see,,,
hey hi and that's the conversation now,,,
once we have that I want to be able to,,,
actually create the the user um comment,,,
section so uh let's do this one thing,,,
here let's make sure that a user can,,,
actually edit their own messages,,,
actually we'll do that in a second so,,,
let's first actually add in the form,,,
here so,,,
inside of our comment wrapper we're,,,
going to create another div so we're,,,
going to create the div and this is,,,
going to,,,
be,,,
comment-form so we're going to bring,,,
that in and we'll just add in the form,,,
here and this form here the method is,,,
going to be a post method the action,,,
well it's going to be sending a post,,,
request to the room view here so we're,,,
good with that we can send it to the,,,
same view and we'll just add in a csrf,,,
token so we'll do CS,,,
RF unor,,,
token and let's actually add in the,,,
comment here so even though this is a,,,
text field here I'm going to add in an,,,
input field here so I want to try to,,,
minimize the length of these messages I,,,
want to uh maybe encourage users to add,,,
in more messages so in this case we're,,,
just going to do type of text here,,,
because if I add a text area field it's,,,
going to leave us a little bit too much,,,
space here so let's go ahead and set the,,,
name We'll add in the,,,
body and placeholder let's see what AM,,,
going to write here so in here we're,,,
just going to say write your message,,,
here so it's going to be a smaller,,,
field so we'll just go ahead and do,,,
write your message here dot dot dot okay,,,
so let's check this out there we go so,,,
we see that and I'm not going to add in,,,
like a submit button because when a user,,,
hits enter that's when I want to render,,,
that out now I also want to make sure,,,
only an authenticated user can write a,,,
message so we'll go ahead and create a,,,
condition here we'll just say,,,
let's see we'll do if,,,
request. user. isore,,,
authenticated can never spell that word,,,
so we'll just add in the end if right,,,
here so we'll just do end if let's try,,,
this,,,
out refresh it if I log out here go to a,,,
room or that's in create so let's just,,,
do uh let's learn JavaScript now I don't,,,
see that that form if I log in as Eric,,,
so we'll just do Eric here I'm logged in,,,
we'll go to let's learn JavaScript and,,,
now I can see this form here so uh let's,,,
go ahead and actually create the message,,,
itself here so we want to submit the,,,
post request so we'll go back to the,,,
view and this is going to send a post,,,
request to the room view so we'll go,,,
into room and we want to create a,,,
condition here so in the room view here,,,
let's go ahead and process this so we'll,,,
scroll down here and we're just going to,,,
say if,,,
request. method is equal to,,,
post so if this is a post method let's,,,
go ahead and set,,,
message and this is going to be message,,,
doob or,,,
objects. create so we haven't used this,,,
method yet we've been using a model form,,,
and by the way I need to import message,,,
here so I have imported that so we'll,,,
import it save it bring it down,,,
here and we'll go back to the room so,,,
we've been using the model form and that,,,
kind of autog generates it for us now we,,,
have a create method so we can use a,,,
save method to update something or we,,,
can do create and this method does what,,,
it kind of sounds like it's just going,,,
to go ahead and create the actual,,,
message so what I can do here is go into,,,
the model Fields here so we go into,,,
message we want to set the user the room,,,
and the body here here so let's go ahead,,,
and first set the user and that's going,,,
to be the logged in user so,,,
request.,,,
user so we'll throw that in and then the,,,
room that's going to be the room here,,,
and let's see we have the body here so,,,
the body is just going to be what we,,,
passed in the form here so we'll just do,,,
request. poost doget and then we're,,,
passing in the body and we're passing,,,
this body in from here so whatever we,,,
named it here that's how we're going to,,,
get that data so once we get the data,,,
we're just going to go ahead and do,,,
return redirect so redirect and we're,,,
going to send the user back to the room,,,
page and at this point we do have to,,,
pass in a dynamic value so we need to,,,
pass in the primary key and that's going,,,
to be the room. ID now the reason why,,,
I'm doing redirect uh technically I,,,
could just not do this and it's still,,,
going to be on that page the form will,,,
be there and the page will refresh but,,,
the issue is now this is technically,,,
going to be a post request and it's,,,
going to mess up some functionality here,,,
so we actually want that page to fully,,,
reload in a sense clear what's going on,,,
and make sure that we're back on that,,,
page with a get request so we just want,,,
to process that so let's go ahead and,,,
try this out we're going to test this,,,
here so we'll go into the,,,
messages refresh it and let's add a,,,
message so we'll just,,,
say what's up we're going to join the,,,
conversation if I hit enter here we go,,,
and I see Eric's message here that was,,,
posted zero minutes ago so there's a few,,,
things that I can do here I want to add,,,
in uh Delete functionality and I also,,,
want to add in participants here so,,,
let's see how do I want to do this so if,,,
I go in here we see a list of,,,
participants right here so I want to be,,,
able to add these now for this we're,,,
going to have to add in some more,,,
functionality into our database here to,,,
actually do this now we haven't talked,,,
about many to many relationships I go,,,
over this inside of that course on udemy,,,
uh but many to many relationships are,,,
just another level of relationships in,,,
the database and what this means is how,,,
a many to many or a many to one,,,
relationship Works where you have one,,,
parent and multiple children a many to,,,
many relationship means that multiple,,,
objects can be connected to multiple,,,
other objects and vice versa so in this,,,
case think of it this way we can have a,,,
room that's connected to a user but a,,,
user doesn't have to be only in one room,,,
room they can go to many other rooms and,,,
the rooms can also have many users so,,,
it's like a uh interchangeable,,,
relationship I guess it goes uh in,,,
multiple,,,
directions so I would highly recommend,,,
looking that up I'm not going into what,,,
how many to many relationships work,,,
that's a a lot of other explanation,,,
there so let's go ahead and actually add,,,
in participants here like this so the,,,
first thing I'm going to do before we,,,
add that relationship is I'm going to go,,,
into this page here and I need to modify,,,
a few things so the first thing is I,,,
want to change the layout here to,,,
actually add in some columns so when I,,,
go to a room let's learn JavaScript,,,
let's go ahead and actually clean this,,,
up a bit so we'll go into room. HTML and,,,
the first thing I want to do is is,,,
create an entire container for the full,,,
room so we're going to take this div we,,,
need to wrap the entire room so we can,,,
actually create a grid so we'll create,,,
the div here and then we're going to,,,
scroll down to the closing end block and,,,
we're going to create that there so it's,,,
going to indent everything for me and,,,
I'm going to give this a class of room-,,,
container so we have the room container,,,
and at this point we want to create two,,,
columns here so I'm going to create the,,,
First Column this will be the wrapper,,,
around all the messages and the form so,,,
I'm going to remove that div bring that,,,
down here and put that down here so this,,,
div right here encapsulates all the,,,
content from the room name all the way,,,
down to this and if statement now this,,,
column that we have for participants is,,,
going to be on the right side so I need,,,
to go down here and create another div,,,
and let's just go ahead and start,,,
writing this out so we'll create an H3,,,
tag and we'll say,,,
participants okay so it's one of those,,,
words that I have to like sound out so,,,
we'll create a line break and we're,,,
going to have that right here so if I,,,
refresh that now we can see participants,,,
so let's go ahead and create the actual,,,
layout here so we'll create some style,,,
tags here and again our template will,,,
fix all of this later so the theme that,,,
we're about to install and we'll just do,,,
room-,,,
container so let's go ahead and do,,,
display,,,
grid so we're going to make this a,,,
grid keep saying Frid so,,,
grid and then we'll just do grid,,,
template columns and we're going to say,,,
one FR and then actually we'll just,,,
we'll invert it so we'll do three FR,,,
like the homepage here and we're going,,,
to do one FR so fraction okay so if I,,,
refresh this now we see participants we,,,
see the room description the,,,
conversation and the message here so in,,,
order to add the participants we're,,,
going into models here and I commented,,,
this out here so we have our room,,,
participants now in order to create a,,,
many to many field all we need to do is,,,
models. many to many field like that and,,,
that's what's going to create that model,,,
relationship so give me one second here,,,
to prep so all we need to do is go ahead,,,
and go to that room and we need to,,,
specify or we need to specify the actual,,,
relationship that we're setting so we're,,,
going to add in the user here so we,,,
already have this imported that's the,,,
relationship and we have one small issue,,,
here because we already have a user,,,
model connected we need to specify a,,,
related name now we can do this,,,
regardless but in this case because we,,,
have it we need to specify it and that,,,
just means means that we can't reference,,,
a user because we already have a user up,,,
here so in this case the related name,,,
here is just going to be,,,
participants okay so like that I think,,,
let me just copy and paste this there so,,,
that's the related name and then I also,,,
want to be able to submit a form without,,,
having to check something here so we'll,,,
just do blink and that's going to be,,,
true so if I save this I need to run a,,,
migration now so I'm going to open up my,,,
terminal,,,
and we're just going to do plus here,,,
let's go ahead and run these,,,
migrations make migrations so we need to,,,
go through this process again we're,,,
updating the database manage.py,,,
migrate okay so those migration were,,,
just added I'll close this one out right,,,
here keep my server on and let's check,,,
out the admin panel first so if I go in,,,
here let's just do admin and I'm going,,,
to log in as a super user so I was,,,
logged in as Eric Eric can't be in the,,,
admin panel because he doesn't have,,,
super user status so let's go ahead and,,,
go to our rooms and if I go to let's,,,
learn JavaScript we see our many to many,,,
fields here now so I can actually add a,,,
few users so what I can do is click on,,,
Dennis and then hit control so I have to,,,
hold it down it says this in this note,,,
right here and then I can go to Tim and,,,
then I can save this so let me just move,,,
my face out of the way I'll just move,,,
myself up here somewhere,,,
so we'll do that and we're just going to,,,
do save so if I go to I want to learn,,,
HTML or where was it it was JavaScript,,,
so now I see that relationship so we,,,
have two participants inside of this,,,
room so to get those participants we can,,,
just go ahead and go into the view and,,,
we're just going to bring the,,,
participants in so we'll just go ahead,,,
and do,,,
participants like that and to get those,,,
we can just do room. participant,,,
ANS so earlier on for a mini to one,,,
relationship we can do the underscore,,,
set method right here for a many to many,,,
relationship we can just do doall and we,,,
can even filter these down if we want so,,,
we got all the participants then we're,,,
going to pass those into the context,,,
dictionary so let me just bring my face,,,
down here so I'm familiar with where I'm,,,
at and we're going to throw that into,,,
the context dictionary so we'll throw,,,
that in and we'll add in all the,,,
participants there so that's going to,,,
indent that for me and now we can,,,
actually access these inside of our room,,,
here so let's,,,
see we have all the participants we're,,,
going to create this Loop here so we'll,,,
just do,,,
for let's just say for user in,,,
participants I don't want to keep,,,
writing that out so we're user in,,,
participants and we're just going to,,,
lowercase that and then let's just do an,,,
end,,,
for okay and then we're going to create,,,
a div around these set the actually,,,
we're not going to set a class name,,,
let's just go ahead and actually output,,,
the users information so at this point,,,
we're just going to Output a username,,,
because we don't have a full name here,,,
so we'll just do um a P tag here and,,,
then we'll just do at and then we'll add,,,
in the,,,
user.,,,
username okay so let's check this out,,,
now so later on these profiles will be,,,
clickable so if you want to join a room,,,
check out someone's profile if they're,,,
in it uh you'll be able to just click on,,,
these so now we can list these out now,,,
what if Eric wants to join the,,,
conversation so at this point the user,,,
is not added in automatically so let's,,,
log in as Eric and let's go ahead and go,,,
back to let's learn JavaScript so Eric,,,
commented on here but he's not in the,,,
room here so we need to add in this,,,
functionality so in the,,,
view we need to go ahead and actually,,,
process this so once the participant is,,,
added in this request. poost method,,,
before we redirect this we're going to,,,
do room. participants,,,
and then we're going to do do add and we,,,
actually have a method like remove so we,,,
can actually do remove later if we want,,,
to remove a participant and we'll deal,,,
with that later so we have ADD and then,,,
we're just going to pass in the request.,,,
user so request. user and this user will,,,
be added to that many too many fields so,,,
a little bit of prep work there but uh,,,
that's how we're able to add a user and,,,
then render the user information out or,,,
the participants so let's let's go ahead,,,
and add this so this is going to be,,,
added when I submit that method here for,,,
a comment so let's go ahead and do this,,,
let's just,,,
say hey again let's say Eric's mad,,,
because no one's responding he submits,,,
that message the message is right there,,,
and Eric is now a participant in that,,,
room so we just added participants and,,,
that looks good now what I want to do,,,
here is also make sure that a user,,,
that's logged in can delete their own,,,
method or their own message so let's go,,,
ahead and do that we'll bring that in,,,
here and we'll make sure that a user can,,,
delete their own,,,
message we'll go in here and let's go,,,
ahead and go into the messages so we,,,
have the conversation for message in,,,
room messages and let's see so we're,,,
going to create two links here or we'll,,,
just create one link let's just say,,,
we're like Twitter we don't want to give,,,
people uh editing functionality for,,,
whatever reason it's pretty messed up,,,
that they do that but I guess we're,,,
going to do it too so let's just do,,,
delete so for now we want to do delete I,,,
would recommend uh as practice go ahead,,,
and add in edit functionality too so,,,
we're going to set the URL here so URL,,,
and that's going to be,,,
delete message okay so we have a delete,,,
message link and I'm not going to save,,,
this because this is going to throw in,,,
an error right now because I don't have,,,
this URL so let's go ahead and go to our,,,
views and let's first create that view,,,
so at this point what I'm going to do,,,
here is just copy this this entire,,,
delete view for deleting the room so,,,
we'll paste that in here and we're going,,,
to change this to delete,,,
message so we need to pass in the ID we,,,
want to make sure the user is logged in,,,
before they can delete it we're going to,,,
get a message instead of a room then,,,
we're going to check if the user is the,,,
message owner so in the message we have,,,
an,,,
owner or uh user actually so message has,,,
a user here so inside of here yeah so,,,
we're going into that so we have if the,,,
request is request. user is not the,,,
message user then we want to redirect,,,
them now if they are we want to process,,,
this we're going to change this to,,,
delete,,,
or,,,
message. delete okay and then we're just,,,
returning back the delete template,,,
remember that template is meant to be,,,
dynamic so it can render out that value,,,
as obj so we'll change this to message,,,
we just updated everything from room to,,,
message we had to update this value and,,,
we just delete it so we'll go back into,,,
the URLs now we do need a URL path for,,,
this let's copy the delete URL here and,,,
let's just go ahead and paste this so,,,
delete room is going to be delete,,,
message and then delete message,,,
all right so we have the URL we have the,,,
view and we can now set that link and,,,
the link has to be to message. ID so,,,
let's save that let's check this out uh,,,
I also don't want to list this link out,,,
at all times so let's do this let's make,,,
sure that only the owner can see can see,,,
that delete message so we'll just,,,
do let's see we'll back this up here and,,,
we'll do if request. user is equal,,,
to message. user then we can just add in,,,
end if and only the owner can see this,,,
question right here or this option so,,,
we'll do end if all right so we have,,,
that if I refresh this let's see we have,,,
an error request. user expected empty,,,
let's,,,
see if request do oh if okay so we,,,
forgot to add that so if request. user,,,
is equal to that let's go ahead and,,,
remove that save that and here we go so,,,
only Eric can delete Eric's messages I,,,
can't delete Tim's or Dennis's so let's,,,
go ahead and say we want to delete that,,,
message where did that send me okay so,,,
one second all right so we're going to,,,
delete,,,
message we go to the URL that's sending,,,
us to the delete message,,,
view the delete message view is going to,,,
send us here so we are logged in it,,,
looks like it redirected to us so if the,,,
request. user okay let's try this one,,,
more time so we'll go in,,,
here and that should return back the,,,
delete HTML template okay let's try this,,,
again we'll click on,,,
delete why am I going back to here so we,,,
see delete message for oh okay so it was,,,
the right page I just got mixed up by,,,
this navigation bar so now we see are,,,
you sure you want to delete hey again so,,,
that's the message and that was that,,,
object that we threw in there so I can,,,
go back that's going to take me back to,,,
the last page I can go to delete and I,,,
can confirm that and that message was,,,
now deleted and we can work on that URL,,,
routing a little bit later so now we,,,
only see Eric or now we see that Eric,,,
only has one message here so we are,,,
officially done with the message,,,
functionality so all we had was create,,,
and delete functionality now what I want,,,
to do is create some kind of activity,,,
feed here so you see how we have this,,,
activity feed inside of this template,,,
here so if I go ahead and for some,,,
reason I can't zoom out here so we'll go,,,
down here we'll go back to page one so,,,
on the homepage you can see that we have,,,
this activity feed here so I want to be,,,
able to create this full feed so let's,,,
go ahead and build this out here so,,,
we'll go to the homepage and we're going,,,
to have to change this entire layout so,,,
we're going to have the quick search,,,
we're going to have all the rooms and,,,
then we're going to have the activity,,,
feed so we'll change up this layout so,,,
let's go into home.html and we'll build,,,
this out so we'll go into,,,
home.html and what I'm going to do here,,,
is create another column and we'll just,,,
do one F FR so that means the two side,,,
columns will be one fraction or will,,,
take up one fraction while the middle,,,
one will take up the most making that,,,
the widest one and they'll just auto,,,
adjust now I do need a column here in,,,
order for this to work so we have our,,,
home container we have our topics so,,,
that's one one column then we have our,,,
Center column and we need to create one,,,
more in order for those grid template,,,
columns to work so we'll just go ahead,,,
and add in a div here and we're going to,,,
do class um I guess we can just leave,,,
that like that we don't need a class at,,,
this point and we'll just do,,,
H3 and we'll do,,,
recent recent activity so for this I,,,
want to prompt users to actually engage,,,
in the website if they come here they,,,
don't see much activity uh people are,,,
less likely to engage but if they come,,,
in and they see an active feed here they,,,
can actually see what's going on maybe,,,
at some point you want to build in like,,,
a social networking feature where you,,,
can follow people you can modify this to,,,
only see what your friends are doing or,,,
people that you are following uh are,,,
commenting so if a friend of yours,,,
comments on something it might look,,,
interesting so you click on it you check,,,
it out and it prompts you to engage so,,,
that's what we're trying to do here so,,,
in this case we have recent activities,,,
and because I created that third column,,,
and I updated the grid template column,,,
for that main container let's check this,,,
out here so now we have recent activity,,,
so let's go ahead and see how we're,,,
going to do this so let's see in the,,,
view I think I'm going to have to,,,
actually uh get some activity or some,,,
comments here so we'll go down or go up,,,
to the,,,
homepage we have topics and then we'll,,,
just do uh let's see how do I want to do,,,
this we'll just do uh me how did I call,,,
this inside of the room I was going to,,,
say message conversations but let let's,,,
see that was in the,,,
room room messages so let's just take,,,
this right here so we'll just call it,,,
room messages so that's going to be our,,,
activity maybe we can change that name,,,
later we just can't use messages or it's,,,
going to mess up the flash messages that,,,
we have so we'll go in here and we'll,,,
just do room unor messages so in this,,,
case I'm just going to get all of them,,,
so I'll do I'll do a message,,,
doobs doall and this is where you can,,,
change it to where only uh where where,,,
you can only see maybe people you follow,,,
if you happen to build that in so you'll,,,
be able to modify that right here so,,,
we're going to have our room messages,,,
we're getting all of those then we're,,,
going to go ahead and create our context,,,
dictionary so let me just fix some,,,
indentation here and we'll just throw,,,
that in here and pass in the room,,,
messages okay so we can see those we,,,
queried all of those so we'll go into,,,
the home page and let's output all of,,,
those so that's at the bottom of the,,,
page,,,
here we'll create the the HR tag and,,,
we'll just,,,
do,,,
for let's see for message I think I can,,,
just do message like that because it's a,,,
variable inside of the loop for message,,,
in room unor messages and let's go ahead,,,
and output that I think I actually did,,,
that in the room so it should be fine so,,,
end four okay so we're going to create,,,
the div so we're going to wrap every,,,
single message here at some point we are,,,
going to want to have styling here and,,,
what do we want to do here so in this,,,
design we want to Output eventually the,,,
user profile but for now let's output,,,
the name when it was posted who they,,,
reply to and then the message here so,,,
let's see so we'll go ahead and create a,,,
small tag here and we'll just say at and,,,
then the username so we'll do,,,
message. user and then we want to say,,,
the time it was posted so we'll just do,,,
message.,,,
created let me just move this up so,,,
message.,,,
created and then we'll just do time,,,
since so we're going to use that,,,
filter and let's take a look at this so,,,
now we should see each message be output,,,
so here we go we see Dennis Tim Eric so,,,
these are all the messages that we have,,,
in this entire website so if Dennis goes,,,
to 100 days of code we'll just say,,,
what's this ask a question go back here,,,
and now we can see Dennis just me,,,
message right here so or actually I'm,,,
Eric right now so we see that it's,,,
ordered by or it's ordered by the uh,,,
oldest to the newest so what I'm going,,,
to do here is actually change up this,,,
filter really quick or the ordering so I,,,
can actually add in ordering to the,,,
entire class instead of having to do,,,
order by so I'm going to remove that and,,,
I always want to make sure that we get,,,
the most recent messages so we're just,,,
going to copy this right here from the,,,
room model and I'm going to paste this,,,
in right here and we're just going to,,,
order it the same way so that should fix,,,
that there we go so the newest message,,,
is right there and now we just want,,,
repli to and then the name,,,
so we'll go here in home and let's just,,,
do another small tag so we'll do,,,
small and we'll just do,,,
replied to so we want to show the quote,,,
or not the quote but the room that,,,
they're currently talking to later on,,,
maybe you can add a user and we'll do,,,
reply to and then message. room so it's,,,
going to Output the room and let's just,,,
indent this a little bit so we'll do,,,
style and then here let's see is it,,,
indented here actually we'll leave it,,,
like that so we won't add in any styling,,,
so we'll remove that reply to and then,,,
we also want to Output the actual text,,,
here so we'll just,,,
do,,,
message. body,,,
so in this case uh let's do this I want,,,
to only output the string representation,,,
so I can just add in message without the,,,
actual uh full message so I only only,,,
want to Output the first 50 characters,,,
so I can actually leave that and that's,,,
going to Output this value right here so,,,
it's going to trim it down so if,,,
somebody writes a lawn message I don't,,,
want to have to see everything and then,,,
clutter up that sidebar so here we go we,,,
see Eric replied to 100 days of code and,,,
it shows what he replied and then we see,,,
Eric replied to let's learn JavaScript,,,
and we can see sort of like an activity,,,
feed and a sidebar so uh let's go ahead,,,
and let's see what do I want to do here,,,
I think I want to add in some delete,,,
functionality so uh users should be able,,,
to delete their own messages from the,,,
activity feed also so let's go ahead and,,,
add that in right here so technically we,,,
can just go to the,,,
room and we'll just take this right here,,,
and we already have all this built in so,,,
we're going to the room we're checking,,,
if the user is the current owner of that,,,
message and we'll go back to the,,,
activity feed and let's just put this at,,,
the bottom of the message and let's just,,,
create a line break so we can see the,,,
difference here so try this there we go,,,
so Eric can only delete his messages,,,
here so if we can go here delete it,,,
confirm it we're back on the homepage,,,
and there we go so that functionality,,,
was mostly built in uh at this point I,,,
guess what we can do is we have the,,,
topics and we have the activities inside,,,
of the homepage uh I want to make them,,,
their own component here so let's go,,,
ahead and do that let's build those in,,,
so right now I want to be able to,,,
actually reuse this activity feed and,,,
these topics and by the way I can filter,,,
these down here so if I want what I,,,
could do is actually modify these,,,
components to filter down by a specific,,,
topic so give me one second to prep this,,,
so let's go ahead and change up the,,,
messages here so what I could do is,,,
actually go into the view here and let's,,,
see I actually want to show you this,,,
because this is actually pretty cool,,,
here so I can actually use the Q lookup,,,
method and I can actually grab this,,,
right here and do messages.,,,
filter and then I can throw in Q and,,,
let's just throw in the topic name so,,,
let's see the message model has a,,,
room so we can,,,
do room,,,
underscore name,,,
and if that is equal to or room undor,,,
name isore I,,,
contains like that and we can throw in Q,,,
here so we can actually filter that down,,,
by the room name so let's try this so,,,
let's say that the user is on this page,,,
and they want to see all the JavaScript,,,
rooms here so if I click on this now I,,,
should be able to only see all the,,,
activity for the JavaScript page so,,,
let's go to web development Let's uh,,,
create a message here so we'll just say,,,
hey right there and then if I go back to,,,
here if I go to web development I should,,,
only see messages related to that so,,,
let's see room oh room,,,
underscore topic underscore name or,,,
double underscore so that should run,,,
that,,,
filter so here we go now we only see the,,,
activity to this topic if I go to,,,
JavaScript now I see all the,,,
conversations related to JavaScript if I,,,
go to all now I see all the,,,
conversations okay so I wanted to throw,,,
that in and let's make some reusable,,,
components now so in this case we'll,,,
create a new file and we'll just say,,,
Activity unor,,,
component. HTML okay so activity,,,
component and what we're going to do,,,
here is make sure that we can use the,,,
same activity feed right here inside of,,,
uh our profile page later on so when we,,,
go to a user's profile we want to be,,,
able to see all the activity for that,,,
specific user so let's say I go to,,,
Eric's account I want to be able to see,,,
all of Eric's activity and what I would,,,
have to do here is actually rewrite all,,,
this code right here inside of Eric's,,,
account so I don't want to do that I can,,,
actually just make this into its own,,,
component so we're also going to do this,,,
for the feed and the topics here so,,,
let's take all this right here so,,,
everything inside of this div we'll copy,,,
all of this remove it leave these two,,,
right here and then go into the activity,,,
component so we have the activity,,,
component and then we can go into our,,,
homepage and let's just include,,,
that so at this point if I save this and,,,
refresh it all the activity is gone so I,,,
can just simply include it now so I can,,,
go ahead and do,,,
include so we'll do include here and,,,
we'll just do,,,
activity and then underscore,,,
component. HTML okay so we have our,,,
activ component if I refresh that oh,,,
okay so we need to go into base so this,,,
is inside of the base app so we need to,,,
specify the path and that's how it,,,
should work so now we see recent,,,
activity so I'm going to do the same for,,,
all the rooms here so let's see uh,,,
inside of the homepage we have our,,,
activity if I go to a room if I actually,,,
go to a user's profile I want to be able,,,
to render out the same components so,,,
notice that in the the users profile we,,,
still have the same activity component,,,
so in this case I want to make this its,,,
own component too so let's do that we're,,,
just going to break things down into,,,
little compartments so we'll just,,,
do uh,,,
topics undor component. HTML we'll break,,,
that down and let's see we can go into,,,
home.html go into,,,
topics so we have our home container,,,
topics we'll take everything inside of,,,
this div copy it and remove it go into,,,
topics and then we can bring this in,,,
right here so we're just going to use,,,
include and we need to go into,,,
base for,,,
slash topicor,,,
component.,,,
HTML all right so now if I refresh this,,,
we'll still see our topic base topic,,,
comp,,,
component did I name that wrong so let's,,,
see we have topics component so let's,,,
just do topics we'll save that give that,,,
a test and now we see our topic so I'm,,,
doing this for a reason so I know it,,,
seems a little bit repetitive but one,,,
it's showing you how this works and uh,,,
two is it's going to save us from a lot,,,
of extra work here in a second here so,,,
we're going to go into the feed now and,,,
we're going to do the same thing so,,,
we're going to do new file feed undor,,,
component,,,
HTML okay so now we have a feed,,,
component so we're going into home again,,,
and we're going to do the same thing,,,
here so we see this div right here that,,,
takes in the entire room uh at this,,,
point I don't want to take everything,,,
because I want to be able to save this,,,
only for the homepage so we're going to,,,
take the actual items in that feed so in,,,
this case let's go ahead and go down,,,
here so we're going to leave the room,,,
count and this link and we're just going,,,
to take this div right here so that,,,
everything that's going to give us this,,,
four statement right here or this for,,,
Loop so we'll copy that we'll bring that,,,
into the feed component save it and,,,
let's see,,,
so back in home and by the way so we do,,,
have actually let me just finish this up,,,
and I'll explain what's going on here so,,,
we'll just do,,,
include and we can do base feed comp,,,
component.,,,
HTML so let's save it really quick and,,,
the reason why we have access to all,,,
these items because uh the reason why we,,,
have access is because we're passing,,,
this data into the context dictionary,,,
now this component is available inside,,,
of that template so once the template,,,
actually sees it it doesn't notice that,,,
they're different components so that's,,,
why we have access to rooms inside of,,,
the room component the topics and the,,,
activi so they're brought into this page,,,
here and that information is basically,,,
being passed down into them and that's,,,
how we have access to them so as long as,,,
they're used in the same page um if we,,,
just decided to drag this into another,,,
page without passing in that information,,,
well it wouldn't work that way so that's,,,
how we have access to the components,,,
topics and the actual feed okay so now,,,
that that's done we want to create a,,,
user profile and pretty soon we're going,,,
to move on to static files and that,,,
template so let's go ahead and create an,,,
actual profile for a user so we'll just,,,
do profile. HT HML and we're going to,,,
extend the main template so we're going,,,
to do extends here and this is going to,,,
be main.,,,
HTML then we can,,,
do block,,,
content and we can do end block here so,,,
close that,,,
off end block,,,
content okay so we have our home,,,
template and at this point let's just,,,
output the user's name we'll just do an,,,
H1 tag and and uh we'll just do user.,,,
username so before we style it we'll uh,,,
just make sure that we know what users,,,
account we're visiting so we just have a,,,
simple template for a user profile so,,,
let's go into our views now and inside,,,
of our views we want to create a profile,,,
here so let's just add that above our,,,
create room View and underneath our room,,,
so create a new one here so we'll do or,,,
create a new view so we'll do user,,,
profile pass in request,,,
return render pass in,,,
request base and then we do,,,
profile profile. HTML we'll pass in the,,,
context,,,
dictionary throw that in right,,,
here okay so there we go so we have the,,,
context dictionary now we need a URL,,,
let's just,,,
take let's see I'll put this underneath,,,
room so create Create A New Path here,,,
make sure you add in the trailing comma,,,
and this is going to go to profile and,,,
then we're getting the actual users's ID,,,
so in this case we're going into uh Str,,,
Str here and we're going to pass in the,,,
primary key close that off,,,
fuse. user,,,
profile name and that's going to be,,,
user-profile,,,
okay so we have a URL now and we need to,,,
update this in several different areas,,,
here so in the homepage actually I guess,,,
now it's not in the homepage it's now,,,
inside of the feed component so we'll go,,,
into feed and we're going to Output the,,,
host here so for this host inside of,,,
that at symbol uh let's just actually,,,
change this to a link so we'll just wrap,,,
that and we'll say href and we're going,,,
to point to the,,,
URL so we're going to do URL and then,,,
we're going into,,,
user -,,,
profile and we're passing in the user ID,,,
so we can go into room. host. ID okay so,,,
that is inside of the feed component and,,,
we want to render the user's name so,,,
this username if I refresh it now we,,,
should be linked up if I go to Tim let's,,,
see user profile got an unexpected,,,
argument PK so let's go back to the view,,,
we didn't complete this we want to pass,,,
in PK and we want to get the user so,,,
we'll just do user is equal to user,,,
doobs doget and then we'll specify the,,,
ID which is the primary key and we can,,,
throw this information out so let's see,,,
in the profile we're passing that in as,,,
the user value and we have that here,,,
let's try to refresh that okay so there,,,
we go so now we see Tim if we go back to,,,
the homepage if I go to Dennis I see,,,
Dennis's profile and we have the profile,,,
set up so this is where things get a,,,
little bit faster here so all we need to,,,
do for the profile we're just going to,,,
have three different columns here so,,,
we're going to have our topics we're,,,
going to have our our feed eventually,,,
the users's information and profile,,,
picture and the,,,
activity so let's see so for the user,,,
let's go ahead and get all this users,,,
rooms here so we'll just do rooms that's,,,
going to be equal to user. room set.all,,,
remember we can get all the children of,,,
a specific object by doing the model,,,
name and then underscore set and then,,,
whatever we want there so in this case,,,
we're getting all of them so we'll throw,,,
that in here remember that because we,,,
access rooms this way inside of the feed,,,
component or not the yeah the feed,,,
component for room in rooms we need to,,,
access it this way so now we're going to,,,
pass in these rooms into that feed,,,
component once it's used so we have that,,,
let's go to the user profile and and,,,
let's,,,
see I want to create some kind of,,,
container here so we'll do,,,
Ford and we want to just throw,,,
in the three columns here so we're going,,,
to create three different columns and,,,
I'm just going to copy and paste this so,,,
we'll do one and then two so this will,,,
be our activity our feed and then or the,,,
topics feed and activity so let's go,,,
ahead and include that now so now that,,,
we have the rooms we'll just do,,,
include base for feed component. HTML so,,,
if I save this now we don't have to,,,
rewrite that in and if we make edits,,,
they're just going to be updated right,,,
away so if I go to Dennis here is all of,,,
Dennis's rooms right here so let's fix,,,
the layout here so we'll just do class,,,
profile,,,
container and I'm going to create some,,,
styling here now so we'll just do a,,,
style tag close this out and we can do,,,
profile container what what happened,,,
here,,,
so style,,,
and okay so there we go so we're going,,,
to display this as a grid so,,,
grid and then we're going to do grid,,,
template columns and we're going to do,,,
one FR three and then one F FR so in,,,
this case I'm going to change that to,,,
two,,,
so let's check this out now so actually,,,
I want to leave that S3 I want to I want,,,
it to look the same as the current,,,
homepage right now so if I go ahead and,,,
refresh this I'm on the profile page now,,,
so we see the name and we see the center,,,
column right here for the activity and,,,
you notice that if I go here we only see,,,
my post here so if I go to logo here we,,,
see all of them if I go to Tim I see,,,
that Tim only has one room here so we'll,,,
go to Dennis right now and let's output,,,
the actual,,,
activity here for me so let's see in,,,
this case we're going to,,,
do messages here so let's see how do I,,,
want to do this in home in the homepage,,,
I just did room messages,,,
so this is all of my,,,
activity and inside of the profile I'll,,,
just,,,
do room messages so all the messages,,,
that I've added in any room and we'll,,,
just do,,,
user. messore set do all that'll render,,,
those,,,
out and at this point let's also get the,,,
topics so we'll just do topics and,,,
that's going to be equal to topic doobs,,,
doall so we need that because we need to,,,
access all of these inside of that,,,
component and let's see so we can go to,,,
profile and let's just copy this right,,,
here this will be the topic component,,,
then we can bring this in right here and,,,
this is going to be,,,
activity okay so now if I refresh this,,,
topics okay so that's supposed to be,,,
topics all right so there we go we see,,,
all the topics for some reason they are,,,
not being rendered out I think I forgot,,,
to pass those into the context,,,
dictionary yeah so I need to grab these,,,
and I need to bring,,,
those in here so we'll throw those in,,,
right here topics and then topics okay,,,
so I saved that let's check that out and,,,
here we go so if I filter these this is,,,
going to take me back to the homepage uh,,,
recent activity did I not comment on,,,
anything let's see so room messages is,,,
user. messore,,,
set.all that needs to be messages with,,,
an S right,,,
there and that should do,,,
it okay so now I see all of my activity,,,
or all of Dennis's activity if I go to,,,
or Eric's actually then if I go to or no,,,
I'm logged in as Eric but I see Dennis's,,,
activity if I go to someone else's let's,,,
go to,,,
Eric let's see let's check out Tim here,,,
he's only got one message in there and,,,
then if I go,,,
to Eric somewhere,,,
here let's see,,,
oh Eric never posted a room okay so,,,
let's try this in order to go to Eric's,,,
room let's uh move my face down here,,,
let's also update the links inside of,,,
the activity so the cool thing is is I,,,
can just update it in the activity feed,,,
and I don't have to update it everywhere,,,
so I can just go to the activity,,,
component and I'm just going to wrap,,,
this right here so I see the user we're,,,
going to wrap this inside of a link so,,,
we'll do an a tag here and we're going,,,
to take this closing tag and we're going,,,
to put that just after the,,,
username so we'll just do href and,,,
that's going to point to the that,,,
specific user so I hope you're starting,,,
to see how things are becoming more,,,
Dynamic by creating this uh or making,,,
this reusable here so we'll just do,,,
user-profile,,,
and then the user ID which is,,,
message. user. ID okay so now if I go,,,
here refresh it I can go to eror account,,,
too now I see all of Eric's activity,,,
Eric has two comments here and that's,,,
how we can actually link this up to the,,,
actual profiles so in this next section,,,
what I want to do is work on static file,,,
configuration so static files are,,,
basically any CSS files any images or,,,
JavaScript files and uh in definition,,,
they're static so D jeno has its own way,,,
of configuring this so right now we've,,,
been writing our CSS inside of our,,,
templates and we don't want to do this,,,
so what we're going to do here is we're,,,
going to eventually move all the CSS,,,
outside of our templates and we're going,,,
to create our own stylesheet so in Jango,,,
we first need to create our static files,,,
we we need to let it know where to find,,,
these and then we can actually render,,,
these out dynamically in a temp template,,,
so there's different types of static,,,
files we can configure images we can,,,
configure CSS and JavaScript files and,,,
they all have their own way of actually,,,
doing things so let's go ahead and,,,
create a new folder inside of the root,,,
directory so static files will start off,,,
this way we'll just create a folder,,,
called Static and in this folder we're,,,
going to create another folder for all,,,
of our CSS files so we'll just do Styles,,,
and in Styles I want to create a,,,
main.css file so in static I also want,,,
to eventually create a folder to store,,,
all of my images so we're just going to,,,
do images here and there we have our,,,
Styles so we have a static folder these,,,
are our static files now to actually let,,,
these be used inside of our templates,,,
let me close out all these links because,,,
I have a bunch of them open let's close,,,
everything out and let's go,,,
into the settings.py file and we need to,,,
let Jango know about these static files,,,
now so it has no idea that this static,,,
folder even exists here so what we're,,,
going to do is create a variable called,,,
staticor files underscore or static,,,
files and then underscore dur so static,,,
files directories and we can actually,,,
host static files in multiple areas just,,,
like we did with our templates director,,,
so up here where we pointed to baser and,,,
templates well we can do the same thing,,,
for our static files and we can just say,,,
uh base directory and then we'll point,,,
to static so this is going to let jeno,,,
know we have static files inside of this,,,
folder here so that's officially,,,
connected now in order to actually use,,,
these static files let's go ahead and,,,
actually add in some CSS here so we'll,,,
specify body tag and we'll just say,,,
background color and let's just set this,,,
to this uh aquamarine color here so to,,,
make this work what we're going to do is,,,
we're simply going to bring this,,,
into let's see we're going to bring this,,,
into,,,
main. HTML here so inside of our,,,
templates we'll put this into main. HTML,,,
and this is why it's good to have this,,,
template because I'm going to apply this,,,
style to this template and it's going to,,,
apply it to all the children templates,,,
that we have so all the pages so in here,,,
what I'm going to have to do,,,
is just do load static here so that's,,,
one thing that we have to do is we have,,,
to let this template know that we can,,,
actually use the static tag so once I,,,
load that in I'm just going to change,,,
this right here to double quotes and,,,
we're just going to add in two percent,,,
or two curly braces the percent symbols,,,
and we're going to write static so what,,,
this is going to do is static is going,,,
to tell it to go ahead and find this,,,
static folder now we need to specify a,,,
path for this CSS stylesheet so we have,,,
a link here and now in single quotes,,,
because these two are double quotes,,,
we're just going to go into the Styles,,,
folder so we'll do Styles,,,
slain. CSS so if I save that that should,,,
now apply that static file so you might,,,
have to do control shift R and now on,,,
every single page we have this,,,
background right here for all of our,,,
page because or all of our Pages because,,,
that's inside of here now we can also do,,,
images here so uh if we wanted to add in,,,
an image we would just add,,,
in let's see so I'll actually try this,,,
right now so let's go into our project,,,
here I'm going to go into my desktop and,,,
we'll just find a picture here so we're,,,
going to copy one of these pictures from,,,
these diagrams and I'll just take models,,,
here so take models I'm going to copy,,,
that you can just grab any image that,,,
you have and place this into your,,,
project file so go into static go into,,,
images and paste that in there so once,,,
we have that in order to use the image,,,
inside of your template here let's go,,,
ahead and uh bring this into our main.,,,
HTML file so we're just going to do,,,
image close that off here and then for,,,
the source we're just going to do the,,,
curly braces we'll go to static and I,,,
want to know if you can guess this what,,,
do we do next well we go into the images,,,
folder so we're going into static and,,,
then images and we're going into models,,,
Dot and let's see whatever ever I call,,,
that whatever picture you're using so,,,
models.,,,
jpig so now that image can be used so if,,,
I save that there we go and now this,,,
picture is inside of my website so I,,,
don't actually want to have that there,,,
so I'm just going to go ahead and remove,,,
that but that's how we can add in CSS,,,
JavaScript and images now there are,,,
differences for user uploaded images,,,
which we'll get into like when a user,,,
uploads their profile picture we do have,,,
to configure things in a different way,,,
for that we're going to use something,,,
called Static _ root and we'll get into,,,
that later so I'll just comment that out,,,
here so we're going to comment that out,,,
and we also have to configure some URLs,,,
for that and also static files in,,,
production are going to be handled a,,,
little bit differently than they are in,,,
development okay so before we jump into,,,
the next section where we'll be,,,
installing our theme I want to fix up a,,,
few things with the website that I,,,
noticed so the first thing is inside of,,,
main. HTML I accidentally added this,,,
extra Li tag here in the flash messages,,,
section so if you added that just go,,,
ahead and get rid of that and make sure,,,
you have an opening and closing Li tag,,,
so a small mistake uh if you made it go,,,
ahead and fix it if not just ignore this,,,
right here and let's move on here so in,,,
this next part I want to fix the create,,,
room form here so at this point when we,,,
go to create a new room we have this,,,
option to select a host here now that,,,
was good when I was just showing basic,,,
crud operations but at this point we,,,
don't want to be able to select a host,,,
we want this host to automatically be,,,
added based on whoever's logged in so if,,,
I'm logged in as Dennis at this point I,,,
want this to be automatically added and,,,
this field shouldn't be visible so the,,,
first thing I'm going to do here oh and,,,
I also don't want the participants to be,,,
visible here either so we'll get rid of,,,
both of these so what I can do here is,,,
go to my base app here so we'll go into,,,
forms.py and typically we could just,,,
render out every single field item that,,,
we want by specifying all and we can,,,
also add in a list where we select the,,,
exact fields that we want to run,,,
uh I'm just going to go ahead and use,,,
the exclude method here so that's also,,,
an option and this is going to be a list,,,
here so I can get rid of the host here,,,
and then I'll go to models here so we'll,,,
see uh I also want to exclude,,,
participants so we'll go ahead and add,,,
that and we'll exclude these two Fields,,,
so if I save this so if I refresh it now,,,
we don't see host and now we don't see,,,
participants so these should be,,,
automatically updated so the next thing,,,
is I also want to make sure that the,,,
backend knows how to process this so in,,,
the view now we're going to have to,,,
update a few things here so we'll go,,,
into views and we're going to need to go,,,
to the create room view so in here we,,,
have a standard form on the post method,,,
we get that data and we save it and now,,,
we're not submitting a host so what I'm,,,
going to do here is go ahead and get the,,,
room value so we'll set the room to,,,
whatever is saved on the form and for,,,
this we need to set commit to false,,,
that's going to give us an instance of,,,
this room so we've already done this and,,,
well we did it in another view here so,,,
now what I can do is just go ahead and,,,
do room. host and we're going to set,,,
that to request. user so you can only,,,
create a room if you're logged in we,,,
already added that functionality so now,,,
we know that a host will be added based,,,
on whoever's logged in and we'll just do,,,
room. save so we just added in one more,,,
step here where we set the host and,,,
that's it so now if I save this let's go,,,
ahead and try to add a new room so I'll,,,
refresh it we'll select a topic and by,,,
the way with the topic I'll also add in,,,
functionality where you can add a topic,,,
if one doesn't already exist so if you,,,
want to select a new topic let's say uh,,,
one is something like study for backend,,,
developers you will have the option to,,,
select and search or just generate your,,,
own topic but we'll add that once we,,,
install the theme so we'll select this,,,
and we'll just do uh study with me and,,,
triple exclamation point so we can see,,,
that and if I submit that here we go we,,,
should see that right here and we see,,,
the host as Dennis so I'm logged in all,,,
that that's working and now we can move,,,
on to installing the theme so our,,,
website looks pretty ugly at this point,,,
especially with this blue color and I,,,
want to talk about how theme,,,
installation works so typically you,,,
would work with some kind of designer if,,,
you're working at a company uh you would,,,
work with some kind of design team and,,,
they would give you a theme you would,,,
have the designers and front-end,,,
developers generate all this awesome,,,
content for you and you would write the,,,
backend logic and just learn how to,,,
install a theme as opposed to writing,,,
that all up on your own or maybe you are,,,
a soul developer uh you might not always,,,
want to build out all your own code in,,,
the front end maybe you just want to,,,
focus on one part this is where buying a,,,
theme or getting a free theme online,,,
might work better for you so I want to,,,
show you how this installation process,,,
works um instead of hand coding all this,,,
up this is an important thing to know,,,
how to do so we're just going to go,,,
ahead and install that now how this will,,,
work is we have a standard theme with,,,
some HTML some CSS and a little bit of,,,
JavaScript we're not going to worry,,,
about the CSS and JavaScript part that's,,,
already added into the theme and that's,,,
just going to add functionality where we,,,
need it so we don't need to worry about,,,
that so we're going to need to grab,,,
these HTML files and we're going to have,,,
to replace a lot of the content that you,,,
see so every single page here we're,,,
basically going to get those pre-built,,,
templates we're going to add them into,,,
our code and then we're going to have to,,,
do things that Jango ways so uh for,,,
example the theme with the CSS files and,,,
the JavaScript files these are all set,,,
uh with file paths that already,,,
connected to that specific theme so,,,
we're we're going to have to add our,,,
static files the D Jango way we're going,,,
to have to replace all of our images and,,,
any other filler content with our D,,,
Jango tags and loops and uh if and else,,,
statements so we're basically going to,,,
have to add the templates and then,,,
modify the data that's inside of them so,,,
we'll just go ahead and get right to it,,,
so to get this theme go ahead and go to,,,
the GitHub repo and this is going to be,,,
in the source code and this is going to,,,
be in the theme folder so if I click on,,,
this we're going to see all these,,,
templates that are already built out for,,,
us we see all the assets so logos icons,,,
anything that we're going to use that's,,,
already in here so we're just going to,,,
start installing this stuff so I already,,,
have this on my desktop so to get this,,,
just go ahead and go here download this,,,
entire repo extract the theme section,,,
and you can start working with that so I,,,
already have that in my desktop right,,,
here so that's the theme folder and I,,,
have my project files right here so if I,,,
open up the theme folder once you have,,,
this installed go ahead and just open up,,,
one of the files here so this is,,,
index.html so this is all static data,,,
right here this is uh just rendered out,,,
in HTML code and this is what we're,,,
going to install and then modify here so,,,
let's go ahead and start by adding in,,,
the homepage here so what I'm going to,,,
do here is go ahead and open up both,,,
files here so this is going to be the,,,
theme on the left so on the left side,,,
that's my theme and on the right side,,,
this will be my project files so we're,,,
going to open up study Bud right here,,,
and this is going to be on the right so,,,
the first thing I'm going to do is go,,,
ahead and replace the homepage with the,,,
theme template here so let's go ahead,,,
and go into base we'll go into templates,,,
base and let's take index.html so in the,,,
theme index.html is going to represent,,,
the homepage here so we'll rename it in,,,
a second so I'm just going to copy this,,,
or you could just drag it in here and,,,
bring that in here now my current,,,
homepage this is going to be set toore,,,
old so I'm just just going to change the,,,
name and I'm also going to change Index,,,
right here to home.html so we want to,,,
show the theme files so we'll do home.,,,
HTML and that view on the homepage knows,,,
to render this out so let's go ahead and,,,
see what we have here so if I go in here,,,
if I refresh this home.html does not,,,
exist let's see why this is happening,,,
that shouldn't be the case so we'll see,,,
we have a view here we have home and we,,,
have our,,,
templates and home okay so I added in,,,
HTML there twice by accident okay so now,,,
it should exist so if I refresh this,,,
this is that theme here so if I open up,,,
the theme on its own we see all the,,,
styling so why is this styling not being,,,
output here so for this we need to go,,,
ahead and add in our themes CSS files so,,,
we're not even going to bother with with,,,
what's in here we're just going to bring,,,
that in and let the styling apply so,,,
let's go back into our main project,,,
folder and let's go to the static folder,,,
we'll go into Styles here,,,
and we're just going to take style,,,
style.css and we're going to bring that,,,
in and at this point I'm just going to,,,
go ahead and get rid of actually I'll,,,
leave main. main.css in there for now so,,,
we dragged in the main.css file now to,,,
add in the styling all I need to do is,,,
go ahead and go into,,,
home.html and you see how the styling is,,,
pointed like this with a file path well,,,
that's because it works in the theme,,,
that way they're in the same file so,,,
what I need to do here is simply add add,,,
in static here so we're going to load,,,
static so we need to load in this tag,,,
and we're just going to change how this,,,
file path points to that CSS file so,,,
we're going to add in static add in a,,,
single quote around this and we're just,,,
going to go ahead and add in the percent,,,
symbols so now if I save this the CSS,,,
file should be applied here actually I,,,
need to go into Styles and then,,,
style.css so if I go into static we can,,,
see the file path right here so again,,,
I'm not worried about the details of,,,
that CSS file that should be applied to,,,
the theme so if I refresh that you might,,,
have to do a control shift R now we see,,,
all the styling being applied here so,,,
this isn't exactly how we want things I,,,
just wanted to show you how to connect,,,
that CSS file so what we need to do is,,,
we need to connect this main template to,,,
our main.css file so we're going to take,,,
all of these contents we're just going,,,
to do control a select everything from,,,
home home.html with the theme Styles and,,,
that new static file and we're just,,,
going to go into main. HTML here so what,,,
I'm going to do is paste this above so,,,
we're going to move all the original,,,
contents down and again there's,,,
different ways and how you can go about,,,
this but for now because I already have,,,
content I'm just going to slowly move,,,
out content and replace it so everything,,,
from home.html is now going to be pasted,,,
inside of main. HTML so I'll just,,,
comment out that Javascript file and now,,,
we have all this content inside of main.,,,
HTML so the first thing I want to do is,,,
I want to go ahead and minimize this,,,
header section and I'm going to take,,,
everything inside of main here so we're,,,
going to highlight everything in this,,,
opening and closing main tag so this is,,,
the content for the actual homepage so,,,
I'm just going to minimize it and I'm,,,
going to remove it so we'll go ahead and,,,
take all of this and get rid of that now,,,
I'm just going to go ahead and take this,,,
Navar,,,
and we're going to bring this into this,,,
theme here so underneath the header here,,,
so we'll bring that in like that and,,,
we'll take this opening and closing,,,
block tag we'll bring this let's see,,,
inside of the themes body tag,,,
here so I think we're actually supposed,,,
to have a body tag here so I'll was,,,
supposed to leave that let's check this,,,
out here no I already have that body tag,,,
so that's already there so body starts,,,
and closes right here okay so we have,,,
the blog tags and we're just going to,,,
add in this message right here or the,,,
flash messages so we're just going to,,,
bring this in right above or underneath,,,
our Navar and above our block tags here,,,
and let's go ahead and now get rid of,,,
all the original content so we have this,,,
section here where we load in that,,,
stylesheet there wasn't much there,,,
wasn't too much to it so let's get rid,,,
of all that and there we go so I'm,,,
scrolling a little bit here but I hope,,,
you see what I'm doing I'm taking all,,,
the content from the theme pasting it in,,,
and adding in the Jango stuff so now if,,,
I save this let's go ahead and also go,,,
into home now so we'll go into home and,,,
because we have this main theme wrapping,,,
our homepage we now no longer need the,,,
head tag and we no longer need the,,,
header here so let's go ahead and get,,,
rid of the header so I minimize that,,,
this is in the home. HTML page so we're,,,
going to get rid of that let's take,,,
everything from the opening body tag,,,
we'll also remove that so delete that,,,
and then at the bottom let's remove HTML,,,
all the way to the script,,,
tag so we have our theme styled inside,,,
of main. HTML here we have these two,,,
blog tags so blog content and end block,,,
and remember we're extending the main,,,
template so now in,,,
home.html we're just going to go ahead,,,
and extend the main template remember we,,,
still have the original home.html that,,,
we can refer to so it's homeor old so,,,
we'll just go ahead and do,,,
extends and this is going to be main.,,,
HTML now all we need to do is wrap this,,,
main tag inside of our block tags so,,,
we'll go ahead and just do block content,,,
and then at the bottom we just want to,,,
wrap all of this here so this is going,,,
to be more tedious once you see it,,,
applied you should be able to understand,,,
how to finish up the rest here this,,,
entire section is going to be a little,,,
bit longer just because we're going to,,,
be going line by line and changing up,,,
all the contents here so now we extend,,,
the main theme so let's save main. HTML,,,
and home.html so we're going to save,,,
that let's refresh it and here we go so,,,
we see our original nav bar here so,,,
we're going to fix all this up here and,,,
the homepage right now even though it's,,,
in our D Jango project is still all,,,
static so we're going to start replacing,,,
this section here so the next thing I,,,
want to do before we go to the homepage,,,
is I want to set this navigation bar so,,,
the reason why we see this is because,,,
we're including our navbar inside of,,,
main. HTML so we include the Navar now,,,
we have a new navigation bar from the,,,
theme it's in this header tag so we're,,,
going to take the bottom header tag all,,,
the way to the top here we're going to,,,
copy that and then just delete it so we,,,
have it saved right now and we're going,,,
to go into navb bar. HTML so again let's,,,
paste this all above the original,,,
content and then we'll slowly replace it,,,
so let's let's go ahead and see what we,,,
need to do here so in this original,,,
section we had a logo that goes to the,,,
homepage I can get rid of that we had,,,
this form that sends us to the homepage,,,
as a get method and it passes in the Q,,,
method so let's go ahead and update the,,,
form inside of the theme so let's see we,,,
have the link here let's D Jango FY this,,,
I guess if that's the right term and,,,
we'll just make this ajango link so,,,
we'll just do URL that's for the logo,,,
that we're that we're about to update,,,
and we're just going to do home so we,,,
update the home link then we have our,,,
form so for the form the method is going,,,
to be a get method and we're going to,,,
send this to the homepage so we'll just,,,
do action and that's going to send the,,,
user to,,,
home Okay so for the,,,
actual search field so we have an SVG,,,
file I'm going to minimize that just to,,,
clean that up for the search field we,,,
just have to specify the name and that's,,,
going to be q and it says search post in,,,
here so let's see so we we set the,,,
method we set the action and we set the,,,
name so I can now get rid of the,,,
original search form so if I save,,,
this everything should still be good so,,,
if I hit enter we're still seeing that,,,
be added right there and this navigation,,,
bar is slowly getting removed now the,,,
next thing is I want to update this,,,
section right here so I need to add in,,,
some JavaScript so you see how as I as I,,,
click on this this section should open,,,
up it should be like a little drop- down,,,
menu item so that's not working because,,,
our theme also requires a Javascript,,,
file so we'll open up these two files,,,
here on the left we have our theme on,,,
the right we have our D Jango project so,,,
we'll go back into the static folder so,,,
we're going back into static and let's,,,
create a new folder for JavaScript so,,,
we'll just call that JS and then in our,,,
theme here let's see we should have a,,,
script file so that's our Javascript,,,
file let's just just drag that into JS,,,
here so now we have that JavaScript file,,,
now in order for that to work let's go,,,
ahead and go back into our main. HTML,,,
and let's bring that in here so I,,,
commented that out and originally it was,,,
just pointing to script.js but now,,,
because this is in our static files this,,,
isn't going to work here so we need to,,,
wrap this inside of a static tag so,,,
we'll do static single,,,
quote and then a single quote and,,,
percent symbol and curly brace okay so,,,
now that I added that static tag I,,,
should be able to do control shift R,,,
just do a refresh and if I click on this,,,
this should work okay so I actually,,,
didn't do that right this is supposed to,,,
point to jscript.dll,,,
the currently logged in user and I also,,,
want to implement this condition right,,,
here so in the Navar we have if the user,,,
is authenticated show the username if,,,
not then we want to show the login,,,
button so let's go ahead and take,,,
request. user and let's go to this,,,
section so let's see this is going to be,,,
just underneath the form we're going to,,,
bring this in into the header user,,,
section and we're going to worry about,,,
the user images later we haven't done,,,
that yet and I left that for the last,,,
section setion for a specific reason and,,,
I'll explain why later but we will,,,
actually have user images so for now,,,
let's go ahead and just output the user,,,
name and then for the actual name here,,,
uh let's just output the username again,,,
so we'll just do user.,,,
username okay so that's the first part,,,
here so let's see how do I want to,,,
update this so this is the not logged in,,,
section so let's take this little,,,
section right here and let's bring this,,,
down,,,
under the user here so we'll save that,,,
and let's take this condition so if the,,,
user is authenticated we'll scroll up,,,
here so if the user is authenticated,,,
let's put that above our header user,,,
section and let's add an end if,,,
underneath this comment here so we'll,,,
just do end if so this is all this,,,
process is is just simply changing out,,,
this information so I'm going to remove,,,
this HR tag we're going to comment all,,,
this out and let's go back to this,,,
condition so we have if the user is,,,
authenticated show the user section and,,,
then we'll just do,,,
else and let's comment or remove the,,,
comments here so now we have this link,,,
right here that takes the user to the,,,
login page which we need to update so,,,
we'll go into URL,,,
login so if the user is not logged in,,,
that's the L statement take them there,,,
there and say log in so let's try this,,,
so we're still going to have to update,,,
some images here so if I refresh that if,,,
I open this up and click log out let's,,,
see in log out I actually want to send,,,
the user there so let's see if the user,,,
is logged in we send them to the profile,,,
page or we have a log out button,,,
here so let's see where is that log out,,,
button does it say log out in the,,,
template it,,,
does I just can't find that text here so,,,
the,,,
username okay so down here so underneath,,,
that condition so this is hidden if the,,,
user doesn't click on that so we have,,,
this log out link right here so it opens,,,
and closes right here so let's change,,,
this to log out so,,,
URL log out and then that's going to be,,,
in single,,,
quotes Okay so now if I click on this I,,,
log out so now it says log in so the,,,
user is logged out and the user can log,,,
in now so if I click log in it's going,,,
to take me to this form and this is all,,,
going to be clean in a second and now,,,
I'm logged in and that username will be,,,
uploaded or updated so there is an icon,,,
here that we want to add and we also,,,
want to add in a logo right there so,,,
let's open up the theme files on the,,,
left and open up our project files on,,,
the right let's open up the static,,,
folder and let's just get rid of this,,,
models file we don't need that and let's,,,
go into assets and let's just take all,,,
of this and drag this in right here so,,,
now we see an avatar and we see a logo,,,
and a fabricon so we'll go back to the,,,
theme here let's go back into our static,,,
files and let's update that so for the,,,
logo this needs to point to the static,,,
folder so we're just going to add in,,,
that the curly braces and percent symbol,,,
we'll go into static and then we're not,,,
going into assets now we're going into,,,
images so we'll change this to images,,,
and that's going to be,,,
logo.svg we'll wrap that in a single,,,
quote percent symbol and curly brace so,,,
that should add the,,,
logo so it looks like I used the static,,,
tag and I have not imported that into my,,,
navigation bar so just above header,,,
let's just import the static tag so we,,,
can use it we'll just do load static,,,
save that and let's give this a test,,,
okay so now we see our loog so the logo,,,
is done and there needs to be an avatar,,,
right here so I'm just going to copy,,,
this section all the way up to this,,,
forward slash and let's find that Avatar,,,
so the Avatar is going to,,,
be right here somewhere so in the log in,,,
section we'll just remove assets paste,,,
that section in and then wrap this in a,,,
single,,,
quote and then a percent symbol and the,,,
curly brace and that should complete it,,,
for,,,
our header section for now okay so there,,,
we go we haven't added in or we haven't,,,
added an account section yet so if I,,,
click on this we can log out and we,,,
still need to work on the settings,,,
section and that's where a user can,,,
update their information now let's go,,,
ahead and move on to this section so,,,
this is all static information this is,,,
all hardcoded in from the theme and we,,,
need to update this because we don't,,,
have 553 topics and all these topics for,,,
python this is not in our system yet so,,,
we need to change all this,,,
so we're going to go back into home.html,,,
so let's close our navbar and let's,,,
close main. HTML if I miss anything,,,
there's a good chance that I will,,,
because there's a lot of code to update,,,
um I'm just going to go ahead and finish,,,
out the video and I'll add in uh like a,,,
final section in this video where we,,,
clean up anything that I missed so let's,,,
go ahead and go into main or uh,,,
home.html and let's clean this up here,,,
so in home the first thing I want to do,,,
is I want to get the topics here so here,,,
we have a topic section we see this,,,
comment right here this is all done by,,,
my designer sharir shuo so he put in,,,
good comments here so I can find where,,,
topics start and end right here so I can,,,
minimize this section and I can see,,,
where everything is so what I'm going to,,,
do here is I need to include the topics,,,
component so remember in our original,,,
template in the old template which I,,,
named homeor old we're going to take,,,
this topics component right here so,,,
let's take this let's copy that and,,,
let's bring that into home.html so let's,,,
go ahead and just paste this in right,,,
here and now what I want to do is do,,,
exactly what we did with the navigation,,,
bar so I'm going to take all these,,,
topics so it's minimized that's going to,,,
copy all of them I'm going to copy that,,,
and I'm going to remove it and then,,,
we're going to go into topics here so,,,
depending on how you have your website,,,
it's going to change how you uh install,,,
a theme here so at this point you should,,,
already start seeing what's going on and,,,
start understanding it so let's go into,,,
the topics component and let's do this,,,
again so let's get rid of browse topics,,,
uh let's go ahead and just get rid of,,,
this URL here and let's keep this Loop,,,
so I'm going to paste in the templates,,,
topic section inside of my topics,,,
component then what I want to do is get,,,
rid of all of these topics except for,,,
one so we'll just keep python here so,,,
now we have python uh for all we're just,,,
going to set that URL to the home URL so,,,
we're just going to do URL and that's,,,
going to be,,,
home and let's take this Loop right here,,,
so let's copy this Loop let's put that,,,
above our python Li tag and let's close,,,
this off here so we'll just do end,,,
four and we can just go ahead and take,,,
this link right here let's copy that,,,
paste this in as this link right here,,,
and now I can just get rid of this okay,,,
so now I just need to update this a,,,
little bit so we have the topic section,,,
included and in this section we want to,,,
render out all the actual counts here so,,,
the correct numbers so for this section,,,
we want to Output the actual topic,,,
name so this is nothing new we'll just,,,
do topic. name and now it's going to be,,,
in a styled format so for the count we,,,
haven't done this but what I can do here,,,
is just do,,,
topic so I can actually do this in the,,,
template so I can do topic dot uh let's,,,
see we're going to do what's the child,,,
object so that's the room underscore,,,
set.all and I don't need to add in curly,,,
braces here and then I can just do do,,,
count so in the template I'm not,,,
actually going to add in not the curly,,,
braces but the percent symbols so I'm,,,
just getting all the topics all the,,,
child objects getting the entire query,,,
set and I'm just going to do do count,,,
and then I forgot to add in the curly,,,
brace so that will give me me the,,,
current number so for all I also want to,,,
get this too so that's going to be,,,
topics actually what I could do is just,,,
go to this topics query set so we'll,,,
just do topics. count and that's going,,,
to give me all the topics so I updated,,,
the count on each topic and the full,,,
number and I also updated all the actual,,,
links here so at this point let's go,,,
ahead and save that and if I refresh it,,,
there we go now the topics component is,,,
updated so if I click on python we can,,,
see the search bar JavaScript web,,,
development and we'll get to the more,,,
section later so that's something I want,,,
to do towards the end I don't want to,,,
spend time on that so for the studying,,,
room let's go ahead and actually build,,,
in the feed and update this value so for,,,
the studying room we'll go back to,,,
home.html and let's,,,
see let's go,,,
into this section right,,,
here so we're going to go ahead and,,,
update this so we'll just do rooms.,,,
count I think that's how I had it so,,,
let's open up the original homepage so,,,
old homepage and that was just room,,,
count so we actually had a full variable,,,
with that value so we'll just change,,,
that that should update the number for,,,
rooms available that's more like it and,,,
now we want to update the feed here so,,,
for the feed uh we don't want to update,,,
this entire section so we have this room,,,
list section so it starts and closes way,,,
down there so we have the mobile version,,,
of this so we're not going to worry,,,
about that there's a search form in here,,,
don't worry about this form let's,,,
minimize the mobile version then we have,,,
our room list header so that's where we,,,
have the count we're not going to worry,,,
about that so let's minimize it and then,,,
we have our room list item so room list,,,
okay so these are the individual items,,,
so what I'm going to do is go ahead and,,,
keep the original room list item so,,,
starts right here and it closes on line,,,
80 at this point and then let's take the,,,
second one minimize it and remove it so,,,
we only need one because we're going to,,,
Loop through them and let's go ahead and,,,
take this room list item so copy it and,,,
remove,,,
it and let's go to the feed,,,
component so we'll go ahead and paste,,,
this into the feed component so now,,,
let's go back into home and let's just,,,
go ahead and include the feed so we'll,,,
just do,,,
include and we'll just do base and then,,,
feed underscore,,,
component. HTML okay so we include this,,,
feed component underneath the header so,,,
there's already technically a container,,,
around it so everything's already,,,
wrapping it so let's go to the feed,,,
component and let's check this out here,,,
so in the feed component we have this,,,
room list item so I want to minimize,,,
that take this value actually you know,,,
what I'm just going to go ahead and,,,
start cleaning this section up so we're,,,
going to get rid of these two divs right,,,
here and let's just take this for Loop,,,
and let's put this above this item right,,,
here so we're just going to copy this,,,
and we're going to create like a copy of,,,
this section down below so we're just,,,
going to copy that and if you refresh,,,
your page it's going to be a little bit,,,
messed up at this point so we have a for,,,
Loop and we're outputting each item so,,,
we just want to update with all the,,,
contents inside of here so uh in the,,,
actual template we decided to uh me and,,,
my designer shirer shuo we decided to,,,
get rid of these edit and delete buttons,,,
and let the user do that from their own,,,
profile so we're going to get rid of,,,
this section and let's just go ahead and,,,
update the actual room list item line by,,,
line so the first thing is we have a,,,
link to the user profile so we're just,,,
going to go ahead and add in a URL tag,,,
so we'll just do URL and then,,,
user-profile and then we'll just take,,,
the room. host. ID so add that in for,,,
the Avatar well that's going to be,,,
updated once we add the user icon here,,,
we'll change the username we'll just do,,,
room. host. username so we're just going,,,
upwards there and we're going to change,,,
this section for the actual time it was,,,
posted we'll just do room.,,,
created and then we'll just do the time,,,
since,,,
filter Okay so we have the username we,,,
have a link the created time for the,,,
title here we just want to change that,,,
to the room title so room or the room,,,
name and we want to update the link to,,,
point to the room so let's just scroll,,,
down here and take this link right here,,,
to the room we'll take this go up here,,,
back to the room name and we're going to,,,
paste that around the link and I'm also,,,
going to get rid of the description I,,,
don't like the description either there,,,
for some reason the more I look at it,,,
just makes the uh feed look a little bit,,,
bit more uh cluttered so I figured if,,,
users want to have a description maybe,,,
you can have like the beginning of the,,,
description and just trim it that can,,,
also work too but I feel like it would,,,
look better without it so now in this,,,
section we have some more data about the,,,
room or information let's just take this,,,
URL and this also is going to wrap this,,,
section so what is this right here this,,,
is the icon of the joined section or the,,,
how many people have joined section so,,,
the icon that shows the users let's,,,
paste in the room link,,,
here and let's see there's nothing in,,,
the room to update so I'm going to try,,,
going through this section as slow as,,,
possible so we want the room topic so,,,
room. topic. name and let's see in this,,,
section where we have all the,,,
participants we can just where uh we can,,,
see how many people have joined the room,,,
that's going to be the participants so,,,
we'll just do room.,,,
participants like that do all. so we can,,,
just get all of those by that many to,,,
Mini Field now I think that's it for all,,,
the links and all the content I think,,,
we're done again we'll go back and fix,,,
it so I can take this bottom Loop right,,,
here get rid of that and all the,,,
information should be updated so let's,,,
save that and let's go back to our feed,,,
here or uh let's go back to our template,,,
refresh that and here we go this is now,,,
the rooms that I have so we can see all,,,
the rooms here all these are linked up,,,
here I can go to the user and I can see,,,
see how many people have joined that's,,,
also clickable we see the topic and that,,,
looks good okay so we're going to get to,,,
the user profile really soon and the,,,
user profile is going to be really easy,,,
because it has the same components so,,,
all we're going to have to do is update,,,
the actual title so or not the title but,,,
the the container so the last thing I,,,
want to do here on the homepage is,,,
update this activity feed and once we,,,
update the activity feed the activity,,,
feed in the user profile will also be,,,
updated so let's go ahead and go back,,,
here,,,
we'll go to the activity feed and let's,,,
go to the homepage actually and let's,,,
just take a look at this so we have our,,,
homepage we have the feed component then,,,
we have this comment that says where the,,,
activities start and stop so we have all,,,
this content and we're just going to go,,,
ahead and put this into a component so,,,
the first thing I want to do is go ahead,,,
and add in the activity component so we,,,
we'll use the include tag so we'll just,,,
do include,,,
and this is going to be base for,,,
slash,,,
activity undor,,,
component. HTML so let's grab all this,,,
content right here so this is all inside,,,
of one main div so we're going to grab,,,
all of that I'll minimize it and then,,,
copy it so we'll copy this remove it and,,,
let's go to the activity component now,,,
so in here I'm just going to get rid of,,,
this title here we'll do the same thing,,,
like we did with with the room component,,,
or the the feed component we're going to,,,
paste in the activity feed and we're,,,
going to start updating things so what,,,
do we have in here so we have a link to,,,
the actual post here to the actual room,,,
based or the user's profile so whoever,,,
made that comment so let's take this,,,
link right here and let's go back into,,,
this style,,,
component and let's see so we have the,,,
profile which we linked to so we're,,,
going to paste that over and let's,,,
actually just grab one item so it looks,,,
like there's two items in the activity,,,
feed so I'll minimize the first one and,,,
we'll just grab the second one,,,
here let's see is it the activities box,,,
it is so it's the activities box so,,,
let's minimize that and let's take the,,,
second one we only need one and we're,,,
just going to be looping through these,,,
so we have the link here and we haven't,,,
created the for Loop yet we'll create,,,
that in a second we have the logo that's,,,
about to be created then we have the,,,
actual username so we'll go down here,,,
and let's just,,,
take the username so message. username,,,
which we're going to be outputting,,,
through the loop and we'll take the time,,,
since tag here so the created time we'll,,,
put that in right here and let's see so,,,
we also,,,
want a link here to be able to remove it,,,
to actually remove an item so let's,,,
create the for Loop so let's take this,,,
for Loop for message and messages then,,,
we output put each activities box so we,,,
put that right there find the closing,,,
tag to the activities box and create the,,,
end for Loop so,,,
end4 okay so in this section this is,,,
where we're going to have an if,,,
statement right here so this is going to,,,
be the delete icon we only want users,,,
who made the original post to be allowed,,,
to delete it so we're going to create,,,
this condition right here around this,,,
item right here so the room list the,,,
room list room actions okay so blame,,,
shuo for the CSS convention there for,,,
the naming okay so we have the user we,,,
check if it's the user and if it is then,,,
we just take that delete link and we're,,,
going to throw that in right here so,,,
that's going to be in this condition,,,
right here throw that in that's going to,,,
be an X icon here so that's an SVG image,,,
so we have that right there so I'm just,,,
going to go ahead and remove,,,
this condition from this section just,,,
want to clean things up so we'll take,,,
everything from here we also want to,,,
Output the message so where was the,,,
message so the message is right here so,,,
the room,,,
content so we have the remove item,,,
underneath that we have the room content,,,
so we'll just do or the message. body so,,,
the message body itself and then we have,,,
the reped to so that's going to show the,,,
original title so we'll just do message,,,
and let's see we did message. room. tile,,,
I think or,,,
name just want to make sure so that's,,,
supposed to be in curly braces we want,,,
to wrap that right,,,
there we'll go down to the original so,,,
we,,,
did message. room so we're just,,,
outputting the room name and we don't,,,
need to actually do room name like that,,,
so we have the room name we have the,,,
body and we want to make sure that we,,,
link to that room so somebody uh if,,,
somebody sees that message we want them,,,
to be able to click on that,,,
so in this section right here let's see,,,
let's just add the link right here so,,,
we'll just,,,
do room here so let's see we're going,,,
into message or uh this is actually,,,
going to be a URL tag so let's fix that,,,
up we'll do URL and we're go into room,,,
and the link here for the ID is going to,,,
be message. room.,,,
ID so we have the body all the links,,,
look good here let me just go ahead and,,,
remove this so we have the time since,,,
stamp so I'll remove the original,,,
content let's save it let's take a look,,,
see if we have any issues let's go back,,,
to the home feed and we're missing a,,,
block tag so invalid block tag on line,,,
29 here so on line 29 this is supposed,,,
to be an end if so end if like,,,
that okay so here we go so we have the,,,
activity feed so if I click on the user,,,
I can see the user's profile if I click,,,
on the actual item here that takes me to,,,
the room and I can see the message and,,,
the time sense is correct okay so I,,,
thought maybe I didn't update that so,,,
time sense looks good and that creates,,,
our homepage okay so we took the most,,,
time here because we had to work on our,,,
main template the navigation bar and I,,,
had to kind of explain some Concepts,,,
here so the next thing I want to do here,,,
is jump to the uh profile so when we,,,
click on a user profile I want to here,,,
because this is the next section here,,,
that uh is going to be the easiest to,,,
update so let's go ahead and open up our,,,
theme and we'll open up our website so,,,
let's go to the main website let's go,,,
into Bas into templates and then let's,,,
find the profile. HTML file so let's,,,
bring that in actually I want to bring,,,
that into the base,,,
folder so the original profile page,,,
actually let's just go ahead and name,,,
that to underscore old like that and,,,
then let's bring in the new profile so,,,
that's going to mess up some stuff here,,,
so if I actually refresh now we see this,,,
right here so we need to update all of,,,
this so let's go into the profile page,,,
now so we'll close out the activity,,,
component let's keep the home component,,,
open because I want to copy this extends,,,
main. HTML and block tag right here and,,,
we'll go into profile and because it's a,,,
template there's no Dynamic data the,,,
header section and all this information,,,
will be on every single page so the,,,
first thing I'm going to do do is take,,,
this doc tag and scroll all the way down,,,
to the closing header tag so where main,,,
is right here let's just remove all of,,,
that and let's just paste in this,,,
section or write that out so extend the,,,
main template create the block tag and,,,
then go to the bottom here at the,,,
closing main tag and let's just remove,,,
body and HTML and we'll just do end,,,
block so at this point I'm going to move,,,
a little bit faster so we'll just do n,,,
block content so I'm going to move,,,
faster because the the concept was,,,
already explained now I'm just going to,,,
be changing out the information so this,,,
is now my profile page now it's time to,,,
update the actual content here so this,,,
isn't the real content this is all,,,
hardcoded we can see the topics here,,,
that's not the right topics that we have,,,
here so we want to just go ahead and,,,
update all of these so let's do that so,,,
let's see we have a topics component,,,
that we used in the original so profile,,,
old so I'm just going to get rid of,,,
actually I'll leave that let's go ahead,,,
and take this include topics component,,,
and let's bring that into profile so in,,,
profile. HTML into the or inside of the,,,
new one here is the topics wrapper so,,,
I'm going to minimize that we can see,,,
topics start topics end so I can get rid,,,
of all of that right there and I'm just,,,
going to replace that with this,,,
component right here so all I'm doing is,,,
just removing that component updating it,,,
and that should be good so if I go ahead,,,
and refresh this now we see the real,,,
topic so I can do the same for the,,,
activity feed so if I go back into the,,,
homepage I'm just going to go ahead and,,,
grab the activity component let's go,,,
back to the new profile page and let's,,,
just minimize this room list right here,,,
let's go into activities and let's just,,,
remove all of these too so we'll get rid,,,
of those and paste in this activity,,,
component save,,,
that and there we go so that's all,,,
updated now and I also need to update,,,
the feed here and I'll just update these,,,
contents in a second so shuo is being,,,
funny here rot in Dennis Kardashian,,,
Ivanov that's,,,
funny trolling me so let's go ahead and,,,
update that so we see the room,,,
list here we have a profile so this is,,,
the profile information so we'll update,,,
this in a second I'll minimize that then,,,
we have the room list header,,,
so okay so that's the header section,,,
then we have the room item here so we,,,
can see that we have two of these so,,,
room list and room list okay so let's,,,
minimize these I keep forgetting the,,,
names,,,
here so room list content no it's room,,,
list right here let's minimize that and,,,
minimize that so we have the two fake,,,
components let's remove both of those so,,,
let's remove these two divs and let's,,,
include this feed component so we're,,,
just going to update that and this is,,,
going to Output each user's feed right,,,
here so that can to be pasted in right,,,
here so inside of the room list or,,,
underneath the room list header let's,,,
paste that in right here okay so that,,,
should be it so if I refresh it uh I can,,,
see Dennis is not hosting any rooms I'm,,,
not sure if that's the case let's just,,,
try this let's see if I go to Dennis,,,
okay so I am hosting rooms this just,,,
needs to be updated so we actually need,,,
to update the contents here at this,,,
point we're not going to update the,,,
about section because we haven't added,,,
that in we'll take care of that in a,,,
little bit but I do want to update the,,,
name here and the username and then the,,,
edit and the user icon here will be,,,
updated too uh later once we get to that,,,
section so let's go ahead and go to this,,,
right here in the room list tag we'll go,,,
to the profile,,,
section let's change the name and this,,,
is just going to be user.,,,
username and then later on we can,,,
actually output a real name so we'll,,,
just go ahead and take that copy that,,,
replace it and the edit link will be,,,
updated once we add that page so if I,,,
refresh it there we go so if I go back,,,
to the homepage let's click on Eric Eric,,,
doesn't have any rooms hosted but I can,,,
see his information and I can see all of,,,
Eric's comments let's try one more and,,,
let's just go to Tim there we go so,,,
that's all good here so let's go to the,,,
actual room itself now so if I click on,,,
a room I want to style this page now so,,,
let's go ahead and open up the two,,,
folders again and let's bring in or,,,
let's rename the old room page so we'll,,,
just rename that to room uncore,,,
old and let's grab the new room template,,,
and let's just bring that in right here,,,
so we have the new room template if I,,,
refresh that we need to change out the,,,
content so The Styling is,,,
there let's go,,,
to the homepage take those same block,,,
tags right here these two block tags to,,,
extend the template and we'll go into,,,
room. HTML so again we're going to go to,,,
the opening doc tag copy all of this all,,,
the way to the main tag so right here I,,,
guess my mouse isn't showing so we're,,,
going to paste that in right here and,,,
then we can close that up here so we'll,,,
just take this,,,
tag and let's remove the closing wow,,,
that's a lot of scrolling so we'll fix,,,
this up in a second let's remove the,,,
closing HTML and body tag and we'll just,,,
do end block so now if I save this you,,,
might have to do a control shift R do a,,,
hard refresh so now we see the page,,,
again the content needs to be updated so,,,
let's start with this participant side,,,
right here I want to change that because,,,
uh that's just making my HTML file a,,,
little bit obnoxious here so let's start,,,
with these participants here so here we,,,
go we see a participant the actual link,,,
so each participant is wrapped inside of,,,
a link so let's take the opening,,,
participant and let's just scroll all,,,
the way down to the last participant so,,,
I see that right right here let's go one,,,
above and let's keep one so if I save,,,
that we should see one participant and,,,
we want to go ahead and just Loop,,,
through so in the original room page we,,,
just Loop through all the participants,,,
like this so we did four user in,,,
participants go ahead and output that so,,,
here we go we have one participant,,,
inside of that section then we'll put in,,,
the closing and four,,,
tag so,,,
N4 save that and now that should output,,,
that information we need to update the,,,
actual contents so this is going to be,,,
user. username and we're just going to,,,
repeat this right here and we'll just do,,,
user. username we want to add in the,,,
link here so we see oh we didn't link it,,,
up earlier so let's add in a link to the,,,
user's profile if you see a participant,,,
you want to go ahead and visit their,,,
profile see what kind of rooms they're,,,
hosting or reach out to them we can just,,,
do user dot or Dash,,,
hyphen,,,
profile and then user. ID okay so we,,,
have the link we want to get the count,,,
here so let's see we'll just take the,,,
participant,,,
count let's just take this value because,,,
I always have a hard time spelling that,,,
word we'll just do dot count so that's a,,,
query set so we can just take that value,,,
and do do count refresh it there we go,,,
so three people have joined this room,,,
I'll zoom in a a little bit that's all,,,
taken care of I can click on a user,,,
profile that all looks good and now we,,,
need to update the actual study room and,,,
the CSS might look a little bit off,,,
because I'm so zoomed in right now so,,,
we'll work on that if there are any,,,
issues I'll make sure that the template,,,
is updated by the time uh you take this,,,
course or follow this video so now we,,,
need to just update the room information,,,
so let's update the name here and let's,,,
update the delete and edit links here,,,
so we also want to update that back link,,,
too so let's just start by going through,,,
line by line here so uh we'll start at,,,
the top here and let's see so we have,,,
the,,,
room so one second you need to get some,,,
notes ready so we have the room uh this,,,
is the back button here let's just send,,,
the user back to the homepage we're not,,,
going to worry about the details here if,,,
you want to send them somewhere else or,,,
maybe the previous page you can do that,,,
for now I'm just going to send the user,,,
back to the homepage that's an Arrow,,,
left button study room let's see so in,,,
this section top,,,
right let's see we have the edit links,,,
right here so top right section we have,,,
the edit and delete links so let me,,,
minimize these then we have the delete,,,
link so what I want to do is make sure,,,
that only the owner of each room can,,,
actually modify this so I'm going to,,,
update this right here so we'll create a,,,
condition and for this top right section,,,
let's go ahead and create that so we'll,,,
just say if,,,
room. host is equal to,,,
request. user then we want to Output,,,
this otherwise we don't want just,,,
anybody editing the room so we'll just,,,
do end for save that and let's take a,,,
look so let's refresh it what did I do,,,
here so I did that whole thing again,,,
where I forgot to make that end if not,,,
end,,,
for okay so we see the study room if I,,,
go to a room that I'm not hosting I'm,,,
logged in as Dennis here um let's just,,,
find a room that Tim is hosting so I,,,
actually want to go to the room I want,,,
to learn HTML so I can't edit that but I,,,
can edit my own so if I go to I want to,,,
learn JavaScript we can see these two,,,
links so let's update these links we'll,,,
go in here let's expand these so this is,,,
the edit link so we'll just go ahead and,,,
create the URL tag so we'll do URL and,,,
then this will be update Das room and we,,,
want the room ID so room.,,,
ID okay and let's just call copy this,,,
right here and minimize this section and,,,
then we'll go to the delete link and,,,
we're just going to add in delete,,,
room okay so delete room right there,,,
refresh it so if I go X right there that,,,
works edit that gives me the form here,,,
so we'll finish up styling those okay so,,,
now we should move on to probably,,,
updating the title so let's just remove,,,
this comment here that should be gone by,,,
the time you see that I'll try to make,,,
sure that's updated uh here we have the,,,
room title let's modify all of this so,,,
room. name not title then we have the,,,
created time so we'll just do,,,
room. created and then pipe time,,,
since then hosted by we this is going to,,,
be the host URL here so first we want to,,,
add in the link so URL and then,,,
user-profile,,,
and then that's going to be,,,
room. host,,,
host. hosted by and then later on we'll,,,
update the user profile and let's just,,,
output,,,
room. host.,,,
username okay so refresh that let's,,,
learn JavaScript that looks good we see,,,
the host that link works um at this,,,
point let's also get rid of this,,,
description I don't know why but I just,,,
don't really like the idea of a,,,
description like on a Discord server you,,,
might have some kind of description,,,
there but it really doesn't just show up,,,
there so what I'm going to do is just,,,
comment that out I feel like it's look,,,
better and it's going to make this,,,
website a little bit more responsive,,,
here so the descript the description of,,,
a room is gone we want to Output the,,,
topic so room. topic we'll save,,,
that okay so that's JavaScript if I go,,,
to study with me that's python okay so,,,
we'll remain here because there are,,,
three comments here that we want to,,,
Output so these are all the fake,,,
comments we're going to modify these,,,
right now and again this footer right,,,
here if it needs to be fixed we'll fix,,,
it later in the template the HTML should,,,
not change um but also I'm really zoomed,,,
in so that's why this is probably,,,
happening here so uh let's go into the,,,
contents so let's see we're going line,,,
by line uh author of a thread here so I,,,
think it's called thread I think that's,,,
what each item here is called so we see,,,
threads so if I add some space here,,,
minimize this class of thread I can see,,,
another class of thread so what I'm,,,
going to do is go ahead and delete all,,,
of them and keep just one and then,,,
create the for Loop so I can see,,,
three three threads right here can't say,,,
that and uh let's go ahead and create,,,
some space let's make sure there's only,,,
one okay so I see one thread right here,,,
now let's go ahead and create that Loop,,,
so let's see in the original,,,
room we just did when we outputed this,,,
content we just did four message in room,,,
messages so let's paste that Loop or,,,
just write that out and then at the,,,
bottom of the thread let's just do end,,,
for,,,
okay so in the thread now we want to,,,
update the content so we want to link to,,,
the user so we're just adding in a bunch,,,
of the same links this section is going,,,
to be pretty long probably an hour maybe,,,
even an hour and a half and I'll just,,,
make sure to time stamp it uh but this,,,
is all important for making sure this,,,
project is nice and styled so profile,,,
and then we'll just do user us. idid,,,
or we'll just do message. user. ID then,,,
we'll just take the message user I'll,,,
put,,,
that,,,
username the post here that's going to,,,
be the message with the time sense stamp,,,
so message.,,,
created and then pipe time sense okay,,,
I'm really oh did I I blocked that out,,,
sorry about that so let me just just,,,
minimize that so my face blocked out so,,,
there you go you can see the code right,,,
here oh okay so there we go we see the,,,
message and we see the username and we,,,
also want to make sure that this delete,,,
method is conditional so if a user is,,,
the owner of this specific message then,,,
we want to Output this so we'll add in,,,
an end if statement and then an if,,,
statement right here so we'll just,,,
do if and then we'll just start with,,,
request. user is equal to message do,,,
user that should output that and this,,,
should send the user to the delete,,,
section here so I need to add in a link,,,
around this I noticed that the link was,,,
not built in so if it's not added by the,,,
time you see this go ahead and just add,,,
this link around here and let's just do,,,
href I guess it's not an issue because I,,,
showed you as long as I don't miss out,,,
on that and we'll just do a URL and this,,,
will be delete Das message and then,,,
message. ID okay so for the actual,,,
contents of the message right here we'll,,,
just do,,,
message. body paste that in let's check,,,
this out we'll refresh it and there we,,,
go we see our messages that looks good,,,
we see the Tim stamp we see each user,,,
the user is clickable if I go to delete,,,
so in this case I am Dennis here as a,,,
user I'm logged in as Dennis I can click,,,
on delete and I can confirm that and,,,
everything looks good for the room,,,
section so let's go ahead and work on,,,
the create room form so at this point,,,
uh let's see we have this link here or,,,
we should have it where the heck did,,,
that link go so I'm logged in was that,,,
not in the original template or did I,,,
get rid of that okay so I had to pause,,,
for a minute because apparently I,,,
deleted this create room link right here,,,
so I'll make sure that it's in the,,,
template once you're working with this,,,
but I couldn't find it and we must have,,,
accidentally removed it when we were,,,
making edits here so at this point,,,
inside of your home.html file go ahead,,,
and open up this section right here,,,
where we have the study room title and,,,
the room count and go ahead and go to,,,
this link and just update this to URL,,,
and then create room so create Das room,,,
and that should update our link so if,,,
you go to the page here now you should,,,
see this section right here so when we,,,
go to create room the first thing I'm,,,
going to do here is style this page so I,,,
want to make sure that it's all styled,,,
we'll install the theme and then I'm,,,
going to add in some functionality here,,,
so a user can actually add in their own,,,
topic here so that's going to require a,,,
little a little bit more in the back end,,,
to customize that so uh we'll get to,,,
that in a second so the first thing is I,,,
want to go ahead and install the theme,,,
here so let's open up the theme and,,,
let's open up the original template so,,,
on the right I have my current project,,,
on the left I have the theme so this is,,,
going to be create room right here so,,,
let's bring that in and let's just do,,,
this I call that room form and this can,,,
actually update a room too so it doesn't,,,
only create it so I see room form right,,,
here let's just change this to room,,,
formore old and we'll change this create,,,
room right here to room,,,
form so room unor form and that's,,,
already an HTML file so now if I refresh,,,
it I can see this so we're going to have,,,
to update this information right now so,,,
we'll just go ahead and take these block,,,
tags right here where we extend the,,,
template let's open this up and let's go,,,
into to the room form so in the room,,,
form we're going to take the doc tag all,,,
the way to main remove that paste in the,,,
extends method and take this block tag,,,
go to the bottom and we'll remove,,,
everything to body and we'll make sure,,,
this is an end block okay so we want to,,,
be able to update the room so we have a,,,
form here so let's go ahead and first uh,,,
fix up some links here and then we'll,,,
output the form so in this section here,,,
at the top let's go ahead and start here,,,
let's just kind of read through,,,
everything start with this first link,,,
and let's see we'll just go ahead and,,,
add in a URL to the homepage so we'll,,,
just do home or a URL tag and then we,,,
have create study room let's just do,,,
create slash update or something like,,,
that save it like that and for the form,,,
value the action is going to the,,,
original URL the method is going to be,,,
post so let's look at up the original or,,,
the old form room so we have the action,,,
the post method we're going to get that,,,
csrf token let's paste that in right,,,
here and let's see so if I go ahead and,,,
look at the fields now so here we see a,,,
form group we see some information here,,,
so uh let's just comment this section,,,
out right here so I want to comment that,,,
out we have a form group right here so,,,
what I could do is just create a for,,,
loop around this so I could just go,,,
ahead and do something like four,,,
field field in form and then just do and,,,
four so if I do something like this and,,,
get rid of these fields right here this,,,
will actually work here so if I save,,,
this let's just see what we have at this,,,
point so let's just make sure the form,,,
is working uh looks like we need a,,,
closing block,,,
tag let's see end,,,
four so let's refresh that and this,,,
should be good once we output the field,,,
values so in this case we'll just do,,,
field field. label let's get rid of that,,,
R right there fix the spelling error and,,,
we'll just output the actual field so,,,
I'm just going to comment that,,,
out and then let's just go ahead and,,,
bring in the field so we have the label,,,
we can access the label like that and,,,
then we can actually output the field,,,
value so for the most part it should be,,,
styled okay so here we go so we see our,,,
topics if I select Jango uh let's just,,,
try python let's just do Python and,,,
we'll just say let's keep learning not,,,
really creative with these titles and,,,
we'll submit that so here we go I see,,,
that I created it the form is officially,,,
working and it's styled now in this,,,
section we're going to learn something,,,
new if you don't already understand how,,,
this works so we're we going to use uh,,,
an input field that also has a drop-,,,
down select option here so let's go,,,
ahead and get rid of this for Loop right,,,
here so we'll still use the model form,,,
but some of the fields I'll manually,,,
render them out and one field in,,,
particular for that dropdown list all,,,
hand code everything so with a model,,,
form I can actually access the form and,,,
then access a specific value here so,,,
this will be form. name and that will be,,,
that form field now I could also do the,,,
same thing with the label here in this,,,
case I'm just going to write it out,,,
because it's a small field here so we'll,,,
just or a small form so we'll just do,,,
room name and let's just go ahead and,,,
get rid of this let's copy this one,,,
right here and we'll just do form.,,,
description so we're just going to get,,,
the values manually room,,,
description and let's continue here okay,,,
so I already have the code right here in,,,
the template but I want to manually uh,,,
code it up just so I can explain as I,,,
move along here so the first thing is I,,,
just want to go ahead and copy this div,,,
right here so let's just copy all of,,,
this paste it in and I'm going to get,,,
rid of this value here and for this,,,
section in the four attribute here we'll,,,
just do uh,,,
topic so we'll get the topic and let's,,,
actually update this to,,,
description and let's continue okay so,,,
this is going to be a drop down list but,,,
the first thing we're going to do is add,,,
in the input value so it's a drop down,,,
list with an input value the type will,,,
be text and the name needs to be uh,,,
topic here so this is how we're going to,,,
get this in the back end so we're still,,,
submitting the same form data so we have,,,
that and we're also going to set this to,,,
required so we want to make sure that a,,,
user can't submit it without selecting a,,,
topic or adding their own and then we're,,,
going to add in the list property here,,,
and we're just going to set this to,,,
topic Dash list okay so we have a,,,
standard input field the only thing that,,,
looks different here at this point is,,,
this section right here so if you're not,,,
familiar with it that's all that's,,,
changed here if you already know this,,,
well I'm just going to be going over,,,
stuff that you understand now we also,,,
have a data list tag here that we can,,,
work with now a data list is going to be,,,
the options that drop down when the user,,,
starts typing something in and in this,,,
section we need to add the ID and the ID,,,
needs to match this section right here,,,
so we're basically say we're basically,,,
saying where is this list right here and,,,
we're pointing to topic list and that,,,
has the ID right here so make sure those,,,
two match that's how it knows where to,,,
find it then let's go ahead and add in,,,
the select option so we'll just do,,,
select here and we're going to give this,,,
an ID here so we'll just do what the,,,
heck did I do there okay so we'll do ID,,,
and this will be room,,,
topic and then we want the options here,,,
so the option we'll just use the option,,,
tag these are going to be the form,,,
options so let's say we just do,,,
something like Python and then we set,,,
the value here so the value uh typically,,,
would be something like an ID but uh in,,,
this case we're just going to set the,,,
string value so we'll just do python so,,,
it would be the ID of like the child,,,
objects and then we can throw in Jango,,,
so there's a reason why I'm doing things,,,
this way we'll see it in a second okay,,,
so now that I did this we added the data,,,
list with the options let's go ahead and,,,
take a look at this form here so if I go,,,
here when I click on this we see this,,,
drop down option and we see these values,,,
so if I start typing in Python it does a,,,
search if I want to add in my own let's,,,
say I want to add in Java then I can,,,
actually submit my own value so that's,,,
just what we need in the front end here,,,
and what I actually need to do here is,,,
pass in some more information because I,,,
don't want to hard code this value out,,,
that also needs to be dynamic so we need,,,
to go ahead and go into the create form,,,
View and let's just go ahead and get the,,,
topics so we'll just do topics that'll,,,
be topic,,,
doobs doall so we'll get all the topics,,,
we'll pass those into the,,,
template and then we can go into the,,,
room form and we're going to create a,,,
for Loop just to Output all the real,,,
topics so as we add them we obviously,,,
want the users to see all of those so,,,
we'll just do four Topic in,,,
topics and then let's get rid of this,,,
last option or the second one and we'll,,,
just close off the for Loop so we'll do,,,
end four and we're going to pass in the,,,
topic values now so we'll just do topic.,,,
name take this right here and we'll,,,
we'll bring that in for the value so I,,,
also want to do the same for the update,,,
view so for users updating it we're,,,
going to need the same values now so we,,,
want to be able to get the topic so,,,
let's bring that in here pass that into,,,
the context dictionary for the update,,,
View and now if I go here if I click on,,,
this we see all of our real topics if I,,,
start typing something in it starts,,,
searching automatically and there we go,,,
so that's all we need for the front end,,,
now in the back end we're going to have,,,
to process this a little bit differently,,,
so now we have this data list and our,,,
form looks a little bit different so,,,
we're not going to be able to use the,,,
standard model form now I probably could,,,
customize it a lot to work with this but,,,
in this case I only need to customize,,,
this view so we'll stick with uh just,,,
keeping things simple so the first thing,,,
I want to do is get the topic name so,,,
we'll just go ahead and go into request.,,,
poost doget and we're going to get the,,,
topic okay so once I get the topic we're,,,
going to go ahead and set this value and,,,
we're going to use a method called get,,,
or create so we set topic and created,,,
and we're just going to do and I'll,,,
explain what this is in a second so,,,
we'll just do topics,,,
doobs doget or create so it's a method,,,
here I'll make sure that I'm not,,,
covering it and what's going to happen,,,
here is get or create is going to return,,,
back either an object or it will return,,,
an object and created and what's going,,,
to happen here is if we pass in the,,,
topic name for the name value so let's,,,
say we add in JavaScript or python we,,,
already have python so get or create is,,,
going to get the value of python and,,,
it's going to return it inside of this,,,
topic object now created will be false,,,
because python wasn't created we already,,,
had this but let's say I added in a new,,,
value like uh just Java now we don't,,,
have Java in our database at this point,,,
so what's going to happen is created,,,
will be true and this will simply create,,,
the object so if it can't find it it,,,
will create it so that's what get or,,,
create is doing so this is how we're,,,
going to be able to customize that form,,,
since we are trying to also add this now,,,
what I'm going to do here is get rid of,,,
everything in here so I'm just going to,,,
comment this out right here and I'm,,,
going to change this up here so we're,,,
not going to be using the form here and,,,
I can also comment out this right here,,,
so at this point underneath this section,,,
we're just going to go into room doobs,,,
do create and we're going to use the,,,
create method because we're customizing,,,
that topic section uh I try to find,,,
easier ways to do this and this is,,,
actually very easy but I tried to find a,,,
way to do this with a model form easier,,,
and I couldn't find one that wouldn't,,,
require um more explanation so I wanted,,,
to keep it simpler so we have the host,,,
here and once we get the host and we,,,
just finished updating our form so now,,,
we're like redoing the same information,,,
here or redoing the same thing but now,,,
it's going to be a little bit different,,,
so uh we're just going to do host and,,,
that's it's going to be request. user so,,,
you still got to at least learn that,,,
method if you need that elsewhere so at,,,
least you know how to do that so now,,,
that we got the host we're going to get,,,
the topic and we're going to set the,,,
topic to either the newly created topic,,,
or what we had in the database so we're,,,
we're creating a room with all this,,,
information and for the name we're just,,,
going into request. poost doget and,,,
we're passing in the name so the name,,,
will still be passed in from the form,,,
value so we still have it right there we,,,
still have the model form Fields those,,,
will be sent so we get the name and then,,,
we need to get the description if we,,,
have a description so that's not,,,
required so we'll just do,,,
description and we're just getting the,,,
description from the front end so I hope,,,
that makes sense so once we run through,,,
this I'm just going to go ahead and,,,
let's just remove this actually so we'll,,,
just remove that there's no need for,,,
that so now when we submit this we,,,
create that top and then we redirect a,,,
user so let's go ahead and save that and,,,
here we go so let's try this so let's,,,
see what's a new topic let's just do,,,
Java so we'll just do Java and we're,,,
going to create a room and we'll just,,,
say,,,
calling all,,,
Java,,,
developers okay so now we submit that,,,
here we go we see the room and we see a,,,
new topic added now if I go to create a,,,
new topic Java is now here so the next,,,
time someone submits this that's going,,,
to go ahead and create this so for the,,,
update functionality let's see so we,,,
need to be able to also update a room,,,
and this I haven't really thought about,,,
yet actually I didn't really prefer this,,,
in the tutorial but let's just uh see,,,
how we can figure this out so let's see,,,
so in the update room functionality,,,
we're rendering out the topics and in,,,
order to prefill the room name I guess,,,
that's supposed to be a topic not a room,,,
name so let's fix that in the form so,,,
we'll go back here this is supposed to,,,
be the,,,
topic actually we'll just say enter a,,,
topic so we want to prompt the user so,,,
we'll do enter a topic let's try that,,,
one more time okay so first of all the,,,
form needs to be pre-filled so let's,,,
take care of that issue so we'll go,,,
ahead and take the room we'll pass that,,,
into the context dictionary we'll bring,,,
that in then we can go into the room,,,
itself and for the value we'll just set,,,
the value here and that will be room.,,,
topic so,,,
room. topic. name now let's see if that,,,
gives us an issue with the create room,,,
so if I go to create room okay so it's,,,
not giving us an issue so it's totally,,,
fine uh let's try to add in another,,,
topic we'll just say,,,
C++ let's learn C so I just want to,,,
debug on the go so C is added and there,,,
was no issues okay so now we want to,,,
edit that so we see C++ let's learn C,,,
and I also need to process this too so,,,
when I submit this this form will not,,,
work in the back end so I'm going to do,,,
what we did up here I'm just going to,,,
copy this right,,,
here we're going to take all of this and,,,
we're going to bring this into the post,,,
method then I'm just going to go ahead,,,
and remove all of that and we'll just,,,
set the return method back and we're,,,
going to get the room so we'll get the,,,
current room and we'll just get the name,,,
we'll get the room name and let's just,,,
do room name is equal to,,,
request.,,,
poost doget and then we'll get the name,,,
value so we're just simply going to get,,,
the model and update all the values so,,,
we'll set that for the topic and the,,,
description so we'll just do topic and,,,
then for the topic we'll get either that,,,
newly created topic because a user can,,,
edit something and decide to create a,,,
new topic,,,
and we want to be able to set that so,,,
we'll just do,,,
description and then we'll just do,,,
request. post. description and then we,,,
need to save it so let's try,,,
this some things I don't plan for in all,,,
the tutorials or in these tutorials so,,,
let's try this again okay so let's say,,,
we decide to change this up and we'll,,,
just do c now so we'll throw that in I,,,
think that's a symbol so we'll just do,,,
let's learn,,,
C exclamation point add in a description,,,
let's just say something random here so,,,
we know everything,,,
submitting and let's go ahead and hit,,,
create room let's learn CP and that was,,,
updated perfect okay so that's C we see,,,
the topic C was added and everything,,,
looks good so instead of saying create,,,
room let's just say update to I want to,,,
make sure that form looks good I could,,,
write some kind of condition here but,,,
we'll just say submit that's going to be,,,
a little bit more generic okay so that's,,,
it for our create room form so we're,,,
able to update and create with a styled,,,
form with the ability to add in multiple,,,
topics here so now you can see all these,,,
new topics be added okay so the next,,,
thing I want to do is give the user the,,,
ability to edit their account so we,,,
don't even have this page here so we,,,
want to start building this in here so,,,
let's go ahead and do this and at the,,,
bottom here uh or let's just go ahead,,,
and open up our files here let's start,,,
with the theme and let's start with or,,,
let's move to our app too so we'll go,,,
into,,,
to uh study study Bud we'll go into Bas,,,
so in the Bas app in templates in base,,,
let's go ahead and go in the templates,,,
here and we're going to take edit user,,,
okay so we're going to drag this in we,,,
have edit user and I'm going to change,,,
the name to update user so we'll do,,,
update Das user and that's it okay so,,,
now we want to create a view for this so,,,
this is going to be a completely new,,,
page so we're not going to be changing,,,
content out we'll just be building it,,,
for the first time we'll go down here,,,
let's create a function based view,,,
called update user pass in request I,,,
also want to make sure this view right,,,
here is restricted so you shouldn't be,,,
able to update a view if you're not,,,
logged in we'll just do login required,,,
and then we'll set the login,,,
URL and that's going to login let's see,,,
how did I set that yeah so we set the,,,
login URL to login okay so we're,,,
creating the view then we want to return,,,
this is going to be render we'll pass in,,,
request here and we're passing in,,,
base SL,,,
update Das user. HTML okay so that's in,,,
here now update user we see the full,,,
template and let's pass in the context,,,
dictionary Well for now we might not,,,
even need one I don't even I don't,,,
remember how I was going to build this,,,
one out so we'll just kind of wing it,,,
here and see so we'll take this delete,,,
message let's go ahead and move this,,,
down here and we'll just say update and,,,
then change that that to user let's,,,
remove this so we don't need an ID,,,
because the user is going to be the,,,
logged in user change that to update,,,
user and we'll just do,,,
update user like that okay so we have a,,,
view and we have a URL that returns back,,,
the template that needs to be fixed up,,,
right now and inside of our navigation,,,
bar so we want to link to this from a,,,
few sections the first one is going to,,,
be the nav bar so we'll go into the nav,,,
bar here and let's see in this drop down,,,
section we see the username and then,,,
down here are going to be the drop- down,,,
menu items let's just change this to,,,
update users so we'll set the URL,,,
tag update Das user okay so let's try,,,
this out if I go into the navigation bar,,,
I'm logged in go to settings here we go,,,
here is my update user page so let's,,,
make sure that it's styled so we'll go,,,
ahead and fix that we'll open up update,,,
user in templates,,,
and let's just go ahead and take,,,
everything from Doc type all the way,,,
down to header extend the main template,,,
sure you guys are getting pretty annoyed,,,
at this point dealing with the same,,,
thing but it's just repetitive and we,,,
have to do it so main. HTML I think,,,
we've done this like 15 times at this,,,
point so we'll just do block,,,
tag or block,,,
content and then end block content we'll,,,
just copy that bring that down here,,,
remove body and HTML at the closing main,,,
tag and let's take a look at the page,,,
here okay so here is our edit edit user,,,
template so I also want to link to this,,,
from my profile so if I go happen to go,,,
to uh a specific profile so I'm logged,,,
in as Dennis we have an edit profile,,,
link here so we'll create a condition I,,,
think I might have already did that,,,
we'll go to profile here and let's see,,,
so we have the about section edit user,,,
so we'll just go ahead and write the,,,
conditions so if,,,
request. user is equal to the currently,,,
logged or if the user that we're on is,,,
currently matching the logged in user,,,
then we want to render that button and,,,
we'll add in the,,,
link so end if kept messing that one up,,,
early or earlier and we'll add in the,,,
URL tag so we'll just do URL and update,,,
Das ususer,,,
okay so we have that information we have,,,
the template this link should now work,,,
so if I'm on my own profile I can edit,,,
my account if I'm on let's say Eric's,,,
account I can't edit that so that is,,,
hidden so let's work on the,,,
functionality so we want to be able to,,,
create a form that we can actually,,,
process so that link also needs to be,,,
updated so that was also one in the,,,
navigation bar it looks like there's two,,,
in the Navar so let's take this update,,,
user link and let's go,,,
right here so that also needs to be,,,
updated so we can click on that without,,,
having to go to the drop- down menu okay,,,
so let's go in here let's go ahead and,,,
go into update user and let's take a,,,
look here so we have a form here we have,,,
a container we have a link to the,,,
profile the profile picture here oh so,,,
that's the back button so let's just go,,,
ahead and let's just redirect the user,,,
back to the homepage for now we're just,,,
going to stick to that so if you want to,,,
change that up I would uh recommend just,,,
going through and updating all of these,,,
so we have our form this needs to be,,,
sent to the same URL so we're going to,,,
leave action blank the method needs to,,,
be a post method we need a csrf token so,,,
we'll just do,,,
csrf,,,
token now for these form values here,,,
let's go ahead and remove all of these,,,
and we'll just leave one so we're going,,,
to use a model form for this so we'll,,,
take all these and we're going to leave,,,
form actions so we're going to leave our,,,
template with one form that looks good,,,
and let's see so we're going to have a,,,
file upload field once we're dealing,,,
with that profile picture so that'll be,,,
taken care of in a little bit here so,,,
now let's go ahead and create a model,,,
form for our users so we'll go into,,,
forms and what I need to do is actually,,,
import my user model so we'll go to,,,
models and let's just take this import,,,
and we'll go back into,,,
forms.py so we're going to import the,,,
user and we're going to create a model,,,
for based around this user so we'll just,,,
do user form pass in model form then we,,,
can throw in class meta specify the,,,
model and that's going to be uh for,,,
Fields instead of specifying all of them,,,
because a user model has a lot of FS,,,
there's passwords is super user all this,,,
information uh we don't want to give,,,
them everything so we'll just specify,,,
the usern name so that's what's going to,,,
be output and then an,,,
email and later on we'll do like a bio,,,
in a profile picture but for now uh,,,
that's going to be it so we'll just,,,
output the username and email and the,,,
user can update that so inside of the,,,
view we need to import this so we'll,,,
just do user,,,
form let's bring this down here let's,,,
render this form so we'll just do form,,,
that's equal to user form and let's see,,,
so the instance well this is going to be,,,
the,,,
request. user so we want to make sure to,,,
get the initial user value actually,,,
let's let just set the user value like,,,
this so we're not using request. user,,,
every time so we'll set the instance as,,,
the user and then we want to send that,,,
into the context dictionary in this case,,,
I won't create a full context dictionary,,,
I'll just pass it in directly like that,,,
and that is going to be hidden there so,,,
I want to make sure you can see that so,,,
we pass in the form and we can access,,,
that as form so we'll go into the,,,
template and let's create that for Loop,,,
here so in update user we'll create a,,,
for Loop and we'll just output every,,,
single form field this will help us keep,,,
some styling so we can just do four,,,
field in form add in that end4,,,
Loop,,,
end4 and let's see we'll just change,,,
this,,,
to field. label and then we'll change,,,
this to the actual field so the model,,,
form once we add in the upload field,,,
well that will manually output it itself,,,
so we'll just do field so the model form,,,
will take care of that for us so if I,,,
refresh this let's go ahead and oh I,,,
need to did I pass that in for field in,,,
form it says user update we have our,,,
form passed in let's save everything oh,,,
I didn't specify wow I completely,,,
butchered this one so we'll just do,,,
Fields hopefully you noticed that and we,,,
need to specify the model so let's just,,,
do model and that's going to be the user,,,
Okay so that was the issue so if I,,,
refresh,,,
this let's see what's going on right,,,
now so Fields is prohibited with the,,,
exclude,,,
value so let's try this let's just I,,,
can't tell if it's this form or the old,,,
form that's having the issue which I,,,
don't fully understand so it's in user,,,
form we have the user,,,
model let's try to restart the,,,
server so let's scroll up here make sure,,,
we can all see the issue start the,,,
server and let's see if I still get the,,,
issue okay so maybe I spelled something,,,
wrong there so,,,
uh,,,
use update user okay,,,
user,,,
wow that was a dumb mistake okay so this,,,
is why we don't specify all the fields,,,
here so it outputs everything my hash,,,
password last logged in all this,,,
information so let's try this one more,,,
time I think the issue occurred because,,,
I was uh messing with the wrong form,,,
here so let's try this again so we'll,,,
just do username and email and this,,,
should work okay there we go now we have,,,
a form with my username and my email so,,,
all I want to do is just be able to,,,
process this now so we'll go into the,,,
view and this is going to be a standard,,,
model form so we'll just do if or a,,,
standard a post request so if. request,,,
or if request. method if this is equal,,,
to post you already know what we're,,,
going to do we're just going to go ahead,,,
and set the form that's going to be the,,,
user form passin,,,
request. poost set the instance to the,,,
user,,,
then we want to check if that's valid so,,,
if form. isore valid let's go ahead and,,,
process this so we'll just do form Dove,,,
and then we want to redirect our user in,,,
this case we're going to send the user,,,
back to their profile so let's just do,,,
user-,,,
profile and we're going to pass in the,,,
argument of primary key and that's going,,,
to be the user. ID so user. ID like that,,,
okay so let's try this so let's say I,,,
want to change my username so I'm just,,,
going to change it to Dennis Ivy and,,,
we'll just change the email to Dennis,,,
Ivy at gmail so if I submit,,,
that okay so it updated it apparently it,,,
didn't redirect me so return redirect,,,
wow I don't know why I'm starting to,,,
make all these mistakes so let's try,,,
Dennis,,,
iv1 submit that and there we go so I'm,,,
back at my profile I can edit that let's,,,
go back to Dennis Ivy submit that and,,,
there we go so we can now now edit a,,,
user profile so at this point I just,,,
want to do some cleanup work here so uh,,,
we want to make sure that our website is,,,
completely mobile responsive we also,,,
want to make sure that our delete,,,
template is uh filled out here so we're,,,
still not using that main template and,,,
also the login form here so when I go to,,,
login this template needs to be finished,,,
up here so we want to use the themes,,,
template now there's a few things I,,,
noticed here so we'll just keep doing,,,
cleanup as we go and I want to try to,,,
finish up most of this before before we,,,
move on to the D Jango rest framework,,,
and building out our API and that custom,,,
user model so the first thing I noticed,,,
is that when I submit this form it,,,
doesn't actually submit anything and I,,,
think that's because in the template,,,
here in the room. HTML file I forgot to,,,
update that form so there's a chance,,,
that I'm going to miss a few of these,,,
here so we'll just keep going back and,,,
fixing those so in that room message,,,
form we see this form tag the first,,,
thing is I want to make sure action is,,,
bling here so we're sending that to the,,,
same URL,,,
and we want to add in the post method so,,,
we want to make sure that's a post,,,
method anytime we are sending a post,,,
method we want to add in a csrf token so,,,
csrf token and we need to pass in the,,,
name here so this is going to be the,,,
body of the actual form so let's give,,,
that a test here so if I refresh that,,,
looks like it added in a search,,,
parameter we'll go ahead and refresh,,,
that and we'll just say looks,,,
cool and there we go okay so that's,,,
working now it just added us to the,,,
participants everything looks good and,,,
let's go ahead and add in the delete,,,
templates so when I go to delete an item,,,
remember that you need to be logged in,,,
as a specific user so I can't delete,,,
anyone so make sure you find one that,,,
you can actually delete here and let's,,,
add in this template here so we'll go,,,
ahead and open up our theme again so,,,
we'll add that to the left side and then,,,
we're going to open up our project here,,,
on the right,,,
side so down in the templ folder we'll,,,
go to delete and we're just going to do,,,
delete uncore old so we're just going to,,,
replace the content here then we're,,,
going to grab delete from here and bring,,,
that in here so if I go to the delete,,,
page actually before I do that let's go,,,
ahead and actually uh extend the main,,,
template so we'll go to delete. HTML,,,
take this doc type right here so this,,,
tag all the way down,,,
to the main tag delete all of that go,,,
ahead and extend the main,,,
template so I just want to make sure to,,,
see that before we actually check out,,,
the page and we need to create the block,,,
tags,,,
here so we just have two more templates,,,
I think to replace right now and then,,,
we're going to add in a couple more,,,
pages here for mobile responsiveness so,,,
this is going to be block content and,,,
then down here we can get rid of body,,,
and HTML and also script and we'll just,,,
do end block content so end block,,,
content,,,
okay so now if I go to this template it,,,
looks a little bit better so we just,,,
need to complete this form so we'll just,,,
update this information make sure that,,,
it's actually a real page here so we'll,,,
need to open up the old delete HTML file,,,
we'll just bring that in like this and,,,
we just need to make sure that it's a,,,
post method so we'll take that right,,,
here let's go to the form so we see the,,,
main tags a couple of Dives here and we,,,
see the form right here so let's just go,,,
ahead and replace action right there,,,
with the method,,,
and the action with the empty value so,,,
we're just pasting stuff in here take,,,
that csrf token bring that in right here,,,
and for the back button instead of doing,,,
things this way we're just going to take,,,
this section right here and we're going,,,
to add that to this back arrow so that's,,,
just going to send the user back to the,,,
previous page so that's going to be on,,,
the top here that's this link right here,,,
so we'll replace that and let's see so,,,
we just have a confirm button so that's,,,
going to be it at this point so we have,,,
our token are you sure you want to,,,
delete and then we need to change this,,,
value right here with a dynamic object,,,
so we'll take that throw that in right,,,
here so that needs to be replacing the,,,
100 days of code so that's going to be,,,
our Dynamic value and let's give that a,,,
test here so we'll go back here let's,,,
delete a comment we'll just delete let's,,,
or looks cool here so we'll just confirm,,,
that and now that's gone so now my,,,
comment is gone and that's working so,,,
the delete template looks good so now we,,,
just want to update the login and,,,
register page okay so in here let's go,,,
ahead and let's see how do I want to do,,,
this what I think I'm going to do here,,,
is just paste in the template well I,,,
guess we'll do the same thing we'll just,,,
start replacing bit by bit here so we'll,,,
just take login we'll bring that in and,,,
we have a,,,
[Music],,,
loginorregister so that's our template,,,
name our original one let's see if I go,,,
back into the text editor here we see,,,
loginorregister HTML we'll change this,,,
toore old and then we'll change login to,,,
loginorregister so we're going to change,,,
this,,,
information so this is the new template,,,
loginorregister,,,
and let's just go ahead and get those,,,
blog tags so I'm just going to take this,,,
from the delete template right here we,,,
we'll go back to login register and,,,
let's just remove all of this again so,,,
we'll just take this tag right here all,,,
the way down to main remove that then,,,
paste that in here extend it take the,,,
block tag here remove body and HTML and,,,
we'll just do end block okay so let's,,,
take a look at this template here so end,,,
block is not working let's see what we,,,
have here end block,,,
content and let's refresh that okay so,,,
here is our new login page so we want to,,,
make sure that this works and then we're,,,
going to add in that condition to also,,,
render the register page so back in the,,,
new template here so this is the new,,,
layout Let's see we have a main layout,,,
here then we have a,,,
container we have the layout box for the,,,
login page let's just do this here so,,,
let's take this container and we're,,,
going to write our condition around here,,,
so we'll just take this condition and,,,
we'll just say if page page is login,,,
then we'll render out the login form so,,,
if page is equal to,,,
login then we'll wrap the end if just,,,
before the main,,,
tag so we'll just do end if and then the,,,
else statement for the register form so,,,
we'll just do else and that's going to,,,
be the register form so I'm going to,,,
take this div right here so all of this,,,
content so the entire container let me,,,
just minimize that so you can see it,,,
let's take this entire container and put,,,
that also into the else statement so now,,,
we're going to modify this so let's open,,,
up the old login register page so we'll,,,
move this right here let's make sure we,,,
can see both of these and let's check,,,
this out here so the login form we'll,,,
scroll up here let's see we see the,,,
login,,,
page we see the form so we want to make,,,
sure the method is post so let's take,,,
action out right there leave it blank,,,
set the method to post take this csrf,,,
token from from the original page let's,,,
put that into the,,,
form so we have a username the name is,,,
username this is a text field so that,,,
looks good then we have a password as,,,
long as the name is password that should,,,
be good for the login page so for this,,,
sign up link we're just going to send a,,,
user to,,,
register so let's just,,,
do URL and then register and I made one,,,
mistake here I accidentally just updated,,,
the register page so this is in the L,,,
statement so let's just go ahead and,,,
take this container if you happen to do,,,
this too and paste it in right here so,,,
we'll update that register one uh with,,,
the register form so now if login we,,,
just updated this form with a csrf token,,,
the action the method and the input,,,
Fields look good so this should now,,,
actually make our form work here so,,,
let's go ahead and try this so I'm going,,,
to refresh that and then we'll just log,,,
in as Dennis Ivy that's a user if I log,,,
in that's all working so we didn't have,,,
that much to update there and if I log,,,
out here let's go back to login if I,,,
click on sign up well it's going to be,,,
the same page here so this is what we,,,
need to change for the register page now,,,
so inside of the L statement let's,,,
minimize this container right here and,,,
let's open up the container after the L,,,
statement and let's go ahead and change,,,
this to register then we already updated,,,
the form so that looks good then we just,,,
need to update this section right here,,,
so we'll just say,,,
already already signed up then we want,,,
to prompt the user to log in and let's,,,
go back to our original register form so,,,
I'll just bring that in here so we can,,,
see everything and let's check this out,,,
here so we just have form ASP here so,,,
what we're going to do here is just go,,,
ahead and do that Loop through the form,,,
fields and we're just going to Output,,,
every single field and that should be it,,,
for the form field here or the register,,,
form so let's take the password here,,,
let's get rid of that so we're going to,,,
take this form group here for the,,,
password we only need one because we are,,,
going to create a loop then we have our,,,
submit button so that looks good we're,,,
just going to go ahead and loop through,,,
this field right here so we're going to,,,
say four or this form we'll say four,,,
field in,,,
form close out that Loop right here,,,
we'll just do end,,,
four so end four and let's just output,,,
the field values so we'll just do field.,,,
l,,,
and then for the field value well we,,,
don't need to use this input field we're,,,
just going to do field so this will be,,,
our register form and make sure again,,,
it's in the else statement because I,,,
already made that mistake so um let's do,,,
register here instead of login and that,,,
should be it here so all the links are,,,
good it says sign up let's try to,,,
refresh it so if I go to sign up it's,,,
going to take me to the login form if I,,,
go to register now it says register and,,,
let's just register a new user let's,,,
just say Tom here we'll add in some kind,,,
of,,,
password make sure that it's actually,,,
working so nothing on the back end needs,,,
to,,,
change an error occurred during,,,
registration let's try that one more,,,
time so let's just say uh Todd I don't,,,
think I have Todd maybe I already had,,,
Tom and let's see here okay so if I hit,,,
enter now I'm officially registered I'm,,,
logged in as Todd the register form does,,,
work and I have some landscapers outside,,,
so if they get too loud I'll try to,,,
pause this there they go so I'm going to,,,
pause it and,,,
wait okay the landscaper is done for a,,,
minute that's the thing about,,,
landscapers they always know when you,,,
need peace and quiet or when you're,,,
filming something like this and then,,,
they just kind of jump out and get you a,,,
they'll hide all week and then they come,,,
out and also if you ever find yourself,,,
facing a landscaper they can also smell,,,
fear so never show Fear they'll get you,,,
so that's my personal Vendetta against,,,
landscapers okay so where the heck were,,,
we all right so we finished the login,,,
and register page and what I want to do,,,
now is do some more cleanup here and I,,,
also want to make sure that this is,,,
fully mobile responsive so there's a few,,,
things that you should know about so,,,
when we go to the mobile version of the,,,
site here and right now based on my,,,
browser and my zoom it looks a little,,,
bit weird but you should see something,,,
like this here so let me just expand,,,
this really quick so when we go to the,,,
mobile version the search bar in the,,,
header goes away so this search bar then,,,
appears so these are two different,,,
search bars so I want to configure this,,,
search bar and then these two links,,,
right here so as we expand it we see,,,
this search bar go away then the one in,,,
the header appears and those two buttons,,,
disappear now we also have browse topics,,,
and recent activities and the reason why,,,
this is here is because we have these,,,
two sidebars here so browse topics and,,,
recent activities and as we go to the,,,
mobile version they disappear now,,,
there's different ways of doing this we,,,
could make this like a toggle uh drop,,,
down option or something that just,,,
appears like a modal and this case I'm,,,
just going to make these different pages,,,
here so you'll be able to click on this,,,
and you're going to see all the topics,,,
in their own page and so will the recent,,,
activities so these are going to be,,,
their own pages so let's go ahead and,,,
build these in also when we click on,,,
more topics what I'm going to do is,,,
limit these so we'll limit this to like,,,
five topics and then when you click on,,,
this it'll take you to that page even on,,,
the desktop version and you can see more,,,
topics so let's go ahead and build in,,,
this search bar so this is already built,,,
in but want to configure it so it,,,
actually works like at this point if I,,,
click that it doesn't do anything if I,,,
try to search for Java script and start,,,
trying to type that in it won't do,,,
anything so in the homepage in,,,
index.html let me just bring in,,,
the text editor here I don't know why,,,
the heck that went away okay so we're,,,
going back to the templates folder and,,,
in index or home.html we're going to see,,,
a search bar somewhere here so we see,,,
the topics compon component we see the,,,
room list right here and we see a mobile,,,
menu this mobile menu contains a form,,,
that opens and closes right here and,,,
then we see those two buttons right here,,,
so browse topics and recent activities I,,,
just wanted to move that out of the way,,,
so you can see that so let's start with,,,
this form so the first thing is is we,,,
want to send this form back to the,,,
homepage so we'll add in a URL and we're,,,
going to say home now the method by,,,
default is already get but I'll just add,,,
that in right here and we just need to,,,
add in q to the name so that's what's,,,
going to add in that get parameter and,,,
it's going to send it back to the,,,
homepage and that should make it work so,,,
if I refresh this and type in Java now,,,
the search bar works we see calling all,,,
Java developers so the search bar is now,,,
responding to this here if I go to C now,,,
we only see C okay so let's start with,,,
browse topics what we're going to do,,,
here is add in a template this is going,,,
to be a completely brand new template,,,
we'll make a view and URL for it and,,,
we're going to link up to that and then,,,
we'll add in some Dynamic content okay,,,
so let's clear this and let's go back,,,
into our two folders so here we have our,,,
theme right here and here is our D Jango,,,
project so we're in the templates folder,,,
in the base app let's go ahead and grab,,,
the topics. HTML page bring that in and,,,
before we actually start working with it,,,
let's go ahead and uh take this block,,,
and the extension of the main. HTML file,,,
and let's just open up the topics. HTML,,,
page so this is the page that we just,,,
brought in and we're just going to go,,,
ahead and start at the doc type again,,,
take everything down to the main tag so,,,
remove everything here paste in the,,,
extension the block content tag go down,,,
to the bottom here and get rid of,,,
everything to scripts and then add in,,,
and block okay so we have our topics,,,
page here and we need to add in a new,,,
view for this so in the views.py file,,,
let's go down to the bottom here and,,,
let's create a view for our topics,,,
page and we'll pass in the request,,,
object we don't need this login required,,,
decorator right here so this is going to,,,
be available on the homepage so no need,,,
to hide this right here and let's go,,,
ahead and do,,,
return render and we're going into,,,
request we're passing in request and,,,
we're going to base topics.,,,
HTML okay so we also just want to pass,,,
in the dictionary right there for the,,,
context data so we'll just pass it in,,,
directly like that and now we need a URL,,,
here so let's just take update user copy,,,
and paste this and we're just going to,,,
change this to,,,
topics so we'll just do topics and then,,,
we'll just call this topics page so the,,,
view that we just created and we'll just,,,
take topics and paste that in right,,,
there okay so we have our URL we have a,,,
view that renders that page and now in,,,
the homepage we need to go to this,,,
mobile menu so this mobile menu right,,,
here opens and and closes down here we,,,
need to update browse topics here so,,,
let's go ahead and update this so we'll,,,
just do URL and we're pointing that to,,,
topics and let's test this out so if I,,,
refresh this let's actually also update,,,
this more link right here so we'll,,,
update that right away and then we'll,,,
test out both so in the activity,,,
component or in the topics component so,,,
not the topics page but the topics,,,
component we see this link tag at the,,,
bottom of the page so we just want to,,,
update this too so I'm going to paste in,,,
or I guess type in the URL tag right,,,
here so we'll just do URL and topics so,,,
we updated two links and now we can test,,,
it so on the desktop version if I click,,,
on,,,
more topics does not exist so it looks,,,
like I messed up that view this is,,,
supposed to be HTML not for slash you,,,
probably noticed that okay so here we go,,,
so we see browse topics here so we need,,,
to update this page here and also in the,,,
mobile version here so as we go to the,,,
mobile version we see browse topics if I,,,
click on that there we go we can see the,,,
search bar and all the information in,,,
here so let's update the template now so,,,
we want to update that back link and,,,
then change this content and make sure,,,
this search bar actually works so we're,,,
going to have a search bar for the all,,,
the rooms and then one to search all the,,,
topics and again this will be updated by,,,
the time you see that so we'll go back,,,
here and let's go to to the topics,,,
page so topics. HTML the first thing is,,,
I want to make sure,,,
that this back link right here points to,,,
the homepage so we want to send the user,,,
back to the homepage we'll just do URL,,,
and we're sending them home so this is,,,
on the topics page then in browse topics,,,
let's just go ahead and get rid of all,,,
the topics except for one so we'll just,,,
take everything from python down to,,,
databases remove those actually let's,,,
leave python here so we're just going to,,,
get rid of these right here and what I'm,,,
going to do here is go ahead and just,,,
pass in topics so we'll do topics that's,,,
going to be topics,,,
doobs do,,,
filter so I need to change that to a,,,
capital T and we're going into topic.,,,
objects. filter so right now until I add,,,
a filter it's going to work like the do,,,
all method so we're going to add a,,,
filter for a specific reason so then we,,,
want to get these topics and we want to,,,
pass them into the context dictionary so,,,
we pass the topics in then we're going,,,
to create that for Loop and we're going,,,
to render this out in topics so the,,,
first thing is for the all method right,,,
here we're just going to go ahead and uh,,,
let's see we're just going to send the,,,
user back to the topics page here so,,,
we'll just do,,,
URL and then we'll just do topics so,,,
that's going to be it and then we just,,,
want to Output all the topics here so,,,
we'll just do topics,,,
dot let's see so we're doing topics.,,,
roomet,,,
set.all do count I think that's how we,,,
did it in the original one so if I,,,
refresh that let's,,,
see so we should have seven rooms so for,,,
some reason that is not updating so all,,,
let's go back to the topics component I,,,
want to see how I did that I actually,,,
forgot at this point so we just did,,,
topics. Count okay it's already a query,,,
set so I can just do do count I don't,,,
know why I forgot that so that's a query,,,
set so I don't need to do room set it's,,,
a query set so I can just do do count,,,
now for this one right here we're just,,,
going to Loop through all the topics,,,
just like we did in the topics component,,,
we're just going to do for Topic in,,,
topics and we're going to add in and end,,,
four so let's close that off,,,
here end four and let's just grab the,,,
topic itself so we're just going to,,,
do topic,,,
and let's go ahead and pass in the URL,,,
so that's supposed to be a variable so,,,
we're doing topic name got distracted,,,
there so topic,,,
name topic. name and then let's see in,,,
the topics component for the actual,,,
account that's where we did topic. roor,,,
set. Count okay so let's throw that in,,,
right here paste that in for the account,,,
and then the actual URL here all we're,,,
going to do is go ahead and send the,,,
user to the homepage so they're going to,,,
go to the homepage and then we're,,,
passing in the topic into the get,,,
parameter so we're just doing,,,
URL home and then after the curly brace,,,
we're going ahead we're going to go,,,
ahead and pass in the question mark Q,,,
equals and then topic. name topic. name,,,
like that okay so let's try this out if,,,
I go to the topics page we see all the,,,
topics let me just zoom out this is all,,,
messed up because of my zoom so don't,,,
worry about this overlay if I go to,,,
Jango it sends me back back to the,,,
homepage so we don't have any Jango,,,
topics let's try web development so,,,
we'll go back web development and that,,,
search is working now what if we have a,,,
ton of topics now this could happen,,,
where we can have I don't know 100 200,,,
topics here we want to be able to,,,
actually search these topics so you,,,
probably don't have to fix this because,,,
I'll update the template if I forget,,,
we'll just go ahead and go into this,,,
section right here in the search bar and,,,
just type in search topics so I'll try,,,
to make sure that that's fix before this,,,
video comes out now in this search bar,,,
we're also going to pass in the name and,,,
the name is going to be Q so we'll throw,,,
in Q and we're going to send this to the,,,
same page so for the action we're just,,,
going to leave that blank the method is,,,
going to be a get request so this,,,
information is going to be sent back to,,,
this view here so what I'm going to do,,,
here is scroll up to the top here to the,,,
homepage so we're going to take this,,,
request right here and we're going to,,,
pass the this down to the topics view so,,,
we're getting that Q lookup method we're,,,
just making sure that we have something,,,
there and then let's just do name and,,,
we'll just do underscore uncore I,,,
contains and then we'll set that to Q so,,,
now if the user searches that Q method,,,
will be sent to the topics page because,,,
we're sending that to the same URL and,,,
then we should be able to filter down,,,
topics so let's try this so if I refresh,,,
this and let's try to search for Java,,,
search that now I can search topics then,,,
I can click on JavaScript that takes me,,,
back to the homepage and that's it for,,,
the topics page so let's quickly just,,,
limit these so let's just do the first,,,
five so we have 1 two 3 four five and,,,
then C++ and C SHP will be hidden so you,,,
could try to find a way to organize,,,
those by values there's different ways,,,
of doing that we won't get into that,,,
here but let's just go to the homepage,,,
and landscaper is prowling right now I,,,
can hear them so I don't know if you can,,,
catch that in the video but let's hope,,,
not so four topics in the home view here,,,
as we render these out let's just get,,,
the index from 0o to five so that's how,,,
we can limit that and that'll only give,,,
us the first five topics in this query,,,
set so if I save this if we go to the,,,
homepage there we go so that's limited,,,
if I want to see more I can click on,,,
more and now I can see all the topics,,,
and I can also search the topics so,,,
that's it for this section what I want,,,
to do is also Al work on the activities,,,
component so when we're on the phone,,,
here when it's mobile responsive we want,,,
to be able to click on recent activities,,,
also so we have the topics and now we,,,
want to click here so this will also be,,,
its own page here so let's go back to,,,
the theme so we'll open up the theme on,,,
the left side our project on the right,,,
side and let's just take activity. HTML,,,
and we'll drag that in here so now we,,,
have an activity component and an,,,
activity template so we need to make a,,,
page here so let's go ahead and start,,,
building this out we'll just minimize,,,
this right now we'll go back to the,,,
homepage let's just take these block,,,
tags here again and we'll go back to or,,,
we'll go to the activity page so,,,
activity. HTML take this doc type right,,,
here so let's grab all these tags all,,,
the way down to main let's just paste in,,,
the block tags take the closing one and,,,
let's update this so end block we now,,,
have the activity page we want to create,,,
a view for this so we'll close out,,,
topics and let's go to our views,,,
file so we'll go to views and just,,,
underneath the topics view let's just,,,
create a new view for,,,
activities okay so we'll just do,,,
activities page or activity page so,,,
that's going to store all the,,,
information so or all the activities,,,
that we or all the activity on this,,,
website I guess and then we're just,,,
going to do,,,
return render passin request and then,,,
we'll just go to base for/,,,
activity. HTML and we're just going to,,,
pass in some data here so for the,,,
activity that needs to be a comma uh for,,,
the activities we want to query some,,,
data so we'll just do room unor messages,,,
so that's what's going to be in the,,,
activity feed and we're just going to do,,,
room messages because of those flash,,,
messages so we don't want to call them,,,
messages in the template and we're just,,,
going to do message doobs doall so we're,,,
getting all the messages passing those,,,
into the template then we're going to,,,
URLs let's go ahead and copy and paste,,,
topics here so let me just make sure my,,,
phe isn't covering anything so we're,,,
going to topics,,,
here paste that in here and we're going,,,
to change this to activity so it looks,,,
like my mouse is actually showing W,,,
sometimes just restarting your computer,,,
works sometimes it doesn't I have no,,,
idea why that's working and that,,,
probably annoys me more than it not,,,
working when you fix something and it,,,
works but you don't know why you fixed,,,
it okay so we have the activity URL we,,,
have the activity view that renders the,,,
activity page now in home inside of this,,,
mobile menu let's go ahead and add in,,,
this URL so we're going to take this,,,
topics URL paste this into recent,,,
activities and we'll just do activi,,,
so,,,
activity all right let's see let's,,,
refresh that go to recent activities and,,,
now we have the activities page here so,,,
we can go to its own page and we just,,,
need to update this we want to update,,,
the back link here so we want to change,,,
that and then render out real activities,,,
so let's go ahead and go back to the,,,
activity page here and the first thing,,,
is is I want to set this link right here,,,
to go back to the homepage so we'll just,,,
add that that set the URL and that's,,,
going to go to the homepage now for the,,,
actual activities we see this activities,,,
page layout here so this div right here,,,
is what contains all the contents inside,,,
of the page right here so we just want,,,
to update these now we already have,,,
these activity components inside of the,,,
homepage so what I'm going to do here is,,,
just take the for Loop here and I'm just,,,
going to bring that into the activity,,,
page here so let me just zoom back in,,,
because that's the only way I can get to,,,
this page we go back to this size of a,,,
screen and let's go ahead and open this,,,
up here we'll take this activities box,,,
so it looks like that's the name of the,,,
wrapper so we have an opening and,,,
closing div right here and one right,,,
here so let's get rid of both of these,,,
and let's open up the activity component,,,
so in the activity component we have,,,
this for Loop and it's the exact same,,,
thing that we're going to have in this,,,
page so let's scroll all the way down to,,,
the closing for Loop and let's just copy,,,
that and let's paste that in here so,,,
into the activities page so now if I go,,,
ahead and refresh that we're not going,,,
to see those right now because I haven't,,,
passed those in yet so back in the view,,,
here we need to take these room messages,,,
and we're going to throw those into the,,,
dictionary right here into the context,,,
dictionary and we're just going to pass,,,
those in so now we have all the messages,,,
here for the activities if I refresh,,,
that there we go now we see everything,,,
so it looks a little bit weird because,,,
it's only supposed to be mobile uh,,,
responsive and also because of my,,,
ridiculously zoomed in screen,,,
so now if I go here I can see all the,,,
activities and that's supposed to list,,,
everything out for the homepage if,,,
anything if this is messed up I'll make,,,
sure to fix this with my designer but,,,
now a user can see activities from the,,,
homepage okay so topics we can always go,,,
back activities we can always go back,,,
and there we go so that's it for this,,,
section what we're about to do now is,,,
move on to building out our API so we're,,,
going to build out our API and we're,,,
going to work on a custom user model so,,,
before we get into this next section I,,,
want to talk about apis a little bit,,,
here now if you don't know what an API,,,
is or what they're used for I don't want,,,
to get into too much detail here because,,,
that's something that's a whole topic on,,,
its own I just want to show you how to,,,
make one with jeno now with d Jango we,,,
could build out our own API and uh work,,,
with all this Json data but that can be,,,
a lot of work and what we have here is,,,
this package called Json uh D Jango rest,,,
framework built on top of Jango so it's,,,
a package specifically for D jeno and it,,,
makes for building out apis very easy,,,
now just to do a quick summary of apis,,,
uh we can use an API to maybe share data,,,
with other applications so in a sense we,,,
can take all this data that we have and,,,
we can provide a series of URLs or,,,
endpoints that we would call and,,,
instructions on how to work with this,,,
data now this data would be retrieved,,,
usually in Json format so uh if you,,,
wanted to work with some kind of uh,,,
front-end framework or maybe you're,,,
building out a mobile application I,,,
actually have a video on YouTube where,,,
um I use jeno and then flutter to build,,,
out a mobile to-do list it's on my,,,
channel it's on a live stream that I put,,,
together so this right here needs some,,,
kind of API data to work with we need,,,
some kind of Json data if you want to,,,
work with react native flutter uh maybe,,,
you want to work with uh reactjs or,,,
angular or view these are all front-end,,,
Frameworks that need apis we could use,,,
it for that um we can also use it maybe,,,
to share data for example Facebook has,,,
their own API uh so does YouTube and,,,
Twitter so if you want to get some data,,,
from Twitter but you don't want to,,,
actually go to their website they have,,,
certain apis that you can go to read the,,,
documentation and call their data and,,,
actually View and modify data in the,,,
back end within their database using the,,,
API to interact with so it's a means of,,,
communication and a format of how we,,,
provide data so my rough explanation of,,,
apis let's just go ahead and start,,,
building this out so so we're going to,,,
start by setting up a simple API and,,,
then we're going to install the D Jango,,,
rest framework and we're going to get to,,,
this so remember mobile applications,,,
front-end Frameworks or just sharing,,,
data these are all examples of when you,,,
might want to use an API if you don't,,,
know why you need one uh just don't,,,
worry about it for now and stick to,,,
whatever you're building until you,,,
either get requested by your boss to,,,
build one or you need to build one for,,,
yourself for some reason and then you,,,
can look into it so if this section is,,,
not important just go ahead and jump to,,,
the custom user model modification so,,,
let's go ahead and create our API now,,,
there's different ways of doing this we,,,
could create a new app inside of our,,,
Jango project what I'm going to do here,,,
is I'm just going to create a new folder,,,
on its own so we're not going to run the,,,
star app command I'm just going to go,,,
into my base app because it's the only,,,
app that we have in our application and,,,
I'm going to create my API inside of,,,
this app so we're going to create a,,,
folder called API and in order to make,,,
this work we first need an underscore,,,
init Dore dop py file so go ahead and do,,,
that double uncore,,,
init.py now we are going to need a,,,
urls.py file for our API our API will,,,
have its own URL routing system so we're,,,
going to have URLs specifically for this,,,
API and we also need our own views so,,,
we're going to create a views.py file,,,
and then we're going to need something,,,
called,,,
serializers so serializers it's a word,,,
that I always have a hard time spelling,,,
so serializers I'll explain what those,,,
are in a second so let's go ahead and,,,
actually start working with this API so,,,
let's say we want to view in our API and,,,
let's say we would just want to respond,,,
with some Json data when someone goes to,,,
our URL so we could just go ahead and,,,
import from Jango,,,
HTTP and we're just going to import Json,,,
response so if you don't know what Json,,,
data is it's just a format of data it,,,
stands for JavaScript object notation uh,,,
ID recommend looking into this but it's,,,
a format of how we can provide data here,,,
so we're going to create a function,,,
based view with a Jango rest framework,,,
we can also use class based views here,,,
we're just going to create a function,,,
based views or function based View and,,,
we're going to create our first View and,,,
this is going to be called get routes so,,,
this is going to be a view that shows us,,,
all the routes in our API so request and,,,
then let's just return this data so,,,
we'll just do return and then Json,,,
response okay so these URLs or these,,,
routes are simply going to be two get,,,
methods here so we're going to pass in,,,
the method so it's going to be a get,,,
request we can also send put post delete,,,
methods to our API and this route is,,,
going to be API slash and we're just,,,
getting rooms so let's say that we want,,,
to create an API for people to see all,,,
the rooms in our application so imagine,,,
that our website gets huge it has,,,
millions of views and now people want to,,,
access our API and build out their own,,,
applications and maybe they just want to,,,
create like a website that just displays,,,
rooms on the most popular website in the,,,
world which is uh study buddy so they,,,
just want to list out all the rooms,,,
inside of study buddy so they make this,,,
request to us and we say sure we'll make,,,
an API for you so here are the two,,,
routes that you can access this will be,,,
like our documentation so go to API for/,,,
rooms that's going to give you a Json,,,
array of objects of all the rooms in our,,,
database and we can control what kind of,,,
data gets shown then if you want to get,,,
a specific room let's say you want to,,,
create like a page for your project or,,,
your website go to rooms and then just,,,
go ahead and add in the ID of the room,,,
that you want and that will get you a,,,
single object and information about a,,,
single room so we have a very simple API,,,
and this is what we're allowing users to,,,
see now for this Json response we're,,,
just going to take this python array or,,,
python list of strings at this point and,,,
we're just going to throw this into the,,,
Json response now for this we also need,,,
to add in a parameter and we're going to,,,
set save to false and,,,
basically safe means that we can use,,,
more than just python dictionaries,,,
inside of this response so safe is going,,,
to allow this list to be turned into a,,,
Json list so this Json response is going,,,
to convert this data into Json data so,,,
we now need a URL so we want to be able,,,
to hit this endpoint so we're going to,,,
go we're going into our URLs file we're,,,
going to import from Jang go. URLs,,,
import path so we need a path here we,,,
also need our views so remember that,,,
we're in the base app inside of API now,,,
and we're going,,,
into views here so we're going into that,,,
directory and we're importing all the,,,
views now we also need a URLs or URL,,,
patterns list here so URL patterns and I,,,
just want to make sure that it's URL,,,
patterns not URLs okay so that's correct,,,
so we'll close this one out so we're,,,
creating our URL patterns and we're,,,
going to set a path here so this path,,,
right here is going to be an empty,,,
string this is going to be for our,,,
so we're going to tell the user if you,,,
go to for/ API in fact let's just add,,,
this into our views so let me close out,,,
all these other Pages here or files and,,,
let's just say if you go to get well,,,
you're going to get this homepage and,,,
they obviously know that because they're,,,
currently on that page if they're,,,
viewing this so we're going to that,,,
homepage that's going to be SL API and,,,
we're going into,,,
views. getet routs and we're not going,,,
to specify a name now we need to connect,,,
this URL patterns file or this url's fi,,,
file to the main project here so D Jango,,,
technically doesn't know about this,,,
right here so we're going we're going,,,
into study Bud right here and we're,,,
going into urls.py this is now in the,,,
root directory so we have three URLs,,,
files here and we're going to create a,,,
new path here and this one's going to be,,,
prefixed with API slash and then we're,,,
going to send the,,,
user to base.,,,
API and then we're going into URLs dang,,,
it I keep hitting for/ so URLs so we're,,,
going into base API and we're pointing,,,
them to URLs so any URL that starts with,,,
an API or with API after the home URL,,,
send them to this file and let this file,,,
take care of everything so this urls.py,,,
file will now handle that so let me make,,,
sure my server is on the URLs are,,,
connected we have a Json resp response,,,
and we should see this information so,,,
we'll go into our project here P 8000,,,
API and there we go so we have a Json,,,
response this is now Json data that,,,
anybody can make a request to and,,,
actually pull this data in so they can,,,
use uh python they can use JavaScript,,,
whatever they want in their side and,,,
they can call this URL if this was a,,,
live link so uh right now only I can,,,
call it because it's on Local Host but,,,
imagine if I had this on a domain,,,
anybody can go to this URL make this,,,
request and get this information okay so,,,
that's a simple Json response and a very,,,
minimalistic API and there's not much we,,,
can do with it now we can actually make,,,
our API work without the Jango rest,,,
framework but why do that when we have,,,
this awesome package so let's go ahead,,,
and install that and let's talk about,,,
what it can do here so let's just go,,,
ahead and Google up Jango rest,,,
framework and let's open up this link,,,
right here so we have the domain and in,,,
the documentation it shows us how we,,,
need to install it before we can use it,,,
so we're going to pip install Jango rest,,,
framework and then we need to add it to,,,
installed apps here so let's go ahead,,,
and do that we'll open our terminal up,,,
here let's open up a new one and I'm,,,
just going to make this a little bit,,,
bigger paste that in so pip install,,,
Jango res framework as one word and I,,,
actually need to do python DM first so,,,
if you have that issue go ahead and do,,,
that and now it's installed so I,,,
actually already had it installed here,,,
so I don't need to worry about that and,,,
now now I need to go ahead and take rest,,,
framework and add that to installed apps,,,
so that's all I need to do to in to,,,
actually just install it into my project,,,
so very little we need to run the PIP,,,
install and then in,,,
settings.py we need to go to installed,,,
apps so I'm going to create some space,,,
here and then we're going to paste in,,,
restore framework or write that out in a,,,
single quote and now we are good to go,,,
so at this point what I'm going to do,,,
here is start building out my actual,,,
URLs and make sure that they're based,,,
off of the Jango rest framework so let's,,,
go back to our views here and in our,,,
views the first thing I want to do is,,,
update this so we don't want to return,,,
back a simple Json response we want to,,,
use what the Jango rest framework gives,,,
us so in the D Jango rest framework if,,,
you want to look up the documentation,,,
I'm going to try to change up my zoom,,,
here so in the documentation we can see,,,
this API guide and these tutorials on,,,
how to work with our requests and,,,
responses here how to work with,,,
serialization and so on so I'd highly,,,
recommend you check this out here so at,,,
this point with class based views we use,,,
this mixing right here called API views,,,
with a function base view we add this,,,
decorator and that's going to add in,,,
extra functionality to our uh API here,,,
so we're first going to import response,,,
right here and API view so I'm going to,,,
copy these right here and we're going to,,,
go into our views and let's just remove,,,
this and paste this in so from restor,,,
framework. decorators import API so we,,,
now have access because we installed it,,,
and then we're going to do from rest,,,
framework. responses import response so,,,
the first thing is let's go ahead and,,,
add in a decorator so API View and in,,,
here we're going to pass in a list and,,,
these are going to be the get or the,,,
HTTP methods that are allowed to access,,,
this view so that means at this point,,,
this view can only take in a get request,,,
now if we want to allow a put request we,,,
can say put if we want to allow a post,,,
we would add it like that so these are,,,
the methods that we can specify here,,,
here so we just want to allow a get,,,
request users can only get data and now,,,
we also want to update response here or,,,
the Json response to response which we,,,
just imported now we don't need save,,,
here so I can get rid of,,,
that let's save this and let's take a,,,
look here so if I go back to my API if I,,,
refresh this we now get this user or,,,
this interface that shows more,,,
information about our API and this,,,
actually gives us more functionality,,,
than it looks right now or than how it,,,
looks uh for example we can actually,,,
make post and put request directly from,,,
this interface so it's like a UI for our,,,
API we can see the methods that are,,,
allowed we can see the content type and,,,
we can see this data formatted so it's,,,
not too much but it just gives us a,,,
better interface to work with now what I,,,
could do is just go to this section,,,
right here go to Json and that's going,,,
to allow or add in format right here and,,,
give us the standard Json format so you,,,
don't actually have to add this when,,,
you're calling the API just go to this,,,
route and you'll get back this data uh,,,
let's say if you were trying to use this,,,
in JavaScript you wouldn't get back,,,
anything else here you would just get,,,
back this list right here so that's not,,,
too much more that we added it just,,,
gives us an interface but we want to go,,,
ahead and actually render out some more,,,
information and we'll see why this is or,,,
why the D Jango rest framework is so,,,
cool so at this point we want to create,,,
another view here so let's create a view,,,
here and this is going to be called get,,,
rooms so we're creating this route right,,,
here that we're going to allow everyone,,,
around the world to access and we're,,,
going to pass in,,,
request and we're just going to do,,,
return and we're going to do response,,,
here so we're getting back a,,,
response so let's throw that in and,,,
we're going to pass in the rooms so,,,
let's go ahead and get the rooms here we,,,
want to import that so we're going into,,,
base so now we are one folder outside of,,,
it so we need to go back into Bas do,,,
models and we're just going to make a,,,
query for the rooms so we're getting the,,,
rooms and we're just going to go ahead,,,
and do rooms is equal to room doobs,,,
doall so all the rooms in the database,,,
now we do need to add in The Decorator,,,
so we wanted to use the Jango rest,,,
framework functionality so we'll just go,,,
ahead and do,,,
API uncore View and we're only going to,,,
allow a get request so we'll pass that,,,
in and there we go so at this point,,,
we're going to have an issue here and I,,,
want to show you what's going on so,,,
before we actually fix it I want to show,,,
you the issue so let's quickly get this,,,
view let's go to the URLs here,,,
so to our API views and we'll create the,,,
path and this is going to be API SL,,,
rooms and then close that off and then,,,
the view is going to,,,
be get,,,
rooms okay so we have our URL and we,,,
have our views that return back our,,,
rooms and let's try this so if I refresh,,,
this we're going to get an issue here,,,
and I'm not sure why it's not causing it,,,
let me just try to fix this so get rooms,,,
we'll save that we have our,,,
response our API View and for some,,,
reason the URL is not working so let's,,,
try this one more time I'll do control,,,
shift R oh I need to go to Rooms okay so,,,
we're going to rooms and here we go so,,,
object type of room is not a Json,,,
serializable so what's happening here is,,,
we're making a query set and this is a,,,
python list of objects here so it's a,,,
python list it's a query set and we need,,,
to make sure that we can serialize this,,,
data so that means that response cannot,,,
return back python objects now it was,,,
able to do it with this and we can even,,,
pass in dictionaries and that Json,,,
response method was able to serialize it,,,
and convert it but objects cannot be,,,
converted automatically so what we have,,,
here is a file for our serializer so our,,,
serializers are going to be classes that,,,
take a certain uh model that we want to,,,
serialize or object and it's going to,,,
turn it into Json data so it's going to,,,
basically take our python object turn it,,,
into a Json object or a JavaScript,,,
object I guess a Json object and then we,,,
can return that so the serializer is,,,
going to work a lot like the model form,,,
we're going to import a serializer we're,,,
going to create a class specify the,,,
model and the fields that we want to,,,
serialize and then that will be rendered,,,
out so let's go ahead and make a quick,,,
import so in our serializers.py file,,,
we're going to do from rest framework.,,,
serializers we're going to import a,,,
model serializer so it's a lot like the,,,
model form you're going to notice a lot,,,
of similarities here here so from base.,,,
Models import room just like we did with,,,
the model form I'm going to keep,,,
referencing that because you'll see the,,,
comparison and then we're going to,,,
create a class here and I like to call,,,
my serializer the object name and then,,,
we just do,,,
serializer like that okay so just like,,,
we had room form now we have room,,,
serializer this inherits from model,,,
serial serializer that's a word that,,,
always trips my tongue up so we're going,,,
to set the meta and then then we need to,,,
specify two fields at a minimum we're,,,
going to specify the model which will be,,,
the room and then we're going to specify,,,
the fields that are allowed and this can,,,
also be a list but at this point we're,,,
we're just going to say give us all the,,,
fields so take this model right here,,,
this room model and serialize it so,,,
return back all these fields and turn,,,
that into a Json object so now that we,,,
have our serializer we're going to take,,,
this serializer we're going back into,,,
our API views we're going to import it,,,
so it's in the same file path so we're,,,
doing from,,,
serializers import and then I'm going to,,,
paste that in our room serializer so now,,,
we just need to go ahead and add in a,,,
variable here we're going to call that,,,
serializer and we're just going to use,,,
the room,,,
serializer so room serializer then we,,,
need to pass in the object or objects,,,
that we want to serialize and then we,,,
need to pass in a parameter called many,,,
and this is going to be set to true so,,,
many means are there going to be,,,
multiple objects that we need to ser I,,,
or are we just serializing one in this,,,
case we are serializing a query set so,,,
many is going to be set to true so there,,,
are many objects so serializer is now an,,,
object here so what we want to do here,,,
is just go ahead and pass in serializer,,,
but we don't want to return back the,,,
object we want to return back the data,,,
attributes so I would recommend maybe,,,
just printing out serializer see all the,,,
values in it or look up the,,,
documentation but if we Access Data,,,
that's going to give us rooms in a,,,
serialized format so if I save that,,,
let's go ahead and refresh this and look,,,
at this so we have our get rooms value,,,
here we can see a array right now so,,,
that's now an array and all that data,,,
was now serialized so we see the first,,,
room right here we see one object then,,,
we see another object we can see the ID,,,
the title all the information about it,,,
so now we can officially return it so,,,
let's say in our application we don't,,,
want to just allow users to get the,,,
rooms we want to give them an endpoint,,,
to maybe open up a room in their website,,,
and view details about it or maybe we're,,,
building out that front end so what we,,,
can do here is go ahead and copy this,,,
view so get rooms paste that down here,,,
and we're going to change this up a,,,
little bit so we're going to change that,,,
to get room so a single room and then,,,
we're going to change rooms to room,,,
room. objects. getet the ID is going to,,,
be PK so we're going to pass in the,,,
primary,,,
key so PK like that,,,
and then the serializer is going to take,,,
the room and then mini is going to be,,,
false so this means that it's going to,,,
return back a single object as opposed,,,
to that entire array so we have a view,,,
now we just modify that a little bit in,,,
our URLs so if we look at this route,,,
right here it's going to be API rooms,,,
and then an ID so in the URLs we're just,,,
going to copy this paste this let's make,,,
sure to add in that trailing comma and,,,
I'll just add it twice here change this,,,
one to get room get room right there and,,,
then then we're going to pass in the,,,
dynamic value that's going to be a,,,
string value for now pass in the name,,,
and there we go so that's going to be,,,
the endpoint and let's try this out so,,,
if we go here we have a list right here,,,
we can see the two square brackets let's,,,
say we want a single room let's get room,,,
number one right here so with the ID of,,,
one so we'll throw one,,,
in and for some reason that was not,,,
configured let's check this out so rooms,,,
that needs to be plural sorry about,,,
that and just got into the habit of,,,
removing all the s's there so now if I,,,
refresh that here we go we get back a,,,
single room so we have information about,,,
the room we see the all part all the,,,
participants IDs and we can actually,,,
Nest serializers so we can have children,,,
in these and that's not something that,,,
we're going to get into I get into that,,,
in my full Jango course and I also talk,,,
about authentication with the Jango rest,,,
framework and we use Json web tokens,,,
there so that's it for our simp simp Le,,,
API now I want to show you how to use,,,
this maybe you see how we put this,,,
together but it doesn't fully make sense,,,
in what we're trying to do with this so,,,
let me just try to give you one example,,,
and for this if you want to skip this,,,
you can we're just going to use a little,,,
bit of JavaScript here and just make a,,,
call here and I want to show you one,,,
issue that can occur when someone else,,,
tries to call this API so let's give you,,,
an example so in our application here,,,
let's go ahead and create a new file,,,
here and we're going to call this front,,,
end or uh let's just call this cool,,,
website okay so somebody from the other,,,
side of the world let's just say they're,,,
completely across the world here they're,,,
creating a new website and all they have,,,
at this point is a simple HTML file so,,,
just to really show you separation let's,,,
open up study Bud here let's grab that,,,
file and let's bring that out here so,,,
once I'm done with this I'll actually,,,
bring it back here but for now we can,,,
see our website which will represent our,,,
API and then we see cool websites right,,,
here so if I go into to that website,,,
let's actually open up a new text editor,,,
so let's go ahead and do new file let's,,,
actually close this out we'll do new,,,
window open up a completely different,,,
text editor remember these two,,,
applications do not need to know about,,,
each other at all they're two separate,,,
applications so we're going to go to new,,,
file here or open file we'll go into my,,,
desktop and we're just going to grab our,,,
Cool website okay so let's add in some,,,
HTML so this person is starting to build,,,
out their awesome new website that's,,,
going to display all these rooms they're,,,
just going to go ahead and create that,,,
HTML tag and we'll just call this cool,,,
rooms okay so let's get rid of this link,,,
right here in that Javascript file,,,
they're going to start building out,,,
their title here and they'll just say,,,
cool rooms and they're going to create a,,,
div where all these rooms are going to,,,
be,,,
displayed so we'll just create an ID,,,
here and this is going to be rooms,,,
container okay so let's open up this,,,
website so I'm going to minimize all of,,,
this we'll open up the Cool website and,,,
here we go this is all we have so they,,,
have this part of the website done let's,,,
say they're not into CSS and they want,,,
to keep it simple now they need to get,,,
some data so they're going to use some,,,
JavaScript and they're going to call our,,,
API here so they're going to go into,,,
their text editor and they're going to,,,
start making request here so in their,,,
website here the first thing they're,,,
going to do is create some kind of,,,
JavaScript file here so let's see just,,,
underneath our body tag we're going to,,,
create a script tag and they're just,,,
going to go ahead and create a function,,,
called get rooms don't worry about the,,,
JavaScript if you don't know this we're,,,
going to go quick and I won't explain it,,,
uh just codal on or kind of follow for,,,
the concept so we're creating a function,,,
called get,,,
rooms and this is going to be an arrow,,,
function so if you don't know what that,,,
is don't worry about that so we're,,,
creating an arrow function and this,,,
function's job is to make an API call to,,,
this endpoint so we're going to use the,,,
fetch API so they're going to make a,,,
request and we tell them okay go to our,,,
website here on PO 8000 and go to API,,,
for/ rooms this is the end point that,,,
you need to call and this will give you,,,
this response right here so once you,,,
call that data then you can do whatever,,,
you want with it so we're going to pass,,,
that in into that fetch Rec or the fetch,,,
request now in this fetch request we,,,
want to actually pull this data and get,,,
some kind of response so we're going to,,,
use asyn weight uh these are going to be,,,
uh the alternative to our promises is,,,
it's a different way of working with the,,,
fetch API and we're going to set a,,,
variable called response here and this,,,
is going to be a wait and then we're,,,
making that request so this request,,,
right here will get us some data so what,,,
I can do here is go ahead and just do,,,
console.log and we're going to console,,,
the,,,
response and we'll just console the,,,
response here so let's go ahead and,,,
Trigger this function so we need to call,,,
it and there we go so that's all the,,,
function does right here so it's a,,,
simple function makes a call and it's,,,
supposed to print out the data so let's,,,
go ahead and check this out so if I open,,,
this up let's go to our website let's,,,
open up the console we want to see this,,,
printed out and oh crap we have an issue,,,
so this was planned so we need to work,,,
on something called Coors configuration,,,
so cores stands for cross origin,,,
resource sharing and you can see this,,,
right here so if I hover over that we,,,
see this issue and what's Happening Here,,,
is this person is trying to access our,,,
website here and jeno is saying I don't,,,
know who you are you're accessing this,,,
website from a completely different,,,
resource and I'm not going to let you,,,
access this so what we need to do is,,,
configure that so D Jango can either,,,
allow all endpoints to make requests to,,,
our API or we can even provide a,,,
specific set of URLs that are allowed to,,,
call our API so let's go ahead and,,,
configure that so this is a very common,,,
issue the cores issue so we're going to,,,
go ahead and fix that and for this we're,,,
going to use something called,,,
Jango cores header so this is going to,,,
be a third party package that we can,,,
install that takes care of this so the,,,
first thing we're going to do is run,,,
this install so we're going to do python,,,
DM pip install Django hyen cores hyphen,,,
headers so we're going to go ahead and,,,
install,,,
this so let's open this up we're going,,,
to open up a new terminal and we're,,,
going to paste this in so we just,,,
installed it then in the documentation,,,
it tells us to add this to installed,,,
apps we'll bring that in so we'll,,,
minimize this now we'll close that one,,,
out leave the server on and let's go to,,,
settings.py so underneath rest framework,,,
let's add in cores headers like that so,,,
you can write that out or just add it,,,
and then after we add that we need to,,,
add in the cores middleware to this,,,
middleware variable inside of,,,
settings.py so we'll go into middleware,,,
let's bring this in right here I'll,,,
create some space so we can see it so,,,
cores headers middleware and then cores,,,
middleware So based on the documentation,,,
we can set three different things so,,,
first we have cores allowed Origins and,,,
this is going to be a list of specified,,,
URLs that we're going to allow so it's,,,
going to look something like this go,,,
ahead and allow example.com allow sub.,,,
example.com port 8080 Port 90 and so on,,,
so we can allow multiple ports and URLs,,,
to access our website we can also use,,,
regx here and specify some kind of Rex,,,
right here that allows certain types of,,,
domains or or we could specify cores,,,
allow all Origins so this is going to be,,,
what we're going to use and we're just,,,
going to bring this down here at the,,,
bottom of our website and we're just,,,
going to say true so by default this is,,,
false and cores allow all Origins means,,,
we're going to allow all urls to access,,,
our website so if I save that once this,,,
configuration is done I can close out,,,
the,,,
documentation and let's check this out,,,
so we're having this issue now if I,,,
refresh it boom the issue goes away and,,,
we have our response now this response,,,
doesn't tell us anything so or it does,,,
tell us a lot it tells us information,,,
about that it tells us the status code,,,
but we want to see this data right here,,,
we actually want to see this response so,,,
we need to specifically with our front,,,
end here we need to parse this data so,,,
with a fetch API that's a way to make,,,
requests you can also use axios jQuery,,,
if you're still using that there's,,,
different ways of doing things but with,,,
the fetch API we can go ahead and get,,,
the runes here and the rooms will get,,,
using the await right here and we're,,,
just going to do,,,
response.,,,
Json and before I jumped off on my side,,,
tangent I meant to say that with a fetch,,,
API when we send data we have to,,,
stringify it when we get it we have to,,,
parse it and turn it back into Json data,,,
so that's just how it works so let's,,,
just copy and paste rooms here and now,,,
we want to see the rooms information so,,,
we can go back to our front end in our,,,
Cool website and here we go so imagine,,,
this is somebody from the other side of,,,
the world they just made an API call and,,,
they got this data right here from our,,,
API and they're able to see it and,,,
actually start working with that data so,,,
that's how that works we create the API,,,
and then somebody can access that so,,,
it's a way of sharing information it's,,,
like a phone call where you're uh or I,,,
guess sending emails you're passing data,,,
and you're getting data so let's,,,
actually just show you how you can,,,
render that out we might as well show,,,
that right now so let's say this person,,,
gets this API call then they just want,,,
to add in some data into the rooms,,,
container so they're going to use a,,,
query selector so we're just going to,,,
set the rooms,,,
container and that's going to be equal,,,
to document. getet element by ID don't,,,
worry about the JavaScript here so we're,,,
not going to focus on that and we're,,,
just going to do rooms container okay so,,,
we have this div right here so we have,,,
access to this and after we get the data,,,
what I want to do is create a for Loop,,,
so I'm going to remove that console and,,,
we're going to create a JavaScript for,,,
Loop and we're going to set the loop,,,
here so we're going to set I that's,,,
going to be equal to zero and with,,,
JavaScript here we're going to do rooms.,,,
length so,,,
while so we're going to do do length,,,
like that so while I is less than rooms.,,,
length we're just going to increment I,,,
so we'll just do i++ so that's a for,,,
Loop in JavaScript for those of you that,,,
don't know that or one of the ways of,,,
doing it then we're going to set the,,,
room variable and this is going to be,,,
set to rooms and then we're going to,,,
access the index of that so I know it's,,,
a little bit of s Chang it from the D,,,
Jango R framework but a lot of people,,,
like this in the course when I showed it,,,
this way so I want to do this again here,,,
uh in the full Jango 2021 course that I,,,
did so we're going to create a row now,,,
and this is going to be set to these two,,,
back ticks here so these are template,,,
literals and template literals allow us,,,
to add in more than what we would do,,,
inside of a regular quote here so we're,,,
going to create some divs here and it,,,
gives us some extra functionality and,,,
how we can work with it so we're going,,,
to create like an HTML element using,,,
these back ticks then we can create an,,,
H3 tag and because of these back ticks,,,
or template literals we can add in,,,
variables directly into our content by,,,
using a dollar symbol and then these two,,,
curly braces so it's actually a little,,,
bit like the D Jango templating engine,,,
uh syntax that we had so we can now go,,,
ahead and just do room. name and that,,,
gives us this div with this content so,,,
in the for Loop outside of these back,,,
ticks we're just going to do room,,,
container so we're getting this value,,,
right here here so this item and we're,,,
going to create some space here and,,,
we're just going to append all these,,,
divs right here with the H3 tag inside,,,
of this div so we're just going to do,,,
roomed container,,,
doin,,,
HTML so enter HTML plus equals and then,,,
we're going to set that to row so we're,,,
passing that in let's go ahead and,,,
create some space and let's check this,,,
out so undefined okay let's see what's,,,
going on here so we have our room we're,,,
going into rooms we're getting the,,,
request,,,
here rooms. name okay that needs to be,,,
room. name so this variable right here,,,
so we're going into that and there we go,,,
so this is the awesome website that this,,,
random person from the other side of the,,,
world wanted to build out using our API,,,
and regardless of how cool or uncool,,,
their website is we now gave them a way,,,
of doing that now if we can tell them go,,,
ahead and access you know a certain ID,,,
at this end point that's how you would,,,
do it so they would add in links here,,,
when they click on these they can,,,
display that information so sort of a,,,
side tangent but we just took care of,,,
that and I wanted to go ahead and show,,,
you how to do that so let's go ahead and,,,
move on to working with a custom user,,,
model and I kind of want to do some,,,
explanation here and explain why we left,,,
it out in the beginning here and why,,,
we're going to add it the way we'll do,,,
it now,,,
so the user model is already built into,,,
D Jango and this is something that gives,,,
us or this is something that contains,,,
how a user gets authenticated and it,,,
contains very important information,,,
about our user and it's a vital part of,,,
our application now there's multiple,,,
ways of adding to it for example in our,,,
user model we don't have a bio we don't,,,
have a profile picture maybe we want,,,
like a full name value we don't have,,,
this information in that user model now,,,
one thing we could do is add a onetoone,,,
relationship and this is how we do this,,,
in my Jango 2021 course we add in a on,,,
toone relationship and we would simply,,,
create a profile model so the profile,,,
model would contain all the information,,,
like the users Facebook account Social,,,
Links uh bios profile pictures and so on,,,
and we created this onetoone,,,
relationship and this onetoone,,,
relationship would simply uh connect to,,,
the user model and that means that a,,,
user can only have one profile and a,,,
profile can only have one user so we,,,
would connect those and then we would,,,
add in things like the profile picture,,,
and all that information to the profile,,,
model so this way we never actually have,,,
to touch the user model now what I'm,,,
going to do here because I already did,,,
that in that course so you can check out,,,
that option if you want and I also have,,,
videos on YouTube for free on that uh,,,
instead of using that method we're going,,,
to modify the user model now I typically,,,
do not like to use this method there's,,,
downs and UPS to both sides with the,,,
method where we add the onetoone,,,
relationship it does require a little,,,
bit more configuration when you uh,,,
register your user or um update,,,
information about the user it does,,,
require some more configuration but it's,,,
safer because the user model is not,,,
being touched now in here we're actually,,,
going to override the user model and,,,
then we're going to customize it so I,,,
don't like doing this so what I'm going,,,
to do here is create a completely new,,,
project it's going to take a second here,,,
we're going to create a completely new,,,
Jango project I'm going to show you how,,,
to customize it so we can focus on just,,,
that part and then we're going into this,,,
project we're actually going to have to,,,
clear our database because now once we,,,
start messing with that user model it's,,,
going to really change things up and,,,
you'll see why and then we're going to,,,
have to read in data once that's remik,,,
graded so this is why I saved this part,,,
for the very end so let's go ahead and,,,
actually uh apply this right now so,,,
we're going to go ahead and close,,,
everything out here so we're going to,,,
close out this project right here we'll,,,
close out our D Jango project any other,,,
projects that I have I'm going to leave,,,
uh or I guess I'm going to close it out,,,
here and let's just take our Cool,,,
website and bring that into study button,,,
in here I'm just going to rename that to,,,
uh we'll just do AP I,,,
example okay so that way when you look,,,
into the documentation you can see how,,,
that looks okay so I already have Jango,,,
installed globally you could just go,,,
ahead and reinstall that uh you could,,,
also set up your virtual environment for,,,
now I'm just going to go into my desktop,,,
here so CD desktop uh just go ahead and,,,
run pip install Jango I have it globally,,,
as you can see I don't have a virtual,,,
environment make sure that's installed,,,
and then just do Jango dadmin and we'll,,,
just do user model,,,
or we'll just do custom user model okay,,,
so django-admin start project so let me,,,
zoom in here one second sorry about that,,,
okay so I'm going to try to go as slow,,,
as possible here so D Jango custom user,,,
model and then we'll just add in,,,
start,,,
project okay so this is going to start,,,
up our new Jango project we're going to,,,
go ahead and open up a new vs code,,,
terminal here or new vs code or uh file,,,
text editor so go ahead and open one up,,,
find this new project we should see user,,,
model right here custom user model go,,,
ahead and open that up in your desktop,,,
so I have that right here it looks,,,
really small for some reason but just go,,,
ahead and select that file so now we,,,
have a new Jango project so let's go,,,
ahead and start customizing this so the,,,
first thing we want to do is go into,,,
that terminal and create a new app so,,,
we'll just do why the heck is this doing,,,
this okay python manage.py start app and,,,
we're going to call this base so the,,,
same thing that we did in our original,,,
project we have our new app we're going,,,
into settings.py and we're just going to,,,
go ahead and configure installed apps so,,,
we're going into base. apps. Bas,,,
config okay so that's all the prep work,,,
now there is documentation on how to,,,
modify the user model so instead of,,,
going into that I'm just going to start,,,
adding this in right here so we have our,,,
new app here and we have this user model,,,
and before we start migrating our,,,
database this is why I'm I'm starting,,,
this from scratch so we don't have to,,,
redo anything we're going to go into the,,,
models file remember the user model is,,,
already built into Jango so what I'm,,,
going to do here is go ahead and build,,,
out my own user model and it's going to,,,
inherit from the original D Jango user,,,
model and then we're just going to,,,
extend it so we're just going to go,,,
ahead and run an import so from Jango .,,,
contrib,,,
doo. models import abstract so import,,,
abstract,,,
user okay once we have that we're going,,,
to create a class here and this is going,,,
to be called user so user is going to,,,
inherit from the abstract user and we're,,,
just going to set pass here okay so,,,
that's our new user model and it's going,,,
to have all the functionality of the,,,
original user model and this this is,,,
also where I'm going to show you the,,,
example of how to customize like the,,,
username to an email field instead of,,,
logging in with a username we can log in,,,
with an email okay so we have that new,,,
user model and what I'm going to do here,,,
is tell D jeno that I want to use this,,,
model right here instead of the original,,,
D Jango user model so we'll go into,,,
settings.py and we're going to set this,,,
variable called o and then we're going,,,
to do underscore user uncore model and,,,
we're going to tell Jango which,,,
model is going to be our new,,,
authentication model so the oth model so,,,
we're going to point this to base so,,,
that's our app and we're going into user,,,
so this model right here we're pointing,,,
it and we're saying use this model now,,,
to actually use our authentic or handle,,,
our authentication and everything like,,,
that okay so we have that and once we,,,
point to it let's go ahead and run some,,,
migrations so we're going to do python,,,
manage.py make,,,
migrations so we're going to run those,,,
migrations we have a user model python,,,
manage.py,,,
migrate and now that's all migrated so,,,
all the default tables that got migrated,,,
that's all added to the SQL database so,,,
really quick let's just go ahead and,,,
create a user so we'll do python,,,
manage.py,,,
create super,,,
user we're going to call this user,,,
Dennis and then Dennis email.com,,,
set a password so nothing new here one,,,
second let me restart the,,,
password okay so we have a user created,,,
now typically we don't have to register,,,
our user with the admin panel but,,,
because we created our own user model we,,,
do need to go into admin.py and now,,,
we're just going to do from. models,,,
import user and then we're going to do,,,
admin. site,,,
.,,,
register once you see some of the issues,,,
that we're going to run into you'll,,,
thank me for starting it fresh like this,,,
because uh it's actually pretty simple,,,
but it could get tricky for someone that,,,
doesn't understand it and especially,,,
with our project at the size that it is,,,
it's going to be uh a slight nuisance,,,
it's not going to be too hard but just,,,
in case so let's go ahead and run our,,,
server now so manage.py run server and,,,
let's check this out okay so all we did,,,
was we went ahead and created a new user,,,
model we import imported or inherited,,,
from this we added in,,,
settings.py the Au user model pointed,,,
that to base and then user and then we,,,
register that with the admin panel so,,,
now if I go into the admin panel let's,,,
go to Port 8000 let's go to for/ admin I,,,
can now log in as this user and you'll,,,
notice users is no longer inside of,,,
authentication and authorization so the,,,
app that we've been working in up until,,,
now the user was originally right here,,,
but because we created our own user user,,,
model it now says the user model is,,,
inside of the base app here so it looks,,,
like the original user it has all the,,,
functionality the password all this,,,
information and all the stats about our,,,
user so it's a standard user model and,,,
that's how we can simply customize it,,,
now let's go ahead and or that's how we,,,
can change what user model we're using,,,
but now let's go ahead and actually,,,
customize some of the fields here so the,,,
first thing is is I want to make sure I,,,
can register with an email value instead,,,
of a username that's a little bit,,,
annoying to do so let's just pull up the,,,
admin panel I just logged out so we'll,,,
just do admin and we want to log in with,,,
an email instead of a username it's,,,
really annoying to have to remember a,,,
username for every website a little bit,,,
easier to remember your own email so,,,
let's go ahead and go back to the user,,,
model and in the model we're going to go,,,
ahead and remove pass and we're going to,,,
set a few values here so the first thing,,,
is is we're going to set a name so we're,,,
actually going to add in some custom,,,
Fields the default field here or the,,,
default user model has uh a first and a,,,
last name and then a user but I want a,,,
name value I don't like the first and,,,
last name method so we'll just do,,,
charfield here we'll set the max length,,,
that's going to be 200 and because we,,,
already have a user we do need to set,,,
null to True otherwise it's going to,,,
give us an issue okay so we have the,,,
name then we are going to add in an,,,
email field even though it has one we're,,,
just going to overwrite it this is going,,,
to be models. Emil field and we're going,,,
to set this to Unique so unique has to,,,
be true in order to actually log in with,,,
it so that means that two users can't,,,
have the same email because once they,,,
try to log in D Jango won't know which,,,
user is trying to log in so this needs,,,
to be unique so make sure you set that,,,
and let's just add in a bio so we'll,,,
just do,,,
models so models. text field and null,,,
will be true because we already have a,,,
model here so we just want to make sure,,,
that user doesn't have to add in a bio,,,
so now we're just going to username,,,
field and we're going to set that to,,,
email so we're going to tell D Jango the,,,
username field is now going to be the,,,
email field right here so use this,,,
instead of the username so just change,,,
it right there now we're also going to,,,
set required Fields go ahead and add,,,
that and just make that an empty list,,,
for now and that's it so once we make,,,
these modifications we're going to go,,,
ahead and open up our terminal do,,,
python manage.py make migrations so,,,
we're going to make the migrations first,,,
then we need to migrate them so python,,,
manage.py,,,
migrate and we should be good so my,,,
server is still on so I'll close out,,,
this terminal and let's check out the,,,
admin panel so if we go here now we see,,,
email now if I try to log in with my,,,
username it doesn't work I'm going to do,,,
Dennis,,,
email.com voila I'm lged I'm logged in,,,
here so let's go to the user we'll go,,,
here we see the first and last name that,,,
was our already there but now we see the,,,
name value and a bio so we have,,,
customized our user model and we added,,,
in the email field so again the reason,,,
why I started this off blank is because,,,
I wanted to show you how to do this,,,
without running into any issues and I,,,
didn't do this in the beginning of the,,,
project because I didn't want somebody,,,
running into these issues and then,,,
having to fix it later and then having,,,
that be a pain and stopping them from,,,
completing the tutorial so if you're,,,
ever doing this do this early on in your,,,
project don't do it mid way through now,,,
we are going to do it Midway through,,,
because if you do happen to want to,,,
change your mind and do it I want to,,,
show you a different way of actually uh,,,
being able to actually go through this,,,
process and change it because there's a,,,
good chance that you might have to do,,,
this I've had to do this before so now,,,
that we've done the easy way I want to,,,
show you the more challenging way so,,,
let's go ahead and close out what we,,,
currently have and let's just open up,,,
our original D Jango project so we'll go,,,
back in here and for some reason my text,,,
is super small okay so now I'm able to,,,
zoom in a little bit so I guess whatever,,,
is on my desktop doesn't really matter,,,
so just go ahead and open up study bud,,,
and get that server going so we're going,,,
to add in some profile pictures and,,,
things like that so go ahead and make,,,
sure your virtual environment's on,,,
activate the server so python manage.py,,,
run server start that up here and let's,,,
make sure our project is open go back,,,
here pour 8,000 and let's go ahead and,,
do this so the first thing I'm going to,,,
do here is go ahead and I'm going to,,,
clear my database so at this point we,,,
already have data in here and this is,,,
why I say do this in the beginning of,,,
the project we already have data in here,,,
so we're going to need to completely,,,
clear it so if you don't want to clear,,,
your project and you don't want to use,,,
this method don't do it but at this,,,
point you could maybe make a duplicate,,,
of your project and try this out that's,,,
actually what I would recommend go ahead,,,
and make a copy of this project so you,,,
have a backup you can revert to so that,,,
way you don't lose what we've worked on,,,
just in case so let's go to the DB,,,
sqlite database and let's delete it so,,,
we'll delete it permanently in fact my,,,
server is on so you're going to have to,,,
turn off your server before you do that,,,
so go ahead and delete that and then go,,,
ahead and go into base go to your,,,
migrations and delete all the migrations,,,
because you are going to have an issue,,,
if you try to migrate with all those,,,
previous migrations so go ahead and,,,
clear it as if we've never had a,,,
migration and we never had had any data,,,
in our application so now that we've,,,
cleared all that out we're going to have,,,
to do uh a few weird things here I guess,,,
because we're having to basically start,,,
from square one so we'll go into our,,,
application the first thing I want to do,,,
here is comment out all the other models,,,
so we're going to act as if these models,,,
were never even added into our,,,
application and then we'll have to,,,
remigrate them so I can comment all,,,
these out by hitting control and then,,,
forward slash that's a trick to do that,,,
so I'm not sure if that's going to be,,,
different on your computer but go ahead,,,
and comment all that out and let's go,,,
ahead and remove this right here so,,,
we're no longer using that default user,,,
model that Jango gives us so now we're,,,
going to create our new model just like,,,
we did so we're repeating what we did in,,,
the last uh section here and we're going,,,
to use the abstract user model here so,,,
let me go ahead and open up the demo,,,
code that I need to view for this so,,,
give me one second,,,
okay,,,
so all right I have that prepped here,,,
and I'm going to continue so I have that,,,
open and we're just going to go ahead,,,
and make that quick import so before we,,,
finish this abstract user let's make,,,
that import so from D Jango do,,,
contrib,,,
doo. models and we're going to import,,,
abstract user so we just did this then,,,
we're going to take abstract user we're,,,
going to paste that in here let's go,,,
ahead and add and pass and that's it so,,,
all we're trying to do is get Jango to,,,
look at our new user model as opposed to,,,
what we originally had so once we set,,,
this in the last step here what we did,,,
was we went into settings.py sorry about,,,
the outside noises if you can hear those,,,
I have like construction companies out,,,
there now so now that we have this we're,,,
going into,,,
settings.py and we need to go underneath,,,
our URLs well technically it doesn't,,,
matter where you add it but I'm going to,,,
add it under my URLs and we're going to,,,
set the oore user uncore model and,,,
that's going to be pointing to base.,,,
user so the user model we have in here,,,
now so we just did that okay so we have,,,
that taken care of and now let's try to,,,
migrate this so I want to show you the,,,
issue before we continue so I might as,,,
well show you this right now so if I try,,,
to run a migration so we'll just do,,,
python manage.py,,,
make,,,
migrations we're gonna see some issues,,,
so at this point we have all these files,,,
and again I'm going to do this more,,,
manually but we have all these files and,,,
it says hey I can't import room and,,,
topic and message because I don't know,,,
what these what the heck these are we,,,
haven't even ran those migrations now if,,,
we didn't comment out our models when we,,,
try to run this migration jeno would,,,
give us an issue right here in fact,,,
let's just try this so let's uncomment,,,
this and let's try this one more time so,,,
python manage.py make migrations so I,,,
just clear that okay never mind wow it,,,
actually did work right away sorry about,,,
that okay I guess I'm not sorry because,,,
that actually fixes our problem so go,,,
ahead and clear your database or delete,,,
the database uh make sure you add in,,,
this model clear all the old migrations,,,
that was important because this will not,,,
work remigrate it so read add in all,,,
these in the migrations and then just do,,,
python manage.py,,,
migrate boom okay perfect wow that,,,
actually really saves us a lot of time,,,
so we just create cre a new database and,,,
new database tables but now we're using,,,
this user model right here so let's go,,,
ahead and create the super user so,,,
python manage.py,,,
create super,,,
user let's try that one more time so,,,
python manage.py,,,
create,,,
super user and we're just going to add,,,
in Dennis this will be Dennis email.com,,,
and then the,,,
password duplicate that password and,,,
there we go okay so let's run the server,,,
now so python manage.py run server okay,,,
so we're going to see a few issues still,,,
here though so at this point if we go to,,,
the admin panel we just go to for/ admin,,,
I can now log in with this username and,,,
we have a clear uh database here so we,,,
have no messages and we have no topics,,,
all we have is our user so we need to,,,
register the user with the admin panel,,,
so we'll go into the admin panel or,,,
admin.py file and we're just going to,,,
import the user now so it's going to be,,,
a little bit weird because now we import,,,
user from the models instead of uh that,,,
default import that we,,,
had and let's just add this right here,,,
so we're going to go ahead and do admin.,,,
site. register and we're going to pass,,,
in,,,
user okay so we register the user now we,,,
can see one user here so we're just kind,,,
of restarting from the beginning and,,,
back in all the pages here we're going,,,
into the views now so let's just go,,,
ahead and go line by line here or not,,,
line by line but file by file and we're,,,
going to change this default import and,,,
we're going to change this to user right,,,
here so now we're going in here so this,,,
is the difference now that we're,,,
allowing uh our own user model to be uh,,,
or now that we're accessing our own user,,,
model so now we're using that we're not,,,
making that original import also in,,,
forms.py we also import the user model,,,
that way we're going to change that and,,,
change it to,,,
this okay so we have that user model,,,
everything should be good views,,,
forms all right so let's go ahead and,,,
just uh start changing the login field,,,
here so let's add in our custom Fields,,,
now so we're going into models now and,,,
we're going to do what we just did in,,,
the last section here so in the last,,,
section we went into that model and we,,,
added in the name value so we added name,,,
that's going to be,,,
models.,,,
charfield max length we're setting that,,,
to 200 null is going to be set to true,,,
so we're just repeating a few things,,,
here we're adding in an email so email,,,
is going to be set to,,,
models. email field and null is also,,,
going to be,,,
true and we want a bio,,,
this will be,,,
[Music],,,
models dot text field so we're going to,,,
do a text field for the bio and null,,,
will also be set to true so let's also,,,
add in blank as true here so actually,,,
you know what we're going to leave it,,,
like that because I want to require this,,,
at some point so we're going to leave it,,,
like that and then we're going to have,,,
an avatar so Avatar like that and this,,,
is something we're going to comment out,,,
so I'm going to do this in a second,,,
because it does require its own,,,
configuration so now we just need the,,,
username field so,,,
user username field is going to be email,,,
so we're just overwriting this and I'm,,,
doing this step by step so as we Face,,,
the issues I can fix them right away so,,,
we'll just do required and required is,,,
going to be empty okay so let's run,,,
these migrations now so username field,,,
must be unique so I forgot about that so,,,
the email field needs to be,,,
unique that's going to be,,,
true and let's try this okay so this is,,,
issue this issue should go away let's,,,
run that,,,
migration make,,,
migrations python manage.py,,,
migrate and let's check this out so,,,
let's just make sure this was added so,,,
in the user model I can now add in a,,,
name so we'll just do Dennis,,,
Ivanov and for the bio let's just add in,,,
some laurum ifum text here so we'll just,,,
say actually we'll go to my website,,,
Dennis ivy.com,,,
sorry about that chainsaw,,,
outside so we have that we're going to,,,
add that as a bio we'll save that and,,,
the user now has some more information,,,
okay so that all worked now what we want,,,
to do is add in a image field so I'm,,,
going to pause it and wait for that,,,
chainsaw to be done all right so now,,,
when we refresh the page all the content,,,
goes away because we have a completely,,,
new database so before we add in the,,,
user profile picture I do want to add in,,,
some content so that way we can actually,,,
output it and see what we need to update,,,
and actually see those profile pictures,,,
rendered so the only reason why we were,,,
seeing that earlier as far as the,,,
content was because I didn't refresh the,,,
website after we made all those changes,,,
so completely forgot about that so let's,,,
go ahead and just add in some more,,,
information so we'll add in a room and,,,
we'll just say Let's Learn,,,
Python and then once I save that I can,,,
see what picture I need to update and,,,
once I actually update that part of the,,,
code we'll see that it actually works so,,,
for the room messages we also do have,,,
profile pictures so we'll just say looks,,,
cool,,,
and then later on I will register as,,,
another user and will output that user's,,,
profile picture so back inside of the,,,
model here so in the user model in,,,
models.py let's go ahead and uncomment,,,
the Avatar attribute so this is going to,,,
be set to models. imagefield so before,,,
we even run the migrations or actually,,,
save anything let's go ahead and open up,,,
the terminal here and I want to show you,,,
why I waited for this so at this point,,,
if I hit save here or contrl S we're,,,
going to see this issue here so the,,,
image field relies on a thirdparty,,,
package called pillow which is simply an,,,
image processing library and we need,,,
this in order for this field to work,,,
here so I didn't want to deal with that,,,
right away when we were still making the,,,
user model so now that we have it let's,,,
go ahead and run this install and we,,,
need to configure a few more things here,,,
so we'll go ahead and turn off our,,,
server and we'll just do pip or,,,
python - M pip install pillow so we'll,,,
get pillow installed,,,
and once I run the server that issue,,,
should go away so python manage.py run,,,
server and there we go so I haven't run,,,
the migrations yet so we want to finish,,,
up the actual attribute here and what I,,,
want to do next here is set the no value,,,
to true so we already have a a user here,,,
so I don't want to have any conflicts in,,,
the database and we can actually set the,,,
default image so let's say a user,,,
registers we don't want to have we don't,,,
want to have to force them to upload a,,,
picture right away they might not have,,,
one ready right away so let's just set a,,,
default picture with some kind of like,,,
Avatar picture and that way they can,,,
choose to update this later so we're,,,
going to set this to an image inside of,,,
static and images and if you downloaded,,,
that template you should have a picture,,,
called avatar. SVG so if you don't have,,,
this go ahead and get that from the,,,
source code or just add in your own,,,
image into this file path so static and,,,
then images and then set that right here,,,
so we're just going to do Avatar,,,
SVG and I always talk funny when I'm,,,
sounding Out And typing okay so we're,,,
still not migrating yet we just added in,,,
a default so every single user model by,,,
default will have this picture until it,,,
gets updated so for user uploaded,,,
content we talked about static files,,,
earlier and these images are static,,,
files now there's a different way to,,,
handle user uploaded content or user,,,
uploaded images so what's going to,,,
happen here is when a user uploads it we,,,
first need to tell D Jango where to,,,
upload this picture to and then how to,,,
actually render out the image URL so,,,
let's go into settings.py and we'll go,,,
down to where we configured our original,,,
static files so down here we have the,,,
static files directory and that works,,,
for the standard images on our website,,,
and the CSS and JavaScript files but for,,,
user uploaded content we need to set,,,
mediacore root so media root is going to,,,
tell D Jango where to upload these user,,,
profile pictures so if we later on had,,,
some user uploaded content maybe for a,,,
room or maybe a user can add a picture,,,
to their message media root is going to,,,
tell D jeno when that form gets,,,
submitted where this picture is going to,,,
go so D Jango is going to look at media,,,
rout and it's going to follow the file,,,
path that we give it so at this point,,,
we're just going to set this to the base,,,
directory and we're going to tell jeno,,,
go into the static folder and store this,,,
picture inside of the images folder so,,,
we'll go into static and then we'll go,,,
into images so you can store your static,,,
file F in different ways typically in a,,,
production environment You' use,,,
something like an AWS S3 bucket and,,,
upload it directly there but for now in,,,
our development environment this will do,,,
just fine so we're telling Jango put,,,
this picture right here now after we,,,
have our media route and we're not going,,,
to worry about static route in this,,,
video here so uh after we have our media,,,
route we also need to specify a URL for,,,
these pictures so we're going to do,,,
mediacore URL so in this case just like,,,
we have a URL for the static for all the,,,
links here the links and standard images,,,
well we're going to specify a media URL,,,
for user uploaded pictures so now,,,
they're going to be prefixed with images,,,
here so we have a media URL and a media,,,
rout so we're not done yet we also need,,,
to configure our root directories,,,
urls.py file so in here we need to add,,,
in the file path to these URLs so we,,,
first need to make a few Imports so,,,
we'll just do from jango.com and we'll,,,
import set settings so this will give us,,,
access to settings.py so to this,,,
folder so after that we need to do from,,,
jango.com,,,
do URLs and we're going to import or,,,
url.,,,
static and we are going to import the,,,
static method okay so we have our URL,,,
paths and we're going to add in one more,,,
path but instead of adding it as a path,,,
like this we're just going to do URL,,,
patterns and we're just going to append,,,
to it so Plus equal we're going to use,,,
the static method and we're just going,,,
to tell jeno go ahead and set a UR URL,,,
path to,,,
settings.,,,
mediacore URL then we're going to set,,,
that to,,,
documentor root and I want to make sure,,,
my face is uncovering this and document,,,
route is going to point to,,,
settings and I'll explain what's going,,,
on here in a second so settings.,,,
mediacore root so we're setting a URL,,,
and the file path is going to be media,,,
URL from settings so this is the URL so,,,
we set this URL right here and we're,,,
telling it set the URL and get the file,,,
from media root so settings. media root,,,
so we just connected these two right,,,
here so in settings.py we connected,,,
media root to Media,,,
URL so let's save all of this and now,,,
let's run our migration so the default,,,
model that that we have already should,,,
be attached to this Avatar when we run,,,
this migration so let's go ahead and,,,
open up our terminal and we're just,,,
going to open up a new terminal here our,,,
server is still running and I'm just,,,
going to run python,,,
manage.py make,,,
migrations so that's going to prep the,,,
migrations for the Avatar in that user,,,
model then we need to run that migration,,,
so we'll just do python manage.py,,,
migrate so we we ran the migration and,,,
let's take a look at what we have here,,,
so if I go into the admin panel let's go,,,
ahead and do for/ admin if I go to users,,,
go to Dennis right here I should now see,,,
Avatar here so if I click on this we can,,,
see the file path so that's the domain,,,
images that's what we set in media URL,,,
and then we see the picture so when I,,,
ran that Migration by default this was,,,
added to Dennis so let's go ahead and,,,
change that picture so we'll go back to,,,
the admin panel I shouldn't have closed,,,
that and we'll just go into,,,
users and let's actually update this,,,
profile picture so you can do this from,,,
the form on the front end because we,,,
have not configured that form yet so I,,,
added some pictures of myself here we'll,,,
just take this one right here and we'll,,,
just do open submit that and Jango,,,
already knows how to process this so,,,
we'll take care of that form submission,,,
in a second for now we'll just do it,,,
from the admin panel so let's render,,,
this picture out now so we'll go back to,,,
our homepage and I want to render this,,,
out right here and anywhere I make a,,,
comment or anywhere I set up a room here,,,
so we'll go back into our,,,
template and we want to start with our,,,
index.html file or our home.html so the,,,
home page so that's actually in the feed,,,
component or the room component let's,,,
see what the heck did I call that I'm,,,
like starting to lose all this okay so,,,
we have the feed component okay so in,,,
the feed component We're looping through,,,
all the rooms and and we want to Output,,,
the user profile picture so let's see,,,
let's just go ahead and do a search for,,,
the image tag so here we go we see the,,,
Avatar and right now it's a link to this,,,
random picture generator and we're going,,,
to remove all of that and we're going to,,,
get the profile picture so in this case,,,
I'm going to go into the room then we're,,,
going into the host which is the user,,,
then we're going into,,,
Avatar and instead of just specifying,,,
the Avatar I need to specify the URL,,,
here so we'll do Avatar ar. URL so now,,,
if I refresh this now I see my picture,,,
right here so we're rendering out the,,,
profile picture and that looks a lot,,,
better so I can also do that for the,,,
header section so we'll go into the,,,
navigation bar we'll just update this in,,,
a few pictures and then eventually I'll,,,
leave this up to you to make all these,,,
updates I don't want to spend time on,,,
the tutorial just uploading or updating,,,
pictures so we'll go into templates in,,,
the nav bar let's see in the nav bar,,,
where do we have the image tag so we,,,
have the,,,
logo then we have the Avatar right here,,,
so we want to update this so if the user,,,
is authenticated output the Avatar so in,,,
this case we're going,,,
into user or we'll just do request.,,,
user so we're getting the user based on,,,
the request. user model and then we're,,,
going into,,,
avatar. URL so we're specifying the URL,,,
so if I refresh that there we go I see,,,
my profile picture so I'm just going to,,,
go ahead and update this in a few,,,
different areas here and I want to show,,,
you one little issue so if we delete,,,
this user picture uh we are going to get,,,
an error so I guess I won't show it to,,,
you but if you delete that picture,,,
you're going to get an error because,,,
we're accessing the Avatar URL attribute,,,
so make sure users cannot not have a,,,
picture so if they delete it have some,,,
kind of default picture go in there so,,,
we'll make a few more updates so we'll,,,
add this to the activity feed so we'll,,,
do that right here and then we'll add in,,,
a new user and we'll show you how to,,,
submit that form so we'll go into,,,
activity and let's see,,,
so we have the Avatar right here we'll,,,
update,,,
this so,,,
message. user.,,,
avatar. URL and we'll also do this in,,,
the chat so we'll refresh,,,
that that should have updated it,,,
or was that in the Avatar or the,,,
activity page so I guess that works but,,,
we need to go to the activity component,,,
and update this right here so let's see,,,
up here in the activity,,,
component let's update this guy right,,,
here refresh that and let's go to the,,,
message we'll update this host,,,
information so what I'm going to do is,,,
just update the host and the chat and,,,
then I'll leave it to you to update all,,,
the participants and any other areas,,,
where I may have missed this so I got my,,,
point across as far as showing you how,,,
to do it now it's up to you to apply,,,
that so let's go to the room here we go,,,
to room and let's see so we have the,,,
room the host should be somewhere right,,,
here so if the request user that's the,,,
update,,,
method the room header right here hosted,,,
by and here we go so we see the,,,
Avatar let's update this so we'll just,,,
do,,,
room do,,,
host.,,,
avatar.,,,
URL and we'll also update the,,,
conversation so down,,,
here let's see random user okay so the,,,
Avatar right here let's take this value,,,
and in this case we're going into the,,,
message.,,,
user.,,,
avatar. URL okay so let's test this out,,,
right here so now we see the host,,,
uh let's say I register as another user,,,
so let's go ahead and do that um,,,
actually before we do that I want to,,,
update the user update form so I want to,,,
fix that first so let's go ahead and fix,,,
it so we'll go ahead and go into,,,
settings so in this area now this form,,,
needs to be updated so we just have a,,,
username and an email but it doesn't,,,
represent our new user model so for this,,,
let's go ahead and create a new form and,,,
render that out so we'll close,,,
everything out we'll go into forms . py,,,
and let's actually go to views so we'll,,,
go into views we'll take this user,,,
creation form and then we'll open up,,,
forms.py and we'll just paste that in,,,
here so what I need to do is go away,,,
from the default user creation form on,,,
registration and then I also need to,,,
create an updated user form to represent,,,
these fields here so we'll import that,,,
for now and let's go to our user form so,,,
in our user form we now have a name,,,
then we're going to have a username,,,
email and let's just add in Avatar so,,,
Avatar and then we'll add in BIO so I'll,,,
make sure that I'm not covering this so,,,
this is inside of the user form so,,,
remember that so we'll just do,,,
bio okay so you can still see that so if,,,
I refresh this now we see all of this,,,
and again I'm all messed up here because,,,
I'm so zoomed in my screen is just weird,,,
I'm at 175% here plus zooming in on this,,,
too,,,
so now we see the current picture we see,,,
this file and we see all this,,,
information so I can actually update and,,,
process this right now this will all,,,
work fine but the only issue is that the,,,
image right here will not work so we,,,
need to fix up the front end and the,,,
back end to actually process this so,,,
from the front end inside of this form,,,
we're going to go,,,
into,,,
the,,,
create user form I have so many files,,,
here but I'll leave them just so you can,,,
have the originals so update user we'll,,,
go in here and what I need to do is add,,,
in,,,
multi-art or we need to specify the ink,,,
type and this is going to be,,,
multiart SL form data so this is going,,,
to tell us that we're actually,,,
submitting files with this form and not,,,
just content in the original field so we,,,
specify the ink type and then in the,,,
back end to process this we do need to,,,
update the views so we'll go to the edit,,,
user page so we have the register page,,,
user,,,
profile create room update room,,,
delete okay update user so in here all,,,
we're going to do is also pass in,,,
request. files and that's all we need to,,,
do and this will send the files with it,,,
and actually process that so update the,,,
form update the update user method and,,,
anytime you're submitting files you want,,,
to make sure that the form takes that in,,,
so I'll refresh this now so I'll just do,,,
a hard refresh control shift R and let's,,,
let's go ahead and add in some,,,
information we'll just say the bio was,,,
now updated so we'll just say,,,
updated we'll take a new profile picture,,,
and let's say I want to revert back to,,,
this picture so we'll add that in if I,,,
submit that now my profile picture was,,,
updated and you can go in and update the,,,
bio update the profile picture inside of,,,
the user form and just make sure all,,,
that's modified so we added that in we,,,
updated the user the user update form,,,
and now we just want to update the,,,
registration form so I want to register,,,
as a new user so if I go to login and,,,
then sign up we have new attributes here,,,
so I want to represent those attributes,,,
so we'll go in here let's go,,,
into the forms file so we imported the,,,
user creation form so in here let's just,,,
go ahead and do class and we'll just do,,,
my user creation,,,
form so we're going to create a form,,,
that's going to inherit from this user,,,
creation form so it's going to have all,,,
the same attributes here so we're going,,,
to go ahead and add this in that's our,,,
user creation form and then in this user,,,
creation form we need to specify class,,,
of the or class meta pass in the model,,,
that's going to be the user then we need,,,
to add in the fields so when a user is,,,
registering What fields do we want to,,,
render out so we just want to render out,,,
the name so I want to get the name right,,,
away we want to get the username then,,,
let's get the email,,,
we also want to get the password so we,,,
have a password and the password,,,
confirmation so in this section and in,,,
the form by default they're called,,,
password one and then,,,
password,,,
two okay so my user creation form so,,,
inside of views I can actually remove,,,
this user creation form and I'm I'm,,,
going to paste in the new form that I,,,
just created so I already copied that,,,
and I'm going to paste in my user,,,
creation form so now back in the,,,
registration view we're just going to,,,
change this to my user creation form and,,,
then paste that in right here too so,,,
right here and right here so now if I,,,
refresh,,,
this now I see more form Fields so let's,,,
say uh we want to have someone named Tim,,,
register Tim will register with the,,,
username of Tim and we'll just,,,
do Tim email.com that's what he's going,,,
to loog in with we'll just add in the,,,
password confirm that and let's register,,,
so now if I register I'm registered as,,,
Tim I can see that default Avatar that,,,
looks good I can join a room in comment,,,
so we'll just,,,
say I'll check it,,,
out okay so now we see Tim's comment and,,,
again update the participants there and,,,
if Tim wants to update his Avatar let's,,,
go ahead and just say Tim's going to,,,
take my old picture we'll update that,,,
and we'll add in a bi and we'll just say,,,
I like to,,,
code and that should be good okay so,,,
there we go so Tim is now part of this,,,
room right here and we can see Tim's,,,
information and my information and,,,
that's it for the registration page so,,,
the last thing I'm going to do in this,,,
tutorial here is going to be to update,,,
the login form so typically a user logs,,,
in with a username and it will still,,,
actually work like this we can still log,,,
in with this user so let's actually log,,,
out and I'll log in as Tim here so we'll,,,
just do Tim,,,
email.com and we'll just let the,,,
password autofill so that works here so,,,
that works at this point but I also want,,,
to update the login form to say email,,,
instead of username and I want to make,,,
sure that it's just more precised in the,,,
back end here so in the login form we'll,,,
just do login register,,,
and we'll just change this,,,
to let's see so in the form that's the,,,
registration form so we need to open up,,,
this container we're just going to say,,,
email so we want to prompt the user for,,,
the right name we'll just say email and,,,
again the username was working because D,,,
Jango still sees the email as the user,,,
the username value so at this point,,,
we'll just update the name so we're,,,
sending an email back and we updated the,,,
label so in the backend we're just going,,,
to go ahead ah head and get the email,,,
value and I'm just going to go ahead and,,,
replace all of these so email and then,,,
we're going to get the user by the email,,,
so that has to be unique,,,
now so we have the email here the email,,,
updated here this will now be,,,
email,,,
email and that should be it so we just,,,
wanted to clean that up make sure it,,,
looks a little bit better and we'll just,,,
do Dennis,,,
email.com and we'll log in okay perfect,,,
I'm logged in as Dennis now I can see,,,
all this stuff right here I can see my,,,
account so that is going to be it for,,,
the entire course so go ahead and update,,,
all these sections I noticed a few,,,
things here like if I go to create a,,,
room and if I hit cancel well it's going,,,
to take me to this template so just,,,
update that URL these are little things,,,
here uh update all the participants so,,,
in the room here we see participants,,,
update these values go ahead and make,,,
sure that the user has their name here,,,
the profile picture and just make sure,,,
all this is rendered out with things,,,
like the bio and so on and make the,,,
customizations you need so I'm super,,,
excited if you got this far you finished,,,
the course you probably learned a lot in,,,
this process and that's going to be it,,,
for this tutorial I highly recommend you,,,
check out my full Jango course check out,,,
my YouTube channel I have a lot of free,,,
content a lot of Premium content also on,,,
UD to me and on my own website I'm so,,,
happy that you made it through this,,,
course and I hope to to hear about this,,,
in the comment section let me know how,,,
this was",,,
wv7pvH1O5Ho,"[Music]
hey what's going on guys so i'm still
working on some stuff trying to finish
up the freelance course and at the same
time not overdo it so i'll be back on
youtube within two or three weeks or so
with new content and like i said until
then i'll be releasing both guest videos
and some projects from past courses so
in this video we're going to build a
vanilla javascript sortable list with
drag and drop and this is from my 20
vanilla javascript project course on
udemy and i'll have a link to that in
the description if you're interested so
in this project we'll be using methods
like for each map sort we'll be using
the spread operator we'll work with the
document object model and we'll do a
little bit of css as well alright so
let's get into it okay so this is a
sortable list project and my main focus
on with this project is the drag and
drop api which you can find here in the
mozilla
documentation
and there's a whole bunch of drag events
that we can use such as drag start which
we'll be using
drop drag enter drag leave so we'll be
using a bunch of these in this project
and the idea is to just have a sortable
list that we can put into order and i
chose to use just the 10 richest people
i mean you could have a list of anything
top 10 of anything and the idea is to
just put it into the correct order and
we're gonna make it so that on each page
load you can see that it's in uh just a
scrambled order okay so we're gonna
scramble the list and then we can go
ahead and take one
and we can move it to another spot
you'll see we have a little highlight
when we're when we're hovered over a
certain item and i can drop it there and
it's going to switch spots with wherever
i drop it
so this button down here is to check the
order
now i know jeff bezos is number one so
i'm going to go ahead and put him there
and i know bill gates is number two so
i'm going to put him there and then we
can go ahead and check the order and
whatever is correct is going to be
highlighted in green whatever is wrong
will be in red okay i know warren
buffett is number three so we'll go
ahead and move him there and check the
order again and you can see that that's
correct
all right so like i said the main focus
here is drag and drop but we're going to
look at some other other uh helpful
methods as well and a lot of dom
manipulation and stuff like that okay so
hopefully you enjoy this project and
let's get started all right so we're
gonna get started on our sortable list
now this is gonna be
a little bit different than than some of
the other projects where we do
where all the html is actually in the
html file because here we're going to
generate
all of the list items through javascript
so we're going to do the html first
which is going to be really quick and
then create a function to generate
or output our list items into the dom
that's the top 10 richest people or
whatever you want to use if you want to
use something else that's fine so let's
start with the html which will be very
simple so let's just put a title here of
top
10
richest people and we want to include
our style sheets which we're going to do
i believe in the next video or the one
after that
and then we're also using font awesome
here for some icons so
i'm gonna head over to font
awesome
dot com
and in order to use font awesome you
need to just log in you can see i i have
an account and i'm logged in and then if
i go to start for free you can create a
kit which i already have one so i'm
going to say right here my traversing
media kit and just copy this script tag
and put that right in here
okay and then down in the body we're
going to have an h1 and we'll say 10
richest people
we'll put a paragraph a little a little
description so we'll say drag and drop
drag and drop the items into the into
their
corresponding spots
all right and then we're going to have a
ul and we're going to give this a class
of draggable list
and an id
of draggable list and the reason for
that is the class is going to be used
for styling the id is going to be used
to grab onto in javascript for to
manipulate the dom now we're not going
to put anything in here that's going to
be put in through the javascript
okay so under the ul let's have a button
and we're going to give this
a class of check dash btn and an id
of
check
okay and then in here let's say check
order
and i'm going to put an icon in here
we're just going to use the paper plane
icon so f a
dash
paper plane
and then finally we need to add our
script to the bottom so source is going
to be
script.js
all right and that's it for the html
so if we go ahead and look at this we
can open this with live server
we're not going to see any list items
obviously but we we have the ul here we
just need to insert it
using javascript
so let's jump into our script js
and first thing we're going to do is
just grab the dom elements that we need
so let's say draggable
list and we're going to set this to
document.getelementbyid
and we have an id of draggable list
draggable dash list
and then we also have the check
which is the button so we want the id of
check and we'll just call this
check
okay so that's all we need for now and
then we're going to have an array of the
richest people
i mean you could use something else if
you want
something that's
you know sortable and then i'm just
gonna paste these names in here and
these are in correct order so it's one
through ten
and then we need to create
an array called list items that'll
represent you know the list as we sort
it as it's scrambled and so on this is
going to be initialized as an empty
array okay so this is where we're going
to store the list items
and then underneath that we need a way
to keep track of the index of each list
item so we're going to initialize here
a variable called drag start index
okay we're just going to initialize it
with let because we're going to it'll
change later on
and then i'm going to call a function
called create list which is going to be
responsible for actually generating the
list items okay we're going to create
that function now so this is going to
create
list items
or let's say
insert
list items into dom
all right so let's say function
create list
and
what i'm going to do here is we need to
take this
these values in this richest people
array
but
we basically want to copy it or recreate
it so that we don't scramble the
original array because we need this
order so what we can do is just use the
spread operator which makes a copy of it
and say richest people
and then we want to loop through it so
i'm going to add on to here a 4 each
which is a high order array method that
just loops through
the array and inside here
we're going to have some parentheses and
we'll say for each person and we also
want the
index okay so we put in a function here
with person which represents each item
in the array which is a
string of a person and then the index
which is you know 0 1 2 and so on
so within here let's create a value
called list item
and we're gonna what we're gonna do is
create a new
list item element to insert into the dom
so we can do that by taking document dot
and then there's a method called create
item i'm sorry not create item create
element
because that's what we're doing we're
creating an html element and it's going
to be a list item
okay now we want to add an attribute to
this so i'm going to say list item
meaning that li
and then set attribute
and we need to have some sort of index
to keep track of each list item so i'm
going to add a data dash index attribute
when you create a custom attribute in
html5 you want to use a data attribute
so data dash and then this could be
whatever i'm calling it index and we're
going to set that to the actual index
okay which will be 0 through 9 in this
case
so that'll set the index attribute and
then we need the actual html so let's
say list item
dot inner html we're going to set that
to a template string with backticks
and we're going to have a span
with a class
of number
okay because we want to display the
actual number and we can do that by
taking the index
so this we're just using template string
here with a variable syntax or
expression syntax so we'll take the
index which starts at zero we don't want
to display zero we want one through 10
so we're just going to add 1 to that
all right and then we'll have a div
and let's give this a class of
draggable and in order to make this
actually draggable with html5 we need to
add
draggable equals true
so that we can actually click on it and
drag it
okay and then inside that div we're
going to have a paragraph
and i'm just going to give this a class
of person
name because that's what's going to be
displayed in here
and then we want to display
the
value of the array which is person okay
so we loop through richest people for
each one each item we're calling it
person and we're going to output it here
and then under that let's have
an icon
so this will be fas and let's do f a
dash
grip dash lines so basically something
to grab onto to drag
okay
and that should be it now
we want to take the
list items
array which we initialized above and we
want to push onto it
the
list item
okay which is that li with all this
stuff inside of it
and then we need to add it to the dom so
let's take our draggable list
which is the ul and we're going to use
the append child method which does just
that it'll append the li into the ul
okay so list item which is the li
and that's it let's save that and let's
take a look
so now you can see that each
list item is now being output we have
the index plus one so
we have one through ten we have the name
which is the actual value and then we
have this grip lines icon
all right now before we get to styling
this and making this look better in the
next video i want to have it scrambled
because right now it's just always the
same order and the point of this is to
have it scrambled so that you can take
each one and drag it to the correct
position all right so we'll do that in
the next video okay so now we have
an array of the richest people the top
10 richest people we're inserting it
into the dom as list items now i want to
scramble these so that when we come to
the page they're not in the correct
order and there's a few ways we can do
this what we're going to do is add on to
right here where we called for each
we're going to add some other high order
array methods
first thing i'm going to do
is
map so i'm going to go right here above
for each and do a map and what map does
is it will take the array and allow us
to return a new array of whatever we
want
and we need we need a way to
we need something to sort by and we want
it to be a random number that we sort by
so that it can get scrambled so what i'm
going to do here is say for each one i'm
going to just call a
we want to return
an array of objects and these objects
are going to have the value which of
course is a
and then also a sort value which is
going to be we're going to say
math.random
which will just create a random decimal
all right now to show you what this
gives us in the for each i'm just going
to do a console log of person because
that's ultimately what is getting
manipulated here okay and you can you
can chain these high order array methods
as many as you want and manipulate the
array so let's save that let's go back
and open up our console
and over here you're just going to see
object because we've what we've done is
is
transformed into an array of objects
that has a value
a value value and a sort value okay and
the value is the obviously the name and
then sort is going to be just a random
decimal that comes from that math.random
and if i reload each one of these sorts
it's going to be a different value
different number okay now what we want
to do is take this and actually sort the
array by this value right here this sort
so we can do that using the sort high
order array method which i just want to
show you real quick quick
javascript sort
if we look at the docs
so basically it sorts and out sorts the
elements of an array in place and
returns a sorted array the default sort
order is going to be ascending and it's
built upon converting the elements into
strings
okay and then it compares their
sequences now if we do this
without adding a special function i just
want to show you real quick where should
i do this
i guess i'll just do it right here
so let's say we have an array of numbers
and i'm going to delete this after i
just want to give you an example if i do
like 1
let's say 1 3
1 10.
40
um 302
and then i go down here and i do a
console log of numbers
dot sort okay just numbers.sort and we
take a look at that in our console let's
go let's see it's going to be down here
and if you look at it it's not sorted
numerically right we get 1 110 3 302 40.
and the reason for that is because like
it said in the docs it can it's these
are strings it converts it to a string
and then sorts it so
110 would be after one if these are
strings
now what we can do
is change how it's sorted by using a
compare function so right here compare
function specifies a function that
defines the sort order
and we can have two parameters a first
element for comparison and a second
element for comparison
so what we want to do and what we could
do here in this example is have a
function
and pass in the two
options for comparison
and then we could return from that a
let's say a minus b so the first one
minus the second one
and then if we look
in our console
now we have like a numeric sort 1 3 40
110 1302
so that's essentially what we want to do
with these with these random decimals
so let's get rid of this this is just
for example
and then just like i showed you up above
we're going to add
sort and we're going to use that compare
function we'll use an arrow though so
we'll say a and b
and we just want to return from this a
dot sort
and we want to do minus b dot
sort
okay which is this which is this value
here so now let's save that and let's go
back
now we're still just going to see object
over here because we're still returning
an array of objects however you can see
the order that work that we're logging
the order is different now we have
carlos bill gates so if we reload
now it's in a different order now it's
in a different order so the array is now
being sorted by this random value so the
last part of this is to
map it back into just an array of
strings of this right here these values
and that's very simple all we have to do
is add another map after the sort
and say for each one we just want to
return the value
okay because remember we have an object
that has a property of value
okay with whatever that string is
whatever the name is and now now we're
just mapping it back to that so let's
save that and go back
and now you can see we're logging each
string it's also back in the dom and
it's random okay so we'll
reload and there we go so each time we
reload it scrambles the array
so hopefully that makes sense and we'll
go ahead and just get rid of that
console log we don't need that anymore
all right so we've transformed
this
uh ordered array
so basically we copied it and then we
went ahead and changed it into an object
with a value and a sort
we did the sort by the random value and
then we turned it back into
an array of strings
but this time it's going to be scrambled
and then we loop through and do the same
thing we were doing before
okay so hopefully that makes sense in
the next video we're going to take this
and style it and make it look a little
better
all right so now we're going to do the
css because this doesn't look very good
i want to move everything to the middle
and style these list items and so on
so first thing we're going to do is grab
a font from
google
fonts.google.com we're going to grab the
lato font
so down here we'll go ahead and choose
the import
okay we'll grab that and just at least
while we do the css let's just
make this smaller so that we can see
both at the same time
so let's paste that in we'll import that
font
and
just like i do with just about
everything we're going to add a box
sizing property
of border box on everything and then the
body itself
is going to be pretty this is going to
be pretty repetitive throughout our
projects just because we're just
centering everything
so let's set
a background
i'll do a background color explicitly to
white
and i'm going to display
flex because i want to center everything
but i want it to be a column so flex
direction
column
and we're going to align items to the
center go ahead and save that you'll see
that everything gets pushed to the
center i want to make sure it's
justified to the top so we're going to
use flex start for justify content and
then just set the height of the body to
100 viewport heights
remove the margin
and we're going to
add the font family which is the later
font
okay
so that should do it for the the body
now we're going to move on to the
draggable list which is the ul that
surrounds all of this
so a class of draggable dash list
and we're going to set a border around
everything so let's say 1 pixel
solid and we're actually going to use
this color
quite a bit so let's let's actually
create a variable for it so we'll just
say on the root scope here
let's set a variable so we want to do
dash dash we'll call this border
color
and that's going to be e
3 e5 e4
okay
and while we're at it let's just add
we're going to have a
background color and these are just all
um
gray
colors you can you can make it more
stylish if you want but i'm just going
to stick to plain gray so let's do c
3 c
7 c a
okay so now we can use these variables
where needed so right here we're going
to use our border color so we'll say var
and we want our border color
and then let's see the color of the text
let's do three
what is it three four four four four f
okay actually we can probably put that
in a variable as well you don't have to
it's completely up to you
and i guess we'll call this uh text
color
and then let's change that
to our variable
text color
okay so we have our color let's add our
padding or i should say take away any
padding so set that to zero and then for
the um
for the list
style type we're going to set that to
none because we want to take the bullets
away so let's save that there we go so
that still doesn't look very good but
now we're going to style the
list items and the content within the
list items here
so let's see we'll do uh draggable list
li
and
let's set background color to white
and let's set a display flex
and set a flex value of one
all right and then
what i want to do next is add a border
after each of these list items
so except for the last one there's no
sense in having a border on the last one
so what we'll do is we'll set the
draggable list list item and we'll use
the not pseudo selector
and then in here we're going to use the
pseudo selector of last
last of type
so basically what this is saying is all
the list items except the last one and
we're going to set a border bottom
one pixel
solid and let's use our variable
of border color
and save and there we go so now we have
a border on a bottom border on all of
them except for the last one
so let's style the number basically i
want the number to be like in a big
square on the left
so that has a class of number
so let's take our draggable list and
then the span with the class of number
and let's add a background
color which is going to be i believe
yeah it's going to be our variable
of background color
which is the darker gray and then we're
going to set this to display flex
because we want the number to be in the
middle of the box
so we'll align items to the center and
we will justify content
to the center as well
i'm going to increase the font size of
the number to 28 pixels
and then make the whole area have a
height of 60 pixels and a width
of 60 pixels so just a square box
okay and then to take care of this
spacing right here i'm going to just
change the margin of the the name
remember each of these paragraph with
the name has a class of person name
so let's
say draggable
list
and then
uh person
name
and we're gonna set margin to zero top
20
and then zero zero
all
right now in here we have a class of
draggable
if we look at our javascript where these
are getting generated div with the class
of draggable surrounds the person name
and the icon
so i want to start to work with that
so let's say draggable
okay and we want the cursor to be a
pointer so that the user knows that they
can actually click and drag we're going
to set display
flex and let's go ahead and align items
center and then we're going to justify
the content to space between so that any
remaining space between flex items goes
in between the elements
and then just set the padding to 15 so
we bring it away from the sides and set
flex to one
and there we go so that looks pretty
good you can see you have a cursor so
that hints that the user can actually
click and drag it
so let's see what's next when
when we click the check order button
which we will style this in a minute
what it's going to do is is see if the
or see which
you know which item is in the correct
order if it's in the correct order it's
going to be highlighted green
if not it's going to be highlighted red
so we're actually going to have
on the list item i'm just going to grab
this
so draggable list
li
and then on the li we'll have a class of
either right or wrong
and then we want to change the color of
the person name depending on that so
let's change this to color
and if it's right then it's going to be
green so we're going to have a color
of hexadecimal 3
ae
374 which is like a very bright green
and then let's actually just we'll just
copy this
and then we'll change
this right class to wrong
and let's change the color to a red
which we're going to do ff
3838
all right now to test this out remember
these the li is being created within
javascript right here
let's create element so just to test out
the class
we could just
take our list item and we could say
class list
and we could do add
and we could add a class of write and
this will add it to all of them you can
see now they're green if we add a class
of wrong then they're all red now we're
not going to keep this here because i
mean it doesn't make sense but we will
be we be adding this later when we
actually have the event to check the
order okay so i just wanted to just
quickly show you how uh
how that looks
all right so we'll just take that line
out
and then the last thing i want to do in
terms of this is when i'm dragging over
like if i'm going over jeff bezos i want
jeff bezos's the inner
list item to be a little darker
okay change color a little bit so
that'll have a class of over
so let's add that
we'll go right here and say
draggable
list and on the li will be a class of
over
and then
on draggable is where we want to add
that is where we want to basically add
the color so let's say background
color
and we're going to set that to
ea
three times
all right and just to show you i mean we
could
add the class of over just to show you
that
it changes that color
okay
so i think yeah that's it as far as the
list items now we just want to do the
button real quick so let's go down to
the bottom here and it has a class of
check btn
and we're going to set the background
color
to the variable
of background color i should say the
custom property that's what it's
technically called
and then let's see uh why is that oh i
get a quote in there
okay so background and then let's set
the border to none
let's set the color of the text
to our variable of text color
and then let's set the font size
to 16 pixels
and then just add some padding
so 10 pixels top and bottom 20 left and
right and let's also add a cursor
pointer here as well
all right and then i'm just going to
give it a little effect
when it's active so let's say check
button
and then colon active
so when we click it i want it to just
scale down a little bit so we're going
to use the transform property and then
scale
and
1 is the default so we're going to just
do 0.98
so that way when i click it it just you
can see it scales down a little now
notice that border right there i want to
get rid of that
so we're going to add check button
focus
and set the outline
to
none
okay so now
that border's gone
so that's the css so in the next video
we're going to start to work on the drag
events because when i click and i hold
this and i start to drag we can fire off
an event when i drop it somewhere we can
fire off an event we basically want to
be able to just bring it to where we
want
okay and then we want to proceed to be
able to check the order and match it
against the original array so we'll get
into that next all right so now we're
going to get into drag and drop okay we
want to be able to grab one of these
bring it down to where we want let go
and then it'll get put in that spot and
then ultimately we want to be able to
check the order but let's handle the
drag drop events there's actually quite
a few and if we look at the
documentation here the mdn web docs
um you'll see that there's a ton of
different drag events
so we're going to be using
let's see drag start so the user starts
dragging an item so we want to put that
on the draggable class which is you know
what we're grabbing right here so we
want drag start we want
drag enter and drag leave
so basically when we enter and leave an
element also
uh what else we want drag over because
we want to have whatever whichever one
we're dragging over we want to add a
background color we want it to be a
darker gray and then of course drop
which this this has always confused me i
always put drag drop as the event but
it's just drop
and that is an item is dropped onto a
valid drop target
okay
so those are the events we need to use
now
this create list that we have here
runs automatically and you know it sorts
everything and it puts them into the
list items so right at the end while
within the create list function i'm
going to call
an add event listeners
function
and we're going to create that down here
add event listeners and that's where
we're going to do just that at our event
listeners and there's two dom elements
we need one is the draggable class so
let's say const and we'll call this
draggables and it's going to be document
dot
query selector all because there's more
than one
class of
draggable
and then we also want the draggable list
list items
so this is going to be let's call this
drag
list
item
or items
and then we want to add our event
listeners so i'm just going to loop
through
draggables so for each
draggable
and we just want one event listener on
each one so let's say draggable
dot add
event listener and this is where we want
to listen for
drag start and when that happens we're
going to call a function called drag
start
okay and make sure you have an uppercase
s here camel case
and then let's see on the
i'm just going to copy that
on the drag list items so this will be
drag
list items we're going to loop through
let's call this item
and then on item
we're going to have we're going to have
actually a couple different events here
so the first one is going to be drag
over which is going to call a function
called drag over
and then we're going to have a few more
let's do 2 3 4.
so this one here is going to be drag
drop
and that's going to be called on the
drag
i'm sorry i already almost did it again
so this is going to be just drop
that's the event
and then this event is going to be
drag enter
and that will call drag
enter
and then drag leave
drag leave
okay
so what should happen now is these
list these events should get fired off
when we
these functions should get fired off
when we hit these events so when i start
to grab this and drag it should fire off
this function now we haven't created
these functions yet so let's do that now
so let's say function
drag start
and i think for now what i'm just i'm
just going to do a console log just so
you can see what which event
is actually firing off so this is the
drag start
and let's see we'll just grab this we
have what five of these
so we have drag start
and then we have drag
enter
so that will call drag enter
and then we have
drag leave
okay and we have drag over
and we have drag drop
but the the event itself is just called
drop
all right so let's save that and now
these should fire off so let's open up
our console and i mean i know there's
not a lot of room here but i'm just
going to click on this and move it
slightly and you'll see we get drag
start and drag enter because i've
entered into this one
when we leave it we get drag leave and
you'll see the drag over just keeps
going because i'm still just hovering
over it
okay if i let go then the drag over
stops and the drag leave runs so the
reason i did the console log is just so
you can see when these fire off
okay so we basically have drag start and
then enter
leave
enter leave
and drag over just is continuously
running as i'm over the element
okay now this might get confusing if i
leave these console logs in so what i'm
going to do is just
i'll leave them but i'm gonna comment
these out
and you can pre you know check it out
yourself do it yourself so you can see
exactly when they're fired off
okay so now let's figure out what we
need to do here we have our events
getting called
our functions getting called that are
linked to our events but we want to be
able to grab one and let go and and
replace it we want some other things to
go on as well like when i hover over you
know michael bloomberg or whatever we
want that that color to change um that's
probably the easiest so let's do that
first so basically on
let's see that's not actually that's not
going to be on drag over that's going to
be on
enter yeah so when we enter
we want to add the class of over
remember we have that css class of over
and when we leave we want to remove the
class of over so on drag enter let's
just simply say
we can actually use this keyword which
pertains to the element
class
list
add
and we're going to add the class of over
which will give it a slightly darker
background all right and then i'll just
copy that and go into drag leave
and we're instead of whoops instead of
add we're going to use classlist.remove
all right so that should be pretty
simple let's grab this and there we go
so when we when we're entering it adds
the class
of over to the current element we use
the word the keyword this
which pertains to the actual element the
list item and then when we leave it
removes it and then it adds it to the
next one so we get that effect
all right so that's pretty easy
now to be able to actually move one of
these to another position
we're going to deal with this right here
this
drag start index that we initialized up
here at the top so we're going to go
into drag start
and we're going to take the drag start
index
and we're going to set it to this dot
and there's a method called closest so
we want the closest
and it does just that it will look at
the dom and we want the closest li
and then we're going to get the
attribute of the data index because
that's how we tell which item is in
which position
so data index
okay and let's make this a number
with the plus symbol here so we have the
drag start index and we can actually
take a look at that if you want
drag start
index and
open up our console let's grab this one
right here and as i
do the drag star you'll see that this
has a drag start index of two i grab
this one has an index of zero
now
since we have that set
let's go down to let's see drag drop
and from here now we want to create a
drag end index
okay so we're going to say const
drag
yeah drag end index
and we're going to set that
to this dot get attribute and we want
the data index
data index so basically we're getting
the start index and the end index and
let's put a plus sign
here as well so that that's a number
okay
uh whoops
and then what we want to do with that
is we want to swap them right we want to
swap the
the one we click and drag with the one
we drop it into
so let's have we'll have a function
called swap items
and that's going to take in the
drag
start index and the drag end index
right
and of course we want to remove the over
class so we'll just say this dot class
list
dot uh remove
over just so the the dark background
doesn't stay
and then let's create our swap items
okay so function
swap items
and basically that's going to take in a
two
it's going to take in actually the first
one is the from index which is the one
we click and drag and then the two index
which is where we drop it
all right and let's just do a
cons oops
console.log here and i just want to show
you something real quick so i'm just
going to do one two three
and if i go and i drag this
and i drop nothing happens and the
reason for th",,
",,
at is,,,
basically the drag over,,,
event is getting in the way,,,
so we what the re the only reason i have,,,
drag over here is to prevent the default,,,
action,,,
okay so what we need to do is just pass,,,
in an event parameter and simply call e,,,
dot,,,
prevent,,,
default,,,
okay so any event it'll just prevent the,,,
default behavior now if i go and i drop,,,
now you can see we get the one two three,,,
all right,,,
so let's get rid of this,,,
console log here,,,
and we actually want to swap the items,,,
so we're gonna say,,,
let's say const,,,
we'll say item,,,
one,,,
and we're gonna set item one to,,,
list,,,
items,,,
and it's we're gonna have the from index,,,
which is being passed in as a parameter,,,
and then,,,
query selector,,,
not query selector all but just query,,,
selector and then the class of draggable,,,
okay so we're grabbing that first one,,,
and then let's copy this down,,,
and this is going to all be the same we,,,
just need to change the index this one,,,
is going to be the 2 index and this is,,,
going to be item 2.,,,
okay so these will essentially give us,,,
the dom elements i can actually do a,,,
console log of item one,,,
and item two and now if i go over here,,,
and i grab the first one and i drop it,,,
here,,,
you can see,,,
the first one which is larry ellison we,,,
get the whole dom element and then the,,,
second one was bill gates that's where i,,,
dropped it so we're just right now we're,,,
just getting them,,,
um,,,
now we just we need to swap them in the,,,
dom,,,
so let's get rid of this console log,,,
and we can swap the items by taking list,,,
items,,,
and take our,,,
from,,,
index,,,
and we're going to use,,,
append child which will actually,,,
do just that it'll append a pen to child,,,
element and we're going to append item,,,
one,,,
okay and then we're going to take the,,,
two index,,,
okay and then we're gonna append item,,,
two so what this should do is swap the,,,
two,,,
so now if i take bernard arnault and i,,,
go down to,,,
let's go to bill gates and i drop,,,
no it's not working,,,
i'm sorry i did this wrong from index,,,
should be item two,,,
yeah because from index is the first one,,,
and then two would be item one,,,
all right let's try that again so grab,,,
larry page and go to bill gates and let,,,
go and now larry page is here and bill,,,
gates is up here okay so this function,,,
takes care of actually being able to,,,
swap the items on drop,,,
okay we call that right here which gets,,,
called on drop,,,
and we also remove the over class,,,
because,,,
otherwise that gray outline or gray,,,
background would stay there,,,
all right cool so now we're able to,,,
actually move,,,
our items around,,,
yep so we can move them wherever we want,,,
now the next thing we want to do in the,,,
next video is to be able to check the,,,
order because the goal here is for us to,,,
get these in the correct order of the,,,
richest people in the world the top 10,,,
richest people and of course if you,,,
don't want to use richest people you can,,,
change,,,
all you have to do really is change this,,,
to whatever you want just have it in the,,,
correct order here,,,
well yeah hopefully that makes sense it,,,
shows you all the different drag events,,,
that you can use and of course you can,,,
create other projects based off this,,,
and um,,,
you know that use drag and drop all,,,
right so like i said in the next video,,,
we'll go ahead and do this uh check,,,
order functionality all right so the,,,
last thing we want to do is to be able,,,
to check the order to see if it's,,,
correct and then,,,
basically if it's in the correct spot,,,
then it'll be green if it's not it'll be,,,
red so we have the check,,,
item right here or the check element,,,
which is the button and we just want to,,,
add an event listener to that so when we,,,
click it it fires off an event so i'm,,,
going to put that at the very bottom,,,
here let's say check dot add,,,
event listener and we're going to listen,,,
for a click,,,
and when that happens we're going to,,,
call a function called check order okay,,,
i'm just going to put that right above,,,
at event listeners,,,
so let's say function,,,
check order,,,
and let's just put we'll put a comment,,,
for swap items,,,
so we'll say swap,,,
list items,,,
that are,,,
um,,,
drag and drop,,,
and then for check order let's say,,,
check the order of,,,
list items on,,,
button click,,,
actually we don't need to say on button,,,
click because that's i mean,,,
that's not part of the function,,,
so for check order we're going to take,,,
our list items,,,
okay and,,,
just to refresh list items are,,,
right here so it starts off as an empty,,,
array and when we create our list we go,,,
through and we,,,
basically just add all the html and,,,
stuff like that add the data index and,,,
then we append it to the dom,,,
but um,,,
yeah so we're going to take list items,,,
and loop through,,,
so let's say for each,,,
list item,,,
and we want the index as well so let's,,,
put another set of parentheses since we,,,
we want two,,,
two uh parameters here so one is list,,,
item and then one is index because with,,,
for each and map and all that we can get,,,
the index as well,,,
so let's create an arrow function here,,,
and then we want to get the person name,,,
so let's say const person,,,
name,,,
and we're going to set that to our list,,,
actually i'm sorry list item,,,
so basically,,,
the single item that we're looping,,,
through on each iteration and then we,,,
want to use query selector and we want,,,
to draw whatever is in draggable,,,
okay so draggable and then we want the,,,
inner text,,,
and we're also going to just trim it so,,,
any excess,,,
white space or anything so we have the,,,
person name,,,
all right and then we're just going to,,,
check,,,
to see if,,,
the person name,,,
is not equal,,,
to,,,
richest oops,,,
which is people which is our original,,,
array,,,
and then pass in the index,,,
okay so if that's not true then it's in,,,
the wrong spot,,,
all right because we're getting the,,,
index of the list item and we're,,,
matching it to the index of,,,
this array right here which is the,,,
correct order,,,
okay so if that is not true then we want,,,
that particular item to be read so we're,,,
going to add a class to it we're going,,,
to say list item,,,
dot,,,
class list dot add,,,
and we're going to add the wrong,,,
class which will make it red else,,,
then we're going to take list,,,
item and,,,
oops,,,
class list,,,
and we want to remove wrong okay if it,,,
has the class of wrong we're going to,,,
remove that,,,
and we're going to add the class of,,,
write,,,
so we want to add,,,
right okay so we'll save that,,,
and that should do it,,,
so what i'm going to do is,,,
check out the original list right here,,,
and let's make some of them write some,,,
of them wrong so jeff bezos we're going,,,
to move him to the top let's see bill,,,
gates is second,,,
and let's put let's see larry page is,,,
last so put him last and then,,,
a bunch of the other should be wrong so,,,
let's fire this off click the button,,,
and there we go so you can see the ones,,,
that i put in the correct position are,,,
correct if i move larry page up and i,,,
click check order again,,,
that's wrong,,,
okay if i move let's see warren buffett,,,
is,,,
third,,,
check order,,,
now those are right,,,
and i mean you could do this with,,,
anything it's just a it's just a,,,
basically a little sorting game okay it,,,
doesn't have to be richest people that's,,,
just what came to mind for some reason,,,
but you could put anything,,,
anything you want and of course you,,,
could style it,,,
better if you want to get more into css,,,
but hopefully this project taught you a,,,
little bit about drag and drop that that,,,
was the main purpose of this project,,,
to show you those events,,,
but uh yeah so that should be it so,,,
hopefully you enjoyed this one and i'll,,,
see you in the next one",,,
DeO7xLXORpY,"[Music]
this video is sponsored by hostinger if
you're looking for a reliable and
affordable web host hostinger has
everything from shared hosting to vps's
to cloud hosting and more their most
popular shared plan includes 100
gigabytes of ssd storage
free email hosting an ssl certificate
git and ssh access and much more
perfect for our portfolio or small
business website you can choose to pay
monthly or you can pay up to four years
in advance
click the link in the description below
and enter the code traversie media to
get 10
off today hey what's going on guys today
we're going to look at github copilot
and i'm sure that you've seen a bunch of
videos on this
probably some click baity videos talking
about it stealing your jobs and all that
this is more of just an objective look
at it i signed up for the wait list a
little while ago
and got approved and i've been messing
with it over the past
week or so and it's something that i
think is going to be really helpful and
something that i like
i mean we talk a lot about we joke a lot
about having to go to stack overflow and
copy and paste
this is essentially like having that
right in your editor only better
um so i like it i don't think it's gonna
steal anybody's job i think it's gonna
help us do our job
um so we're gonna take a look at it but
first let's talk about
how it actually works so copilot is
built on the codex
ai system from open openai i'm sure a
lot of you have heard of
openai's gpt-3 codex is basically a
special version of gpt-3
built for programming tasks and since
we're using ai
it needs training data so it's actually
been trained on
source code from publicly available
sources including public github repos
and this may cause you to ask if the
code is just copied
i guess only 0.1 percent of the time
the suggestions that it makes contains
some snippets
that are verbatim from the actual
training set
only 0.1 percent and you can read more
how it works
on the website so it tells you gives you
some examples
and then down at the bottom here you get
some frequently asked questions
but i really want to focus on actually
using it and kind of giving you
a demonstration if you want to use it
you have to sign up for the wait list so
you can just come here and click sign up
and you know you can just add yourself
to the wait list
so let's jump into vs code and i already
have it installed
as you can see over here my extensions
right here so we have github copilot
all right and i just have an index.js
file and i want to just start off with
some
simple examples some simple functions
that do specific things
so let's start off with something really
simple let's say we want a function to
generate a random number so i might call
it ran
randomnum and you'll see that we get
this gray code that just pops in here
and this is
this is a solution that copilot is
suggesting
just based on the function name so it's
a function that takes in a minimum
maximum and returns a random number in
between that
now if i want to accept this i can
either click here on accept or i can hit
tab
which is probably what you're going to
do most of the time and it'll put that
code
in the editor okay another thing i want
to show you is if we do that again and i
hover over this
and i click on open copilot or control
enter
it'll open in the side some of these so
different solutions that you can look
over
all right so let's say we want this one
we can go ahead and click accept
now what's even cooler than that is we
can go ahead
and just put a comment in here so if we
want to do the same thing create a
function to
create a random number let's say create
function
that generates a random
and it'll even try to continue your
comment for you so
we'll just say random number we'll hit
enter
and then it'll give me the first line of
the function so if i want to accept that
i'll hit tab
i'll hit enter again it puts in the
function body
i'll accept that and we can just create
the function purely by
just a comment telling it what we want
and this is this is obviously something
pretty simple
but some people may have to go to stack
overflow to create a function like this
and that's one of the great things about
this is you can just do it right from
your editor
and you can get multiple solutions let's
say we want a function to
get yesterday's date we'll say create
function to get yesterday's date
and i'll accept that with tab and there
we go
let's say we want to create a function
to convert
fahrenheit to celsius tab there we go
so just functions like this just to do a
specific task
this is really good for and we can also
use it to generate data so let's say we
want
we'll say create array of numbers
and we'll click tab we'll accept that
i'd probably change this to const
but yes we get a an array of numbers one
through ten
let's say we want to create
uh an array of names
or we'll say an array of five names
and there we go so we get and now it
uses cons because it saw that i already
used const
now let's say we want to do some objects
we'll say
create an array of
we'll say an array of five objects
with id
name and age okay so kant's people
there's one two
3 4 5 and then it ends
okay so you can actually just specify
you know
what what these you want these objects
to look like what fields they should
have
now let's say we want to do something
with this data so i'll put a comment and
let's say
order people
by age and it gives us this function
here so just
people.sort and if we want to check that
out let's say ordered people
and
now you can see we have them ordered by
age
we could go you know further into this
and let's say
get only people
whose name starts
with jay so we have john and james
in order by age
ascending oops ascending
okay so hit tab save
and let's console.log filtered people
and clear this up and run it and now you
can see that we get
just james and john and they're ordered
by age ascending
so copilot's great for for doing this
sorted sorting filtering
all that stuff but i just want to
mention it's really important that you
understand things like filter and sort
and map and for each
these are really important high order
array methods
that you need to know when you're a
javascript developer so
one of the fallbacks i can kind of see
with this with copilot is people not
learning as much because they can just
type in
what to do and it's important that you
understand your code
all right so i'm going to clear all this
up
and we'll go ahead and clear this up and
what i want to do now is start to work
with a third-party api
so i'm going to use
jsonplaceholder.typeycode.com which is a
fake rest api
for testing and prototyping and you can
use different resources like
posts comments i'm going to use to do's
so you see if we hit this url we get a
list of 100 to do's with
user id id title and completed
all right now as far as the url i was
going to just paste it in but i decided
to just try a comment
and just say get the url
for jason placeholder
to do's and it did it so i'll hit tab
it does put slash one in here so we'll
just get rid of that
and we'll just get rid of var and use
const
okay and we don't need the comment i
just wanted to generate the
the url now another thing we're going to
have to
install node fetch since i'm not in the
browser environment i don't have access
to the fetch api so let's just
npm init dash y and then
npm install node
fetch all right so then we'll just go
ahead
and bring that in let's say const fetch
and that'll auto-complete for me and
we're going to go ahead and just have a
comment that says
create function
to get to do's okay that's it
and we'll hit tab so get to dues and
then it looks like
it's going to make a request with fetch
turn to jason and then get the data and
use slice to get the first 10. so we
could do that let's click on previous
and see what else we got so this one
will get the data
and return an object with all the fields
and the values and it knows that
this api uses an id title completed
and user id fields so i'm going to click
accept
okay so now we have a function to get to
dues and i didn't have to write any code
all i did was put this comment in
and then we could use this just to make
sure it works
by calling actually let's
console.log get to do's
and oops get to do's now this returns a
promise so we're going to do dot then
and let's say for our to do's
and i'm not going to use the
autocomplete here because all i want to
do
no pun intended is console log the to
do's
yeah console log to do's all right so
let's try it we'll run the file
and there we go so let's just map it
getting the data mapping through
and then we're console logging it and i
haven't used
the dot then syntax in a long time and
i'll show you
how we can do this with a sync await as
well but let's say we want to post a
to-do
let's get rid of this and let's put a
comment and we'll say create
a function to post
a to-do all right so we'll go through
this let's see what it gives us
okay so gives us all everything we need
as far as the
the headers the content type and then
the body
is going to be whatever is passed in
here all right good so that looks good
to me let's try it out so we want to run
post to do and it takes in
a to do object which will give a
title and it even will give me some
sample values we'll just do that
title test completed false and then
that's going to return a promise so we
want to do dot
then response
and res.json
and then dot then
oops dot then and then we get
the the data and we'll just console log
it
all right so let's try it out we'll run
the file and there we go so we get our
response back
with our our data are title and
completed and it also gives you the id
which is 201 in this case all right so
very very cool
as far as a sync of weight goes let's
get rid of this
and all i'm going to do is start to
create a function i'll call it get to
dues and you'll see it'll automatically
put async in here i'll click tab and
then
that looks good it's just going to
return the data and then if we want to
use that
remember this returns a promise so we
have in if we're using a sync away
we have to use this inside of an
asynchronous
function so what we'll do is create an
iffy a function that runs
automatically and then here we'll call
this a sync
and we'll create a function in here and
yeah we'll just use that so tab that's
just going to get the to-do's put it in
this variable and then
console log it so i'm going to save that
and let's run this and now we're able to
get all the to do's
using a sync away so this is just an
example of
using copilot with uh you know when
you're dealing with a third party api
so let's clear everything up here and
let's say that we're working with
express to create an api so we could
just take the basic parts of creating
express server and do them separately
for instance we could say you know
require
express or you could say require
anything
and that'll bring it in and then we
could say init
express okay so that will set app to
express we could say
start server and that would listen on a
port
but you can also go a little more higher
level
and just say create a basic
express server we could even add a port
we'll say on
port 5000 okay and then we're just going
to go through this so i'll tab that
and hit enter
okay so we're initializing express
setting the port
to what either the environment variable
or 5000
and since this is such a long big block
of code there's spaces as well so we'll
just
hit enter until we see a new suggestion
so that's to
include the static folder
now we have listen on the port console
log listening on
the port and that's it
so just this one comment gave me a basic
server that i can run so if i install
express
and i run node index
listening on 5000
so very very powerful stuff and then of
course if we wanted to let's say we
wanted to add
um middleware we'll say add
express body parser middleware
and there we go if we want to
create a row let's go down under here
and let's say
create index row
okay next line it's going to just send
the
index html from public but obviously you
know you would go in and change this
stuff
i think it's going to just save us a ton
of time honestly i i'm really excited
about this
and i'm sure that there's so much more
that i could do that i don't know about
i'm i'm brand new to this just like most
people
are now as far as um
as far as react goes i didn't get too
much of a chance to play with it with
react
but if we create a react component
and let's just call it to do right and
then i go up here and i want it let's
say i want to import
use state because i want to add some
state so import use state
from react and then what i thought was
really cool is if i go
where i would normally put my state so
right here
it'll automatically create a piece of
state called text now text relates to
to-do's right so if i click tab and
accept that
go on to the next line we have editing
completed so notice that they all relate
to
what it to what it to do would have now
of course it might not be exactly what
you want
you're probably going to go in and
change these but i thought it was pretty
interesting
that it chooses fields or you know state
based on
the component so for example if i were
to
create one called login all right and
then i go down here where i would put my
state
and look at that username next one
password next one error loading
logged in and it's just going to keep
guessing
um state that would relate to a login
component
all right so i don't know about you guys
but i think this is great i find it
really helpful and i think it's going to
speed up productivity
and and and it's just what it says it's
a it's a pair programmer it's a co-pilot
it's not going to take your job
so ignore the the click baity videos and
in tweets that are talking about that if
that ever happens it's not going to be
for a very very long time
there's plenty of jobs that are going to
get automated out before
programmers so um so just pay no
attention to that but
i would suggest getting on the wait list
if you're not already on it
and just start to mess with it and you
know
like i said i just started using it so
i'm sure there's there's a lot that uh
that you can do that i don't know about
but that's it guys i hope you enjoyed
this video i'm losing my voice now
but i will see you next time",,
3Xx83JAktXk,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=3Xx83JAktXk! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
QTHRWGn_sJw,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=QTHRWGn_sJw! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
PEDXYcQTwd0,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=PEDXYcQTwd0! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
3cH1BXJbfa4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=3cH1BXJbfa4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
5bxFSOA5JYo,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=5bxFSOA5JYo! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
w7ejDZ8SWv8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=w7ejDZ8SWv8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Dk6Wopar10k,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Dk6Wopar10k! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
2eebptXfEvw,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=2eebptXfEvw! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
awFRwh_LQP4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=awFRwh_LQP4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
NO7_jgzVgbc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=NO7_jgzVgbc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
3HqN-YS8eso,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=3HqN-YS8eso! This is most likely caused by:

Subtitles are disabled for this video

If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
OXE2a8dqIAI,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=OXE2a8dqIAI! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
u5cLK1UrFyQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=u5cLK1UrFyQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
p0bGHP-PXD4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=p0bGHP-PXD4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
_1xa8Bsho6A,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=_1xa8Bsho6A! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
X3F3El_yvFg,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=X3F3El_yvFg! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
HRmdj-HpJyE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=HRmdj-HpJyE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
6AI-gFM8gco,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=6AI-gFM8gco! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
XBSvp43EQhA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=XBSvp43EQhA! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
vB6rmWCmANA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=vB6rmWCmANA! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
BmKXBVdEV0g,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=BmKXBVdEV0g! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
E3NHd-PkLrQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=E3NHd-PkLrQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
SsEn0hlKDKA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=SsEn0hlKDKA! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
jj0W8tYX_q8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=jj0W8tYX_q8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
W0No1JDc6vE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=W0No1JDc6vE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
fxY1q4SCB64,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=fxY1q4SCB64! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
o7f4VIJs5F4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=o7f4VIJs5F4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
jD7FnbI76Hg,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=jD7FnbI76Hg! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
uE1m21Umn0s,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=uE1m21Umn0s! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
a6XIMIKmj9k,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=a6XIMIKmj9k! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
nu5mdN2JIwM,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=nu5mdN2JIwM! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
uKgn-To1C4Q,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=uKgn-To1C4Q! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
W--_EOzdTHk,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=W--_EOzdTHk! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
AMwQ7aY2_wg,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=AMwQ7aY2_wg! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
ALizgnSFTwQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=ALizgnSFTwQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
9FQrFah9rnc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=9FQrFah9rnc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
1_ljUv6cvVE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=1_ljUv6cvVE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
0pThnRneDjw,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=0pThnRneDjw! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
YK-GurROGIg,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=YK-GurROGIg! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
BZRLKDlSaAI,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=BZRLKDlSaAI! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
duNmhKgtcsI,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=duNmhKgtcsI! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
8y33WCVkLwc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=8y33WCVkLwc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
e1IyzVyrLSU,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=e1IyzVyrLSU! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
oaJq1mQ3dFI,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=oaJq1mQ3dFI! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
8z2qRln9tnc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=8z2qRln9tnc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
eCAj3mWFpNM,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=eCAj3mWFpNM! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
UBOj6rqRUME,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=UBOj6rqRUME! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
SydnKbGc7W8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=SydnKbGc7W8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Z57566JBaZQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Z57566JBaZQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
rQI1GWgCZew,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=rQI1GWgCZew! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
IYCa1F-OWmk,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=IYCa1F-OWmk! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
uK2RnIzrQ0M,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=uK2RnIzrQ0M! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
6H1wftPS0oo,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=6H1wftPS0oo! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
zRo2tvQpus8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=zRo2tvQpus8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
8jP4xpga6yY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=8jP4xpga6yY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
ltzlhAxJr74,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=ltzlhAxJr74! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
FMhVXOA54x8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=FMhVXOA54x8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
LdF2RcelRg0,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=LdF2RcelRg0! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
QSTnwsZj2yc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=QSTnwsZj2yc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
wWWNrANNO1k,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=wWWNrANNO1k! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
5lVQgZzLMHc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=5lVQgZzLMHc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
y9nlfqT4s9s,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=y9nlfqT4s9s! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
de5gkk_40Eo,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=de5gkk_40Eo! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
2TR_6VaVSOs,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=2TR_6VaVSOs! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
gk_6BKiy6X4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=gk_6BKiy6X4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
fFNXWinbgro,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=fFNXWinbgro! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
0d7cIfiydAc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=0d7cIfiydAc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
GieYIzvdt2U,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=GieYIzvdt2U! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
UX36flnDv-0,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=UX36flnDv-0! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Fdf5aTYRW0E,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Fdf5aTYRW0E! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
sBws8MSXN7A,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=sBws8MSXN7A! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
peiYvyhvk-w,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=peiYvyhvk-w! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
6Qmnh5C4Pmo,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=6Qmnh5C4Pmo! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
UnTQVlqmDQ0,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=UnTQVlqmDQ0! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
bOHysWYMZM0,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=bOHysWYMZM0! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
qi9VQqYcXqY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=qi9VQqYcXqY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
gKMYZi4j_YU,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=gKMYZi4j_YU! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
BQGxEn9oWxc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=BQGxEn9oWxc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
mxK8b99iJTg,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=mxK8b99iJTg! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
wIx1O5Y5EB4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=wIx1O5Y5EB4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
zT62eVxShsY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=zT62eVxShsY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
AJnhqf5IRC4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=AJnhqf5IRC4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
tcoiPHktCwQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=tcoiPHktCwQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Z-ZCH2NnPGY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Z-ZCH2NnPGY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
srwsnNhiqv8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=srwsnNhiqv8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
X-JZ-QPApUs,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=X-JZ-QPApUs! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
KoQY8f3bepk,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=KoQY8f3bepk! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
ZORXxxP49G8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=ZORXxxP49G8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
xKOPqWWmxEQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=xKOPqWWmxEQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
jiM0wqQZMWg,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=jiM0wqQZMWg! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
NDEt0KdDbhk,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=NDEt0KdDbhk! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
TWebUaPeWC0,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=TWebUaPeWC0! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
GJXXf3_dcng,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=GJXXf3_dcng! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Kyx2PsuwomE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Kyx2PsuwomE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
92J-3ajM0dI,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=92J-3ajM0dI! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
QOdnrMC9O7A,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=QOdnrMC9O7A! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
4JC8ahZneYU,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=4JC8ahZneYU! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
r-yxNNO1EI8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=r-yxNNO1EI8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
W26R3lzAQB0,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=W26R3lzAQB0! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
PBTYxXADG_k,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=PBTYxXADG_k! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
5j4FXMQBzmg,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=5j4FXMQBzmg! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
AiTdhLc8JCo,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=AiTdhLc8JCo! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
tG2U18EmIu4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=tG2U18EmIu4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
C22hQKE_32c,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=C22hQKE_32c! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
v-F3YLd6oMw,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=v-F3YLd6oMw! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
ea9KyE78qKI,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=ea9KyE78qKI! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
BxpjA9t4dJE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=BxpjA9t4dJE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
7r4xVDI2vho,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=7r4xVDI2vho! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
93p3LxR9xfM,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=93p3LxR9xfM! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
WVeE4SXIOwA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=WVeE4SXIOwA! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
3f5Q9wDePzY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=3f5Q9wDePzY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
u3rylF3y3og,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=u3rylF3y3og! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
FfchU1FS2IA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=FfchU1FS2IA! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
EildM6OMcoQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=EildM6OMcoQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
MoBYBc1dkhE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=MoBYBc1dkhE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
moBhzSC455o,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=moBhzSC455o! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
gGGPTskb7c8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=gGGPTskb7c8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
MZ6wMonyVyY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=MZ6wMonyVyY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
wHZCYi1K664,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=wHZCYi1K664! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
afoxd5b0bJo,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=afoxd5b0bJo! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
4pc6cgisbKE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=4pc6cgisbKE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
PDG-GqmUZss,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=PDG-GqmUZss! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
7nafaH9SddU,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=7nafaH9SddU! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
sYNjEzcOTOs,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=sYNjEzcOTOs! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
fnPhJHN0jTE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=fnPhJHN0jTE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
ERiwIGsaZN8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=ERiwIGsaZN8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
kJhWUBEO5aY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=kJhWUBEO5aY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
2oXpBK2iNQU,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=2oXpBK2iNQU! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
v2GKt39-LPA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=v2GKt39-LPA! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
D6esTdOLXh4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=D6esTdOLXh4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
4i2pOzcz3Zo,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=4i2pOzcz3Zo! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
zHUpx90NerM,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=zHUpx90NerM! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
DAdAerXvQUY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=DAdAerXvQUY! This is most likely caused by:

Subtitles are disabled for this video

If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
7ZO2RTMNSAY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=7ZO2RTMNSAY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
9Qzmri1WaaE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=9Qzmri1WaaE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
QT3_zT97_1g,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=QT3_zT97_1g! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Xy3GlrddZFI,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Xy3GlrddZFI! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
tUE2Nic21BA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=tUE2Nic21BA! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
M_PaFaIf6d8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=M_PaFaIf6d8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
yN5qKqLDlpM,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=yN5qKqLDlpM! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
UTxhKZuVaG8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=UTxhKZuVaG8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
PP4Tr0l08NE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=PP4Tr0l08NE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
hVdTQWASliE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=hVdTQWASliE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
qK3cgD09Qf0,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=qK3cgD09Qf0! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
ay81Q5JhkEw,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=ay81Q5JhkEw! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
e9Zxzr7sy60,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=e9Zxzr7sy60! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
qqzIA1BQ_ys,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=qqzIA1BQ_ys! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
S2KCXKAView,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=S2KCXKAView! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
XP-MRCUPZao,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=XP-MRCUPZao! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
UB1O30fR-EE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=UB1O30fR-EE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
2lprC0yYeFw,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=2lprC0yYeFw! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
G1eW3Oi6uoc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=G1eW3Oi6uoc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Ly-9VTXJlnA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Ly-9VTXJlnA! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
nqT8c5OFjEQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=nqT8c5OFjEQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
quiUytHXutM,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=quiUytHXutM! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
EU7PRmCpx-0,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=EU7PRmCpx-0! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
aZ16pkrMkZE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=aZ16pkrMkZE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
sB3acNJeNKE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=sB3acNJeNKE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
gXux8b3wcYw,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=gXux8b3wcYw! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
IYlDJ2K3MGk,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=IYlDJ2K3MGk! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
a9mUH1EWp40,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=a9mUH1EWp40! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
QEMtSUxtUDY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=QEMtSUxtUDY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
FhbP6bF21Cs,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=FhbP6bF21Cs! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
lziuNMk_8eQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=lziuNMk_8eQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
ePgnR4gHIi4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=ePgnR4gHIi4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
qS0a4nKQ6h8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=qS0a4nKQ6h8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
nU0KDn-vLT4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=nU0KDn-vLT4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
DBADrF0C2ls,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=DBADrF0C2ls! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Xm790AkFeK4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Xm790AkFeK4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
YsPqjYGauns,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=YsPqjYGauns! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
pfY9LwcsH3A,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=pfY9LwcsH3A! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
NUq0ZT54zvw,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=NUq0ZT54zvw! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
J2HLW4A40X8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=J2HLW4A40X8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
_CDKp0CJ0mw,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=_CDKp0CJ0mw! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
6tCWiexc05U,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=6tCWiexc05U! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
rZggoiISxiQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=rZggoiISxiQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Q-BpqyOT3a8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Q-BpqyOT3a8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
zrViDpWiNVE,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=zrViDpWiNVE! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
AZ8DtNIoElc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=AZ8DtNIoElc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
a-dn6k6Frq4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=a-dn6k6Frq4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
HnwsG9a5riA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=HnwsG9a5riA! This is most likely caused by:

Subtitles are disabled for this video

If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
#NAME?,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=-zW1zHqsdyc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
pPy0GQJLZUM,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=pPy0GQJLZUM! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
i_dHFvi1BJc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=i_dHFvi1BJc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Moy6QIpp7Zw,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Moy6QIpp7Zw! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
q4FWSdX55ls,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=q4FWSdX55ls! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Xry9T0GiT9g,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Xry9T0GiT9g! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
4EGwL4tXa7M,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=4EGwL4tXa7M! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
8nz9DkOM81Y,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=8nz9DkOM81Y! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
XJEHuBZQ5dU,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=XJEHuBZQ5dU! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
ycohYSx5h9w,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=ycohYSx5h9w! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
XGG-OY8pJqA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=XGG-OY8pJqA! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
RBLIm5LMrmc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=RBLIm5LMrmc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
sZ0z7B7QmjI,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=sZ0z7B7QmjI! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
OBXr6RIztCc,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=OBXr6RIztCc! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
#NAME?,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=-xQGpr0vYRk! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
LdrLyB143uM,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=LdrLyB143uM! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
ClbOj56S_QU,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=ClbOj56S_QU! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
gHPL_2IsZlI,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=gHPL_2IsZlI! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
jxW2ES52_-E,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=jxW2ES52_-E! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
vazRx1Ei8VA,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=vazRx1Ei8VA! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
AcUfdajsKg8,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=AcUfdajsKg8! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Yi3eqAjK_po,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Yi3eqAjK_po! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
owDmPTSJkrg,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=owDmPTSJkrg! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
fFY3E0PmIxM,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=fFY3E0PmIxM! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
N_Pa1f7VF0s,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=N_Pa1f7VF0s! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
akZI52ZUWbo,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=akZI52ZUWbo! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
fLOR_7upQp0,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=fLOR_7upQp0! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
GVaTiiZM59g,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=GVaTiiZM59g! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
FpSF5YpOZ18,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=FpSF5YpOZ18! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
zEnN-4xNqrI,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=zEnN-4xNqrI! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
sxIJkNAXIX4,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=sxIJkNAXIX4! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Ua8oqm_HBSY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Ua8oqm_HBSY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
pJOsUpOvEUg,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=pJOsUpOvEUg! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
A6p9qbJgIWY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=A6p9qbJgIWY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
Df7xEtX2sUY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=Df7xEtX2sUY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
o8-KBYW2lUY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=o8-KBYW2lUY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
nyTMCWqFPDo,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=nyTMCWqFPDo! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
glNvU1jIdCQ,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=glNvU1jIdCQ! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
zINXbtnTUmU,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=zINXbtnTUmU! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
w3TqoTchyyY,"Error: 
Could not retrieve a transcript for the video https://www.youtube.com/watch?v=w3TqoTchyyY! This is most likely caused by:

YouTube is blocking requests from your IP. This usually is due to one of the following reasons:
- You have done too many requests and your IP has been blocked by YouTube
- You are doing requests from an IP belonging to a cloud provider (like AWS, Google Cloud Platform, Azure, etc.). Unfortunately, most IPs from cloud providers are blocked by YouTube.

Ways to work around this are explained in the ""Working around IP bans"" section of the README (https://github.com/jdepoix/youtube-transcript-api?tab=readme-ov-file#working-around-ip-bans-requestblocked-or-ipblocked-exception).


If you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!",,
