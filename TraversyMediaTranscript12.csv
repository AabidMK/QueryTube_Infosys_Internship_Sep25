video_id,transcript
oIx7ObcfdlU,"Hey guys. So, I've been getting a lot of
questions lately about what tech stack
I'm using for my own projects. And I
figured that this would be a good topic
for a video is going over my dev to
deployment stack. There's so many
options out there. And if you're kind of
struggling to to find a combination of
technologies that works for you, then
maybe this will help you out. And I I
also want to say that just because this
is what I'm using right now doesn't mean
this is what I'll use all you know
forever. And also it doesn't mean that
it's what will work for you either. It's
just what works for me and what I build.
So let's get into it.
[Music]
All right. So I've been a developer for
about 20 years or so and a content
creator for about half of that. So, I've
experimented with hundreds of of
different technologies from programming
languages to frameworks to smaller
libraries, tools, utilities, and and
just a lot of different technologies.
Some I've loved, some I've hated. Uh
I've changed my my main stack dozens of
times throughout the years as well. And
this is just what I'm using right now.
So, for my language, I'm using
Typescript with strict mode. And I do I
I do a lot of tutorials and courses in
JavaScript. But just about any project,
personal project that I create,
especially one of any size, is going to
be using TypeScript. And to tell you the
truth, I actually hated TypeScript at
first. I didn't think it was really a
good return on investment as far as, you
know, the extra code that I had to
write. But over time, especially as
projects got bigger and and more
complex, I started to really see the
value in Typescript. And I saw that it
was catching errors before they made it
to production. The IntelliSense is
great. It's self-documenting and and
makes your code more descriptive and uh
easier to read. Also, it's just really
become the norm. I mean, if you jump
into any goodsized either front end or
or Node.js project, it's probably going
to be using TypeScript. So, for my
framework, I'm using Nex.js, of course,
with React. Um, now I'm not saying that
React is above all. It's not I'm not
saying it's the best front-end framework
out there. I basically use it because
it's what I know the the most. I do know
Vue and Angular and some others, but I
would say I'm most comfortable with
React. So that's what I choose for most
of my my personal projects. Uh I also
love just the ecosystem that includes
the meta framework that I use which is
Nex.js. Um if it's a small tool that I'm
building uh I'll use React and Vit like
I like I just created a um a JavaScript
bundle analyzer which has like two
routes and I didn't need any SEO or
anything like that. I just needed a
something with a snappy UI. So, I built
it as a spa with React and V. But for
larger applications, as long as it's not
like a back-end API project where I'd
use Express, uh, I'll use Nex.js in most
cases and create API routes or server
actions. Um, all my pages are rendered
on the server unless it needs, you know,
hooks or events and some kind of
interactivity and then it'll be a client
component. But Nex.js is is very
performant. It's popular. It's easy to
use, so that's why I use it. Now, for
styling, I use Tailwind CSS, and
occasionally I'll use Shad CN UI, which
is a a UI library with style components
that you can install and customize. Uh,
I usually just use Tailwind, though.
Outside of tutorials and courses, I
don't think I've written CSS in maybe
two years or so. Tailwind just just
takes the load off. Uh I know you end up
with a lot of classes in your HTML and
your JSX and your templates but I I
think it's a small price to pay in my
opinion. All right, so let's get to the
database. Uh I'm using Postgres
specifically from Neon database which is
a cloud hosting service and they have
sponsored me in the past but that's only
because I approached them because I love
their product. Uh I did use MongoDB for
for years but the the charges just
became ridiculous. So for production
projects, I was getting build thousands
and even for the demo app for my my
Mstack course, which was the the Pro
Shop e-commerce app, um that was racking
up $600 per month. And and that was just
a demo for people to check out. It
wasn't even like a like a real
production app. So it just it just got
too expensive. And and Neon has steady
pricing and it's much easier to work
with. uh I use their branching so if I'm
in production I don't have to mess with
the main branch and risk screwing up my
data or anything like that. Now when it
comes to OMS and and connecting and
interacting with the Postgres database I
use Prisma. Now you could use a lot of
different tools here. Uh Drizzle is
another one that I like. I really just
ended up using Prisma kind of by chance.
Um I liked it and it's easy to use. So
that's that's just what I know best now.
And um it's easy to model your data, run
migrations. It has a tool called Prisma
Studio where you can see and manage all
your data. So it does just about
everything that I need it to. Now for
deployment, it depends on the project.
For the most part, I'm using Versell
when I'm using Nex.js. Uh Versell is
they're actually the creators of Nex.js,
and they just have a lot of different
features. They have built-in continuous
deployment. So all you have to do is
push to the main branch of your GitHub
repo or GitLab and it will run the build
process and if it passes it will get
deployed. It's just ridiculously simple,
you know, and and I come from the days
of of FileZilla, FTP, and and C panel.
And it's it's crazy to see how far we've
come from dragging and dropping your
entire project into an FTP window and
waiting 45 minutes for it to upload and
not having any backup, no version
control if something goes wrong. Now,
for testing, when I do write tests,
which isn't all that often, I'll use
justest. And for any automation like
running those tests, linting or or or
building before deployment, then I'll
use GitHub actions. So that's really the
my main stack that I'm using. As far as
AI assistance, I'm using Claude Code. Uh
I was using Cursor, but I think Claude
Code to me is is the best agentic AI
tool at the moment. So I went back to
just regular VS Code with the Claude
Code extension. Now, I try not to to
vibe code very much, meaning just let
the AI run wild and and give it a few
prompts here and there. Instead, I try
to really structure my context and my
rules and and do that through multiple
files and work with the agent rather
than just dictate what I want. And what
I mean by that is I'll create multiple
project context files that explain, you
know, my coding style, the architecture
I'm looking to use, uh, what I'm trying
to build, and then I'll work
collaboratively with Claude, and I'll
write code manually, I'll test manually,
and I'll also have the AI review it for
things like redundancy and and potential
bugs or or just better patterns that I
might have missed, and so on. Now, for
back-end deployment, I'll use
render.com. And I absolutely love this
service. They make deploying web
services and APIs as easy as the front
end. So, basically, you just import your
your GitHub repo just like you would
with with Versel or or Netlefi. And this
beats setting up and and maintaining a
Digital Ocean server big time. All
right. So, now let's look at some of the
projects that I've been working on. All
right. So, I have two production
projects that I want to announce that
both use this exact stack. The first is
webutills.io.
So the idea behind this was to really
just take all the little utilities that
I use around the web such as PDF
splitters and mergers, file compression,
favicon generation, um generating fake
data, all those little utilities that I
would go to different websites for. I
wanted to put that all into one
platform. And the tools are extremely
fast because 90% of them run client
side. Uh, I added a bunch of dev tools
like diffing, flexbox and grid
generation, uh, git ignore gener uh,
creation, typescript interface creation,
and a bunch more. And everything is
free. You can use it without
registering, but you can register if you
want to add any of the tools to your
favorites for easy access. Um, it uses
next off for authentication and you can
use Google to log in or just email and
password. Uh, I created an admin area to
manage users and tools and see my
analytics and stuff like that. Now, I
did use AI pretty extensively, but like
I said, lots of context engineering,
manual code, um, tons of manual review
and testing. So, that's webutils.io.
Now, the next project that I have is
devsheets.io. And this provides cheat
sheets for common technologies. And I
worked with Claude Code to shape these
cheat sheets in a way where you really
get the meat of the technology and what
I would have wanted to to to learn and
have on these sheets. And there's a
quick reference and a detailed example
for each concept or each thing that's
talked about. So we have sheets for Git,
TypeScript, Python, Express, DOM
manipulation, even things like AI
prompting. And I'll be adding many more
to this. I plan on having, you know,
hundreds of of cheat sheets and all
different languages, too, not just
JavaScript and Python. Uh, the next one
is a SAS in the health niche, and it's
far from done, but it it also runs on
the stack. It's a symptom tracker to
track health issues and symptoms with
all kinds of analytics and giving you
correlations and AI insights. I'm using
the GPT40 mini model right now for as
far as uh AI coming up with correlations
and patterns as well as suggestions. And
I just need to be careful because I
can't be diagnosing people with diseases
or anything like that. And there will be
a premium tier with extra functionality.
I don't expect this to be done for a few
months now. I started out vibe coding
this months ago and it didn't work out.
I got all kinds of errors that were
being suppressed and then when I would
try to fix them, more things broke and
it just ended up in just a mess. And it
taught me a lesson. So, I'm glad it
happened. It taught me that you can't
just stay within the prompt and build a
large application. It just it isn't
going to work out. You need to get in
there and manually run and write code
and test. So, sometimes I may have a
project that Nex.js doesn't fit. So for
instance, I created a fake REST API tool
similar to to JSON placeholder um which
you can use for CRUD resources and and
actually persist the data. So it's at
apiocker.com
and it's open source. You can contribute
to it if you want. And for this I used
Express and some other small libraries.
And the the front end that you see here
is is just simply an HTML page in the
public folder. So it's just a Node.js
Express project. Um, and the API is is
basically what you're working with. And
there's search, there's um delay
simulation, there's all kinds of
features. There's all kinds of resources
you can access like to-dos and users and
so on. And then I also created API
probe.dev, which is another open- source
tool similar to Postman where you can
make HTTP requests and include headers,
you can create different environments
and so on. Um, both of these tools, like
I said, are open source, so feel free to
add some features and make a PR. All
right, so that's what I'm using these
days. Uh, again, if you're using
something else, don't change that if
it's working for you. But if you're
struggling with your current stack and
you want to give these these tools a
try, um, you might find it useful. All
right, guys. So, that's it. Thanks for
watching and I'll see you next time."
NaIIqJaF4hM,"All right, guys. So, what the hell's
with this package-lock.json
file that keeps showing up in your
projects? So, you're working on a node
project. You install some packages with
npm and boom, this massive file appears.
Should you commit it, delete it? What's
it even doing? So, here's the deal. When
you run npm install, npm looks at your
package.json for dependencies. But
here's the problem. If I say I want
React version carrot 18.2.0,
that could install 18.2.5. 2.5, 18.2.8,
whatever the latest patch is. So,
package lock.json locks down the exact
version that got installed and every
single dependency, every subd dependency
gets pinned to a specific version. Why
does that matter? Because when your
teammate clones your repository, when
you deploy to production, npm reads this
lock file first. Everyone gets the
identical dependency tree, and there's
no more works on my machine nonsense.
And yes, always commit your package
lock.json."
1tF-vTlJ3xg,"[Music]
Hey, what's going on guys? So, I know
that some of you were a little worried
by my last video, but as far as my
health issues go, the vestibular
migraines, the tonitis, and all that,
I've been dealing with those issues for
close to two decades now. And I'm
actually doing better and and feeling
healthier now than I have in in a long
time. Uh the reason main reason I
brought Dennis on board is because I've
been uh kind of a one-man show since I
started and it's just getting too much
to juggle on my own. You know, there's a
lot that goes on behind the scenes that
you guys don't see even for like a
1-hour crash course. And I've known
Dennis for years and I know he's
talented. So, it just seemed like a good
idea, good fit to try and grow Traversy
Media because honestly, I feel like I
myself have brought it as far as I can
on my own, which is further than I ever
imagined. You know, it still baffles me
when I look at where I was at one point
in my life um to where I am now. Anyway,
the reason that the main reason I've
been quiet lately is because I've been
working on a new course to replace my
React fronttoback course, which is like
my my beginner to intermediate level
React course. So, I just finished modern
React from the beginning. It's a 25-hour
course that focuses on both the
fundamentals of React and how to use it
in modern environments like React Router
version 7 framework mode, tanstack
query, um the mer stack. I also
introduced TypeScript in this course
which many people have been requesting
for a while and I designed this course
so that someone with no experience at
all with React can start from scratch as
long as you know JavaScript. Um but also
developers with some experience can
deepen their understanding of how React
works in different real world setups.
And I'll have a link for it in the
description with a promo for just 15
bucks both my website and on Udemy. Um,
I also spent more time going indepth on
on key concepts like the component life
cycle. We even touch on how React works
under the hood. And instead of building,
you know, random throwaway projects,
each project has a specific learning
purpose. For example, when we learn
about the use ref hook, we build a
simple timer app that uh lets you or
shows you how to use the use ref hook to
persist a timer ID across multiple
rerenders without triggering a new re
render each time. Um to learn about use
effect, we build a crypto dash app that
interacts with the coin gecko API and
shows you pricing data with filters and
sorting. Um we implement react router in
the declarative mode which is kind of
the traditional routing structure and we
implement chartjs to show the price
changes over time. In addition to using
react router in declarative mode, we use
the the new framework mode with SSR
capabilities in a portfolio website
called the friendly dev. And we start
out by using JSON server for serving our
our projects and we use markdown files
with along with react markdown for the
blog posts. But once we get the front
end up and running, we then implement
strappy which is a headless content
management system. And this makes things
more scalable, more like a real world
project. And we create a product and and
a post content type in the strappy admin
area. We also use Cloudinary as our
image hosting service. Um, we hook up a
contact form with Formspree and we also
keep the front end and backend
decoupled. We deploy strappy to
render.com and React to Versell. To show
how the context API works, we build a
shopping cart UI with a product and cart
context so that we can access the cart
from any component by using the use
context hook. And we also use JSON
server here. um to kind of mock up an
API to serve the products. We build
another classic from past React courses
called GitHub Finder which interacts
with the GitHub REST API to search and
filter users and display their data. We
also show show your recent searches and
even follow and unfollow users. And the
focus of this project is Tanstack query
which handles all the data fetching,
caching, and background updates. It's a
powerful tool that replaces things like
use effect and use state for API calls
and gives you a much better dev
experience when working with server
state. And you'll also see how to
refactor your components to make them
leaner and more maintainable. This is
something that we do throughout the
entire course. And then the final
project is a merstack app for sharing
startup ideas and side projects. And in
the front end, we focus on Tanstack
router as well as using Tanstack query
here. Um, and again, we we start out
using JSON server, but then we move on
to create our own back-end API with
Node.js Express and MongoDB. And we also
implement authentication using JSON web
tokens. But unlike past courses where I
would store a long live token in local
storage, we use a combination of a
short-lived access token just kept in
state as well as a refresh token and an
HTTP only cookie. So this this is a much
more secure way of using JSON web
tokens. And this part does get a bit
advanced, but it's kind of a bonus with
this course because it's really out of
the scope of React. I just figured some
people would like to to take it further
and learn full stack. So, that's the
gist of the course. There's some other
projects in there. Um, if you want to
learn React or just deepen your
knowledge and do some fun projects,
check the links in the description. As
far as YouTube goes, Dennis and I are
brainstorming some new content for you
guys, including, of course, the the
classic crash course format, as well as
some new stuff. So stay tuned and I'll
see you in the next"
NKiTlo_dgb8,"Hey, what's going on guys? So, I got a
cool project for you today and I'm
excited about this one. It's not so much
about the project itself, which is a
support ticket system, which I'll talk
about in a few minutes, but more so the
tools that we're going to use and how to
use them together. So, as far as the
tools, we're using Nex.js, which is an
SSR framework that uses React. We'll be
using Neon, so we'll have a a cloud
Postgres database. Prisma, which is an
OM. So, we'll use that to interact with
our database and create models and
migrations and stuff. And then I'd say
the main focus of this video is going to
be a tool called Sentry, which is an
error monitoring and tracking tool as
well as performance monitoring. So, the
reason you use something like Sentry is
because normally, you know, you have
your your website, your application,
your users are going to it, and it's
just it's just inevitable that you're
going to have bugs. you know, you're
going to have issues. Your users are
going to run into issues and they may or
may not tell you about them and it could
go days, weeks, months without you even
knowing that these problems are
happening and and turning away your
users. So, what Sentry does is it gives
you this this main dashboard, this
centralized location where you have all
all the events that happen in your
website. You know, you can log as as
many events as you want. Uh, and of
course your errors. You know, you're
going to see all your your errors that
that take priority as well as your just
custom logs. And this will allow you to
to, you know, pinpoint issues. So,
especially if you can't replicate them
yourself. Um, you can get email
notifications when your users run into
issues. And you're going to have all the
information that's available as far as
the stack trace goes, as far as your
user information. And then you also have
a screen recording of what the user was
doing, what happened uh on screen when
that error happened, which can help you,
you know, debug. So it's it's going to
help you not only find errors and know
about errors, but also debug them. Um,
and this is something that you would use
in a production project. It's something,
you know, often you'll use when you're
working for a large company. So it's
really valuable to to know how to use
this stuff. So, I'll show you how to use
that. We're going to get set up with the
Sentry Wizard and the SDK for Nex.js.
And then we're also going to be using a
or building a custom authentication
system rather than using something like
Next Off, which is great, you know, but
I wanted to do something a little lower
level for this project. So, we'll be
using a package called Jose that will
just generate JSON web tokens for us.
and uh and we'll be hooking up, you
know, the login, the the register, the
log out, managing sessions, etc. And
then as far as the the project itself,
we'll be able to, you know, log in and
create tickets. So, support tickets
where we can describe an issue. Um, and
then you'll be able to, you know,
obviously see a list of the tickets, see
the details view, you'll be able to
close the ticket, delete the ticket. So,
it's pretty simple as far as
functionality, but again, this isn't
about the project itself. It's about
learning how to use these tools so that
you can build your own projects with
them. All right, so grab a coffee, grab
a tea. I really suggest that you follow
along and let's get into
it. All right, guys. So, I'm really
excited for this project. I think you're
really going to like it. And again, I
would suggest that you follow along with
me, write the code with me, and I think
that that's just the best learning
experience you can get. So, I'm going to
just go through the phases so you have a
highle view of the tasks and how we'll
be doing this, the order of of um
functionality that we'll be creating.
So, there's four phases. The first one
is going to be setting up Sentry and our
database. Okay, we're using a Neon
Postgres database. So number one, we'll
get our next app up and going. So create
next app. Very simple. You guys know
that most of you. Uh number two, we'll
set up Sentry, which is really simple.
There's something called the Sentry
wizard that we can run with NPX, and it
gives us a sample error that we can fire
off. So we can go into the Sentry
dashboard and kind of see how it works,
see what it gives us, and then from
there, we can integrate it into all the
different functions throughout our
application. Then we're going to set up
our Neon database, which is very simple,
just a couple clicks. Uh add the
database URL to our environment
variables. And then for Prisma and Neon
adapter setup. So Prisma is the OM that
we're using. We're going to interact
with the database using that. And the
Neon adapter, we're going to use that um
to ena basically enable us to use um
Prisma and Neon together. Neon offers
serverless Postgres databases. So
there's just a couple extra steps we
need to take, especially if you're going
to deploy to Verscell. And then number
five, database ticket schema and
migration. So we're going to start off
with no authentication, no users. I just
want to get the ticketing system
working, which is, you know, submitting
the ticket and getting the tickets and
so on. And we what we do with Prisma is
we create a schema which is all the
different fields that we want like the
ticket uh the priority or the title
things like that the date. So we set up
a schema and then we run a migration
with Prisma and that will create our
database tables in our Neon database.
Okay so that's phase one. Phase two we
have some basic UI stuff and I also want
to handle creating new tickets. Okay, so
we'll set up Tailwind. Really, really
easy with version 4 uh and Nex.js. And
then we'll create the welcome screen,
which will just be a landing page with a
couple buttons to submit a ticket or
view your tickets. And then from there,
we'll create the ticket form. Okay. Um
we're going to be using Nex.js or uh
actions, so server actions, which you
can use in place of API routes from, you
know, older versions of Nex.js. So
basically our form will submit to a
server action and then from there we can
do all of our database tasks using
Prisma. All right. And we're going to be
using a hook in the form called use
action state which allows us to manage
that form state with what comes back
from the action. So it's the the most
modern way of doing this with
Nex.js. And of course we're going to
have our Sentry integration in the
ticket flow. Um, so we'll create a
custom log event function we can use
that that fires off a couple different
sentry methods. Um, we want to test it
and check the sentry reporting, look at
any playbacks, etc. So that's phase two,
just getting being able to submit new
tickets. And then phase three will be
the ticket display. So we'll have an
action once again a server action that
will fetch the tickets from the database
using Prisma. We'll have the tickets
index page which will list them all. the
details page which will list a single
ticket and then we'll have our sentry
reporting and tracking and just some UI
element styling like if it's a serious
priority we'll make it red or whatever
just little things like that uh we also
have like toast
notifications and then the final phase
phase four is users and authentication
because up to this point we can just
create tickets and see them but we want
to be able to log in right and we want
to be able to see only that user's
tickets. So, we'll start off with just
creating a simple navbar component with
a login and register link. Um, we want
to create a new user schema because
obviously when you have authentication,
you need somewhere to store your users.
Um, we'll have a custom authentication
flow with JSON web tokens. We're going
to be using a package called Jose, which
is kind of a more modern version of the
JSON web token package. We're going to
create some low-level functions like
encrypt and decrypt to deal with our
token and deal with cookies. You know,
saving our token and a cookie and HTTP
only cookie. And then highle functions
like register user, login user. These
will be called from our actual
components. And then the authorization
of course you want to have a
relationship between the tickets and
your users so that the user can only see
their own tickets and not everybody
else's. So that's kind of the the entire
flow of this project just so you can
have an idea. So let's go ahead and jump
into it and let's start to create our
next app. Okay. So we went over the kind
of the the workflow, the order that
we're going to do things. So I'm
assuming that most of you have at least
a little experience with Nex.js. If not,
that's okay. But what I would really
suggest is you at least know the basics
of React. If you don't know anything
about React, then you could watch my
React crash course or just any kind of
beginner React content just to get
familiar with state props, components,
things like that. All right, so let's
jump into it. I'm going to just open my
terminal, navigate to where I want to
create this project, and then we're
going to run npx and we want to do
create-next app at latest. And then I'm
going to call this project
quick-t. Now, as far as using
TypeScript, I'm going to use it, but if
you don't want to, you can say no.
There's not a ton of TypeScript we're
going to write, so you'll be fine if
even if you've never used it before, and
you click yes. Uh, ESLint, we'll click
yes. Tailwind, I'm going to use it. Um,
using the source directory. App router,
yes. Turboac for nextdev, I'm going to
say no. and a customize the import
alias. I'll say no to that as well. All
right, so that's going to go ahead and
install all these dependencies and just
scaffold up an Nex.js application for
us. So now that that's done, let's CD
into QuickT. And then from here, there's
a couple other um dependencies I want to
install. So Prisma, we want the Prisma
client, which is at
Prisma/Client. We're also using
React-icons. There's some other things
later, but this is all I want to install
at the moment. Um, and then I want to
once we get this the dev server up and
running, we'll start to integrate Sentry
as
well. Okay, so let's go ahead and open
this folder in Visual Studio Code or
whatever text editor you want to use.
I'm going to be using the integrated
terminal, so I'll close that up and then
open the integrated terminal. And we can
go ahead and run npm
rundev. And let's see. I want to open
that
here. So, let's go. It's going to be
localhost
3000. And we should just see the the
default Nex.js page. And we can do a
little bit of cleanup here. So, in the
source folder, we have our app folder.
And you may have chosen not to use a
source folder. That's fine. Your app
folder will just be in your root. And
from here, the page.tsx is the homepage.
And if you're new to Nex.js, it uses
filebased routing. So the app folder is
like your routing folder where the page
.tsx that's that's directly in it is
your homepage. If you wanted, let's say,
slashabout, you would create an about
folder with a page tsx in that about
folder and that would that would just
show up at slashabout and all the pages
are are react components. In fact, we're
going to wipe away this one, the page
tsx. I'm going to generate a component
with the react simple snippets extension
that I have. So, sfc enter or tab and
then it just scaffles out a component. I
like to use the arrow function syntax
with the export at the bottom, but
there's other, you know, formats as
well. And then for now, let's just do an
H1. And I'm going to give it a Tailwind
class just to show you that that works.
And we'll just say
welcome. Okay. So, you can see that the
heading, this class is working. Tailwind
just works right out of the box because
we, you know, we selected it when we
initialized the project. Okay. So, now
what I want to do is set Sentry up,
which is pretty simple. So, we're going
to go to um Sentry.io. IO. And as far as
pricing goes, absolutely free for a
single developer, one user, error
monitoring, tracing, you get uh session
replays, alerts, all kinds of stuff. So,
we're just going to sign in. You can use
Google or GitHub. I'm going to use
GitHub. All right. And then from here,
so for me, I have all these issues
because I already have a project, but
you won't see that. What you want to do
is create an a project. You can also
create a team as well. And then here you
want to select your platform. We're
going to select Nex.js. And then you can
set your alert frequency because it's
really cool. You can get emails and
alerts when you know a user runs into an
issue. Um, and it just notifies you
right away so you can get to the problem
and fix it as soon as possible. But for
me, I'm just going to choose I'll create
my own alerts later. And the project
name, I'm going to change that to
quick-t use my Traversy Media team, but
you can create a new one if you
want. And then it's going to give you
this npx sentry wizard command. So
basically, this will install all the
dependencies that we need and it will
create our config files and anything
else that Sentry needs to to, you know,
be integrated into our project. So just
copy that. I'm going to stop the server
and then just paste that in and run it.
And it has our project name and team
name as well. And then it's going to ask
some questions. So I have unttracked
files. Do you want to continue? We'll
say yes. And it's just going to validate
in the browser and then send you back to
the terminal. And we're going to just
pretty much select the defaults for the
rest of the
questions. So do you want to route
sentry requests in the browser through
your Nex.js server? We'll say yes.
enable tracing. Yes. Enable session
replay. And then it's asking if we want
to create an example page, which you
don't have to, but I'm going to just to
kind of show you how Sentry works. So,
I'll choose yes for that. It's going to
ask if you're using a CI/CD tool. So, if
you plan on deploying to to like Versell
or or GitHub, uh if you want to use
GitHub actions or whatever, we'll say
yes to that. And it's going to generate
this Sentry O token which you don't have
to copy because what happened is it
created this. Eenv
uh Sentry build plug-in file and it has
the token in there. In fact, what we can
do is just rename that to um Whoops. We
want to rename that to
env. And that will be our environment
variable file. Get rid of the comments.
Uh I also like to just add quotes
here. And now we have that O token in
there if we need it. So we'll just click
enter again and then we should be all
set. All right. Now I want to run the
server. So npm rundev. And I just want
to quickly show you before we set up our
Neon database and stuff. I want to show
you how to integrate how to how Sentry
works. Um so let's open our project back
up. And you'll notice that in your
project, if you chose to to show the
example page, you'll have this Sentry
example page folder in your app folder,
which means that that's an accessible
route. So, if I were to go to localhost
3000/entry example page, that should
load. And it has a button that says
throw sample error, but I'm not going to
click that just yet because I want to
show you that page. So, Sentry example
page page tsx and this we're going to
delete this after. So, you don't really
have to worry about this. I just want to
show you where the button clicks. So,
basically it first calls this
sentry.start span and this is if you
want to test performance of the page and
I'll show you this in the sentry
dashboard. Now, when we click it, it
runs a function and it makes a request
to slash
API/entry example API. And if we look in
our API folder, we can see that route
right here. All right. So, it makes a
request to that route. Let's take a look
at it. This is the route. And all it
does is it throws an error, just a kind
of a sample error, and passes in a
message sentry example API route error.
And then back in the page where it makes
the request, it checks to see if the
response is okay or if it's not okay.
And if it's not, then it throws an error
here. Okay. So, two errors are being
thrown. one in the back end or API and
one here in the front end. Now let's
jump over to the page. Let's click the
button that makes the request throws the
error and you can see sample error was
sent to Sentry. Now if we go over to
Sentry and go to issues make sure that
the right project is selected. So for me
quick ticket and we can see the example
front-end error and the API error. Okay,
so it tracks our errors and if we click
on the front-end error, it's going to
show you basically any information that
is possible to see. It shows the server
information, the IP address, which I
don't care if you guys see. I'm on a
VPN. Um, and then if you scroll down,
you can see what are called the
breadcrumbs, which is just kind of a
trail of what happened to get to that.
From the UI click to making the request
to the exception. Um, you have the
trace, you have the stack trace, you
have uh your HTTP information, so you'll
be able to see the the user's um device
and and operating system, things like
that, the browser they're using. So
again, just all the information that is
possible on a single request. And then
one really cool addition is this session
replay where you can see exactly what
happened in the browser prior to that
error being thrown. So in my case,
obviously I just clicked a button and
that's not very helpful in terms of
debugging. But if it was something
different like let's say a form that a
user was filling out, maybe we could see
that they missed a field or they filled
out something wrong or in the wrong
order. So anything any mistake in the UI
we would be able to see here, which is
is really cool. And then if we go back
to issues, you also have the API route
error. Um, there's no replay for this
because it's it's an API error. It's a
backend error. But we do have the
breadcrumbs. We have the stack trace,
HTTP info, and so on. All right. And
then if we go to traces, remember that
start span. So this will show you any
spans that were created and shows you
the performance. So you can see the page
loads, um, you know, the performance of
that page. So, and I I don't use this
too much, so I don't know too much about
it, but um but you can just test
performance of different routes and see
if you need to, you know, make any
adjustments. Okay, so that's kind of the
gist of Sentry. And of course, you can
make all types of logs and stuff. We'll
be doing that throughout our project so
you can see how it works. Okay, if we go
back to issues, you can, you know,
change the the priority to low, medium,
high. We can let's say that these are
resolved. We can just mark resolved and
then they'll go away. But it's just nice
to have one place where all of your
issues, all of your logs, warnings,
errors, everything is shown here. All
right. So, back to our project. We can
now
delete both of those pages. So, the
Sentry example page, we can delete that.
Sentry example API folder, we can delete
that as well.
and we'll just go back to uh yeah back
to the homepage here. Okay, so now we
want to set up our database which is
very very simple using Neon. So let's
jump over to neon.te and we're going to
log in. You can log in with GitHub or
Google and it's literally just like a a
couple fields. So new project, add a
project name. I'm going to call it quick
dash ticket database name let's say
quick dash ticket db going to keep AWS
as my provider create and now we have a
cloud database now to connect to it we
can click connect and then it gives us
this string where we want to say show
password and then copy the snippet and
we want to put that in thev file that we
already created. So here, let's say
database URL. And I'm going to set that
to that database string. Okay. And
Prisma when we set that up is going to
use this database string. And we'll be
able to run migrations, create some
schemas, and it'll create our database
tables. Okay. And you can see your
tables here, which right now, obviously,
we don't have any, but we will after we
run our migration.
Now to initialize
Prisma, let's uh let's go ahead and I'm
just going to open up a new
tab and I'm going to run Prisma or sorry
npx because we don't have Prisma
installed globally. So npx Prisma
init. All right. And what that does is
it creates a Prisma folder with a
schema.prisma Prisma file and it has our
client generator, our data source which
in our case is Postgres and this is
where it uses that database URL that we
just created. Now I would suggest that
you install the Prisma VS code extension
if you are using VS Code. So this right
here because this will give you you know
syntax highlighting, linting, code
completion. So definitely you know get
that installed and then let's open up
our schema file and from here we can
create what are called models and any
resource in your project like users
tickets in our case uh blog posts
products anything like that you're going
to create a model here and then run the
migration which will then create the
table. So there's no there's no logging
in in to your database and writing raw
SQL queries or anything like that. This
makes it really easy. So let's create a
model called
ticket. And in our ticket model, we want
to have uh an ID and the type for that
will be int. So these are Prisma
specific types. And then we can add
special options. In this case, I'm going
to use at id, which defines a custom
primary key. Okay, so in our database,
this will be uh you know a variable
character and it'll be marked as a
primary key. And then we can add
defaults. So at default and then I want
to add an auto increment parenthesis. So
that will mark it as auto increment. So
that when we create our first ticket,
it'll have an ID of one. Next will be
two and so on. Okay. After ID, let's do
a subject, which will be a
string. And then let's do description,
which will also be a
string. Then we'll do a
priority that will also be a string. And
then we're going to have a status.
Status will be a string. And I want to
give this a default.
So the default for status is going to be
a string of
open and then we want created at that
type is going to be a date
time. And let's do a
default for that which is going to be
now with parenthesis. So that'll just be
the current date and time. And then
we'll do an updated at and that will be
a date time. And we can do at updated at
which will just add whatever the current
date and time is for for that
update. So later on we'll have a user
model as well when we implement
authentication. But for now I just want
to be able to create and read tickets
through our project. So uh yeah we can
close this up. And there's two things we
have to do whenever we edit that file.
Whether we create a new model or we edit
fields in a current one, we have to run
the migration and we have to generate
the client. So let's come down to the
terminal and let's do our migration with
npx prisma. So whenever we run a prisma
command, we're going to do npx unless
it's you know installed globally. And
then we want to run migrate
dev-name and I'm going to call it init
since it's our first one.
And what this is going to do is is look
at that file. It's going to look at our
ticket model and it's going to create a
table in our database based on
that. So now it says your database is
now in sync with your schema which is
good. So now let's go to Neon and I'm
going to reload the
tables and you'll see a migrations table
as well because whenever you create a
migration it puts it in here. But we can
see ticket with an ID, subject,
description. So all the fields that we
put in our model. So it's as easy as
that to create tables. Now the second
thing we have to do is run npx prisma
generate. So that will generate the
client. So then when we, you know, we're
in our code and we use the client, we
can now work with
tickets. Now one other thing that we
need to do is in the package.json, JSON,
we want to add a post install script
because when you deploy this, whether
it's to Verscell or wherever, you want
to generate the client on the server. So
the way you do that is add a post
install script and from here just simply
add Prisma generate so that that runs
when you
install or when you
deploy. Okay. So yeah, so we should be
good as far as the database goes. Now in
this tab, so here I have my my npm
rundev. In this one, I want to run
Prisma Studio, which is going to be
NPX Prisma Studio. And this is a really
cool tool that will show you all your
all your tables, all your data. You can
see I have my ticket table, ID, subject.
So obviously I have no tickets, but if I
did, they would show here. So I'm going
to keep this open so that we can always
refer to our data if we need
to. So now that we've done that, I'm
going to start working on the the actual
UI. But I just want to initialize a git
repository. So I'm going to open up a
new tab here and let's just do git
and um you also want to make sure I
believe it's by default, but make sure
your git ignore has the
env. Yeah. So it does. All right. And
then let's do get. We'll say get add
all. And I'm g say get commit.
Obviously, you can do this whenever you
want. Uh
whoops. Shoot. Didn't mean to do that.
Uh so get commit. And let's see. We'll
say
initial initial
um I
guess initial
Prisma setup.
Yeah, we'll just do
that. All right. And I'll be making
commits off camera, but like I said, you
can, you know, obviously make whatever
uh commits you want. Okay. So, now we're
going to work on the welcome page, which
is app and then
page.tsx. And for this, it's just it's
going to be a welcome page with two
buttons. One is going to be to create a
new ticket. One is going to be to to to
see your tickets. Okay. So, we're going
to bring in a couple things here. Let's
import link from
nextlink. And then for I want to use an
icon here from React icon. So, fa ticket
alt. All right. And then for the JSX,
it's just a bunch of tags and classes.
So, I'm going to paste it
in. So, for the return in
parentheses, we'll go ahead and paste
that. Um, oh, now one thing I did forget
to do is in the global CSS, I want to
change the background to
EFF 6 FF, which is a light gray. Now,
the reason this is dark is because of
this block here. And since I'm not using
any kind of dark mode, I'm going to just
get rid of that block. Okay, which will
make the background light. And I haven't
used the ticket yet. So, let's add that.
I'm going to go right above the H1. And
again, you can copy this if you want.
You can type it out or you can get it
from the the
repo. But let's add
FA ticket
alt and then just a couple classes. So
MX auto
uh what else did I want to do? We'll do
margin bottom
four. And I'm going to make it red. So
text red 600. And then we can also add a
size for the icons. I'm going to do 60.
So, that will just add a little red
icon. Now, one other thing I wanted to
do is just something really simple, but
I figured that it's just a nice add-on
is to have these buttons fade in and up
when we come to the page. So, what I'm
going to do is the wrapper that is
around the two links. I'm going to add
to that uh a new class called animate.
We'll say animate dash slide. And then
I'm also going to add a Tailwind class
of opacity zero, which is going to make
them disappear at the moment, but then
we'll fade them back in. So we're going
to do that through our global CSS
file. So let's see, we'll go down here.
We're going to create a new key frame.
So let's say key frames, and we're going
to call this slide up.
And from here I want to say at 0%. So at
the start of the animation I want the
opacity to be zero which is just you
know not there invisible. And then we're
going to add a transform and then
translate on the yaxis because we want
it to fade up. So I want it to start 20
pixels below. So we'll say 20 pixels.
All right. Which means it's going to be
pushed that the buttons will be pushed
down 20 pixels. Then on 100% which is
when the animation
ends is where we want to add opacity one
which is you know full view um no no
fading at all and then transform we want
to do translate y and then put it back
to its original position which is zero.
Okay. And then all we have to do is take
our animate dash slide class that we
added onto the wrapper and add the key
frame into the animation property. We
want to use the slide up animation. The
duration will be 0.6 seconds. We'll do
an ease in and
forwards. Okay, we don't want it to to
repeat. We just want it to do it once.
And then animation delay. I'm just going
to put a very slight delay of 0.2 2
seconds. So now when I save that, you
can see that the buttons now fade in and
up. If I reload. Okay, so it's just a
nice little addition. That's, you know,
not a lot of code at all. So that's
that. Now I want to work on the submit
ticket page. If I click that, it takes
me to the route of, as you can see here,
slashtick slashnew. Now since Nex.js JS
is filebased routing. In the app folder,
we're going to have a folder called
tickets. And then in that, we'll have a
folder called new. And then in that,
we'll have a file called
page.tsx. And let's do sfc.
Oops. Sometimes this doesn't work. Like
now, sfc tab. Okay, there we go. And
let's call this new new ticket page.
Whenever it's a page component, I always
like to end it with page just to just
preference. And just to make sure this
is working, let's just say new. And then
this
should show this. There we go. So we
just see new on the page. And we're
going to add our form
here. Now to begin with, I'm just I'm
just going to add the JSX just tags and
classes. So I'm going to paste it in. So
the return let's add some parenthesis
and then paste this in. So basically we
just have a div flexbox. Uh we have
another div which is kind of like the
the wrapper the card or whatever. Then
h1 then we have a form with with an
input for the subject. Okay. Okay. So,
it has name, subject, uh text area,
which is going to be the description,
and then a select box, which is going to
be the priority of low priority, medium,
and high, and then the submit button.
So, let's save that. And that's what the
form is going to look like. Okay. So,
now we get to the fun part, which is
submitting the form and making it work.
Now, we're going to be doing this the
most modern way in Nex.js, which is
using server actions. Okay. So server
actions are just files where obviously
they run on the server and you can
submit directly to them. Like we can
have an action attribute and submit it
directly to the action just like you
would with like PHP which is really
cool. U and we're also going to be using
a new hook called use action state. So
let's start off by creating the action
file for tickets which is going to be in
source. Create a folder in source called
actions. And then let's create a file
called
ticket.actions.ts. Okay. So any actions
that have to do with tickets, whether
it's creating one or fetching them,
whatever, we're going to put that in
here. So this is the backend for
tickets. Now, when you create a server
action, the first thing you want to do
at the very top is say use server. Okay?
So that will mark it as a server action.
And all a server action is is an
asynchronous function. So, we're going
to say async
function create
ticket. And this you could do an arrow
function if you want, but it's it's up
to you. All right. Now, this is actually
going to take in the form data. And
we'll give it a type of uppercase F form
data because when you use an action
directly, that form data is available.
So what we'll do is get let's say con
subject and set that to that form data
and then there's going to be a get
method on that and that's how we get our
data. So we want to get the data or the
input that has the name of subject.
Okay. So this whatever we put here has
to match the name. So
this so get form subject and just to
please TypeScript we'll say uh let's say
as string and then I'm going to do the
same with the other fields. So we have
the
description description and then what do
we got the priority so I'll just select
this and
this. So, priority and then just to test
it out, let's do a console log. Again,
this is not There we go. Console log of
the subject of the
description and the priority. And then
I'm going to return from this an object
that has a success boolean. In this
case, I'm just going to say
true. So, true. And then we'll do a
message and let's say
ticket created successfully. I know it
wasn't, but we'll just respond with that
because I just want to show you how this
works if you've never used actions
before. And now in the new ticket page,
let's bring in so import. Let's bring in
cr"
t to create a list. So, we
Okay. So, for the left side
that, we'll have our
subject. So, we're going to say
renders. There we go. Good. So, we see
on the left side. So, the right side
let's add some space. So, space on the
priority. Okay. If I save that, there we
that's going to go under this div, the
ticket. Okay. Now, as far as the classes
go, I'm just going to grab them because
bit. Okay. So, those are the classes.
Okay, there we
go. Good. Now, again
So, I'm going to put it right here.
priority class, which will take in
priority, which is going to be a
here. So for the switch, we want to test
high, then
uh whoops, what am I doing?
low. And if it's low, we're going to
we have our get priority class. Now, we
the span. So right here on the span, I'm
priority. So if we save that now, you
new. Create a new ticket. Uh, I'll just
go. So, yeah
together. Now, the next thing I want to
click on the view ticket, it takes me to
in. So up at the top here, let's import
found. Um, so let's say not found and
repeat ourselves. Yeah, I guess we could
to this as well, our
ID. Okay. Now, we can use that when
needed. So, let's see this
get the ID from the URL, right? So
it's one, we have to be able to get
passing in uh first of all, let's make
ID. In fact, we can test that out by
And if it's not found, so let's say if
ticket, then we're going to call not
found. Okay, so it'll just it load the
details. Again, you don't have to do
output the data. So, I'm going to copy
static, you know
like. Okay. So, pretty simple. Uh we
tickets. Okay, so that's ticket two. If
I go to ticket three, we see ticket
it in the URL. So, we want to have some
kind of navbar. Also, when we start to
implement authentication, we need a
login link, a register
the navbar. So, what we'll do is create
components folder yet, do we? No. So in
source, I'm going to create a folder
navbar. Okay. And just for now, I'm just
page. So, let's go into our app folder
file. And then from here, I'm going to
above the children line. So, right here
slash new, we still see that nav. And
to paste this in. Okay, we need to bring
link. So up at the top, let's import
when we have authentication, all of this
If we're not logged in, then log out's
in, then register and login are not
going to show. So, even on small
screens, everything will fit. If you
menu, you could do that
what this is about. Um, this is kind of
beyond that. So, I don't want to deal
authentication, which is actually what I
want to do next. So, with
to use a package called Jose, which
allows us to, you know
cookies as well. Um, because we'll have
only cookie. So, let's get started with
if if you have these comments, you can
an ID, which is going to be a
for the default, I'm not going to pass
pass in CUID, which is a what does this
auto increment for users as well, but I
And then let's add an email, which will
So references ID. Okay. Okay. So, what
ID in the user table. Now, there's a red
need to do is in the user, we now need
going to be an array. Okay, so that's
Uh, one thing I want to do is just
right now. So, I'm going to go to Prisma
these. Okay. So, if we were to go
tickets, we see no tickets
yet. All right. Now, in order for any of
this to to matter to to be, you know
updated in the database, we have to run
again. So, I'm going to stop Prisma
npx and let's say mig uh Prisma. So, npx
good. So, let's run that.
uh we can go to Prisma Studio. Oh, let's
oh, you know what? We'll check it after.
tables, there we go. So we got our
cookie. All right. Now, we need to have
token. So, that's going to go in thev
file. So, let's open that
Env secret. Now, I mean
this to whatever you want, but we can
my O secret. But, uh
be anything. Now, I just want to go over
slides. So, we're using JSON web tokens.
payload, which is your your user info or
any data, you can encrypt any data into
example, if we go to the
jwt.io website, there's an example here.
different parts. So again, the first
credentials, right? So we have a form
encrypted password of course, and we'll
matches them. Um, if it fails
pass the credentials, then it stores the
encrypt the data, and store it in a
that cookie on the client, and you send
you send it, the server verifies the
the cookie. So pretty simple, but these
obviously view your tickets, it needs to
know, show their tickets or submit a
be. All right, so let's start off with
they're not huge functions, so we should
probably just create them all now, and
I mean, you could put this in a number
going to import cookies. Now, I think I
installed the cookies package, but I
reason. I forget. Well, if if I did did
we'll get to it. But, um
that's in the thev file, I'm going to
for Jose to work with that, we need to
and then oc secret. Okay, so we're going
your browser, that's what it'll be
say export, and this is going to be
async function, and we're going to call
token. Now, this is going to take in a
to encrypt. And for now, I'm just going
So in the try, we want to create and
let's see, we want to equals await. And
new s uh sign JWT. Whoops, got that.
going to say 7D, which would be 7 days.
failed. And for the category, we're
going to say off. Okay, we're no longer
actual token. Now, we need a way to
the cookie. So, uh
we'll put some comments here, I guess.
email, we can specify that type at the
in the function body, this is where
t. And then in the catch, let's do a log
data, we can send the let's send the the
actual token, but we'll just send the
that. Okay, let's say const and let's
headers. Okay, so we got our cookie
be 7 days. So, I'm going to do 60 * 60.
24, which would be 1 day. And then we
want to time seven. So, that'll be 7
days. And then in the catch, we're going
error. All right, so that's our set o
name. Okay, so that'll delete the
cookie. And then in the catch, I'm just
cookie, the O
something up in here, we'll we'll
it. But we have that. So, we can close
UI. So, let's start off with the let's
I'm going to do the action first. So, in
the actions folder, we want to have a
actions.ts. I mean, you could call it
uh uh server action. So, userver and
import prisma. And remember, we want to
bring that in from our file. So, it's
user. All right. Now, when we have our
form, we're going to be using the the
the token when we, you know
token, the uh the ticket. When we submit
a ticket, remember
result. Okay, which is going to be again
password. Okay, that'll get us the form
is all those fields. So if not name, if
try. All right. And then after that, we
return the result, which is going to be
Um, wait a minute. I want to be in here.
put it here, but I'll just put it in
and the user email matches, now we want
password. All right. So, we'll do that.
the user is registered, I want them to
to be logged in. So, that means we're
set the cookie. So, uh let's actually
set off token. So, we'll say con token
await and then set off cookie. Okay, so
info. Okay. And then for the return, we
successful. And then in the error, let's
it again, we get the form data. We check
exists. If it does, we log it. And then
exist. If they don't exist, we go and we
with that new hash password, the name
create and sign the token, set it in the
log the event, and then we return
the the front end of this, the the
called register. And again, this is for
Nex.js. Um, but it won't be part of it.
offregister, then you could remove the
let's write this out. So, this is going
And just for now, we'll just say
on the register button, now we see our
register page. Okay. So, we're going to
Now, since we're using uh since we're
state, we need to pass in our initial
create a ticket, the response we're
quick, we just have a div. We're using
an H1. We have our form, which is uh I
have form action here, which obviously
Yeah, I think. Right. Next. No
There we go. All right. So, we want to
do an else. So, if it's not successful
dossage. In fact, let's do else
state. All right. So, we can try that
here. Oh yeah, this is a last pass
just shut that off. If I reload, then
away. So, now we'll try it out. Let's
Good. So, we're now able to register
user. So, now what I'd like to do is
right? Because I'm logged in, I
that through the O token. So, let's
So if not payload user ID, we also want
or there's no payload or I'm sorry, no
user ID in the payload, then we're going
client, the user
file. And let's see, remember that
first of all these two links, right? The
other ones. So we get the login, we get
the register, and we get the log out
tickets. We should Oh, the logout should
should go in the other one. So, this log
out form right here, let's just cut
the user out, which will consist of
removing the O cookie, which we already
return, let's say promise and it's going
of users, you probably don't. But I the
point is just to show you, you know
to be the data, which in this case is
button. And let's see, I'm going to
form. So, right here
navbar. So, we'll say import logout
to where that form just was, and we're
Okay. Now, in the logout button
component. So, let's say use
And if we're going to redirect, we need
going to be from next navigation, not
that we just created, the logout user.
redirect, let's create our use effect.
And just like with the others, we want
statessage. Okay, so if if state success
is false and there's a message, we know
registered, which also logs you in.
navbar. Okay, cool. So
right? So, we have this login page
to it, we get a 404. So let's start off
we do this the the login page, I want to
user. Okay. Now, this is going to take
state. Notice on the log out, so log
out, we didn't pass in like pre state
here, login user
category. And for data, we'll send the
that's passed in. Okay, user in the
invalid email. Actually, you know what?
password, which is just password
pass in the hashed password, which we
matches. So if it doesn't match, so if
here. Okay. So after the log event, I'm
the email exists, but the password was
and the user isn't found, you still want
who's not. So, now after we pass
error, let's log
login. All right. And yeah, I think that
register page, we can just get rid of
all this, generate a new
component. Uh yeah, login
Yep, we should see form. All right. So
did on the register page. So, why don't
register form. So, why don't we just
register, we'll change that to login.
action. So yeah, I think the rest of
brad1gmail.com. Okay, so invalid email
tickets page. Now before we move on, I
So yeah, I
mean again, you don't have to do this
stuff, but it it can be helpful just to
it. But yeah, you can mark all these
user. So if there's not a user, I'm
description, priority. Now we're also
button, I have it right now where I'm
page, right? So my tickets
not logged in, it should redirect you to
user, then we're going to use redirect
which I am right now, but if I'm not
that. Okay. So, tickets successfully
the tickets, now that user is connected.
ticket. And I'm going to log out, which
register a new user. So, John Doe and
logged in as John, but I see Brad's
ticket. So, obviously
tickets. So, we're going to do that in
the actions. So, the ticket actions and
tickets. And from here, we want to get
list. And for the for the category, you
warning. Not a warning, but
Brad. And as you probably guessed, I see
the gist of what I wanted to do, but
to make this its own component, the
ticket item, and we can also do
closed, we can fade it out
like that. Um, but there's a lot of
dirty. So, this just gives you a good
start. So, let's close off or close up
And we'll call this, let's call it
up at the top here, let's say import
class. All right. Now, this ticket item
log event here either. So, we can get
guys, so now I want to do the close
at the very bottom, we'll say this is
using the use action state. So, just
like with all of our other actions, it's
to return, so the function will return a
data.get and ticket ID, but I'm going to
number. Once we do that, we're going to
oops, let's see. So right here
the return, let's say log
event. And for that, we'll say
is a user, we now we want to get the
that we send, let's send the ticket
ID. And let's send the user ID, which we
right. So data set the step. Oh, it
our front end. So, I'm going to create a
under components, let's create a new
couple imports here. So, we're going to
state. So, that's from React. And we're
course that we just created. So, close
in a variable. Actually, we can put it
action. So, state and form action. Um
state. Um, now this close ticket button
it is going to take some props. So, we
for props, it'll have the ticket ID and
for that, it's going to be an object
ID, which is going to be a
boolean. All right. Now, let's create
down. Well, actually
closed. And then in the return, since
actual form with a button, not just a
link. So, let's create our form and add
the user can see. So, it's going to be
hover, I want to make the background a
it, we want to run the use effect and
successful, we'll show the the toast
success message. If not, we'll show the
dependencies, we just want to look at
the state. So when state changes, this
importing these action state. Oh, so I
double check, I'm going to go to Prisma
closed. Now, you can handle this how you
list out the tickets, if it's closed
the difference. So, let's say Brad's
item component, right? So ticket item
want to be able to do that. So, let's uh
handle this. Right now, we're getting
into UX stuff. So, it's really up to
you, but I'm choosing to to make this
disabled. So, we'll come down to where
gonna for the class name, same thing.
that. Okay. Now, if it is closed
this. I mean, you could still
to the page, but it's not a big deal.
the ticket is closed. Now, the last
page. If I log out, I can still go to
the page, which obviously we don't want
that. So, to fix that
to the app folder, tickets
project, whether it's an error
invalid expected string. So, I mean
went along, but if it's something that
you really get stuck with, then this can
really help. Uh, and again
happened. So, unauthorized ticket
access, viewing ticket details. I mean
did because for every user, you're
but uh but you can, you know
showed you the basics. So, yeah
admin area where, you know
sticking around, watching it
along with me, and I'll see you in the
VR3p7almo_c,"hey what's going on guys so I got a
really cool project for you today we're
going to be building a full stack AI
powered chat app called chat Ai and I'm
just going to give you a quick demo
before I explain anything so we just log
in and and you just have to put your
name and email and then we can go ahead
and say something we'll say like um
we'll say who we'll say who was the 10th
president of the
US okay so it says AI is thinking and
get back the 10th president of the US
was John Tyler now it's going to keep
the context so if I just say simply who
was the 12th it's going to know what I'm
talking about so the 12th President uh
was Zachary Taylor all right and if I
were to log out or leave the chat and
then come back with the same email my
chat will be saved all right now to
achieve this we're going to be using VJs
and pinea for State Management on the
front end and no. JS and Express on the
back end and we're using typescript on
both the front end and backend now
there's a bunch of technologies that we
need to incorporate to achieve this for
the whole artificial intelligence aspect
we're using the open AI API uh the
completions API using
gp4 and then for the whole chat aspect
we're using stream chat at getstream.io
so stream offers sdks for powerful
applications that Implement real-time
chat as well as video and audio and and
this is just one of the many ways to use
stream chat so like I said it's going to
handle the whole messaging aspect the
users the channels now even though
stream does store your chat logs and
stuff we're going to set up our own
database our postgres database with neon
so neon offers serverless postgres
databases that you can literally set up
in like 10 seconds and there's features
like branching it's extremely scalable
and we're going to set it up so that our
our project saves the users and the
chats in the neon database and then
we'll be using the drizzle orm to
interact with the database uh as well as
create schemas run migrations and so on
and then at the very end we're going to
deploy the back end is going to go to
render so render doc um and then the
front end The View application will go
to versel all right so this is just an
all-in-one Dev to deployment project I
have the repositories for both the front
end UI and the back backend API in the
description so I would suggest you
follow along with me I think that's the
best way to learn so let's jump into
it all right so I just want to quickly
go over some of the websites where you
can find the documentation for different
parts of this project so first off we
have stream chat which we'll be using
for all the chat aspects and you can
find the docs at getstream.io if you go
to Developers and we're using the chat
messaging there's also video and audio
capabilities if you want to check that
out but if we go to chat messaging
there's all these platforms that we can
choose from and we're using it on the
back end so you want to choose the the
node.js option and then from here you
have all different topics like users
tokens permissions um creating channels
and all that good stuff so that's for
stream chat and then for neon which is
our Cloud postgres database you can go
to
neon.pdf
here and then finally we have openai
which is at platform.
open.com and this is what we're using
for the whole AI aspect of it and we are
going to have to generate API keys for
open AI for neon and for stream so you
might want to just just keep these
websites open so let's go ahead and just
open up a terminal and just navigate to
wherever you want to create this project
and we're going to have two separate
folders for the back end and front end
the back end will be chat AI API and the
front end will be chat AI UI that'll be
the vue.js back end will be the node and
expr Express so I'm going to put both in
a parent folder so let's create that so
I'm going to say make directory and chat
Ai and then CD into that chat AI folder
and make another directory called chat
AI uh- API and that will be our back end
and I want to open that up in in vs code
so I'm going to say code and then chat
AI API and of course if you want to use
a a different text editor that's
absolutely fine
okay I'm going to be using my integrated
terminal so I'll go ahead and open that
up and we just want to run npm in nit of
course you need to have no JS installed
and let's go through this so package
name version that's good description
let's say this is going to be a backend
for uh we say for an AI chat application
and then s uh entry point I'm going to
call server say
server.js and then
author you can put your own name if you
want and MIT for the license so type I'm
going to be using ES module so we want
to put module instead of commonjs I mean
if you want to use commonjs you can but
um we'll be using import all right so
now that we've done that let's install
our dependencies and I just want to
quickly go over what our backend
dependencies are going to be so we have
Express of course which is our backend
web framework cores which which allows
access to resources from a different
origin that's because our front end and
back end will be on different domains
EnV allows us to use environment
variables from a EnV file stream chat is
the official JavaScript client to work
with stream chat in nodejs or in
JavaScript and then open AI is the
client to work with the open AI API
typescript we're going to be using on
both the back end and front end a little
bit more to the setup in the the back
end but it's not too bad we're going to
be using something called TSX to execute
our typescript because even though with
node.js version I think 23 um typescript
is supported but all it really does is
is strip your types it doesn't actually
compile it doesn't execute it so that's
where TSX comes in if you want to use TS
node or something else you can and then
drizzle is the OM to interact with our
postgis database and then drizzle kit is
a CLI for drizzle and we'll install the
drizzle stuff a little later but let's
install some of these dependencies now
so let's say npm install Express we want
what else cores we want
EnV um stream
chat so stream Das chat and also open AI
I think that's I think that's all I want
right now as far as regular
dependencies now for for Dev
dependencies let's say npm install D-
uppercase D and we want
typescript and I'm also going to install
TSX to execute the typescript and then
for types we'll do types SL node let's
say at types SL
Express and also types slash
cores now as far as uh as our typescript
config goes we're going to create our TS
conf fig with npx and let's say TSC D-
init and I'm going to open that up and
there's I have a configuration that I'm
going to use if you want to use the same
one you can just get it from the link in
the description the the GitHub repo but
I'm going to paste this in so it's
pretty simple we're going to I want to
use es modules and all that all the
latest features so using node next for
module and module resolution and Es next
for the Target our output directory when
we compile our typescript is going to be
slash and then our root directory where
we write our code is going to be SL
Source okay we're using strict mode or
strict type checking U and then we're
allowing importing commonjs modules
we're allowing importing of Json files
as modules and we're skipping the
Declaration files in the node modules
folder to speed up compilation so pretty
simple setup we'll go ahead and save
that file and and then we want to create
our scripts in package.json so we want a
Dev
script and of course with our Dev script
we want to compile our typescript so
we're going to use TSC so the typescript
compiler and then we're going to add--
no emit because we don't actually want
to produce JavaScript files when we run
this we're just running our Dev server
and we just want to compile our
typescript and we also need to run
TSX as well and we're going to run that
in watch mode okay so no need for like
node Monon or anything like that and
then that's going to be source and then
server. TS will be the entry point so
that's what we want to run okay and then
to build our project out to just compile
we want to run just
TSC and then the start script so to run
in production is just going to be node
and then it'll be in a disc folder and
it'll be called
server.js so that's all we need for uh
for our npm scripts all right so now
let's create a folder in the rout called
Source that's where we will write all of
our code and let's create our entry
point which is going to be
server.
TS I mean if you don't want to use
typescript that's fine we're not doing
too much as far as typescript goes so
even if you're not familiar with it you
should be all right Honestly though it's
really becoming the standard so I mean
you're going to be creating TS files and
TSX files all the time so I mean I would
suggest learning the basics of
typescript if you don't know it so let's
just create a basic Express server so we
want to import Express
from
Express and we want to
import uh let's see we want to import
cores as
well and we also want to import EnV and
then we want to call env. config
and then we'll initialize our Express
app so set that to
express okay we need have some
middleware to add so cores requires us
to add an
app.use and we're also going to do
app.use
express. Json because we want to be able
to um when we send a request we want to
be able to send Json in the body we also
want to be able to send form data so
let's also do app.use and say Express
and then URL encoded and then just pass
in an object with
extended and set that to
false all right and then we want to
create our Port variable and I'm going
to set the port in the EnV so I'll say
process. env. port or then use
5000 and then let's just uh take our app
and let's listen on that Port whoops
listen on Port and then when that
happens we'll just run a
console.log and put in some btics here
and we'll say the
server server running on and then output
that Port variable all right so let's um
let's create ourv so that's going to go
in the rout not in the source
folder and from here we'll say port and
for now I'm just going to set it to
8,000 because I want to make sure that
it's actually reading this value so down
at the bottom here at the terminal or
wherever your terminal is let's run npm
run
Dev okay so server running on 8,000 and
it'll compile any typescript we have
obviously we don't have any right now
and before we start to add our route I
just want to make my my first commit so
I'm going to open up a new terminal here
and let's run and get a
knit and then we'll create our
do get
ignore uh CU you definitely don't want
to push thatv so let's add not node
modules and Dot
EnV all right so I'll say get add
all get commit oh what's this don't care
get commit and we'll just say initial
Express setup set up our initial Express
and TS
setup all right so now what we want to
do is have make our first route and what
this is going to do is it's going to
reach out to to stream chat and it's
going to register a user with stream
okay because you can actually log into
to your stream dashboard and you can see
the users that were registered for um
what is this doing here for your for
your application
and it when I say register it's not
traditional authentication where you're
going to have a password and stuff
basically you come to the the app and
you put in your name and email and then
from there you get sent to the you know
the the form to interact with the AI so
let's start by just creating a route now
since we're using typescript we're also
going to bring in from Express we want
to bring in uh request and response
uppercase R and let's create our first
route we'll go down here let's say I'll
put a comment let's say register user
with stream
chat and it's going to be a post request
so app post and for the endpoint we'll
call this excuse me we'll say SL
register D
user and then we're going to have an
async function
here okay and then as far as what this
returns will be a
promise and we're just going to add any
to this and then it's going to take in
the request and response and we want to
set those to those types so request and
then res which will be
response and then just to test it I'll
do a res. send and we'll just say test
okay so now we have our first
endpoint now as far as how you test your
endpoints it's it's really up to you I I
like to use Postman and I have the
postman extension for vs code so if I
click on this icon right here I can make
a a new HTTP request and it just opens
up in a new tab which is nice so I'm
going to make a post request to
http and we want Local Host and I have
it running on 8,000 and we want to do
register Das
user and you'll see I get a 200 response
and I get test so we know that that that
route is working we also want to send an
a name and email so why don't we do a
little bit of validation here we'll say
if or first of all let's get the name
and email so that'll be in the request
body so let's say cons and then we'll
destructure the
name and email from
requestbody and then we'll say if not
name or not
email then we want to send back an error
so so we'll return res Dot and let's do
a status of 400 which is a user error
and then we'll attach the
Json uh let's just put an error here and
we'll
say
name name and email
are
required and then after the if I'll just
do a res.
status say 200 and Json
message
success all right so let's try that out
so if I just send as is I get the error
but if I send a name and email in the
body I can either do Json data or I can
use the form URL encoded so I'm just
going to add
name and
email and then send and I get success
all right so now we want to start to
work with stream we installed that you
should have the
stream client so if you just look in
your dependencies you should have stream
chat that's what we're going to use now
in order to create an instance we have
to we we need our API key so we're going
to have to go to the getstream.io and
just you can log in with with either
GitHub or Google so I'm already logged
in I'm going to go to my dashboard and
you don't have to pay anything or enter
any credit card info for this we want to
create a new app and this has to be
unique so I'm just going to say chat
Dash uh we'll say chat Ai and I'll just
do das Brad you could put your own name
whatever it just it has to be unique and
then just choose the locations for the
the chat and video storage and feed
storage that's closest to you and click
create app and then you'll have your
keys right here we have a key and a
secret we need both of these so I'm
going to copy the key I'm going to go
into myv and we're going to add stream
API key and set that to the key and then
we also want the stream API
secret which we can get from right here
just going to copy
that okay so I'll paste that in now that
we have that we should be able to create
an instance so let's bring in the
library so import or the client and
that's called stream chat
and then we're going to create it or
initialize it right above our row let's
say
initialize initialize the
stream stream chat or
stream client so we'll say
const we'll call this chat client and
I'm going to set that to the the stream
chat stream chat Dot and then it's get
instance and then that's going to take
in your API key and your API secret so
let's say process
Dov Dot and then stream API
key and I'm going to put a bang on the
end of this which is a nonnull assertion
so I'm basically telling typescript that
this is it's not going to be null or
undefined it's definitely there and then
we'll do the same with the secret that
gets passed in as
well okay so now we should have our chat
client initialize now we can use it in
our route and the first thing I want to
do is is create an ID because when you
create a user it needs to have a unique
ID and it's up to you on what you want
that ID to be I mean you could install a
package like uuid but what I want to do
is take the email you don't have to type
this out but let's say that the email is
Brad
gmail.com then I want the ID to be
brador gmailcom
so that way we have a unique ID but it's
also readable it's understandable all
right so let's
um let's do that so I actually want
to after we do the if here let's wrap
this in a TR
catch and I'll move this this success
I'm going to move that into the try and
then let's copy it and then in the catch
if something goes wrong then I'm going
to send a 500 error so let's change the
status to
500 and for the message we'll just say
or it's actually going to be
error so
error we'll say internal server
error all right now in the try let's
generate the ID so we want to say user
ID and we have access to the email that
they enter so we're going to use replace
and replace takes in it'll take in what
we want to replace and what we want to
replace it with so and we pass in a
regular expression I know a lot of you
guys and including myself hate regular
Expressions but this is pretty simple so
in Brackets we're going to use the uh
the carrot so basically we're saying if
not if it doesn't match whatever I type
here which is going to be a lowercase A
to Z so a low lowercase letter or an
uppercase A to Z or 0
to9 or an underscore or a dash if it's
anything other than that I want to
replace it with an underscore and I want
this I want it to be Global so I'm going
to put SLG so the second argument you
pass in is what you want to replace it
with which in our case is going to be an
underscore okay so that'll generate the
user ID in fact we can go ahead and do a
console log of user ID just to check and
then if I make a request again with this
Brad at Gmail and I send if we look down
in the console brador gmailcom
and again if you want to do something
different for IDs you
can so yeah let's get rid of the console
log and now I want to check to see if
the user exists in stream chat so let's
say check if user exists and we can do
that let's put this in user
response and this is a synchronous so we
want to do await and then chat client
and then there's a method called query
users so we want to use that and then
what we can do is pass in an object
where we want to match the ID and we set
that to an object with this money sign
EQ so we're saying if it equals the user
ID and we can do a console log of that
as
well and then just go ahead and send
and if we look down here you see it
gives us an object with a duration and
the user's array which is empty because
that the user doesn't exist that um in
my case it would be the Brad gmailcom
doesn't exist so what we can do after
that after we check if the user
exists or after we set that variable
we'll say if not user response. users.
length so we're saying if that array is
empty then we want to add new user
to
stream so we can do that with the uh
there's a few different methods we can
use I'm going to use upsert user which
will create or update a user so let's
say chat
client.
upsert we want to do it's just a single
user so upsert user and then we're going
to pass in an object I'm going to assign
the ID to the user ID which will be that
formatted email the name set that to
name and the
email and then I'm also going to add the
role of user because there's there's
different roles there's an admin user as
well in fact if we look at
the the docs here if I search for
roll permissions let's see yeah so right
here buil-in roles so user is a default
user role you have guest um you have
admin which is a role for users that can
perform administrative tasks with
elevated permissions so we just want a a
regular user now I should also mention
that this is where you you can also
generate a token so let's
see um we could
call right here create token however
we're we're using this on the server
side with an API key so we don't need to
do this but if you were using this from
you know react or view or some kind of
front end then you would want to create
a token and you'd want to save that and
then send that with your um you know the
rest of your requests so but we don't
have to do
that so yeah I just want to return now
basically just return the user ID the
name and the email so let's go right
under that if actually we already have
this we might as well just use that um
yeah we'll get rid of the message and
let's send the user
ID the name and
email and I think that should do it so
we can try it out now so I'm going to
come back here I'm going to register the
user Brad gmail.com let's click Send and
I get back a 200 I get back my that's my
user id formatted from my email my name
and the actual email now you should be
able to actually log into your dashboard
so if I go to my chat AI app here and
under chat messaging if I go to Explorer
you can see I have my chat AI Brad app
has an app ID app name if I click
users I got Brad 90 not sure where that
came from but right here is the the user
that I just created and it has all these
fields it has the ID the name language
role created at updated that if the user
banned if they're online if they're
invisible so lots of information uh and
you can delete users too in fact I'll
delete that Brad 90
user oh it's an original dashboard user
okay so I can't delete
that all right so we're able to to
register users now for the chat and
later on we're also going to implement
our neon postgres database so that it
saves users there as well and it also
saves all the chats all the logs but
before we do that let's create our chat
route chat route so that we can send a
question or or whatever it is we want to
send to the AI and use the open AI API
to respond to that so let's first of all
bring in the open AI client so up at the
top here we'll say import and it's going
to be open AI from open Ai and then we
need to
initialize open AI here as well just
like we did with stream so right here
I'll say
initialize open AI now we are going to
need an API key so why don't we do that
real quick I'm going to jump over to
platform. openai
and log
in so from here if we click on settings
go to API
Keys you should see them here um I'll
just create a new
one let's say
chat and for project I'll just use um
project one
okay so I'm going to copy that and then
I'm going to go ahead and add that to
myv so here let's say opencore
AI uh actually no let's do open AI
underscore and then API uncore key and
then set
that okay so now what we can do is
initialize here let's say
const open a excuse me open AI set that
to new uppercase o Open Ai and then pass
in our API key which is going to be
process.env
do open aore API key okay so that'll
initialize that now let's create our our
chat route so I'm going to go under the
register
user and let's say
um what should I say here let's say send
message
to Ai and this is going to be a post
request as well so app post and the
route is going to be just slash
chat and then let's say
async okay I'm going to return say
promise and
any and then we're going to pass in the
request and
res
response all right so the first thing I
want to do is get from the body there
should be a message and there should be
the user ID because when you register a
user you get the ID and then you're
going to send that along to the chat
route so let's say const and let's get
the
message and the user ID from the
request.
body and then we want to just make sure
that that exists so we'll say if
not message or
not user ID then we're going to want
to return let's say status
400 and
Json we'll say
message and
user are
required all right then we're going to
go under that if statement and let's
open up a TR
catch and in the catch we're going to
I'll just copy this response
here except we're going to change this
to a
500 and then for the
[Music]
error for the error we'll just say
internal server error
and in the try first thing we're going
to do is let's say
verify user
exists so we'll say const
user response we want to set that to a
wait on the chat client and then we're
going to use Query query
users pass in an object we want the ID
to match the user ID
okay after we do that let's check that
response we'll say if not user response
remember it has an array called users so
we're going to check that we're going to
check the
length and basically if it's an empty
array then we know the user isn't hasn't
been found it doesn't exist so let's
return res. status and four we'll do 404
because it's a not the user's not found
and then we'll we'll do
Json and let's pass in an
error and for the error we'll say user
not
[Music]
found and we'll say please register
first all
right now before we do anything else
let's just let's just check if that
works so we'll just do a simple res.
send and just say success
okay so when we make our request now to
slash
chat it should reach out to stream and
uh in the body I don't
have uh I don't have anything so I
should get this message and user are
required so let's add in the message I'm
going to say what
is the capital
of
Massachusetts and then for the user
ID for the user ID I'm going to put a
user that doesn't exist I'll just do one
two three and if I send that I get user
not found please register first now we
know that the user ID for me
brador gmailcom we know that that exists
so let's try that out and we get success
so so far so good now what we want to do
is start to work with open Ai and we're
going to use the chat completions API
which will work like chat GPT you send
it a prompt and it sends you a response
so let's go right here where I have the
res. send and delete that and let's send
the message
to open Ai and we're going to be using
the gp4
model so we'll say con
response and set that to
await open AI and it's going to be chat
dot completions Dot and then
create and then we want to pass in an
object that has the model that we want
to use which in this case is going to be
GPT you have all these different options
we're going to do
gp-4 so that's the model we want and
then we send messages which is going to
be an
array and we're going to pass in an
object here with a rle of the user
and then the content is going to be the
message all right so whatever we add in
the message which in my request is just
what's the capital of Massachusetts now
I want to show you what that gives us so
why don't we just do a console log of
the response and then as far as what we
return I'll just let's just do uh yeah
we'll just say res. send
success okay I just want to see what
what this gives us so let's come back
over here and I'm going to send the same
response with the message and the
correct user
ID we get success but let's take a look
in the in the console here and we get
this
object has an ID blah blah blah what we
care
about is this right here this a choices
array and there's an one object in there
with a message and we can't see it here
we just see object
um yeah I don't think we can see that so
why don't we log that so we got console
log
response and then it's going to be dot
choices which is an array we want the
first and only item in that array and we
want the
message okay let's send it
again and there we go so we get an
object with the role is assistant okay
so it's the the AI That's responding has
a role of assistant and then content is
what we're looking for the capital of
Massachusetts is
Boston all right so it's as easy as that
to to create a prompt and get back a
response so now obviously we want to
return that response from the endpoint
so let's come back in here we know how
to access it now right with this it's
actually
message. content that will give us the
exact you you know what we're looking
for so let's get rid of the console log
here around
this and let's put this into a variable
we'll say const
AI
message and um let's type that it's
going to be a
string and set it to that so response
choices message content now I am going
to use um optional chaining here
for for uh message
so just add a question mark there and
then we also want to use a nullish
coalescing operator because if that
happens to be null or whatever then
we're just going to make it no
response from AI that'll get rid of any
typescript errors now before we actually
send this AI message back from this
endpoint we need to create a channel
which is used for managing conversations
in fact if we go to the docs here and we
search for Channel
and then creating
channels so it shows us how to do that
we store a reference in a variable using
our client and then. channel pass in the
type which is going to be messaging okay
there's different types if we come down
here and look at type you have um live
stream messaging team gaming Commerce
messaging is is for like you know
one-on-one conversations or group chats
um that's uh typical type for things
like that and we're having a one-on-one
chat with it's just not with a user it's
with the AI so that's what we're going
to use and then once we store the
reference we can then call channel.
create and then we can actually do
channel. send message as well which will
send the message through through the
channel it'll get stored and so on so
let's um let's do that let's go right
below the AI message and let's say
actually I'm going to just put a comment
here let's say
create channel or it's actually create
or
get
channel and we're going to create the
reference with our chat
client. channel the type is going to be
messaging and we can also pass in a
unique ID which I'm going to use back
ticks and then just say chat Dash and
then the um
the user
ID so that'll be a unique identifier and
then we want to pass in an object with
the name of the channel which I'm going
to call we'll call it AI
chat and then we also need to add this
created uncore byor ID which if you were
chatting with another user then it would
be that user but since we're using an AI
we're going to call it AI
bot all right so that will will create
the reference now we need to call
channel. create like I just showed you
in the docs and then after that we can
do uh sorry this needs a
wait and then after that we can do await
channel.
send
message and pass in an object with the
text which will be the AI message so AI
message and then the user ID and make
sure you do user uncore ID that's what
the key is it's not camel case it's
underscore and then that's going to be
the AI bot that sends this message okay
now as far as what we want to respond
with let's do res. J actually we'll do
status 200. Json and
then pass
in um an object oops passing an object
with a reply and that reply will be the
AI
AI message
oops not Al message
AI okay so yeah that should do it and
then I just want to do a console log
here as well if there is an error let's
put um error
generating AI
response and then also the
error all right cool so let's try that
out I'm going to come over here and I
have I have my message I have my user id
let's go ahead and
send and we get an object with the reply
the capital of Massachusetts is Boston
and what's cool is now if we go back to
the stream
dashboard and if we go to you know chat
messaging Explorer we have the AI bot
user here and you can see under channels
we have messaging so it's that's the
type and then we have the unique
identifier which is chat D Brad Gmail
com because I set that right here right
that's the unique identifier and then we
should be able to see any messages that
are in through that channel so we have
one message here and it shows the text
which is the capital of Massachusetts is
Boston so whatever the AI sent us
back so pretty cool now what I'd like to
do is Implement our own database I mean
we do have the the you know you can see
the chats and using stuff through stream
but a lot of times you want to do more
with it so you'll want to store the chat
logs in your own database so I want to
expand this to to do that and also store
our users so you want to create uh a
postgres database through neon so I'm
going to go ahead and log in
here all right and then we're going to
go to well yeah I guess we'll create a
new project so once you log in and this
interface is is so easy to use and it's
so easy to set up a database it's
basically just a couple clicks so I do
want to create a new project I'll call
this
uh
tutorial and you can choose your postr G
version I'm going to stick with 17 your
database name I'm going to call this
chat chat Aid
DB and I'll just choose AWS and then
create and you can do a lot from this
interface I mean you can run straight
SQL queries there's branching so just
like you have branching with GitHub with
your code you have branching with your
databases so if you want to whatever add
a new feature and you don't want to
affect the main branch you can just
create a new Branch work with that once
that's all set and you know that's what
you want to use then you can merge the
branches so really cool and what we"
V0P3Opf-zUs,"hey guys so I have a pretty cool project
for you today that um that I would
suggest following along with and coding
with me but if you just want to watch it
that's fine too so we're going to create
a little application that will do TTS
it'll do text to speech and translation
to a different language now the main
focus of this is going to be serverless
functions because we're going to have
we're using the Google translate API and
you need to use an API key and that's
not something that you can put in your
client side JavaScript so what we're
going to do is use the versel CLI that
will allow us to create serverless
functions right on our you know on our
machine and we'll be able to hit a
specific endpoint and that will call the
serverless function all right then once
we get through all that we'll push to
verell and we'll have it live like it is
now as you can see here and just to give
you an example of what it does if I say
like hello world I can choose a language
so I'll just keep it at English for now
and I can choose all these different
voices and the the TTS and the voices
are using the web speech API so there's
actually a bunch of things you're going
to learn in this one little project
hello world so you can see that that
works if I wanted to say it in
Spanish right if I want to change the
voice okay so I mean it's a it's a
useful project you could use this if
you're trying to converse with someone
that you know speaks a different
language um but the actual project
itself isn't really the full you know
what I want you to get from it it's the
serverless functions because we don't
have to create a whole Express back end
or or whatever we just simply use the
versel CLI and we just create this one
file and this is where we can use our
API key and we can you know make the
request to the the Google translate API
and then in the client side JavaScript
which is in public this is where um
where we use the the web speech API okay
so yeah no framework just you know
vanilla JavaScript just dealing with the
Dom and and I think you're going to get
a lot from it so let's get
[Music]
started all right guys so we're going to
get started and you're going to learn
quite a bit in this little project
you're going to learn about the web
speech API you're going to learn about
Google Translate
you're going to learn about serverless
functions which I think is is probably
the most valuable thing that you're
going to learn in this project um we're
going to learn how to do it locally
using the versel CLI and we're also
going to push to to versel um so I just
want to show you the structure of the
the folders and files which is pretty
simple so we'll have the project folder
which you can see I have open in vs code
it's TTS translate app there's nothing
in it right now but we're going to have
a public folder with all of our our
public files like the index HTML the
script.js which is the client side
JavaScript so the event listeners and so
on style CSS for any additional styles
that you want uh you know aside from
tailwind and then an assets folder if
you want any images or icons now in
addition to public we have an API folder
and this is where your serverless
functions are going to go so any server
side logic is going to go here and we
have a translate. JS file that's where
we're going to you know hit the the
Google translate API and we need to
include our API key so that's why it's
important that this is in a serverless
function and not in the client side
JavaScript because you don't want that
key to be shown to you know users all
right so we'll have that there and then
in the root you'll just have a read me
which is optional a EnV for local
environment variables and then a get
ignore and vers sell ignore for anything
we don't want to to push all right so
that's our the the gist of our structure
so let's start off by just creating our
public folder okay so public and in that
we're going to have an
index.html it's our main interface we're
also going to have a oops we're going to
have a
style
styles.css file and we're also going to
have a
script.js which will be our frontend
JavaScript and then in addition to that
that will just have an assets folder if
you want any images or anything all
right so uh we're just going to stick to
the public stuff for now let's start off
by creating the interface so adding the
HTML so I'm going to add a boiler plate
here for the title we'll say TTS and
translation app and then I'm using um
Tailwind so I'm just going to use the
play CDN so that consists of just adding
the script tag and that's it we can use
TA in classes and then let's also add a
link to our stylesheet which I'm not
going to put anything in but again if
you want to add to it it's just good to
have it there okay now for the UI I'm
I'm going to type some stuff and paste
some stuff so on the body let's add a
few classes so I do want to have a gray
background so we'll do BG gray 100 just
very light and then I'm going to make it
a flex box where we align everything to
the center
so we want to do justify Center and item
Center and then let's do full height so
H screen and then in the body we'll add
uh a container actually before we do
that let's just put something there I'll
just put app and then for now I'm going
to open it with the live server
extension for vs code so I'll click go
live you can also just you know double
click on index HTML and open it on your
file system but ultimately we're going
to be using the versel CLI which will
run our project on Local Host 3000 and
when we use the versel CLI we can have
serverless functions on our local
machine and run them all right but for
now I'm just using uh live live server
so let's get rid of app and let's create
a little container here so we'll do BG
white let's do
shadow um Shadow
medium we'll do rounded Das large um
padding we'll do six and let's put a Max
width of medium and width Dash full so
it'll be really narrow layout and then
in that in that card or container
whatever you want to call it we'll have
an H1 let's do a size of text- 2XL let's
do font D
semibold and we'll do text- gray 800 for
the color and we want to center
it oops text Center
and then we also want to add a margin
bottom of four and then in the H1 we'll
say TTS and translation save that and
that's what we got so far so I'm going
to just paste in the the the different
inputs so first we have the text area
which I'm going to put right under the
H1 okay so we have just a text area with
some classes border and all that stuff
resize To None has a placeholder and
then the next thing is going to be the
voice selection because with the web
speech API which is what we're using for
the TTS you can select different voices
and different accents or locals so under
the text area I'm going to paste this in
it's a div with a label that says select
voice and then a select tag with an ID
of voice select because we're going to
bring it into the JavaScript and these
options here aren't going to show
ultimately um ultimately we're going to
get the voice from the web speech API
and fill those in here all right and
then the last thing we need for now is
just the button so I'm going to go under
that div that wraps the select and paste
in a button okay and this button has an
ID of play button and then a bunch of
classes that makes it look like that
okay and then the last thing we want to
do for now is just add a script and the
source is going to be the front-end
JavaScript script uh script Js and yeah
that should do it for now so now we're
going to jump into the
script.js and this is where we're going
to be using the web speech API all right
so we're going to use over here you'll
see under
interfaces um we're going to use the
speech synthesis utterance class or
interface and this represents a speech
request and that's what we want to do we
want to take the text that's typed into
the text input and we want to make a
speech request with that all right and
then we we can speak it with the speak
method so if I do a search for speak and
let's see so right here speech synthesis
speak so we're basically going to be
doing this we create a new instance of
an utterance and then we pass that
utterance into the speak method so let's
jump back
over to our script and we're going to
first bring in the things we need so
let's say const and we'll bring in the
voice select which is that select box
box so document oops forgot the equal
sign so document Dot and I'm going to
use Query selector and that has an ID of
voice
select okay and then we'll just copy
that down a few times next thing we're
going to need is the play button so that
has an ID of play button and we'll call
the
variable play button as well and then we
have the text we'll call this text input
and we're going to select that just by
the text tag of text
area all right so those are the three
things we need at the moment now I want
to um play the the TTS so let's say play
TTS and we'll do that by taking the play
button and let's add an event listener
onto that we want to listen for a click
and when that happens we'll fire off a
function and this is where we want to do
that use that web speech API so we'll
create an utterance
and set that to a new instance of
speech right here speech synthesis
utterance and that takes in what you
want it to utter or what you want it to
speak which is going to be our text
input but of course we want the value
from that text input all right then we
want to speak it so we can do that by
taking speech uh Speech synthesis and
then calling the speak method and
passing in the utterance
all right so just doing that we should
be able
to type in something like Hello World
hello world and it works okay so very
very simple next thing we want to do is
be able to have different voices so
before we can implement the The Voice
you know changing of the voice we need
to list them in this select box so
basically we need to get them using uh a
method called get voices so just to show
you that real quick uh if we go
to Let's see we should have let me just
search for it
get uh get
voices yeah so right here so voices get
voices and then we're basically going to
do this Loop through the voices and
we're going to create a new Option
element for each one okay so let's do
that so I'm going to go right above the
event listener and let's say
load available voices
I'm going to initialize an array called
voices and then I'm going to have a
function
called function is going to be called
load
voices all right and then in that
function first thing we'll do is get the
voices so let's take our voices
array and set that to speech
synthesis. get
voices okay so we'll have an array of
voic now we want to Output those as
options so and that's going to go in the
voice select box so take our voice
select and let's say enter HTML set that
to voices and then we're going to add
onto that map so this will basically uh
you know turn it into an array of of
whatever we want in this case it's going
to be option values or option tags so
let's pass in our function here and
we're going to say for each voice and we
also want to get the
index and let's use back ticks here
we're going to create an option oops
that should be lowercase so option and
the
value which we're going to set that to
the um index okay so the value is the
index and let's close up
option and then for what we want to
display in the option is going to be the
voice name so here let's say voice. name
and then we'll put a space and then some
parentheses and I want the Lang or the
it's the the language like en for
English es s for Spanish and it won't
change the language this this doesn't do
that that's where the translate comes in
but it will change the accent so here
let's say voice.
Lang okay now this will give us an array
of these and that's not what we want we
want it to be outputed as a string so we
just have to add on to that do
join and just pass in just empty quotes
we haven't called this function yet
which we do want to do but we also want
to call it when the onvo is changed
event is fired off so let's say trigger
we'll say trigger loading
voices when they become available
so we can just say speech synthesis Dot
and then on voices change and then set
it to our load
voices load voices function and then
also call it initially right here with
load
voices okay now if we take a look you'll
see that it shows all the voices okay
and it might be different depending on
the platform that you're you're using um
and if I type in
hello hello it works with Samantha if I
change it to Aaron hello it you notice
it didn't change it's still using that
same voice um that's because we need to
basically change that um down here when
we call that utterance so right under
the utterance variable let's say con
selected
voice okay so we'll have a variable
selected voice set that to the voices
array and then whatever the value is so
voice select which is that that select
box we want whatever that value is then
we're setting the SE that selected voice
to then we're just going to check for
that selected voice and then we'll
change the utterance because you can set
the utterance dovo like this and you can
set it to the selected voice so now
let's try it
again hello Samantha Aaron hello so
that's different Albert
hello I don't know what's up with Albert
he doesn't sound too healthy but it's
changed
Alice and you can see that this one has
a different accent because it has a
different uh language this that's the
voice Lang all right so that takes care
of the most of the client side stuff so
the language to change the language is
going to be more tricky because we need
to uh we need to use the the translate
API which uses an API key and we can't
just put the API key in this file
because everyone would be able to see it
and you know use it so that's where the
uh the serverless function is going to
come in now before we get to that though
let's just add the language dropdown so
I'm going to go back into the HTML and
I'm going to put this language selection
drop down right above the voices so
right here okay so it's just a again a
div with mt4 got the label select and
the ID of language select okay so you
can see it here and there's nothing
showing but what we can do is create the
languages we want in our JavaScript and
then fill the form fill that with that
with the languages so let's go back to
our script JS and up at the top here
below the you know where we selected
everything let's say we want an array
of um we'll say array array of supported
languages languages with their ISO
codes so like en for English es for
Spanish Etc so const languages that's
going to be an array of objects and the
object will have the code which will be
in this case en for English and then
it'll have the name which will be the
longer version of English all right and
I'm going to just paste in the rest of
these languages and you can use
different ones but these are the ones
I'm using English Spanish French German
Italian Japanese and Chinese simplified
all right so now we want to populate
this select box with those languages so
let's say
populate um
language select box so we can do that by
taking the languages array we want to
Loop through with four each and let's
pass in our
function okay now for the I don't want
to I want to get the code and the name
so I'm just going to destructure here
and get code and name so we have access
to those for each one and then we like I
said we need to create an option for
each language so let's say document do
um create ele element oops create not
attribute create
element and the element we want to
create is an option right then we want
to fill the option value and the value
is going to be the code so n ESF FR and
then the text we want to be the long
version which is the name so let's say
option. text
content is going to be equal to the name
all right then we we just need to add it
to the Dom so we'll say language or yeah
language select which is the the select
box which I didn't I didn't add yet did
I so up here let's just bring in let's
say ID language
select and that variable language
select okay so then we want to take that
select box and we just want to append
child and we want to append the
option so now we can see it shows all
the languages that we have in this
array so now we we're to the point where
we need to create our function our
serverless function to reach out to the
translate API um but before we do that
we need to set up an API key so we're
going to have to go to the the Google
console which I believe is like console
yeah console. cloud. gooogle and from
here you're going to want to if you
don't have a project already create one
this is my tutorials project and then go
to API and
services and then you're going to want
to enable API and services and then
search for translate and it's going to
be this Cloud translation API you'll see
a button here that says enable just
click that to enable it then you have to
create a key by going to API and
services credentials go to create
credentials API key
it'll generate a key for
you okay so you just want to grab that
and then what we'll do is put that into
a new file in the root called
EnV okay and that's going to be we're
going to call this Google
uncore translate API key and then paste
that in okay make sure you use your own
I'm going to delete this after anyway so
we have that
now we're going to have uh a new folder
in the root as well called API and in
that we're going to have a file called
translate. JS and this is where our
translate uh serverless function is
going to go now to be able to use
serverless functions locally while we're
in development we need to use the versel
CLI so what you're going to do is open
up a terminal and run npm install dasg
cuz we're installing the globally and
then
versel okay that way you can just use
the versel
command all right so
now next thing we want to do is
authenticate with versel so make sure
you have an account I'm going to say
versel login and I use GitHub so I'm
going to continue with
GitHub and you can see I get this
success message in the browser so now
I'm authenticated with forell in my
terminal so the next thing we want to do
is create a project okay we're going to
make this a versel project by saying
versel and then
Dev now it's going to ask us some
questions it's going to say setup and
develop whatever you know the location
and name of the app I'm going to say yes
and then where to save your project so I
have two I have the um the free tier
which is this and then I have traversy
media which is the a paid tier so I'm
going to use my free tier which is
probably what most of you guys are going
to use link to an existing project I'm
going to say no because I haven't
created one on versel yet my project
name I'll just keep that the directory
we want that to be the home so just
enter and do you want to modify these
settings I'm going to say
no all right so what it did is now it
created this versel uh folder for our
cache it also created a dog ignore which
has that versel folder in it now in
addition to that I'm going to add node
modules and I'm going to add EnV because
I don't want those to be added um
either okay now also in versell if you
go to your
dashboard I'm going to reload this
you'll see that it's been added here TTS
translate app now there's no deployments
um we'll do that after but it does it
does initialize the project inverse L
but now what we can do is is create
serverless functions so in this
translate JS the way that we create a
serverless function is
export default and async
function function called
Handler and that's going to take in
request and response so just like as if
you were you know using Express and you
were creating a route takes in the the
HTTP request and response object and
then for now just to test it out I'm
going to say return res. status of 200
and then I'm going to add on to that
adjacent object and just say
message and set that to hello world okay
so now what I should be able to do is on
my local machine you'll see it's
actually running on Local Host 3000 so
instead of using live server right I'm
going to shut off live server and then
I'm going to go to uh
local host or whatever my loop back and
then
3000 and I'm going to have my project
here and what I can do now is go to
slash API SL
translate and it should run my
serverless function and there it is so
we just get our message of hello
world okay so and in here we can do any
server side code and it's protected from
from users from the
client now I want this to be a post
request when we call this to do the
translation I want it to be a post
request so what we're going to do is
right here let's say if the request.
method if that is not equal to
post then let's actually just move this
in here but let's make this a status of
405 and then we're going to set instead
of message I'm going to set it to error
and I'm going to say method uh method
not allowed because it has to be a post
request all right then we want to be
able to get the um the body right that
we want to be able to get the text and
the target language from the body and we
can do request. body just like you would
with you know an Express back end and
I'm just going to destructure from that
the
text um the text and Target which is the
language okay then we want to just do a
little bit of validation and say if not
text or if
not
Target then I'll just copy this response
here paste that in except this is going
to be a 40
400 error and let's just say for the
error
missing text or
language all right now we want our API
key now remember that's in the EnV file
but by default this isn't going to we're
not going to be able to access it
because we need to use the EnV package
locally so what I'm going to do is
create a new terminal here and we're
going to npm install Das uppercase D
because I'm installing it as a Dev
dependency
EnV okay so that will install it that
will now have a a node modules folder
and we want to bring that in and call
the config method that's all you have to
do in order to use you know process.env
whatever so um I'm going to I only want
that to run locally the Dov package
because when we're deployed to verell we
add our environment variables right we
go here we go to settings environment
variables and we add them here I want to
use the file so I only want to use the
ENB package locally so I'm going to do a
conditional here and say if
process process. env. nodecore EnV so
our node environment if that is not
equal to
production right so if it's not equal to
production then I want to load the EnV
package and I want to use the um the
config method now I can't just simply do
import
EnV from. EnV because your Imports have
to be the very first thing in the file
and this isn't it's within here but we
can use what's called a dynamic import
and that's going to be asynchronous so I
could either do a DOT then or I could
use an async function which is what I'm
going to do and this is an iffy so it's
going to have parentheses after it as
well all right but what we can do is
just say async and then have a function
and in that I'm going to say con. EnV
set that to a weit and then import so
this is a dynamic import so
EnV right and then I simply want to call
the config method that's on that object
so Dov do and then
config all right so we just need to add
that in order to use the um the
variables in this
file so next thing let's actually create
a variable for the API key cuz we need
to send that with um with our request so
we can now get the API key with process.
EnV Dot and then
Google
translate um API key and then let's
create a variable for the API URL this
is the Google translate endpoint that we
need to hit so that's going to be
https and then
translation. googleapis.com
slash language SL translate SL verion 2
so V2 and then we want a query string of
key and set that to our API
key all right so we have the API key we
have the URL now let's make the request
so let's do a try catch and in the try
I'm going to create a
response variable and then make the
request with await fetch p pass in our
API URL and then some options and we
want to set the method to
post so method post we want to set
headers and set the content Dash
type to application SL
Json and then we want to send the body
and the way that this API works first of
all we're going to
stringify so stringify it takes an
adjacent object with a Q which is the
query which we have as our text variable
so text then it also takes a Target
which we also call the variable Target
right so we're talking about the stuff
we're getting from the body which
ultimately comes from the form and it's
called Target so we can just simply do
that and then also a format which is
always going to be text all right so
that is the request now let's check to
see if it's not okay okay so if not
response.
okay then let's get the the error
text which we can get from
await
response. text and then what we want to
send back is going to be res. status
it's going to be whatever the response
do status is and then
Json and we'll pass in
error set that to the error error
text all right now if it's okay if
everything works out then we want the
data which will be the translated text
so we can get that with await response.
Json right and then we'll want to send
back re status of 200 because
everything's okay and then
Jason pass in the data okay now in the
catch
I'm just going to do a console.
error and I'll just say error in API
call okay and then as far as what we
want to send back to the client let's
say status
500 and we'll send an
[Music]
error okay and that error will'll just
say internal server
error and that's it now we can test this
out so we can't do it with the browser
because remember it has to be a post
request so what I'm going to do is open
up my
Postman uh extension but you can use
anything you know any hdb client and say
new request and I'm going to make a post
request to http localhost 3000 API
translate I'm going to do it without
sending the body
first and I get missing text or language
so let's go to body for uh form URL
encoded and let's set the text to hello
world let's set the target to we can do
en which is
English and there we go we get back a
data object with a translations array
with one object in it with a translated
text of hello world if I change it to es
which is
Spanish then I get back the same thing
but it's I get the Spanish
language okay so we know that our
serverless function is working it's
doing what it's supposed to so now we
need to integrate that into our actual
application which is let's go back here
all right so we want to integrate that
into our client side JavaScript so let's
go into script
JS and let's see how do we want to let's
start off just by creating our translate
text function and that's what's going to
make the request to our serverless
function you're not going to make a
request to the translate API from your
client you make a request to your own
serverless function which then makes a
request to the client okay and that's
where you want your key you know you
don't want to put this into your client
side so let's create this function right
above the um the play play event
listener so let's say
translate uh translate text
with serverless
function so function actually let's make
this a
sync and we'll call this translate
text and it's going to take in the text
and it's going to take in the Target
Lang target
language all right and then we're going
to use a tri catch and we're going to do
the same thing just like we made a a
request to the Google translate API now
we're making a request to our serverless
functions API so const
response we want to await Fetch and we
want to pass into that slash API SL
translate okay and then as far as the
options needs to be a post
request um header
so content
type okay then we want the
body okay so the body is going to be um
json. stringify and then we want to send
the
text so
text uh which is going to be this text
that's passed in so we just do that and
then the
target so Target is going to be set to
the Target Lang that's passed in
here all right then we want to check it
so let's say if
not if not response.
okay then let's just throw we'll say
Throw new
error and some back ticks we'll say
error
and we can get the
response uh response.
status and then I want to show the
response text which is a synchronous so
we just going to do
await
response.
text okay now if it's if everything goes
okay let's get the
data so we want to await response.
Json and then remember how it looks when
it's returned it's a it's a data object
with a translations array and then an
object in that array with a translated
text so keep that in mind because now
what we need to do is
return uh return data so this is the the
data variable that I created but in that
is that other data object so data. data
and then in that we have a
translations array which we want the
first and only item and then from that
we want the translated text value so
that's what we're
returning okay and then in the catch
let's just do a console.
error and we'll say
um
translation
error and then I'm just going to do an
alert for the user we'll say failed to
translate
text and then we'll just return
text all right so that's the translate
function
now when we play right we don't want to
just play the text we also need to
translate it so let's move the stuff um
like
just you know initializing the utterance
and stuff we'll put that in uh its own
function so let's say
uh TTS we'll just say TTS and then
function function play
text and it's going to take in the
text and then also the voice
index all right and then let's say const
a actually we can just copy yeah we'll
copy
this except it's not going to be text
input value it's going to be the text
that's passed into the
function right and then let's just say
if in the voices array and we want the
voice index which is going to be passed
in so if that then let's change the
utterance
voice set that to the voices array and
that specific voice
Index right and then we'll just speak it
so just like we did here
here speech synthesis speak and then
utterance all right so we can get rid of
all this
now and then we need
to um call play text and we need to call
translate text so and this has to be
asynchronous so let's add an async here
right and then let's get the text to to
pass in which we have the text input
element but we want to get the value and
then I'm also going to trim it as well
so that's the text let's get the target
Lang which we get from the language
select element but we want the value and
then let's get the
selected voice index from the
voices uh what is it voice select.
value all right and then I'm just going
to do a just a check to make sure that
there's something in text so if there's
not then we'll just do an alert and say
please please enter some
text and
return okay and if there's text then
we're going to do a try
catch and in the try we want to
First translate the text before we speak
it so let's say const translated text
not translate because we already have
that function this is translated and
then we're going to use the translate
text and that's going to take in text
and Target
Lang all right then we want to play the
text so for that we call play
text pass in the translated
text and pass in the selected voice
index all right and then in the catch
console.
error we'll say
error uh I guess error during
processing all right and then we'll just
alert for the user we'll say an
error an error
occurred all right all
right so let's try it out so I'm going
to just do hello world let's try English
first hello world hello world okay and
then I'm going to change it to
Spanish there we go it did the
translation change the
voice I don't know what is wrong with
these voices
let's choose uh
Aaron okay so that's Spanish Let's Do
German hello well let's do
Italian Chia Mondo all right so yeah you
can see that it's working we can change
the voices we can change the language so
it does both TTS and
translation now if you want to push this
to
versel that's extremely simple but we do
need to add our environment
variable so let's grab this so we're
going to have this as the
key all right so what you do is go to
settings and then environment variables
pass in the key and then pass
in the
value okay so we can add
that uh yeah save so that gets added now
to push this we can just simply save or
sell and of course you can you know push
to GitHub as well you can do it that way
but um and I I will push to GitHub so
you guys have
this but yeah right here you can see
deploy to production so if I go to
project and we click on that there we go
we
have say um let's do something different
I'll
just what sh"
vA5TTz6BXhY,"hey guys welcome to my git and GitHub
crash course for 2025 and Beyond so I
figured that this would be a good idea
for the first crash course of the year
because git is something that absolutely
every developer needs to know at least
the basics of and I do want to stress
that this is a crash course meaning that
we don't dive super deep into really
Advanced topics this is more for
beginners as well as intermediate
developers that may know just the very
basics of git and want to learn a little
bit more so we're going to cover all the
stuff that you need to know such as
creating a local repository staging
pushing to a remote GitHub repo pulling
branching and merging and more and we're
going to start with some slides just to
go over what git and GitHub is and just
some of the fundamentals and then we'll
jump in and we'll start using Git along
with GitHub and I'll even show you how
to deploy a project using cicd which is
continuous integration and continuous
deployment we'll do that with GitHub and
uh a company called versel all right so
let's get into
it all right guys so I just want to go
through some slides talk a little bit
about what git is what GitHub is and
look at some of the the key features and
so on so git is a distributed version
control system or VCS and it helps
developers track changes in their code
base also allows them to collaborate
with others and manage multiple versions
of a project project and in its absolute
simplest form and simplest use case it's
used to back up your code now unlike
other Version Control Systems some of
the older ones git is decentralized
meaning that you don't need a central
server to use it instead every developer
has a full copy of the repository on
their local machine and a repository you
can think of as a like a digital filing
cabinet that stores all your files and
all the changes that you've made so it's
kind of like a time machine for your
code and you can roll back to certain
versions when you need to so Version
Control is a musthave skill for any
developer it's used in almost every
software project and if you think about
big companies like Google Facebook
Microsoft they have thousands of
developers that are working on the same
giant code bases and they need a way to
to manage all the changes that are made
and that's where git comes in it allows
developers to work on the same Project
without stepping on each other's toes
and it also provides a way to track
changes roll back to to previous
versions and it's used for anywhere from
you know a one person to Giant companies
like Google and Facebook now just to go
over real quickly the key features of
git it's distributed it's decentralized
so there's no need for a central server
it keeps track of changes made to your
codebase multiple developers can work on
the same project you have branching
which we're going to talk about more in
a little bit but if you want to create a
separate Branch to work on outside of
your your main branch your main code to
either create a feature or fix a bug you
can do that and then when you're done
you can merge it into the main branch
into the main code you have the option
to work with uh remote repositories like
GitHub but there's others as well such
as gitlab and bitbucket um extensive
tooling so get is supported by many
tools including idees and we're going to
learn about the the workflow soon when
it comes to get but in addition to your
repository there's also a staging area
that you can utilize that you can put
files before you actually commit them to
your local repository the speed so git
is very fast and efficient uh it also
uses sha one hashing to ensure data
integrity and of course it's open source
and free it's it's widely available
without licensing costs it has a large
community and support for plugins and
things like that now there are are other
version control systems like sub verion
or S SPN but git is by far the most
popular version control system today for
the reasons that I mentioned it's fast
it's efficient decentralized now this
chart is from the stack Overflow
developer survey of 2022 and it shows
that almost 94% of developers use git
over other Version Control Systems which
is a huge number and they didn't even
have this this question in the 23 and 24
surveys because it's just so obvious
that you know everybody uses git now I
want to talk a little bit about GitHub
because some beginners can confuse git
with GitHub but GitHub is a web-based
platform designed for Version Control
and collaboration and it hosts G
repositories remote repositories and
provides a graphical interface within
the browser to manage your code and do
other things as well um in addition to
hosting your code GitHub offers you know
powerful collaboration tools like bug
tracking feature requests task
management there's wikis for your
projects so git is the tool that you use
to create these repositories and and
push your code to them but something
like GitHub because there's others as
well it's not just GitHub but these kind
of remote Services um this is where most
of your collaboration is going to happen
this is where people are going to pull
your code from and make poll requests
and add issues and things like that so
it's important to to note that git is
the version control system while GitHub
is the platform that hosts git
repositories all right so when it comes
to installing git there's there's
multiple ways to do this and it really
depends on the system you're on so if
you're on Mac OS you can use the
Homebrew package manager if you're on
Linux you can use whatever package
manager for whatever Dro you're using if
you're on Windows or or any platform for
that matter you can download get from
the official webs s it which is get-
scc.com and when you download the
installer on Windows you also get a
really cool terminal program called git
bash which is a Unix like terminal for
Windows and even though the windows
terminal has gotten a lot better over
the years I still prefer to use git bash
on Windows but that's just me so when it
comes to using git you have two options
you have the the terminal where you
write you know type commands and then
you also have tools with graphical user
interfaces now I recommend learning git
using the terminal it's it's more
powerful and you'll have a better
understanding of what's Happening behind
the scenes um when you use an interface
it's still doing the same thing that you
would do in a terminal but you're not
seeing what's actually happening and the
commands that are actually being run and
then I would say once you're comfortable
with the terminal you can try out a guy
um there's many available like GitHub
desktop Force tree git Kraken um if
you're using visual studio code or other
IDE there's usually well for visual
studio code there is built-in git
features and for many other idees there
are as well but again I would say get
comfortable with the terminal first now
when you start using git you do have to
configure it initially with your name
and email address this is important
because every git commit uses this
information and you can set this with
the these commands here get config and
then-- Global username and then your
name and then same with email now I want
to go over the workflow of git and and
you're going to learn more about this at
when we actually do it this is just kind
of an overview so if you look at the
boxes at the top you have your working
directory and this is on your local
machine you have your working directory
this is where you make changes to your
files you have the staging area where
you PR prepare your files for commit and
then you have the local repository where
git stores all the changes you've made
to your files and this will be all
stored in a hidden folder called dogit
in your project directory and then the
remote repository whether that's on
GitHub or gitlab or wherever that is
that's stored remote and people can then
pull that code down and so on so I just
want to go over kind of the workflow and
the commands that you'll run to move
files around to these different areas
and again we're going to be doing this
so this is just an overview so first off
you're going to run get and knit and
that will initialize a new repository in
your project folder or your working
directory and it'll be a hidden folder
called dogit then once you're ready to
add some files to the staging area let's
say it's your initial commit or you
added a a new feature or you fixed a bug
or whatever it might be you add it to
the staging area with the get add
command and then when you're ready to
commit it to your your local repository
you would run the get commit command and
you add a comment explaining what that
commit is okay once you're ready to push
to your remote repo whether that's on
GitHub or gitlab then you're going to
use the get push command and this is
after you configure your remote
repository because it has to know where
it's actually going to be pushed to and
I'll show you how to do that now when
you want to pull changes from a
repository you would use the git pull
command that's going to pull the files
down to your working directory all right
so let's say one person makes a commit
and they push to GitHub and then another
developer wants to get those changes and
they're already you know they already
cloned the repo or whatever then they
would just type get PLL and that will
get the latest changes now once you go
to a repository for the first time and
you want to get that get those files on
your machine there's a few ways you can
do it you can click the download button
and get the zip file but you don't
really want to do that if you're going
to continuously work on the the
repository so you would use the get
clone command and that would pull the
entire thing onto your local machine now
branching is a key feature of Git it
allows you to work on new features or
bug fixes without affecting the main
code base so you can create a new branch
make a change and then merge those
changes into the main branch and this is
a common workflow in git and you can
also create branch branches for
different environments like production
staging and development so let's say you
have a project that logs workouts and
you want to add a feature that
calculates the total calories burned so
you can create a new branch called
feature SLC calories and work on that
feature and then when you're done you
can then merge that Branch back into the
main branch and this is called a poll
request okay you're requesting that your
changes be merged into the main code
base so this is uh again a common
workflow in
git so I think that that's all I want to
talk about in the slides so kind of a
general overview now we're going to jump
in and I'm going to show you how to
actually run these commands how to
create a local repository how to create
a remote GitHub repository how to push
it how to pull make changes Etc so let's
get into it all right so first thing you
want to do is get get installed if you
don't have it already and you can check
by opening your terminal and just saying
get-- version that'll show you the
current version if you don't have it
then like I said there's a few ways you
can install it you can use home brew on
Mac or your Linux package manager or
just go to get- sc.com
downloads and download it for Windows
Mac or Linux all right so once you get
it installed we're going to have to
configure your your name and email and
this is something you do just once the
first time that you you're using git so
you just want to open up a terminal it
doesn't matter what folder you're in at
the moment I'll get into what this task
track tracker is in a minute but we want
to run two commands so you're going to
do get
config and then d-g
Global and then you want user.name and
then whatever you want to specify as
your name so I would say you know Brad
traversy okay I'm not going to run that
because I already have it set and you
can check what's that by just taking the
value away and just running this so
you'll see that's what I have as my name
all right then you're going to want to
do the same for email so that would be
user. email and then you would put in
you know whatever email that you're
using okay so that's how you can
configure that now there's one other
thing that I would suggest configuring
and that's your main the name of your
main branch because by default with Git
it's called Master but with GitHub they
changed it from Master to main so you
can check What It Is by doing dash dash
Global and then it's init do default
Branch okay and you'll see mine is main
because I changed it but yours might say
master so what you can do to change it
to match
githubsign to talk about the project
which doesn't really matter because
that's not the focus but I have a
download downlo uh a link to a download
in the description to this task tracker
zip file which has an index HTML a
script JS and a style CSS and it's just
an example of a project that we're going
to use to make changes commit to our
repository push to GitHub Etc if you
want to use some other files that you
create on your own that's absolutely
fine but I figured I'd just give you
something to work with and the reason
that I put it as a download and didn't
add it to you know its own repository
for you to clone is I don't want start
with cloning I want to start as if this
were your own project all right so just
download that and you can see I'm
already in the the task tracker folder
and I could do everything from here in
my terminal but I'm going to open this
folder up in vs code so that I can use
the terminal here and we can actually
see the files okay because there are
some some git Integrations with VSS code
and even though that's not the focus of
this tutorial the focus is the you know
the commands and the term
we still have that as like a you know
visual confirmation of what's happening
so just to kind of go over these real
quick very very simple I just have an H1
and a UL here so we have a script.js
with just a console log and then a
stylesheet with a little bit of CSS so
again this what's in here doesn't really
matter so the very first thing you're
going to do when you create a project
and you want to use git is you want to
initialize a local repository and you do
that with the command get ini it okay if
you remember if we look at this slide
here we run get in it that will
initialize a new repository and it
creates this hidden dogit folder right
so if I were to do an LS so list my
files and show hidden hidden files and
folders it shows this dogit that's my
git repository if you wanted to
completely get rid of it you could do
rm-rf and then doget and that would
completely delete it all right so and
you can see that a couple things
happened within VSS code one it shows my
Branch name down in the corner Main and
it also changed the colors of the file
names and put this U next to it so this
just represents files that are untracked
okay the U and the green coloring which
means that I haven't added them to my
staging area because remember there's a
a staging area right and then there's
our local repo where we commit to so we
haven't done anything with these files
yet so they're untracked
now there's also a source control tab
here and you can do everything that you
can do within the terminal with Git
commands you can do here as well but
this isn't a tutorial on vs code so I'm
not going to get too much into that but
it does show you which files you know
are untrack and it shows you the status
now to check the status within the
terminal you can do get status and that
shows us that we have three untracked
files okay so what we would do next if
we look at the workflow here
is we would run get add and add files to
the staging area so typically what
you'll do is you'll work on your project
get it to a place where you know you
want to save it essentially and then you
want to run get ad and typically you'll
add all so all your files but I just
want to show you you can add them
individually so if I do get ad index
HTML now in vs code just to show you as
a visual representation it has an a next
to it it says index added so this file
has been added to the staging area and
if I were to run G status it shows me
that okay so this here and then these
two are still untracked so if I run get
add dot or add all now they all have an
A next to them and if I run get
status status then you can see that
they're all now in the staging area to
be committed now to
commit let see so to commit we run get
commit and that will commit files to
your local repository not your remote
not GitHub or anything we haven't set
any of that up yet this is all local so
let's go ahead and run get commit and
what you're going to do is add the dhm
flag and add a message in quotes So
typically when it's your first one
you'll do something like initial commit
so if we run that now you can see the
files are no longer green over here
they're white with no letter because now
they're it everything's up to date the
everything's added to the local
repository if I run get status it says
nothing to commit working tree clean
because I've committed everything now
from here you have the option of either
adding your remote repository with
GitHub so you would need to create one
on GitHub or you could just keep working
locally for now so for instance if I
want to you know make a change and I'll
just do something silly here I'll just
add another task right so now if I save
that you can see that this has changed
color now to Orange which means that
this this file has been changed from the
what's in the local repository so you go
through you make some changes you add a
feature you fix something whatever it is
and then you're going to add again so
just say get add all which is only going
to add the index file because that's all
it's been changed right so now that gets
added now you want to commit it so let's
say get commit dasm and and I'll just
say added new
task okay so now that gets added and now
I have uh my repository up to date and
you can also run get log which will show
you your commits starting with the most
recent first which is added new task
shows me the author the date and the
commit hash and if I click the down
arrow you can see that it goes to the
next one which is initial commit and
then to to get out of this you just hit
Q to quit so that's going to be your
workflow as you make some changes you
add a new feature whatever the the
change might be you add the files to
your staging area and then you commit
them okay and we're not dealing with a
remote repository just yet but as far as
frequency goes it's really up to you
some people will will commit really
often some will only do it after major
features it's really just based on your
your
preference all right so now what we're
going to want to do is the next step
which is going to be git push where we
push to a remote repository and that
could be GitHub but it could also be
gitlab bit bucket or or something else
um so what we're going to do is set up a
GitHub repository because right now we
don't have one to actually push to so
you're going to want to go to GitHub if
you don't have an account create one and
um you can list all your repositories
that's what you see here um you also
have a profile that will show your most
popular repositories and also your
contribution grid here so basically the
lighter the green the more contributions
like this day November 30th I had seven
this day I had three and then the blank
ones I didn't have any contributions
meaning I didn't push to GitHub all
right so what you're going to want to do
is create a new repository with this
right here it's a plus sign and the new
repository you're going to name it
typically you're going to call it what
your project or your folder is called
which in my case would be task tracker
and I'm just going to say demo project
for tutorial I'm not going to keep this
now here is where you choose if it's
public or private if it's public anyone
can go to this repository and anyone can
see the code all right so keep that in
mind I'm going to make it private
because I don't want people seeing this
because it's just for this video um and
it's nothing that I want anybody to have
because it's just nothing really and
then you can also initialize a a read me
file I typically don't do this I create
it myself and then and then push it but
you can do that here you can also add a
do get ignore file which I'll talk about
in a little bit but again I add that
myself so let's say create
repository now it shows you basically
the steps if you're creating a new
repository or if you're pushing an
existing repository which is what we're
doing we've already done this the init
the commit the add so basically what we
need to do is first run this command so
this will add the um this this
repository as our remote so I'm just
going to paste that in here so it's get
remote add and then origin is just the
name of the or the Alias of the of the
repository so you can name it whatever
you want but typically I'll just keep it
as origin and then we're just adding the
the address to the repo which is my
username okay yours will obviously be
your username slash and then whatever
you called the Repository so I'm going
to run that it's not going to do
anything but it it did add the uh the
remote
repository so next uh let's go back here
so we want to make sure that we're using
the main branch I mean we don't really
have to run this but I usually do anyway
so we're just saying we want to use the
main branch um and then we want to
finally push so we're going to run this
get push dasu origin main now we only
have to add the dasu which stands for
Upstream and then origin main we only
have to add this this time any other
time that we push in the future we can
just simply run get push after we commit
to our local repository so keep that in
mind um so we run that and then you can
see that it gets pushed to GitHub now if
I go back to this page and I reload we
see our code so we have the three files
in the repository okay this is private
so nobody can see it unless I give them
permission if it was public anyone could
go to this link and they would see your
codee now what shows here is whatever is
in your readme file your readme.md which
is a markdown file and we don't have one
so that's why it says add a read me and
we can do it from here or we can what
I'll usually do is create it on my you
know create it on my machine and then
push it but I want to show you how we
can pull stuff from the repository so
I'm actually going to add the read me
from here so I'm going to click that
button and then I'm just going to add a
number sign and we'll say task tracker
now this uses markdown syntax and if you
use a a number sign that's going to be
an H1 right if I use two that would be
uh you know this heading would be an H2
if I use three that'll be an H3 and so
on and I have a full crash course on
markdown if you want to check that out
I'll I'll put try to remember to put
that link in the description so I'm just
going to say this is a demo project for
my git tutorial okay and this is where
you'll usually put things like the usage
so what do you have to do to run this if
you're building something with node.js
you would you would say you know run npm
install to install any
dependencies uh npm run Dev to run the
server you just want to give full
instructions on how to use this project
okay but this is something very simple
so I'm just going to add this and you
can see the preview as well as to what
it will look like which it will look
like like this so I'm going to commit
the changes and this does a commit just
like we did from the terminal and you
can add a description I'm just going to
do create readme and then we'll say
commit changes now we have a readme file
here however we don't have it here so
what we would do is we would pull the
changes from the remote repository all
right and we would do this if someone
else had um you know cloned the
repository made some changes and then
put push to it we would need those
changes so that would be this step here
which would be a get poll okay so let's
go ahead and run get
poll and now we have the read me here
okay because it pulled any changes from
the server now the next thing I want to
talk about is theg ignore file which is
really important because you're going to
have some things in your your project
that you're not going to want to push to
GitHub so for instance you might have a
EnV file that has environment variables
which can hold things like API keys and
stuff that you definitely don't want the
public to see so let's actually create a
EnV file and let's say we have something
like
API key and we have it set to whatever
one two three doesn't really matter so
you're not going to want this to be
available in your repository especially
if it's a public repo right so what you
would do is create a file called dotg
ignore make sure you have that dot and
then anything you put in here is going
to be safe and not push to the
repository so I'm going to add EnV all
right so I'm just specifying that I
don't want this file to be in the
repository right so now let's make um
another change we'll just go ahead and
add another task I guess and then I'm
going to say
get add all and get commit
and let's say added Task
5 and then if I want to push I can just
say get push I don't have to do the you
know the dasu origin or anything like
that so I'll go ahead and push and then
if we check out the geub repo I'm just
going to reload this you'll see that we
have our doget ignore we have the latest
commit which is added Task 5 but the
file is not here okay I have it in my in
my directory here but it's not included
in the actual repo now there's a couple
shortcuts that I want to show you as
well so if you if you want to add and
commit at the same time in one command
you can do that with the with the a flag
- A so let's say I add another task here
and when I'm adding these tasks this is
just an example U normally you would be
adding a whole new feature there'd be
multiple files changed but I just want
to make some kind of change so let's say
that I want to I want to add and commit
in one command so I can do get commit
remember I haven't added this the index
HTML to my local repository yet or I
sorry I haven't added it to the staging
area but I can do Dash a and then also M
for the the message here and then I'm
going to say
added added task six okay so if I run
that now say get status and it doesn't
show anything in the the the staging
area if your branch is ahead by one
commit so I can now just run get
push okay and now if we go back to our
repository we should see the new commit
you can see added task six all right so
that's how you can do it in one command
another thing you could do and I'll just
again add another task just to make a
change another thing you could do is say
get add and let's say index.html
and then we can do double Amper samp so
and get
commit dasm and let's say
added task 7 so here I'm doing the get
add and the get commit in one command as
well and then we'll do get
push check it out and we should see
added task
7 okay and it's only going to be on the
files where that were changed and this
case only the index HTML was changed now
while we're on the the the GitHub repo
here the interface just want to go over
a couple things and just to get you a
little bit more familiar so obviously it
shows our files it shows the commits and
it shows when they were made um here is
the branch Main Branch if I had other
branches then they would show here as
well um over here it says six commits so
that's what I've made so far and if I
click on that it'll show me all the
commits that that are made and it breaks
it up by day and if I want to see the
state of the code in one of these
commits I can do that so if I click on
add new task it shows me um what was
actually changed at that point and what
was changed was I added uh a new task I
added task four all right so you can
always go back and and check what was
actually added or or removed or whatever
was
changed okay and let's see we have up
here A bunch of tabs of course the code
tab that's what we're on the issues tab
so people can submit issues so if they
run into a bug or something they can do
that and they can add labels to them um
poll requests so if someone wants to
collaborate and they fix a bug or they
add a feature they can then make a poll
request for you to look at and approve
so all your poll requests will show up
here actions so here you can set up
continuous deployment and continuous
integration pipelines um that's beyond
the scope of this tutorial and then
projects so here you can manage your
your project using github's built-in
project management tools uh Wiki so if
you want to create a Wiki security has
to do with your security policies um
insights so you can see you know the
traffic and
analytics um settings so from here you
can do things like change the visibility
so if you want to change it from public
to private if you want to disable issues
if you want to delete the repository
arive it transfer it so all that stuff
is done in the settings
tab or and also add collaborators that's
another important one so if you want
someone else to be able to to work on
this repository you would just add their
their GitHub email here and that would
send an invite to them um you can do
more advanced stuff like web hooks there
there's a lot you can do here I'm just
scratching the surface just to you know
just to give you an introduction but
yeah there's a lot you can do it shows
here the languages so whatever
Technologies are actually used in the
repo um but yeah so that's kind of the
basics now let's talk about getting code
from GitHub okay and we've already
looked at PLL which is is one of the
ways now you can download an entire zip
of the the repository if you go to this
code button here and you just say
download zip but you're only going to do
that if you just want the codee and you
don't want anything else to do with the
repository you don't want to add to it
you don't want to you know do anything
with it it still I would say clone it
anyways uh because it's literally just a
command and you have the whole thing on
your machine rather than extracting a
zip file and so on and that's the next
one which is get clone you copy uh Co
you get a copy of the full repo onto
your machine right so to do that you
would run get clone and you can clone
with the SSH H link here or using htps
now to use SSH you're going to have to
generate some SSH keys and add them to
GitHub I'm going to show you how to do
that in a minute um another thing you
could do is get fetch which is going to
it's it's when you want to get the
latest changes from the remote
repository but you don't want to merge
them so you can use get fetch and then
forking is copying a repository from
GitHub onto GitHub within your own
account right so if someone else you'll
see I can't Fork my own repository but
if I was on uh if someone else was on
this and they wanted their own copy of
this on their GitHub account like let's
say my username was hello it would be
hello slask tracker okay and I could
Fork it by just clicking this button and
I'd have that automatically in my
account then I could clone that onto my
machine and I could work on that which
would be my own
repository all right so those are the
the main ways that you would get files
from GitHub now I want to go over
cloning so like I said before you can
clone using this SSH link right here you
need to generate some keys and put them
on GitHub so the way you would do that
let's just jump back into vs code here
just going to close that up so the way
you would do that
ssh-key gen that's what we use to
generate a new SSH ke pair and then
we'll do dasht so the type would be RSA
and then the bits so Das B would be
4096 so if I run that it's going to ask
me the location and the name of the key
and the default would be in my home
directory and then in a SSH folder which
is a hidden folder and it would call it
ID RSA and if you're fine with that you
can just hit enter but if you want to
change it then you would put the
location so for me let say users Brad
traversy obviously yours would be a
different location at least I hope so
and then SSH slash and I'll usually call
it like
idore GitHub we'll say GitHub
2 okay and you can add a passphrase if
you want I'm just going to hit enter for
no passphrase and now you can see that
it's created this so two things ID
GitHub 2 which is your private key and
ID GitHub 2. Pub which is your public
key all right now what you would do is
is put the public key on GitHub
so the way t"
XMu46BRPLqA,"hey what's going on guys so I recently
had to scrape a website and get some
data and it gave me the idea to do kind
of an ultimate web scraping guide so
what we're going to do is take a look at
some slides and just talk about what web
scraping is uh why you would do it we're
going to look at the steps to take and
then we're going to jump in and we're
going to scrape a e-commerce website for
some books so we're going to get a bunch
of data uh on these books and we're also
going to be scraping data from a site
that has pagination so we'll have to
basically use our tool to to go through
and go through each page scrape all the
data go to the next page and so on and
I'm going to do this both with nodejs
and python so with nodejs we're going to
use a tool called Puppeteer which is a
web scraping Library it allows us to use
a basically have a headless browser
within our code and then for python
we're going to use a library called
Beautiful soup and we're basically going
to do the same thing so if you want you
can watch both and you can kind of
compare and contrast or if you're just
interested in the the JavaScript you can
watch that part if you're just
interested in the python you can watch
that part all right but ultimately this
is going to give you a really good
understanding as to what web scraping is
why you would use it and also how to do
[Music]
it this web scraping guide is sponsored
by bright data their scrape off solution
allows companies to SC scale up their
web scraping and data collection with
their Global proxy Network browser
automation tools and web scraping apis
you can scrape data from any public
website bright data's tools offer
Universal compatibility with just about
every programming language and web
scraping tool you can run your pupper
selenium and playright scripts on full
hosted browsers with unlimited
scalability you also get 24/7 support
anytime anywhere so if you like this
guide and you want to take your web
scraping projects to the next level
click the link in the description visit
bright dat.com okay so we're going to
look at some slides talk a little bit
about web scraping why we do it how we
do it and then we're going to jump in
and I'm going to show you how we can
scrape a website using both node.js with
Puppeteer and Python and beautiful soup
all right so what is web scraping as I
mentioned web scraping is the process of
extracting data from websites this can
be done manually but it's often more
efficient to use a program to to
automate this process and web scraping
is is commonly used to collect data for
research for analysis and for other
purposes so for example you may want to
collect data on a job board or collect
product information from an e-commerce
website and web scraping allows you to
automate that process of collecting this
data so you can save time and effort now
obviously apis are one of the best ways
to get data from a website but not all
websites have apis so web scraping can
be a good alternative however that
brings me to my next point which is the
the legal and ethical considerations and
this is something that's really
important to understand when you're
getting into web scraping it can kind of
be a controversial topic because some
websites don't allow scraping at all of
their content they usually list this in
their policies some do allow it it just
you know fullon whatever scrape as much
as you want and some have certain
stipulations so it's important to be
aware of the the legal and ethical
considerations when you're scraping
websites and to make sure you have
permission to scrape those sites that
you're targeting and in this guide we're
going to be scraping a site called
books.to
scrap.tf it's been around for a long
time the the very first tool that was
used I guess you could put web scraping
in quotes here it was created in 1993
and that was the worldwide web Wanderer
which was a bot that would go from link
to link and index the content of pages
that it visited and although it wasn't a
scraper in the traditional sense it laid
the groundwork for automated web data
collection and search engine crawling so
it was kind of the origins of of search
engines and then in 2004 the first
traditional web scraper as far as I know
is was beautiful soup and that's a
python Library that's still used to this
day and we're going to use in this video
and allows developers to extract data
from HTML and XML files and since then
web scraping has become a common
practice for collecting data from the
web and they've gained even more
popularity recently due to the
increasing amount of data that's
available on the web now web scraping
has a lot of different uses so these are
just some of the more common ones so
first we have data collection so
obviously you know collecting data from
websites for research or analysis this
could be data on products jobs real
estate properties news articles and the
list just goes on and on price
monitoring so monitoring prices on
e-commerce websites to track changes in
prices over time you could do this just
for yourself to find the best deals or
for a business to track competitor
pricing uh content aggregation so you
can aggregate content from multiple
websites to create a new website service
you can build a news aggregator that
collects news articles from multiple
sources and display them on a single
website lead generation so collecting
contact information from websites for
sales or marketing purposes and uh just
keep in mind you know ethical and legal
considerations when you're doing stuff
like that and then market research so
collecting data on competitors or or
industry Trends from websites and then
social media marketing or social media
monitoring sorry to collect data from
social media websites to track Trends or
sentiment now I'm just going to give you
a quick summary of how web scraping
works and then we'll go a bit deeper
into the steps and then ultimately I'll
show you how to do it with code so web
scraping Works usually by sending a
request to a website downloading the
HTML content of the page and then
extracting the data that you're
interested in and you would obviously do
this through code and there's a few ways
to extract data from a web page
depending on the structure of the page
and the type of data that you're looking
for some common methods include using
regular Expressions parsing the HTML
content with a a library like beautiful
soup or using a tool like Puppeteer to
interact with the page in what we call a
headless browser and these are powerful
because we can interact with the page as
if we were a user in a browser so we can
do things like click buttons fill out
forms and we can extract data from the
page and many tools that are used for
web scraping are also used for just
testing in general and they allow you to
automate tasks in a headless browser and
you can do what you want with that data
such as save it in a file or save it in
a database now as far as the tools and
and libraries that we can use for web
scraping this is just a few of them and
these are mostly just JavaScript and and
python but you can do web scraping in
other languages as well so first we have
Puppeteer which is a node.js library
that provides a high level API to
control a headless Chrome or chromium
over the dev tools protocol and it's a
powerful tool for automating tasks in a
headless browser like I said clicking
buttons filling out forms things like
that and of course extracting data we
also o have Cheerio for JavaScript which
is a fast and flexible lean
implementation of core jQuery but it's
designed specifically for the server for
node.js so it's it's a popular tool for
web scraping in node um beautiful soup
is one of the the most popular libraries
for web scraping in general this is a
python library for parsing HTML and XML
documents it provides a simple API for
navigating and searching the HTML
content of a page making it easy to
extract data from web pages we also have
Scrappy which is another python
framework for web scraping and that also
Prov provides an API for extracting data
handling pagination following links
things like that and then selenium is a
popular tool for automating web browsers
and it provides a web driver API that
allows you to interact with a web page
in a headless browser now selenium is
often used for testing web applications
but it can also be used for web scraping
okay so now let's go through the the
main Steps to Web scraping and these are
kind of the the the general have to
steps and then after this I'm going to
go over some some other steps that you
may have to apply depending on the site
that you're scraping so of course the
first thing you're going to do is
identify the website and you want to
make sure you have permission to scrape
that website and scraping without
permission can be illegal and as I
mentioned there's legal and ethical
consider considerations when it comes to
web scraping so just be sure that you're
aware of all the rules and regulations
that surround that in your country and
for that specific website so you want to
inspect the page once you've identified
the website you want to inspect and
determine the structure of the page and
the data that you want to extract you
can do this by right clicking on the
page and selecting inspect in your
browser or use a tool like the the
browser Dev tools and you want to
examine the HTML structure of the page
to identify the data you're interested
in and this includes looking at things
like class names IDs and other
attributes of the elements on the page
okay once you do that once you've
identified the data and you've checked
out the structure you then want to write
your code to extract that data you want
to uh it'll have to make a request to
the website download the HTML content
extract the data and this usually works
similar to how you would select elements
within JavaScript or jQuery in fact
Cheerio is is actually a subset of
jQuery so it's very very similar and you
may have to handle things like
pagination and I'll talk a little bit
about that in the next slide and we will
be doing that in our code as well and
then once you write your code you want
to obviously run it and scrape the
website extract the data that you're
interested in and then you can save that
data to a file to you know a Json file
CSV file or you could save it to a
database I mean there's different things
that you can do with that data now these
are some additional steps and
considerations that you may or may not
have to deal with so first you want to
handle an pagination if the data that
you want to scrape is spread across
multiple Pages then you'll need to
handle that you can do this by following
the links that are on the the next page
so you know you have pagination you can
click on next see the next whatever 10
or 20 listings get that data click the
link get the next 20 10 or 20 however
many is on that page and specify how
many pages you actually want to scrape
and we're going to be doing that within
our scripts you want to handle any
Dynamic content so if the if the website
uses JavaScript to load the content
dynamically you might need to use a tool
like papaer to interact with the page in
a headless browser um handle errors so
web scraping can be error prone so
you'll need to handle any errors that
you know that you have in your code to
ensure that your scraper run smoothly
respecting robots.txt
so many websites have this robots txt
file that specifies which Pages can be
crawled and scraped and which Pages can
and these are typically used to tell
search engines whether to crawl that
page or not so just make sure you
respect whatever links are in that our
pages are in that robots file and then
rate limiting So to avoid overloading
the website you're scraping you should
add a rate limiter to your scraper so
that you're not sending tons and tons of
of requests and you know overloading the
we website but that's pretty much it as
far as just describing the the general
aspects of web scraping so now let's
jump into some code we're going to start
off with node.js and Puppeteer and then
we'll look at Python and beautiful soup
okay so now that we've talked about web
scraping let's get into it we're going
to start off with node.js and Puppeteer
and then we'll move on to Python and
beautiful sup so this is the website
we're going to scrape it's books.to
scrape.on as you can see it's it's meant
to be scraped so no legal or ethical
issues here um and that's something you
always want to look into before you
scrape any website for any data so it's
B it's set up just like a regular
e-commerce website we have a bunch of
books here for the products it has an
image a rating title price in stock add
to basket button and I believe there's
20 on the first page and then there's 50
pages so pagination is something we're
have to deal with we're going to have to
go to the second page thir how however
many pages we want and get the data from
each page and as you can see in the URL
it goes to SL catalog page- whatever the
page number so that's something we have
to use and take into account in our
script now as far as the data that I
want I just want to get basically
everything here but the image I want the
title the rating which is in the form of
stars and then the price and if it's in
stock so so we know what we want to
scrape we want to get the books I'm
going to save it to a a Json file and we
know the fields that we want the data so
next step is to look at the structure
and we can do that of course by right
clicking and inspect and then I'm going
to click this icon here and just select
the first item and you can see that
every book every item here is wrapped in
a li tag and in that is an article tag
with a class of productor pod okay so
they all have that that article with
that class so that's something to take
note of cuz that's what that's the class
we're going to basically use to grab on
to each product and in that we have an
image container which I'm not interested
in I don't care about the image the
rating you can see it has a class of
star rating with a bunch of icons but it
also has a class of whatever that rating
is in this case three if I were to look
at this one here you can see that this
this div uh or paragraph rather has a
class of one because it's a one star
rating okay so we get the rating and
then in the H3 is a link that has a
title attribute so that's how we can get
the title and then for the price there's
a product price div and then in that is
a price color uh class on this paragraph
that's where the actual price is and
then there's also a a class for if it's
in stock or not so that's the the
structure that we need to pay attention
to and I'm just going to kind of keep
this open while we uh while we write our
script all right so like I said we're
going to start with node.js so if you
have no interest in node and puppet tier
you can skip you know move on to the
python part but I'm going to open up my
terminal and first thing I'm going to do
is just create a new directory for this
I'm going to call it
web- scraper Das node and then CD into
web scraper node and then I'm just going
to open up vs code or open up whatever
text editor IDE that you want to use so
from here I'll open up my integrated
terminal and since we're using node
we're going to npm and knit a
package.json I'm going to use the Dy
flag to skip any
questions and I'm I'm assuming that you
guys have basic JavaScript knowledge and
a little bit of nodejs knowledge and for
puppeteer we can install that with npm
so let's do
that obviously you need to have node
installed on your computer to use npm
okay so that will set that up
package.json you can see now we have
Puppeteer installed all right so one
other thing I want to do I want to use
the es module syntax the import syntax
so to do that in node we need to go to
our package.json and we need to add in
here type and I'm going to set that to
module if you want to use common JS and
the require syntax then you don't need
to do this but I prefer to use import so
now I'm going to going to create a new
file I'm going to call it scrapee.net
you can use an iffy if you don't want to
use a named
function okay and then underneath that I
want to make sure that I call it before
I forget and then I'm just going to kind
of go step by step now Puppeteer has
what's called a headless browser so you
can think of it as like Chrome or
Firefox or whatever without the chromium
without the the UI you basically do it
from within your code so we want to
launch that browser and I'm going to put
the object that we get into a variable
called browser so we're going to set
that to Puppeteer and then there's a
method called launch all right now I
want to basically create a new page to
work in so we're going to say page and
set that to I'm sorry this needs to be
await because these are all asynchronous
so then we want to await on that browser
object we have uh a method called new
page okay so now we have this page to
work with and we need to go to a
specific URL so let's put the URL in a
variable so cons URL and we're going to
set that to
https and it's going to be
books. two scrap.tf
and I'll just put back ticks here and
just say page title and we'll put in the
title and then the last thing we need to
do after everything is close the browser
so we want to say await on
browser.
close so now let's run this so I'm going
to come down here and run node scrape
because I called the file
scrape.on and and books to scrape
sandbox so we know that we're we're able
to make the requests we're able to get
the website we create this this page and
we get the title now I don't care about
the title I just wanted to use that as
an example so let's get rid of this and
Puppeteer gives us a method called
evaluate that allows us to run
JavaScript in the context of the page
and we can then select data using just
like query selector and query selector
all so what we're going to do is create
a variable called books and I want to
set that to
await page do
evaluate and that evaluate is going to
take in a function just going to pass in
an arrow function here and we want to we
want to get the the element that
surrounds the data that we want to
select and again if we go back to the
structure here we have an article that
has the class of product _ pod So within
that is all the things we want so we'll
use that as our as our selector all
right so let's go back into evaluate and
then from here we'll go ahead and create
a variable called book elements and
we're going to set that to document Dot
and then we're going to use Query
selector
all because obviously there's there's
more than one book Element and the
selector we're going to use is the class
of of that article so product underscore
what was it
pod okay so that will give us our
elements now I'd like to show you what
that gives us but we don't want we can't
console log within the page. evaluate
because you can think of this as like a
like a a virtual page um but what we can
do is return from this book elements and
then outside of the evaluate we can then
console log books okay because that's we
have books that's set to the evaluate
from the evaluate we're returning book
elements and then we're logging books so
let's save that and then let's run this
node scrape and what we get back is
what's called a node list which is a an
array likee structure and you'll see
that we have 0 through 19 that's because
there's 20 pages on the first sorry 20
books on the first page and we're only
dealing with the first page which is
this URL now they reason that it's
giving us an empty object is because we
haven't specified any data that we want
to extract yet so it's just giving us an
empty object so what I want to do is
instead of returning book elements
directly let's convert it to an array by
using uh array. from and in that we're
going to pass in our book elements and
then let's use map so we're going to
Loop through each book okay so we'll say
for each book then I just want to to
return
book and then we're going to run this
again node scrape and now we get an
actual array of empty objects because I
still haven't selected any I haven't
extracted any data yet so the first
piece of data that I want to get is
going to be the title so let's get rid
of this return here and then let's say
cons title and then this is where the
structure comes into play you have to
know what you're selecting so we're
already in the the article with this
class of product pod and we want the H3
and in that is a link and that link has
a title attribute so why don't we use
that and we're just using you know
regular JavaScript code here so I'm
going to say book Dot and then query
selector and I want to select the H3 and
then the link inside the H3 and then I
want to get the
attribute of title
okay and then what I'm going to do next
is just return title so now let's run
web scrape again and see what that gives
us and you can see it gives me an array
of titles so we we've actually extracted
all the titles on the page of course
it's only the first page so in addition
to the title I want the price so let's
get rid of that return let's say cons
price and for the price we'll say book
do query SEL collector and we have that
class I think it's price color so if we
look right here we do have a a product
price div but in that is two paragraphs
and then a paragraph with a class of
price color so let's go back into the
query selector and let's select the
class of price uncore color and then we
want the text content within that and
then let's just return price and what we
should get if we run this next now is an
array of prices and there we go so we're
able to get the title we're able to get
the price let's get the the stock and
remember there's a a class of in stock
and availability so we can just check
for those classes so let's say stock and
let's say
book. query selector and I want to
select the class of
in stock and availability
okay and then in I just want to return
some text that says in stock if it is
and out of stock if it's not so what
we'll do is just add on a Turner here
and say in stock else then we'll say out
of
stock all right and then let's just do a
return of
stock and then we should get an array
and and you can see that they're all in
stock and then the last thing I want to
get is the rating and remember the
rating actually has a class of um uh
let's take a look again
here so
rating has a star rating class but then
it also has whatever it is one through
five it'll have that as a class name so
what we can do is just simply take the
class split it into an array where this
is zero and this is one as far as the
index and we'll get the the one index so
let's
go and say const and we'll call this
rating set that to
book. query selector and we want to
select the class of star Dash rating
okay they all have that and then get the
class
name so class name and then I'm going to
use split and I want to split by this
just a space because there's a space in
between both classes and I want the
second class which will be the one Index
right so if I do a console log of
rating and then we run node
scrape uh I'm sorry we need to return it
not log
it uh return
rating there we go so now we have just
all the the
ratings so all we have to do now is is
return all of that stuff not just one
which is what I've been doing so let's
return an object and in that object
we'll have the title we'll have the
price the
stock the rating oh you know what let's
get the link as well so up
here let's say cons link and set that to
book do query
selector and we just want to get the so
it's the 8 H3 has a link in it so we
want the a tag and then I want to get
the href attribute so we'll say get
attribute and we want the
HF okay so that should give us the link
so now down here let's just add in
link and then we'll console log that
let's run node
scrape and there we go so we make this a
little bigger and you can see now we
have uh just a bunch of objects that has
all the data for the books so we've
successfully scraped that the homepage
so now what I want to do is is save that
data into a Jason file you could save it
into a database whatever you want to do
with it so let's import the
fs module from FS so this is just the
node.js file system module and we're
going to go down to the bottom where we
have the console log and if you want to
still console log it you can I'm not but
I am just going to console log and say
data saved to and we'll call it books.
Json and then right above that we're
going to use the fs module and to keep
this simple I'm just going to use the
synchronous version because we don't
really need the
asynchronous and this takes in a file
name so it's going to be books.
Json and then I do want to just run it
through the Json stringify method cuz
the second argument is what we want to
put in that file so let's say
json.stringify
and we're going to pass in books that's
the data then we're going to pass in
null for the replacer and two for the
the space parameter so if it formats
nicely and we'll save that let's come
down here and let's run the file so node
scrape we see data save to books. Json
if we look over here it created a books.
Json file and in that is an array
with all the data so we could use this
for whatever we want if we wanted to you
know use it for an an API for our own
service our own website we could do that
um so yeah I mean that's that's pretty
much it that's how you use Puppeteer now
at the moment we're only getting the
data from this URL which is page one now
what if we want more than that what if
we want all the data or we want the
first five 10 pages whatever so now I'm
going to show you how we can handle
pagination so first thing let's let's go
right under where we create the page
variable and we're going to add a couple
variables here so the first is going to
be called all books which is going to be
set to an empty array and at the end of
this this will be this will is will be
what we actually save to our Json file
and then we're going to use let here and
we want the current page which is going
to start at one and you could start at
five or or 10 it doesn't really matter
it depends on the data you're looking
for but we're going to start at one I'm
using let because this will be
reassigned it'll be incremented and then
let's also add Max Pages which is the
number of pages we want to scrape in
this case I'm going to say 10 I think
there's 50 total but the more pages the
more data the longer it takes now the
URL we have to change this because again
this is only the first 20 books so I'm
actually going to change these quotes to
back ticks so we can have a dynamic
value in here and we want to change it
to if we go to the website here yeah so
I'm on page two right now so let's just
copy that or type it out whatever and
I'm going to put that in here except I'm
going to change the two to the dynamic
value of the current
page all right now we need to Loop over
the pages and do this stuff down here so
let's go right above the URL and I'm
going to use a while loop and I'm going
to say uh while the current page is less
than or equal to the max pages okay so
if there's any pages left then we're
going to keep on iterating and what
we're going to want to put in here is
basically everything except for where we
save the file so let's grab so basically
where this evaluate ends which is right
here so I'm going to take that and all
this stuff cut it and then put that that
into the while
loop all right now let's uh let's go
still within the while loop so let's see
the while loop ends right here I'm going
to go still within that and we're going
to then take our all books array and
we're going to push onto that I want to
push the books but keep the ones that
are there as well so let's use the
spread operator and books okay so every
time we iterate through a page we're
going to add the books and I I'll even
do a console log where we say let's put
some back ticks and we'll say books on
page and then whatever the current
page and then we'll put a colon right
here and then just a comma and then
books so basically it'll say books on
current on books on page two and then
it'll show an array of the books on page
two you don't have to do this but it's
just to to know what's going on and then
we'll just take the current page and
increment it so we just add one to it
and the last thing is down here where we
save our data instead of just books
we're going to be saving all
books and that should do it so I'm going
to save and let's go ahead and run node
scrape just going to make this a little
bigger so we can see what was actually
logged all right so you can see it's
logging all the objects and we get books
this is the last one books on page 10
and then it gives us that
array and and let's see we should have
right here books on page nine so it's
logging it all now let's check and see
if it was actually written to the file
and if we take a look here we
have a lot more than just 20
so yeah so we have 10 pages worth of
data and if you wanted to you could you
could get all 50 pages but yeah so
that's how we can not only scrape data
from a page but also use pagination
we're using our headless browser to
basically you know link click on the
link and go to the next page get the
data next page Etc and that's it so
that's scraping with node and Puppeteer
so now we're going to get into using
python with beautiful soup so now we're
going to scrape this website using
Python and beautiful soup so if you
watch the node and Puppeteer version
then this is very similar it's just
using different syntax obviously it's a
different language it's a different
framework um but the idea is is pretty
much the same so let's create uh a new
directory to work in I'm going to call
this web webscraper Das Python and then
I'm going to CD into webscraper Das
Python and then from here I'm just going
to open up visual studio code and open
up my integrated terminal now the very
first thing I want to do is create a
virtual environment because we're
installing packages I don't want to
install them globally and I'm assuming
you have basic basic knowledge of python
if you don't you can check out my python
crash course so let's say Python 3-m
venv and I'm going to call my
environment
EnV okay so that will create the
environment now we have to activate it
so let's say source and then uh EnV SL
bin SL
activate Okay so that's activated you
can see we have EnV in parenthesis here
now I'm going to install packages with
Pip so the two packages I want to
install are going to be requests so I
can make HTTP requests in my code and
then also beautiful
soup uh beautiful soup 4 is the package
name I spell that right B
yeah okay so now we have those installed
so let's now create a file and I'll call
this scrape
dopy and then I'll open up scrape dopy
and the first thing I'm going to do is
import what we need so we need
requests and then we also want to import
from bs4 we want to import beautiful
soup and then also um we need the Json
package so let's import that all right
now I'm going to Define my main function
which is going to be my just you know
the entry point to our application and
then before I do anything there I'm
going to run it so we'll say if Dore
name Dore
equals Dore
main then we're going to run main okay
and all I'm going to do in main right
now is call another function that I'm
going to create called Fetch books and
we're going to pass in the page number
which we'll pass in a one and then right
above that let's Define fetch uncore
books and that's going to take in uh
page number
and for now I'm just going to print the
page number and make sure oops make sure
everything's working so
far so then down here let's run Python 3
scrape and we get one good so let's get
rid of that print I I want to define a
couple variables first is going to be
the URL now in the node Puppeteer
version I just scraped the first page
first and then we added the pagination
I'm just going to include the pagination
right from the start here which means
that for our URL we need to use this
which has the slash catalog and then the
page number so I'm going to just grab
that and then I'm going to use an F
string here so F and then some quotes
and pass that in and instead of a two
that's going to be dynamic and that's
going to be our page number okay so
that's our URL variable now we need to
make the request I'm going to put the
response in a variable and we can make
the requests with
requests.get we're making a get request
to the
URL okay so that will get the the
response and then we want to have a a
beautiful soup object let's call this
soup set that to beautiful soup and we
pass in tha"
MQ00BUttqr0,"so web development is a very vast field
with a lot of myths and misconceptions
and in this video I just want to talk
about and even debunk some of the most
common myths when it comes to web
development now I know a lot of you guys
are developers so you might already know
a lot of the stuff but this is more for
beginners who are just starting out
learning to code and seeing a lot of
this stuff and seeing things that kind
of conflict with one another and just
having questions about what's true and
what isn't now some of these can be
debatable my goal isn't to claim
absolute Authority on what's true or not
most of us usually go off of our own
experiences but I did do a bunch of
research as well so it's not just my
experience and my goal is just to
provoke thought encourage a more nuanced
understanding and just provide Clarity
based on both P personal experience and
thorough research so let's jump in and
let's take a look at some of the common
myths or misconceptions when it comes to
web development
[Music]
all right so getting right into it myth
number one is that once you build a
website or web app that's it you're done
forever and many people think that
building a website or any software
project is kind of a one-time thing
which in most cases is objectively not
the case so launching your site is just
the beginning and a website is basically
a digital representation of your
business and as your business grows and
evolves so should your website and this
can pertain to different things like
design fun functionality content
security and in many cases you need
ongoing maintenance and this is a good
thing for web developers especially
Freelancers because there's always work
to be done and you can go back to the
client and offer to update their website
when I was freelancing I would always
offer a maintenance plan to my clients
and would include things like regular
updates adding content backups Security
checks and so on and this is a great way
to keep a steady St stream of income
coming in so myth number two is that you
need to learn everything and
technologies that are used for web
development are always changing and
evolving so it's literally impossible to
know everything and I actually recently
did a video on this um probably about
two months ago where I talk about
specialization and that's what I suggest
you pick a stack you pick a group of
Technologies specialize in that and
that'll make you more valuable to
employers and clients so you don't need
to learn everything but you need to
figure out what you do need to learn and
that can actually be pretty tricky in
itself so myth number three is that you
need a traditional college education and
degree while a degree in computer
science or a related field can be very
beneficial I'm definitely not saying
it's not I'm not saying it's a waste of
time or anything like that it just isn't
a strict requirement in many cases to
become a web developer and many
successful developers including myself
have built their careers through
alternative paths such as self learning
online courses boot camps or just
practical experience and the tech
industry values traditional education
but it also values skills portfolios and
just practical experience many times
over traditional education and being
able to demonstrate your ability to
build and maintain websites and
applications through a strong portfolio
can be just as effective if not more so
and there are of course companies that
do have that strict line where you do
have to have a degree but I feel like uh
or I know that those that's becoming
less common as time goes on so myth
number four is that web development is
easy and I've seen other types of
programmers kind of look down on web
development and say it's not true
software development which I think is
ridiculous of course there are other
roles that are more complex when getting
into you know lower level code but
webdev is still a complex field that
requires a lot of Knowledge and Skills
in fact I'd go as far as to say that you
need to learn more when it comes to web
development because there's so many
tools and Frameworks and they're
constantly changing so this is
especially true for for full stack
developers in addition to just you know
HTML CSS JavaScript you have front-end
Frameworks and tools you have backend
languages python Ruby no. JS PHP you
also need to to know how to manage
databases Version Control other build
tools you need to know how to optimize
your code and perform uh for performance
and for security you need to know how to
test code and fix bugs so you need to
know a lot of the the same things that
any other software developer needs to
know and software development in general
is is difficult unless you're some kind
of Genius so myth number five is that
front end and back end are are totally
separate while they are two distinct
areas of web development they're not
entirely separate the two sides of web
development work very closely together
to create a seamless and functional web
experience even if you're creating an
app with a completely separate front end
and backend you need to understand a lot
of the same stuff how rest apis work how
HTTP requests work you need to
understand how to pass data um from the
front end and back end and vice versa
sessions cookies everything is is very
intertwined I also think that SSR server
side rendering is kind of the future of
web Frameworks Like
nextjs Remix spell kit n Astro you can
build full stack applications with a
single code base and I actually just
updated my nextjs course where we
ditched the API routes and did
everything within server components and
actions so that line between front end
and back end is is really getting
blurrier and blurrier also if you work
with you know PHP and and tools like
WordPress you're doing both front-end
and backend development you're creating
themes and plugins which require both
front and backend
knowledge so myth number six is that web
development is dead and AI will replace
web developers and it's true that AI is
getting better and better and it's
definitely unknown and debatable as to
how much that's going to affect
developers and affect jobs I'm
definitely not saying there won't be an
effect already is however this isn't
exclusive to to software development you
can pretty much say that AI threatens
just about any job type web development
is um it's a very creative field and it
requires a lot of problem solving skills
and AI can help with that but it's not
just about writing code it's about
understanding the needs of the client
and the end user and just creating a
solution that meets those needs and AI
can't do better uh than humans at
understanding human emotion and I don't
know what's in store for the future I
nobody does but you in my opinion you
can't base all of your career decisions
on what may or may not happen you have
to focus on what you can do now and what
you enjoy doing also AI provides great
tools to help you become a better
developer so that that's just what I
choose to focus on and that's what I
would recommend so myth number seven is
web development is just about writing
code and while code cing is a critical
component it's it's part of a broader
process that includes aspects of design
planning user experience obviously
there's different roles in web
development front-end devs need to
understand design principles user
experience accessibility backend devs
need to understand databases service
side logic security and collaboration
and communication are also key skills in
web development especially these days
you need to be able to work with
designers project managers work with
clients if you you know you're
freelancing and you're dealing face Toof
face with clients there's a huge social
aspect to web development that many
people don't realize so just because
you're good at writing code doesn't
automatically mean that you're going to
be super
successful so myth number eight is that
WordPress developers are not real
developers and I've seen people say this
before that you know if if you work with
WordPress or or any CMS for that matter
you're not a real developer and I've
worked with a lot of Wordpress devs back
in the day and some of them were some of
the most talented people that I've ever
worked with and could create just about
anything in record time and most
professional WordPress developers they
know PHP JavaScript HTML CSS SQL they
know how to create custom themes and
plugins they know how to optimize a site
for performance and security they know
how to work with databases and apis they
know how to deploy a site to a server
and maintain it it they know how to test
their code fix bugs so they really know
the inside and out of a website and
they're real developers and sure you
might have some beginners that just
install themes and plugins but if they
keep working with WordPress they're
they're eventually going to need to
learn how to create those custom themes
and plugins otherwise they're not going
to be able to make a living and that's
pretty much where I started I started
out just being one of those people that
just installs themes and plugins but
eventually I I learned to code I learned
to customize and you know build things
that my clients needed and then it led
me down the path to like JavaScript and
node.js and and you know full stack
development so uh I definitely wouldn't
say that WordPress developers are not
real
developers so myth number nine is that
you need a fancy design I think a lot of
people think to you know to to have a a
website or application that's successful
it needs to be you know this this
fantastic design design while visually
appealing designs they can enhance user
experience but it doesn't even come
close to being the most important thing
in a successful website a website needs
to be functional easy to use
content uh responsive consistent and
accessible and it needs to load quickly
it needs to be optimized for search
engines all of these things are more
important than a pretty design and you
can have the most beautiful website in
the world but if it doesn't work
properly your users are going to leave
and you can have the ugliest website in
the world but if it works well users
will stay if you look at some of the
most popular websites like Google
Craigslist stack Overflow Reddit uh
Wikipedia these are not very visually
appealing right nothing really jumps out
you don't say wow this looks great but
they're some of the most successful
websites in the world because they're
functional and they're easy to use and
user experience is is more important
than design so although good you know
really fancy designs they can in some
ways enhance user experience and they
can attract people initially to to your
website but never give up functionality
for design so some people think that the
more features a website has the better
it is but that's not really true in fact
in many cases it's the opposite a
website should only have the features
that are necessary to meet the needs of
the client and the end user and adding
unnecessary features can really make a
website bloated and and slow as well as
just confuse the user so you should
focus on creating a website that's
simple intuitive and easy to use and
this will make the user experience much
better and and keep people coming back
and you can always add more features
later as you know the needs of the the
client and the enduser change so myth
number 11 you need a team to build a
successful website and I don't think
this is true I think that this myth can
make aspiring solo uh entrepreneurs or
small business owners feel like they
lack the resources to build highquality
sites on their own I'll be realistic and
say that a single person couldn't build
Google and maintain it you know on their
own for years and have the same type of
success however a lot of those platforms
did start with a single person or a
small team and I'd say that you can
start anything by yourself you just need
to be able to expand as the project
scales and there's also many types of
projects that you can run on your own
forever anything from a simple blog to a
powerful SAS or e-commerce company
especially with all all the tools that
are available from Frameworks to no code
tools it's definitely possible the next
myth is that not all websites need to be
responsive and I've been doing this for
a while and I I do remember when having
a mobile version of a website was kind
of an add-on now it's a requirement it
has been for years mobile usage is
increasing every year and it's not going
to stop so you need to make sure that
your website
are responsive that they look good on
all devices and this isn't this is not
just for use experience but also for SEO
Google ranks mobile friendly websites
higher in search results and CSS
Frameworks like tailwind and bootstrap
they make it really easy to create
responsive websites even if you're not
great with CSS and design and in my
opinion the only time you you don't need
to worry about responsiveness is if
you're building like an internal tool
that's only going to be used on desktops
by certain employees or even just by
yourself then it's okay but if it's a
public facing site and you're getting
new users then you're definitely going
to want it to be
responsive so myth number 13 a website
needs to be perfect before launching and
this is something that I've seen over
and over and have even done myself you
don't want to launch a project until
it's 100% complete but the truth is a
website is never complete and there's
always something that can be improved so
you should launch your website as soon
as it's functional and then iterate on
it you can always add new features and
improve the design and and fix bugs
after the launch and I'm not saying
launch a site that's you know just full
of errors but if everything seems to be
working then launch it if then problems
arise then you address it and in fact I
think it's better to launch early and
get feedback from users so that you can
make improvements based on that feedback
that's something called an MVP or a
minimum viable prod prod you launch the
smallest version of your product that's
still functional and then build it build
on it based on that user feedback and
this is a much better approach than
trying to build the perfect website
before launching because you're never
going to end up launching so myth 14 SEO
is just about keywords SEO is a very
complex field that involves much more
than just keywords keywords are
important you know they're they're just
one piece of the puzzle though SEO also
involves technical aspects such as site
speed mobile friendliness security it
also involves user experience content
quality and backlinks and SEO is always
changing and evolving so it's important
to stay up to date with the latest
trends and best practices there's a lot
of tools that you can use you know go uh
Google analytics Google search console
sem Rush Etc and you can also hire an
SEO expert to help with your websites
SEO and I'd say another misconception is
that SEO is a one-time thing it's it's
not it's an ongoing process that
requires regular monitoring and updates
and then the last myth is that you need
to use the latest Technologies the
choice of Technologies should be based
on the specific needs of the project
older stable Technologies can be just as
effective if they meet the requirements
and they're well supported and I'd also
say that
prioritizing um stable proven
Technologies and Frameworks can be more
beneficial in terms of long-term
maintenance and compatibility and I see
a lot of people get worked up because
the framework version they're using is
is one or two versions behind if it
works it works and you can always update
it later and I've seen people rewrite
their entire project because they were
using an older version of a framework
and that's just a waste of time and
money in many cases you only need to
update if there's a security issue or a
feature that you need in in the new
version all right so those are the 15
myths that I have for you of course of
course uh my own opinions and experience
influence everything I've said here but
I think that these are pretty common
myths and I've seen these you know over
and over Through The Years hopefully you
found this video useful and hopefully it
cleared up some misconceptions
especially for beginners and if you have
any other myths or you have any opinion
on any of these then let us know in the
comments"
VeNfHj6MhgA,"hey guys welcome to my vue.js crash
course so this is a course that's
designed to get you up and running with
vue.js as quick as possible and it's
scared toward beginners so if you've
never used vue.js before if you just
dabbled with it or even if you've worked
with it but you want some Refreshers or
you want to learn about the composition
API then you're in the right place and
there's going to be a few different
parts to this course so first we're
going to go through some slides and talk
about what view is and how it works and
that shouldn't take very long probably
under 10 minutes or so and then I'm
going to show you how to get up and
running very quickly using the CDN which
is the fastest way to use view although
you should only use that for really
small projects and testing and just
messing around for larger projects we
use something called create view which
is ultimately what we'll be using so
after we do that we'll get into set
getting set up with create View and
we'll go over the fundamentals of
components directives data methods Etc
uh we're going to look at a very basic
task project I wouldn't even call it an
app it's just a project to experiment
with and learn different things
different directives and so on and then
after that we'll move on to our main job
listing website and since view is a
front-end framework we need a backend
for data so we're going to be using
something called Json server which is a
library that allows us to create
basically a mock rest API and we'll
start with some hardcoded job data but
then we'll add some Dynamic data from
the API and we'll learn how to make
requests and so on so I'll have the the
template files the HTML with the
Tailwind classes and all that available
for you in the repo as well if you took
my latest react crash course it's the
same exact application and that was
intentional so that you can compare the
two Frameworks and I'll also be creating
an angular and a spelt version of that
joob listing project as well because
that's that's essentially the reason for
these crash courses is so you can just
get your feet wet and you can compare
and contrast with other Frameworks and
then you can decide on which one you
want to specialize in all right so relax
get a coffee or tea or whatever it is
that you drink and let's get started
learning vue.js
[Music]
this video is sponsored by daily dodev
which is a platform that lets developers
stay up to date with current Tech and
I've used the daily dodev Chrome
extension for over a year now so it
opens up automatically when I open open
a new tab and there's always something
that catches my eye in fact there's been
a bunch of articles that have given me
inspiration and ideas for new videos and
it can often feel like you're falling
behind because it seems like every day
there's new trends and new technologies
that come out and daily dodev compiles
information from all over the web and
you can even set up your own custom
feeds with specific tags of the type of
content that you want to follow and you
can manage categories content types and
block certain tags you can also create
Squad SS and I've recently created a
public traversy media Squad so feel free
to join and stay up to date with my
latest content so visit daily. deev
today and download the extension or use
the web version all right so as with any
of my crash courses we're going to start
off by defining what VJs is so it's a
progressive JavaScript framework used
for building user interfaces and single
page applications or Spas although you
do have meta Frameworks now such as n
and gridsum where you can build serers
side rendered apps as well as static
websites but we're sticking to spas in
in this project or in this course so
it's designed to be simple flexible and
incrementally adoptable meaning you can
start using it for small parts of your
application and and then gradually scale
up and view makes it easy for developers
to integrate it into projects of all
sizes whether you're just adding some
interactivity to an existing web page or
building a complex web application from
script ratch and with its reactive data
binding and component-based architecture
VJs helps developers create Dynamic and
interactive experiences for users in a
very straightforward and efficient way
so view was created back in 2013 By a
developer an independent developer named
Evan U who is I believe currently based
in Singapore at least that's what I know
from his bio and the reason that I I
like to mention that is because I think
that the fact that Vue wasn't created by
a Google or a Facebook or any other Tech
Giant like most of the front-end
Frameworks were and the fact that it
still has the popularity that it has I
think that speaks volumes about the
framework and about its quality and
about its Community now as far as
prerequisites a lot of people ask me
when am I ready to learn a framework and
the answer to that is a tough one
because everyone has a different
learning ability and different ways that
they like to learn I know people that
learn JavaScript at the same time that
they learned react or view however I
don't think that's the optimal way to do
it for most people I think you should
first learn the building blocks HTML CSS
JavaScript and when I say JavaScript I
don't mean just learn what a variable
and a function is I mean learn it to the
point where you can build at least some
kind of of fairly simple front-end
Project without any framework so I
usually recommend the following
JavaScript fundamentals so Loops
functions objects arrays things like
that events and Dom manipulation the
fetch API and just basic HTTP so learn
how to make a request to public apis get
data back send a post request Etc um
things like Arrow functions high order
array methods destructuring basically
all the es6 features that we got I think
you should know that stuff because
because you're just going to run into
that constantly and you don't want to
get mixed up in you know what is
actually JavaScript and what is actually
VJs or or react or whatever framework
you're learning you want to know have a
solid understanding of JavaScript and
then I think learning npm is important
learning the node package manager
because you'll be using that constantly
including using it to get set up with
your initial VJs project now before we
talk specifically about vue.js let's
talk about the role of front-end
Frameworks and why they were created and
some of the advantages that you have uh
cuz some people don't understand why you
would use something like VI VI or react
or angular so one you have enhanced user
experience so front-end Frameworks are
designed to make it easier for
developers to create uh interactive user
interfaces they provide a lot of
functionality out of the box and allow
you to focus on the things that are
unique to your application and if you
try to build a really interactive
interface with just vanilla JavaScript
it can get really messy really quick and
I'm not saying that you can't do it but
it can be uh it just be really difficult
and it's it's kind of like Reinventing
the wheel so next you have organization
front-end Frameworks are designed to
make it easier for developers to
organize their code the UI is broken
into components and each component has
its own State its own properties things
like that and they're also essential um
frontend Frameworks are also essential
for collaboration so if you have five
different developers create an interface
with vanilla JavaScript you're going to
get five completely different code bases
it's going to they're going to all be
have their own style by using a
framework everyone can be on the same
page and it's much easier to collab and
to build with a team so performance
front-end Frameworks are optimized for
performance they they have a lot of
built-in features such as the virtual
Dom which is a way of rendering the
document object model without having to
render the entire Dom every time this is
a huge performance boost and gives users
a really fast UI
and then one of the key benefits of
front-end Frameworks is their modularity
they allow developers to break down
their applications into smaller reusable
components and this modular approach not
only makes the codebase more manageable
and easier to understand but it also
promotes reusability so those are just
some of the reasons why we use front-end
Frameworks I'm not saying that you
should always use one in fact that's
something I see a lot of people doing
these days is using view or react or
felt to create something like a very
simple landing page and I think that
that can just over complicate things so
you have to look at each project
individually all right so that's just
the role of front-end Frameworks now
let's talk about why view because
there's there's quite a few out there so
first we have Simplicity and
approachability VJs is renowned for its
Simplicity and ease of integration into
existing projects and it has a very
gentle learning curve and it makes it
makes it accessible to developers with
varying levels of experience and it
allows them to quickly get started and
become productive rather than learning
something like angular and I don't mean
to trash angular but it is a very
difficult framework to learn and it's
going to take you a lot more time to
start building stuff so flexibility VJs
is designed to be incrementally
adoptable again that means that you can
introduce it into your projects
gradually and whether you need to build
a small widget or a full-fledged single
page application VJs scales effortlessly
and uh it it allows you to meet very
diverse project requirements next we
have performance and size so VJs offers
excellent performance due to its
efficient rendering mechanisms including
the virtual Dom additionally View's core
library is very lightweight which uh
contributes to faster initial load times
and better runtime performance and it's
known to be one of the fastest front-end
Frameworks around view promotes uh
component-based architecture and
components are self-contained units that
can be reused across different parts of
your application fostering
maintainability and code reusability VJs
also has a really Vibrant Community and
Rich ecosystem of libraries tools and
plugins in addition to building single
page applications you have meta
Frameworks like nujs which allows you to
build serers side rendered applications
as well as Frameworks like gridsum which
allows you to build static websites so
VI has a great ecosystem that is similar
to to that of react now choosing VJs
over react spelt angular it often boils
down to personal preference and you
should also take into account what's
being used in the industry and
especially in your area but I'm also of
the opinion that you should enjoy the
framework that you're working with all
the time so my advice is to always try
the framework s that interest you that's
again that's why I create these crash
courses so you can get your feet wet and
create something and see which one
really clicks with you and I think that
building the same project with multiple
Frameworks really gives you a lot of
insight so as with any other front-end
JavaScript framework vuejs is built
around the concept of components and
components are reusable selfcontain
pieces of code that can be easily
dropped into different projects and view
components a very simple structure
that's broken into three parts
essentially so first we have the logic
which is the JavaScript and this is
wrapped in script tags this is in a in a
an actual view file your components are
have a do view extension and this is
where you would Define any state or data
as well as any methods events Imports
things like that then you have your
template output which consists of HTML
that will be rendered however we can can
also include Dynamic elements within
this template such as variables Loops
conditionals um using something called
directives and we'll cover these later
and then you have the style which is the
CSS and you can add scoped which means
that the styling will only pertain to
that specific
component so this is just a very simple
example uh I don't even have any
JavaScript or css but you can see how
it's broke it's clearly broken up into
those three parts and you might not even
have any sty or you might not even have
any any logic it could just be a dumb
component which is just a just something
that displays something and then you
should also be aware of the the two ways
to build view components one is the
options API which is kind of the
traditional way of of doing things um
where we everything is within objects or
options the data the methods Etc and
it's a it's more straightforward and
it's a it can be a good choice for
smaller projects however the composition
API which is uh released with vue3 is
more flexible and allows you to create
more complex components and I'm going to
give you an example of both but overall
I want to use the newer composition API
and if you really want to get into the
options API you can also look at my my
older vue.js crash course because that's
what we used in that one with both ways
you can Define State data methods life
cycle hooks you can have certain things
happen at certain times such as when the
comp component is is done loading Etc so
I mean there's they're similar in what
they do but the way that you write them
is it's pretty different so the last
slide that I have is just getting set up
there's different ways to do this the
easiest way is to use the CDN although
this isn't really the recommended way if
you're building any serious project so
basically you can just include the URL
in uh in a script tag and you can just
use vue.js you can initialize a view in
and go from there and I'm going to show
you an example of how to do this as well
as using Create view now there's
something called the vew CLI which was
used and popular for a very long time
it's a command line interface to
scaffold up a view project it includes a
rich collection of official plugins and
Integrations however the vli isn't
recommended for new projects anymore uh
and it's in I believe it's in
maintenance mode meaning that it will
only receive bug fixes and security
updates if you go to the VCI so view CLI
website you'll see that it's no longer
recommended and they actually suggest
using Create View and create view uses
the V web server and frontend Tool and
it includes features like hot reloading
out of the Bots typescript and other
features and it also has a re Rich
ecosystem of plugins and Integrations so
we can set up a project with one single
command and this is what we'll be using
for our job listings app and then
another way to use View is with meta
Frameworks just like react has nextjs
view has njs which allows you to create
server side rendered applications and
then gridsome is a static site generator
that uses view it's comparable to Gatsby
and react so these Frameworks have their
own tools to get set up and they're
definitely things that I think you
should check out but I always suggest
learning the core framework first and
learn how to build single page
applications then move on to you know
SSR and and SSG so that's it for slides
now we're going to jump in and like I
said I'm just going to show you real
quick how to use view with the CDN and
then we can jump in and use create view
all right guys so this is the vue.js
documentation which is pretty good and
I'd suggest just keeping it open as a
supplement to to this crash course and
you can check things out there's
obviously going to be stuff in here
we're not going to go over CU this is
meant to be kind of a beginner's guide
now you can switch here from composition
to the options AP and it will change the
the code examples because the logic in
your in your view components is going to
be different depending on which API you
use we're going to start off using the
options API but then ultimately we're
going to use the composition API in our
main project so to get started there's a
few ways that you can do it the
recommended way is to run create View
and that will scaffold up a project for
you and you can have your your single
file file components meaning you can
have components in a file with a view
extension and it allows you to build you
know really scalable applications but if
you just want to try things out or you
just have a little bit of functionality
you want to add to an existing project
you can use the CDN and that's what I
want to show you first so we're just
going to spend a few minutes using the
CDN so I'm going to copy this script tag
right here and we're going to just go
into I have this empty folder called
view test and I'm going to open that
with vs code and then we're just going
to create an
index.html and just scaffold up an HTML
document we'll say view test and then
let's add in that script tag with the
CDN and we now have access to the The
View object so in the body what I'm
going to do is just have an ID of app
and if if you're familiar with how react
works if you've ever used react or
angular in a single page application you
have a specific div specific element and
you basically bind your UI to that
element and that's what this is so down
at the bottom let's add in some script
tags and then I'm going to create a
variable called app and what we can do
is use the view object to create a new
instance or to create a new app and
there's a um method called create app
and what that's going to take in is an
object and then here we can Define any
any data or methods that we want on this
in this app and the data and for now
we're using the options API this is
going to be a function called data and
that returns an object okay it can be a
little confusing because some people
think it's you know when you first get
started it's something like this so you
have a data object but it's not it's a
function called data and returns an
object and then here we'll just Define
something like let's just say message
and we'll say hello from
view okay and now what we can do is go
under where we created the app variable
and we can mount that so app. mount to
the ID of app or whatever you choose to
to call this and now inside this div we
should be able to use interpolation
which is going to be the it's going to
be double curly braces that's a syntax
and then we can use any of the variables
that we have in our data so if I go
ahead and save this and I'm just going
to open it with live server we get hello
from
view all right so any data we put in
here we can then add in here and it's
it's basically Dynamic now we can also
have events and methods and and I'm
going to go over this stuff in depth
later on I'm just doing this really
quick so you can see how useful it is to
just use in your projects but let's go
we'll actually put uh an H1
around this
message okay and then underneath that
let's create a
button and I'll just say click me and
then we can add an event by doing at and
then the event which is going to be a
click and then set that to the name of a
method which I'll just call we'll just
call it
uh click me all right so now this method
we can Define down here in our app so we
want to go under the data function which
ends right here and then we're going to
say methods and that's going to be an
object of methods so let's say click
me and then all I'm going to do here is
just console log and we'll say
button
clicked okay so now we have the button
and if I open up my console and I click
we see in the console button
clicked okay so you can see this is very
easy to implement and it's nice and
structured so you have all your your
data your state and then you have uh any
methods and also you have access to this
data from within your method so for
instance I could do let's say this so we
use the this keyword message and we'll
just say
updated message so now if I click this
that changes to updated message all
right so that's about as far as I want
to go with the CDN just wanted to show
you how it works now we'll go ahead and
create a new application using Create
view so I'm just going to close this up
and we can delete
that okay and then I'm going to open up
a terminal and just navigate to wherever
you want to create this and we're going
to run npm create space view at latest
and then whatever you want to call the
folder I'm going to call it view crash
2024 okay so this is going to ask us a
few questions and what we want to
include if you want typescript you can
I'm going to say no you can also have
jsx support within your templates we'll
say no and then the view router is
important and I want to I do want to use
the view router in our our project but
I'm not going to say yes here because
I'm going to show you how to set it up
from scratch so we're going to say no
for now and then paa is a state
management Library similar to like Redux
and if you have a larger application you
might want to include it but we're going
to say no we're not doing any testing so
tools for unit testing and and end to
end testing we're going to say no yes
lint no view Dev tools no and then let's
CD into that folder and we do have to
run npm install or npmi to install the
dependencies okay then once that's done
let's uh I'm just going to go ahead and
open up this folder in vs
code and I'm going to go over all the
files and not all but most of these
files and folders in a minute but but I
just want to mention for extensions you
want to install a view extensions and
there's a few to choose from but what I
would recommend is this one right here
view official um this is going to give
you all the syntax highlighting and
stuff that you need if you don't install
a view extension and you you go to a
view file you're not going to have the
correct highlighting and it's it's not
going to be a very good experience so
just be sure to install this one or one
of the other ones if if you know of
another one all right so let's look at
the package Json first it's pretty
simple we just have the view framework
as a a dependency we have vit as a Dev
dependency that's our our Dev server and
our Dev tool and that there's a
ecosystem of plugins for V and view this
plug-in view is one of them and that's
what allows us to use vue.js there's
also a react plugin and many others and
then for scripts we have the dev script
which will run our local Dev server we
have the build script which will uh
create our production build and then we
can preview our production build with
preview so pretty simple package.json we
also have the the V config and this is
where you would bring in your plugin
such as the view plugin and initialize
it in the plugins array one thing I like
to do is change the port because by
default the dev server uses I believe
it's 5173 or 5713 I like to use 3,000 so
I'm going to add the server object here
and in that I'm going to say port and
set that to 3,000 you don't have to do
that that's just something I like to
have my my frontend projects on Port
3000 so the index HTML this is the the
single page of the single page
application so this is what the browser
loads as you can see there's an an
element with the ID of app just like we
had when I used the CDN and that's where
our UI is rendered and that comes from
the main JS file in the source folder
which is the basically the entry point
to view Js and since we're using vit
it's this is included as a module
because vit has U es module support so
unlike webpack where it would be you
know a compiled u u bundled Javascript
file so the title I'm just going to
change that to view
jobs and we can save that close it up
and then the source folder this is where
you know all the magic happens this is
where all of our components go the main
JS this is the entry point and again
we're just using we're we're bringing in
create app just like I did when we had
the CDN and we're mounting to that that
div that I showed you with the ID of app
and what we're mounting to it is this
app. view component which is right here
in the source folder and this is
bringing in some other components from
the components folder so and you don't
have to worry about this code we're
going to wipe it all away but uh as you
can see there's a script template and
then Style so it has those three main
parts um and then for the CSS this main
CSS um we're actually going to be using
Tailwind for our project so I'll show
you how to get that set up there's a
couple steps we have to go through but
yeah that's pretty much the structure of
of what you get when you scaffold up a a
view app so I want to just clean things
up a little bit actually let's run the
dev server first so if we run npm run
Dev as you can see see for me it's
starting on 3000 um because of that what
I added in the config file and it's just
the the landing page it's just this
stuff here this hello world and so on
but what I want to do is just get rid of
all this so in the components folder we
can actually delete everything here and
in the app. view I'm going to just for
now get rid of the script and let's
clear everything out of the
template uh we want to keep the template
tags but clear everything out and then
clear out all the style and for now
we'll just have an H1 and we'll just say
um I don't know we'll say hello or let's
just say view
jobs even though we're going to do some
some stuff first just to demonstrate
what certain directives are and so on
before we actually start on our
application but as you can see now it's
just showing the the template here now
before we do anything else I just want
to go over a few things so as I said as
I showed you we have our script that can
go at the top but you can also put your
script down here if you want which was
more of the convention with uh with vue2
but I like to have it at the top and
then you can have your style and you can
scope that to this specific component by
saying scoped so anything I put in here
like if I put H1 and I make that red
that's only going to be in this the H1s
that are in this particular
component now just like we had in the
where we use the CDN we can Define data
in this component let's do that so we'll
open up our script tag and we're going
to export default in objects now I'm as
I said I'm going to start with the
options API and we're just going to do a
few things I'll show you some directives
and then I'm going to go back in and and
switch it up and convert it to the the
composition API so you have a a clear
definition of of both apis so with the
options API you do have to export
default from the script so you have
access to the data and methods in your
template so in this export default we
can Define our function called data and
that will return an object and in that
we can put our data so let's just say
name and we'll say John Doe all right
now since I have this this name I can
use that down here so in this H1 I'll
replace that and I'm going to use
interpolation with double curly braces
and I can just put name and as you can
see it's now outputting John Doe so
that's how we can create data and use it
within our template now we're going to
look at something called directives
which allow us to uh to basically make
this template Dynamic and we can have
things like conditionals and loops and
events so let's um let's start off by
adding another piece of data here called
status and I'm going to set that to true
for now just a Boolean and then under
the H1 I'm going to have a paragraph and
the first um directive I want to show
you is V if and all these directives are
going to start with v-h and you use them
just like any HTML attribute so let's
say V if and then I'll say status okay
so it's going to look at that status
data and I'm going to say user is active
and if I save that now we can see user
is active on the screen and if I change
this status to false now we don't see it
so that's V if just like any if
statement and we also have V else so if
I go under that and let's have a
paragraph and say um v- else and then
I'll say user is inactive if I do that
now user is inactive and if I were to
set that to true then user is active now
I'm going to change this from a Boolean
to a string and we'll say active and I'm
going to show you V else if so let's say
well first of all instead of just saying
if status let's add in here if status is
equal to active then user is active and
then we'll have another paragraph and
we'll say
v- else if equals status and let's say
if that status is equal to pending then
we'll say
user is pending okay so now we see user
is active if I change this to inactive
or anything anything at all it's that's
not active or pending then it's going to
show this right user is inactive and if
I add pending as the status then user is
pending all right so that's how you can
use those conditional directives now the
next one I want to show you is V4 which
you can use to iterate over array items
so let's go ahead and um and add some
data here I'm going to call this
tasks and set that to an array and we'll
just use an array of strings we'll say
task
one task
two and task 3 okay and then what I want
to do is down here under these
paragraphs I want to Loop through
actually let's put an H3 and just say
tasks and we're not building like an
actual app here it's just it's just to
give you an example of these directives
so let's say we want a ul and we want a
list item item for each task so what we
can do is create a list item and then we
can use
v-4 and it's basically a four in Loop we
can say task in tasks okay so this task
refers to the data up here right and you
can call this whatever you want but
since we use task we'll be able to use
that within our list item now when you
create uh a list like this just like
with react you have to add a key so we
do that by doing colon key key and then
I'm just going to set that to the task
it should be something
unique all right and then inside the LI
let's just output a t the task itself
with
interpolation so now if I save that you
can see we have task one two and three
in list items so that's V4 now the next
one we have is V bind which allows you
to bind a piece of data to an attribute
so for instance if we have let's say
link I'm just going to use
https
google.com and then let's say down here
we have an a tag and I want to bind that
link to the href what I can do is say
v-bind colon href and then set that to
link and I'll say click for Google and
now if I click that it should go to
google.com that was just cached uh so
yeah so you can bind any data to to any
attribute now this is the long way of
doing it I'm going to just copy this
down and comment that out because I want
you guys to have this um but the shorter
way is to get rid of V bind and just
have the colon and then the and then the
um the attribute okay so when you use a
colon what you're saying is this is
going to be dynamic this this is not
just text of Link it's a variable okay
if we do that without the colon then
we're just setting it to a string of
Link
so that's V bind now for events there's
a couple ways to do it I already showed
you one of them and I'll I'll revisit
that but we can use the V on directive
so let's create a button I'm just going
to put a space here and let's say button
and let's say change
status okay and then what I want to do
here is say v- on colon click and then
set that to u a function called toggle
status
right so when I I set this V on click
and you can use other events too but we
want to click and then we can create a
method so just like I showed you earlier
let's go under the data and say
methods and then in here I'll put toggle
status like
that and what I'm going to do is change
the status and I can access any of this
data I can access in the methods by
using this and this is with the options
API it's different with composition
which I'll get to soon but I'm going to
go ahead and just have an an if else if
here so let's say if this. status is
equal to
active then I'm going to set this.
status equal
to pending okay else
if this do status is equal
to pending then I'm going to set it to
inactive so this do status
equals inactive and then we'll have an
else and then we'll set this do status
equal to active all right so now we have
this button and I'm just going to put a
line break right
here okay and if I click change status
you'll see that now says user is
inactive user is active user is pending
so it's reacting to my my button click
here now the the shorter way to do an
event I'm just going to comment that
down is we can do instead of v on colon
we can replace that with the at symbol
and just say at click and now you'll see
that that still does the same thing all
right so I mean in my experience you see
this more than you do
this all right so yeah I think that
that's that's prett"
Port 5,000 that'll be our our back end
for jobs and you put it on 5,000 it's
5,000 that I can't really stop so let's
at 5,000 yours will work as long as you
8,000 so now if I run npm run server now
it's running at 8,000 and I actually
have this endpoint of Local Host 8,000
http Local Host port and mine is 8,000
Local Host 8,000 jobs getting it back if
HTTP Local Host and then M's 8,000 if
you used 5,000 for your server then
explicitly saying Local Host 8,000
CnH3kAXSrmU,"what's going on guys welcome to my
expressjs crash course so this is a
revamped updated version of the one that
I did about 5 years ago I also just
revamped my node.js crash course you can
find a link to that in the description
node.js is a JavaScript runtime
environment and if you're brand new to
node I would definitely suggest that you
watch that one first it's going to give
you a better understanding of what
nodejs is and how it works but if you're
ready to dive into Express let's get
started
[Music]
all right so we're going to be covering
a lot of stuff in this video we're going
to spend just a few minutes in some
slides to talk about what Express is and
what it's used for then we'll jump into
uh uh Express project and we'll look at
things like creating routes the request
response objects middleware error
handling and more so let's first
establish what Express is so Express is
a minimal and flexible noj s web
framework that provides a robust set of
features for web and mobile applications
and it's used for both server side
applications as well as apis and
microservices I would say that it's most
used for building backend apis that are
consumed by front-end Frameworks and
you've probably heard of the M Stack
which is mongod DB Express react node.js
there's also the mean stack the mevan
stack where you can swap out uh react
for angular or view or really any
front-end technology that you want even
just vanilla JavaScript so it's a very
popular framework in fact I would say
it's the framework for node.js there are
others I'd say there's even Frameworks
that are more powerful but Express has
really established itself as the go-to
framework for node.js and it's used by
huge companies like IBM Uber Nike and a
bunch of others it's also a really
popular option for smaller projects and
start UPS so Express simplifies the
process of handling HTTP requests if you
watch my node.js crash course we started
to build an API from scratch just using
the HTTP module and you saw how
difficult and and how lowlevel it was
well Express gives us a ton of tools to
work with to make building apis and just
working with HTTP much easier and
express is a very fast and unopinionated
framework which I just want to spend a
couple minutes on so when it comes to
web Frameworks you have two types you
have opinionated and unopinionated and
opinionated framework is one that has a
lot of rules and conventions that you
need to follow so there's there's
basically recommended ways of doing
things and it's very structured it's
it's going to guide you in in a certain
direction they also come with or they
usually come with a lot of bells and
whistles out of the box things like
authentication CIS uh database ORS and
some examples of opinionated Frameworks
are Ruby on Rails jeno laravel uh if
we're talking about node.js in
particular nestjs and Adonis are
opinionated Frameworks for node and I
would say in general opinionated
Frameworks are more popular I think node
and express is is really the only
exception I can think of where the most
popular framework is a minimalistic
unopinionated one so opinionated
Frameworks are extremely flexible and
there's not really a right way to do
things you can structure your
application however you want and use
whatever libraries you want you can use
whatever database you want it's very
minimalistic and it's up to you to to
decide how you want to structure your
application there's not as many rules to
follow but you also don't get as many uh
as many features or bells and whistles
out of the box but you do get the
necessities and of course you can
install other packages for the
functionality that you need so there's
definitely uh pros and cons to both I
would say it's really features versus
Freedom depends on one what means more
to you for that
project so there's a few things that you
should know before you jump into Express
you should have a good understanding of
JavaScript obviously all the
fundamentals as well as all the the es6
features Arrow functions destructuring
promises a syn await um you should have
a basic understanding of node.js you
don't have to know a lot in fact I would
say watching my 2-hour crash course is
plenty before you jump into Express you
should know how to use npm how to
install packages and in many cases
you'll be working with Json data but you
can also use a template engine like ejs
or pug and I'm going to actually give
you an example of that later on um but
yeah you can build both server side
applications as well as Json apis
microservices Etc and if you're learning
let's say the M Stack
it doesn't really matter which order you
learn the Technologies if you want to
learn react and you want to learn the
front end first that's fine or you could
do nod and express first and then learn
react what's really important is that
you you know JavaScript before you jump
to either one of those front or back end
now as far as what we're going to do
here obviously we're going to set up a
server we're going to look at routing
how to handle requests we're going to
look at the request and response cycle
and the request response objects to see
how we can get things like the response
body how we can get the headers um
things like that we're going to look at
custom middleware so middleware
functions basically sit in between the
request and response and you can do all
sorts of things we'll create some custom
logging middleware we're going to look
at crud operations so create read update
and delete we're basically going to
create a full crud API uh at the end
we'll look at template engines we're
going to use the ejs which is embedded
JavaScript um cuz you can render HTML
Pages directly from your server as well
it doesn't have to be Json data we're
going to look at error handling creating
custom error handling middleware
thirdparty npm packages controllers so
I'm going to show you how we can
actually clean up our code and and take
take our code out of the route file and
put it into a file that has a bunch of
controller methods fetching data from
the front end so I'll give you an
example of how we can create a static
file server and we can basically have
frontend JavaScript that will make a
request and fetch data from our Express
API and we'll look at environment
variables we look at a lot more too but
these are the the the core things that I
want to go over all right so that's it
for slides let's jump in and get started
okay so this is Express js. this is
where you can find the documentation
there's some guides here on routing and
middleware and you can use this as kind
of a supplement to this crash course so
to install Express just like any other
package you can just install it with npm
so we'll get to that but we're going to
jump into vs code or open whatever text
editor you use and go into some empty
folder where you want to create this
project now this isn't uh um an actual
project that we're going to be working
on um like I do in many of my videos
we're just going to kind of explore uh
we will be building a crud API it'll be
ad Json API that will create read up
update and delete posts but we're also
going to look at loading HTML files
we're going to look at using template
engines creating middleware error
handling uh all kinds of stuff all right
so just open up a folder and in our
terminal since this is a nodejs project
and obviously you have to have node
installed if you don't just go to
nodejs.org so the first thing you're
going to want to do is create a
package.json file and I'm not going to
explain every single little detail like
what a package.json file file is because
you should know that if you don't just
go ahead and watch the node crash course
so we're going to run npm in knit and
I'm just going to do dashy so we don't
have to go through the questions and
that will create the package.json file
with all the defaults okay now to
install Express as you saw on the
homepage we can simply run npm install
or I and then
Express okay and that will get added as
a dependency as you can see right here
it also creates the node modules folder
now at this point I usually like to
create a dog ignore file and what
that'll do is it'll whatever you put in
here it will not be pushed to your git
repository and you never want to push
your node modules folder so you pretty
much always want to create this and I'm
also going to putv in here just in case
we have an environment uhv file usually
you don't want to push that either
because that's usually where you have
things like API Keys things you don't
want to share
all right so let's create an entry point
and I'm going to call it
server.js and typically the convention I
like to use is if I'm creating an API or
like a M Stack application where I'm
serving Json data I'll call it server.js
the entry point if I'm building a node
app that uses a template engine like ejs
then I'll call it appjs that's just kind
of what I like to do but obviously you
can create you can call it whatever you
want
so let's go ahead and bring in Express
and I'm using the commonjs syntax which
is like the the native node module
syntax later on I'll show you how you
can switch it up if you want to use uh
es modules and you want to use the
import syntax but for now we'll just go
ahead and use the
require and we're going to require
Express and then we want to initialize
Express into a variable called
app and then app variable or this object
this is basically what we use for
everything to create routes to use
middleware to start the server and
listen on a port which is what I'm going
to do right now we're going to call the
listen method and that takes in a port
number usually I'll use 5,000 for
backend stuff however that's being used
on this machine so I'm going to use
8,000 and then there's an optional
function call back you can pass in
actually we don't even need curly braces
and we're just going to do a console log
to just say that the server is running
so we'll say server is running
on Port
8,000 and those three lines will
actually allow you to run a server so if
I come down here and I run node and then
the name of the file either server.js or
just server there we go so now it's
running it's not doing anything there's
no routes so there's there's not really
any requests we can send for it to do
anything but it is running so I'm going
to stop that now with roller command
C and the next thing we'll do is just
add a very very simple route and we can
do that with the app object and then
depending on what type of method you
want to handle if it's a get request or
post request you use that method in this
case uh we'll use a get method so this
is going to say respond to a get request
to slash just the root URL or endpoint
and then that takes in a second argument
of a
function and that function takes in a
request and response object and those
objects just have a ton of stuff on them
so whatever you want to get from the
headers the body or query strings from
the URL that's all in the request object
the response object has a bunch of
methods we can use so let's use the send
method and we'll just send some text so
we'll say hello world and then let's run
the server and we'll go ahead and go to
the browser go go to Local Host 8000 and
we'll see Hello World and what's nice
about this is we don't have to Define
like the the content type we don't have
to say HTML or text slpl text or
text/html if I
put an H1 in here like
this and we do have to restart the
server I'll show you how we can fix that
but for now we do have to restart it
you'll see now it's uh it's parsing the
HTML we could even send Json data so I
could
do let's say
message hello world and we can it's just
a JavaScript object but it'll actually
stringify it on its own we don't have to
do it manually like we would have to
with uh you know with the with nodejs
and just the HTTP module like we did in
the node.js course also this is only
pertaining to the root route if I go to
slash about then that's not going to
work
if I make a post request to the root
route it's not going to work it has to
be a get request because that's what we
defined so we don't have to manually
check for that stuff like we would
without using Express now having to
restart the server every time we make a
change is pretty annoying so there's a
few things you can do what I've done up
until recently is used a a thirdparty
package called nodemon which is really
easy to set up you just install it with
npm but with recent versions of nodejs
you can can actually use the watch Flags
you don't have to use a third- party uh
package so I'm going to show you how to
do that in in the node.js crash course
we did use nodemon so you can check that
out if you want to you know if you do
want to know how to do that but let's go
ahead and stop
this and uh I'm going to go into the
package.json here and what we want to do
is create a couple scripts and to create
npm scripts we just go into this object
I'm going to create two going to create
one called start which is just going to
start at normally just like we just did
with the node and then the name of the
file but then I'm going to also create a
Dev script which watches it so that we
don't have to keep restarting so we can
just simply do
node-- watch and then server or whatever
you call the file so now if I save that
and come down here and we run
npm run
Dev you'll see that now it's running on
Port 8000 and it does say watch mode is
an experimental feature and might change
it any time but I'm pretty sure that
it's not going to change so you should
be able to to use that um but let's go
ahead and try it out so I'm going to
change this back to just a
string of hello world and save and I
didn't restart it myself it did it on
its own and if I come back and reload
now we just get the string
okay so now we don't have to worry about
restarting it now the next thing I want
to do well let's just create another row
just so you can
see so we'll create one at
slab and we'll just
return say about okay so now if I come
back here and I go to slash about get
request then we see about in the browser
now most of what we're going to be doing
is dealing with Jason data but I do want
to show you how you can serve HTML pages
and there's a few ways to do that this
first way I'm going to show you really
isn't what you're going to do and that
would be create a separate route for
every single page you can you can do
this in a much easier way by just
creating a static server but I do want
to show you this way just so you so you
know how it works so this res uh this
res object has a method called send file
so I want to send an HTML file when we
hit a route so I'm going to create a
folder called public public and let's
say this is where we want to have our
HTML files so I'll create
index.html we'll just go ahead and
create a boiler plate here I'll just say
welcome say welcome
to the homepage and then I'm also going
to create an about.
HTML and we'll
say welcome to the about page okay so we
have these two HTML files now I'm going
to
go into this this uh root route and
let's do a
res. send file and this will take in an
absolute path to whatever you want to
load and there's a few ways we can do
this I'm going to go ahead and bring in
the path
module so we'll say path I'm going to
require and this is just a uh it's kind
of like a utility to just help with file
paths so so in this send file we can use
this double uncore durame and that will
basically give us the path to the
current file that we're in or the
current location that we're in I should
say the directory and then from there we
want to go to the public folder and then
the index HTML that's the page that I
want to load so we can actually wrap
this in path. jooin which just allows
you to join together folders and files
so we'll say from the durame then we
want to go into public then we want to
go to
index.html so that'll give us the
absolute path to that to the index HTML
file so I'm going to save that and
actually you know what let's just copy
this and we'll do the same with the
about change this to about
HTML and now if I reload the homepage
here we get welcome to the homepage if I
go to
slab we get welcome to the about about
page so that's one way to do it if you
just want to load HTML files but you can
imagine if you have a lot of files
you're going to have to create a bunch
of routes just to load a single page and
that's kind of silly so what you can do
is use the the express static middleware
so to do that we're going to come right
here and we just need to add a line so
let's say setup we'll say setup static
folder and basically we're going to
declare one of our folders to be static
meaning you can just go to the URL and
it will just work and we're going to set
public to be our static folder so to do
that we can say app. use because this is
middleware middleware is just a function
that runs between the incoming request
and the outgoing response and we want to
pass in here
express. static just like that now this
takes in the location of what you where
you want your static folder which in our
case is public so we can again use path.
jooin and same thing we'll just do
double uncore
durame and then uh we want to go to
public okay so if I do that and then I
just get rid of these two routes
completely and we come back to the
homepage and reload it still works now
if I go to slab even though I have that
about. HTML it's not going to work
because I actually have to specify the
HTML if I do that it does work so now
anytime I wanted to create an HTML like
let's say I want contact uh. HTML all I
have to do is create it in this folder
and it will automatically work I don't
have to create a separate route for it
so that's how you create a static server
with no.
JS now I want to move on to working with
Json data because the chances are that's
what you're Learning Express for and and
again I'll get into template engines as
well which allows you to load HTML pages
but also use Dynamic data you can pass
data into the route and into the page
but uh let's go ahead and um we'll just
leave this the static here well no let's
comment it out for now because we're
going to use it later because I do want
to show you how we can interact with our
Json data with uh through these HTML
files but for now we'll just comment
that out and let's create a new row
we'll say
app.get and let's say I want this to be
SL API that's a common uh convention is
just to to have if it's adjacent API
prefix all your endpoints with API so
we'll say API slash and let's do
post and then we have our request
response our function and usually you're
going to be dealing with a database but
let's let's just go ahead and hardcode
some posts here so we'll say cons post
actually I'm going to use
let and you'll see why later but we're
going to use let and let's set an array
and all I'm going to have is an ID and a
title I'm not going to get crazy here so
we'll say
id1 title oops we don't want quotes
around that
title we'll say post
one what I got two colons
there so post one and then we'll just
copy that down a couple
times post
two
three change this up 2 three all right
so let's just pretend that this this
isn't a database so we want to serve
these posts through this endpoint so
let's do res. now we can do res. send
and like I showed you before you can
pass Jason in there or you can pass a
JavaScript object and it will get pared
as or stringified as Json but there's
also o a specific Json method and that's
what I prefer to use so we're going to
do res. Json and then simply pass post
which is just a JavaScript array of
objects but if we go to back to Chrome
now and we go back to let's go to SL API
slost now we get our Json post okay and
you could you could hit this endpoint
from your react application or view or
your mobile app whatever it is you're
using you could hit that endpoint and
get this data dealing with adjacent API
the browser isn't the best tool to use
because you want to you want to be able
to test post and put and deletes so
there's a ton of tools that you can use
to do that Postman is what I prefer and
there's a desktop version there's also a
vs code extension which I have installed
so that's what I'm going to use if you
want to use that as well just search for
Postman under extensions so this right
here you can install it you do have to
create an account but it's free so you
can just install it and then you'll have
this little icon here and then you can
simply open up the new HTTP request and
then you can choose whatever method you
want let's say get request
to this right here Local Host 8000 API
posts send it and you can see we get our
Json data in the body here we can also
see the headers here so we have like X
powered by Express we have the content
type which is automatically application
Json content length
Etc all right so this is what I'm going
to use from now on and we don't I don't
even have to leave vs code to to make my
requests now before we move on to to
other routes and all that I just want to
talk about environment variables so
basically you have variables on your
system that you can use uh called
environment variables and you can also
create them in a file called EnV now
prior to uh I think it was I don't know
a couple versions of node.js a couple
versions ago you had to use a
third-party package called EnV but now
you can actually use envir an EnV file
without using that package so I'm going
to show you how to do that real quick so
let's create a file called
EnV and usually if you have like if you
have like a Google API key or something
like that you'll put that in this file
so you don't want to push this to to
GitHub or anywhere else so that's why
usually you want to put this in your G
ignore file now I don't have any API
keys or anything so all we're going to
put in here is the port number and I'm
going to put that to just for now I'll
put it to 8080 just so we can we don't
need a semicolon just so we can make
sure that this this is being used and
then in
server.js what I'm going to do is come
up here I usually like to put this at
the top and we'll create a VAR aable
called port and I'm going to set that to
process. EnV Dot and then Port because
that's the name of the environment
variable okay now you should also have a
fallback just in case that doesn't exist
so we'll say or
8,000 and then down here where we're
connecting to 8,000 here and here I'm
going to change that to well here we
need to use a we need to use this syntax
because it's a variable
okay so now we're using that Port
variable so this is going to look in the
EnV now it's not going to work by
default in fact if I restart the server
you'll see it's not using 8080 as we
have in the EnV it's using 8,000 it's
using the fallback the reason for that
is because you have to actually you have
to explicitly describe the EnV file in
your package.json so right here where
we're running the dev script we're going
to add-
dv- file equals
Dov like that okay so now I'll save and
let's now restart the
server and now you'll see it's running
on
880 okay so that's how you can use a EnV
file without having to use the EnV
package now I'm going to change that
this to 8,000 I just wanted to show you
that it was working so I'm going to
change that restart and now it's back to
8,000 now what if we want to get a
single post let's create a route for
that actually I'm going to put a comment
here so this is to get all post and then
what we'll do is just grab
that and I'm going to show you later on
how we can create a separate file for
routes but for now we'll just put it in
here so this will get a single post and
we want to be able to put API slost
slash and then when whenever the ID if
it's post with an ID of one then we want
to be able to get it by passing in a one
so since this is dynamic this param here
we have to prefix it with a colon and
then whatever we want to call the param
in this case we want to call it ID you
might have like a if it's a a blog post
you might have maybe a slug or something
like that but we're just going to stick
with an ID now how do we get whatever is
passed here in our function here well we
do that let's console log we do that
with the request object and on that
there's a pams object let's just go
ahead and console log that so I'll make
the request to API post
SL1 and when I send it you'll see that
now we have an object with an ID of one
and notice that it is a string by
default okay so that's how we can get it
we can do request. prams and then doid
or if this was slug we could do prams do
slug plug so let's make it so we get
that particular post so what I'll do is
first of all just create a variable call
ID and I want a parse int so I want this
to go from a string to a number so we're
going to pass that into parse int
request. perams
doid okay so now we have the the the ID
now let's filter the post so we're going
to respond with Jason and then we can
use filter
and I'm assuming that you guys know
filter that you know all this this
JavaScript stuff if not then you might
want to just pause Learning Express and
kind of get into just JavaScript a
little more but filter will take in a
function basically we're going to Loop
through and for each post we want to say
if that post the current iteration if
that post ID is
equal to the ID that's passed in right
here here which is this variable now
then that's what we want to show that's
what we want to respond with so let's go
ahead and save that let's come back here
and send and now you can see we get just
the I the post with the ID of one if I
do two we get the post with the ID of
two now if I do let's say 200 which we
know doesn't exist right now it just
gives me an empty array because it's
filtering through and it doesn't doesn't
find a post with that ID in reality you
should probably have this return a 404
not found with an error message and
we'll get to that we'll get to error
handling but before we do that I want to
talk about getting query strings so for
instance if we were to go to API slost
and then do question mark limit equals
two maybe you want to limit the the
amount of post that come back how do we
get this value well we can still use the
the request object right just like we
did here but instead of request pams it
would be request. query so this is the
route we're looking at where we want to
be able to get it so let's just do a
console log of
request.
query okay and then we'll make that
request again and now in the console you
can see we have an object limit to and
it is a string by default and if I were
to add onto this an Amper and then maybe
we want like sort equals
DEC now you'll see that that is also
added to that object so let's make the
limit work we won't do the sort now but
let's let's actually make that limit
works so we'll come back in here now one
thing you have to realize when you're
dealing with with backend development is
anytime a user can change the data right
like in this case you have to just be
aware of that and be aware of what
you're doing with that data because it's
possible someone could put like a a an
SQL query in here and really screw
things up that's called SQL injection um
in this case obviously we're not even
using a database but you just have to
you just have to be aware of that okay
and the type of data that you expect
should be the only type of data that
that can be accepted so in this case we
want a number right in particular we
want a number that is positive because
it's a limit so let's first of all
let's um let's say put this in a
variable I do want to parse it as a
number so let's say parse int and we can
get it with request.
query. limit okay so that'll give us the
actual number and there's a ton of
different ways you could handle this
what I'm going to do is just check and
I'm going to say if not Nan or is Nan is
n n right which stands for not a number
so is Nan is a a function that will
return true if it's a number and false
if it's not so we want to say if it's
not is a number
limit and then we also want to make sure
that it's positive so we'll say and if
that limit is greater than zero okay so
if that if those conditions are true
then we want to respond with
Jason um except we want to only return
the whatever the limit is so we'll say
post so we have our post array and then
I'm going to use the slice method and
say I want to go from zero to whatever
the limit is and then we can do an
else and then move this into
here because if there's no limit then we
just want to return all the pose all
right so let's let's try that out we'll
save it and let's try it without any
kind of limit so we still get all three
but then let's do question mark limit
equals 2 we get two if we do equals one
we get one all right if we do 10 of it's
just going to give us all of
them all right cool so that's how you
can deal with query
strings now status codes are really
important you should have a basic
understanding of the the main status
codes the the ranges like 200 means
success um 300 you have redirects 400
you have client error 500 you have
server errors so let's
um let's be specific about the the
actual statuses we're sending back when
you just do res. Json it's it's going to
default to 200 however I like to still
specify 200 explicitly even though I
don't have to I think it just makes it
more readable so what we can do is do a
res. status and you can pass in the
status you want to send back so in this
case I'm going to say 200 and then you
can actually chain on the Json so we can
do it like that and same thing here
we'll say res.
status and you can just send the status
without any content uh without the Json
but we do want to send the post back so
we'll say 200 and then Json all right
same thing down
here so
res.
status
200 now let's make it so that when that
post doesn't exist we get a 404 and a
message so I'm actually going to just
get rid of that whole thing there and we
want to put the post in a variable
because we want to be able to check for
it and we can use find here so post.
find and let's pass in here so for each
post and we want where the post. ID is
equal to ID and then we can check for
that post or we'll say if not post so if
the post doesn't exist then let's say
res. status and this time we'll send a
404 and then you don't have to but I
also would like to send a message so
we'll say MSG and we'll actually let's
use back ticks here
and we'll
say uh we'll say a post with the
ID
of
ID was not found okay and then we'll say
else so if it is then we'll say res.
status and we want to send a 200 and
then as far as the data we send back
that's going to be the post
all right make sure this is singular
post not posts so let's try that out so
if we go to API slost
SL1 we get post one go to slash two we
get post two if I go to post
sl200 then you see over here I get a a
404 not found for the status and we get
this message a post with the ID of 200
was not
found all right so that's how you can
send different statuses um and you
always want to make sure that you have a
proper response if what you're looking
for is not there now just to kind of
clean this up a little I don't really
like to have the else's here so
typically what I'll do we'll start with
this where we're checking to we're
making sure that the limit um seeing if
the limits there since we have two res.
statuses we can do this and just have an
if else but what I'll usually do is not
have the
else so we'll go like that but if we do
it this way then the first one here we
want to return so that should work the
same way so let's try it out if we go to
SL
poost okay so that still works and then
here instead of using the else so we'll
get rid of
this but this first first one even
though it's within an if we still want
to have a return like that I think I
just think that cleans it up a little
bit all right so now we know how to
create routes we know how to get route
pams we know how to get query pams we
know how to send different statuses now
let's move the routes to a separate file
because you can only imagine if you have
a bunch of resources like post users
categories and then you have a bunch of
routes for each resource this file can
get filled up pretty quickly so you're
usually going to have a separate file
for your different resource routes so
let's create a folder in the root and
we'll call it
routes and let's create a file called
posts. uh
post.jpg
we're going to be using the express
router so first off let's bring in
Express
and then let's we're going to be using
the router so we can do that by defining
a router variable and then setting that
to Express dot and then capital r router
like
that all right so the way that this
works we can actually just copy or not
copy but cut t"
32M1al-Y6Ag,"what's going on guys welcome to my
node.js crash course so I like to revamp
these every few years or so it's been
about 3 years since the last node.js
crash course and I'll go over what I'm
going to cover in a few minutes but I
just want to say that this is for all
skill levels because we're not using any
Frameworks like Express and when you
build an app or an API 99% of the time
you use a framework like Express or
fastify or Adonis or something like that
which really makes things easy and gives
you the tools to create routes and add
middleware and just makes things a lot
easier now this video is much more
lowlevel so we're going to we'll do
things like create a server explore the
HTTP module as well as other core
node.js modules so even if you have
experience with say node and express
there's probably going to be some things
here that you haven't really worked with
and if you're an absolute beginner it's
a good start to to just learn node by
itself and know what it's capable of all
right so sit back back I would suggest
following along just because I think
that you can learn a lot more that way
but if you want to just watch that's
fine as well so we're going to just
spend a couple minutes on some slides
and then we'll jump right into the
code okay guys so before we get started
let's define what nodejs actually is so
many absolute beginners think that
node.js is some kind of framework or
library or even a language but it's not
it's a JavaScript runtime and a runtime
is a program or an environment that runs
other programs so we can build
JavaScript applications and run them
right on your computer or right on the
server now node.js was built with C++
and it uses the powerful V8 JavaScript
engine that's also used with the Google
Chrome web browser node.js can be used
for a lot of things but it's mostly used
for developing serers side and
networking applications apis
microservices it essentially allows you
to to use JavaScript to write serers
side code and do a lot of the same
things you would do with python or PHP
or C and other server side languages now
traditionally JavaScript was only used
on the client side in the web browser to
do things like form validation animation
small stuff like that but with node.js
JavaScript has really become a truly
powerful full stack language and again
you can do a lot of the same things you
can do with other server side languages
and there are actually other JavaScript
runtimes such as Dino and bnjs and those
are really cool to explore they're much
newer Technologies but they don't really
have a space in the industry yet um so I
would definitely suggest starting with
node.js I would never suggest that
someone start with something like bun JS
or Dino just because it's it's so new
and you're most likely not going to find
jobs using those Technologies just yet
there's also not really uh you know a
large community or support for them
either so nodejs is very fast and
scalable due to its architecture and the
V8 engine uh it's also pretty popular I
think it's somewhere something like 6.3
million websites use node.js and it's
used by companies like Netflix Uber
LinkedIn and in addition to really large
companies node is also real a really
popular option for startups and smaller
projects as
well now I want just want to quickly go
over over what we're going to cover in
this course and in kind of the order
we're going to do it in so of course
we're talking about now what node.js is
I'll talk a little bit about how it
works under the hood as well um we're
going to install it set up a project set
up the package.json which is a kind of
like a manifest file we're going to look
at some custom modules and which are
basically just files that we can create
and we can Import and Export uh
functions and data from those files to
and from those files and there's really
two module systems that we can use
there's commonjs which is kind of
node.js is native system and then you
can also use es modules which is the
import syntax that you use with react
View and all the frontend JavaScript
stuff so I'm going to show you both but
ultimately we're going to stick with es
modules that's just what I prefer it's
more modern now when it comes to the the
core modules that that node includes I
think the HTTP module is one of of the
most important to kind of understand
when you're getting started and this is
what allows you to create a server and
accept requests and give responses so a
big part of this tutorial will be using
the HTP module now in real life like I
said earlier you'd probably use
something like Express which is a web
framework that makes things much easier
uh and I'm also going to be revamping my
Express crash course as well but Express
uses or sits on top of the HTP module so
it's good to know how this works and how
to accept requests how to work with them
um how to send responses back send Jason
back and deal with HTTP headers and
methods and all that stuff so that's
really what we're going to cover um in
this course or in in that part of the
course we're even going to look at some
custom middleware which are functions
that sit between incoming requests and
outgoing responses now when it comes to
some of the other core modules we're
going to be going over those in the
second part of the course so the file
system module
path module URL events things like that
so I'll cover the basics of all those as
well now one common mistake that I see
people do is jump to node.js too quickly
before learning node.js you should have
a good understanding of JavaScript so of
course you should know all the
fundamentals variables functions Loops
objects classes you should have a good
understanding of that stuff most
definitely now I'd also suggest that you
understand a synchronous PR programming
so you should know things like callbacks
promises the Asin a weight syntax
chances are you'll be building web
applications in Json apis with node.js
so you should understand how HTTP works
the request response cycle you should
know about HTTP methods like get post
put delete um you should know the common
status codes 200 404 500 things like
that and you will be learning more about
this stuff as you learn about node.js
and even in this very video
now you probably are coming from
front-end JavaScript so you've probably
worked with j u uh API Json apis you've
probably consumed them well now you're
going to be creating them most likely so
it it helps if you already have a basic
understanding of how they work like I
said HTTP methods and Status codes and
all that and then npm the node package
manager you probably have some
experience with I mean if you're using
react or any front-end framework you're
usually installing that stuff with npm
so you probably have an idea but you
will also learn about npm and and
package.json and stuff in this
video all right so let's talk a little
bit about how nodejs works and I'm not
going to go too deep into this because I
I want this to be practical and easily
digestible but you should have a basic
idea of how node Works under the hood so
as I said node is built on top of the V8
JavaScript engine which is the same
engine that powers Google Chrome other
browsers have their own engines like
Firefox has spider monkey Safari has
JavaScript core the V8 engine is written
in C++ and it's it's what takes your
JavaScript code and converts it into
machine code so that your computer can
understand and node has taken this
engine and extended it to work on the
server side now node.js is what we call
nonblocking which means that it doesn't
wait around for Io operations which are
input output operations and those are
things like Network calls file system
operations database operations and
instead of blocking the execution of
code while waiting for these things to
happen or these things to complete
node.js uses events and callbacks and
this allows it to handle thousands of
connections at the same time and this is
why node.js is so fast and efficient now
in node.js there's a a single main
thread that executes your JavaScript
code and you can think of a thread as a
set of instructions that your computer
executes and in a single-threaded
environment there's only one set of
instructions that are executed at a time
this is different from multi-threaded
environments where you have multiple
threads that can execute different parts
of your code simultaneously so node.js
uses something called the event Loop
which is a mechanism that allows node to
perform non-blocking IO operations and
when you make a a network request for
example node.js doesn't wait for that
request to complete instead it continues
to execute execute the rest of your code
and when that request does complete it
triggers a call back which is then added
to the event queue and the event Loop
picks up the call back and then executes
it so I know this is a little tough to
understand so the analogy that that I
like to kind of describe and what helped
me is to imagine the event loop as one
of those giant revolving doors at the
mall or something like that and each
person represents a task or operation
initiated and as a person walks into the
building that's initiating a task
instead of waiting for them to complete
their business inside the mall we'll
call that the task execution node.js
keeps the revolving door spinning
signifying the event Loop now as each
person finishes their task in the
building they exit the revolving door
representing the completion of their
task and the event Loop or the door
keeps the flow going handling incoming
tasks and ensuring that the program's
execution remains uninterrupted so when
a callback executes in node.js it's akin
to a person executing that revolving
door and it would Mark the completion of
their task and while the event Loop
keeps processing and flowing it it waits
for others to enter now I don't know if
that analogy helps or if it just
confused you more but that's kind of how
it works and it's not that important for
you as a beginner to understand how
everything works under the hood right
now uh it's more learning the syntax and
how how to handle incoming requests and
send responses and things like that now
as far as what node is used for it's
used for a lot of things so of course
building apis and this could be restful
apis graphql apis um server rendered
apps so of course we can serve Json data
but we can also serve HTML pages and we
can use different template engines like
ejs mustach um there's all types of of
engines that you can use to serve HTML
Pages dynamic Pages it's also great for
realtime applications like chat uh
realtime games collaboration tools
things like that uh microservices so
microservices are small independent
services that work together I actually
just did a crash course on microservices
if you're interested command line tools
you can build CIS command line
interfaces bots so for example you could
build a Twitter bot or a bot for slack
or Discord web scraping no. js's is good
for web scraping and there's a few
different Frameworks that you can use
for that as well and then web servers of
course and it could be a sophisticated
web server handling complex routing and
serving Dynamic content or just a simple
static file server what node.js is not
great for is CPU intensive applications
so as we talked about no. JS is single
threaded and uses an event Loop which
which makes it great for Io operations
but not so great for CPU intensive
operations so if you're doing a lot of
heavy computation and things like that
you probably want to look more into like
python Ruby Java and other server side
languages but that's it for the slides
now what I want to do is jump in we'll
talk a little bit about installation
which is very simple and we'll start to
set up a project and then we'll go from
there all right guys so this is the
official node.js website nodejs.org and
as far as installation goes it's very
simple if you're on Windows or or Mac
you can just simply go to the site click
download download the LTS which is the
long-term support version you can
download the absolute latest version if
you want there might be some extra
features there but I usually uh I
usually suggest using the LTS and then
you can just run that file I already
have it installed in this machine so I'm
not going to run it but it's just like
any other installer just go through it
and then node should be installed now if
you're on Mac you can also use Homebrew
and of course if you're on Linux you can
use your you know whatever the package
manager for your drro is and get it
installed that way and then you just
want to open up a terminal or command
line prompt and just do node-- version
and that will show you the version
that's installed and nodejs comes with
npm which is the node package manager
which you can use to install thirdparty
packages and you can just make sure that
that's installed as well now nodejs does
come with a repple which stands for read
a Val print Loop and it's basically just
an a command line environment to run
JavaScript and you can start that by
just typing node and then enter so from
here I can type in any JavaScript that I
want now you're probably not going to
use this much but it is a a nice way to
kind of test out code and just
experiment with JavaScript and not have
to do it through a file through the
browser or anything like that um so I'll
just give you some examples we can we
can do a
console.log and obviously when you're
using when you're doing frontend
JavaScript the console pertains to the
console in the browser this pertains to
the terminal so if we do console log
hello world and run that it's going to
just spit it out to the terminal to the
console and undefined just means that
there's nothing being returned from this
line now you can also create variables
like we can say name
John and obviously I get undefined
because that doesn't actually return
anything if I do a
console.log of the the variable of name
then I should see John you can also
create functions like I could create we
use a oneline arrow function here called
greet and we'll just return uh let's
just return we can put some back ticks
in here and say hello and then put our
name
variable and then we can call that
function and we get hello John all right
so like I said you're probably not going
to use this much but it is it is there
for you to to test out code or whatever
you want so you can just do control or
command C to to to get out of that now
from here I just want to create a folder
to work in you can either use your
Explorer or file manager or you can use
the terminal and just do make directory
and I'm going to call this no.
js- crash
d224 okay and then I'm just going to CD
into that folder and then from there I'm
going to open my text editor with code
dot if you're not using vs code just
open that folder up in whatever editor
you're using so close that and now I'm
just going to use the integrated
terminal for any any commands that I
want to run now 99% of the time the
first thing you're going to do when
you're starting a new node.js project is
create a package.json file so we can do
that by using an npm command so in the
terminal we can say npm in knit and
there's going to be some questions asked
and if you wanted to skip those
questions you could just add- why but
I'm going to go through those just so
you can see what they are so the package
name whatever is in parenthesis is the
default so you can just hit enter to
accept that version um description I'm
just going to say
nodejs crash course
code and then the entry point which is
like your main file index.js that's fine
and then you can just enter through this
stuff if you want you can put your own
name and then for license I usually put
MIT and then enter and that will create
a package.json file for you so you never
have to create this manually and this
has you know basically the stuff that we
just that we just answered and then it
also has scripts so basically you can
create what are called npm scripts to do
certain things like start your server
stop it run tests all kinds of stuff and
I'll get more into that a little later
so now that we have a package.json file
the next thing you would usually do is
create an entry point which is your main
file the file you're going to run you
usually when dealing with nodejs or any
language really you're going to have a
project structure with files and folders
and usually you have one entry point and
the other stuff is just imported into
other files so let's create a file I'm
going to call it index.js and you might
see this as appjs or server.js I usually
like to use index now from here we can
just type JavaScript so I can do a
console log let's just say hello world
now since we have nodejs installed on
this machine I can run this file from my
terminal by saying node and then the
name of the file which is
index.js make sure you're in the correct
directory and you'll see Hello World
printed to the console and you don't
even have to do the JS we could just do
index which is the name of the file and
then that runs it as well okay and you
can put any JavaScript that you want
here okay now there are some differences
so for instance when you're in the
browser environment and I'm I'm I'm
assuming that a lot of you are coming
from the front end so in the browser you
have this window object right if I were
to run it you'll see I get an error says
window is not defined that's because
there's no browser so there is no window
object now there is something called
Global which is similar but it doesn't
it obviously doesn't represent a browser
window it represents just the global
object and you can see that there's uh a
bunch of stuff on this uh on this as
well such as set timeout set interval
these are actually not part of
JavaScript they're part of the web API
in the browser but they're also
available in node.js because of this
global object all right now there's also
not a document object so there's no Dom
right because there's no document uh the
document pertains to the browser and its
environment so that's not available but
there is a process object so that
pertains to the current process that's
being run so you can see there's a bunch
of stuff on here that you can get as
well you can get environment variables
things like that and I'll talk more
about Pro the process later all right so
yeah so those are basically it's just
the environment is different but as far
as the JavaScript language goes it's all
the same and that's what's great about
building full stack when you're using
like react or view or anything like that
you're you're writing the same language
on the front end as you are on the back
end which is nice rather than doing
JavaScript on the front end and then
python or for PHP or something on the
back end which is also fine but I like
to have it all you know all in one now I
want to talk about modules so usually
like I said you'll have a structure of
files so let's go ahead and create a
utils.py simp Le we'll just say math.
floor so we're going to round down math.
random and we'll multiply that by 100
and then add one so it's basically going
to give us a number between one and 100
uh 100 now I want to be able to use this
function in other files so in order to
do that we have to export it now the
system that I'm using right now is
called commonjs it's like the native
nodejs module system and I'm going to
show you how to do do with that first
and then I'm going to show you how we
can switch to es modules which is the
more modern syntax that you use with
with front-end Frameworks so with
commonjs what we would do is say module.
exports and whatever we want to export
we set this equal to so let's say
Generate random number we don't use the
parenthesis here now since I exported it
I can import it where I want so let's
import it into the into this file so to
do that we'll say const and then
Generate random number and then we use
the the require syntax that's commonjs
and then we want to do do slash which is
the current directory and then utils and
with commonjs we don't have to do the JS
at the end so now I should be able to
let's do a console log we'll put some
back ticks and we'll say random
number and then we should be able to use
that function so now if we run this file
with node index I get random number 67
random number 79 so I can use other
functions from other files and it's not
just functions that you can export you
can also export objects or arrays and
other types of data now this is what we
call a default export because it's it's
one thing being exported however you
might have other functions that you want
to export so let's create another one
we'll call this Celsius
to Fahrenheit and let's say it takes in
Celsius argument and then let's see the
the formula for that
is let's see that whatever that Celsius
value is multiply by 9 and then divide
that by five and add 32 so that should
give us the fahrenheit now I want to
export both of these so what I need to
do is export an object like this and put
both functions in there like that and
then when I UT pord it I'm going to wrap
this in uh curly braces and then I can
just go ahead and import both and then
I'll come down here we'll do a console
log with back ticks we'll say Celsius
to uh
Fahrenheit fahit I don't know if I
spelled that right and then we should be
able to
run that function and we'll pass in
let's pass in um 32 I'm sorry passing
zero Celsius 2 Fahrenheit so that should
give us 32 all right so you can see
right here Celsius to Fahrenheit 32 so
that's like a a quick crash course on
commonjs syntax now I want to show you
how to use es modules which is the
import export syntax now there's one
thing we have to do in order for this to
work and that is in the package.json
file we have to add in here type and
then we're going to set that you see we
have two options here commonjs which is
the default and then module so we just
have to set type to module and then we
can use it so let's create another file
I'm just going to call this post
controller.js so we'll say we're
building some kind of blog API or blog
app and this will be where we can fetch
our post and stuff now usually you'd
have some kind of database you would use
a um a third-party package like SQ eyes
or mongoose to interact with your
database but we're just going to create
some hardcoded posts so we'll have an
array an object we'll just have an ID
and a title so we'll just say post one
and then we'll copy that down and this
will be post
two id2 all right so let's say we want
to have a function and we can use Arrow
functions as well of course so we'll say
get
post and we'll set that to an arrow and
then we'll just return the post
so very simple and then to export
there's a few options we can do this we
can simply just put export before it and
then in our index JS I'm just going to
comment this stuff out you can just
ignore that now so to import we can do
this and it's not exported as default so
it we need to have these uh these curly
braces around get post now with es
modules when you're using it with nodejs
we do have to add the Js yes at least I
I think we still have to let me just run
that yeah so you see how we get an error
so cannot find module did you mean to
import post
controller.js so if I do that and I run
the file I shouldn't nothing's going to
happen because there's nothing here but
I don't get the error so I should be
able to use this now so we'll come down
here and let's just do a console log of
get
posts and now we'll run it and you can
you can see it prints the
post now another way that you can export
is at the bottom so if you don't do it
here get rid of that we can just do
export and then as an object get post we
can put that in there like that and it
should work again now you might want to
export it as default so for example when
you build a react component in the front
end you usually export that as default
because it's usually the the only thing
being exported from that file so to do
it as default you would get rid of these
um curly braces and you would say export
default get post like that now if I want
to use this I have to bring it in
without without the curly braces so that
should work and it does and you can even
export one thing as default and then
other things is not default so let's say
we we have a actually we're going to use
export here so let's say we want to
export another function called get post
length and we'll set
that to an arrow function and we'll just
return post. length Okay so that's going
to export get post as default and get
post length as just regular so here I
can put a comma and then have my curly
braces and get post length and I should
be able to let's console log and say
post
length and then get post
length if we run that there we go post
length two all right so that is using
Import and Export for both um commonjs
and Es modules I prefer to use es
modules so we're going to just use that
for the rest of this so like I said I
want to jump into the hdp module and
creating a server and dealing with
request response I mean that's that's
kind of the majority of what you're
probably going to be doing with node.js
now like I said a few times you're going
to do this most likely with a framework
such as Express or Kaa or fify there's
there's tons of great Frameworks out
there but uh but I think that it's good
to know kind of what's going on under
the hood so let's close up index.js and
let's create and I'm just creating these
files just so you have them I'm going to
put them in a repository just so you
have them for documentation but let's
create create a server.js file and that
will be our new entry point for for what
we're doing now and we're going to
import the HTTP module so let's say
import HTTP from
HTTP okay no do slash or anything like
that because it's not a file that we're
including it's a it's a module that's
included with node.js
so we want to create a server and
there's a method called create server
that we can use so we're going to create
a variable called ser server and then we
want to set that to http and then
there's a like I said a method called
create server and then that's going to
take in a
function it doesn't have to be an arrow
it can be just a regular function if you
want now this will have a request so req
and a response Rees and these two
objects are really important and we're
going to use different methods and
properties from them but all I want this
to do is basically just send some text
to the client so we're going to take our
response object and there's a write on
that and you can see right here the
write method writes some data to the
stream and calls the supplied call back
once that data has fully been handled if
there's an error then the call back will
be called with the error and I mean you
can read all this stuff if you want to
really get into it but we're just
sending some text to the client in our
case it's going to be the browser so
let's just write hello world
and then we want to end the response
with res. end now like I said and I'm
probably going to say this a bunch of
more times when you're using a framework
like Express you don't have a
responsibility to end the stream it just
it does it automatic all right just like
you don't have
to uh manually set header some header
values and the content type and and all
that stuff um and and if you take the
express crash course after this I think
that's a good idea because you can kind
of compare the two so this by itself
won't do anything we have to listen on a
port so we're going to take that server
variable and then we're going to call
the listen method and that's going to
take in a port I usually use 5,000 for
server side stuff but that's actually
being taken up on this machine so I'm
going to use
8,000 and then you can also pass in a
function so you can just do something
after it it connects so we'll just do a
console log and we'll say uh
server running on Port and we could we
could even make these back
ticks yeah let's do that let's make
these back ticks and then we'll actually
create a variable for the port so we'll
say on Port and then we'll put that
variable in here and for now we'll set
the variable up at the top here let's
say const port and we'll set that to
8,000 all right so now we should be able
to run our server it's a very very
simple server but we should be able to
run node server and now you see Server
running on Port 8000 and it takes up the
terminal I can't I can't put any more
commands in here unless I shut down the
server now let's open up the
browser and I'm going to go to uh not
5,000
8,000 and we should see Hello World so
let's go back to our code and we can
even get rid of this res. write because
the end method you can send a response
body here so we can actually put our
hello world in there and we could get
rid of this and we should get the same
thing now you do have to restart the
server so let's do that and let's reload
and yeah we get the same same thing now
we can also set header values such as
content type or you might have like an
authorization key or something like that
so we can take our response object and
there's a set header
method and let's change the content type
so we'll say
content-type and then the second
argument we pass in is the type we want
let's say text/html and then down here
let's wrap this hello
world in an
H1 and restart the
server and then if we come back here
you'll see it's now in H1 and if we open
up our Dev tools go to the network Tab
and reload click on this Local Host you
can see it's a get request it's going to
be a 200 response by default and you can
see content type is text HTML now I
could change that if I did like text
plane that's for plain text reload the
server come back here and now it's
actually showing me the H1 tags it's not
parsing the HTML because the content
type is explicitly set to this text
plane now there might be cases where you
want to change the status right if you
if you want to send back like a not
found page you could change it to like a
404 so we can do that let's go actually
let's put it back to HTML and then here
let's say res
do status or I'm sorry status code and
we're going to set that equal to
404 and then maybe you'd say like not
found or something like that but let's
just stop the server reload it and come
back here reload the page and now down
here notice that it's red the local host
and it has a status of 404 and we could
actually shorten this up right so we
could do this instead of separating
instead of having two separate lines
here we can use the right head method so
we can say WR head and you can see here
it sends a response header to the
request the status code so it allows to
send the status code and um things like
the content type so headers so let's
wrap um in here let's say we want to
send yeah let's do a 500 and then we'll
set the content type so here we can have
an object with different header values
so we'll say
content-type and we'll set that to let's
set it to
application slash
Jason and then we can actually send Json
data
here so let's say json. stringify and
I'm going to go I'm going to talk more
about apis and Json data but just to
show you can put an object in here we'll
say
message server
error and
restart okay so now if I reload this
page now we get this Json message server
error and you can see it's a
500 now before we move further with with
uh our server and you know writing some
more code in here I want to just talk
about npm scripts and no uh npm modules
because I want to install one called
nodon because it's kind of a pain in the
ass to keep restarting the server so
let's um let's create a a script first
to run this because right now we're
running node and then the name of the
file but if we go to our package.json we
can add a script in here called start we
can replace the test that's fine we're
not using that and then let's have that
run node server or
server.js so now what we can do is come
down here and we can now Run npm start
and that will do the same thing okay so
that'll start our server now if you if
you use something else other than start
or test like let's say we use dev then
you you actually have to do npm runev
not just npm Dev so keep that in mind
and Dev is really common because a lot
of times you'll have your you know your
development environment and then you'll
have your production environment so
let's we'll just put that back to start
for now so next thing I want to do is
install nodemon and when you install
something using npm right so let me just
clear this up so if you do
npm install node mon I'm not going to
run this just yet but what it's going to
do is it's going to install it from the
npm registry or "
OhU4yaNih2M,"hey what's going on guys so about a
month ago or so I did a video on VSS
code extensions I gave you 20 different
extensions we went through I showed you
what they did and I got some some good
responses on that a lot of people told
me that they found some stuff that they
never heard of before and now they use
these extensions all the time so I
wanted to do the same thing in the
browser so in this video I'm going to
give you 20 essential browser extensions
and I'm using Google Chrome but for most
of if not all of these there's also a
Firefox add-on if you're a Firefox user
and then a lot of them also have um
plugins or add-ons for other browsers as
well if you're using Edge or something
like that all right and then there's a
lot of different categories so
productivity testing uh research so if
you want to find information about a
site and its layout things like that um
and then just like like Doc readers just
things that that I think are really uh
really useful and that I use in my in my
daily workflow all right so hopefully
you find something that you can use and
and is helpful to you so let's get
[Music]
started all right guys so this list is
not in any particular order and there's
no ranking involved I'm just going to go
through and show you what each one does
and all of these are free or at least
have a free tier I would never add a
paid extension to any kind of list like
this I'm also leaving off extensions
like the react and Redux Dev tools view
Dev tools uh Clockwork for laravel and
any other framework specific extensions
because I want this list to be more of a
general uh just a general list of
extensions uh although HTML CSS and
JavaScript obviously those are the the
core of front-end web development so
some extensions will be geared toward
toward that stuff now the first few
extensions really have to do with
getting information from other websites
or layouts when I'm creating layouts I
like to use other sites for inspiration
and ideas obviously you never want to
copy their code or anything like that
but you may want to know what what a
certain color is or what font they're
using things like that so the first one
we're going to look at is colorzilla and
this is a Color Picker and a gradient
generator that you can use to get the
color of any pixel on the web page and
this is great for web design because a
lot of the time when you're creating
layouts we use other sites for
inspiration and ideas so if you see a
color that you like you can use
colorzilla to quick get either the hex
code or the RGB value you can get it in
different formats and now you can even
use it outside of the browser which is
really cool because you can get colors
from other applications that are on your
desktop things like that um you can even
create gradients and save them to your
your library so if if you're creating
uis and layouts this is definitely a
must-have so what font is the the in the
same realm as colorzilla you may see a
font that you really like on a website
and you want to use and instead of
digging through the CSS files of that
website you can just click on this
extension to find out which font is
being used so so after you click the
icon you can just hover over any text on
the page and it'll show you what that
font is okay and you can uh also click
on the text to get more information like
the font size line height and color WAP
alyer is a technology profiler that
shows you which Technologies are being
used on a website so if you're on a
website and you're curious what it's
built with you can click on wappalyzer
and it'll show you those Technologies so
for example if we go to wordpress.org we
can see that it's built with WordPress
obviously and it'll show you which
programming languages are used databases
web servers Frameworks and more so if we
go to react. deev you can see that it's
built with nextjs if we go to my site
traversy media.com it even shows that
I'm using the kajabi platform which is a
paid plat platform for e-commerce and
video and also uses Ruby on Rails Cloud
andary for images some JavaScript
libraries and more so it's a really cool
way to just see what's going on under
the hood of any website now the web
developer extension is a very popular
extension it adds a toolbar with various
tools and a lot of this stuff you can do
with the standard Dev Tools in most
browsers but this adds a lot more
granularity so if you want to see like
like um you know the cookies so if you
want to manage your cookies and sessions
you can do that from here I like that
you can quickly disable all JavaScript
in CSS Styles you can disable the the
default browser Styles you can edit the
CSS files directly in real time within
an efficient layout um you can do stuff
like with forms you can check all
checkboxes or convert certain inputs to
other types of inputs you can remove
validation display form details and a
lot more and then for images you can
disable them you can make them full size
you can outline background images
display alt attributes all kinds of
stuff and then you can quickly resize
the window to a specific value you can
also validate your HTML your CSS your
links accessibility and a lot more so I
think it's definitely worth having for
any front-end
developer so dark reader is a popular
extension that allows you to enable dark
mode on any website so it's it it's
great for your eyes for one thing
especially for someone like me I get
these eye floos if I stare at White
screens for too long so I try to use doc
mode wherever possible but it's also
good because you can do some testing and
you can see what your the layouts You're
Building what they're going to look like
in uh a dark mode in a darker layout so
definitely a must have for me so Json
form matter is a simple extension that
formats Json data in a more readable way
so when you're working with API eyes and
you get a Json response in the browser
it can be kind of hard to read if it's
not formatted so this extension will
make it more readable it'll add syntax
highlighting you can collapse and expand
objects and arrays so it's it's a very
simple extension but also very useful
and you can still have the option to
view the raw data without the formatting
as well so session buddy is a session
manager that allows you to view save and
restore your browser sessions so if you
have a bunch of tabs open and you want
to save them for later you can click on
the session buddy icon and you can save
them you can also name the sessions add
notes you can restore them at a later
time you can also Import and Export
sessions and I like to use this because
I always have just tons and tons of tabs
and windows open and I like to save them
for later I also like that you can just
search through your sessions so fake
filler is a form filler that allows you
to quickly fill out forms with fake data
so a lot of times we're building
applications where we need to fill out
forms constantly and instead of just
typing out everything we can just click
this icon and it will just fill out the
forms for us with just some fake data
and it'll even you know for for select
list for example it'll make a selection
it'll select radio and checkbox buttons
and things like that so can be really
really helpful and make you more
productive quick source viewer is a
simple extension that allows you to view
the source code of a web page in a much
more indepth and organized way than you
know the default method in the browser
so if you click the icon you'll see the
source code in a new tab you can then
click on any file and view it any file
that is obviously accessible from the
front end you can also search through
the files and and view the source code
in Tree View CSS viewer is a simple
extension that allows you to view the
CSS of any element on the web page you
can click on the CSS viewer icon then
hover over any element and it'll show
you all the CSS so you can also click on
the element to see more information like
the font size font family color things
like that um you can also click on the
CSS to copy it to your clipboard so a
lot of this stuff you can do without
these extensions of course you could use
the dev tools and you can see the CSS
but this makes it just a lot more
efficient and easier so user agent
switcher allows you to quick and easily
switch between user agents so basically
the the platform that is being used to
view the website on so this is great for
testing uh how your site looks on
different devices you can click on the
icon and then choose from a list of user
agents you can also add custom user
agents and you can set up rules to
automatically switch user agents based
on the URL so it's a it's a really good
thing to have to test responsive
design so viz buug is a design tool that
allows you to make changes to a web page
visually and you basically click on the
icon and then click on any element to
make changes and it gives you a nice
little toolbar in the corner as well so
you can edit content locally from the
regular Dev tools but this is again
makes it much more efficient and just a
better way to do it so you can change
text color size positions and a lot more
and you can also add new elements move
elements around delete things you can
also view the grid and the and the
spacing it's a very powerful tool and
it's great for for making quick changes
to a web page without having to do it in
the code so daily dodev is a news
aggregator for for developers they have
some of the best and most recent
articles and tutorials news and things
like that from the web development world
and you can click on the daily dodev
icon or just open a new tab and it'll
show you all the latest articles you can
also search for specific specific topics
um you can save articles for later so I
actually use this all the time to keep
up to date with the latest news and
Trends in web development and I've
actually got quite a few video ideas
from these as well so LT debug is a a
pretty Advanced and in-depth debug and
testing Tool uh I actually just found
out about it recently so I haven't used
it too much but you can do things like
add and remove headers block redirect
requests change user agents throttle
responses you can manage cores and just
to give you an example if we click on
modify headers and give it a rule uh or
a rule name a header name and a value
and apply it to a URL and then save it
when you go to that URL wherever you
applied this and open up the dev tools
you can see the header in the request so
this is very useful when you're testing
your apis and the information that
you're sending to the server now there's
a a list of all the rules that you
created and you can enable and disable
them so there's a lot of other features
as well like I said I I pretty much just
found out about this but it seems to be
a really powerful tool so check my links
is a link Checker and allows you to
quickly check all the links on a web
page you can just click on the on the
icon and it'll show you all the valid
links or the number of valid links the
valid redirecting links the warnings and
the hi invalid links and you can also
copy the results in CSV format as well
so very simple but very helpful so web
developer checklist is a simple
extension that gives you a checklist of
things to do when developing a website
you can click on the icon and it will
show you a list of things to check off
you can also add your own items it's a
nice way to make sure that you're not
missing anything when you're developing
a website I actually do have a few
errors but in my defense most of this
has to do with the e-commerce and video
platform that I'm using um but it it
does help you catch things that you
might have
missed so clickup is a project
management tool that allows you to
create tasks lists and Boards you can
click on the icon and it'll show you all
of your tasks um there's a bunch of
features like a notepad email
integration you can do time tracking
screenshots and a lot more you do need
to sign up to use it but it's free and
it's great for productivity check bot is
a website auditor that checks for SEO
speed security and more you can click on
the check botot icon and it'll show you
a report of any issues you can also view
the report in a new tab you can also
export that report to a PDF file if you
want it's a useful tool for making sure
your website is up to par or your client
websites and I get about an 80% so there
are some improvements that I can make
again a lot of this stuff goes back to
the platform I'm using just saying but
it can be helpful uh especially for
Freelancers when you're creating lots of
client websites and you want to keep
their SEO go up IE tab is an extension
that allows you to view a web page in
Internet Explorer so this is great for
testing how your site looks in older
versions of IE or I guess every IE
version is is older now I know many
developers including myself don't really
care about ie anymore because it's used
so little but if you're working on a
project that requires it then this is a
great tool you can click on the IE tab
icon and it will open the current page
in iie you you can also add custom URLs
to open in Internet Explorer you can set
up exceptions and there's a bunch of
different options including the version
of IE that you want to use so lauram
ipsum generator is a simple extension
that allows you to generate lauram ipsum
text which is just dummy text you can
click on the icon it'll generate as many
paragraphs as you want um you can also
generate lists headings and more and you
can set the length of the text that you
want so it's a very simple extension but
useful for testing and productivity and
it goes well with the fake for fake
filler extension all right guys so
that's it those are 20 browser
extensions that I think are very helpful
and productive for web development and
just in general and I hope that you
found something that you like if you
have any extensions that you think
should be on the list let us know in the
comments I'm always looking for new
tools tools to try out but that's it
thanks for checking it out and I'll see
you next time"
LDB4uaJ87e0,"hey guys welcome to my 2024 react crash
course so this is something I do every
two to three years not just with react
but all the big Frameworks just to kind
of keep up to date so this course is
designed to get you up and running with
react as quickly as possible and this is
geared toward beginners so if you've
never used react before you're in the
right place and we're going to build a
front end for a joob listing website and
you'll be introduced to Concepts like
components props state hooks data
fetching and much more and we'll also be
using the react router to create a mult
uh multi-page application also in the
real world you you're going to be
working with backend data and apis so
we're going to use the Json server
library to create a mock rest API as our
back end now one thing I want to mention
real quick is that react 19 is right
around the corner and it does add some
new features many of those features are
under the hood meaning that the concepts
of react when it comes to writing the
code and the fundamentals those aren't
going to change as far as what we're
doing here so the biggest change to
react 19 is that they're adding a
compiler which will convert react code
into regular JavaScript potentially
doubling performance so it'll work in a
similar way to uh Frameworks like spelt
now we're going to be using version 18
in this video as 19 isn't released yet
but all the Core Concepts that we're
going to talk about are the same so it
doesn't matter if you're using 18 or 19
and I did do a video on react 19 a
couple weeks ago and we used the
experimental version of react to test
out some of the new features so that
might be something that you want to
watch after this if you're interested
all right so we're going to take a look
at some slides and then we'll get right
into learning
react okay so like I said we're going to
spend a little bit of time with some
slides just to kind of give you an
overview of what react is and what it
entails and I'm going to warn you that
it may be overwhelming if this is your
first introduction to the library and
that's why I like to to be more Hands-On
and jump right in but it can be helpful
to have an overview just so you
understand what react actually is in
some of the terms that we'll be using so
what is react it's a JavaScript library
for building user interfaces and it
allows us to build user interfaces and
front ends of websites and applications
using components which I'll talk about
soon and it's maintained it was created
and maintained by Facebook and a
community of individual developers and
companies you probably have heard react
referred to as a framework I refer it to
it as a framework all the time but it's
actually uh a UI library to be specific
and the difference is that a framework
is a complete solution so angular for
instance is a full-featured framework
because it includes a router an http
client aate management library and much
more and the reason that react is often
referred to as a framework is because it
operates like one and it's in direct
competition with Frameworks like angular
so and in fact it's actually the most
popular out of the major front-end
Frameworks which are react vue.js
angular and spelt and it's often used
with other librar such as react router
to create a full featured solution and
also the ecosystem of react is huge so
it can be used for a wide variety of
applications such as single page apps
serers side rendered applications and
static websites which I'll talk I'll
talk more about those in a few minutes
as well all right so why react now back
in the day the web was very static you
would click on a link and it would take
you to another page the entire page
would refresh this was the state of the
web for a long time then came along Ajax
and this allowed us to make requests to
the server and get data without having
to refresh the page and this was kind of
a game Cher in terms of of the user
interfaces so it allowed us to build
single page applications where we can
have a very Dynamic user experience but
as this type of application and
interface grows it can become very hard
to maintain and this is where react and
front-end Frameworks come in um we can
build dynamic uis in a way that's easy
to maintain and scale and if you've ever
tried to build a large scale UI with
vanilla JavaScript you know that it's
quite a task and the code gets very
unorganized and messy unless you you
build your own framework or something
like that so react and and these other
Frameworks make this much easier now
traditionally just to talk about how it
works kind of under the hood react used
something called the virtual Dom the Dom
meaning the document object model which
you should be familiar with if you're
not I would definitely recommend
learning more vanilla JavaScript first
but the virtual Dom is a lightweight
copy of the actual Dom and when the
state of a component changes the virtual
Dom changes first and then react will
compare the two the virtual Dom and the
actual Dom and it will update the parts
that need to be updated so this is
traditionally how react works that's how
version 18 works that we're using now
and every version before it however with
the upcoming version 19 react will have
a compiler that to my understanding will
replace the virtual Dom and it'll make
things faster and it will also automate
some of the tedious tasks uh making
react easier to work with overall now
most of the reasons to use react also
apply to the other frontend Frameworks
as well and if you ask me specifically
why react over the other ones I would
probably say jobs there's definitely a
lot more react jobs than the others also
the ecosystem is huge when it comes to
um meta SSR Frameworks like next J s and
remix you have react native for mobile
development it's just it's definitely
the most popular now I'm going to be
100% transparent with you guys the
reason that I use react and the reason
that I I do most of my courses and
videos on react is because of its
popularity to me vue.js and spelt do a
lot of things in a much more
straightforward way so if you're not
caring about jobs maybe you're a
freelancer or maybe you're just trying
to build your own products
I would definitely look into other
Frameworks as well um especially spelt
and and Vue because again I think react
just over complicates a lot of stuff
it's don't get me wrong it's a great
framework but if we're if we're just
looking strictly at how we write our
code using these Frameworks I think that
spelt and view are are easier um with
that said that is just my opinion so
take that with a grain of salt also
these Frameworks basically do the same
thing and once you learn one if you
learn react now and then you want to
jump to view it's going to be easy you
just it's just syntax that changes the
the core of what you're actually doing
is the same you're still writing
components you're still passing props
you're still managing State it's just
different
syntax all right so speaking of
components components are the the core
concept of not just react but any
front-end framework and a component is a
reusable piece piece of codee that can
be used to build elements on a page
components can kind of be thought of as
custom HTML elements and components can
be broken down into smaller ones this is
called composition and this is a great
way to build uis because it allows you
to break down complex interfaces into
smaller more manageable pieces and this
makes your code easier to maintain and
scale and components can be either
classes or functions however classes are
kind of the older way of of doing things
in react nowadays you're not really
going to see class-based components
they're all functional uh we will be
using functional components in this
course and in any other course I do um
components can also take in props which
are basically like arguments or
attributes and they can also hold their
own state or their own data now state is
another thing that you're going to have
to wrap your head around when doing when
working in the front end State
represents the data that a component
manages internally it allows components
to store and manage their own uh their
own data which can change over time and
it'll change in response to user
interactions or other factors now state
is typically used for data that's
expected to change such as user input
fetch data from apis or UI related data
like whether a model is open or closed
and to Define state in a functional
component you can use a hook and I'll
talk more about hooks in a second um
you'll use the Ed State hook which is a
built-in react hook and this will return
an array with two elements the current
state value and the function to update
that state and we're again we're going
to get into this I know that just
hearing me say this doesn't tell you
much we will get into examples now
there's also something called Global
state which relates to the app as a
whole and not just a single component so
this would be something like the data
that you fetch from your database you
you probably want to share that with
multiple components so there's ways to
handle this everything from just keeping
your Global state in your main component
and passing it down to child components
to the react context API which is beyond
the scope of this tutorial but it is an
option within react you can also use a
third-party State management system like
Redux okay now we're not going to get
into context or Redux um but we will
look at some Global State later on now
if you've never used react before hooks
can be really intimidating they're also
difficult to explain so bear with me
once we start using them it'll be more
clear now react hooks are functions that
enable functional components to use
State and other react features without
writing a class because like I said
react components used to be classes and
they used to have something called life
cycle methods which were methods that
ran at specific times during the the
component rendering process and and
functional components don't have life
cycle methods because they're not a
class so hooks allow us to do the same
stuff that we could do within class
components such as set State such as
perform effects like data fetching on
load things like that and basically
right now at this point in your learning
the two main hooks that you need to know
are use State and use effect the others
aren't really essential for you to know
at least right now in fact three of them
are being phased out in react 19 um as
you can see all hooks start with the
word use so you can also create your own
custom hooks to use within your
components and that's not something you
need to know right now but just know
that you can create a hook that
basically does anything all right so I
just want to give you a full picture of
what a component looks like so we know
that it can have state associated with
it which is just data and it can also
take in props now the other part of a
component is the output and the output
is jsx or JavaScript syntax extension
and this is basically HTML or an HTML
like syntax within your JavaScript that
and that's what is actually returned
from a react component so this is
actually an example right here you can
see there's uh it's a function called
hero it's taking in some props a title
and subtitle with a default and then
it's returning what looks like HTML but
this is actually
jsx okay what's great about jsx is that
it's Dynamic it's basically what HTML
would be if it were a programming
language you can see right here we're
outputting title and subtitle which are
coming from these props all right you
can also have Expressions you can have
loops conditionals you can basically do
anything within your jsx all right so
there are some differences when it comes
to HTML as you can see you can't use
class because that's a reserved word in
JavaScript so instead we use class name
also for if you let's say you have a
label with a four attribute that's going
to be changed to HTML 4 so there are
some slight differences but for the most
part it's just HTML all right now I was
a little hesitant to even add this page
because I I think it might confuse some
people so if you don't understand it
that's fine don't worry about it at the
moment so there's different types of
applications and websites you can build
using react so what we're going to be
doing today is a SP or a single page
application and this is what these
Frameworks were initially created for so
basically it loads a single HTML file an
index HTML in the browser and then it it
it loads a JavaScript bundle that
includes your entire UI your entire
application basically and this allows
our interface to be very interactive and
even if you go to a specific page like
let's say you click on a link and go to
slab it's not actually loading the about
page on the server the JavaScript is
loading that content for you so spars
are like I said great for really fast
Dynamic interfaces but it can have some
issues when it comes to initial page
load times as well as SEO since the
content comes from JavaScript so the
solution for that is to create a server
side rendered app which you can do with
a framework like nextjs or remix now
these Frameworks still they still use
react you can kind of think of it as a
wrapper around react and instead of
everything being bundled in the
JavaScript the initial page load is
rendered on the server so this is good
for SEO it's also good for the you know
the initial page load time now an SSR or
server side rendered app is a little
more difficult to deploy because you do
need a server a single page app you can
pretty much deploy to any any type of
host um SSRS you use something like
versel or uh netlify or something like
that now the third option is static site
generation so a static site is where the
server generates a bunch of HTML files
at build time so we have Frameworks like
Gatsby and Astro that can do this and
those Frameworks also use react so I
know that this can get complicated
because there's just so many damn
Frameworks but just know that they're
all using react so what you learned
today still applies whether you're using
Gatsby whether you're using uh nextjs
Astro you can actually use a react or
view or spelt components um but yeah
what you're learning today is basically
the core of of all this other stuff so
don't worry about learning this other
stuff right now just know that it is
available and just know that if you're
confused that's completely normal you
should be it's JavaScript you're always
going to be confused and I just realized
this is react generate static HTML
that's not really accurate um it it
would be the The Meta framework like
Gatsby that is generating it not react
itself now there's a few ways to get
started with react we're going to be
using a tool called vit along with the
react plug-in and getting set up is as
easy as running this npm command now
create react app was the most popular
option to build a spa with react um and
it's been around for a long time but
it's no longer recommended it's a bit
bloated it's uh slower and as far as I
know it's not supported anymore so vit
is a newer Solution that's faster it has
a better developer experience it's built
on top of something called es build
which is a very fast JavaScript bundler
and it also has a built-in development
server with hot module replacement so
it's a great solution for building Spas
with react um and and other Frameworks
as well so that's it let's jump in and
let's get our hands dirty learning react
all right guys so real quick I just want
to explain how my crash courses go if
you're new to them so basically the
point of this is to teach you how to get
up and running with react in this case
and we want to go over all the
fundamentals but I also want to create a
project and end up with something that
you can have that you built by the end
of it so this is what we're going to
create this react jobs website and it's
just a uh job listings front end now as
far as the data itself it's going to be
coming from uh a mock backend that we're
going to create with Jason server it's
really simple basically we just create a
Json file with some data and we can then
send get get requests put post delete
and we're going to add crud
functionality all right so as far as the
template here the The Design This is a
Tailwind theme that I created and in the
repository you'll have your Source
folder with you know all your components
and react stuff and then this theme
filesor theme files is going to be just
the HTML files um basically just a theme
it's not going to actually fetch data or
anything like that it'll all be
hardcoded but it'll have all the classes
and all the stuff that we need for
styling so we'll be copying some of that
as we go along because I I I like it to
look decent now just to quickly go over
this the homepage we have a hero
component navbar component some box es
and then we're going to fetch our jobs
and list three of them on the homepage
we can toggle the description here just
to give you you know an example of State
uh component State and then if you click
read more it'll take you to the page The
Details page with all the info the
company info there's buttons to edit and
delete the jobs now we're not going to
get into authentication that's something
that would be separate from this crash
course I do have videos with all
different types of authentication and
react but we'll have full frud
functionality we have our ad page here
to add a job we have our jobs page which
will show all the jobs again having this
little toggle here so it's a pretty
simple project but I think that it's
it's a it's a good one to just kind of
break you into react and and how
everything works as far as components
props events things like that all right
so yeah that's what we'll be building
the repository link will be in the
description and as far as what you need
you're just going to have to have
node.js installed because we're using V
and we're using the node package manager
to set that up so npm comes with node.js
so just download that if you don't
already have it I would suggest
installing the react developer Tools in
your browser we'll probably use those at
some point you can see the components
through you know through your browser
and see any props and state and things
like that so it's helpful and then
react. deev is the new react website and
this is where you can find all the
documentation so you might want want to
just use that kind of as a supplement to
the crash course all right so we can
close this stuff up here um I'm just
going to keep the the react Dev website
open and I do have in Sublime Text I
have the theme files so if I need to
copy something from here you know to get
the HTML and the classes we'll go ahead
and just grab that so maybe just open
the theme files up somewhere all right
so we're going to start off by opening
the terminal and just go to wherever you
want to create your project folder I
have a folder called Dev that I'm going
to use and then we're going to run npm
create again make sure you have no JS
installed or npm won't work so we're
going to say create V at latest and then
just whatever you want to call the
folder I'm going to call it react crash
d224 but you might want to call it like
react jobs or something like that I'm
just naming it this for for you guys for
the repo and then as you can see you can
use vanilla JavaScript view react and
other Frameworks we're going to go ahead
and choose react and you can choose to
use typescript if you want I'm going to
go with just regular JavaScript and
that's it that creates basically a
boilerplate app for us so we can CD into
the that folder that we just
created and then from here I'm going to
go ahead and open up visual studio code
with code Dot and if you're using
something else that's fine um just uh
you know open open the folder in your in
your text editor or
IDE so let's just take a look at the
file structure real quick so there's a v
config file and this is for any
configurations for your Dev server as
you can see we're bringing in the react
plugin and using it here passing it into
this array that's because we chose react
when we were asked the questions one
thing I like to do is change the port
because by default it's I believe it's
517 three I prefer to use 3,000 for
frontend stuff so what we can do is add
in Ser a server object and then in that
server object we can say port and then
whatever you want so I'm going to use
3,000 so now if I open up I'm going open
up my terminal within VSS code my
integrated terminal and run first of all
npm install because as you can see
there's no node modules folder so we
need to install the dependencies which
are react react Dom and vit and then we
have some plugins for um eslint as well
as some types for
typescript all right so once we do that
as you can see in the package.json
there's a Dev script so we can run npm
run
Dev and for me it's going to open on
3,000 because I changed that value in
the config so let's open that up and you
should see a page like this just a
landing page all right so now we have
the dev server running let's just talk
about the structure here for a minute so
the index HTML remember this is a single
page application and and this file is
the single page because this loads in
the browser and then everything else
loads through JavaScript and as you can
see here we're actually including the
main. jsx file in the source folder
including that as a module which is
really cool it's different than how you
know create react app works with webpack
so here I'm just going to change the
title to react jobs and that should
change as soon as I save it you can see
up here um and then the way that this
works if you're not familiar with
frontend Frameworks they they all pretty
much do this this same type of thing we
have a div or I should say single page
applications do the same thing there's a
div and it has an ID of root if we go
into the source folder this is our our
react application and the entry point is
this main.js T file and in here we're
bringing in react react Dom which is the
library that allows it to work with the
document object model or the browser and
then on that react Dom object we have a
create root and that gets passed in an
element and as you can see we're we're
selecting that root element by ID and
then we're calling this render method
and you can render whatever you want as
your application and in this case we
have this app component which comes from
this app.jsx file now I could change
this to anything I want if I put an H1
here and say hello and I save that as
you can see that's what's rendering as
my application and it's styled because
of this index. CSS so I want to just
clean this up a bit I'm just going to
undo that and put the app back um and
then you also have this strict mode
which is a wrapper component that'll
check for potential problems in your app
app so it'll check for things like
deprecated and unsafe life cycle methods
uh Legacy context API usage things like
that so what I want to do is is a little
bit of cleanup so as far as the CSS you
can see it comes with two CSS files
index.css and app.css we're going to be
using Tailwind so we need to install
that and set it up um I'm just going to
keep the index CSS so let's delete the
app
CSS and and the app.jsx is our main
component and basically this is all the
stuff you see right now on the homepage
so what I'm going to do is completely
wipe that away and just create uh
basically an empty component now
components can they're functions and you
can do a regular function so for
instance we could do function app or you
can do an arrow function so con con app
and then use an arrow and you can type
it out if you want but I would suggest
using this extension here this uh it's
called e ps7 react Redux react native
Snippets and this gives you easy
Snippets that you can use to generate
components so what I like to do is RA
Ace which is react Arrow function
component and then export which will be
at the bottom so you see if I hit tab or
enter it gives me an arrow function and
has the export at the bottom now there's
other Snippets like ra a if we do
rafc it does do an arrow function that's
what the a is but the export is here as
opposed to the bottom and then for the
regular function I believe is RFC so now
you can see it's using the regular
function syntax so you can use any of
these but I'll be doing ra fce so if I
save that now we should just see app now
I want to get rid of all the CSS and as
you can see in the main. jsx it is
including the CSS file and I'm going to
keep that but let's just get rid of
everything in that file for now okay so
now we just have just an unstyled uh
website so yeah that's pretty much how
this works we have this div with the ID
of root and then we're inserting our app
into that using this render method all
right now let's uh let's get Tailwind
set up and there's uh some steps we can
follow if you just
Google let's say V
V react
Tailwind so right here install Tailwind
CSS with v so basically we need to
install uh let's see we already did this
created a v project so now we just need
to install tailwind postcss and auto
prefixer so I'm just going to grab that
and then I'm going to open up a new
console I'm going to just let that one
run the server and we'll go ahead and
run
that and then we want to initialize tail
with dasp so this this will create a
Tailwind config file and the- P will
create a post CSS config file so let's
go ahead and run
that and now you can see Tailwind doc
config post css. config then the
Tailwind config we want to have this so
I'm just going to copy that whole thing
go to Tailwind config and just paste
that in all right so basically it's
going to watch anything that has a jst
tsj SX or TSS extension it's going to
look for Tailwind classes in any of
those files in the source folder now
there is a couple things I want to add
here so in extend I'm going to say font
family and I want to use the robotto
font so I'm going to say sanss and then
in an array we can pass in robotto or
whatever font you want to use and then
Sans serif so it just allows you to pass
in a font stack and then and also I want
to have a a certain grid class for The
Details page that's 7030 basically the
left column will be 70 the right will be
30 so I'm going to say grid uh grid
template
columns and then we're going to just
pass in here a string and say
70-30 so that'll be the class and then
we want here
70% space and then 28% % we'll leave a
little bit of room there okay so that's
going to allow us to add a class later
on that we need now my spell check is
showing these blue squiggly lines so I'm
just going to disable that
extension just to get rid of those
because that could be a little
confusing okay so that's the Tailwind
config now we just need to go to our
index CSS and add these three lines
which is going to load Tailwind so right
here index CSS add those save
it and then we should be all set so if
we go back to our
application should uh let's see we might
have to reload let's just stop the
server and run it
again um no utility classes were
detected oh we don't have any Tailwind
classes but that's the only reason it's
saying this but you can see the font has
changed and there's no margin or padding
so Tailwind is being included in fact we
can go to our app component and remember
with jsx we can't use class we use class
name so let's say class name and we'll
do text- 5xl which is a Tailwind class
and there we go so Tailwind is now
working so let's close that up
and yeah we'll just put this here close
that all right so we're going to talk a
little bit about jsx so every react
component is going to return jsx that's
what this is right here which is an H
HTML like syntax and I'm going to give
you some examples of some things you can
do here because it is dynamic um but one
rule that you have to remember is that
you can only return a single element
okay you can have as much stuff in that
element as you want like inside this div
but it can only return one so if I try
to for instance uh and you can put
parentheses around this as well whoops
parentheses and you know put it on uh
multiple lines but if I were to add a
paragraph here like that you'll see I'm
already getting an error in vs code it
says jsx Expressions must have one
parent element so if I save that that's
going to give us an error same error
over here because I'm returning a div
and a paragraph now if I wanted this div
and this paragraph then I could simply
wrap it in a single element so I could
say
div uh whoops I hate when it does this
so I could say div and then end that
here and that's absolutely fine okay so
just remember that it has to be wrapped
in a single element now you might not
want an actual div here so what you can
do is use what's called a fragment and
it's just an empty HTML tag so just like
this so if I do that you can see that
still works but now it doesn't have a
surrounding div in the actual
Dom all right so just remember that now
to give you kind of a a little jsx crash
course let's say we want to put a
dynamic variable here so above the
return I can just write JavaScript so
for instance I'll create a variable
called name and this isn't part of the
project it's just to give you some
examples so we'll do name and then I can
put that value anywhere within my jsx
wrapped in um curly braces so I could
say hello and then curly braces name and
you see I get hello John
and it doesn't have to be just a single
variable it could be an expression for
so for example I could say const x = 10
and const Y = 20 and then I could
say um let's go under that we'll put
another paragraph and I'll say the sum
of and we'll put in
X X and Y is and then I could do an
expression I could say X x + y and if I
save that I get the sum of 10 and 20 is
30 so basically you could put whatever
you want in these in these curly
braces now we can also use loops and we
can render something called a list so
let's add up here let's say cons names
and say we'll make this an array and
we'll just put some names in here so
Brad
Mary uh Joe and Sarah so we get some
names and let's say I want to Loop over
these and output them in the browser so
we can create a list by let's put this
in a ul and it doesn't have to be a UL
it could be anything but I basically
want a list item that has these names
inside so what we can do is open up some
curly braces take our names array and
then we use map which is just the the
vanilla JavaScript high order array
method that takes in a function but
we're going to return some jsx for each
one so we'll say map and then
name and then in here we can have
whatever we'd like I'm going to use a
list item and then we should have access
to each name so this creates what we
call a list if we check it out now
you'll see the names are all in a
list all right now if I open up my
console we're going to see an error or a
warning and and let's see it says me
just reload this okay so it says each
child in a list should have a unique key
prop so when you create a list whatever
this element is inside the map has to
have a unique key prop so we'll say key
now if we had an ID in this array like
if it was objects with IDs we could use
that but since we don't what we can do
is get the index by passing in a second
argument here and then for the key we'll
say that's going to equal and if you're
going to set this to something Dynamic
then you use curly braces so we'll say
key equals index and then if we reload
that that error goes away so that's a
list now we can also use um conditionals
in within jsx now I can't I can't use
like an if statement in here in in U
curly braces like I can't do this if
something um because it has to be
basically a oneline expression um um one
thing you could do is you could have
different returns so let's say we have
let's say logged in and set that to True
right and then you might do something
like
if logged in so I'm doing this above the
return so if logged in then I could
return I don't know we'll just say H1
and then
hello member so if I did that then I see
Hello member and none of this is going
to render but usually you're going to
want to have the conditional somewhere
in here so in that case what we could do
is get rid of that let's go
underneath um the UL and we could use a
Turner we can say if loged
in then let's show an H1 and we'll say
hello member
else then we'll show
we'll say
hello guest so now if we take a look it
says hello member and if I change logged
in to false it says hello guest now
let's say you don't want to show hello
guest you just want to show hello member
if they're logged in "
I think it's 5,000 by default I'm not
endpoint of Local Host 8,000 jobs and if
3_tOuC9dx5o,"[Music]
what's going on guys so I wanted to
announce the release of my nextjs from
scratch course both on traversy
media.com and on udemy and I'm going to
have Promos in the description for just
15 bucks so nextjs seems to be the
future of react SSR and static websites
have really moved past single page
applications at least in my experience
now I did create a nextjs course a few
years ago the dev to development course
but I wasn't completely happy with it
because a lot of the course was focused
on strappy which is a headless CMS and I
wanted this one to be uh first of all a
much larger project where we keep
everything within kind of the nextjs
ecosystem including the server API
routes and the authentication using next
off I think it gives you a much wider
range of skill than than the old course
that really focused on strappy a little
too much so the project is called
property pulse and it's a property
rental website where users can browse
search and manage rental properties
we'll be using a mongodb database along
with Mongoose to interact with it and
we'll be doing that via API routes
within nextjs so no need for an Express
server or backend or anything like that
so the authentication will be through
next off which allows you to use many
different providers we be setting up the
Google provider and users can
authenticate with their Google account
and that user in will be stored in our
mongodb database and then from there
they can bookmark listings and store
them in their saved properties they can
share them on social media and they can
even contact the property owner through
a form that will get stored in the
messaging system so instead of just
sending an email users can actually
check messages within the website and
they can add listings through a form and
upload images that will get stored in a
third- party service called Cloud Nary
then they can view their listings on on
their profile page and manage them as
well so we'll be integrating other
packages like react icons react toastify
um we'll be using the photos slide
Gallery component so that you can blow
up and scroll all the images that are
associated with that listing we'll be
implementing maps and pagination uh
property search by keyword location and
type such as condo apartment or house
and at the end we're going to deploy the
project to versel so even though
we're building this project it's it's
not just copying the code I'm going to
explain everything and we'll take it
step by step and we'll be doing a lot of
refactoring along the way so that you
know exactly what's going on now I as I
said this is going to be available on
traversy media as well as you to me if
you do purchase it on traversy media
then you get the premium docs which is
basically a written form of the course
with all of the code samples and even
more explanation so I think you guys
will get a lot from this this course if
nextjs is something that you're
interested in and again there's a link
in the description for just $15 I spend
months making these courses and I I
really try to make them as affordable as
I can for everyone now I also want to
mention that as as far as the YouTube
channel goes I'm working with some other
people to to really get more content out
including topics that I'm not I don't
usually work with and I'm talking to
some other creators as well so I know
things have been slow but there's been a
lot of planning behind the scenes on
where to take traversy media so I'll
keep you guys informed on that um so
that's it for now check out the course
if you're interested and I will see you
soon"
8sXRyHI3bLw,"[Music]
hey guys welcome to my practical web
development guide for 2024 so believe it
or not this is the eth or ninth year
that I've done this I think the first
one was back in 2016 or 2017 so it's
crazy how fast time goes by and I'm sure
that many of you or or most of you know
what this is but for those that don't
every year I do this guide and I go
through just about every web development
technology that I can think of from
tools to languages to Frameworks as well
as some of the different routes that you
can take and and just offer some of my
own personal advice to succeed in web
development and I do this because it's
extremely overwhelming just to learn
what you need to learn because there's
so many different things so I try to put
it all in one place and put some things
into perspective and you can kind of
pick your path from there and I also
have a page on my website that has all
the content that I've created including
YouTube videos and playlists as well as
premium courses on a lot of the stuff
that we talk about in this guide and I
put it in the same order as well so it's
easy to follow and I'll have a link to
that in the description all right so a
couple of notes some things to keep in
mind as you're watching or listening to
this video uh it is long so you may want
to kind of put it on in the background
while you're cleaning or exercising or
whatever it is you do and I'll have time
stamps in the description so you can
just jump around if you want to so first
off you do not have to learn everything
we talk about in fact I'd say it's
impossible to learn everything that I
mentioned in this guide even if your
life was extended 100 more years so look
at it like a restaurant menu you can see
what's available and then you pick and
choose what looks good to you so next
this is not a latest trends video I know
there's a lot of those types of videos
out around this time of year I will
outline some of the new technologies but
that's not what this video is about it's
about absolutely everything that I can
think of that you may have to learn as a
web developer and I don't care if it's
20 years old or 20 days old if it's
relevant then I'll talk about it also if
you've watched past years you'll notice
that I don't really remove anything I
just add to it so most of the stuff that
was in last year's video will still be
in this year's video I just elaborate it
on a bit differently I don't even go
back to previous years for reference
lastly I always try to keep these pretty
objective however I do share my opinion
on some things I'll try to make it clear
when I'm giving my opinion uh keep that
in mind that neither myself or anyone
else has experience with every single
piece of technology in this guide so
some of it is based on research and just
what I've heard from others all right so
before we talk about specific
Technologies I want to talk about some
of the common roles and paths that web
developers choose and I think it's
important because it will help you
decide what you want or what you need to
learn so the first one is one that I
feel like is overlooked a lot especially
when it comes to like YouTube videos and
so on typically they just talk about
front end backend full stack but a web
designer is pretty typical uh pretty
typical path to take which is sort of
like a mix of development and design and
these are people that are more focused
on the front end but don't really build
complex uis and applications they stick
to you know static websites small
business websites things like that they
may use a CMS like WordPress um they're
usually pretty good at design as well as
HTML and CSS because a lot of times they
go solo in their Freelancers so they
have to build their projects from the
ground up and uh they typically have
some knowledge of programming you know
basic JavaScript Etc but usually not
enough to build uh a complex full stack
application without using some kind of
third-party software so the they get
into kind of the business side of things
SEO maybe some marketing things like
that so if that sounds interesting to
you then you might take this route next
we have what is I guess the most common
role that people start with and that's a
front-end developer so this is someone
that works on the client side of the web
so they work on the user interface they
create the interactions that a user has
with a website or web app now I will say
that the lines between front end and
backend are are getting more blurred
every day especially with Technologies
like nextjs where some of the page is
rendered on the server and some of it's
rendered on the client but for the most
part front-end developers work on the
client side of the web um with the most
important Technologies being HTML CSS
and JavaScript in general um most of the
time they'll also move on to front-end
Frameworks like react view angular and
I'll talk more about those later next we
have a backend developer this is someone
that works on the server side so they
work with databases database ORS um
they're not focused on the user us
interface at all they're usually the
ones building the apis that the
front-end developers will consume and
get data from the server now with the
front end your programming language is
is typically going to be JavaScript but
on the back end you have you know dozens
of languages to choose from you can use
JavaScript of course with something like
node.js but you can also use Python PHP
C and and many many more languages which
we'll talk about later then you have a
fullstack developer who works on both
the front and back back end so you'll
need to know HTML CSS JavaScript but
also need to know a server side language
or server side technology you'll work
with databases and ORS just like a
backend developer now in my experience
it seems that most fullstack positions
are more focused on either the front end
or the back end but you still do need to
know both and again that line is is
getting more and more blurred and it
seems that full stack is the most
popular end goal for people it seems at
at least from what I I see you know
running a channel and and seeing a lot
of developers and people that are coming
up it seems like front end is where they
want to start but ultimately they want
to be full stack developers now I'm
going to throw a fifth role in there and
that's devops and this is someone that's
responsible for deployment and
maintenance of your application
maintenance of the servers um there you
know security scalability they do write
code but it's not the same as front end
or backend development you're not
building the application you're building
the infrastructure that the application
runs on and you'll typically need to
know Technologies like Docker and
kubernetes you'll need to know about
certain hosting platforms like
AWS um you might write bash scripts
Python scripts need to know how to
manage a Linux server this isn't really
my wheelhouse but it may be something
that you're interested in and it's
usually a separate role than uh a
software developer now for the rest of
this video when we talk about certain
Technologies or concepts I'm going to
have the typ types of developers that it
pertains to up in the leftand corner
here so you'll see something like this
with WD for web designer front end
backend full stack and devops and this
will help you keep track for whatever
your your goals are all right so now
we've talked about the different roles
let's talk about some goals and paths
that you can take as a web developer and
one thing I want to mention that's
really important is that your goals can
change over time so what you choose now
doesn't mean you won't change it later
I've been doing for about 15 years and
I've been a freelancer a full-time
employee a consultant an instructor um
and I've done side projects so you you
most likely won't do the same thing for
your entire career so don't feel like
you're stuck with whatever you choose
now so the most common is to learn to
code to become a full-time developer for
a company and this is where you know you
work for a company you get salary uh
benefits your pay can vary greatly
depending on where you live and and what
company you work for but it's a very
stable job and you don't have to worry
about finding clients or anything like
that you just show up you do your job
hopefully you really like coding and you
get to you know do your passion for work
so it doesn't really feel like work you
get paid quite a bit um there's
positions for all types including the
ones that we talked about many
developers strive to work at at like a
Fang company which is you know Facebook
Amazon Apple Netflix Google these are
some of the biggest Tech compan IES in
the world and they pay very well however
there are there's a lot of companies out
there that pay just as well if not
better so don't feel like you have to
work for one of these huge corporations
there's there's so many companies out
there so freelancing is another option
and this is for developers that are
somewhat business savvy it definitely
isn't for everyone there's a lot of
added stress in running your own
business but it can be incredibly
rewarding in many ways you know you'll
probably struggle from financially at
first depending on where you're starting
out but if you gain the experience and
you put your all into it you can
possibly make much more than you could
at a 9 to5 UM as a software developer
and and freelancing is essentially
investing in yourself and you do need to
know quite a bit you kind of have to be
a jack of all trades master of none
because typically you're starting out
solo so you'll need to do everything
from the the design to the HTML CS to
whatever you're using for a backend if
you do have a backend or if you're using
Wordpress typically you're going to go
for technologies that allow you to
create things fast um and you can also
Niche down and work with certain
industries so for instance you might do
medical websites or something like that
um there's so many different routes to
take within the route of
freelancer so another option you have is
to work for a startup which is a little
different than working for a large
company it's pretty risky because most
startups do fail that's just a fact but
if you're one of the first employees it
can be very very rewarding and you can
be very successful and make a ton of
money um and then you could also think
about starting your your own startup
later on down the line I wouldn't say
that should be your first goal once you
learn how to code um and that kind of
leads us to the next one which is to
create a product or a SAS which is a
software as a service so you could build
some kind of app that you could charge
monthly for so you have recurring income
and I would say this is great for a
secondary goal so maybe start off either
as a full-time employee or a freelancer
and work on a product that you think
will be successful in your spare time
and then you know if that starts to grow
you could always switch over and do that
full-time and then internships uh they
do offer Real World Experience there's
paid internships and even if it's not
paid you do get a lot of experience and
it looks great on your resume for when
it is you know when it comes time to
find a job and typically internships
that aren't paid they will lead to a
paid position so it's a great option if
you know just to get you going in the
industry so these are just some of the
things you can do these are I would say
the most common especially the first two
full-time employe freelancer um there's
a lot of things that I would say you can
do but I wouldn't s just starting out
with like Consulting like teaching
things like that again like I said
earlier you don't have to stick with one
thing once you choose that path all
right so let's get into some of the
basic essential tools that you need to
start coding so first obviously you need
a computer with an operating system
people ask me all the time what's the
best laptop for coding the truth is you
can use just about anything from the
last 5 to 10 years for web development
if you were doing something like 3D
modeling then you need a a bit more of a
powerful computer but for web
development you don't need much I'd say
just make sure you have at least 8 GB of
RAM and an SSD I think the bigger
decision is what operating system you
want to use but even that really just
comes down to preference people ask me
what I prefer I I like Mac OS just
because it things seem to work a bit
more smoothly especially when it comes
to things like the terminal I think that
Windows has gotten a lot better though
and I do use Windows I'd say probably
30% of the time I just prefer Mac OS for
my serious projects and then obviously
you have Linux which is a great option
because you can kind of mimic your
production environments and it's very
beneficial to learn Linux server
Administration if you're going to be
doing any kind of
devops all right so so again it just
comes down to preference so a text
editor this is where you'll write your
code and there's a lot of options out
there personally I prefer Visual Studio
code it's free it's open source it's
very powerful it's very customizable I'd
say about 80 to 90% of the web
developers that I talk to use vs code um
some other options are Sublime Text
which technically isn't free but it has
a trial That Never Ends if you do use it
for a long time I would suggest paying
for it um there's adom which is free and
open source Vim is also pretty popular
it's a bit more advanced than the others
it has a uh quite a learning curve but
it's very powerful and the people that
use it swear by it and you don't really
have to use your mouse at all so you can
be very very efficient and fast writing
your code so there's also idees which
are integrated development environments
they have a a little bit more features
than a standard text editor you don't
really need an IDE for most types of web
development but there are some that are
geared towards specific languages for
instance you have pycharm for python
developers you have PHP storm for PHP
developers so that may be something you
want to look into But ultimately I would
definitely recommend vs code to to most
people as far as far as web browsers go
that's really preference I'm sure that
all of you already have a preference I
like Chrome there's not really a
specific reason it just does everything
I need to I I like the dev tools I think
Chrome and Firefox would be the the the
two most popular Firefox also has great
Dev tools maybe a little better than
Chrome um you could even use Microsoft
Edge I I came up in the the Internet
Explorer days and Microsoft browsers
were just horrible I remember i6 and it
it was just a nightmare but now Edge
actually uses chromium under the hood so
you could just as well use that um
Safari I'm not too crazy about Brave is
really cool for uh for privacy features
Brave and Vivaldi and then there's a a
newer browser called polyan which is
directed toward web development but it's
not free and personally I'm not going to
pay for a browser Chrome does everything
I need um so it's just preference and
then for terminals
it used to be that that front-end
developers didn't really need to use a
terminal for much but now with all the
the framework clis and npm and git you
do need to know at least the basics so
as far as terminal programs go I think
the default in Mac OS or most Linux dros
are great uh for Windows Windows used to
really suck with terminals with the you
know the CMD command prompt I never
really could get into Powershell uh but
now the windows terminal isn't bad it
has SSH you used to have to use tools
like putty um I prefer get bash on
Windows which is a third-party bash
terminal um but you could also use the
windows subsystem for Linux it is a bit
more advanced though so I wouldn't
suggest that for beginners um and then
for Linux obviously you have tons of of
thirdparty terminals you have Terminator
alitt for Mac OS I'll either use the
default or iterm 2 which just has a a
little more features and I think it
looks a little better all right so now
we've come to the first big part of
learning to be a web developer and that
is HTML and CSS so these two
technologies are essentially the
building blocks of the visual part of
the web HTML is a markup language that's
used to structure the content of a web
page and then CSS cascading stylesheets
is the styling language that's used to
style the content so you can think of
HTML as the skeleton and CSS as the skin
you can't have one without the other
HTML itself is actually very very simple
it's just a bunch of tags that you use
to structure your content so as far as
what you want to learn about HTML you
want to learn how to create semantic
markup this means using the correct tags
for the correct content you also want to
learn about accessibility this is making
sure that your content is accessible to
everyone including people with
disabilities you want to learn all the
common tags and attributes so things
like heading paragraphs lists there's a
lot of older deprecated tags that you
don't even have to bother with uh I
would say semantic tags excuse me like
header and footer are very very
important so spend some time learning
how to structure your pages semantically
and then CSS is a a much different more
complex technology it's a styling
language that's used to style the
content of a web page it's very powerful
and it's constantly evolving um there's
a lot to learn about CSS you want to
learn about all the core properties for
things like colors fonts the Box model
which is how elements are laid out and
spaced on the page and how to use margin
padding borders um spec specificity is
important because sometimes you'll have
multiple styles that apply to the same
element and you need to know which one
will be applied and the different units
of measurements like pixels M's Rems and
percentages you'll want to learn about
different types of selectors like
classes IDs there's also what we call
pseudo selectors um you want to learn
about the different layout methods like
Flex box and grid these are are used to
lay out your elements in columns and
rows and then responsive design is
really important all of your projects
should look good no matter what device
they're being viewed on you know there's
there's a few elements to responsive
design but media queries are probably
the most important uh this is where you
can apply different Styles based on the
size of the screen so you definitely
want to be familiar with responsive
design so next we have CSS Frameworks
now at this point these are optional and
you could just go right to JavaScript
however these Frameworks can make things
much easier when it comes to creating
layouts they're also very popular and a
lot of companies use them and they're
pretty easy to learn when comparing it
to other Technologies like a programming
language so my personal advice would be
to spend a week or two learning one of
these Frameworks and there's uh there's
a ton to choose from however these are
the main four that I would suggest
looking at and to be even more specific
I'd say the first two but that's just my
opinion so bootstrap is one of the
original CSS Frameworks it's been around
since I believe
2011 and it's a very widely used
technology and has a large community
which is always a plus its component
based which means that there's a lot of
pre-built classes that you can use for
things like buttons cards nav bars Etc
and the upside to this is that you can
create uis and websites really quickly
and you have less classes in your HTML
the downside is that sometimes bootstrap
websites can look pretty similar now
it's fair to say that you can really
customize bootstrap and make it look
however you want but you will have to
learn SAS which is a CSS pre-processor
and I'll talk about that in a minute um
bootstrap also has an easyto ous grid
system that a lot of people like however
I definitely wouldn't suggest using it
just for that because you have CSS Grid
or Flex box which are built into CSS so
you don't need to use bootstrap just for
the grid another plus to bootstrap is
you get a set of JavaScript widgets like
models carousels and dropdowns and this
is great for people that don't have a
lot of JavaScript experience and still
want that functionality so I'd say
bootstrap is one of the best tools for
Freelancers because you can create
websites and layouts very quickly now
Tailwind CSS seems to be the most
popular right now as far as you know
content that you see out there and what
people are talking about you see it
everywhere in new projects a lot of
startups are using it it's a utility
first CSS framework that allows you to
build custom designs without pretty much
ever leaving your HTML and being utility
first makes it a bit different than the
rest of these because instead of having
a class for let's say a button which
would generally have mult multiple
Styles you have a class for each style
so you'll have a class for the
background color for the text color for
the padding so you almost never have to
write any custom CSS because every CSS
property has a class the downside to
this is you end up with a ton of of
classes in your HTML but the upside is
that you can really customize your
layout and they don't all look the same
which can be an issue with a lot of
these other options all right so next we
have balma which is a newer framework
that I really like it's it has some
good-look components and it's really
easy to use as far as class names go
it's not as popular as bootstrap or
Tailwind it's also not as customizable
as Tailwind um but it is very fast and
lightweight and I think it looks good
then you have materialize which has been
around for a while it uses Google's
material design system and as far as
component-based Frameworks go I think
materialized is one of the best looking
um obvious obviously that's just my
opinion there's a ton of components to
choose from and there's also JavaScript
widgets like modals and dropdowns
similar to what you would get with
bootstrap um from what I from what I can
tell its popularity has come down since
the release of Tailwind but it's still a
very viable option and some other
Frameworks out there are semantic UI
Foundation UI kit I'm not going to go
over all them because they're they're
all pretty similar once you learn one
it's pretty easy to pick up another one
so SAS is another option that you may
want to learn around this time it's a
CSS pre-processor that adds extra
functionality to CSS so it allows you to
write CSS with variables and functions
mixins um Native CSS is catching up with
SAS features for instance we have custom
properties in CSS which are essentially
variables they're not as clean looking
as SAS variables but they basically do
the same thing um there's still a lot
that SAS can do that CSS can't though so
you can nest and inherit Styles which is
a very helpful feature I would say learn
SAS if you're using a framework like
bootstrap where you need to customize
the Styles also it can make your CSS
very modular so you can separate it into
different files and then you can import
them into one another and this makes it
easier to maintain you basically create
your own CSS framework and you have a
separate file for things like button
stop or navbar Styles it's been around
for a while there are other CSS
pre-processors like Les and stylus but
they kind of just faded away SAS has a a
really good ecosystem of both command
line tools and guey tools to compile it
because you can't use SAS files directly
in the browser right you can't just
include them like you can CSS you have
to compile it down to regular CSS and
there's different tools that allow you
to to do that it's also great for
theming so where you want to have
different color options and things like
that um it is optional but again it's
something that's really easy to learn so
why not learn it you could you could
learn it in a weekend and I have a crash
course that pretty much shows you all
the features that you need to know so
next we have a batch of really helpful
tools that you'll most likely learn and
use early on so git is a version control
system for saving and versioning your
code as well as collaboration and say
you should learn it no matter what type
of developer you are you don't have to
learn it before you start coding like
you don't have to learn it right the
second but it should be on your list uh
as something to learn pretty early on
it's it's really not difficult to learn
the basics at the very least just create
a GitHub account and learn how to create
a repository and push that push your
code to that remote repository and you
can do it through the terminal through
commands or you can do it directly
through your your text editor through
the guei markdown is another thing that
you should probably learn it's a markup
language that's used to style text
similar to HTML it's used in a lot of
places such as GitHub it's used in
readme files which you should have for
every project that you create it's used
for documentation and it's very simple
to learn you can literally learn it in a
weekend or even even in a day uh and the
things that you don't know you can
always just go and reference I forget
the the exact URL to the markdown
website but very simple stuff so next we
have editor or IDE extensions so most
text editors such as vs code Sublime
Text adom they have extensions or
plugins that you can install and EMT is
something that anyone that writes HTML
and CSS should be using it's it's not
even extension for vs code it's built-in
but with some text editors you do have
to install it so it gives you really
nice shortcuts to create all kinds of
HTML tags with classes and IDs and
content CSS Styles it saves a ton of
time it saves you a lot of typing so
definitely something you should learn
early on live server is another great
one that I use all the time it gives you
uh a devel local development server that
updates as soon as you save your files
so you don't have to go and manually
refresh the page uh prettier is
something that I use a lot it's a code
formatter that will help you keep your
code clean you can make it so that it's
it it formats your code when you save
the file another thing that I would
highly recommend is to learn the
shortcuts of your editor because it
makes you much more efficient and makes
you code much faster all right so next
we have some AI tools that can Aid in
writing code and problem solving AI is
getting bigger by the day obviously
almost to the point where it's a little
bit scary but I know a lot of people
fear that AI will replace replace their
jobs or replace developers and I think
that may be true to an extent when it
comes to basic tasks but for the most
part I think it's just going to change
the way that we write code it's going to
change the landscape and what developer
roles entail uh my suggestion would be
not to worry about it too much and try
to utilize the tools that are out there
to your advantage to make you a better
developer and the two AI tools that have
been pretty much invaluable to me are
GitHub co-pilot and chat GPT so co-pilot
is an AI pair programmer that helps you
write code and you can install it as an
extension to vs code and many other
editors uh it's not perfect but it is
pretty amazing and it helps you be more
efficient saves a lot of time um helps
you solve problems I use it for even
things like like generating sample data
you can say give me you know 20 give me
a Jason file with 20 users with these
fields and it just generates it for you
so really cool stuff there's others that
are similar like tab9 kite there's a new
AI tool that looks really interesting
called Codi I haven't used it yet but it
looks really powerful
and not only can you use it for like
Auto completion and suggestions but you
also have a chat window where you can
interact with it and ask it questions
about your project and not just a single
file the entire project even if it's you
know hundreds of files so really cool
and then chat gbt is obviously huge
right now it's incredible for learning
just about anything um there's a few
things that you really have to
understand though when it comes to using
tools like this the first is that it can
be wrong it can be very wrong in fact so
you can't just rely on that uh I use it
kind of as a starting point along with
other resources and the other thing is
to make sure that you don't rely on it
too much if you're just using it to
generate code and using that code
without understanding it you're not
doing yourself any favors so use it as a
learning tool not as a crutch and if you
find yourself doing that I'd say don't
even use it for now um but if you use it
correctly it can be a great tool so next
we have design tools and this is another
area that you may or may not need to
know depending on your goals and I
usually suggest that you learn the
basics of design unless you're working
strictly backend as a freelancer you're
going to need to know some of this stuff
I think one thing that a lot of people
don't realize is if you plan on
freelancing you have to kind of have an
eye for design and be able to create
good layouts and good-look websit unless
you're Outsourcing that work which you
probably can't afford to do when you're
starting out so as far as tools go figma
is a great tool for designing websites
and uis that's probably what I would
recommend most people it's free it's
web-based uh it's very easy to use it's
not something you need to rush to learn
but it will help you in certain
situations some others include sketch
which I believe is still Mac OS only uh
you also have adob Adobe products like
XD Photoshop Invision seems to be really
popular for mockups and prototypes and
then you have canva balsamic as well as
well which are both web- based now while
we're on the topic of design and again
unless you're a backend developer I
usually suggest learning at least the
basic principles and these are some of
the ones that I suggest you keep in mind
when you're building websites or uis so
color and contrast is important which
color paletes look good the difference
in brightness between elements I see a
lot of hero images where I can barely
read the text uh that's against the
background image so you want to make
sure that your text is readable this is
one of the the biggest and most obvious
mistakes that I see so white space Also
important uh it's another big mistake I
see when people don't have enough space
between their elements or they have too
much space having the right amount of
white space can make a huge difference
and really improve readability and just
the overall experience of the website
scale is also important you want to make
sure that your elements are sized
correctly you don't want to have a huge
button and then a tiny input field
things like that everything should be
proportionate and then visual hierarchy
you want to make sure that the most
important elements stand out and you can
do this with size color contrast this
helps users navigate your website or UI
and it's not only important for how your
website looks but it's also important
for how it functions and how successful
it is in terms of sales or signups or
whatever the goal of of the website is
so obviously there's other principles
typography is another one you want to
make sure that your fonts are readable
and consistent things like that and I
think these are skills that anyone that
works in the front end can benefit from
you don't have to be a designer but you
should know the basics okay so
everything we've covered so far has to
do with creating static websites and
layouts and not really any Dynamic
functionality or interactivity so that's
where JavaScript comes in JavaScript is
the programming language of the browser
now how much JavaScript you learn
depends on your goals so if you plan on
being a backend python developer then
you probably don't need to learn much
much but if you want to become a
front-end developer you'll probably end
up using a JavaScript framework like
react so you need to learn quite a bit
if you want to be a backend or full
stack developer and use node.js then
obviously you need to learn quite a bit
of JavaScript as well so this brings me
back to why your end goal is so
important now people always ask me how
much JavaScript should I learn before
moving to a framework like react and
Shameless plug here I do have a course
called modern JavaScript from the
beginning that'll teach you everything
that I recommend plus more it's a a
37-hour course but as far as just you
know an overview of what I would suggest
I'd say l"
0UvA7zvwsmg,"what's going on guys in this video we're
going to be looking at and experimenting
with HTM X it's a small JavaScript
library that allows us to create Dynamic
front ends without having to write any
JavaScript at all and we can do this by
using special attributes in our HTML
called hyperscript attributes so we can
basically make HTTP requests just by
adding in a specific attribute so if we
look at the homepage here you can see
that there's a button and there's an H
post attribute so what this will do is
it will make a post request to whatever
this endpoint or this route is and
there's also HX get put patch and delete
so as it says here under motivation why
should only get and post methods be
available so traditionally when you
create a form and you submit to a server
you can only do method equals get or
post but with hmx you can use put patch
delete so that right there is very
helpful and then you can also make HTTP
requests using any element not just a
tags and form tags like you can with you
know regular HTML and then you have
methods I'm sorry attributes like HX
swap which will take the response
whatever this responds with and it will
swap this button for whatever that
response includes so you are pretty
dependent on having a backend this isn't
something like Alpine JS where you want
to use it just to have some some little
conditionals and Loops within your HTML
without writing JavaScript Alpine's
great for that and you can actually use
both of these together this is more for
full stack applications rather than you
know small front-end applications
because you're always making a request
to some kind of endpoint now what we're
going to do is use node and Express on
our back end but it could be absolutely
anything and in fact HTM X is getting
really popular with d Jango so that's a
real popular stack it's also used a lot
with goang but you could have anything
as your your back end but like I said
we'll be using node and express now HTM
X is is really small it's only 14
kilobytes so it's very very lightweight
um so if you want to have some Dynamic
functionality and you know you want to
easily make requests and replace certain
parts of your application without having
to make the page reload and you don't
want to use uh you know a frontend
framework like react or uh view then
it's a great option so if we look under
reference you'll be able to see all the
different attributes that are available
so HX get and post those will make get
and post requests and then you also have
your delete and your put in your patch
um HX swap we looked at that now many
times you might not want to just swap or
replace the element that's making making
the requests with the response but you
want to Target somewhere else so that's
where you would use HX Target so you
specify the target element to be swapped
and HX trigger is used to specify the
event so if you want it on a click or a
mouse over any event you can make um
have it make an HTTP request all right
now instead of just kind of going
through and explaining all these what
we're going to do is we're going to
create a couple small projects where
we're using HTM X uh on our front end
and we'll have a simple node.js and
express server on our back end so let's
get into
it all right guys so as I said we're
going to be using nodejs and express as
our back end so we're going to just
spend a couple minutes setting up a very
basic server we want to have a public
directory where we can serve HTML files
and that's where our HTM X attributes
will go okay so if you if you aren't
familiar with no noden Express just kind
of bear with me we're just going to set
this up really quick so you do have to
have nodejs installed um go to
nodejs.org download it install it and
you should have access to the node
command okay and I'm just using my
integrated terminal here so the first
thing I'm going to do is generate a
package.json so we'll say npm innit
Dy and that will create our package.json
file and as far as what I want to
install as dependencies we just want
Express so npm install Express and then
I also want to install as a Dev
dependency so I'm going to use-
uppercase D nodemon just so we don't
have to restart the server it'll
continuously watch our server file all
right and then in the package.json I'm
just going to add a couple things here I
want to be able to use the um es module
syntax the import over the commonjs
require syntax so I'm just going to add
here type and we're going to set that to
module over commonjs and then we'll
create a Dev script that will run our
server file which we haven't created yet
it'll run it with nodemon so let's say
nodemon and then
server.js okay that should be all we
need to do in here now let's create our
server JS
file okay so this is just our the entry
point to our back end and what I'm going
to do is just paste in some a couple
lines of code here um actually we don't
need xss just yet um so basically we're
just bringing an Express we're
initializing it into this app variable
and then we have a couple lines of
middleware so this will make it so the
public folder that we create is static
and we can just serve HTML files from it
and then these two lines here are just
middleware so that we can get data from
um either adjacent API clients or form
bodies and then here we're just starting
the server we're listening on Port 3000
so we should be able to now run npm
runev since we created that script and
you can see it's listening on Port 3000
we haven't created any routes yet so
there's nothing to really to to to hit
or go to but our server is up and
running all right so now let's create a
folder called public and that's where
like I said all of our HT ml files will
go so I'm going to say index HTML we'll
just generate some HTML here for the
title I'll say HTM X crash
course and I'll just put an H1 in here
and for now just say hello all right now
since I made this public folder static I
should be able to go to my local host
3000 and see that index HTML file so
let's say Local Host uh not 8,000 we
want 3,000 and we see
hello okay now to get started using HTM
X there's a couple ways to do it if we
go to docs and then installing so you
can download it locally if you want and
include it in your file structure you
can install it with npm if you're using
front-end tooling or the easy way to do
this which is what we're doing is the
CDN so we just want to grab this script
tag put that in any HTML file where we
want to use it and then in addition to
that I just want to use um uh Tailwind
so let's add that script tag as well so
that's going to be source and
htps
CDN
do Tailwind
css.com okay and then if we look at the
page now the font should change if I
reload so now we know Tailwind is
included all right and I'm just going to
make these smaller so we can see them
both at the same same
time now the first thing that I want to
do is is basically just show you how we
can have a button that will make a
request and get that response and put it
into the browser without writing any
JavaScript just by having a couple
attributes so in the body here I'm just
going to add a couple classes I'm going
to wrap this in text Center and then
we'll just have an H1 and I'm going to
add let's say text these are just
Tailwind classes font Bolt
and let's do my so margin on the Y AIS 5
and I'm just going to say
simple request example okay and this is
the code that will be in the final repo
so that's why I'm kind of setting it up
like this now we're going to have a
button and let's just make it we'll say
BG blue 500 let's do text- white and
padding y will do two and then padding X
we'll do three whoops didn't mean to do
that and let's do
My5 we'll make it rounded
large and that should do it so in the
button text we'll just say fetch users
because that's what we're going to be
fetching okay so if I save that and we
reload now we have this button obviously
this doesn't do anything at the moment
but what I want to do before we we even
interact with our with our own server I
just want to you an example where we
could use a public API like Json
placeholder which just will allows you
to fetch fake users to-dos whatever you
want so on the button here I'm going to
create a get request and I can do that
with HX dget okay and then in here I'm
going to put the URL that I want to make
that request to which is going to be
Jason
placeholder do typy code.com
users and that should give me an array
of of
users um now obviously you're probably
not going to want to put that array
directly in the body but I'm just giving
you an example of making a request and
doing something with it now in addition
to the to the get requests we can do HX
DT trigger and then specify the event
when we want this to happen in this case
we want it to be a click all right so
what I'm going to do is come over here
reload click fetch users and what
happened is it made that request it got
the response which is this Json array
and it put it inside of the button okay
because we didn't specify any Target or
swap or anything like that now the
trigger we don't even need this if it's
if we want to click because that's the
default for a button however if we
wanted something different like let's
say um Mouse over and then if I reload
and I just just Mouse over the button it
makes the request then so you're not
bound to just certain events where you
know to make requests and of course
we're not writing any
JavaScript now we like I said if it's a
click we don't need the trigger so I'm
going to get rid of that and we could
also use HX Swap and what that'll do is
it'll allow us to swap out the button
for uh for the response and again this
is a uh an array right adjacent array
usually what you would get back from
your server is markup so you would
replace it with like an HTML list of
users which I'm going to show you in a
second uh now these swap swap can take
in like outer HTML inner
HTML uh as well as some other selectors
but I'm going to do outer HTML now if I
click the button you'll see the button
goes away and the outer HTML is then
replaced with whatever this responds
with all right so hopefully that makes
sense now I want to move on to actually
having a list of users instead of uh
just an array so we're not going to use
this public API anymore we're going to
use our own so let's replace that with
with just slash users and since there's
no domain name or anything then it's
going to look on our own server so let's
save that if I click it nothing happens
but if we look in the the console here
you'll see it is making a request it's
just a 404 because this doesn't exist
exist so let's create that so now I'm
going to go to my backend to server.js
and I'm just going to put all my routes
in this directly in this file it's a
little bit messy but if you want you can
um create separate route files if you
know how to do that so let's say we're
going to
handle let's say handle get
request uh to fetch users all right so
the way we do that is take our app
variable and we want it to to be a get
request that we're handling so.get and
then slash users and what I'm going to
do is just
uh uh yeah we'll just we'll just do a
just a static array of users for now and
then I'll show you how we can still get
users from Json placeholder but make it
a formatted list rather than sticking an
array in so we want our callback
function here
oops and that's going to take in Quest
and response
objects and for the users we'll just say
users set to that set it to an array and
they're just going to have a
name and an
email uh actually I'm sorry just a name
an ID and a name so let's say ID
one name and then let's just copy that
down a couple
times we'll
say save Bob
Williams change that to two three and
then we'll
do say Shannon Jackson all right so we
have some users that I want to use in
the list that we that we return from
this uh from this route so we're going
to take our response object here which
has a method called
send and then in here we'll put some
back ticks because we want this to be a
template string and then I'm just going
to have in H1 I'm just going to give it
a class of text-
2XL and let's do font D
bold and we'll do
margin uh yeah we'll do
my4 all right and we'll just say
users okay now under that is where I
want to have our
ul and we want to then Loop through the
users and output a list item for each
one so let's use our template literal
syntax here take our users we're going
to map through and say for
each for each user then we're going to
return a list
item and inside that we'll have the
username so let's say user.name now this
will be an array because we're taking an
array and we're map we're using map but
to turn it to a string all we have to do
is add on. jooin and just pass in an
empty set of of single quotes all right
so that should do it let's save that and
now when I come over here and I click
let's reload this click fetch users now
instead of just getting an array in the
browser we get a heading and we get our
users in a in a list and we happen to be
using node and express but you could do
this with anything like I said Django is
pretty popular with HTM X and our front
end of course we have no JavaScript at
all we just added a couple attributes
now the way we have it at the moment we
click the button and it replaces or it
swaps with the response but you probably
want to put that somewhere else rather
than replacing the button and that's
where target comes in or HX D Target in
fact we can get rid of the Swap and now
say Target and you can put certain
keywords in here like I could say this
to mean this particular button or this
element I could do um like next sibling
previous sibling but you can also put
just straight IDs in classes so I'm
going to say ID of users which of course
then I have to create that so let's go
under the button here and let's create a
div with the ID of users oops okay so
what should happen now is this is where
the response should go so let's reload
and click the button and now you you can
see it's put in that div and then
another thing you could do this is well
I'm not going to keep this but just to
show you that it exists we have HX
confirm if you want to do a confirmation
we'll say are you
sure you want to fetch users so if
you're making like a delete request or
something this would be really helpful
and and now you'll see if I click I get
that alert or that that
confirmation but I'm not going to keep
that so let's get rid of that now I know
this is backend stuff but I want to make
it so that we instead of getting just
this static array of users we get it
from Jason placeholder so we'll comment
out these users and since I'm going to
be making a fetch request and using a
sync await I'm just going to add a sync
to this function and then right above
the send we can just make our requests
so we'll say the response is going to go
in this variable we're going to
await and and fetch from
https Jason
placeholder uh placeholder do typy
code.com
users okay then we just want to we'll
say users set that to await and we want
from that response we want the
Json and then here we don't have to
change anything because we have our
users now coming from there we're going
to Loop through and output the names so
let's save that reload and click fetch
users and now you'll see we get I think
it's the latest 10 users from the API
all right now I want to show you the HX
indicator attribute which allows you to
have some kind of loading or some kind
of spinner graphic or whatever you want
while it's waiting for the server so to
do that we'll go back into our HTML file
and let's add another attribute of HX D
indicator and what you'll do is set this
to an element that you want to show when
it's interacting with the server so
let's say an ID of loading and of course
we need to create that so you can put
that wherever you want it to display I'm
going to put it right above users and it
needs to be a span with the class of HTM
x- indicator and then whatever the ID
that you used in my case loading and I
could just have like that if I wanted
but I'm going to use an image a gif so
in public I'm going to create an IMG
folder and I'm just going to bring over
the image which you can get from the
final repository if you want to use it
it's this loader.
GI so this right here and then inside
that span I'm going to have my image tag
and I'm just going to add a class of M
Auto and h10 which will make it smaller
and then the source will be IMG SL
loader GIF and we'll say loading all
right so if I save
that you can see it really
quick but it's I mean obviously it's a
quick server that it's local so what I'm
going to do is just kind of mimic a
slower server so here let's just use set
timeout and just wait two seconds so I'm
just going to wrap this code here we'll
say set
timeout and that takes in a function and
it takes
in um however long you want to wait
let's say 2,000 milliseconds which is 2
seconds and in this function is where
I'm going to put this okay this stuff so
we'll cut that and we'll put it in
here all right and then we're getting
this error because since we're now using
this call back we have to make this a
sync now we'll reload and I'll click the
button and now it's waiting 2 seconds
and you can see it shows the indicator
as it
waits all right and again very very
simple frontend code now there may be
cases where you want to send data with
your request and we can do that with HX
vals so let's say we want to send a
number for a limit that we want to set
on the users maybe we want to set it to
three or five so what we can do is add H
x- vals and we can set this I'm actually
going to use single quotes here because
in this object we need to wrap this in
double quotes like adjacent object so
I'm going to say limit and then set that
to
five all right now I can get this I can
I'm sorry I can get this value by using
this key with request. query. limit or
whatever this is so let's go back to uh
back to our back end and I'll put this
right in the set timeout let's say const
limit and we can get it with request.
query. limit I do want to make this a
number so I'm just going to add a plus
sign here cuz it's obviously it comes in
as a string and I'm just going to say or
10 so if it doesn't ex if this doesn't
exist then we'll make the default 10 and
then with the Json placeholder API you
can add a query string of underscore
limit and set it to what you want so I'm
going to change these quotes to back
ticks this one too let's change that to
a back tick because I'm going to do
question mark after users and then
underscore limit and then I'm going to
set that to whatever that limit is okay
which I set it to what five so now when
I come back over here and reload fetch
users now I get five users if I change
this to let's change it to
three fetch users and now I get three
because I'm sending this data to the
back end through a simple attribute all
right so I think that's all I want to do
with this particular project so I do
want to save this HTML so I'm going to
just copy it and I'm going to create
another folder in public and we'll call
this request. HTML and this will all be
in the the repo in the description but
I'm going to paste that in and save it
and now we can try something else so
let's see I'll just get rid of
everything in the
body all right now
what I'm going to do next is just create
a very simple temperature um converter
where we can pass in a Fahrenheit
temperature and it gives us Celsius back
so basically we want a form um event so
when we submit the form it will go to
the back end it'll do the calculation to
get the temperature and then it'll send
back some markup that will show us you
know whatever is Fahrenheit equals
whatever Celsius so I'm just going to
paste in the HTML the body here um
there's no HTM X it's just the the
interface which is very simple so I just
added a gray body we have a container we
have a card and an H1 and then a form
with a single input which is um
Fahrenheit has the name of Fahrenheit
all right so to make the request we're
going to want to add onto the form this
time not not a button so let's say HX d
trigger and we'll set that to submit
which is actually the default so we
don't we don't really need to add the
trigger here but I'm just going to add
it anyway now I want this to actually be
a post request so instead of HX get I'm
going to do H HX post and let's say
slash convert which will be the route
that we want to hit on our back end and
then where I want to put the response in
the body let's say Target h h HX Target
and I'll set that to an ID of result
okay so that's where we're going to put
it and then let's also do an indicator
so HX
indicator and I'll set that to an ID of
loading
again all right and then of course we
need to have both of these divs so let's
go down here and we'll go right below
the button Let's do an ID of
result um and then I'm going to do a
class of MTC six and text- XL so that
will be the result we're not going to
put anything in here because it'll get
filled dynamically and then let's do our
indicator so we'll have a class of HT
mx- indicator and then let's do an ID of
loading and then again I'm just going to
use my image let's do um margin Auto and
h-10 and image slash loading
or loader.
GI all right so at the moment if I click
convert and 32 I just have that in here
by default but it's not showing anything
but it is making the request so if we
look down here you can see every time I
click it it's making the request we're
just getting a 404 because it doesn't
exist so let's create that endpoint
we'll go in the back end here and let's
say
handle
post request
for uh I guess for
temp
conversion so it's going to be a post
request so we want to do app. poost and
the URL is going to be
convert and let's add request
response now I'm going to do the same
thing with the set timeout just so we
can see the um the image the the loader
so we'll say set timeout let's
[Music]
do have our function and then let's do
two seconds here so 2,000
milliseconds and then in here we're
going to let's say
Fahrenheit Fahrenheit I think that's how
you spell it right yeah so Fahrenheit
and then I'm going to parse this as a
float so let's say parse
float and in here to get the the data
that's in here in this case that 32 we
can do that with request. body Dot and
then whatever the name is which is
Fahrenheit right if we look at the input
it has the name of
Fahrenheit and in order to get data from
the body you do have to have the
middleware that I added earlier so
that'll get the fahrenheit now for the
Celsius let's say
con Celsius and the conversion for that
is going to be the
fahrenheit minus 32 and then that's
going to be multiplied by 5 / by 9 oops
that should be
slash okay so that should give us the
Celsius then what I want to send back so
let's say res.
send and I'm going to send back uh
template string and let's put this in a
par
graph okay and then I'm just going to to
put the
fahrenheit so we'll say Fahrenheit
degrees uh
Fahrenheit is
equal to and then we'll have the Celsius
value Celsius and I'm just going to add
two fixed with two decimal
places and then say
degrees uh
Celsius all right yeah that should do it
so let's save that and then come over
here reload I'm going to keep 32 in
there I click it waits 2 seconds and
then we get 32? fahren is equal to 0? CI
if I change that to let's say
50 and we get 50? is equal to 10?
C all right I guess we don't really need
the the two fixed you can keep it if you
want but I think it looks kind of weird
so we'll get rid of that
all right cool so that's just another
example I and I figured I'd just show
you guys that to show you uh using a
different element we're using a form
with a different trigger and a post
request over a get request now another
thing we can do is polling so this is
where we can make a request to the
server every so often to get updated
data so if we want to set it to every 5
seconds or every 30 seconds or whatever
so let me give you an example of that
now I do want to save this so I'm going
to copy it and inside public I'll create
a new file here I'll just call it uh
temp. or
temperature say temperature. HTML paste
that in save it and then in the index
I'm just going to uh let's see yeah
we'll just get rid of everything in the
body and get rid of that
class okay so I'm going to give you a
very simple example of polling to begin
with and then we'll do like a little
weather app or a mock weather app that
will fetch from the server every 5
Seconds the weather so that it'll it'll
change automatically but first we'll do
just kind of like a simple counter
example so in body let's create let's
just say
text- Center and I'm going to have a
span here
uh I want to make this I want to make a
get request so I'm going to use HX dget
and I'm going to set that to SL pole
okay that's the end point we're going to
hit and then for the trigger this is how
we can make it poll is we can say
trigger and I'm going to set it to
every every 10s so every 10 actually
let's do five make it a little shorter
so every 5 seconds so basically what
will happen is it'll hit this SL Pole
every 5 seconds and then it will replace
whatever that response is into this span
of course we could put it wherever we
want if we want to use a Target or
whatever and I'm just going to say
loading to begin with all right so now
let's go to our server and let's
add let's say
handle get request
for uh polling
example so
app.get and SL
Poole and all I'm going to do here is
I'm going to set I'm going to start off
with just a counter variable I'm going
to put that outside of the route so I'll
say let counter set that to zero and
like I said This Server file is is kind
of messy if you want to split it up into
separate files you can do that and then
I'm going to take that counter in here
and just increment it by
one and then so basically just
simulating you know updated data and
then let's say const data and we'll send
back just a an object with a value of
whatever that counter is and then we can
actually just res. Json I mean normally
you wouldn't put Json right in the
browser but it's just an example so if
we come over here and reload we see
loading
and in 5 seconds it should make another
request so now we see value one I know
that's really small hopefully hopefully
you guys can see that but um Oops why is
there we go so value
three so every time it hits the server
this counter is updating by
one so that's just a very uh simple
example of polling now let's make it a a
little cooler and create like a a mini
weather app so what I'll do is we'll do
the backend
first so let's
say um we'll say
handle handle get requests
for for weather I don't know yeah that's
fine so let's say
app.get and let's call this get
Dash
temperature all right and
then request
response and this is going to be very
simple I'm not going to actually reach
out to a weather API although you could
if you wanted to but I'm just going to
generate a random Celsius temperature so
let's say current actually I'm going to
Define this outside of this so
let
current temperature set that to 20 by
default and then here we'll say current
temperature and we'll add a pend so plus
equals math.
random and we're going to multiply that
by two and
minus1 so that will just be a
random temp
change and then I'm just going to
respond from this route so res. send and
what I'm going to send is that current
temperature value I'm going to add two
fix to add add one decimal place and
then just concatenate on the
Celsius uh let me just grab the degrees
symbol I'm just going to add that onto
the end of it now let's go to our index
HTML and instead of hitting pole we're
going to hit
get temperature and we'll we'll stick to
every 5 seconds and I'm just going to
make this look a little better let's add
a couple
classes I'm just going to paste these
classes in
actually okay and then I'll just add a
heading above the span Let's do an H1
we'll say
text- XL margin bottom four and we'll
say weather
in New York and then I'm going to just
wrap this down here in a paragraph and
let's do
text- 5xl because I want that to be
really big so we'll move that span into
the parag graph all right so let's
reload and now weather in New York it's
loading and in 5
seconds let's see something's going
wrong
here did I spell something wrong oh I
forgot my slash here let's try that so
reload and 5 Seconds there we go so
19.9 Celsius and then in another 5
Seconds it'll check again now it's
20.7 so obviously this isn't the real
weather we're just simulating it uh you
could connect this to a weather API if
you wanted to do that and you'd have it
you know updating in in real time
basically okay so that's polling now
let's create a a cool little Search
widget where we can search for users
through an input through a text field
and we'll have it fire off the requests
every time we we push down a key
all right so let's go into index HTML
I'm just going to grab this here and
we'll put this
into uh I'll call this polling
HTML paste that in save it and then we
can get rid of this stuff
here um I'm just going to keep the class
of BG blue
900 and I might as well just grab the
HTML for this and I'll just paste that
into thex
body save that reload all right so we
just have this this search interface and
let's just go over it real quick so we
just have a container it kind of gave it
a dark dark mode look um then we have
the input which I haven't done any HTM X
attributes yet we just have uh type
name um table so basically what we want
to do is fill this table fill the table
body with the results so you can see the
table body has an ID of search results
so that should be our Target so let's go
to the
input and let's see we'll just add on
under the placeholder here I'm going to
make this a post request so we'll say HX
post and we want it to go to slash
search and then let's add a
trigger so
trigger now for this I'm going to say
trigger on
input changed and then you can also add
a delay since we're doing it as we type
we might want to add a little delay we
can say 500 milliseconds and then add
search all right
so this should make a request every
single time we we type something and
then the target so HX Target so this is
where the the response will go and
that's going to be the ID of search
results which we have below and then
we'll go ahead and do an indicator on
this as well
so I'll set that to let's say
loading and then I'll put the
indicator up here up top so let's go
right under the container and we'll say
span class HTM
X indicator and
ID of
loading and then I'm just going to use
my image so we'll give it a couple
classes
here IMG loader
loading all right so yeah I think that's
really all we need for for the front end
so you can see just how simple this is
if you were to do this with vanilla
JavaScript you'd have to select you know
select the Dom elements and then add the
event listner and then make the requests
using fetch this is very simple so on
the server
side um we're going to go ahead and add
the route for this so let's say handle
post request for user
search so it's a post
request and it's going to be slash
Search and say request
response so as far as the the
users uh I should say contacts it's like
a contacts thing so we'll say for
contact search I'm going to just create
an array of
contacts in fact I'm going to paste it
in just because it's I have quite a few
here and then I'll show you how we can
refactor it to use Json placeholder like
we did with the other one so we have
these contacts I'm going to get the the
text that's passed in here and call it
search term so let's say con search term
we can get that with request. body Dot
and then search CU that's what I called
it that's the name and I'm just going to
make it to
lowercase okay so that'll get the search
term let's check to see if there's not a
search
term so if there's not then what I'm
going to return is just going to be um
let's say
res.
send and I'm just going to return an
empty table row right because I don't
want anything to show up if there's no
search term otherwise when we clear it
it'll show all the users all the
contacts then after that let's perform a
basic filter or basic search so we'll
say search results and I'm going to set
that to the contacts array and then
we're going to use the filter method so
here we'll say for each
contact let's say con name and we can
get that with con contact. name and I'm
going to make it to
lowercase and then I'll do the same with
email because we want to be able to
search the email as
well then what we can do is say return
and just in parenthesis here I'm going
to say where the name includes the
search
term okay
or let say or the email
includes the search
te"
2vPVdZWhuM8,"[Music]
hey what's going on guys so I know the
title are you too dumb to code is a
little click baity for my taste but it's
the topic of the video and I posted a
long tweet about this yesterday and it
got some great responses so I figured
I'd make a video on it so from what I've
seen over the years having the feeling
that you're too dumb or not good enough
to code is something that a lot of a lot
of us feel at some point throughout our
learning process in
sometimes throughout our entire career
and I've been doing this for over 15
years and I would say that at least once
a week sometimes more I run into an
issue or some kind of bug and I think to
myself maybe I'm too stupid to be doing
this and definitely too dumb to be
teaching this for that matter and I'm
going to talk a little bit about why I
think it this is so prevalent in
software development and then I'll share
kind of my own experience with this so
what I'm really talking about is
impostor syndrome and if you don't know
what that is it's when you feel like you
don't belong in a certain field or
profession sometimes despite any
evidence of your competence and your
achievements and it's a common
experience especially in fields like
software development where the the rapid
pace of change and the constant need to
learn and adapt can be really daunting
and and not just software development
but any any kind of Technology field
because technology just grows so fast
and I think that that's why many of us
feel dumb or stupid at times uh if you
think of a field or profession like say
being a hairdresser and I don't mean to
pick on hairdressers it's just my wife
is a hairdresser so I'm I'm using that
as an example because I've seen her do
this profession for 18 years but I think
that this is true for most Blue Collar
jobs you you have to learn the trade
right and that can be very difficult you
go through school you learn to adapt you
find your groove but once you do once
you learn that fundamental
knowledge the stuff that you have to
learn from that point on is very very
minimal relative to software development
and the main reason being is there's
just so much to it there's so much to
technology and it's always changing and
I don't know for sure but I don't think
that there's many hairdressers that have
an impostor syndrome and that's just one
example of course now with tech you
again you you have to constantly be
learning it's impossible to know even CL
close to everything even if you're
talking about a single programming
language there's always more to learn
which means that there's a bunch of
stuff that you're not going to know and
that can sometimes cause you to to
question yourself so I think that that's
the first reason why we may feel this
way it's just an abundance of
information the second is because I
think that a lot of us including myself
pay attention to other developers and it
seems like everyone else knows more than
you do and I know not everyone feels
this way but a lot do uh however a lot
of the time the truth is that many of
those people that you're looking at that
you feel know a lot more than you do
they feel the same way you do it's just
you don't see their struggles and their
screw-ups you know you don't see them
going to the documentation a 100 times
to look up the same stupid block of code
or spending hours troubleshooting a
seemingly simple uh issue the reality is
coding involves uh a lot of trial and
error searching for Solutions on online
these days a lot of AI and chat GPT so
every developer regardless of their
experience level has been through these
challenges and you can't really go by
what you see on the surface and of
course everyone has been doing this for
different different amounts of time now
I'm not saying that everyone has
imposter syndrome in fact I've met quite
a few devs that are on the complete
opposite end of the spectrum that think
they're smarter than everyone else and
they can do no wrong I think we've all
met people like that and it's not just
developers as for me personally a lot of
people think that because I teach and I
create courses or because I've been
doing this for so long that it comes
easy to me and that's the furthest thing
from the truth you know when I was in
high school uh a was a really good grade
for me so learning just doesn't come
easy to me in fact I think that what
makes me a really good teacher and why
I've been successful in this area is
because I understand how to explain
things in a way for people like me that
don't find it very easy to wrap their
head around certain Concepts you know I
think a lot of great natural-born
programmers aren't always the best
teachers because they can't relate to
the newbies you know they can't they
can't understand how to not understand
if that makes sense so with that said
you can imagine working in this field
that I've questioned myself many times
you know and it was bad in the beginning
and as time went on it got better but I
still think these thoughts pretty often
but the main difference between thinking
them now and back then is that now I I
have the thought and I let it pass you
know I don't dwell on it I don't let it
affect me emotionally or drive me in any
decision making it's just there and then
it's gone and that's really the best
advice that I can give you guys is to is
to not let these thoughts control you
and to also realize that many people
around you feel the same exact way they
just don't show it just like you don't
walk around showing how much you're
struggling you know although these days
it is more accept able to say that
you're struggling which is good I mean
we shouldn't go around whining all day
but I think that the fact that we're
able to even talk about imposture
syndrome is a good thing because at one
point nobody talked about this stuff I
think that it lets people know that
they're not alone especially beginners
and that's really the reason for me
making this video and and posting tweets
like that you know and I had a bunch of
people thank me because when they see
someone that has you know built a pretty
big following in this Niche and has
experience and and you know uh when they
see people like that having the same
issues it gives them hope and that's
something that I love doing now to to
genuinely answer the question can
someone be too dumb to code in my
opinion I'd say that it's not that
they're too dumb it's that they aren't
motivated enough to learn you know I
have family members that that watch my
videos and say they could never do that
I could never understand this but they
don't want to either it's not something
they're interested in you know they're
not driven toward technology so it's not
that they're not smart enough it's it's
just it's not for them you know and if
you're truly interested in being a
developer and you're willing to do the
work there's no question in my mind that
you can get there and it may take longer
than the average person but you can get
there and you're you're free to disagree
I'm sure many of you will um this is
just my own point of view not just from
being a developer but from being a
teacher and watching people learn and
grow but that's it guys keep pushing you
know you're going to hit roadblocks but
you'll always find a way around them so
that's it thanks for watching and I'll
see you next time"
1_gLbLPx2T8,"hey what's going on guys so if you want
to become a web developer these days it
can be very overwhelming for for many
different reasons including the amount
of Technologies and tools available the
rapidly evolving landscape especially
with all the AI advancements and just
the vast amount of information to absorb
and in the past when we classify web
development our web developer positions
we really divide them into three
categories and that's front end back end
and full stack but the truth is that
there's so much more to that there's a
lot of sub categories and I'd say the
lines between the front end and back end
are really really starting to blur
especially with Technologies like
server-side Frameworks or server-side
rendering Frameworks serverless
functions and again with AI doing more
and more the general work I think that
now is a better time than ever to really
establish yourself in a specific area so
with that said what I want to do in this
video is just look at a an in-depth list
of more targeted paths that you can take
and different roles that are available
under the wide range of web development
so front-end back-end full stack they're
all meshed into these categories but I
didn't use those umbrella terms to
describe any of these categories so this
will probably be quite a long video
because I do want to really dig in and
look at the skills and tools that you'll
need if you do decide to really Niche
down and take one of these paths now
before we get started I just want to say
that I've met a lot of people through
the years doing this and it seems like a
lot of the people that have really made
it and have become really successful are
ones that focus on a specific area and
become an expert in that area so just
keep that in mind because I know a lot
of people try to learn everything and
master everything and it's just
impossible so it's better to really find
something that you're into that you
really love and stick to that area and
focus on that set of Technologies those
tools and so on all right so let's take
a look at the list
[Music]
all right guys so this may be a bit of a
lengthy video because there's 15
different roles and paths that I want to
go over and I'll talk about what each
role entails including skills and
Technologies and feel free just to kind
of let this play in the car or in the
background while you clean or cook the
slides are just some bullet points for
each role or position they're not really
things you have to look at
so the first area is not even full-blown
web development it's more in the area of
web design and that's a UI ux designer
which stands for user interface and user
experience so when you go to or you
build a website or an application there
are stories to create for users to
follow and this is where UI ux designers
come into play they focus on creating
the look The feel and functionality of
the user interface and they ensure that
it's visually appealing and user
friendly and I think that this gets
overlooked a lot when it comes to talks
about web development I mean great you
know react or you know view but someone
has to put together the story and the
flow and the the design aspects of that
application and it's an incredibly
important position so it and it's really
just the start of everything so if you
feel like you have more of an eye for
design more than hardcore programming
and logic then this might be a route to
take and you'll need to have a good eye
for design and understand design
principles like typography white space
visual hierarchy your main software in
this case won't be an IDE or a text
editor like the rest of these roles
it'll be some kind of design tool like
figma Envision or something like that so
you'll also create wireframes to plan
out the layout and the structure of web
pages or app screens and develop
interactive prototypes to test and
refine the user experience so this last
one here is just my opinion but even if
you're going to be a UI ux designer I
think you should still have some basic
understanding of HTML and CSS not that
you have to take any layout and be able
to take any layout and create a web page
from it but just having that basic
knowledge I think that it can help
bridge the gap between design and
development and lead to smoother
collaboration with Developers and a more
cohesive final product but that's just
my opinion
so next we have a single page app or a
spa developer and this is essentially a
front-end developer and this is where we
specialize in creating single page
applications which are web apps that
load once from the server and then
dynamically update the content without
requiring the page to reload and the
Technologies used to do this are
front-end JavaScript Frameworks like
react angular views felt so a big part
of your job is mastering one of these
Frameworks and its ecosystem and
obviously HTML and CSS also play a big
part in this as well
so you'll Implement client-side routing
to manage your views your components
State Management is extremely important
and is probably the toughest part of
building a single page application at
least in my opinion so you'll be using
tools like Redux or view X to manage
your application State and you'll also
need to know how to interact with apis
even though you won't be creating you
know rest apis or graphql apis you'll
still need to know how to interact with
them so you'll need to know HTTP methods
and Status codes headers and more you'll
be using the fetch API or something like
axios pretty often so that's a front-end
developer or a single page application
developer next we have server side
developers which is basically what we
know as a full stack developer and they
specialize in creating web applications
that that generate and render content on
the server before delivering it to the
client's browser and there's a few ways
to do this and different combinations of
Technologies so you could use something
like PHP with laravel with blade
templating or you could take advantage
of the newer SSR Frameworks Like nexjs
Remix nuxjs and have some code on the
client and some on the server so the
javascript-based SSR Frameworks are
really popular right now but other
languages have had a lot of the same
capabilities that those give us for
years now so you can be a server-side
web developer and specialize in
something like python or PHP golang
c-sharp or just about anything else so
you'll pick a server-side technology or
language
along with a framework you could also go
the more modern SSR route databases and
orms play an important part so postgres
myc equal mongodb things like that as
well as orms to connect and interact
with those database systems whether
that's sqlize or mongoose or something
like Prisma and then if you go the
traditional fully server-side app and
you don't want to work with front-end
JavaScript Frameworks then you'll
probably be looking at template engines
like ejs pug blade twig there's tons and
tons of them different languages and
different Frameworks have or use
different template engines
and then authentication and
authorization are also extremely
important so you learn about sessions
cookies Json web tokens learn to use
oauth to use logins from third-party
platforms like Google GitHub Facebook
I'd say this role is probably the has
the widest range of Technologies on this
list there's really so many so many
different types of
server server-side Developers
now the next one is API and
microservices developer and it's a
specific type of backend developer that
specializes in designing developing and
maintaining microservice architectures
and apis so they basically create small
independent services that communicate
through apis enabling the development of
scalable and modular applications and
this is similar to what a back-end web
developer would do except they only
focus on the heavy Logic the data rather
than rendering views they don't worry
about templates and HTML and all that
their end result is going to be just a
Json format or some other data format
again you'll be working with a
server-side language and that could be
node.js python kotlin c-sharp whatever
it might be and you'll need to
understand the principles and patterns
of microservices including service
Discovery load balancing and fault
tolerance you'll Implement API gateways
for routing and load balancing requests
to microservices and you'll be creating
secure apis and implementing
authentication and authorization so if
you really like the kind of behind the
scenes logic and never really enjoyed
the UI creation then this may be a good
path to take
so next up we have the devops engineer
and this is the person that focuses on
the deployment and operations of the
application so they're the ones that are
responsible for the infrastructure such
as the servers databases and other
services they're also the ones that are
responsible for the whole deployment
process such as continuous integration
continuous deployment and you'll get
really familiar with Cloud providers as
a devops engineer so AWS Azure even even
companies like digitalocean maybe even
Firebase Super Bass there's so many
different platforms out there
infrastructure is a big part of devops
so you'll learn infrastructure as code
with platforms like terraform
serverless functions as well as CI CD
with tools like Circle CI GitHub actions
Jenkins you'll also Implement things
like monitoring logging and alerting
using various software there so overall
these are the folks that make sure
everything runs like a well-oiled
machine behind the scenes for managing
servers and databases to deploying
applications seamlessly that's the role
of devops and again their toolkit
includes Cloud providers container
Technologies which I didn't mention so
like Docker I would Docker with
kubernetes these are some common tools
that you'll use in devops
so next we have mobile developers and
mobile devs specialize in creating
applications for mobile devices such as
smartphones and tablets they're
responsible for developing apps that run
on iOS Android or both platforms and
mobile development is uh obviously a
rapidly growing field and it offers
various career opportunities and there's
a couple couple different types of
mobile developers there's native mobile
developers which are the ones that
create apps for a specific platform such
as iOS or Android and then you also have
cross-platform mobile developers which
are the ones that create apps that work
on multiple platforms so IOS and Android
and in many cases they use a framework
like react native or flutter to create
those cross-platform apps so if you're a
web developer and you want to get into
Mobile development you can actually use
your existing skills to create mobile
apps using Frameworks like react native
if you do want to strictly do Native iOS
then you're going to learn Swift or
objective c and if you want to stick
with Android that would be kotlin or
Java for cross-platform and more web dev
friendly you know you have react native
flutter and you have some other ones as
well so and you'll probably be creating
apis along with your mobile apps using
whatever language you prefer
so next we have freelance web developer
and I wanted to put this in its own
category because it's a very different
type of role than working for a company
you can be a freelancer with any of the
one any of the previous roles that we've
talked about but in the world of
freelancing it's about finding tools
that allow you to build websites and
applications very quickly and
efficiently you also need to be able to
communicate with clients and manage
projects so if you're a solo freelancer
then you you need to be everything the
UI ux person front-end developer
back-end devops and everything else
however you usually work on smaller
scale projects and don't need a lot of
the same tools that you would in the
industry for instance most Freelancers
don't use something like Docker at least
in my in my own experience I can't speak
for everybody
so content Management systems are huge
and freelancing because they allow you
to get projects out quick with a lot of
functionality including having your
clients be able to log into an admin
area and add their own content so
WordPress is huge in the freelance world
but you also have newer headless content
Management Systems like strappy and
sanity.io that are also gaining a lot of
traction with Freelancers and smaller
agencies and then static site generators
like Gatsby and Astro are also gaining
popularity because there are other tools
that allow you to build very high
performance websites in a very short
amount of time and when I say static I
don't mean there's no Dynamic
functionality you can still work with
apis and headless content Management
systems and things like that even though
it's a static site generator you just
don't have a server so website Site
Builders are another tool that some
Freelancers take advantage of because
again they get things done quickly these
are usually the more business oriented
Freelancers that build more I'd say
simple brochure like websites and not
really complex applications they're more
concerned with getting the you know
getting the client customers rather than
creating crazy you know complex
Technologies
so uh what else you need good
communication skills with clients I know
a lot of developers have social issues
including myself I struggled and still
struggle with social anxiety however if
you want something bad enough and you're
passionate enough you can find those
skills inside of you all right you still
you need to know how to Market yourself
as well so next we have an e-commerce
developer obviously they specialize in
building e-commerce sites or online
shopping platforms they deal with
payment gateways customer management
systems they play a crucial role in
enabling businesses to sell products or
services online and custom e-commerce
websites can be pretty daunting
especially because you're dealing with
money and transactions and if you if you
do take on custom e-commerce projects
just make sure you know what you're
doing I know people that specialize in
creating custom platforms for businesses
and they can make up to five six figures
just for from a single project and you
could use existing platforms like
woocommerce and Shopify obviously you
won't make as much money per project but
it's a lot less of a headache than
creating them from scratch
so you'll need to learn like I said
payment gateways like stripe and PayPal
user accounts and authentication are
obviously really important just the
overall flow of an e-commerce site from
product pages to inventory checkout
shopping cart flows
refunds customer management and the list
just goes on and on so there's a ton of
logistics that you just don't have with
other types of projects so it's a good
area to really specialize in and like I
said you could also work with existing
platforms like Shopify especially if
you're freelancing
so the next one is is much different
than the traditional web developer role
so this is a web security specialist but
it's still very very important and
related to web development so web
security Specialists are responsible for
protecting websites and web applications
from cyber attacks they're also
responsible for identifying and fixing
security vulnerabilities and this is a
very important role especially with all
the data breaches that have been
happening lately and if you're
interested in this role you'll need to
learn about web security vulnerabilities
and how to prevent them SQL injections
cross-site scripting things like that
you'll also need to learn about
penetration testing and how to perform
security Audits and you you'll use tools
like the burp Suite a wasp zap and many
others that will kind of help you find
and prevent these these security issues
and you'll also be conducting security
Audits and need understand
certain security compliance this is
really out of my wheelhouse I would say
out of all of these this is the one that
I have the least experience with
so next we have a web slash mobile game
developer and these are really two
different categories web and mobile
native mobile game development is a bit
more intricate and you can use you know
c-sharp with the unity game engine for
instance that's a popular combination if
you do want to stick to web games and
JavaScript you can try the phaser game
engine for 2D games in the browser and
this is a very Niche area of web
development but it is also a lot of fun
so you'll Master game logic game physics
game design principles you'll create
immersive gameplay experiences that
challenge and entertain users and cross
browser and cross-device compatibility
is obviously extremely important as well
as performance optimization nobody likes
laggy games
so next we have a blockchain developer
they specialize in building
decentralized applications and smart
contracts using blockchain Technologies
like ethereum binance smart chain polka
dot I'd say stick to ethereum for now
this field involves creating secure and
transparent applications that leverage
blockchains
distributed Ledger capabilities and
you'll learn how to write smart
contracts using languages like solidity
or rust and you learn all about the
principles and the tools used in
decentralized finance or D5 and there's
libraries you can use like web3js to
interact with blockchain networks from
web applications and you want to be
aware of blockchain security best
practices because obviously blockchain
transactions are irreversible
so the next one is it seems really fun
to me it's not something I have much
experience with but it's augmented
reality and virtual reality developer so
this is where you create immersive
experiences that blend the digital and
the physical world and they use
Technologies like Arc kit arcore webvr
to build web applications that enhance
reality or create entirely virtual
environments and this specialization
requires expertise in 3D modeling
spatial Computing and interaction design
so there's special AR VR Frameworks like
Unity 3D and A-frame you should also get
a handle on like I said 3D modeling and
animation to create assets for AR VR
environments and you can also Implement
gesture recognition and hand tracking
for user input so really really cool
stuff
next we have a pwa or Progressive web
app developer and they specialize in
creating web applications that offer a
native app-like experience across
different devices and platforms so pwas
are known for their offline capabilities
fast load times and responsiveness and
it really combines web development
skills with mobile app development
principles so it's almost like a middle
ground between a web app developer and a
mobile app developer so you'll need to
understand and Implement things like
service workers to enable offline
functionality and background
synchronization it'll create web app
manifest files to define the app's
appearance and behavior Implement
caching strategies to optimize the app's
performance and reduce load times and
enable push notifications to engage
users and re-engage them with the app
so next we have Internet of Things or
iot developer so these developers
specialize in connecting physical
devices and objects to the internet
allowing them to communicate and share
data so they create web-based
applications that control and monitor
iot devices enabling Automation and
data-driven decision making and I think
this is really cool because I have a ton
of smart home stuff and I'm always
curious what kind of apis are available
and what I could do with them I just
haven't had really had the time to get
into it so you'll familiarize yourself
with iot communication protocols like
mqtt and even HTTP and then learn how to
interface with the hardware with sensors
actuators microcontrollers Etc and then
utilize cloud-based iot platforms like
AWS iot you'll also set up data
streaming pipelines to collect and
analyze data from these devices so
lastly we have a chatbot developer and
with the advancement of AI chat Bots are
absolutely huge right now chatbot
developers specialize in creating
conversational agents or chat Bots that
interact with users through either text
or voice interfaces and they design and
develop chatbot applications for a
variety of purposes including customer
support e-commerce and informational or
information retrieval and then natural
language processing or NLP is something
that you really need to get into it's a
subfield of AI that focuses on the
interaction between computers and human
language and it involves the development
of algorithms and models that enable
computers to understand interpret and
generate human language in a valuable
way so you'll learn NLP techniques and
libraries like NLT a Spacey or
tensorflow for language understanding
you'll also explore voice-based chatbot
development for platforms like Amazon
Alexa Google assistant and so on so
you'll develop chat Bots that can
maintain contacts and engage in
meaningful conversations rather than
just asking a question and getting an
answer you can you know Converse back
and forth like you can with chat GPT for
instance
all right guys so there you have it
there's so many areas of web development
that you can get into so take some time
sit down really think about what you
want to do what are you passionate about
if you've always loved video games maybe
you want to get into web game
development if you love to create things
and maybe get into UI ux design if you
love to help people maybe you want to
get into web security there's just so
many options and I think that I think
these days people just want to master
everything right away and it's just not
plausible so it's worth it to really
figure out what you want to specialize
in you know where do you want to give
your value with the with everything
that's happening with AI I think a lot
of the the real generalized stuff is
going to just be shipped out to Ai and I
think that people's value it's really
going to come in in certain areas
certain fields and roles so so just
something to think about hope you guys
enjoyed the video and I will see you
next time"
U4JVw8K19uY,"what's going on guys so there hasn't
really been many new technologies
outside of AI that have really got me
excited in quite a while technologies
that have to do with web development so
this project bun has really caught my
eye and it's an emerging lightweight
JavaScript runtime and toolkit that's
gaining traction really fast I I believe
it's been around about a year but 1.0
was just released and in this video
we're going to talk about what bun is
look at its capabilities and we're going
to jump in and look at a lot of its
features now
before I get into to anything I just
want to say that the JavaScript
ecosystem in general has been very just
all over the place for years and years
and I think it's getting better I think
that this is a a huge piece to the
puzzle because bun is not just a runtime
like node.js it does all that stuff but
it also includes a bundler for your
front end it includes testing it it it's
an all-in-one toolkit which is what I
really think we need in the JavaScript
world to to have a respectable organized
ecosystem so I'm really excited about
this project and this video so let's get
into it
foreign
guys so let's go a bit further into what
bun actually is so it's a JavaScript
runtime and all-in-one toolkit to serve
the modern JavaScript ecosystem and when
I say JavaScript runtime this can be
compared to node.js and Dino in fact bun
is actually a drop in for node and I'll
talk about that in a minute now it's not
just a run time to run JavaScript on the
server it also includes a native bundler
a transpiler task Runner and npm client
so you can bundle transpile install and
run JavaScript and typescript projects
and in the past we'd had to use all
these separate pieces these separate
Technologies to build full stack
applications with JavaScript we need
node.js for our server a bundler like
webpack or Veet for our front end
testing Frameworks and so on however bun
has all that stuff baked in so I think
it's a step closer to just having a
single tool that can do everything that
we need to build full stack applications
with JavaScript and typescript not to
mention it's also super fast which I'll
talk about in a bit
so bun is written in Zig which is a
newer low-level language that is
designed to be fast safe and simple and
from what I understand it's supposed to
be a replacement for C and C plus plus
so it's fast and Powerful yet small and
simple so it's less complicated than
those other languages and it's super
fast now like I said bun is described as
a drop in replacement for node.js so
it's completely compatible with node
apis and it's also compatible with the
npm ecosystem so you can use bun to run
your node.js applications and you can
also use bun to install and run npm
packages but you do have additional
optimized apis and tools that you don't
get with node.js and Bun is not just a
fork of node.js it's not built on the V8
engine like note is it's actually built
on the JavaScript core engine which is
the performance minded JavaScript engine
built for Safari in webkit and it isn't
dependent on node or npm so it's a very
minimal stack and of course this
increases performance which is one of
the main goals So speaking of goals
there's three major design goals that
that bun has so one is speed bond is
faster than both node.js and Dino with
little dependencies and extending the
JavaScript core engine it's able to
achieve this another aspect that
increases performance is rewriting
JavaScript JavaScript implemented apis
in a lower level language
it also aims to have an elegant API it
provides a minimal set of Highly
optimized apis for performing common
tasks like starting an HTTP server
writing files and so on and we'll get
more into this in a little bit also a
cohesive developer experience but is a
complete toolkit for building JavaScript
apps including a package manager test
Runner bundler so you don't need to use
a bunch of different tools to build your
applications so let's quickly look at
some of the features and advantages of
buns so we talked a bit about Speed and
Performance and that bun uses the
JavaScript core engine and it uses
native speed functionality implemented
in the zig language and just to give you
an idea you can take a look at this
image that compares some of the common
actions that we can do with node.js Dino
and Bun so server side rendering react
you can see that button is way up there
sixty six thousand plus node.js is only
at thirteen thousand HTTP requests per
second and then with a web websocket
chat server messages sent per second you
can see bun is over a million node is
only at 179 000 and loading a huge table
so having to do with making queries to a
database you can see bun is is way up
there and this is using SQL Lite all
right so very very fast in in many ways
and like I said it's a drop in for
node.js so it's compatible with all of
the node.js apis it's it has all of the
um the built-in modules like FS path Etc
it also implements the globals like
process and buffer so you can run your
node.js apps with bun
it also works with node modules so you
still have a package.json you still have
a node underscore modules folder to
manage all your dependencies there's
also a native npm client so when you
install npm modules you can use bun
install you can use bun run all types of
basically just the same things that you
would do with npm except it's supposed
to be up to 30 times faster and take
those statistics with a grain of salt
that's just what they claim although
using it you can tell that it is much
faster
so no module Madness this is one that
that is big for me so with node.js
they've been trying for years to
implement es modules without affecting
certain things and breaking certain
things and you can do it you know you
can edit the package.json and you can
add the type module and so on with bun
you can use either the es module syntax
or the common JS syntax you could even
use them both in the same file and have
no problem so that's something that's
that's big for me
web standard API so bun implements apis
like fetch websocket form data Etc of
course you get typescript out of the box
it's a first class citizen in bun uh
simply use a TS or TSX extension and
directly execute your typescript files
jsx so yes button supports jsx out of
the box it transpiles jsx syntax to
vanilla JavaScript it assumes react but
you can change that within the TS config
file
so there's a watch mode no more tools
like nodemon when we use node.js if we
make a change on the server we have to
restart unless we use something like
nodemon well with bun you simply can do
dash dash watch and it will do the same
thing it'll reset every time changes are
made there's also a hot hot reload
option as well
environment variables so just like with
node we can have a DOT EnV file except
we don't have to install a package like
dot EnV it just works and it will read
your environment variables
integrated bundler so this is huge
button has a built-in bundler that's
faster than webpack and parcel and many
others it'll take your source files and
bundle them together into a single file
that can be loaded into the browser and
I'm going to show you how that works in
a little bit
and then it even has an as a built-in
sqlite database that you can use for
your applications which is very
convenient for development and those are
just some of the features and Advantage
there's more that I didn't even mention
there's also Frameworks that we can use
with bun of course we can use express
and and KOA and all that stuff there's
also a framework called Alicia JS it
looks really interesting and it's
supposed to be around 20 times faster
than Express and it's built to be used
with bun
all right and again take those those
um comparisons with a grain of salt
now when it comes to insulation remember
a bun is still very new 1.0 was just
released so at this point if you're
using Windows you do need to use the
windows subsystem for Linux to kind of
get the full experience if you're on Mac
or Linux then you can just use it and
you can install it either with curl or
you can even install it globally with
npm all right I'm on a Mac but if you're
on windows again I would suggest using
the windows subsystem for Linux all
right so enough talk enough slides let's
go ahead and jump in and see what bun
has to offer all right guys so this is
bun.sh this is the official website for
bond this is where you can find all the
documentation and you'll see that
there's a command here a curl command
that we can use to install now notice
down at the bottom it says supported on
Mac OS Linux and WSL so if you're on
Windows you're going to want to use the
windows subsystem for Linux now I have a
video that shows you how to get set up
it's it's I think it's a 12 or 13 minute
video it's quite old it's a few years
old but not much has changed so you can
follow along with that to get set up
I'll put a link in the description if
that doesn't help there's tons of other
videos out there that will help you get
that set up all right and that's if you
want to follow along you can just sit
back and you know look at the features
and see what this is all about
so there's a few ways to install if we
go to docs and we go to installation
you'll see that we can install with curl
but we can also install globally with
npm if you want to do it that way if
you're on Mac you can also use Homebrew
you can also use Docker you can also use
Proto so I'm going to stick with this
this curl command so I'll grab this
off the home page now I already have bun
installed so it's all set up on my
machine but what I would do is paste
that in run it
and it's not going to tell me to run
this command but if it's your first time
running this it's going to also have you
do exec slash bin slash zsh so that will
make it so that you can use the bin
command I'm sorry bun command so once
you do that then you can just try bun
dash dash version and you should see the
current version which at this time is
1.0.2
okay so now that bond is set up let's
open up vs code and I just have a an
empty folder called bun crash and I have
my integrated terminal open down here
and the first thing I'm going to do is
run bun and knit just like we would with
npm we do npm init It'll ask for a
package name that's fine entry point
index TS is fine and what it does is it
creates a little more than what you
would get with node.js with node.js you
would just get the package.json and the
lock file so here you're also going to
get the a couple things the the
typescript config file which we're not
going to need to do anything with but if
you want to customize typescript you can
you get the actual entry point which is
this index TS file which just has a
console log in it you get the the bun
lock file our package.json along with
the peer dependency of typescript and
the dev dependency of the bun types so
those installed and you can see we
already have our node modules folder so
we don't need to run npm install
we have that stuff set up also a git
ignore file as well Anna readme
so those get that that's what we get to
start off with so to run a file we can
say bun run and then the file so let's
say index.ts and we get hello via bun
because that's what's in this index TS
now you'll notice if I do Bun Run index
without the extension it says missing
script index so you do have to add the
extension onto the end there so what I'd
like to do first is just create a very
simple server using the bun API using
the bun.serve which is similar to the
HTTP module in node.js but it's much
faster and it's more optimized it's not
something you'd really use in production
just like you wouldn't use just the HTTP
module with node but I do want you to
know you know the very basics of how
that works and we can see how to use a
bun API so let's create a variable here
called server and we'll set this up with
bun dot serve and we don't have to bring
bun in we don't have to import it or
anything like that so in serve let's
pass in an object and I'm just going to
disable
co-pilot for now
disable that because I know that can get
kind of annoying
okay so we have our object and then we
can Define the port that we want let's
say we want to use port we'll say 5000
and what we do here is add a fetch
method
and that's going to take in a request
object
okay and then in here we want to return
a response so we'll say return new
response and then whatever we want to
put in here I'll just put a string of
hello world and then down here we're
going to do a console log
and let's do a template literal here and
we'll say listening
on Port
and then we'll just put in
that pour actually we have to do server
dot port
okay so now if I come down here and I
run bun run and then index.ts we can see
listening on Port 5000. so we've created
a very simple web server and if we go to
the browser
and then we go to let's go to localhost
5000 we should see the hello world
okay so very simple this is comparable
to using the HTTP module with node.js
now
what's cool about this is we have a
watch mode so with node you would have
to install something like nodemon
because you'll see if I try to change
this like let's say hello bun instead of
hello world and if I come back over here
let me just make this a little smaller
if I come back over here and I reload it
doesn't change I have to restart the
server however what I can do instead is
use the is use watch mode so I can say
bun and then Dash Dash
watch and then the name of the file
which is index dot TS and now it should
be in watch mode so you'll see it says
hello bun let's say I just want to add
an exclamation save come over reload and
now you can see that that exclamation is
added so it's similar to as if you were
using nodemon there's also hot reload so
if you're if you're dealing with let's
say you have a react app and you're
dealing with State and you don't want
that extra
reload to have to change your state you
can use hot reloading by simply doing
instead of watch you can do
hot like that and that should work as
well we're not going to see any
difference here but if we had some State
you would see the difference there's
there's some examples in the
documentation if you want to check that
out
all right now the next thing I want to
look at is environment variables so
let's create a file called dot EnV and
in that I'm going to put the port
variable and we'll set that to 5000.
all right so we'll save that now
normally with node.js you would install
a package called dot EnV and then you
would have to initialize it you call the
config method and so on but we don't
have to do that it should just work so
what I'll do is where we have this 5000
there's actually two ways we can do this
we can do the Old
process.env Dot port
and I'll just say or let's say eight
thousand
if it for some reason can't find this
and then I'll just restart and you'll
see it actually did restart
um
and it said 8 000 because it hadn't read
that file yet because it does need a
restart but now it says 5000 meaning
that it's reading this port so if I
reload this that should still work now
another way to do this is to say bun dot
EnV Port so if I do that that gives us
the same result we're still getting five
thousand so you can use either
process.env or bun EnV and you don't
need to use a third-party package like
the dot EnV package
now as far as scripts we can also add
bun scripts so let's go to our
package.json here and let's add a
Scripts
we'll say scripts and this is going to
be an object whoops
this is going to be an object with a
start script
so for the start script I'm just going
to use Bun Run index dot Ts that way we
can do fun start but I also want a Dev
script
that will watch it that will use watch
mode so for that we're going to say bun
Dash Dash
watch and then index.ts
okay let's make sure we put a comma here
so now if I want to start up my server I
can now do I can do bun
start okay so that starts it normally or
if I want to do it in development mode
and I want to use watch mode I can say
Bun Run Dev
and now it's in watch mode now like I
said this probably isn't something
you're going to use in production you're
probably going to use some kind of
framework like Express or Alicia but
just to take it a little bit further
let's create a route here so we'll have
a route for the home page and for let's
say the blog page so first off we can
get URL and we can get that with new
URL and we're going to pass in here that
request object has a URL property on it
so that'll get us the URL and then we
can say if
the URL
Dot
path name if that is equal to slash then
that's going to be the home page
actually we don't even need these curly
braces we'll just say return
a new response
and we'll pass in just a string of home
page
all right and then underneath that I'm
just going to copy that down never mind
these red lines for now
so this path name let's say if that is
equal to slash Blog then we're going to
return let's say blog
and then under that we're going to
return so if it's neither one of those
then we'll return a 404 so we'll say new
response and we'll pass in here just 404
exclamation
so now if I go to the home page I see
home page if I go to slash
blog I see blog and if I go to like
slash blog1 which doesn't exist I see
the 404.
so that's just the the basic server API
now there's also with the npm client the
bun npm client you also have bun X which
is similar to npx so this allows you to
run a package without installing it so
I'm going to stop the server here and go
down to the the terminal and let's run
bun X
so it you could either do bun Space X or
the shortcut for that is just bun X like
that and we're going to say cow say
which is just a really simple program
that will
have a cow say whatever you type here so
I'm going to say hello bun
and we'll run that we see just a little
ASCII cow with hello bun
so if you wanted to use
I don't know create react app or
something like that something that you
want to use npx with and just use
something without installing it you can
do that with bun X
now as far as node modules go like the
uh the the default modules like path and
Fs you still have those available so I
want to show you those so I'm going to
just create a new file here and I'll
just call it node
well let's just call it modules doesn't
really matter this is just
experimentation so we'll just say
modules TS and I'm going to import let's
say path
from
path
and another thing I'm using the es
module syntax here but if I wanted to I
could also use the require syntax I'll
show you that in a second and you can
even use both in the same file I don't
know why you would do that but you can
so let's say cons file path just to show
you that we can use this and we'll use
the join method so path.join
and we'll say Foo
so a folder called Foo folder called bar
and then we'll have a file called image
dot PNG so let's say we have that file
path and then I want to get the file
name so I could say path dot base name
and then pass in the file path
and then I'm going to just console log
the file name all right so if I run this
file by saying bun
run and then module dot TS
what I call oh modules sorry so it's
modules TS you can see I get the file
name of image.png
and if I wanted to use the require
syntax I could say const
path equals
require
path and run the file and that works
just as fine so I mean you can use
whatever syntax you want there's no
extra steps now you have other core
node.js modules you could use such as FS
but instead of FS there's actually a new
optimize API for dealing with files that
bun offers so I'm actually going to
create another file here I'll just call
it file.ts
and we can close this stuff up here so
I'm gonna
first off just write or create a file
and write to it so I'll go ahead and
just say const data and I don't even
have to bring anything in it's it's it's
on the bun object so I'm going to say
data and I'll say I love JavaScript
okay and then let's say I want to write
that to a file called output.txt what I
can do is I can await on bond dot right
and we have a top level async so I don't
have to wrap this in an asynchronous
function and then let's say output Dot
text and what we want to write in that
file is that data
all right so we'll save that and then
let's run this file so we can say Bun
Run file dot TS and now you'll see
there's an output.txt with I love
JavaScript
so that's if you want to write to a file
very simple just two lines of code it
can make easily make it one line and
then if we want to read files we can do
that let's just comment this out
we can do that with bun.file
so let's um
yeah let's say const and we'll call this
file and we'll set that to await bun dot
file
and the file I want to read is output
dot txt so the file we just created and
then we can get a bunch of different
things from this if we just want the
data as a string then we can just simply
say
file actually we have to await
file Dot
text which is a method so now if I run
this we can see I love JavaScript so it
just gives us it as a string if you want
to get for instance the file size
there's a size property so we can say
file dot size and that's a property not
a method so no no um parentheses and you
can see 18 so it's it's in bytes that's
18 bytes and then you could also get the
contents as a readable Stream So if you
wanted to do that you could do a weight
file Dot
stream
so that would be a readable stream if
you want to get it as an array buffer
you could do that so a weight file Dot
array buffer and if I run that you can
see we get it as a stream here and then
we get it as an array buffer so there's
a lot of different things you can do
with files using this this bun API
all right now for testing there's also
integrated testing so let's create a new
file here and let's call this we'll just
call it
index.test dot TS you want to make sure
you have that DOT test in there
and then what I'm going to do is import
a couple things from and it's going to
be from bun
and then colon test
and let's bring in here describe
expect
what else test
and
before all
so basically we can have hooks in here
it's very similar to what you would do
with jest
so for instance you could call before
all
and pass a function in here
and then here is where you could say set
up tests
but let's create an actual test with
describe so we're going to say describe
math
pass in
function here and then we'll have a test
so our test is going to be called
addition
pass in a function
and let's say I want to expect
to plus 2
and then dot 2B so we want that expect
that to be 4.
okay so let's save that and now all we
have to do is simply run bun
test and it's going to look for files
that have the DOT test so it should
automatically pick this file up so if I
run that you can see that it runs in the
the math test Suite it runs the addition
test and it passes
so really cool and we haven't installed
anything the only thing that we've the
only thing that's not bun is typescript
that's the only thing that's in the the
package.json which is really nice and we
haven't even touched the bundler yet so
the whole front end part of this so
let's do that now
so for the bundler what I'm going to do
is create
a source folder all right and then in
that Source folder I'm going to create
an index Dot let's let's give this yeah
we'll do TS I'll show you more of the
jsx react stuff in a bit but let's just
do a very simple
um just something simple I want to fetch
a user from the GitHub API using axio so
using a third-party module and I want to
then bundle that into a single file that
I can include in the browser and my
front end so let's install axios we'll
come down here and we can say bun
install
axios and do you see how fast that is so
it's extremely fast the npm client and
actually in addition to index TS just so
I can show you how we can use multiple
files let's create another file and
we'll call it GitHub API dot TS
and here we're going to import axios
from
axios and then we're going to have an
async function we can't use the top
level async because this is going to
actually be bundled for the front end so
we have to wrap it in a function and I'm
going to call it fetch user and it's
going to take in a user
and then let's make our request and put
it into a variable called res so we'll
say a weight axios dot get
and then the URL which is https
API Dot
github.com
users slash and then I'm going to just
append or concatenate the user onto the
end of that and then underneath let's
just return the response dot data
okay and then we just want to export so
let's say export as default the fetch
user function so that we can use it in
our index file so we'll go to our index
file now and let's import
fetch user
okay and then since this returns a
promise we need to wrap it in an async
function so I'm just going to use an
iffy here we're going to say async
and just have an arrow function and
let's say cons user data
and we're going to await on the fetch
user function and pass in the user that
I want to get which will be my own so
just Brad traversy
and then underneath that we want to I
want to just put it in the the browser
body so let's say document Dot
query selector and I'm just going to
select the H1
and then set the inner HTML
and we're going to set that to just Json
Dot stringify
and I'm just going to insert the entire
Json string so we'll pass in the user
data
all right so what we can do now to be
able to bundle this and and include this
in our HTML in our front end we can come
down here into the terminal and use bun
build
okay so button build and then I'm going
to specify the file which is going to be
dot slash Source slash index.ts and then
we can do dash dash out file and set
that to where we want this the bundled
file to go which I'm going to say dot
slash dist slash bundle dot Js
so let's run that and now you'll see
It'll create a disk folder with the
bundle.js file and this is everything in
the source folder here the index TS and
the function inside the GitHub API is
all in here and that's what we want to
include in in the front end so now what
we can do is in that disk folder we can
create an index.html
and we'll just put a boilerplate in here
we'll say GitHub
user data
and then in the body remember we we put
it in an H1 so I'm just going to put an
H1 doesn't really matter what we put
inside of it and then let's make sure
that we include that script and the
source is going to be the dot slash
bundle
so let's save that and then I'm going to
open this with live server and now you
can see that we get all the data that we
requested from the GitHub API is now
being put in the front end here in the
the browser window and of course you can
interact with your backend server you
know if you if you're using a framework
and you have routes where you're
interacting with a database and remember
this comes bundled with an SQL Lite
database as well so you just have so so
many things that you can do without
touching any other projects any other
dependencies
now there's also a watch mode if you
want to develop so let's um let's do
that I'm just going to come down here
and change this command up just a little
bit and just add on to the end of it
dash dash watch
I believe that should
do it so if we run that and now let's uh
let's go into the index.html and right
above the H1 I'll put an H2 and say
hello and save and you can see that we
now see the H2 with the hello and I
didn't even have to reload it reloads on
its own
so really cool stuff now I want to get a
little deeper into the the whole front
end thing and I want to give you an
example where we use react and how we
can actually transpile jsx
so let's uh let's stop this
and let's install react and react on so
we'll say bun install react
and react Dash Dom
okay so now we have that installed and
what I'm going to do here is go to my
index TS that's in the source and we're
going to rename this because I want this
to have some jsx in it so we're going to
rename it index TSX and then just get
rid of everything so this will be the
entry point to our react application so
let's say import react from
react and then we also want to import
from react Dom
create root
so that's going to be from
react Dom and then let's say const root
set that to
create root and in our HTML file we'll
have a div with the ID of root so let's
say document Dot
get element
by ID
and that will have an ID of root
okay and then let's create our app
component so here's where we're going to
use some jsx
so in here I'm going to have a little
bit of State we're just going to have a
count I'm just going to create a button
that we can click and it'll just
increment you know that that
example that so many
Frameworks use so let's say set count to
change that and we'll set that equal to
react dot use State and it'll be Zero by
default and then we want to return jsx
so I'm going to say return and then in
parentheses we'll have a div
and then let's have an H1 we'll just say
hello world
then we'll have an H2 and we'll say
count and then I want to Output whatever
is in the count state
and then I want a button that will
increment it so let's say button
and
we'll say increment
and that button is going to have an on
click Handler
and we'll set that to oops we want to
set that to curly braces with an arrow
function and that's just going to call
set count
and we want to pass in there our count
and just add one to it so very very
simple little application and then down
at the bottom under the app component we
just want to call Root dot render
and we want to pass in our app
component
okay now
over here obviously this is still this
is going to stay the same until we we
bundle it again so let's go to our
index.html before we bundle it let's get
rid of this stuff and let's have an ID
of root so that's our output for our
react application again it's not going
to show yet but we can come down here
now and let's run the bun build and
watch command
if I do that
oh it's this module not resolving
oh yeah I need to change that to TSX
so this right here this index TS should
be
TSX
okay so there's our application if I hit
increment
there we go so I don't know about you
guys but to have all this stuff together
is is huge because I think one of the
the worst things about JavaScript is is
how the ecosystem is just so scattered
if you look at other languages if you
look at you know C sharp or python or
rust and I mean they every language has
its issues but they all seem very put
together in terms of of the whole
ecosystem and the different packages and
Frameworks and this and that JavaScript
just seems all over the place it's very
difficult for beginners to understand
you know what they should wear they
should start so I think that having
something like bun that puts everything
in one place is a big step and I think
that it's it's a it's a step in the
right direction in my own opinion all
right and I just showed you just we just
scratched the surface so there's a lot
more to it and it's very very new 1.0
was just released so you know plan on
seeing bigger and better things and I'll
be doing some bun
projects when it's a little bit more
established so that's it guys thanks for
watching and I'll see you soon"
1YU83Lw58eo,"what's going on guys so in this video
I'm going to show you step by step how
to build an AI chat bot using node.js
and the chat GPT API with the GPT 3.5
turbo model so you'll essentially have
chat gbt running in your terminal and
I'm going to give you a quick demo
before we start so I have the program
running and I can send any request I
want to the API I'll just say hello
and we get hello how can I assist you
today and I'm just going to say what is
the capital of
Florida
and it's going to give me back the
capital of Florida is Tallahassee now
the way that we're going to write this
code is so it we save our chat history
and we send that with each request that
way we can have an ongoing conversation
so I should be able to say what is the
population and it should know what I'm
talking about
okay so as of 21 population of
Tallahassee blah blah blah so it knows
that I'm referencing what I just asked
all right and then you can also ask for
like code samples well I'll say how do I
write a fetch request
in JavaScript
and it does take a second all right so
if we look up here to make a fetch
request in JavaScript you use the fetch
function and it gives us an example and
then it tells us what the example does
and I could easily copy this and put it
into my my own code and I could ask
questions about it I could reference it
in any way all right so I think it's
pretty cool you can just have this open
on your desktop and if you need
information on whatever you can just go
ahead and prompt it and then to exit we
just type exit
and there we go so now we're out of the
program so that's what we're going to
build and we're going to use the
official open AI library for node.js
that's what this is and then we're going
to use a prep package called re-line
sync which allows us to prompt the user
so we're going to use this this question
method and that's where that's how we're
able to continuously type it and have a
conversation with the bot all right
we'll also be using dot EnV to store our
API key and then colors to give you know
give us colors in the console and then
this is the final code this is the
repository I'll have the link to this in
the description and I'll probably use
this for ongoing projects to show you
some of the new features with the API
such as function calls that's something
that I want to get into we'll probably
get into within the next month or so and
I'll probably use this as a starting
point all right so that's it let's go
ahead and get into it
thank you
all right guys so I have an empty folder
called chat gbt chat bot so just create
that folder and open up your text editor
whether it's vs code or whatever it is
you're using as well as a terminal and
the first thing we're going to do is in
this folder we're going to run npm and
knit which will initialize a
package.json file and it's going to ask
us some questions in the package name
I'm actually going to call chat bot
because if you do decide to use npm Link
and run this as a global command that's
going to be the command that you run and
then the version we can use that
description I'll say chat bot
powered
by chat
chat GPT
and then index that's fine that's fine
keywords author of course you can put
your own name here
and let's say MIT for the license
okay so now we have our package.json now
as far as dependencies go let's say npm
install and open AI is the the library
we're going to be using to make our
request to chat chat GPT and then I'm
also going to install readline Dash sync
that's going to allow us to interact
with the user and ask a question and we
can answer and so on basically give us
that conversation uh that conversation
flow and then we're going to install dot
EnV so that we can store our AP API key
in that and then I'm also going to
install colors which is optional but it
does look better when there's you know
different colors so you can tell who the
user is and who the bot is so let's go
ahead and install those
all right now I'm going to open up my
package.json here and I'm going to just
add a start script
you can run it with you know node index
or we can run npm start
so in here let's say node and then
index.js now another thing I'm going to
do is add a type module because I want
to use es modules instead of using the
common JS syntax so let's go ahead and
add a type and set that to module if you
want to if you want to use common JS
then you don't have to you don't have to
do this all right so now that we've done
that let's create our
index.js which is our entry point
and the first thing I want to do
actually the first thing we have to do
is is get our API key so let's go over
to open Ai and let's see my I'm not
logged in here
so you just want to get your key
whether you have a free account or a
paid account
you can go right here view API keys and
you can create a new key I already have
mine so I'm not going to create a new
one but just go ahead and click create
it'll show it and then you can copy it
and then what you're going to do with
that is come to your application and
create in the root here a DOT EnV file
and this is where your your global
environment variables will go so I'm
just going to grab my key real quick
so I'm creating a variable called open
AI API key and then I'm setting it here
so just go ahead and do that make sure
you use your own I'm going to delete
this one after anyway and then save that
so we're going to start by importing a
few things
from the openai library
and those two things are going to be the
configuration class
and then open so uppercase o a uppercase
Ai and then uppercase a pi
I believe that's how it's formatted and
the first thing we want to do actually
we're going to also import dot EnV
because we need to uh we need to get our
API key
and in order to use dot EnV we have to
call the config method so let's say dot
env.config
okay now what we want to do is create a
configuration object so we'll call this
configuration and set that equal to a
new uppercase C configuration object and
then that's going to take in an object
literal with
the API key and we can get that with
process dot EnV Dot and then open AI
underscore API underscore key
okay now we need to take this
configuration object and we need to pass
it into a new instance of this here so
I'm going to create a variable called
open AI all lowercase set that to new
open AI API and we're going to pass in
the configuration object that we just
created so now we're ready to make
requests with this object
so I'm going to create a very actually
you know what since we're using
we're going to use a method on this
object called create chat completion and
that's a synchronous so we need to use
the sync await so let's create an async
function and we'll call it Main
and then we're going to call that
function down here
and then what I'll do is create a
variable called chat
completion and let's set that to a
weight
and then take our open AI object and
call create chat completion
okay and that's going to take in a
couple things so pass in an object with
the model the model that we're using is
gpt-3.5 Dash Turbo
and then we're also going to pass in
messages and this is going to be an
array now we're only sending one message
but you can send multiple messages so it
still has to be an array even though
it's just one message it's going to be
an object and it's going to have two
things a row and in this case the role
is user because we're the one making the
request the user when we get a response
back the role of that response will be
assistant because that's the API so
we're the user and we want to send
the content of whatever we want to say
to basically to chat GPT so I'm just
going to say what is the capital of
Massachusetts I mean you can say
anything whatever you want if you want
to say something different but that's
what that's the text that's the prompt
that I'm sending to chat GPT through
this API through this Library all right
now let's see what that gives us so
still within the main function but
outside of that that chat completion
variable let's just log chat completion
and see what that gives us so we can run
npm start
so this is what it gives us a whole
bunch of stuff up here that we don't
really need to pay attention to but in
this data object there's the ID there's
the the model and then the choices is
really what we want to pay attention to
because that's that's where the answer
to this is so let's say instead of just
logging the whole object we'll say chat
completion dot data and then dot choices
which we can see is an array with one
object in it so let's say choices and
then zero to see what that one object is
so let's clear that we'll run it again
and now what we get back is an object
with an index
since we only sent one message this
index will always be zero but if there
are multiple messages sent then we'd
have multiple indexes and the reason it
finished is because it stopped because
we we just asked a question it answered
and then this message object as you can
see has a role of assistant where the
user this is the assistant and then the
content says the capital of
Massachusetts is Boston so what we
really want is this content value in
this message object so here let's say
dot message and then dot content
and then if we clear this up and run
this again we should just see the answer
there we go all right so this is this is
how the API Works making a request and
getting a response so now that we know
that let's move on to create the actual
chat bot where we can go on and have a
conversation and what I want to do is
actually put this stuff in a separate
file because you might want to use this
this open AI object somewhere else you
might want to call either this method or
another one because there's a bunch of
different things different apis you can
use for different things so what I'm
going to do is create a folder called
config
and in config I'll create let's say open
AI dot Js
or we'll call it open dash AI dot JS and
then I'm going to move this stuff
see we're going to take this and move
that into here
and then all I want to do is export this
variable so down here we'll say export
default and remember I'm using the con
the es module syntax if you're using
common JS then you would do module dot
exports but I'm going to do export
default open AI
and then come back here and we should
then just be able to bring in
we'll say import
open AI from and then dot slash config
slash open Ai and we have to do dot JS
if we're using the import the es module
syntax with node.js
all right so let's just make sure that
this still works I'm going to save it
I'm going to run it
and we get the same response good now as
far as read line sync we need to bring
that in so let's start by importing
we'll say import read line
sync and we're going to import that from
uh from read line Dash sync and then we
might as well bring in colors as well so
we'll import colors from colors and
again this is completely optional but I
think it's nice to have different colors
for the for the bot and for the user
so
as far as as how read line sync works I
want to show you that I'm going to
actually just get rid of all this right
now because I just wanted to show you
how that works
but for the read line sync the way that
that works let's create a variable
called username and we'll set that to
read line sync and then we're going to
use the question method so if we say dot
question and we'll say
may I have your name
and then right under that I'm going to
console log
and we'll say let's put some backticks
in here we'll just say hello
and then
username okay so I'm going to run this
file again
and you'll see it says may I have your
name and then it allows me to type so
I'm going to put in Brad and it says
hello Brad so that's basically how this
is going to work this this readline sync
we're going to be using this question
method so we can get rid of that and the
first thing I want to happen when we run
this file and we call this function is
for it to just greet us and say welcome
to the chat bot program you can start
chatting with the bot so let's do a
console log and I want this to be green
so what we can do is say colors and I
want it to also be bold so I'm going to
use bold and then dot green
and then put my message in there and
I'll say welcome we'll say welcome to
the
chat bot program
and then let's copy that down
and then this text here is going to say
you
can start
chatting with the bot
all right so let's run the file again
and you can see that it's it's bold and
green
now it obviously it does doesn't do
anything else yet because we have
nothing else here so now what I want to
do is instead of just having
instead of just having the question
right in the function like this because
if I do that it's only going to ask it's
only going to do it once right I want it
to Key I want the conversation to keep
going so I'm going to have a while loop
and basically I'm just going to say
while true so it'll just continuously
Loop until we we break out of it and the
way we're going to break out of it is by
typing exit and I'll add that in a
second but first we want to be able to
get the input from the user so let's say
const and we'll say user
let's say user input
and we're going to say read linesync Dot
question
okay and I want this to be yellow so I'm
going to say colors
dot yellow and this I'm not actually
going to ask a question here I just
wanted to say the word you before
whatever we type so I'm going to say U
h u colon space like that
all right so if I were to save this and
then run this again
so it says welcome to the chat program
you can start chatting and it says you
colon and then I can type so I'll just
say hello and hit enter now it's just
going to keep doing that because we have
it in a while loop right and we're not
doing anything else with that input
we're not doing anything with the input
we're just we're typing it in we hit
enter it runs again it says you again
and lets us type but it's not actually
doing anything
so we can we can get out of this though
by doing control or command C so that
will clear us out for now but I want a
way to get out without having to do that
I want to be able to type exit so under
that user input I'm actually going to
open up a try catch and in the catch
we'll just do a console let's do a we'll
do a console.error
and we can actually we can make the
arrow red too so we'll do colors dot red
and then whatever that error is okay now
in the try we do one I'm just going to
put a comment here and say call the
API with the user input and we'll do
that in a second but I want a way to
escape out of the out of that Loop so
let's say if
so basically I want to check to see if
the user types in exit so let's say if
the user input and then we'll make it
all lowercase so two lowercase
if that is equal to exit
then I want to return
so let's see if that works so I'm going
to run npm start and we'll say hello
okay it doesn't nothing else happens but
if I do exit
then it gets me out of the program which
is what I want so now let's implement
the API and we're going to do it the
same way that we did that I just showed
you let's create a variable here I'll
just call it completion
and let's set that to a weight
and we're going to use the open AI
object and then the create
chat completion
method and then we're going to pass into
that an object and remember we pass in
the model which is going to be the GPT
Dash 3.5 Dash turbo model
and then we want to pass in messages
which is going to be an array of objects
that has a role which for us is going to
be user and also has the content
now in this case the content is going to
be the user input
okay so whatever we type in here when it
says U and then we type it in that's
going to get sent to the API
now we got to get the the response from
that so let's go right underneath that
and let's say get
get completion
Text slash content
so we'll say const and I'll call this
completion
content
or completion text
and let's set that to completion and
remember how that's formatted we want to
go into data which is an object that has
a choices array and then that choices
array has one item in it so we want to
get that so we'll use the index of zero
then we have a message object with
content so that'll give us the direct
text that we want
all right and then what we'll do is come
down here
and let's see we're going to go under
this if statement
and we want to then console.l log the
Bots answer so here we're going to say
colors and I'm going to make this green
so where where the user is yellow the
bot is green so in here let's say bot
colon space and then I'm just going to
add on to this the completion text like
that
now when we exit I also want it to say
say goodbye or whatever and we could man
like we could hard code goodbye or some
kind of message but if we put in exit
it'll get sent to chat gbt and it will
know that we're escaping and it will
come up with its own message so we can
actually put this in here as well
and that should work you know how we
expect so let's save this and let's go
ahead and try it out so we'll run npm
start it says U I'm going to say hello
and the bot says hi there how can I
assist you today I'm going to say what
is the capital of
Florida
and there we go the capital of Florida
is Tallahassee now we have an issue if
you just want this to be uh you know a
one-off thing where you just ask one
question you get an answer that's fine
but what if I say What is the
population
if I do that it's going to tell me
that it doesn't know what the hell I'm
talking about so to answer this question
specific information is needed so
basically it's not seeing the last
answer and that's because when we send
our data our messages we're only sending
this
so we basically have to have a way to
store our conversation history and send
that with our requests so let's do that
next so I'm going to go ahead and hit
exit type exit and you'll notice that it
says goodbye if you have any more
questions feel free to ask and that's
because of this right here we added on
the completion text when we type exit
that completion text is this
so we don't even have to manually put in
goodbye or whatever
so let's go ahead and come up to the top
here right above the loop and let's
initialize let's say const chat
history and we're going to set that to
just an empty array
so let's say store
conversation history
okay and then what we're going to do is
go
see into the try
and let's go above where we call the API
and we're going to construct the
messages by iterating over the history
array so let's create a variable called
messages and then we're going to set
that to the chat
history and we're going to use map so
we're going to map over that and then
say and then in here actually let's use
parentheses because we're passing in a
function and then we're passing in some
brackets with the roll and the content
and we just want this to be an object so
I'm going to put another set of
parentheses because I'm returning an
object that has the role and the content
all right so let's just put a comment
here just to be clear on what this does
so we'll say construct
construct messages
by iterating over
the history
all right now
we want to add the latest user input to
the message array so right under that
let's say add latest
user input so we'll say messages
dot push because we're pushing onto the
array an object with
role
which is going to be user
and content
which is going to be the user input
now instead of passing that directly in
here we're going to pass in
messages
okay now the last thing we want to do in
order for this to work is update the
chat history with the user input and
assistance response so when it responds
to us that also needs to be saved to the
chat history so that's going to go at
the very bottom right so under the
console log here let's say update
history with
we'll say with
user input and assistant
response
so we'll do that by taking chat history
and we're going to push
onto that
we're going to push
say user
and then whatever the user input is and
then I'll just copy that down and we're
also going to push on the assistant
and that's going to be the completion
text
and that should do it so now let's try
it again I'm actually going to try it in
the regular terminal here I would say
npm start obviously you have to be in
the folder
so we'll say hello
I'll say what is the capital of
Florida
Capital Florida is Tallahassee now say
what is the
population
and there we go as of 2021 the estimated
population is around 197
700. so what's happening is we're no
longer just sending a single message to
the API we're sending the entire history
all right so that's going to be it for
for what I want to do with this but
there's so much more you could add to
this you can make it so that your logs
are saved in files you could call
different apis you know integrate
different apis for weather and and
whatever else you could implement the
new function calls which I'm actually
going to make a video on soon and I'm
probably going to use the same script
and just add to it but yeah you could
just keep this open on your desktop and
if you have any questions about anything
you could just ask and it'll even
generate code samples let's say
create a
python script that makes
a simple request to an API
obviously we're dealing with the
terminal so we are kind of limited in
our output but it should work
all right so there we go and you can see
right here certainly here's an example
of a simple python script and everything
is in this block right here so we could
just simply copy that and put it into
our into our file and then it explains
exactly what the code does
you could even make it so that when you
ask for a code you can have it create a
file you create a python file with that
code in it I mean there's so much you
can do and you can edit the prompt what
we're doing here is sending whatever we
enter as the content but you could
prefix this with something you know like
speak to the user as if you were a
travel agent or something like that you
can prefix this with whatever you'd like
we're just sending the straight input so
it's pretty simple all right so that's
it guys hopefully you enjoyed this
little project and feel free to use it
add on to it and I will see you next
time"
5X9isvG8W5s,"foreign
hey what's going on guys so it's been a
while since I made a video it's been
about two months or so which is way
longer than I've gone in the past five
six years and a lot of people have been
asking me if everything's all right and
the answer is yes I've just been really
busy working on my modern JavaScript 2.0
course which is finally done and it's a
37 hour course which is almost double
the older course and double any any
course that I've ever created now
another reason that I've been really
busy is because I've I've finally
created my own website my own platform
where I can sell and host my courses so
this course as well as about 10 others
which comes out to about 250 hours of
content are now available at
travestymedia.com and I'm putting a
promo Link in the description to get
this course in any course for just
fifteen dollars so I've been working on
this particular course for the past five
or six months and I I wanted to
essentially create a JavaScript boot
camp that includes everything from
learning you know data types
manipulating the Dom animations web apis
object oriented programming and then
getting into tooling with webpack and
front-end workflows we even get into
unit testing data structures and
algorithms and then there's a couple
bonus sections where we actually create
a full stack web application using
Express mongodb on the back end and we
create a completely custom front end
using webpack creating you know UI based
components just like you would with a
framework except it's vanilla JavaScript
so really really cool and I wanted to I
wanted this to basically take you from
absolute beginner to slightly advanced
in terms of Concepts so there's all
types of projects from a crud shopping
to an object-oriented calorie tracker
with classes and local storage and
bootstrap five components there's also a
movie app called flicks that uses the
movie database API so it's kind of like
a Netflix layout and we have search and
pagination and it's all vanilla
JavaScript there's no there's no
Frameworks I shouldn't say it's all
vanilla because we do use a couple small
libraries like there's a library called
swiper that we use for the for the the
slide slider component but it's mostly
just pure vanilla JavaScript there's a
bunch of mini projects as well but what
I really wanted to do is not just do a
project course I have a bunch of those I
have a 50 projects course or 20 projects
course this one I wanted to obviously
have projects but I also wanted to do a
lot of learning modules where we focus
on certain Concepts whether it's
promises or error handling I also wanted
to really look under the hood at things
like execution context and the call
stack and the event Loop things that a
lot of courses kind of leave out so
teaching you how JavaScript works not
just the syntax you know when we when we
code and we watch tutorials sometimes
you get that aha moment where something
that you've tried been trying to learn
for months just finally clicks and I
want this course to to be just constant
clicks where you know things that that
you don't really you know a little bit
about but you don't fully understand my
goal is for this course to make that
those things finally click and help you
learn the things that you've been trying
to learn so like I said there's a promo
code for just fifteen dollars you can
also get all my courses for 25 bucks a
month and cancel at any time I add it
all together it's about 250 hours of
content I just want to say that udemy is
I have nothing against you to me they've
obviously helped me boost my career as a
course creator and a content creator but
I think it's time that I just focus more
on my own website and kind of cut out
the middleman there's been a lot of
changes in terms of pricing and stuff
like that and at the end of the day I'm
averaging about three or four dollars
per course sale sometimes less than that
sometimes one or two dollars which you
know I'm not someone where it's all
about money for me obviously I I taught
for free for years and years but it
starts to feel a little degrading when
you're getting you know a dollar twenty
for a course sale when you put your
heart and soul into that course and you
spend months making it so I just want to
kind of move on and and try to do my own
thing you know and I'll be constantly
updating courses now I'm actually in the
process of updating my mern e-commerce
course that's why you don't see it on
the website because I'm in the process
of updating it now I'm creating a
bootstrap 5 course I'm also going to get
into other languages like Python and
golang so if you do go the membership
route you have full access to all
courses cancel at any time and you can
do monthly or yearly and I'd appreciate
it if you guys just check it out you
know even if you don't have money to to
pay for courses or anything if you want
to just check out the website I'd
appreciate it I've really they just kind
of worked my ass off over the last few
months with with this this jaw
JavaScript course and getting this all
together now as far as YouTube goes I'm
not disappearing I just I kind of needed
a break from the constant uploading and
needing to to think of new ideas believe
it or not it's very it's very stressful
to try and get a video out every week it
really wears on you and it stops you
from doing other things that you want to
do
um so after like nine or ten years of
this it it I needed a good long break
you know I've taken a week or two off
before but
um this was was really refreshing to be
able to do this but now I'm ready to get
back at it I'm going to be doing my
annual uh roadmap video that I do every
year that everybody is asking for
um there's a lot of stuff going on in AI
chat GPT I know everybody's making a
video on it
um but regardless I've been using it
quite a bit and really want to talk more
about Ai and and what it means for the
future of of web Developers
but that's pretty much it guys I just
wanted to let you know where I'm at I
will be back to making videos soon uh
again I'll have the link in the
description to the course and the
platform so if you want to check that
out and I just want to thank all you
guys for you know sticking around
subscribing watching and all that and I
will see you soon"
_8M-YVY76O8,"hey what's going on guys so I've had
quite a bit of my plate recently some
personal stuff also trying to get this
modern JavaScript course done so I've
been looking to have some guests on and
today we're going to have on a fairly
new YouTuber he has a small Channel his
Channel's name is Cooper codes and he's
going to build a react and stripe
shopping cart application with you guys
so if you enjoy this content if you
enjoy the project check out his channel
I'll have the link in the description
and the idea is to to give some of these
smaller channels some exposure and at
the same time you know give you guys a
cool project to do while I'm working on
some stuff so hopefully you enjoy it and
I'll let Cooper take it away from here
foreign
hey there it's Cooper codes I just want
to start by thanking Brad for having me
on the channel I actually use Brad's
videos when I was just starting to learn
how to code so I'm super excited to be
your instructor for this project I'm
going to get started by showing off the
finalized version of the project we have
three different items here we can add
them to our cart we can have different
amounts in the cart for example I can
have one sunglasses a bunch of different
cameras you can also remove these items
from your cart as you'll see here we
have a cart in the top right just like
you'd expect and it will show all the
totals for all the different products in
our cart this project is interesting
because when we actually purchase these
items we're going to be sent to a stripe
checkout in the stripe checkout you'll
see we have the same products in the
same quantity that we had in our cart so
I filled in some test credit card data
here my name isn't actually Cooper codes
and so I can pay by pressing the button
here
and we will get a little thank you for
your purchase from our store if we go
over to our stripe dashboard which don't
worry about we're going to get into this
in more detail later in the video we can
see that we have a successful payment
that got processed the payment has an
invoice that shows the same items with
the same quantity and the same price as
we saw in our react front end yeah so
this is a great really full react
project we're going to be working with
react router react bootstrap a basic
Express backend and also using the
stripe API let's get into creating the
front-end components for react
application let's get started by going
to an empty folder and opening up a
terminal and we can create our react
application by saying npx create Dash
react Dash app and then the name of the
folder we want the react app to live in
I'm going to say store
we can now see that we have our empty
react application with everything we'd
expect we can go into the store folder
by saying CD store now that we're inside
the folder for our react application we
can start by installing a couple
packages we're going to need for the
front end so we can say npm install
we're going to need bootstrap for the
bootstrap styling and then react Dash
bootstrap for the pre-made react
bootstrap components then we're going to
need react Dash router Dash Dom for the
react routing which helps us go from
like page to page for example we can npm
star just to make sure everything is
working well on the react side of things
we can see that we have a boilerplate
react application which is perfect
exactly what we want we can get started
by creating all the different components
we need for our front end the first
component that we're going to work on is
the nav bar which is going to be that
little bar you see at the top of a web
page for these components we can go into
our source folder and make a new folder
called components this is where all of
our different react components are going
to live and I'm going to create a
component called navbar.js we can
initialize a functional component by
saying function the name of the
component which I'm going to say navbar
component and that's the full definition
there if we want to export this
component so other files can take a look
at it or use it we want to export
default navbar component when designing
our navbar we're going to use a couple
of different external components from
the react bootstrap Library we can
import everything we need by saying
import from react Dash bootstrap the
components that we need are going to be
the button this is going to be for when
we want to click on our cart for example
that's going to be a button we're going
to need a container for our navbar to
live inside we're also just going to
need the navbar from react bootstrap
which gives us a bunch of preset styling
is super easy to use and we're also
going to need the modal the modal
element is when you click on the cart
and it shows that screen on top of your
web page showing you all the different
data related to your cart so let's get
started by building out the return
statement of this navbar component we're
going to want to initialize a nav bar
here and we're going to set the expand
property to the nav bar of small this
determines where your nav bar collapses
for like mobile screens and stuff like
that small it looks good on this website
so I'm going to choose that we can start
by setting that navbar dot brand that's
that big title you see to the left and
it's going to point to a link of just
slash which is going to be like the home
link for our web page and we can make
that little title or brand say
e-commerce
store we're then going to have a
navbar.toggle this navbar.toggle allows
us to have that little element where if
you're on a mobile screen some of the
stuff is going to collapse and so we can
tell the navbar what we want to Collapse
by using this navbar.collapse element we
want the items within the collapse
element to be to the very right of the
bar so we can say class name is equal to
justify Dash content Dash end and so you
can think of it as like the start of the
row is kind of at the start to the left
then the end of the row is at the end
which is going to be to the right on
your web page we're then going to have a
button which is where the user is going
to click on the cart for now we're just
going to say cart with zero items later
in the video we're going to set up that
whole cart system and then eventually
change this to show the active amount of
items in the cart so let's bring this
navbar into our app.js we can run over
to the app.js file here and then import
navbar component so we can get rid of
the boilerplate react application code
it here and just put in the navbar
component and before we start the
application here we're going to want to
make sure to import the bootstrap CSS so
we have to do this manually by saying
bootstrap slash dist CSS slash
bootstrap.min.css this import is
necessary because it has these style
sheets that we need for our bootstrap
components so let's npm start our
project and see what it looks like right
now so as you guys see our navbar is
kind of very far to the sides we can
bring in a container from react
bootstrap
this container will allow our entire
application to kind of sit closer to the
middle of the screen and so we can wrap
our entire application so now that the
nav bar is inside of the container if we
go back to our Local Host it's going to
be more centered which is pretty good so
now that we have a basic idea of the nav
bar figured out we can get into showing
different pages to the user by using
react router react router allows us to
show the user different data based off
the link they have for example if we do
localhost 3000 we want to point that to
some type of home component for example
if we wanted to do localhost 3000 slash
success we would want to show some type
of success component so this is what
react router helps us do we're going to
import three essential things from react
router so we can import the browser
router which is the overarching router
then we can have routes and route from
react router Dom
in every single page of our application
we're always going to have the nav bar
at the top so we can choose where to put
the kind of special data by making a
browser router within the browser router
we're going to define the routes tag
inside of the routes tag we can have all
the different routes so like I have
commented at line 8 and 9. we can have a
route with the index property this
allows us to have a route show for the
kind of Base route or just the regular
slash you might have seen before
and we can point it to a certain element
for now I'm just going to write in some
components that we haven't created yet
which we're going to create after we
make these basic routes we have a store
Route which is going to be at the base
route so if you go to localhost 3000 for
example it's going to go to the store
and if we want to point to a specific
route we can say path is equal to
success this means if we go to localhost
3000 success we're going to show
whatever components under this element
so for example the success component
which again is something we are going to
create we're also going to have a cancel
path so I just copy that line over and
I'm going to change the path to cancel
and the element do cancel react router
best practice is to call these elements
not components but instead pages so we
can go over to our source folder make a
new folder here and create a Pages
folder inside of pages I'm going to make
three different files I'm going to make
a store.js which is going to be for the
actual eCommerce store the cancel.js
which is the page for if stripe payment
gets canceled or the user exits out of
the stripe payment and then also the
success.js which will send the user to
if they have a successful payment so
let's start by going into cancel.js and
making a very basic cancel component so
it's just going to be a function named
cancel I'm going to export default
cancel at the bottom and for this
component I'm just going to return a
very simple little H1 that's going to
say sorry to see you canceled your
stripe payment I'm going to copy this
entire component here which is very
simple but I'm just doing this to show
you guys the routing initially then
we'll get into building the more full
pages so over at the store page for
example this is going to become a huge
page eventually but we're just going to
change this function to store
and Export default store and I'm just
going to have a H1 that says welcome to
the store same thing we can copy this
component go over to success and then
under here instead of saying store we
can say success success we can say thank
you for your purchase so if we run back
over to our app.js stores undefined
success is undefined cancel is undefined
so to Define these components what we
can do is we can import cancel from dot
slash Pages slash cancel that's going to
get the cancel component and we're going
to do a similar little import for all
the other Pages as well for example
we're going to get the store from the
store Page and then the success from the
success page if we go to the base route
so just localhost slash like up here
we're going to be sent to the store
component if we go to the success path
we're going to be sent to the success
component and same thing for the cancel
path will be sent over to the canceler
component here so let's npm starter
application to see see that routing work
amazing so at the base route of
localhost 3000 we are being shown the
store component if we go to slash cancel
we can then see sorry to see you
canceled your stripe payment and if we
go to slash success it's going to say
thank you for your purchase just to
clear something up is the reason why we
don't have a success or cancel under
like the nav bar for example where you
can click on them and go to them is
because stripe is going to redirect our
users to the success path or the cancel
path based on how they interact with
these stripe stuff which I will explain
in way more detail when we cover these
stripe stuff so let's go over to our
store component and make some basic
cards for our actual products to live
inside so we can go to the store Page by
going to store.js under pages and now we
have our store we are going to use rows
and columns to show all the different
products on our website so I'm going to
start by importing row and column from
react bootstrap I'm going to put this
whole store in a little react fragment
this just makes it so the Js sex code
doesn't get mad at us when we have two
elements next to each other and it wraps
everything together for our store
because under the H1 we're just going to
start by creating our row on an extra
small screen we only want to show one
column for the rows but on a medium
screen we want to show three different
columns so that's what these properties
are doing here I'm also going to give a
class name of G4 to make everything look
nicer and within the rows we can now use
columns for example we can say column
and I'm going to use the Align equals
Center property just to make everything
look nice and in here I'm just going to
make a very simple H1 that says product
and I'm going to copy this over just to
show you guys in a second we're actually
going to make a product card component
but I just wanted to show you guys how
these columns and rows are working first
so let's go over to our localhost
amazing so you guys will see although
they aren't pretty looking cards we have
products in our store which we can
eventually turn into components and just
to give an example this row is really
amazing because it can handle as many
column challenges you want for example
we have five products here and so that's
an interesting thing about this project
is it's super expandable you can have as
many different products as you want you
can change these data around but one
thing that let's get into right now is
how do we dynamically load products like
I have like you know sunglasses a camera
coffee how do we know where to load
those from to make our lives easier I'm
going to go into the source folder and
make a Javascript file called products
store.js I'm making this a Javascript
file because I'm on to all of our
different components to have access to
the product information on our web page
so we can make an array of the products
by saying const products array is equal
to an array here and we can make objects
to represent the data for each product
for example every single product is
going to have an ID a name for example
coffee and then a price which I'm going
to make a double and make it 4.99 for
example and so we can make three
different products because I think
that's is a good amount for not going
super Overkill because I know it's kind
of annoying to write this stuff out we
can have the second product have an ID
of two I'm going to make that sunglasses
which I'm going to make let's say 9.99
and then the ID of three here and I'm
going to make this last one a camera and
I'm going to make this expensive I'm
going to say 39.99 for the camera and so
we can actually export this products
array at the bottom and this allows us
to oh and you need curly braces around
this because we're actually going to
export another thing as well spoiler
alert but this allows us to give this
array of data to any component inside of
our JavaScript project or inside of our
react project all we need to do is say
import productstore.js and grab the
products array from it a function that's
going to be helpful for us to get the
data of a product from only the ID is
going to be function get product data
from a certain item's ID this is nice
because let's say we only have the ID of
a product in our shopping cart for
example but we want to know the title
and the price of a certain product we
can make a helper function so we can say
okay get product ID with a certain ID
here it goes into this array and gets us
the data we need from a certain ID and
so we can use the array.find method here
and so we can say let product data equal
to products array which is an array
which we just defined right here dot
find What DOT find is going to do is
it's going to allow us to Loop through
every single element so the current
element it's looping through is called
the product and then we can use an arrow
here to represent what do we want to do
with this product well we want to see if
the product.id so for example it's
looping at this ID this ID this ID we
want to see if that is equal to the ID
that was passed in from our parameters
right here and you'll see visual studio
just lit up because now we're using the
ID parameter are here so if this ID was
the string 3 for example you could say
over here three and eventually it's
going to say okay first product this is
an ID of one that's not three ID of two
that's not three ID of three that is
three and so it's going to return this
full object is what product data is
going to be and so let's change this 3
back to ID and so if it finds no product
let's say we pass in an ID of four it
would have no product and so then that's
going to return undefined and so if the
product data is equal to undefined we
can just do a little console.log to help
us is we can say product
data does not exist for ID then we can
just add the ID to the end of the string
there and we can just return undefined
here I'm not going to handle this case
in this video actually but this is just
in case you know you want to make sure
you cover all the different cases you
can and at the bottom here we are going
to return product data for any
intermediate programmers or people more
familiar with this I already know what
you're saying but I'll think this is
worth explaining is product data if it's
undefined we're just going to return
undefined anyways at the bottom here the
reason why I'm adding this extra return
statement at line 25 is because I think
it makes it way more easier to read it's
if we have this product data equals
undefined we want to do certain logic as
a result of that I think just to explain
for the further mint of people's
learning is that we could get rid of
that line at 25 that was just there and
it would have the exact same code
because if it's undefined it'll log this
and then return here I kind of just
prefer this extra return statement
because it kind of makes the logic more
easy to read where like if it's
undefined we do these things we don't
want to like be like oh we console log
and then like fall into doing the next
thing it seems kind of odd to me so
that's why I keep the return undefined
here and so we can also export functions
alongside the regular products right
here so we can export this get product
data like this and this is going to
allow us to be able to call this
function anywhere else in our react
application so if we go over to our
store we can have a good example of
importing the products array so we can
go to store and at the top we can say
import products array from dot dot slash
products store and so this gives us
access to the actual products array if
we want to build columns based off of a
certain array of data remember it's
looking something like this an array
where it's an object and then another
object and then another object obviously
I'll do something like dot dots to show
that there's actually data inside those
objects but when we want to go over this
array we can use something called a map
and so let's delete all these different
column except for just one because now
we can create columns based off the
actual products inside the products
array we can do that by saying products
array dot map so map allows us to go
through every single element in the
array and then do certain logic based
off the element we are at and most
importantly return actual react jsx for
a certain element so we can Define the
product and the index here so if we're
mapping over a certain product let's say
three different products we can get the
current product wrap with this product
variable right here then we can Define
our logic by doing an arrow here and I'm
just going to do some regular Circle
braces like this the parentheses here
mean that it's expecting us to return a
jsx element immediately so that means we
can create an element of code for every
single product in our products array
because we're mapping over it it's also
important to notice that we can actually
use this product object that we're
currently on so if you go to our product
store and you look at every single
object here you'll see that we have a
title for example Apple we can access
this by saying product which is this
whole object here and then title which
is this property here so let's go over
here and we can do curly braces and say
product dot title we are also going to
use the index of where we currently are
at to make unique keys for our columns
this is just best practice for react so
let's go over to our application and see
what it looks like amazing so we have
access to the coffee sunglasses and
Camera which means we also have access
to the whole object of data there which
is really neat to make it look a little
nicer we can align this header on the
top to the center
and then also give it a class name it's
going to give it some padding so I'm
going to say P3 let's go see what that
looks like there we go way better and
now we can get started on creating an
actual separate component for all the
logic of our current product to live in
because we don't want to make our whole
components right here for example so we
can go into the components folder and
make a product card.js
we can Define the product car by saying
function product card like this and then
export default product card and for this
example we're actually going to have the
props of the element that we're going to
use as well and so we are going to pass
in the actual product through props dot
product so I'm just going to keep this
common just to make it helpful for you
guys props.product is a product we're
selling and it gives us access to all
the different information of that
certain product in order to make a nice
looking card for our product we're going
to need to import a couple of things
from react bootstrap I'm going to import
the card the button the form row and
column from react Dash bootstrap so
let's get started with styling the card
by returning here we can start with the
large overarching card so everything is
going to be living within this card then
we are going to have a card.body which
also again everything is going to be a
living within so these are the two
overarching ones we can start with car r
dot title which is going to give us a
nicely styled title for our card to use
and we can actually get access to this
prop stop product by saying const
product is equal to props.product and so
if we want to get the title of the
product we can look at the product store
see how these objects are structured and
like you can see it's going to be
product.title so we can say
product.title right here we can then do
a card.txt and we can similarly access
other properties such as product dot
price and I'm from the US I'm going to
put a dollar sign in the beginning here
also because we're going to be using a
USD for the stripe stuff but you feel
free to use whatever currency you want
then at the bottom here I'm going to
make a very simple button it's going to
have a variant of primary primary and
bootstrap is just a nice like bootstrap
blue color which you guys will probably
recognize and for now we're just going
to say add to cart which of course we
don't have the functionality for that
quite yet but now we have the full
product card so we can actually bring
this product card over to our store page
so we can import the product card like
this from component slash product card
for anyone unfamiliar with properties
I'll show you how that stuff goes down
right now we can create a product card
component like this but this is an
example of a product card with no
properties on it if we want to pass in
properties we can say that the product
property is equal to
product like this you might be like
product equals product what's happening
here this product is defining the
property and then this product right
here is looking at the product we are
mapping over is what's happening there
and so we're able to access this product
equals variable by if we go back over to
our product card we can say prop stop
product props is going to be a list of
all the different properties on our
component and that product is going to
be that object that's also why we're
able to say const product equal to
props.product and then get different
properties from that object for example
so now that we have an actual product
card being rendered let's go look at our
Local Host so this is a basic start to
the front end you'll see these add to
cart buttons they don't do anything
discard zero items also doesn't do
anything yet but don't worry we are on
our way so let's go over to our navbar
code and get started on creating that
module that pops up when you press the
cart button here and the model is that
little screen that makes everything
behind it a little bit darker and it
will show you all the different items
inside the cart so here I am in the
navbar component I'm going to separate
the navbar and the modal by creating a
react fragment around this code so we're
going to have the navbar be the first
component inside this react fragment so
now we can Define our modal modal has an
incredibly important show property which
means is the modal being showed or not
and we're going to set it equal to a
show variable that I'm going to create
in a second so I'm going to use the on
hide property so whenever the hide event
happens we can go call a certain
function I'm going to make a function in
a second called handle close and when we
click on the cart this little cart
button here we actually want it to show
the modal so on here we can say on click
is equal to handle show to store the
show variable I'm going to use the use
state from react and so we can import
use state from react u-state just allows
us to have local variables and don't
mind these errors we're about to fix
them up in a second and we can Define
the show variable by saying show which
is the variable and then the center to
the variable which is going to be set
show and I want to initially have that
modal not showing you could imagine it'd
be weird to load up a site and then the
cards like in your face right away so
it's going to be false initially and we
can make some nice simple one-liner
functions by using some Arrow syntax so
we can make the const handle close is
equal to an arrow function where we set
the show value to false so if that close
event happens or that on hide event
happens we hide the modal then we can
copy this code and we can then handle
the show so if we wanted to show the
modal we can set that show variable to
true and so before we go and test out
this functionality let's go and make a
couple more things here for example
we're going to need a modal dot header
and I'm going to give it the close
button property which just means it's
going to have a little button to show
the user they can close the card now
within the header I'm going to have a
modal.title which is just going to say
shopping cart then there's going to be a
modal.body which is where the majority
of our code is going to live for now I'm
just going to have an H1 say this is the
modal body pretty simple for now because
we're going to delete it later but now
let's go back to our website and refresh
it and see if we can access this modal
amazing so you guys will see we can
click on the cart and it's going to show
that little shopping cart modal this is
the model body we can also close it by
pressing this button here which is very
nice that's the nice thing about this on
hide event that we can listen to is
that's going to get called no matter if
we press on the outside or if we press
on this x here too so it's kind of nice
in that way as you guys see we don't
have any actual shopping cart logic in
our react website quite yet so what
we're going to do is we are going to go
and create a cart context by using
Create context from react context is
amazing because it allows us to store
the cart data so for example the IDS and
like the quantities of what item you
have in your cart and it also allows us
to store functions that we can call
anywhere in our entire application for
example if I wanted to add an item to
the cart we could call a function from
our context you don't have to fully
understand that but I'm going to get
into that right now and show you guys
what I'm talking about so we can go over
to the source folder here and I'm going
to get started by creating a cart
context.js context is particularly nice
when you need data or functions that are
necessary throughout a bunch of
different parts of your application so
we can get started by making a context
by importing create context and I'm also
going to need use State eventually so
I'm going to grab that while we are here
and I'm also going to get access to the
products array
and so let's get started by creating our
context we can say const cart context is
equal to a create context like this
contexts kind of have a flow where you
have the actual context so you can
imagine your cart add to cart you know
remove cards just you know this is more
like sudo code but just example like
that then you're going to have something
called a provider the provider gives
your react app access to all
the things in your context so you can
imagine if we wanted add to cart at a
certain you know component boom we got
it right here if we wanted to remove the
cart or whatever that means we could
have it right here that's just an
example of what this context is and we
initialize that by creating an object in
this create context here for example if
we wanted the items to the cart I'm
going to hold those inside of an array
variables are probably the easiest one
to understand for context if I want
access to the cart I can get that
anywhere I want but add to cart is a
little bit different so if we want to
add functions to our context it's going
to look a little bit different if I
wanted a get product quantity function
for example I'm going to set it equal to
an empty Arrow function which is going
to have no logic you might be like why
do we have this weird function with no
logic because I'm about to do this like
six times this is why I'm explaining
this just so you guys know is because we
don't Define the functions right inside
of the context all the context is saying
is that we can define a function for get
product quantity we're gonna have of
code down here which is going to help us
create the full code for get product
quantity and then when we actually have
a function for get product quantity we
can then pass that to our provider
hopefully that makes sense the context
you're just saying a function should be
here
when we actually pass values to our
provider which of course I'm going to
show you guys that is what's important
those values to the provider we can
actually pass the functions in then this
context is just saying we have room for
a function to exist here it's probably
the easiest way to think about it so if
we want to add an item to the card I'm
going to call it add one to cart and
again just an empty function with no
logic and we can just copy this line
over and over I'm going to remove one
from cart I'm going to delete from cart
and so that's going to be helpful for if
we just want to boom all at once delete
all the items from the cart as opposed
to one at a time then I'm also going to
get the total cost of the cart this is
going to be a helper function that's
going to help us for when we want to see
the total at the end and so to give our
application access to this context we
can say export card context here we can
now get started by working on the cart
provider that I'm talking about export
function cart provider then we're going
to get access to all the children of
this element I would say don't be too
concerned about what this children
property means it just means that if we
were to wrap cart provider like this for
example anything inside of here is going
to be the children and so if we wanted
to wrap around it our entire application
for example we'd want to make sure our
entire application goes on the inside of
this if that makes sense so inside of
our provider at the very bottom just to
show you guys what we're leading to
First we're going to have a very simple
return cart context dot provider value
is equal to context value which I'm
going to Define in a second and then
we're going to pass in the children is
why that weird children variable is
necessary and so we can even Define the
value to our context I don't know if
it's going to
throw errors but let's see items is
going to be e"
uwAqEzhyjtw,"what's going on guys welcome to my
command line crash course so if you're a
developer of any kind chances are you're
going to be using the command line at
some point you may just be installing
some npm dependencies as a front-end
developer or you may be logging into
servers via ssh and performing more
advanced tasks but either way it's good
to learn the basics when it comes to you
know navigating your file system working
with files and folders etc so in this
crash course we're going to be looking
at all the basics and a little bit more
than that
i'll be using a mac but you should be
able to follow along whether you're on
mac windows or linux i'm going to
explain kind of the differences between
the the operating systems and what
options you have and so on all right so
that's it let's go ahead and get started
[Music]
all right so before we get started i
just want to mention today's sponsor
agora so agora is a real-time engagement
platform that provides us with all the
tools for building out features like
audio and video calling along with
real-time data signaling right into your
applications with a gore you get sdks
and you get low code tools to build all
sorts of video calling features like
group chats with screen sharing and
recording you can stream to third-party
platforms like youtube and so much more
if you've ever set up websockets for
real-time messaging you know that it can
be quite the headache so agora makes it
easy to implement all of these real time
features so for more information you can
click the link in the description or
visit agora dot io today
alright so i just want to spend about 10
minutes or so talking about a few things
and if you want to skip right to
learning the commands i'll put a time
stamp in and you can do that but
there is some confusion when it comes to
some of the terms we use like command
line terminal shell
it can be confusing for beginners so i
want to talk about that as well as some
of the differences in operating systems
but i want to start off with just some
reasons why you would even want to learn
the command line or the terminal and
again i'll be using some of these terms
interchangeably so it might seem a
little weird when you have a powerful
operating system that is a gui or a
graphical user interface where you can
just point and click and do things so
why would you want to remember all these
commands
there's actually a lot of different
reasons but i'll just go over some of
the big ones so number one you have
greater control
the gui or the graphical user interface
of an operating system it does make
everything nice and easy and pretty
however using the command line or the
terminal is sort of like having back-end
access to the system so you can do
things that you can't typically do with
the graphical interface the gui only
gives you so many options
with that said you do have to be careful
with certain commands
some of the advanced commands can
perform really complex operations on
your system and you also typically
manage things like permissions and user
access with the command line
so the next one is speed and efficiency
i think it
might sound strange to some people but
learning to navigate your system through
the command line allows you to do a lot
of things more quickly and easily
there's certain tasks especially when
dealing with multiple files or even
hundreds or thousands of files at once
that would take you hours or even days
to manually handle within the the
graphical interface instead you can just
run a couple commands you can also alias
commonly use commands to do things even
faster you don't have to go back back
and forth from the keyboard to mouse
your your hands are always on the
keyboard so working with the command
line can be much
it can be more efficient in many ways
so the next one is to access remote
servers and if you're
you know if you're a web developer and
you're deploying
websites or web applications a lot of
times you'll need to log in via ssh
which is the secure shell so basically
basically you can log into servers
through the command line
i do have a crash course on ssh if
you're interested we're not going to get
into ssh in this particular video also
there are some operating systems that
don't even have a graphical interface
these are called headless operating
systems i actually have
ubuntu server running as my home server
which is a headless version of linux
ubuntu it doesn't even have a monitor or
a keyboard i just log in via ssh from my
computer
so the next reason is command line tools
i think no matter what area of tech
you're in you're probably going to use
some tools that are not gui based a lot
of tools can't just be downloaded and
installed through a graphical interface
even front-end developers now
they used to be able to get away with
not really having to learn anything in
the command line but nowadays you have
all your packages and frameworks and
stuff are all installed via npm or node
package manager of course git version
control and i know there are gui
programs for git but in my opinion
typing in a couple commands is easier
than learning some of those gui tools we
also have pre-processors like sas we
have task runners
bundlers like webpack and parcel these
are all front-end web development tools
that are that are used from within the
command line and the last reason i have
is just getting hired chances are if
you're trying to become a developer of
any kind you'll be required to at least
know how to navigate around your system
using the command line and also how to
use certain tools like npm and git and
it's just a great skill to have in
general
all right so often the terms command
line terminal and shell are used
interchangeably you've seen i've already
done it here and usually the the term
command line is very window centric and
terminal is very mac and linux centric
but i want to go through and talk about
each of these terms and what they mean
so we'll start with the terminal and i'm
going to give you a really short history
lesson to explain this so back in the
day a terminal was an actual device with
a screen that could display text and
accept input
there was no tower or anything like that
it was just a keyboard and a monitor in
fact i actually had one of these when i
was a kid and i thought it was so cool
to be able to type and see the text pop
up on the screen so yeah i'm pretty old
anyway it was
usually connected to some big mainframe
or early unix-based system and allowed
users to interact with it
only text could be displayed on the
screen it was called a terminal because
it was located where the wires from the
computer ended are terminated and then
later on hardware terminals were
replaced with what we call terminal
emulators this is what basically what we
use now that it's it's software-based
the actual program that you open up and
you type in commands you can use the
terminal that comes with your operating
system or you can also install
third-party terminal programs for
instance on my mac i use item 2
and on windows i'll use either git bash
or hyper
alright now the command line or the
command prompt is the term that's used
to describe the interface of the
terminal okay it's the interface that
allows you to enter commands and get
output from commands again windows does
use this terminology a lot
and and a lot of times they call their
version of the terminal the command line
or cmd
and for those of you that use windows
probably know that
all right now the shell in order to be
able to use the terminal there has to be
a program on the computer that that
reads the input and displays output this
is called the shell uh different shells
can have different capabilities and
different ways of entering commands so
you can sort of think of the shell as
the operating system of the terminal
okay bash is the most common shell
program and is usually the default on
most linux and unix systems and it was
the default on macs for a long time up
until recently they switched from bash
to zsh which is what i'll be using in
this tutorial
but everything i do here can be done
with bash or zsh
all right now i want to talk a little
bit a little bit more about windows
because of course microsoft has to be
difficult with their own proprietary
stuff they've done this you know for
decades
microsoft created the first os
for the ibm pc it was called dos or disk
operating system and it was a command
line based system
and it didn't use the bash shell it used
something called command.com by default
and when windows was created it was
actually just a regular piece of
software that ran on top of dos and then
later on it became its own you know an
operating system in its own right and i
believe windows xp was when the shell
switched from
command.com to cmd.exe
which is also very limiting so they
ended up creating powershell now windows
command line and powershell are
different than unix-based shells on
linux and and mac os you can use a lot
of the same commands however there are a
lot of differences and they have gotten
better up until recently you couldn't
even use ssh on windows by default you
had to you had to download and install a
tool called putty which was really
aggravating
when i use windows i use a program
called hyper or git bash which are
unix-based terminal emulators and a lot
of people also like the wsl or the
windows subsystem for linux which
basically allows you to run linux from
within your windows os i personally
never got into that but i do
or because i do most of my development
on macs now if you're following along on
windows and you don't use a specific
emulator i would highly recommend using
git bash which you can get at get dash
scm.com
learning powershell is a great idea if
you if you plan on being like a windows
system administrator or something like
that all right so now that we've
established what the terminal is the
command line the shell let's jump in and
let's start learning some commands
all right guys so a couple things i do
have a gist file just link in the
description if you want to basically see
any of the commands or any of the
information that we talk about in this
crash course so you can see this quite a
bit here we're going to go over all of
this but obviously you're not going to
remember every single command so you
have this as as a reference all right
now another thing i want to mention is
since this is a beginner's course and i
don't want to limit this to any
particular operating system i'm not
really going to get into commands that
have to do with permissions and groups
and users i'm going to assume that
you're logged in as the root user or or
the administrator user i may do another
video on permissions in linux but i want
this to be an os agnostic course so
we're going to mainly focus on things
like navigating the system working with
files and folders
looking at system resources things like
that all right so just want to put that
out there
all right so i'm going to minimize this
and go into my terminal which i made
nice and big hopefully you guys can see
it and like i said i'm on a mac i'm
using uh i term 2 and i'm using z shell
or zsh
so if you want to use the regular mac
terminal that's fine if you're on linux
you can use just about anything i would
just recommend that you use a bash shell
or a z shell
if you're on windows you can use
something like git bash or hyper
or windows subsystem for linux i
wouldn't suggest using powershell
because the powershell is different some
of these commands aren't going to work
i'm not very familiar with powershell so
i can't tell you too much about it
but yeah any anything else should be
just fine again i tried to make this
operating system agnostic
all right so before we get into specific
commands i just want to look at some
quick keyboard shortcuts so the up and
down key is very helpful because if you
click up it's going to show you your
last command hit up again it'll show you
the one before that and it goes you know
up to hundreds of commands and then if i
hit down of course it'll come back so if
you have the same command you have to
keep running over and over there's no
sense in typing it out you can just go
up to it and hit enter so that's up and
down now the tab key will auto-complete
so for instance if i do like tou and i
hit tab it's going to auto-complete the
touch command
touch just it's used to create files
i'll get into that in a little bit but
if i were to do like mk and hit tab
since there's multiple commands that
match that it's going to show me a list
of them okay so keep that in mind and
then if i want to clear my terminal i
can do control l
so for instance if i list out all the
directories here and then i do control l
it just clears everything right up and
i'll be doing that all throughout the
the rest of the video
if i want to cancel a command like let's
say i do touch and i i don't want to run
it of course i can delete it or i can do
control c
which will just it'll basically go on to
the next line and not execute it
so the next one is is to search for a
command we can do control r
and it'll just pop open the search box
and then if i start to type whatever i
put in here it's going to match the last
command that matches that so in this
case
if i type in git it's going to show git
push as my last command that i that i
ran
all right and to get out of this you can
just do control c
all right and then control d will close
out the whole terminal i'm not going to
run it just because i don't want to
resize the window and stuff but control
d will close the terminal completely
all right now i think the first command
that i want to talk about is man or the
manual command and that's used to get
information on other commands so let's
say you want to learn more about the ls
command i can say man and then ls
and that's going to show me the
documentation or the manual for that
specific command so you can see it lists
directory contents it gives me a
description and i can use my up and down
arrows i can also page up and page down
it'll also show any options because a
lot of times with commands you have
different flags or different options you
can use so it'll show all that stuff and
then to exit this you just hit q for
quit
now
i believe on windows even if you use git
bash the man command doesn't work
however there's another utility called
help so you can just put in the command
you want to learn more about and then do
dash dash help and that basically will
do the same thing
all right so let's see the next thing i
want to show you is just a couple simple
helpful commands so if you want to know
the user you're logged in as you can do
who am i as you can see brad traversy
if you want the date and time you can
use the date command if you want to
clear the terminal like i showed you you
can do control l or you can just do
clear if you type in clear and run it
that'll clear it as well
now the next batch of commands i'm going
to show you are you're going to be using
quite a bit because they're used to just
navigate around your file system so
whether you're on your local machine or
if you ssh into a server if you want to
you know navigate your way around then
you're going to need to know these so
the first one is pwd and what that does
is it lists the it prints the working
directory so basically the directory
that you're currently in which in my
case is my home directory user slash
brad traversy obviously yours will be
different also when you see the tilde
character here the squiggly line that
represents your home directory as well
okay so that's print working directory
the next one i'm going to show you is ls
which will list out the contents of a
folder or a directory when i say folder
and directory i mean the same thing but
if we run that with no additional
parameters it's going to list out the
contents including the folders and files
of the current directory that i'm in
which is my home directory
okay if i were to let's say i want to i
want to know what's in this downloads
folder then i could do ls and then
downloads if i do down and hit tab it'll
auto complete as well so if i do that
then it shows me what's in downloads
okay now there's some options or some
flags that you can use with ls including
dash a what that does is it'll also show
hidden files so if i scroll up here
you'll see all these files with the dot
these are all hidden and these don't
show when you run ls unless you also add
the a flag all right now if i want to
show the long listing i can do ls-l
and that just shows some extra
information in addition to the file and
folder name it'll also show the
permissions the the owner the group
the file size and the date so it just
shows some extra information now i can
combine options if i want so let's say i
want to do hidden files and i also want
to do a long listing so i could add the
a l option like this
so you can see that if i scroll up you
can see the hidden files and we get the
long listing an easier way to do it or
shorter way is just to do dash al so you
don't have to have two hyphens that'll
do the same thing
all right and then another one is dash r
that'll reverse it
you might want to use let's say ls dash
reverse and hidden files because then it
shows the hidden files
at the bottom because they're usually at
the top but that reverses it
okay and there's other options as well
again you can look at the the manual or
the documentation for ls
so the next one is cd which you'll be
using all the time because that changes
your directory so if i just do cd
without without any options it just
takes me to my home directory which i'm
already in same thing if i do cd and
then tilde
okay but let's say i want to go
see we have our downloads folder let's
do that so i'll say cd
downloads
and enter and now i'm in my downloads
folder so if i just do an ls it's going
to show me the contents of the downloads
folder
okay and then if i want to go up one
level back to where i was i can do cd
space dot dot
now if i want to go to the root of my
machine which you might do if you're if
you're ssh into a server you could do cd
and then forward slash and if i do an ls
here you can see that i'm in the root
now if you ever get lost and you want to
get back home remember you just do cd
with nothing else
now another one that you don't see too
much is cd hyphen and what that does is
it takes me back to the last folder i
was in not the parent but the last one i
was in which in this case is the root
okay so that's cd hyphen but let's just
go back to
the home folder
now if you want to open a folder of or a
file in your gui from your terminal you
can do that however there's there's
different commands for each operating
system so i'll show you each one so on a
mac it's going to be open so let's say i
want to open the downloads folder so i
could do that and you can see it opens
right up in my finder now if you're on
windows it's going to be start so you
just do start and then whatever the the
file or folder name on on linux as far
as i know with most distributions it's
xd g dash open and then whatever the
file or folder
okay
now
i can also open urls so if i do open
https
traversingmedia.com then that'll go
ahead and just open on my default
browser
now the next
batch of commands i'm going to show you
have to do with actually creating and
modifying files and directories
so the first command i'm going to show
you is make directory or
mkdir which just does exactly what it
sounds like it just creates a directory
so we'll create one let's call it my
project
and now if i do an ls
we're going to see
here we have a new folder or a new
directory called my project
all right so let's cd into that so cd my
project
and obviously there's nothing in here
because we just created it so to create
a file
there's a few ways to do this but one of
the most common ways is to use the touch
command so we can say touch
and let's say
we'll say index index.html
all right so if i do an ls you can see
that created a file called index.html
which right now of course is empty
now we can even create multiple files i
could say touch let's say file1 dot
file2.txt
file3.txt
and now if i do an ls you'll see that
all three of those files were created
now when it comes to
deleting or removing a file we use the
rm command so let's say rm and we'll do
file
let's say file3.txt
and if i do an ls you'll see that that
file is now gone
now we can also use the dash i flag
which will
just prompt you to see if you know make
sure you want to delete it so let's say
rm-i and we'll say
file2.txt you'll see it's just going to
ask us if we want to remove it we can
say y and then enter
and then it goes ahead and removes that
file
now when we're dealing with directories
it's a little different so i'm going to
create
let's say make directory
and i'll just call this dur one
and you can see now we have a directory
if we want to remove that and we use the
rm command let's say dur1 it gives us a
message that says der 1 is a directory
so if we want to use the rm command to
delete a directory we have to use the r
flag
so let's say
rm
dash r
der 1
and now it's removed
now there might be cases where you have
a directory that you want to delete and
it has files and folders in it and you
get a message that says the the folder
is not empty all right in that case you
kind of have to force it with the
dash f option so you would do rm
dash rf
and then the directory name okay just be
aware when you're doing this be very
aware of what you're actually deleting
because when you're using the terminal
it takes just a tiny little mistake to
create uh you know a big issue and
you're deleting you know files that
that you definitely don't want to so
just be aware of that
now i want to look into copying and
moving files so right now we have what
file one we have an index html let's say
we want to
let's first of all create a directory
and let's call this
we'll call it source
okay so ls now inside of our my project
folder we also have a source folder and
let's say i want to copy file one
so with that we can use cp
and then we're going to
choose the file we want so file1.txt
and i want to copy it into source so i
would say source slash
and then file1.txt
okay so if i do another if i do an ls
file 1 is still here because we didn't
move it we copied it so if i ls source
and inside source you'll see that that
file was copied
now i'm going to remove file one from
the my project folder so let's say
rmfile1.txt
and now that's gone
now to move a file we can use the mv
command so let's do that let's uh clear
this up and let's say we want to move
the index html into the source folder so
we'll say mv
and let's say index.html
we want to move it to source slash
index.html
and now if i do an ls notice that
there's no more index.html
in the my project folder but if i look
in the source folder
there is
all right now if you want to rename a
file or folder you can also use the mv
command so let's say i want to rename
source to src
so i could do
mv
source
and i want to rename it to
src
and now if i do an ls now i just have an
src
we'll do ls
src
now i want to move file1.txt
back out to the my project folder i
don't want it in the source folder i
also want to rename it to info.txt
so for those of you that you know don't
already know how to do this stuff pause
the video and see if you can figure that
out move the file one out of the source
folder and rename it to info.txt
all right so to do that very simple we
can just use move
and we can say file
uh where are we no we're in
that's in the source folder so we want
to say move source
file 1.txt
to
we want to move it to the current folder
and we want to rename it to
info.txt
so now if i do an ls we should see
info.txt if we do an ls in the source
folder
then we don't see that file1 anymore
all right so we'll clear that up and now
i want to look at actually dealing with
the content in the files because up
until now
we've dealt with navigating around
moving copying files deleting creating
files but we haven't dealt with anything
inside of them they've all just been
empty so one thing we could do as i
showed you before is we can open like i
could say openinfo.txt
and that will open it
in the gui so with your whatever your
default text editor
in fact
since i have vs code installed i have
the code command set up so if i wanted
to for instance open up my source
index.html i could do that let me just
uh
one second let me just bring this over
all right so i could bring that over
here and let's say just want to add a
boilerplate you guys don't have to do
this but i'll just add this and
we'll put an h1 in here and just say
hello world just to add something to
this
and i'll go ahead and save it
alright i'm going to close that up so
now our index html has some some content
in it
if you wanted to add something to the
info you could but i'm going to show you
how you can add content directly through
the terminal and not have to open up a
text editor or something like that as
well
but let's look at some ways to to read
the content from within the text editor
so we have something in our index html
now i want to show you the cat command
or the concatenate command and this is
very common it allows you to create
single or multiple files it allows you
to view the contents of a file you can
concatenate files and redirect output in
the terminal or to other files it's
really powerful but i i usually use it
just to kind of peek in and see what is
in a file so let's say cat and then
we'll do source slash
index.html and you can see it shows me
the content that's actually in that file
now we could
we could also use it to write to a file
so i'm going to clear this up and we can
say cat and then a right angle bracket
and basically what we're doing with this
angle bracket
is telling the system to output the
results into whatever we specify after
it which in this case is going to be the
info.txt
file now if i hit enter it's just going
to it's going to go on to the next line
and i can start to type so i'll just say
hello world enter and then i'm going to
do a control d to basically get out of
that mode okay now if i do cat info.txt
you'll see that hello world has actually
been printed to that file i can also
open it up so let's say open info
that would open it up on my file system
here in my text editor and you can see
it says hello world
all right now we could even use just the
angle bracket like i could do
right angle bracket and info.txt
and now i'll just do hello
and let's do control d
and now we can say cat info dot txt and
you can see that that it basically just
overwrote the hello world with hello
now if i want to append to that and add
a new line or new lines i can say cat
and then the double
angle brackets and then info.txt
and then i'll put in world
and
control d
now let's look at info
and now we have hello on the first line
and then we appended
world on the next line
we can also use the n option if we want
to show line numbers
so there you go shows the line numbers
now what i'm going to do because i want
to add
a bunch of lines to this file i'm going
to open it so let's say open
info txt
open it with my text editor and then i'm
just going to paste in line 1 through
line 21 and i'm going to save that
now in addition to cat if we want to
read the file we can also use the less
command
and what less will do is it'll show us
the content but it'll also allow us to
scroll
so we can basically use the arrows or
page up and down to view the entire file
and then we're done we can just hit q
and it'll basically you know bring us
back so that's less
now if you want to
only see part of the file so a certain
amount of lines from either the top or
bottom we have the head and the tail
commands so for instance if we say head
info
dot txt it shows us the first 10 lines
by default
if you want to specify the line numbers
then whoops we could do head
dash n and then whatever number of lines
let's say five and now you'll see it
only shows me the first five
and then you can basically do the same
thing from the bottom with tail so if i
say tail
and then the name of the file it gives
me the last 10 lines
and i can also specify let's say n and
we'll say 5 from the bottom
info.txt
and then it shows us the last five lines
okay so that's head
head and tail
now i've been using the
the gui text editor but there's
there's also terminal based text editors
there's vim there's nano which is really
simple that's what i would definitely
suggest that you start with and nano is
installed it's pre-installed on on most
linux distributions on mac it's even
available with git bash so i could just
say nano
and then the name of the file
open it up and now i have basically have
a text editor here so if i want to come
down here and just add to this
i could say line 22
line 23. now if i want to
escape out of the this terminal i can go
ahead and do
um
command x i'm sorry control x
and it's going to ask me if i want to
save i'll hit y for yes and then hit
enter and now that should be saved so
now if i do less
info.txt
and scroll down i should see my new line
22 in line 23 and we'll hit q to exit
so it's good to at least know nano
because when you're dealing with servers
or you know headless
operating systems you can't just open up
notepad or whatever it might be on your
your gui so you have to use some kind of
of terminal based editor
now the next command i want to show you
is echo so if we want to
if we want to just
display some text we can just say echo
we'll say echo hello world and it will
just print out hello world but we can
also echo to a file so we can say echo
hello world
and then we can use our angle right
angle bracket and then specify a file
let's say info2.txt
okay so now if i do less
info2.txt
you can see that i have hello world in
there
all right so that's all i want to go
over as far as reading and writing to
files
now if you want to search for specific
lines or patterns inside of a file you
can use the grep command for that all
right so let's go ahead and say grep
and then we want to pass in the search
term here so let's just say
let's use quotes here because i'm going
to use a space so we'll say line 22 so
that's what we want to search for and
then the file name let's say info.txt
and it shows us line 22 okay so it just
finds the text
if we want to
find anything that has just the word
line in it
we could do that
you can also use regular expressions and
patterns so i could do like an asterisk
here that'll also give me all the line
numbers um it's actually really powerful
you can use all all kinds of regular
expressions i mean we don't have a lot
to work with right here but i just want
you to know what that is commonly used
for
all right now we're going to look at the
find command so find is another very
powerful uh command that we're not going
to
you know look at in and out but
basically it finds the locations of
files and directories based on
conditions that we specify
so we're gonna do something here let's
uh let's create another directory
and let's call this files
and then we want to cd into files
and i'm gonna show you how we can create
a hundred files with one command and we
can do that with touch so let's say
touch and the reason i'm doing this is
so that we have something to work with
so let's say touch file and then we'll
say dash
and then inside of curly braces we'll do
0 0 1
and then we can do 2 dots and then 100
and then after the curly braces we'll do
dot txt so what this is going to do is
going to create 100 files
and they're going to be named file dash
001
and txt then file dash 002.txt
all the way up to 100. so let's go ahead
and run that and then let's do an ls
and there we go we created 100 files in
whatever a couple milliseconds
so let's clear that up and now if we
wanted to find specific files we could
do find let's say in the current
directory
by name so dash name and then if we want
to explicitly put a file name like
002.txt
we could do that if we wanted to do
some kind of pattern like let's say fi
file zero
asterisk
or not zero let's do zero zero
which should only give us you know one
zero zero one through zero zero nine
if i do file
one asterisk
that will give us just the one the
file100.txt
okay if we wanted to find
the empty files we could do find
and
instead of name we're going to do
dash empty
and that's going to give me all of them
obviously because they're all empty
let's see what else can we do let's
actually add something to one of these
files so i'll go ahead and just append
let's say hello
world we'll use echo here
and then we'll append that to let's say
file
dash 033
dot txt
so now if i were to search for empty
files now 33 isn't going to show up
now one thing that makes this really
powerful is is you don"
Oi9z5gfIHJs,"[Music]
hey what's going on guys so i've had a
lot of requests to do a crash course on
astro and i've been getting into it
lately and i have to say that i'm really
impressed i think that the simplicity
the flexibility the performance is game
changing when it comes to generating
static websites so in this crash course
we're going to get set up we're going to
build a website using astro but i just
want to talk a little bit about what it
is first and you can go to astro.build
if you want to to to read more about it
so astro works a lot like a static site
generator or an ssg which is a tool
that's used to generate full static html
websites now there's a few reasons to do
this including performance and seo uh
you know over something like a single
page application built with react or
view etc now there are some great static
site generators out there but many of
them are kind of difficult especially
when we're dealing with beginners and in
many cases they're bound to existing
front-end frameworks such as gatsby with
react or gridsome with vue.js with astro
you can use astro components which are
incredibly simple or you can use an
existing framework like react vue or
svelte astro actually has integrations
with these frameworks as well as others
so i mean you could create a site that
uses some react components some view
components some spell i don't know why
you would do that i wouldn't recommend
it but it is possible
so basically you structure your website
with ui components
and the end result is going to be a fast
static html website with very little if
any javascript
now there will be some times where you
do need some front-end javascript to be
loaded
things like dynamic sliders and
carousels etc in this case astro only
loads that one component and the rest of
the site is just static html and this is
called the island architecture so you
can think of the water as your html and
then your javascript as isolated
components or islands and even something
like next js
you can't have that level of per
component optimization without loading
the entire page with javascript
which is what astro is trying to get
away from so we're slowly but surely
moving away from the javascript heavy
websites which is funny because we're
almost going back to the early days of
the web where we had static html and css
however now we have a lot more tools to
to build powerful and more modern
interfaces and i think structuring your
website with ui components and
encapsulating everything is much more
scalable and maintainable than the old
way of you know throwing everything in
multiple html files copying the head
body tags navigation onto every page
having separate javascript files and
style sheets astro is just a really
elegant solution
to give you that fast static html
website
so what i want to do now is show you the
project that we're going to create so
we're going to create this website which
is very similar looking to the astro
website
and right now this is just kind of the
old school
separate html files separate style sheet
you know no components or anything like
that everything's just lumped into one
file which this is very fast it's very
performant but
it's not scalable if you want to add a
blog post you know you have to create a
whole new html file you have to copy the
the head and body tags the the
navigation all that stuff
um with astro we can build this out in a
much more modern way with ui components
and you can either use astro components
like we're going to or you could use
react or view or spell components i'm
going to show you how you can use those
if you do want to all right so basically
we're going to convert this into an
astro website now in the description
i'll have a link to the repo that has
the final astro project but you'll also
see this folder astro website theme
which will have all these html files you
can also find the images here all right
so we will be doing a little bit of
copying and pasting from these files
just to get some of the content and when
i'm working in the theme files i'm going
to be using sublime text so you can see
i have them all open here with all the
html and so on
okay so before we do any of that though
let's get started and actually let me
show you the website real quick so we
have a home page
with a header at the top we have this
hero area or showcase i like to call it
a showcase this will be a reusable
component then we have these cards here
we'll make these into reusable
components with props and then down here
i have this little tab this dynamic tab
component so that will have some
javascript that we'll add
and then uh a footer
then we have our simple about page with
some text we have another card here some
images and then we have our blog which
has the showcase component and then the
excerpts wrapped in cards
and if we click read more it takes us to
the blog page now if this is going to be
a function functioning blog we're going
to use markdown so if you want to create
a new post you're just going to create a
new markdown file in the post folder and
it will automatically get added here
we'll be able to fetch all of our
markdown files
using something called mdx
now you have different options of course
you could use a headless cms like
strappy or sanity.io
or you could reach out to an api
and i'm going to show you how to do that
as well i'm going to show you how we can
fetch some posts from
from a site called jsonplaceholder
alright so i will show you some stuff
that ultimately isn't on this project
so yeah let's go ahead and get started
and if you go to the home page of the
website we're creating here you can see
for npm we're just going to run this
command pnpm yarn
so i'm going to go ahead and use npm
let's open up a terminal and we'll say
npm create
and astro
and we're going to use the latest
version
all right so this is going to ask us a
few questions where do we want to create
our project so what do we want to name
the folder i'm just going to call it
astro
dash website now if you want it in the
current folder you're in just put a
period
but i'm going to call it astro website
and then you have some options for
templates you can have a blog template
portfolio documentation site empty
project i'm going to choose this right
here just the basics which is
recommended
and then would we like to install
dependencies so basically run npm
install let's say yes
and that's going to go ahead and
basically just install astro and then
any any of its dependencies
all right so now it's asking if we want
to initialize a git repository i'm going
to say yes to that
at the end we will deploy to netlify and
we do need a git repository for that
so we can set up typescript if we want
we have the option of relaxed strict
strictness and then i prefer not to use
typescript i'm just going to go ahead
and go with relaxed
all right and that should do it so now
we can clear that up and we're going to
go ahead and cd into
astrowebsite and then from here i'm just
going to open up my text editor which is
vs code
okay so you can see we have all the
files on the side here so i'm just going
to kind of go over these real quick if
you look at package.json all we have is
a dev dependency is astro and then we
have some scripts we have
dev so we can run npm run dev that will
start up the dev server i'll do that in
a second
start will do the same thing if we want
to build out our project basically build
our static html files then we run npm
run build okay and then if we want to
preview our build because what this will
do is it'll create a dist folder just
like you it would with react or anything
else but then we can run preview to
actually run uh the build files all
right so that's the package.json pretty
simple then we just have we have an
astro config file here if you want to
use another framework like react or view
or something you can add it here but
there's also a shortcut basically one a
single command that we can run that will
add it for us and install the
dependencies and i'll get to that
and then we have the source folder which
is where pretty much everything we do is
going to go we have our pages so pages
are just components and again they can
be astro components they can be from
other you know react or view components
and when you create a file in here in
the pages folder it automatically sets
up that route the index is going to be
your home page all right so if you
create let's say an about dot astro and
then you go to your browser and go to
local host or whatever the domain is
slash about then that page is going to
show up now you don't want to have like
your html and head and body tags you
don't want to have to repeat that in all
your pages so that's where layouts come
in so you can basically create a layout
and you can add you know whatever you
want your head tags all that stuff uh in
the layout and then you can use it
within the
page and i'm going to just clear this
out we're going to start fresh and i'll
show you exactly how it works but just
to give you a summary of pages layouts
and then components of course you can
embed those into your pages things like
cards or whatever they might be
all right so let's go ahead own public
is just for any static assets you may
have so let's go ahead and
run the server the dev server so i'm
going to say npm run dev
which runs astro dev
and that should open up on local host
3000 and you're gonna see just a demo
page like this
okay but what i would like to do
is basically just clear everything out
and start from scratch so you know
exactly what's going on because i don't
like
to just have this code here and and
explain it all and this and that i just
want to start fresh so that everything
is clear so first off in components
let's go ahead and delete the card
component
let's go ahead and delete the layout
because the only thing that's really
needed here is the page so here um yeah
let's just clear this whole thing out
and let's just put an h1 in here
and say hello world
so we'll save that
and now we can start to
just learn from scratch about these
astro components which i think are great
they're very simple and powerful so
basically we have our output here which
is a it's actually a super set of html
so we're not working with like jsx or
anything like that
it is dynamic so if i were to go into
this h1
and let's go ahead and add some curly
braces here i can put a javascript
expression in here so for instance let's
say one plus one if i save that that's
going to evaluate that's going to output
two
all right now if you want to add some
javascript it's very very simple we
basically use the kind of like the
markdown front matter syntax so we just
do a triple hyphen and then up here we
can have our javascript so let's say
kant's name we'll create a variable and
we'll just call this astro
and then we'll come down here and let's
replace that with name
and we'll just
replace world if we save that now we get
hello astro now we can also add our
styling in here as well so we can say
style and let's say for h1 we want to
make the color red if i save that and
this this is scoped styling by default
so anything you put in here within a
specific component is only going to
pertain to that component
or in this case i should say our page
but the page is a component later on
when we create a component in this
folder it's going to be formatted the
same way and we have the same
capabilities
now we can also have dynamic attributes
so let's say we have
let's go ahead and create a class down
here we'll just call it purple
and we'll give it a color purple and
then up here
let's say we have a variable and we'll
call this um
i don't know we'll call it uh
style
and we'll set that to
purple
which is the name of that class
and then we can come down
here and let's say class equals now if
you want to add a dynamic attribute it's
just like react if any of you guys are
you know i've used react before so we
basically just set it to curly braces
and then we can put
that variable in there if i save that
now that's going to turn purple okay and
obviously you can have dynamic
attributes
or dynamic values to any attribute it
could be an image source tag or whatever
it may be an href
so
next thing i want to show you are lists
just like with jsx we can create lists
for instance let's uh let's create a
variable up here and we'll call this
users
and let's set that to
some names and i'm using github copilot
i might shut it off if it starts to get
annoying but what we can do is go down
here
and let's say we want to do a ul
and then copilot is going to put this in
for me automatically but basically
it's the same thing that we would do
with react we take the array we call dot
map we're saying for each user i want to
output a list item with the user inside
so let's go ahead and save that and now
you can see the user names printed in
the browser
okay now notice that we don't actually
have to have a wrapper around all these
elements so we could and that we can use
a fragment so you might want to do
something like this
just to kind of make it a little neater
i don't know why auto formats not
working for me but
yes we could do something like that
now
as far as like conditionals we can do
that as well so let's go up here let's
say const we'll say visible and we'll
set that to true
and then let's say we have something
down here that we only want to show if
it's visible so you can see here we can
use the double ampersand we can say if
visible is true then show this so if i
save that it's going to show i am
visible if i change that to false then
it's not going to show it now there
might be cases where you want to show
something else if this value is not true
so in that case we could use a ternary
so we could say visible
then show i am visible else show i am
not visible so now if i put this to
false
and i save that it's going to show this
i am not visible because of our ternary
here
now let's say we want to fetch some data
from a back end so i'll come up here and
let's go
right above
users and we'll say const response and
let's set that to
we'll make a fetch request actually
let's use a weight now we can just do
this we can just using a weight because
there actually is an async that's
wrapped uh wrapped around this so we
don't even have to do a sink away we
don't have to create a function we can
simply use a weight which is really cool
so there's a top level of sync
and let's get this from we'll do https
and i'm going to use jsonplaceholder.com
i'm sorry jasonplaceholder.typeycode.com
users which will fetch a whole bunch of
users we could even put a limit on that
let's say
underscore limits equals 10.
okay and then right here we have users
let's
get rid of this static array and let's
await
on the response and get the json okay
and i'll save that
and of course these are objects so we're
going to want to just come down here
where it says user and we'll do
user.name
okay and it's as simple as that to just
fetch some data and display it on the
page
all right so what i want to do now is
create a layout because if we were to
look at the source code here you can see
we have we do have a doctype and then
there's there's some other stuff there's
some script tags that have to do with
the dev server it actually uses veet
under the hood
but then there's no head tag there's no
body tag no html tags so we need to have
that stuff obviously and
you could put it in every page but that
kind of defeats the purpose of using
astro and you're using something like
this because you don't want to have to
keep repeating yourself so what we can
do is create a layout so we already have
a layouts folder so i'll create a new
file called layout.astro
and again this is just this is an astro
component and it's
we use it the same way as we do pages
and components
now for some reason the exclamation
isn't working for emmett to set up
to set up this html boilerplate but what
i'm going to do
is bring over sublime text where i have
the theme just all the you know the
separate html files and i'm just going
to open up the index html
and i'll just go ahead and grab from the
doctype down to
the um the body tag right here
so and again you can get this in the
github repo it's going to be the folder
called astro website theme that'll just
be the regular html files all right so
in the layout i'm going to paste that in
and then of course we want to have a
closing body tag and a closing html tag
now to actually get our page in here
what we do is we we use something called
a slot
okay so if you use vue.js this might be
familiar but we can just put slot here
and that's basically where we want the
content to output so let's go ahead and
save this actually you know what let's
get rid of this link to the style sheet
because that's we're not doing things
like that
i do have the links to the font we're
going to use we're going to use the
roboto font so we'll leave that in there
but let's save that we don't have to
export anything from here we do have to
import it to whatever page you want to
use it on so let's come to our index
page and let's say import layout from we
want to go up one level into layouts and
then layout.astro
now you do need the dot astro or you're
going to get an error that's something
that i keep i keep forgetting
but let's bring that in and then all we
have to do is wrap our content with it
so where we have this empty fragment
we'll simply put in layout and we'll
save it and now you can see in the title
it says astro crash course because this
layout is now wrapping our content which
is being output in this slot
okay now i'm going to clean this up
because none of this is stuff we need it
was just to kind of show you you know
how to do this stuff so let's clear out
um
yeah i'll just delete the style tags for
now and in here for now we'll just go
back to having
uh having an h1
okay
now
with our components and remember
the layout the page the component these
are all astro components and you can
pass props into these
so our layout as you can see has the
title of astro crash course but you
might want different titles for
different pages of course for seo
reasons um
so what we can do is we can pass in a
prop here so i'll say title
and let's just set that to whatever i'll
just say hello
now obviously that's not going to do
anything because we just passed the prop
in we haven't handled it now where i
want to output that is going to be in
the title
so what we could do is say astro dot
props and then dot title or whatever the
prop you want to access and if i save
that now it says hello
so this is not really recommended what
we should do is come up here and let's
add in our triple hyphen and then we can
go ahead and we can destructure let's
say title and we want to destructure
that from astro dot
props if we save that now
actually we want to replace this with
just title obviously
okay and that works
now what we also should do if you
remember when we set this up we said
that we wanted to use typescript i think
it was like relaxed or something like
that so we can create an interface for
this and this is kind of like prop types
in react so we can say export interface
and say props
and then whatever the props we want to
have so for instance title
and set that to a string all right now
to use this we can come down here and
just say astro props as props
now if you want to assign
a default prop to
title we can do that simply by adding an
equal sign here and then whatever we
want to set it to let's say astro
crash course
okay so now if i save that it's still
going to say hello because we
explicitly passed in hello but if i were
to get rid of this and save now we get
the default
now the reason we have this red line
under this is because of our interface
because we're saying it has to have a
title it's a string but if you want it
to be optional you can simply put
a question mark here
save that and now if we come back over
here we don't have that red line so now
anytime you use the layout and you don't
pass in a title explicitly it's going to
use this astro crash course and it's the
same for not just layouts but any
components that that you use
so now that you know about components
about props i want to start to build our
website now if i go to the
theme
right now i just have all the css in
this one global style sheet which i mean
is fine but
the the modern way to build
websites and interfaces is to to have
everything encapsulated in components so
that's what we want to do now of course
we do have some global
uh global styling
so there's a few ways we could handle
that we could put it like in the layout
so in layout we could have style down
here but i'm actually going to use a
separate css file for that for global
stuff so what we'll do is in source
we're going to create a new folder and
we're going to call that
styles all right and then for images i'm
also going to create in source a new
folder and we'll call that images
and then we might as well bring the
images over so let me grab those
and again i know i've said it a bunch of
times but you can get this astro website
theme in the repo in the description
so we have a few images here let's just
grab these and bring them over to
images
all right and then
let's
go to styles and i'm going to create a
file in here called
global.css and you can also use sas if
you want just right out of the box
now as far as what i want to put in here
i didn't even need this import because i
had the link i had the font link in
in the html
but here i have a couple variables
let's see
what do i want to include in this
um yeah let's grab from the top so we
have our color variables then we have
just our reset we have the body
and then just some basic styles for
links and paragraphs and all that so we
want those and then also the container
anything you're going to want to use in
multiple components like container
button
and then i also want this logo small as
well okay header and all that stuff
those are going to be separate
components so let's just grab that
and let's put that in our global css
okay and then i may have some media
queries down here let's see
so
[Music]
yeah let's just grab these two
immediate queries and
we're gonna paste those in but all we
need we do want the logo small and logos
and then we don't need features because
that's going to be its own
that's going to be its own
component and then h1 and h2 we do want
that footer we don't need that's going
to be its own component
okay
so that's all the global styling so
we'll go ahead and save it and it's not
just going to work so what we need to do
is we're going to import it into
the layout that we want to use it in so
let's go and of course you can have
multiple layouts but we're going to go
into
layout.astro and let's go above
this interface and let's say import and
we just want to import dot dot slash so
we want to go up one level into styles
and then we want our style css
and
i'm sorry global
global css or whatever you want to call
it and there we go and you can see that
that style is being applied
okay so now i think it's time to create
our first component which is going to be
the header actually let me open up the
the theme so we can see it as we move
along so yeah we have the header which
has a logo and then just some simple
navigation
so we'll get started with that
so that's going to be in components
and let's create a new component and
call it header.astro
now after this
i'm going to show you how you can use
like react or view or any other
um
supported framework for your components
as well
but personally if i'm creating just a
website that has some basic
functionality then i'm going to be using
astro components because of as you could
see how just extremely simple you know
no functions with return values and
no hooks or anything like that which
that stuff is great when you need it
it's great for more advanced
functionality but for basic stuff for
static websites i think astro components
are the way to go
but um but let's go ahead and
go to the theme because we're gonna need
the output or the html
and
we're copying a bunch of this html but
we're gonna switch it up to be dynamic
and take in props and stuff like that
but to start with let's just grab this
header tag
so we're going to take that and
let's go ahead and just paste that in so
no changing to class name or anything
like that and i'm not trying to bash
react or any other framework i'm just
trying to show you um you know that
how simple this is and i'm pretty
pretty impressed with it
so now i'm going to save that
and obviously that's not going to work
because we didn't import it now the
header i don't want it to be just in the
index page so you can import your
components into either the a single page
because some things you know obviously
will be on just
individual pages but this i want to be
on every page so i'm going to bring it
into the layout
so let's go up here let's say import
header and we want to bring that in from
dot dot slash components
slash
header and don't forget dot astro
all right and then down here let's see
we're going to put this right above the
slot which is our output for our page
so if i save that
there we go now the reason it doesn't
look right is because we don't have any
of the styling now the styling if we go
to
the global style sheet here and the
theme
um i'm just going to grab the header
styling i i commented everything nice
and neat so we can just grab it and
we're going to put it into the component
so that everything is encapsulated
inside of that
so let's grab that and
then in our header component we can come
down here and just add in style
and paste that in and save
and now we have the header okay the logo
isn't going to work just because of how
this is right now but what we can do is
just bring in the logo which is
logo.svg
so we can just go up here and let's add
in
our triple hyphen and let's import let's
say
logo
from
and that's going to be dot dot slash
images slash
logo dot svg
and then what we can do is just on this
image tag right here just change the
source
to be dynamic and add in the logo
variable
and there we go so now it shows up
is this uh
yeah that was
that was zoomed in a little bit
all right so we have our logo we have
our navigation now ultimately the
navigation
is gonna be
so about for instance you could leave
the html when we create a page like the
about page you can do about.html
or you can do without it which is what i
want i'm going to get rid of that
so
index is just going to be slash and then
for blog that will just be slash blog
and obviously these two aren't going to
work right now
but we'll we'll get to those in a little
bit and then the logo we have a link
around that which we'll just have go to
the home page
now the the header components pretty
simple so we can just leave it like that
the next thing i want to do is the
showcase component which is this right
here now before we do that with
astro with the natural component i want
to show you how you could use another
framework if you wanted to for your
components so let's go to i'm just going
to search for astro
integrations and let's see
so we have
tailwind
[Music]
uh wait is this the page i want let me
just make this bigger
no i want to i want to go to the docs
and then
see where is it right here integrations
all right so these are the official
integrations there's ui frameworks
uh we have react we have solid js views
felt preact and lit and then you have
ssr adapters
and then others as well so let's say
that you want to use react so we'll
click on that
basically there's two ways you can do
this you can run just a single command
and it will automatically install the
dependencies that you need and set up
the config file or you could do it
yourself
so for instance
if we want to use npm we can just say
npm run astro add react
and that will again install the
dependencies and
set up the config so let's let's try
that so i'm going to come over here and
let's stop the server for a second and
then we'll do npm run
astro and we want to do add
and i'm going to do react of course you
could use any framework you want
okay so it's going to just ask us
to continue yes do we want to
so what it's going to do is it's going
to install react and react dom of course
and then it has the integration which is
astro js
slash react so we want to say yes
and you could just you could run npm
install
those yourself if you wanted to
so now let's run the dev server
and we're not going to see any change or
anything like that but if we come over
to package.json
now you'll notice we have three new
dependencies we have the astro react
react and react dom and then where it
gets added is in the astro.config
we bring in the integration and then we
add it to this define config
so this function here takes in an object
with an integrations array and you can
pass in react as a function
okay now if you wanted to use vue.js you
would install the dependencies then you
would bring it in here and you could add
it here like you could just go like that
and then you could use react and view in
the same project i i don't know why you
do that i definitely wouldn't recommend
it but you could do that if you wanted
to
so now that we have that set up let's
create our showcase component and
ultimately this is gonna we're gonna
make this an astro component but just to
give you an example let's say new file
in components and let's say showcase
dot jsx
okay
and then in here we'll do let's create a
react component
and i'm just gonna have it div with the
you know text of showcase so this is a
react component now if we come into
uh let's go to our index page because
that's where ultimately i want to put
this and we'll say import showcase
from
and let's go up one level into
components and then slash showcase but
we're gonna do showcase jsx
okay and then we'll come down here and
let's go above the h1
and let's add in the showcase
component and there we go so it's
outputting showcase
so now i'm using react
now if i wanted to use like let's say
the use state hook i could do that i
could say import
use state
from react and let's go up here and
let's say
i will say const
and if you don't know react don't worry
about it you just
skip this part but let's say name
set name set that to
we'll say brad
and then we should be able to down here
we'll say hello
and we should be able to access that
name
and if i save that we get hello brad
all right so i'm not going to use react
but i just wanted to show you how easy
it is to uh to to use another framework
with astro
so what i'm going to do is actually
rename
this from showcase jsx to showcase
astro
and for now i'll just put in an h1
and then of course in the index page we
have to change this to astro
and then i'm also going to go into the
config and since i'm not using react i'm
going to delete the import
and i believe we can just yeah delete
this whole object here
because i don't want to keep that and
i'll uninstall the three dependencies
later
all right so
now
let's work on the showcase
so the showcase is going to be this
right here and i wanted to take in the
title as a prop this right here
and then or the heading i guess
and then also the text so that we can
use this in other places like the blog
like this right here um and then the
extra stuff down here like the image
i'll probably just have a boolean to
enable that or not
and you can try different things if you
want but let's go ahead and get started
with that so showcase
i'm going to grab
let's bring over sublime text here and
we want to grab a couple things so in
the index page
i'm going to grab the showcase section i
just i used an html section tag
and we'll grab that and put that here
and then we want the style as well
so for that
grab the showcase class and then all
this stuff here as well
okay and then we'll put that right in
here let's save it
now the image we need to bring those in
uh you'll see that the reason i have two
is because one is for small screens so
like that and then if it gets bigger
then it's a it shows
more frameworks or whatever
so
let's import those
up at the top
oops uh why didn't that autocomplete
okay so let's import
logos
and it's going to be from dot dot slash
images slash and then we want
it's called framework
dash
logos.png
and then i'm going to copy that down and
this one is called logos dash
small
and we're going to give this a variable
of logos
small
okay and then what we'll do is replace
this right here this source
with
logos
and then we'll replace this one
with logos
small and let's check that out
okay good if i make that bigger
because remember we have that media
query in the global css
that will load the small one on small
screens
now as far as the content here
this heading
and this text"
qNiUlml9MDk,"[Music]
what's going on guys in this video we're
going to create a qr code generator with
vanilla javascript now what made me
think of this project is the other day i
went out to breakfast with my family and
at the restaurant and i've seen this at
many restaurants they have a qr code for
you to scan and then it opens up their
menu and you can order basically you can
pre-order so that
they have it ready for you when you get
up there in the line so i i thought why
not create
something to allow people to make these
these qr codes and i created this qr
code generator where we can enter a url
this might be like like i said like a
restaurant menu or something we can
choose the size and we can generate the
code so now if you scan this with your
phone it's going to open up that url we
can also save it as an image you can
print it out whatever so very very
simple it took me about four or five
hours to to create this and deploy it
it's at qrcodes.tech right now
so
before we get into building this i just
want to talk a little bit about side
projects because
this is this is a good example of a very
simple side project that
could bring you some monthly recurring
revenue you know if you were to
add some do some seo and then add some
google adsense on the page you might be
able to make a few bucks per month i
mean it's definitely not going to be a
gold mine there are a lot of other qr
code generators so it's not like an
innovative idea but it is something that
you could put up you know even if it's
just to put on your your portfolio or
resume i would encourage you to do small
projects like this you know not every
project has to be this big endeavor that
takes up all your time
so just something to think about and
that's that's even if your your goal is
to become a developer at a big tech
company it's nice to have these little
side projects
all right so as far as how we're going
to build this like i said we're using
vanilla javascript if you want to use a
framework you could but
i'm not really going to scale this up
and you know i'm not going to add any
more features to it so
why even use a framework it's only about
70 lines of code or so
all right and we're going to use
tailwind for the for the whole ui for
the design so we won't be writing any
css but we will be using tailwind
classes
so this is a library that i found qr
code js which is very simple all you
have to do is is create this qr code
object add the url that you want to open
add the the size the color and it it
generates it puts it on the page so
initially i was just going to show you
how to do that but i figured
it's so easy i wanted to do something a
little more in depth so i went ahead and
created an application where you can put
in the url in a form as well as the size
and generate it and also download it as
an image and then i have the repo right
here i'll have the link to that in the
description if you want to grab the the
images or anything but yeah so i figured
it'd be a nice little project so that's
it let's go ahead and get started
alright guys so i have vs code open and
all i've done is created an index html
which is completely empty and then in my
js folder i have a script js which is
also completely empty and then an img
folder with my images and you can get
those from the um from the repo in fact
you don't need the screenshot i mean you
can keep it if you want but you don't
need it
all right so to get started here let's
go into our index.html and create an
html5 boilerplate and then for the title
we're going to say qr code
generator
and then we want to link our our script
that's in the js folder so let's go
ahead and say script source
and we want to bring in js script js and
since i put it at the top i'm going to
use defer
all right and then in the body just for
now i'll put an h1
save that and you can just open up the
index html on your file system or if
you're using vs code you can use an
extension called live server which is
what i'm using so i'm just going to say
open with live server
and that will open it on port 5500 by
default all right and i'm just going to
leave the finished product here just for
just for reference
as far as the ui
we don't have a a style sheet here
because we're going to be using tailwind
and we're just going to use tail in
classes so if you go to
tailwindcss.com and then get started
there's a few ways to get started if you
want to use the cli you can i'm going to
just use the cdn just to keep it simple
so i'm going to grab that script tag
right here
and let's put it right above our script
tag
and then i do want to use a different
font i'm going to be using the poppins
font
so to do that without having to you know
add some css and say body and then font
family we can use the config object so
i'm going to grab the script tag that
has this tailwind config object and
we'll put this right under that
and then we're just going to get rid of
this colors here and let's say font
family which is going to be an object
and then this is for the sans font so we
want to say sans
and whoops that should be in
in the damn object
so let's say sans and that's going to be
an array with the fonts we want to add
so let's say poppins
and sans dash serif all right
so we'll save that
and now we should have the poppins font
all right so the next thing we need is
the qr code library so this right here
qr code js this allows us to create a qr
code object now
on in the documentation here whether
it's this page or the the github they
don't really
show you how to add it so there's no
cdn so what i did is i went to
cdnjs.com and searched for qr code and
it came up right here so i'm just gonna
right here it says copy script tag i'm
just gonna click on that
and then i'll go ahead and put this
right here
and we'll paste that in and now we
should be able to use that library
all right so that should be it for like
the head and
anything we have to any dependencies
that we have to include so now we can
start to work on the layout which isn't
going to be too bad we have just a
header here or a nav bar if you want to
call it that there's no navigation but
you know just the header and then
this is going to be a flexbox
and this will be the first flex item the
text and the form and this will be the
second flex item which is just the image
and then once we generate a code
we're gonna we're gonna add the spinner
functionality with javascript and then
the code will be shown down here with
the button to save it as an image all
right so let's get started with the
with the header so i'm going to go right
into the body here let's get rid of that
and let's say header
and actually
trying to think if i should add the
classes as we go because there is quite
a bit any of you guys that have used
tailwind you know that there are a lot
of classes
so and this is not a tailwind course i
have a full 12-hour uh udemy course on
tailwind i'll put the link to that in
the description i also have a crash
course and plenty of other tailwind
videos but i will explain kind of what
what these do
as i go along so let's say bg red 500
that's going to be the background color
of this header and then i want padding
so i'm going to do p dash 4 that's
padding all around and then margin
bottom 10
okay and then in the header i want a
container because i don't want it you
know the
i don't want this to be all the way over
here you know when we make the screen
really big or the browser really big so
let's add a class of max with max w
we'll do 5xl and then let's do margin
auto to put it in the middle
and then for the text we're going to
have a class of text
excel
extra large we want to bold the text so
we'll say font bold
and then i also want the text to be
white so text white and then the text
itself will just say qr code
generator all right so let's save that
and there we go now we have our header
so next we want under the header i'm
going to add a main tag and then we want
our flexbox
so when we when we create responsive
layouts with tailwind it's mobile first
and we can use classes like if i say md
and then i want to use the class of flex
row like that what will happen is this
class will only apply when the screen or
the browser is the medium
whatever that medium size is and then up
okay so medium screens and up would get
this class so keep that in mind because
we want to do this we want to make this
responsive so what i'm going to do is
add a class of flex which turns it to a
flexbox
i'm going to say flex dash call dash
reverse because by default or i should
say on small screens i want it to be a
column i also want it to be reversed
because i want the image to be on top
right so if we look at that the image is
on top
now if i don't do reverse if i just do
flex call then the image is going to be
on bottom when it's a column
okay so let's say flex call reverse
and let's come back over here i want to
align the items to the center so we can
use align center
justify content to center so justify
center
and then margin auto
and then on medium screens
so on medium screens i are in up i want
to use max
let's say max dash with dash 4 xl
and then also on medium screens and up i
want this to be a flex row and go
horizontal okay so that's our flexbox
and then what we'll do is we'll have
these two divs
let's just say div one for now and then
another div and we'll say div
two
and if we save that you can see it's a
column but once i hit
once i hit that medium screen it turns
into a row and they're side by side so
that's what i want
now as far as the width for both of
these
if we look at medium screens and up i
want this to be two-thirds and this to
be one-third
so what we'll do is add let's say class
and it's going to be width full to begin
with meaning it takes up the entire
thing but then on medium screens we want
the width to be one
not one half we want the width to be two
thirds this is the first div i'm also
going to add some margin on the right so
let's say margin right 24. and then for
this div
say class we want it to be with full to
begin with so mobile first and then
medium screens we want it to be with
dash one third
okay i think that's all i want here i
also want to add the class of self
center which will do align self
and set that to center
okay
so yeah there we go
and again
you go down under medium screens and
they're going to stack
so now the second div is going to be an
image so we might as well just add that
real quick so i'll say image the source
is going to be image slash qr code
and then let's add a couple classes here
so basically the image i want it to take
up
half
uh let's just see what it looks like
if i save
so i mean
that looks okay but
obviously i want this to be a little
smaller
so what we'll do is we'll set the width
to one half
okay so that's two to begin with
and then
let's move it to the middle so we'll say
margin auto and then on
medium screens
and up we can then set it back to false
so with fall
and let's also add some margin bottom
i'm going to put that
right here so mb10
yeah
all right good so if i make this bigger
yeah i think that's good
that takes care of the image now for the
the text in the form that's going to go
in this first div
first flex item here
so the first thing we want is the
heading
so let's do an h1 and let's say text
dash 3xl
and let's do font dash bold
and margin we'll do margin bottom five
and then on medium screens we'll make
the text a little bigger so let's say
text dash
we'll do 4xl
okay and then that's going to just say
qr code
generator
so we'll save that
okay
so underneath the heading we're going to
have a couple paragraphs so let's go
under that and this paragraph i'm just
going to give it a class of mb4 to push
the other one down and then i'll just
copy the text and paste that in you guys
can just
type that out
and then there'll be another paragraph
under it and i'm just going to grab that
text real quick
okay we'll save that
good
now i do want to have some padding why
am i why don't i have any padding on
this
let's see yeah
so on this div right here
the flex div let's add
let's say p dab oops
p dash 10
there we go
okay so back down here we want to go
under this this last paragraph and now
we're going to add the form so let's say
form i'm going to give it an id of
generate
we'll say generate dash form
and then as far as
classes go i'm just going to do a margin
top four
and we don't need an action attribute we
can get rid of that
okay so now inside the form here we're
going to have a text input for the url
we'll actually we'll use the url type
but then we have a bunch of classes so
we're going to do with full
let's say border dash 2
and the border color we'll do border
dash gray 200
let's make it rounded
and padding 3
and then for the text we'll do text gray
text grade doc
and let's say margin right 2
and then in the focus state i want to
remove the outline so i'm going to say
focus colon outline
none
and then let's say margin bottom five
okay so that's the classes
oops let's save that
all right and then i'm just going to add
on to that
in id because we need to access this
from the javascript so for the id let's
say url and then i'm also going to
change the type
to url as well
and then we'll add a placeholder as well
so let's say placeholder will say enter
enter a url
all right so there's our url input next
we want to select with the size
so still within the form tag let's say
select
and i'm going to add some classes
actually we can probably just copy
yeah we'll just copy all these classes
and we don't need a name
the id is going to be size
let's say class equals and then we'll
paste in
all those classes except for the mb5 we
don't need that
all right now with within
the select we want to have our options
so let's say option
the value for this is going to be 100
and then for the text we'll say 100 by
100
and then we'll copy this down a bunch
so we want 200
2 and then 3. actually i'm just going to
paste this in
okay so we just have 100 to 700 if you
want to change these up you can and i'm
going to select 300 by default
then we just need the button so
underneath the select let's say button
and let's do a bg dash gray 600
let's do
rounded and the width we'll do full
text color will be white and let's do
padding on the y-axis 3
and padding on the x-axis 4
top five and then on the hover state
i'm going to change the bg to black
okay and then let's just add in here a
type
of submit
and then we'll say generate
qr code
all right cool
so
yeah that should really do it as far as
the
the top section
yep so that looks good
now down below it is where the the qr
code is going to generate
so we want to keep that within the main
tag but we want to go underneath that
flex div that we created so i'll just
say like this is the where the generated
uh qr code will go
okay so
this div is going to have a container so
let's do max with 5xl
and margin i'm going to do margin auto
let's make it a flexbox but we're going
to make it a flex column
and then we want a text
center
align center
justify
center and margin top 20.
now there's going to be two things that
go in here there's going to be our
spinner
and it's going to be
we'll say qr code output
okay now the qr code output is simple
it's just going to be an id of qr code
i'm also going to give it a class of m
auto to center it
and then that's basically the
placeholder for the generated code
now the spinner is going to be an svg
and it's quite a bit so if you go to the
the repo link in the description
you can just copy the spinner div that
has the svg in it so i'll just paste
that in let's just uh
space this out a bit here so yeah i'll
paste that in
and basically we just have oops i don't
want two of these we basically just have
a div with the id of spinner and then
inside that is the svg and if you want
to change like the the color and stuff
like that you can change up these
attributes if you want and then we also
have just a span with the class of
sr only that says loading and
that's it so let's save that we should
see the spinner
now we are gonna in our javascript work
we can set this to hide the spinner
um but
you might get a little flicker so what
i'm going to do is just add in some
style tags up here
let's go right above the title just to
hide that spinner by default
so we'll just grab it by the id and say
spinner
and then display
none
all right so that way it doesn't show it
doesn't even show it doesn't flicker or
anything
all right so now we're ready for the
javascript so let's jump into our script
js and first thing i'm going to do is
just bring in a couple things we want to
bring in the form so i'll just say
document.getelementbyd
and i believe it's generate
dash form is the id
and then we're also going to bring in
the qr code div
which is where we want to embed it so qr
code and then let's just
variable here i'll call it qr
all right now
on the form we want to add an event
listener so we want to listen for a
submit and when that happens we'll say
let's say on
generate
submit for the function
and then we'll go ahead and create that
up here i'm going to use arrow functions
but if you want to use regular functions
that's absolutely fine
okay we want to prevent the default
behavior because it's a form submission
and then let's get the form inputs so
the url we'll say document.getelementbyd
and that's going to be the id of url
since it's an input we need to get the
value of it not just the
not just the element
all right and then we'll copy that down
and we want to get the size
which is the select box
that has an id of size as well and then
let's just do a console logs
some reason that isn't working say
console.log
of
url and size
all right so let's save that
if i come down here
and since i'm using the tailwind cdn it
does give us this warning but you can
just ignore that so i'm going to put a
url in here with the size and you can
see that it's logging that
good
so next thing
um
i do want
let's just do a little bit of validation
here we're going to say if url
is equal to an empty string
then i'm just going to show an alert i
might add a custom alert box later on
but for now we'll just do this
we'll say please
enter a url
okay and then else if they do enter a
url
i do want to show the spinner so what
i'm going to do is right under the
on generate form or on generate submit
let's say const show
spinner
okay and all we want to do here is
select the spinner so we'll say document
get element by d
spinner and we want to set the style of
display
to block okay so that's going to show it
and then what we'll do is copy this
down and let's
change the name of this to hide spinner
and all we're going to do is change that
to
none
okay and i know we put the css in but
i'm just going to call hide spinner
to begin with
all right and then down here up here
in the else this is where we want to
show the spinner
all right so if i save that and we come
over here
and i click
well first of all let's check the
validation that shouldn't let me submit
if i do put something in and click now
we have the spinner showing
okay now
i and again the spinner is completely
optional
i think it's just a nice ui effect
but i'm going to
show it for one second so i want to add
a set timeout here
so set timeout takes in a function so
i'm going to add an arrow function
and the second
argument that's passed in to set timeout
is the number of milliseconds you want
to wait i'm going to say 1000 which is
one second
okay and then i want to hide the spinner
so let's save that
and if we try to submit this again
oops
you'll see it shows the spinner for
for one second
all right so now what we want to do is
generate the qr code and that's where
this library comes in so qr
code js
and all we have to do is create this
object using new qr code takes in
wherever you want to put it so the the
element
and then it takes in an object with this
information here the text which is the
url you want to open the width and
height you can also do color dark color
light but we're not going to do that in
this particular project if you want to
add like a color input and do that you
could
so let's create a separate function for
this
we'll call it generate
qr code and
that's going to actually take in a url
and a size
and then we want to create a variable
we'll say qr code
and set that to
new
qr code that's how it is right
let's see yep all right and then we're
going to pass in
the id that we want to use which is qr
code and then an object with a text
value and that's going to be the url
that's going to come from the form but
it's going to be passed into this
function
as an argument
and then we can do a width which is
going to be the size
right and then the height which is also
going to be the size
okay and that's all we need here so
let's save that
and then let's see we want to run this
function
right after we show the spinner
um
yeah so
[Music]
i'm sorry right after we hide the
spinner so we hide the spinner and then
we call generate
qr code and we want to pass in
the url in size
which comes from here comes from the
form
so let's try it out we'll save it
and let's go ahead and put in a url
okay the spinner shows for a second and
then it generates the code if we want to
do like a hundred
okay so we have an issue
right now which is it's showing it's
gonna just keep that there so we need to
clear
the ui or clear the code
um
you know before we do anything so
let's uh
let's create a function
we'll just go right here let's say const
and i'm going to call this clear ui
because we're also going to have a save
button that we need to clear as well
but for now let's just set qr
which we brought in up here
so qr code we're going to set let's say
dot inner
html and set it to nothing
and then where i'm going to call this is
in the right here on generate submit i
want to do this before anything so clear
ui
let's try it again
okay so we get the code now if i want to
do another one let's say a hundred
clears the ui first and then generates
the qr code
okay so we have that working now the
last thing we want to do is the button
so the button i didn't add to the html
because we're going to create it from
the javascript using create element it's
actually a link not a button but let's
go down
here and we're going to create a new
function here let's call it create
save btn
and we're going to pass in save url okay
now
let me actually let me just finish this
first
all right so i'm just going to show you
real quick
if i
generate a code
and we open up
our dev tools and i go to elements i
just want to show you if we examine this
we have the canvas element and then we
have the image element here which has a
source
of this this data
image slash png and it's just it's a lot
but
that that's the url that we want to get
okay so
when we we're going to get the url up
above but we're going to pass it into
this function
and basically we want to make that the
href value of this link that we're
creating
and that will allow us to click the
button and download it as an image now
we could right click and say save image
as if you i mean you could just have a
message that says that right click save
image as but i think it's a little more
convenient to just have a button to
click to download all right so the url
is going to get passed into this
now we want to create the link so i'm
going to create a variable here called
link
and we're going to set that to
document dot and then create
element and the element we want to
create is an a tag a link
okay then i'm going to add on to that
link in id
we'll just give it an id of save dash
link
okay i want to add on to that
some classes because i want it to be
styled so let's say class list and then
we can just add in a bunch of classes
here so i'll say bg dash
red dash
500 so same as the header
on hover let's do bg dash red dash 700
and we'll do
text dash white
font dash bold
and padding on the y-axis too
make it rounded
and we'll do a width of let's say
one-third
wounded no rounded
so width of one-third
and then margin auto
and my
dash
five all right so those are the classes
that i want to add
and then like i said the href
is going to be the
save url
so yeah we'll do save url
and then link dot
download we're going to set that to qr
code
and then the inner html so link dot
inner html
uh we'll do save image
all right and then finally we want to
put it into the dom so document dot get
element by d
i'm gonna put it within the actually did
i add a class of generated
i didn't so this div that wraps around
the spinner and the qr code output
i'm going to add
let's do an id actually we'll say id
generated
okay so that way we can come down here
say get element by d
generated
and then we want to append
child
and we want to append that link
all right
so right now nothing's going to happen
because we've just created the function
to create the button
where we want to actually call this
function is up here
all right now
just to kind of quickly go over this
when we submit the form we get the url
and the size check for the url if it's
there we show the spinner we hide the
spinner after after one second
we call generate qr code which then puts
the qr code on the screen now after that
we want to output the button but there's
there's a little trick to this because
the url to the image that we need to
pass into the create save
you know to this right here create save
button it's not going to be available to
us right away so what we can do to get
around that is just do another set
timeout
and that's going to take in a function
and the second argument is the number of
milliseconds that we want to take and
we'll just say 50. so
it'll be really quick
and then
that image should be available to us so
what we'll do is create a variable let's
call it save url
and we want to
from the qr element which is the
qr code id element where the code is
actually output
we want to run query selector on that
because we want the image that's inside
of it and we want the address to that
image or the source okay then we can
finally create the save button
and then we can pass in the save url
all right so let's say let's go ahead
and save that
now we are going to have one more issue
i'll show you that in a second but let's
go ahead and just click a url choose a
size generate
now we can see the button and if we
click it it downloads the image
okay now if i
want to do something else like let's say
google
say 400 and i generate
so it generates and we get the button
but the old button is still there
so we have to clear that out that's
something that
you when you're using vanilla javascript
you really have to be aware of you know
what what's on the screen because you
have to manually take care of that and
remove it where when you're using
frameworks the framework does a lot of
that for you or gives you a lot of
helpers for you to do that stuff
but all we have to do is go into clear
ui
right we already have the function that
runs and it clears out the qr code
itself now we just want to do the button
so let's say const save
btn and we want to get it with
document.getelementbyd
and remember we gave it an id right here
of save link
maybe we should call this save save link
say save button whatever
but we want to get it save dash link
and then we'll just check for it so
we'll say if
save link
then let's go ahead and um
we'll say save link and then we'll call
the remove method we'll just remove it
from the dom completely
all right so now let's try it again
get our qr code we get the image
if i do another one
let's do 600 generate
okay so now we only have one button
if i click that that should work
all right because it clears the ui it
gets rid of the old qr code and it gets
rid of the button
right here and then it proceeds to to do
everything else all right guys so that's
it and obviously to test this out just
scan it with your phone uh so if you
open up the camera app and scan it you
should be able to open it in a browser
and if you print this out on paper or
you download it as an image you should
be able to do the same thing
all right so i mean
it's a very simple project but i think
it is useful and i want you to just keep
in mind what i said at the beginning of
this tutorial about creating your own
side projects because i i think it can
be beneficial for many different reasons
alright so hope you enjoyed this and
i'll see you in the next one"
MMxbP8ME2Ag,"[Music]
hey what's going on guys so google
recently announced its new successor to
c plus plus called carbon and this is a
language that is experimental so it's
not like you're going to go out tomorrow
and get a job writing carbon but i i've
been looking into it for the past few
days and i figured why not make a crash
course just for fun for people that like
to learn new stuff like myself so what
we're going to do is talk a little bit
about it and i'm going to show you how
to get set up because it's not
completely clear in the docs and then
we're going to look at some basic syntax
from arrays and tuples to functions and
classes and all that good stuff and even
if you've never written a line of c plus
plus that's absolutely fine the syntax
at least on a basic level is is pretty
simple so if you know any language at
all then
most of the stuff will be pretty easy
for you to understand um because we're
not really going to get in
deep with this um so and i've seen a few
other videos on youtube fire ship has a
really good one talking you know it's
basically a summary of carbon and and
what the plan for it is and so on and
then you have a lot of click baity stuff
articles and videos talking about how
it's gonna how it might kill c plus plus
and you're always gonna have that type
of stuff um on the internet but what i
want to do is just take an objective
look at it i'm not praising it i'm not
bashing it i'm not endorsing it i just
want to
just teach it or what we know so far of
it
all right so it is
an experimental successor to c plus plus
and a lot of people might say well what
what about rust rust is you know can be
used for a lot of the same stuff that c
plus plus is used for and while that's
true
carbon is actually it actually has a
bi-directional interoperability so you
can write c plus plus and uc plus plus
libraries within carbon and vice versa
uh it says right here interoperate with
your existing c plus plus code from
inheritance to templates uh it's fast
and scalable i'll go over some of the
the plans and stuff for it in a minute
but down here you can read i've already
read all this but you can read why
they're doing this and i'll just kind of
summarize this for you so there has been
some precedence for this dynamic you
have javascript to typescript java to
kotlin objective c to swift and now
google is trying to do that same type of
thing with c plus plus to carbon now
will it succeed i have no idea there's
there's been other languages that have
tried to do the same thing from what i
can see in the c plus community there
does seem to be quite a bit of
resistance and pushback but that's to be
expected when you have developers that
have been working with c plus for years
or decades
a lot of them don't like change
especially
if they don't see enough reason for it
and if you read more on this page they
do say that it's relatively easy to work
with and migrate large c plus plus code
bases
and i think that's a big reason why rust
isn't a direct successor since carbon
can interoperate with c plus plus
they're saying that's possible
so some of the reasons why they feel c
plus needs improvement in the modern age
i guess is because it's racked up what
they call technical debt over the years
and is struggling to improve and meet
certain developer needs and
they say that incrementally improving c
plus itself is extremely tedious and
difficult and google stresses that the
best way to address these problems is to
try and avoid inheriting the legacy of c
or c plus plus directly and instead
create a new language with some solid
foundations like a modern generic system
modular code organization and a
consistent and simple syntax
and if we look at some of the language
goals uh we're designing carbon to
support the performance critical
software of course you know it has to
match the performance of c plus plus
or it's not going anywhere software and
language evolution code that is easy to
read understand and write
practical safety and testing mechanisms
fast and scalable development modern os
platforms
interoperability and within migration
from existing c plus code so
there are some some specific things that
they're trying to
improve upon one of which is memory
safety
so c plus plus is not a memory safe or
it's not it's not a managed language
like c sharp and javascript and ruby and
most of the the languages we work with
you have to manage your own memory
and there can be issues with bugs and
wish with vulnerabilities so this is the
stuff that they're that they're doing to
combat that and you can look more into
this and then also generics they provide
a modern generic system c plus uses
something called templates you can still
use c plus templates but then you also
have the ability to use generics as well
so those are just some of the things
that um that are being added here and
then there are some code samples so if
you look at this one right here this is
straight c plus plus code it's just to i
guess uh print the area of a circle and
then you have your carbon code here
which does the same thing and you can
see it is very similar but it does
to me at least look a little bit cleaner
and um
and simpler and then down here you'll
see that c plus plus code can be used
within carbon
and you can also
call
carbon from c
plus as well and you can use any c plus
plus libraries which is nice
now as far as your opinion on this if
you think it's a good idea or not i mean
that's that's really it's just it that's
up to you this video isn't to
bash or to praise it i just want to look
at it objectively so to get started
there's a couple things you can do one
you can because there's no there's no
compiler yet or there's no tool chain
yet so you have to use google's build
tool called bazel along with llvm which
stands for low-level virtual machine so
you can install those with homebrew if
you don't have access to homebrew you
can simply go to
compiler-explorer.com and just choose
carbon and you can actually write and
execute carbon code here which is
probably what i'll do i am going to show
you how to set set this stuff up with
homebrew but when we get into the actual
syntax i'll probably use the compiler
explorer now i do have another link in
the description to this gist that i
created which basically has everything
we're going to look at from getting set
up
using homebrew to
packages the main function
the print command
primitive data types
naming conventions variables basically
all the stuff that i have in most of my
programming language crash courses so
that's why i called it a crash course
because we're gonna we're gonna get into
that that syntax but let's start off
just in case you do want to install this
stuff with home brew
if not then you can just kind of skip
this part but i'm going to open up my
terminal
okay and then i already have homebrew
installed i believe i i
already have this stuff installed as
well but i'll just go through and type
the commands anyway so we want to brew
install and the package is called
basilisk so b-a-z-e-l
and i'm probably just going to get a
message that says it's already installed
uh looks like it can update yeah so
it's already installed and up to date
all right and then you're just going to
want to install low-level virtual
machines so brew install
llvm
again i think yeah i already have this
installed and it that'll probably take
two or three minutes if uh if you don't
already have it installed so once you
get those two things set up you just
want to add this to your path
so we can just copy that and again if
you're on windows or something just
ignore this this this whole part of the
tutorial
so we're going to just type that in
and then we want to clone the repo so
right here we're just going to run git
clone
so let's do that
actually is this where i want to put
this yeah it's um or my dev folder so
what this will do is it'll it'll clone
it into a folder called carbon lang so
now i can cd into carbon lang and if i
do an ls you're just going to see
everything that is in this repository
okay and
basically everything that i've learned
so far has been has been in this repo in
a couple articles too but uh you have
docs and then you have this explorer
folder and if you go into test data
you can see examples for just about
everything functions generics
if else
pointers
all the stuff we're going to talk about
i basically learned from from these
examples here all right and if we look
at
let's see
if we look at in the repo we go down
here to get started where is it
actually want to go to the
yeah if we go right here down to get
started
this is the stuff we just did and then
it's telling us to run the explorer and
to run one of the files in that test
data folder but what i want to do is
just create a separate
file to
to work in so right here we can create a
directory i just called it sandbox so
we'll go ahead and say make
directory sandbox
and then we'll cd into sandbox and then
we'll create a carbon file so let's say
touch and we'll say test dot
carbon
and then i'm going to open up
vs code in the home folder here
okay and then we should be able to run
the explorer
so let me just
open this carbon file up
now what i'm going to do
here don't worry about it i'll explain
it all in a second i just want to see if
we can get this running and you can copy
this too so we're going to say package
sandbox
api
and then we're going to create our main
function
so function main and that's going to be
a 32-bit integer so i32 and i'll explain
all this
in a minute and then let's just return
zero we'll do a print
in here as well and just say
hello world
all right so i'm going to save this and
then i'm going to run this if we look
here we can say bazel run and then
explorer and then the name of the file
so i'll just copy that
and i'm already in sandbox so if we just
run that
the first run is probably going to take
a little bit but after that it'll be you
know instant all right yeah so that took
about i don't know a minute and a half
or so and you can see we have build six
completed successfully and we're
printing out hello world and the result
is zero because i returned a zero from
my code
okay as you can see here now
if you followed along with this and all
this works you can use this for the rest
of the tutorial if you want
as far as i know there's no carbon
highlighting
uh there is this one here but it doesn't
work i installed it i tried it out and
uh
it well there is downloads there's no
ratings yeah i don't think this works
and then i couldn't find any other ones
at least for now
and i don't really like writing code if
there's no highlighting so instead of
using this and instead of having to run
you know and if you run this again it
should be instant but instead of having
to do that i'm just going to use the
compiler explorer all right so yeah i'm
just going to go ahead and close that up
and
we can close that up and we can just run
it in here
so
let's uh let's see i want to be able to
see
my output
so let's click on this right here
and yeah so this will show us our output
basically this shows you exactly what i
just saw in the in the terminal window
so let's just clear this up i'm going to
get rid of everything and we don't have
to like click run or anything it's just
instant and of course this is not going
to compile because we have nothing
written here now i want to see if i can
make this yeah we can make this a little
bigger
and now we can get started on learning
the syntax
all right so the first thing we need to
do is
create a package name so a package is a
group of libraries in carbon and it's a
standard unit for distribution the
package name also serves as the root
name space for all name paths in its
libraries so we do have to add a package
here and we can call this whatever we
want i'm just going to call it sandbox
now in addition to that
let's see so each library must have
exactly one api file this includes
declarations for all public names of the
library definitions for those
declarations must be in some file in the
library either the api file or impl file
so in order for this to work we have to
add on to this
we have to add on to this either impl or
api so we're going to say api and we do
need semicolons to terminate our
statements
all right now
if you've ever used c plus or even like
java you have a main function and that's
basically your entry point so if we look
at the gist that i created that's the
next part is the main function
so let's create that so that we can
actually compile our code now to create
a function
we don't use the function keyword we use
fn okay so we're gonna say fn and then
the naming conventions i'll go over that
in a few minutes but for functions it's
gonna be upper camel case so it's going
to start with an uppercase so if i
wanted to call this main function i
would do you know i would do it like
that uppercase every word but we're just
going to call this main
now
this is a statically typed language and
if you're let's say a javascript
developer and you don't use typescript
that's probably new to you so we do have
to define the types for our variables
for our function returns for any
arguments that we pass into our
functions so
this main function actually has to
return a an integer okay it has to
return a number
and usually that's going to represent
your exit status and 0
is going to mean that it's successful so
what we have to do here is first define
the function type
and i'll just do a string just to show
you that this won't work so if i do
string and then i return from this
function
we'll say hello
and if we take a look over here it says
type error in return
in return type
of
main uh expected i32 so i32 is a 32-bit
integer
and it's saying that um you know we
can't return a string here it has to be
this should actually be like that
um but this has to be i32
and of course hello is not an integer
so we're going to return zero and now it
should compile
so now you can see it compiled here and
we're getting a result of zero
and in c plus plus the main function
returns an integer as well even if you
don't explicitly return anything it
returns zero implicitly and again that
usually represents an exit status and
zero is success
okay let's close
close that up
um all right so
the next thing i want to look at is the
print command if we want to print
something out so let's go
we'll go within the main here and we're
going to do print and it's going to be
an uppercase p because it's a function
so in print let's print out a number of
i'm sorry not a number a string
of hello world and of course we need our
semicolon
and then we're still going to get our
result of 0 and we're also printing out
hello world
now if we want to print a number if we
if we put a number directly in here i
should say an integer
we do get an error it says type error in
print argument 0
it expected a string so if you do want
to output a number because this can
print we print strings here so if you
want to print out a number what we could
do is use a placeholder
so
and you might have seen this in other
languages so we're going to have these
curly braces and put a 0 in that and
then after the comma here will be
whatever we want to print out and this
could be like a function name or
something like that or it could just be
uh an int and now you can see that it's
printing out 200 as a string
all right
typically you're not going to have to go
you're not going to put all of your code
in the main function you're going to
have different functions and run them
from here so what i'm going to do now is
show you how we can create another
function so let's say fn and we're going
to say output
call this output text
and i want this to return a string so we
have to add here that we want this to be
a string return
and then i'm just going to return from
here
a string of hello world okay and then
obviously we can come down here and we
can call that so let's say output
text
and now that should
let's see oh you know what that's not
going to print anything out because i
didn't use the print command this is
returning something so what i could do
here is i could say print
i hate not having like uh auto complete
and stuff
but we could say print
output text and now you can see we're
getting that hello world
all right now if we have a function that
doesn't return anything like let's say
we want to do the print here
so we'll say print hello world and then
down here we don't have to call print
we'll just call the function
we can do that we are getting an error
though because this function is no
longer returning a string so we can now
get rid of it
okay so that's a void function and we
don't have to do like in some languages
you do this void that's going to throw
an error so we can just go ahead and get
rid of that that return
now let's talk a little bit about data
types and we're just going to hop into
the gist file for that so let me scroll
down here oh and by the way the reason
that um this file saved is because i did
command s if you do that it's just gonna
go ahead and download your file as a
carbon file which is pretty cool
so let's see we're gonna look at
primitive data types and
as i said carbon is a statically typed
language which means that we have to
define our types um there is an auto
type that we can use and i'll talk about
that in a little bit but primitive types
fall into these categories so we have
booleans which are true or false
we have signed and unsigned integers
so basically sign integers are positive
values unsigned are
i'm sorry signed is positive or negative
unsigned can only be positive
and when we write
that when we write the type it has to be
an i so it's an i along with the size
so we have like an 8-bit integer would
be i8 i16 i32 all the way up to
i256
and these would be signed integers if
you want to use an unsigned integer you
would use u but typically you're going
to use signed integers so you're going
to use i and 32 would be the the most
typical
you know depending on the size of the
int
now we also have
floating point types where we can do f16
f32 64 and f128
again typically i would use f32
and then of course we have string types
which are you know a string of
characters wrapped in double quotes
you can't use single quotes they have to
be double and you can also create
multi-line strings using triple quotes
and i'll go over that in a little bit
now as far as naming conventions go
upper camel case is going to be used
when the named entity cannot have a
dynamically varying value so things like
functions and name spaces and then lower
lower snake case which is just lower
case with underscores is going to be
used for
variables so when the named entities
value won't be known until runtime and
then i just put this table that i got
from the documentation that shows you
the different items or different
entities and what the the naming
convention is
all right now let's get into variables
because we haven't uh we haven't done
that yet so let's hop over here
and variables um
let's see what should we do here i'm
going to get rid of we'll still keep
this output text function
and actually let's keep the print but
instead of printing a string directly
we'll create a variable
so let's go up here and of course i
can't use that shortcut all right so
let's go in here and create a variable
now
when we create variables we use the var
keyword okay and i know a lot of you
guys at least if if you are you know a
fan of my channel you're probably a
javascript developer so
this might seem a little weird these
days because we don't really use var we
use let and const and there is actually
a let
in
carbon language i'll get into in a
minute so that that's a little confusing
as well but we'll say var and then
whatever we want to name it and again
it's it's
it's recommended that we use snake case
here so if i had two words like
whatever text hello i would do it like
that so let's say text now again this is
a statically typed language so we have
to say
what type of of data is going to be in
this variable so we do that with a colon
when it's a function we use the arrow
like that but when it's a variable we
use the colon so let's say this is going
to be a string and then we'll set that
to the value of
we'll say hello there
okay and then we should be able to just
pass into the print here the text
variable and we're calling output text
right here so you can see as a result
we're printing out hello there and we
still get our return of zero meaning
everything is okay
now when we use var
we can reassign
the the value that's in that variable so
i use var text that means that i can
reassign that if i want i can say text
equals
and then we'll say i don't know hello
brad
okay so if i do that that should work so
i can see hello brad printed out
now
there is another keyword for variables
and that's if we want it to be a
constant okay so if we want to be a
variable that doesn't change again for
javascript developers that would be
const
and you would use let for variables that
can be reassigned however in
in carbon lang we use let for constants
so i know that can be a little confusing
but
if i were to let's comment this out and
by the way i didn't even mention
comments comments is going to be to just
double forward slashes
but let's go ahead and change this to
let
and we can see that that works i'm
getting hello there printed out but if i
uncomment this and i try to reassign it
it's not going to work we get cannot
assign to our value text
okay
so just keep that in mind so you're
usually going to use var in javascript i
always use const unless i know that it's
going to be re reassigned at some point
but i wouldn't recommend you using let
um you know here all the time i'd use
var
i do the opposite use var unless i know
that it's not going to change because
typically
i notice that in most programming
languages constants aren't
called really called constants unless
they're definitely never going to change
like
in javascript you use cons with an
object because you don't directly
reassign it but you do manipulate it
like you can change a property in that
object
in most languages i it seems that
constants are used for like
like a server name or your host or
something like that something that's not
that's definitely not going to change no
part of it you know you're not going to
manipulate it in any way at least that's
that's
my view on it um so yeah just i would
say use var
i know that was kind of long-winded
now i did mention that we could use auto
as a type i couldn't use it here on the
main function if i do that
that's not going to work main must have
an explicit type but
if i wanted to create
a variable called x and set it to
auto
let's set that to a number
okay so we can see that that works that
compiles and if i change this number to
a boolean say false
that still works if i change it to a
string
that works as well so there might be
cases where you where you want to use
auto
all right now we can also have global
variables so outside of the function
scopes here i could go up here and
create a variable so let's say var
i don't know we'll just say var x and
let's say that's going to be
we'll do i 32
and let's set that to 100.
okay so that should
yep so that compiles and then if i come
down here now remember if you if you
have any experience with any languages
we have
function scope right so
this x that i created here is not
i guess yeah i guess we'll talk about
scope now as well so this is not going
to be available let's just change that
to y for now and if i come up here and i
try to print
let's try to print y
okay so that's not going to work
i wish we could see this whole actually
there we go so could not resolve y
even though i defined it down here
because this is a different function
these have separate scopes however
this x up here is a global variable so i
should be able to print x
see type error and print well that's a
number so i would actually have to do
i'd have to do this
but that should
print yeah so you can see now we're
printing 100 so we can have these global
variables
another thing i wanted to mention was
multi-line strings
so if i wanted to do that i know this
code is a mess but i'm just
kind of showing you one thing at a time
here but i guess we could clean it up
so get rid of that and that
okay so if i wanted to do a multi-line
string
let's actually change this let's
let's do
three
so we're gonna wrap this in three double
quotes and if we do that then we can put
these on separate lines
let's put this
down here and
say hello
world
hello
brad all right so now you can see it's
no we're not getting an error and it's
printing these three lines out so that's
a multi-line string with triple quotes
now as far as
function arguments go i want to talk
about that next because we have these
functions but we haven't looked at
passing in creating any any parameters
and passing in arguments
so what we'll do here let's actually get
rid of
output text and i'm going to create
another function and i'm going to call
it add
okay something we see typically see in
these crash courses so this is going to
be an int let's say i 32
and let's say we want to pass in here
two numbers so we're going to say
var
x
actually var i believe var is optional
here
let's try it without var so we'll say x
now we do have to add types here
remember that so let's say i 32
for that and then y
we'll say i 32 and then
of course we want to just return here
let's say x
plus y
and then we'll go down here we could
print this out or we could just return
since we're returning an int we'll just
return add
and let's pass in one and two
so now we get result three
okay so we just create a function if
you've used typescript i know because
again a lot of you guys are javascript
developers if you use typescript this
should look pretty pretty familiar but
um i believe
yeah i can also put var
i'm not exactly sure that if there's any
difference or if this is just
uh you know if this is just preference
or what but we can put var there as well
all right so the next thing
uh and just to show you if we wanted to
print out a string
with with uh this function we could do
that we could say print
and in here we could say
let's say
one plus two equals and then we would
put our curly braces zero and then
whatever we want to replace that curly
brace is zero with we would put here so
let's say add one two
and then we see this string 1 plus 2
equals 3.
so now we're going to look at arrays so
i'm actually going to get rid of that
we're just going to do this in the main
function here so let's return
0 and then we'll get rid of this
this line here and let's look at arrays
uh and in all these examples i have in
the snippets here so everything we're
going over is in that file
so raise our data structures that hold
multiple values when we define an array
we have to define the
the type of of data that's going to be
in the array we also have to define the
size so again for my javascript
developers that we don't have as much
freedom
with arrays as we do in a language like
javascript
so let's create a variable and let's do
an array of of integers of numbers so
we'll do var i underscore
arr
and we're going to add the type here
so again we have to do the the type and
the size so in brackets we're going to
have the type that we want in this array
which is going to be a 32-bit integer
and then we do a semicolon here not a
comma semicolon and then the size of the
array so we'll say 5. then we're going
to set it to a set of parentheses and
then we can put
i'll just do random numbers in here
and if i just stop there
and we look at the error here it says
type error in name binding
i32 four times is not implicitly
convertible to to
i32 five times so that means i'm missing
one here so i'll put in
let's do uh 19.
okay so that should work or that should
compile
now let's say i wanted to do a string
we'll say var
you know what let me make this
yeah there we go so let's do var we'll
say s underscore a r r and let's say
just wanted to have two strings in here
so i would do the type
string semicolon and then two
and then i'll set this to
a set of parentheses
and then add
my strings in here
okay and that should work
now if i want to print out a specific
value like let's say i wanted to get
this 43 right here
let's say print
um
oops
let's say print and then we'll go
add that
because this is going to be a number so
let's take the name of the variable
which is going to be i underscore arr
and remember arrays are 0 based so it's
going to be 0
1 2 3 4 for the indexes i want to get 43
which is going to be the one index so if
i do that
you'll see that it'll print out 43.
okay if i wanted to get the hello from
the string then i could do
s underscore array and i want to get the
zero index
which is going to be
the hello string
okay now
in addition to arrays
we have tuples
which are another way to store multiple
values so let's say var t
now with tuples we we have to define the
types but we don't have to define a
length so it's not as strict so let's
say um actually let's call this t
underscore one
and as far as the type goes let's just
say auto so if i say auto then i can put
whatever i want here we'll do one two
true
and hello so that that should work
now if i do var let's call this one t
underscore 2 and i want to explicitly
define the types that's going to go in
parentheses here so let's say we want a
string
a string a bool and then i 32
so then
that would have to match if i do hello
so that's a string
then a boolean
and then an int
okay now if i change this middle one
here to an integer we should get yeah
it's basically just telling us that it's
not matching you know it's not binding
to the correct types
now to access
um
the value by index is just like with an
array so let's say print
oops we need uppercase p print
and let's take
so this hello right here that's going to
be this is 0 1 2 3.
so we can do t 1 the name of the
variable and then the index of 3
and we should get hello
okay so we access it just like we would
with
with an array
so we can also convert
tuples to an array so if i say var t
auto set that to just one and two
and then we should be able to say var a
and then as far as the type
actually we'll just yeah we'll do auto
and
should be able to just set that to t
and then
down here for the return let's say we
want
t
0 which should be 1
and then we'll add a
one which should be two
and we get a result of three
all right
now
another data structure that we have to
work with is ours called structs s t r u
c t cts structs for structures
and this is like a javascript object or
a python dictionary basically key value
pairs
so let's get rid of this stuff
and let's create we'll say var person
and i'm going to set the type to auto
and the the syntax for this is a little
weird it's going to be dot and then
whatever we want the key to be so i'll
say name and unlike like you know
javascript objects where we have a colon
here we put an equal sign
we'll say brad and then let's do
we'll say locate dot loc for location
and we'll set that oops
still in javascript mode
okay so that should work and then if we
do
well that's not going to work because i
got rid of the return so we'll say
return
zero and then let's do a print
okay so now if i want to print out the
name for this person
struct then i could do person dot name
so there we go so now it's printing out
brad
all right and i could change that i can
change these values as well so if i come
down here and i say like person dot name
and i change it to
john and oops if we print that out
we get john
now if i use let here i just want to see
if we change this to let
cannot assign to our value person name
so normally in something like this if
this were a javascript object i would
use const here and we would still be
able to change
change one of these values but in this
case we're gonna
use var
now
i used auto right here but
in most cases it you should
define your types
explicitly
so let's
we'll just get rid of this and let's
create a struct with types so we'll just
say var
and then p so for points or coordinates
and i'm going to say that i want two
32-bit integers so the types we're going
to put in curly braces just like the
structs themselves and then the name of
the key so i'm going to use x and y so
i'll say that x i want that to be i 32
and then y i want that to be
i32
and then we'll set the actual values so
here we'll say
dot x equals one
and then we want to put a comma and then
dot y equals
two so that should work and then let's
come down here and we'll go ahead and
print out
and i'm just going to
i'll say value
colon and then
what i want to print
and what i want to print is going to be
p so that's the name of the variable for
the struct and then the key tha"
HtunPQtr-Xw,"what's going on guys so in this video
we're going to do five separate projects
all html css and javascript and these
are actually pulled from my 50 projects
in 50 days course on udemy so if you're
interested in the entire course and all
50 projects i'll have a link in the
description with a promo code for just
9.99 all right so just to kind of show
you what we'll be doing in this video
the first project is going to be a
scroll animation which is pretty common
you see this a lot in websites where you
have some content and then as you scroll
down you have other elements come in
from the left or right or fade in or
whatever and then as we scroll up
they'll go away all right so that's the
first project second one is going to be
this rotating navigation where we have a
hamburger menu if i click that basically
the whole site just tilts and rotates
and exposes the menu here and then we
can you know close it back up
and then we'll be doing this form input
wave animation so if i click in an input
box the label has this cool animation
moves up and if i click outside of it
then it goes back to normal then we have
the 3d boxes background project where
we'll have these separate boxes and
click this button and it just gets put
together into a single image all right
so that's that then we have the
hoverboard project which will have all
these squares and as soon as we come in
here with our mouse we get these random
colors different colors and as we move
out of the boxes they fade away and it
gives us this cool cool little effect
alright so those are the five projects
we'll be doing in this video and the
point of all these projects is to
improve your css skills as well as your
javascript and being able to work with
the dom manipulate the document object
model all right and if you're interested
in the 45 other projects i'll have a
link in the description to the full
course all right so let's get started
[Music]
all right so in this project we're going
to build a scroll animation which is is
pretty simple we can most likely do this
all in one video however it's very
useful you might see these websites
where you start scrolling and parts of
the site you know images or sections of
the website start to come in so i just
created these content blocks and you can
see there's three to begin with but if i
go and i start to scroll down the next
one comes in from the left
go down some more next one comes in from
the right and it's going to alternate
where it comes in from so we're going to
use css transitions to have it come in
smoothly we're going to use javascript
to basically tell where the trigger
point is for the next box to come in and
then we're going to add a specific class
to show it and then if i go back up
it'll remove the clasp when it hits the
trigger point
and it'll all you know slide back out
all right so i think it's it's really
useful you can use this in a lot of
different uis and different websites so
that's it let's get into it
okay so this is a very useful but simple
project so we can probably get this done
in one video so let's jump into our
project starter here and for the title
i'm going to just call this
scroll animation
and we're going to go down here into the
body and all we really need is
a bunch of boxes which
would ultimately contain your website
content we're going to we're not going
to waste time creating content we're
just going to have a bunch of boxes and
then apply the animation to them
i'm just going to put an h1 here and say
scroll
to see
the animation
and then under that we'll have a class
of box
and i'm just going to put an h2
with the word content we'll just copy
this down we'll have a bunch of these
okay
now ultimately like i said you would
have these would be cards or just
sections of your website whatever it is
that you want to
bring in with that slide in animation
so let's go into our style sheet here
and i'm going to add
a
background color
and let's make that hexadecimal ef
efe
dd
six
so kind of a tannish background
and then let's do
let's see display flex
justify direction okay so that's good
i'm going to get rid of the height
and the overflow hidden because we do
want a scroll bar obviously this is a
scrolling animation
and then for the h1
let's just set margin to
10 pixels and then
let's create the style for the boxes
so i'm going to use a background color
of steel blue
let's make the text color white
and i'm going to display flex because i
just want to align
the h2 that's inside to the center both
horizontally and vertically so display
flex align items
center and justify content
center
and let's set a width
of 400 pixels on the box and let's do a
height
of 200 pixels
okay we want to separate them out so
let's do margin of 10 pixels
and let's do a border radius
so border radius will do 10 pixels and
let's add a little box shadow
obviously this stuff isn't needed but i
just want to make it look decent
so don't do 2 pixels
and 4 pixels for the offsets 5 pixels
for the blur our gpa for the color which
is going to be 0 0 0 0.3 for the alpha
value and then for the animation we're
going to use the transform property with
translate x because that's what we want
to do is move these along the x-axis
so initially let's set box the class of
box transform
and we want to set the translate y
i mean i'm sorry translate x which is
horizontal it's the x-axis
oops i forgot my semicolon up here
and i'm going to set this to 2. so 0 is
the default if i set it to 0 there's no
change if i set it to let's say 100
pixels and save you can see it gets
moved over 100 pixels gets moved over to
the right
so what i'm going to do is set this to
200 percent which is going to move it
way off the screen
to the right
and then what's going to happen
is if we have the class of show so let's
say
box
with the class of show then we're going
to set the transform
and translate y
translate x to zero which is the default
so if i go over here and i apply a class
of show to this first one
it's going to show because it's in its
regular position the rest of them are
still 200 percent over here
and then what we'll do is we'll have a
transition
so that when that class gets added it
transitions in smoothly from over here
all right so we want to add a transition
on the transform
property
we'll do a 0.4 second duration with an
ease effect
okay now
the way it is now if we add the
javascript and we add the scroll
functionality and they come in they're
all going to come in from this side i
actually want
every other one to come in from
the off from different sides
so what we can do is
right here let's take our box class and
let's use nth
of type which is a pseudo selector and
we can select all of the even elements
all the even boxes
okay so basically you know every other
one
and what we'll do is instead of setting
the initial
the initial transform translate x to 200
percent we're going to set it to
negative 200 percent which is going to
put
put them over here so all the even ones
are now over here all the odd ones are
on this side
okay and then when we have them come in
when we dynamically add the class of
show they're going to come in from
different sides
all right and we have to also
figure out where we when we want them to
come in as we scroll
so that should do it for the css
actually i just want to make the h2 a
little bigger so let's say box h2
set the font size to 45 pixels
and then we'll jump into our javascript
and first thing we want to do is bring
in our boxes so let's say cons boxes and
document.query
we want query selector all because
there's more than one
so this will put it into an array or a
node list
and then we want to fire off an event
when we scroll so on the window we're
going to add an event listener of scroll
and when that happens we'll have a
function called check boxes because we
want to check
the positioning of each box
and in a box could be anything it could
be any
section of your website or an image or
or whatever
so we're gonna have this
function
check boxes
and we need to figure out where is the
trigger point where do we want you know
when we're scrolling down where do we
want them to start to come in
so we're going to be using
window dot inner height
in fact we can just console log
that so you can see and we're going to
run check boxes to begin with anyways
right here so
i'll go ahead and run that and then if i
open this up you'll see 888 is the
window height not counting the console
if i move this console up and i reload
now that the height is 406.
so we're getting the the inner height
and we want the trigger point so
basically where we want you know it's
it's a scroll in
um
we're going to want
that to be a little less than the inner
height
and in we can't just use a fixed number
because the height could be you know
different on
at any at any point
so
what we're going to do is divide
this by 5 and then multiply it by four
so now
let me just reload this so you can see
the height here is 666.
if i save that now this gives us
this equation here gives us 532
all right so that's going to be our
trigger point
so i'm actually going to put this into
a
variable we'll call it trigger bottom
so where in the in the window do we want
it to trigger
uh so we have that now
let's go ahead and take our boxes
which we brought in which is a node list
that we can loop through
and we'll say for each box
uh yeah for each box
let's get the top of the box
and when i say box you know i mean this
the elements here so const box top
i'm going to set this to
the the whatever box we're dealing with
because remember we're looping through
them
and we there's this method called get
bounding client rect
so i actually have this i want to show
you this real quick
just so you understand what this does
so this method returns what's what's
called the dom wrecked object and dom
wrecked it's just basically a rectangle
describes the size and position of a
rectangle so it returns that
providing information about the size of
an element and its position relative to
the viewport so where in the viewport is
it
and there's a bunch of properties that
we can use on this if we go down here we
have the x y width height
where it is where the top of it is where
the right where the bottom where the
left of it is so we want to see where
the top of that particular box is so
we're going to add here dot top
okay so that will give us the top value
and then
all we need to do after that is see if
the top of the box
is less than the trigger bottom
if it is we want to add the class of
show
if it's not if it's more then we want to
remove the class of show so let's say if
the box
top
is less than the trigger bottom
then let's take that box and let's add a
class so classless dot add
of show
else then we want to remove it so box
dot class list
dot remove show
okay so now i'm gonna go and just remove
this
show that we added manually
now notice that it's only showing the
first three because those are in range
now when we start to scroll it's going
to fire off
an event and the reason we see these
come in initially is because of this
right here if we don't have that we're
not going to see them because it hasn't
this hasn't fired off yet if i scroll it
does
i mean if you want that functionality
where it doesn't show it until you
scroll that's fine but usually you would
show everything above the fold so we run
that initially first then we start to
scroll and as soon as this is true as
soon as the top of the next box is less
than the trigger bottom point
which is a little less than the you know
the entire height of the viewport
it's going to come in because it adds
that class of show and what that class
of show does
is sets it to its normal position
now if it's even it it's starts over
here so it comes in from that way if
it's not even it starts over here and
comes in from that way so every other
one comes in from a different direction
and as we scroll up it's still going to
fire off this event and it's still going
to check this
so if this is not true it'll remove the
class so as we scroll up
you'll see that they'll start to
go out
now one thing i just noticed is i do
have a horizontal scroll bar here and i
don't want that so in my css i'll just
add on
to the body here
and i'll say overflow
overflow x because we this is the x axis
scroll bar we're going to set that to
hidden so that will get rid of that
horizontal scroll bar
all right so pretty easy and and i mean
a lot of people
use jquery for something like this or a
library like animate on scroll animate
on scroll is actually a really cool
library and if you want to do some funky
stuff then
you can use that but i mean if it's just
something simple and you're just
bringing in elements
when you scroll down this is
very lightweight you know no extra
libraries or anything and it's really
easy to do so hopefully you guys found
this useful and i'll see you in the next
project
hey guys welcome to your next project so
i actually really like this project i
think it's really cool looking so
basically we just have a simple article
this could be anything at all any
website any blog whatever and up here we
have the little navigation icon if i
click this
what's going to happen is it actually
rotates the entire website the entire
container here and then it brings in
the nav here the navigation items from
the side and the icon also changes so
basically we have two icons open and
close we're going to position them so
that when we click it this circle
rotates and shows the close button
obviously we need a little bit of
javascript to be able to add and remove
the specific class which we're going to
call show nav
and that will you know rotate and bring
the menu in so i think this looks really
cool
so
it's it's going to be
mostly css that we're dealing with we
need to add specific styles for
uh specific elements when the show nav
class is present the only javascript we
really need is to add or move the class
when we click this button okay so let's
get started all right so we're going to
get started here i have my project
starter open i also have a link here to
the font awesome cdn so that we can use
some icons for the open and close
buttons
so in the title here i'm just going to
say
rotating
navigation
and down here let's get rid of this h1
we're going to have a container that
wraps everything
and in here we're going to have a circle
dash
container that's going to wrap the
circle
so another class of circle and this is
basically the you know the circle that's
going to be up in the corner with the
buttons so in here we're going to have a
button with the id of clothes
and i just want to use an icon from font
awesome so fas and then fa-times
will be the icon and right under that
we'll have a button with the id of open
and this is going to be the icon fas and
then f a dash bars
which will give us like that you know
that hamburger look
so if i save that we're just going to
see our two buttons here now we want to
be still within the main container but
outside of the circle container so right
above the last div we're going to have
our content
and you could put absolutely anything
here in this content div
we're just going to put in h1 and say
amazing article
and in small tags we'll put the author
our good friend foreign pop
and then paragraph let's do lorem 100
just to throw some dummy text in there
under the paragraph we'll have another
h3
and we'll say my dog
and we're gonna have a picture of a dog
i'm just gonna paste this uh
this image tag in here and of course
like i said you could put anything you
want here this is just an unsplash image
of a dog
and then underneath that we'll have a
paragraph we'll do lorem
75
and save and we get a cute little dog on
the screen
so underneath
the container
so the container ends here the last div
we're going to put our nav so let's just
create a
html5 nav tag with a ul
and then an li and i'm going to use
icons here as well so we'll do i f a s
and f a
dash home
and then next to that icon we'll just
say home
and let's copy that down twice so this
one is going to be about i mean you'd
probably these would probably be links
but
that's fine you can add the links if you
want so fa let's do user dash alt
and then for
this is going to be contact these aren't
going to be actual pages
the point of this project is the the
actual animation and the position of the
nav and all that not the actual inner
pages
so this will use
envelope
okay so that should do it for the html
let's jump into our style sheet and
we'll do a good part of this now we
might probably have to break it into
another video because there's quite a
bit of css but i'm going to use the lato
font so css question mark family equals
lato and then we'll add that to our body
plato
all right and then let's see we're
actually not going to use all this flex
stuff here so i'm going to get rid of
pretty much all of this
except for
let's see except for
the overflow hidden
which i'm actually going to change to
overflow x hidden so what that does is
it only hides the scroll bar on the
x-axis so going this way so we want to
be able to scroll this way
and then margin 0 and then
let's also add a
background color
of 333 which is a dark gray and then
let's have color
222
and i know that that doesn't look right
but we're going to set the container
background color to a light color so
let's do
background
color and we'll do fa three times
now with this container
basically it's gonna rotate a little bit
over when it has a specific class of
show nav so before i add anything else
to the container let's do container when
it has
show nav
and we can rotate it with the transform
property and then rotate
and i'm going to rotate it negative 20
degrees
all right and then
let's see if we go back here and we just
add that class manually to this
show
nav
then you can see it rotates and i'm just
going to keep that there for a second
we're going to want to change the
transform origin
so transform origin when you when you
rotate the origin by default is going to
be like in the middle it just it just
turns it it rotates it however we want
it to rotate from the top left position
so it rotates i can't really explain it
if you go to the mdn docs
for
for trend transform origin you'll be
able to see how it works with different
values but we want to set the transform
origin property to the top
left
okay so now you can see the rotation
point is up here instead of
in the middle
um now we do want to transition on that
because we don't want to just flick
you know rotate real quick we want it to
be smooth so let's add a
transition onto that we want to
transition the transform property
say 0.5 seconds and we'll just use
linear so it's just you know all one
speed or whatever and you can see it
actually does it when i save
because we have that class on it
now i'm going to just go ahead and get
rid of that class for now but we know
that
it does rotate when it has that specific
class added
so some other things i want to do here
is just set the width to 100 viewport
widths so basically take up the whole
you know the whole viewport
horizontally and then let's set the min
height to i'm going to set that to 100
viewport heights so we want to take up
the whole
viewport
and then for padding
let's say padding 50 pixels
all the way around
and that should do it for the container
now let's work on the circle container
which is around this
so
circle dash
container
and i want to position this in a fixed
position
and
we want it to be like a half circle on
the edge of the page so we'll set this
to negative 100
pixels for the top and then left same
thing negative 100 pixels
and right now we just don't see anything
basically the buttons are are not
showing right now
so for the circle itself
because remember we have a circle
container but then we also have a class
of circle that wraps around the icon so
this is where we're going to add like
the background color which is going to
be hexadecimal ff7979
and let's set a height of 200 pixels and
a width
of 200 pixels and now you can see it up
in the corner there
we want this to be a circle so border
dash radius we're going to set that to
50 percent make that a half circle i
mean it's a full circle but
half of it's off the screen that's what
we did negative 100 because we have 200
for the height and the width if you
increase or decrease this you want to
adjust that as well and we want to
position this relative so we can
position the buttons inside absolute
and this is going to rotate so i want to
add a transition
on the transform
property and let's make that same thing
0.5 seconds linear so same as the
container rotation
all right and then for the buttons let's
say
circle
button
and for these i want to i know we can't
see them at the moment let's actually
position them first so we'll position
them absolute oops
so we're going to position absolute and
let's put them top 50 percent
and from the left
50 percent
and then
let's make the height
100 pixels
and then let's set and i know it doesn't
look right yet
let's set the background
to
transparent
and they're both right and they're both
in the same exact spot right now we want
to take off that border so border zero
let's set the font size bigger as well
so font size will set that to 26 pixels
and let's set the color
to
white
okay and then i just want to get rid of
this border when it's in its focus state
so let's say dot
circle
and button we want to target focus
and set outline
to none
okay good
uh
let's see so
each one has one has an id of open one
has an id of clothes so i want to target
the open
so circle button
with the id of open
and i'm going to set that left value to
60
percent okay the open button is what
we're going to see initially and that's
where i want it positioned
so for the close let's say circle
and we want the
uh button that has the id of close
and i'm going to set that to top
and let's set that to 60 percent and
this is relative to the circle
okay and
we want to
rotate this
this close button so let's use transform
rotate and we're going to rotate it 90
deg so 90 degrees
and let's set this
transform origin
transform origin is going to be top
left as well
so now i save it and you can't see it
it's up here in fact if i
take my
container here and let's set just
temporarily set this to 200 pixels
you can see exactly where it's
positioned so just put that back to
negative 100 and we should just see the
the lines here
and it's going to stay fixed there no
matter what
this image though let's
let's just fix that real quick we're
going to do the rest of the css in
in the next video but i just want to
target the content
image
and set a max
width of 100 of its container because
that's bugging me but yeah you could
have absolutely any content you want
here and we can see the nav and stuff
down here but in the next video we'll
finish the css and then we'll add a
little bit of javascript to be able to
click this
and you know add the show nav class and
it will do the do its whole rotation
effect
let's actually add though onto
onto the button
let's add a
cursor
pointer
like that
alright so that's it i'll see you in the
next video all right so we need to
finish up our css we have to deal with
the the actual nav down here
but before we do that i'm just going to
add a couple more content styles
so for
uh for the content
itself let's do a
max width of
1000 pixels and we'll set margin
let's do 50 pixels on the top and bottom
auto on the left and right keep it in
the middle so even if we stretch it out
you know it's going to have a thousand
pixel
1000 pixel width max
and then for the h1 say content h1
i'm just going to take the margin away
from that so margin 0 and then for the
small tag for the author
let's set a color of 555
and let's set a font style
of italic
and then for the paragraphs
so content
paragraph we're going to set color to
333 and let's set let's increase the
line height
to 1.5
and we already have the image
at 100 width good so now we just need to
really deal with the navigation
which is right now is down here and what
i want to do since we're only going to
see this when this actually rotates when
we click this i'm going to add the show
nav
so show dash nav i'm going to manually
add it for now
and then
the actual navigation
we want that to be positioned over here
right so let's let's do this above where
we did the content stuff
and i'm just going to use the nav tag as
a selector
and i want to position this to be
fixed because we want it fixed down to
the bottom so we'll say fixed and bring
it from the bottom 40 pixels up and from
the left
zero
so that puts it you know
near where we're actually going to want
it
and then i'm just going to set a high z
index here so it's on top let's do a z z
index of 100
and then for the ul
let's say nav unordered list it's not
glass just nav
so for that let's do a margin not a
margin let's do a list style
type of none so that will get rid of
those bullet points and then i'm going
to set padding left
to 30 pixels
and then we want to style the list items
so nav ul
li
and i want them all uppercase so let's
do a
text transform
uppercase
and let's change the color
to
white
and let's set a margin of 40 pixels on
the top and bottom so we're really going
to separate them from each other
and then let's
let's bring it over here we need to have
it initially over here more to the left
because it's going to come in
as this rotates or right after it
rotates
so to do that we can use transform
and we want to translate on the x-axis
so translate x we want to bring it left
so that would be negative
we'll do negative
uh 100 percent
so if i save that now you can see that
it's
you know it's way over here
we can still see it a little but that's
fine it's just going to come in
but we want that to come in smoothly so
let's add a transition on that so
transition
the transform property and we'll do a
0.4 second
duration and we'll use ease in here
and then let's see
for the you know what let's comment this
out for a minute just so we can actually
see this
i want the this i want some more space
between the icons so
let's do nav
uli
lii
and i'm going to set the
font
size let's do 20 pixels and let's set
margin
right to 10 pixels
oops
okay so makes the icon a little bigger
also put some space in between them
now
we're going to want
each
each one of these to stick out a little
more kind of going at an angle
so what we can do is take the nav
let's say nav ul li and then the direct
li after that and let's add a margin
left of 15 pixels so if i save that what
happens is the lis after the initial li
are going to stick out
15 pixels
now i want this last one to stick out
even more so
what i'll do is take this copy it and
let's say li
plus li
plus li
so basically anything after you know
this one here so the contact when i want
to stick out double that so 30 pixels so
now you can see that it's at an angle
kind of at the same angle as the pages
here
so we have a
initially we have this negative
100
translate x so if i uncomment that
it goes almost off the screen but we're
going to want these ones to initially
start out more over as well to the left
so
i'm going to copy that and for this one
here we have our
our margin left 15 let's do negative 150
percent and then for this one here let's
add let's do negative 200 percent
because we need those to be over more
now when we have the show nav applied we
wanted to actually show the navigation
everything we just did is the default
when you first come to the page
when this class is actually there which
it is now because we manually added it
we want to see
all the navigation stuff so
let's go
we want to do this we'll go right above
the nav here and let's say
so the container div
when it has
show
dash nav
then we want to take the direct
navigation
lis after that
and we want to bring them into view so
let's set transform translate x on all
of those
to zero which is going to bring it to
its you know its original place and i
want to add a little bit of a delay so
we'll say
transition delay
spell that right transition
delay i'm going to set that to 0.3
seconds so that it comes in
you know a little bit after oops i
forgot my semicolon so it comes in a
little bit after the rotation
so now we're able to see it because we
have that show nav
so if we take this off
then we just have you know just looks
normal and then if we have it
you can see
it rotates and it shows the
the navigation
now we want to
have the functionality where we click
this then it does it adds that class
which is going to be pretty easy so
let's jump into our script here
and let's create a variable called open
and we'll use document dot
get element by d we have an id of open
we also have an id of close
so
close and then we also want to grab the
container so const
container
get element by d
actually no that's a that's a class so
let's do
i mean you could add an id or you could
just use query selector
and we want dot container it's a class
all right so let's take open
and let's add an event listener to that
so we want to listen for a click and
when that happens we're going to run a
an arrow function and then we just want
to take the container
and
from the class list we want to add
the class of show dash nav
and then close is going to be similar so
i'm just going to copy that and let's
change
this to close and then let's do
container class list
remove
all right so i save that and i click
okay so that happens
so let me just reload so i click
and that rotates these shoot in but we
can't see the
the close here so
to handle that
let's go back to our css
and we basically just want
the circle this to rotate
when there's that show nav class
so i'll go right below the circle
so let's say circle and
um dot show nav
and then we're not actually style i'm
sorry not circle container
so when the container has show nav
applied to it then we want to style the
circle and what we want to do with the
circle is rotate it so let's say
transform
rotate
and we're going to rotate it negative 70
degrees
okay so now once it rotates we can see
the close button
just because of where it's positioned
when the circle rotates it just comes
into view
all right so that looks pretty good
so not too bad i mean we're just adding
and removing a class and we're setting
certain
certain uh styles on the circle and on
the navigation
you know when we have that class applied
so you could use this on with any
website any application so that's it
let's go on to the next video next
project all right welcome to your next
project so in this one we're going to
build a simple login form here with a a
a wave effect on the labels so if i go
ahead and i click in here in the input
you can see the label will then wave up
okay so we have that cool little
animation when we click in here and when
we click out
so basically the way we're going to do
this is wrap a span around each one of
these using javascript and add a
transition so that the label moves up
when we focus on the input but we're
also going to add a dynamic transition
delay so it gives it that wave effect so
each each letter goes up at a different
time
all right so that's what we'll be doing
let's go ahead and get into it okay so
let's get started on our form input wave
project i have my project starter open
here i'm just going to say form input
wave
and then let's get rid of this h1 and
we're just going to wrap a container
around
our form so we'll have a container with
an h1 we'll just say please log in just
a basic login form
and we'll have a form tag here we don't
need an action
and in here we're going to have a form
dash control which will wrap around the
input which is going to be type text i'm
also going to add required
which will just give it some basic
validation and then the label is gonna
go underneath and we don't really need a
four so we'll get rid of that and say
email
and then i'm gonna go ahead and copy
that down
and this one is gonna be password so
type
password and label
password
underneath that form control we're going
to have a button and i'm going to give
it a class of btn and let's just say
login
and then we'll have a div with the class
of text
actually let's do a pat we'll do a
paragraph
the class of text
and say don't
have an account
and if they don't have an account then
we'll just have a link doesn't have to
go anywhere and say register
all right so that's our form pretty
simple
now before i get into the css i just
want to kind of explain
what we're going to be doing as far as
you know how to do this
and
we want to use javascript to basically
wrap each letter in a s in a span
and we're going to have a transition on
that span to move it up
so or a transform translate y value to
move it up with a transition to make it
smooth and in javascript when we"
Hci9Bb4_fkA,"hey guys welcome to part four of
JavaScript under the hood in this video
we're going to talk about memory storage
now just to kind of reiterate what we've
already gone over in Parts 1 through
three we know that JavaScript is a
synchronous single-threaded language at
its core operations are executed line by
line we have a call stack that manages
our functions and execution context and
if we do have a blocking operation we
can then utilize certain web apis to
write a synchronous code so you should
understand all of that up to this point
now I I want to get into how JavaScript
stores data in memory so there's
basically two places we can store data
that's on the stack and on the Heap so
it depends on the type of value that
we're that we're storing if it's
primitive or if it's referenced so let's
go ahead and jump in and start to talk
about
memory okay so I just want to go over
memory management in general real quick
so when you use a a low-level language I
should say a relatively low-level
language like C or
C++ it's up to you as the as the
developer to allocate and free up memory
manually within your code and of course
this does make those languages a little
tougher to learn and work with however
they are extremely powerful now higher
level languages like JavaScript python
Ruby C these languages automatically
allocate memory when objects are created
and then it'll free up memory when
they're not used anymore and it'll like
I said it'll do this automatically so if
you create a variable and you don't need
it anymore there's nothing that you as
the programmer need to do in most cases
um it's just taken care of for you and
this process is called garbage
collection so JavaScript is what we call
a garbage collected language C is not
C++ is not and those me in those
languages you do have to manage your
memory correctly or you can get what are
called memory leaks now there are
certain situations in JavaScript where
you can get memory leaks uh like
unwanted references you can use the
browser Dev tools uh memory tab to
create what we call a heap snapshot and
help you fix any memory leaks and that's
going a bit beyond what I want to get
into here but at the end of this video I
will show you at least how to um go into
to the memory Tab and look at some
objects and so on now to understand how
data is stored in the JavaScript engine
we need to understand the data types or
I should say the types of data types um
so I know that a lot of you may already
be familiar with this but in JavaScript
we have primitive types and we have
reference types or objects now we have
seven different primitive types and
those are strings numbers booleans null
undefined symbols in the most recent
primitive type big int so these values
are stored directly on the stack and
this is called Static data and it's
static because it has a fixed size and
it doesn't change um the JavaScript
engine can allocate a a fixed amount of
memory space for that static data and
store it right on the stack now for just
about everything else that isn't a
primitive it's a reference type or an
object so this includes arrays objects
functions when you create any of these
their value isn't fixed right an array
or an object literal or whatever you can
add to that um so it's allocated more
space than it's actually needed so it it
can't be stored directly on the stack
it's stored in a much larger area called
the Heap or the memory Heap and when we
Access Data from the Heap we access it
through reference we don't access it
directly
okay so just keep that in mind that
primitive types like numbers and strings
they're stored directly on the stack and
then everything else is stored in a much
larger area called the Heap now because
of the way that data is stored and
accessed on the stack and the Heap and
our code primitive values and objects
can behave differently so I'm going to
show you an example in a few diagrams
here of of exactly what happens as far
as how and where everything is stored
then I'll jump into some code and show
you the the same thing so let's say we
create two variables with primitive
types so we have name which is set to a
string of John and we have age which is
set to a number of 30 now since these
are primitive values they're stored
directly on the stack so we have our
variable name called name and then our
string of John and our age with the
number of 30 now let's say we were to
create a reference type so we'll use an
object literal as an example so here
we're creating a variable called person
and setting it to an object with the
name of Brad and the age of 40 okay so
as you can see that value is not going
to be put right in the stack like the
Primitive types it's going to be put in
the Heap and then what happens is person
is going to reference that object okay
as opposed to the the value being
directly put on so now let's say we
create a a variable called new name and
we set it to name okay so name equals JN
up here what's going to happen is now on
the stack we have new name and we have
the value of JN now let's take that new
name and reassign it we're using let so
we can reassign it to Jonathan now
Jonathan is put on the stack but name is
untouched right it's still John so this
is where it can get a little bit
confusing with reference types so I'm
going to kind of do the same thing here
I'm going to create a value or a
variable of new person set it to person
and what's going to happen is it's going
to point to that same reference that
person points to okay the values are not
over here on the stack they're over it's
over here so it doesn't create a new
object uh with Brad and 40 in the Heap
it just references the one that's
already there so in that case if I were
to take new person and mutate it so that
the name is now Bradley it's going to
update that reference now since person
is pointing to that reference if I were
to console log person. name I'm going to
get Bradley and that might surprise a
lot of people because we didn't directly
change person we Chang new person but
they're referencing that same object so
now we'll jump into some code and do the
same thing but keep this whole diagram
here in mind while we're doing this so
let's first off I'll just comment this
um we're going to create some primitive
some primitive types and remember these
are stored on the stack and I do have
GitHub co-pilot enabled here so let's
say let name set that to John and we
don't really need the age but we'll just
add that anyway okay so we have our
primitive types now we want our
reference types which are stored on the
Heap so I'm going to create uh let's say
we'll just do the same example we'll use
person and we're going to set that with
a name of Brad and let's do age I wish
36 but we'll say
40 all right and then we'll just go
ahead and do a console log here of name
for now so of course we get John now if
I were to create a new variable let's
say new name and set it to
name and we look down here
at new name we get John and then if I
were to reassign this so we'll say let
new name and we'll set it to say
Jonathan and we get Jonathan but if I
were to log name that doesn't change
right because I didn't I didn't update
name and remember that this value is
stored on the stack now if we kind of do
the same thing with the object which is
a uh or the object literal which is a
reference type let's say let new person
and we're going to set that equal to
person okay if we come down here and we
log new
person we get our name and age if I were
to do just like just do name I get Brad
now if I take that new
person and then I mutate the name let's
say Bradley which isn't my real name by
the way it's just Brad
but you'll see now if I save of course
new person. name is Bradley because I
that's the that's what I updated but
remember stored the object is stored as
a reference that both person and new
person are pointing to so if I were to
log person name it's also Bradley and I
think that keeping in mind this right
here this diagram is really helpful
because you can visually see that
there's a reference here that both of
those variable are pointing to I think
without knowing that this can be a
little confusing because we didn't
update person directly we updated new
person however that points to the same
object or the same reference all right
so the last thing I want to do is just
give you a very basic intro into the
memory tab here in your Dev tools
because if you do oops let me just
delete this real quick so if you go to
this tab it should look like this now if
you do have memory leaks this is a good
way to bought them you can create what's
called a heap snapshot profile and it
will show how your memory is distributed
um uh distributed did I just say
distributed
distributed among your pages JavaScript
objects and also your Dom noes so
everything that has to do with your your
application the browser uh the window
the global window object will all be put
into this snapshot so we can come down
here and click take snapshot just takes
a couple seconds and then over here
you'll see all the different objects
that are in memory you also have the
shallow size and the retained size the
shallow size is the actual object and I
believe the retained size is like any
other objects that are associated with
it um now to kind of give you an example
of of creating a custom object and
looking at it in the the heat profile
here let's go ahead and create a
constructive function to create a person
so we'll just say we'll pass in a name
and then we just want to set this name
to name and then we can create person
objects so let's say person one is going
to equal a new person named John we'll
do two and we'll do three so
person three all right so if I save this
and we come over here and just reload
and then we'll go back to this screen
and let's take another snapshot
okay so now these three person objects
should be in here and I can filter right
here if I just type in person you'll see
that I have my person Constructor which
I just created here and it says times
three because I've I've created three of
them and you can see the shallow size
and the retained size uh if we hover
over it I believe yeah we can see the
actual
values we can see the Prototype op
object and if I over here it'll show us
where this was actually created can
click on it that takes us to our sources
tab which we looked at I think in the
last video uh which will show us the The
Constructor function all right so pretty
cool I mean if you have memory leaks it
should stick out because you'll have a
crazy amount of memory um but again I
don't know too much about this I don't
use it that much but I did want to just
give you kind of a brief introduction
and show you that it is here that you
can see some of the memory in your HEAP
all right so that's going to be it as
far as the series goes uh I do plan on
adding more videos I'm not quite sure if
it's going to be right now or I might
hold off a little while but uh I do
definitely want to do more of this stuff
and I am revamping my modern JavaScript
from the beginning as well that's that's
why I've been working with this type of
thing lately but uh that's it guys hope
you enjoyed it and I'll see you next
time"
Fd9VaW0M7K4,"what's going on guys welcome to
javascript under the hood part two in
this video we're going to talk about
execution context now i just want to
kind of refresh what we talked about in
the last video and what you should know
up to this point so we know that
javascript runs on a single thread the
thread of execution and that thread is
synchronous at its core and any
functions that are going to be executed
are going to be placed on the call stack
which is a data structure that is
last in first out okay so it's important
to understand that up to this point now
we want to go a level deeper into
execution context all right so let's get
into it
all right guys so whenever we run our
javascript code whether it's in the
browser or in node.js it creates a
special environment that handles the
transformation and the execution of that
code and this is called the execution
context it's going to contain the
currently running code and everything
that aids in its execution
now there's a couple types of execution
context we have the global execution
context that's what's created right away
when we create when we run our script
and then we also have a function
execution context anytime a function is
invoked so to help you visualize this
environment just think of a box with
aside from memory which is going to be
where your variables and functions are
stored this is called the variable
environment and then you have your
execution which is you know going line
by line and executing your code now
whenever an execution context is created
there's two phases that happen and it's
really important that you understand how
these phases work so the first is called
the creation phase or the memory
creation phase the second is the
execution phase
so to visualize this you can think of it
as passing over your code twice so the
first is to create memory second is to
actually execute now the first thing it
does in the creation phase is it creates
the global object in the browser this is
called window and node.js is just called
global that's why if i go to any script
and i go in my console and type in
window it gives me my global object and
this has everything from
you know inner width and inner height
properties to the entire document object
so if you're ever wondering where this
comes from it's generated when the
execution context is created
now the second thing it does is it
creates the this object and it binds to
that window object that's why if i if
i'm in the global scope and i type in
this it gives me the same thing gives me
that global window object all right so
it does that and then it sets up a
memory heap for storing the variables
and function references in your script
or in your function okay now when it
stores these it does store the entire
function but when it comes to variables
it stores them as and sets them to
undefined okay so if we go back to this
box here during the creation phase it
will store the entire function but for
single variables it's going to store
them as undefined first and that's
important to know
when it comes to hoisting which i'm
going to talk about in a little bit
all right so that's the memory creation
phase then we have the execution phase
where it just goes uh line by line
executes your code and then whenever it
hits a function
um
whenever we invoke a function it'll
create a new function execution context
so what i want to do now is go over a
block of code and show you exactly
what's happening through the creation
phase and the execution phase and i use
var for a reason i'll talk about that in
a little bit when we get to hoisting
so remember the creation phase runs
first so it's going to go through all
our entire script and just put
everything into memory so line one it
sees we have a variable called x it's
going to allocate memory for that and
the heap and it's going to store it as
undefined because it's a variable next
it's going to look at y it's going to
store that as undefined then line 3 is a
function so remember functions they do
actually get stored the entire function
will get stored all right next we go
down to
line seven sum one is going to get
allocated stored as undefined same thing
with sum two all right so that's the
entire creation phase then we're gonna
start on the execution so it's gonna go
back to line one and it's gonna place
the value of 100 into the x variable
then on line 2 it's going to place 50
into the y variable
it's going to skip when it gets to line
3 it's going to skip that func that
function definition because there's
nothing to execute but then when it gets
to line seven it invokes the get some
function now remember whenever we invoke
a function it creates a new function
execution context so now we're gonna go
into that so you can kind of think of it
like this we have our global execution
context and then inside that is our
function execution context and at this
point the get sum function is going to
be on the call stack all right and we
talked about that in the last video
so we're going to start off with the
creation phase for the function it's
going to take n1 and n2 which are
arguments but they are variables so
they're going to get stored and set to
undefined and then the sum variable will
also get allocated and stored as
undefined then the execution phase for
the function will start so it's going to
assign n1 and n2 to
150 because we passed in x and y which
are 150.
then it's going to do the calculation on
line 4 and it's going to put it into the
sum variable
and then it's going to return from the
function execution context to the global
with the value of
150 or some
okay so then it will take all that put
it into the sum one
in memory and then we move to line eight
and we do the whole thing over again all
right so we hit a function we go ahead
and uh have a new execution context with
the creation phase and then the
execution phase so hopefully that gives
you an idea of how this all works well
so now what i want to do is jump into
the browser and do the same thing so i
have the code here the exact code we
were just looking at and i'm going to go
to sources
and what i'm going to do is press place
a breakpoint at the very beginning of
the script okay and over here we'll see
the call stack we only have one function
so we'll just see that but we what we
want to really pay attention to is this
scope right here so what i'm going to do
is just reload the page
now nothing has executed because i put a
break point here so everything is paused
however the creation phase has run
and remember the creation is going to
put our variables into memory as
undefined and it's going to store the
the entire function so now over in scope
you can see we have global
so and that's that's our window object
and if we look for the function of get
sum there it is it's right here
and the entire thing is stored the
entire function if we hover over it we
should see that it's um
yeah that it's stored as well but if we
look at any of these variables so
undefined x and y now they are here if
we go come down
we should see x and y yep right here but
they are undefined so at this point the
creation phase has run now we're going
to step through and go through the
execution and you'll see the same stuff
will happen as we as i showed you in the
slides so if i go if i run that piece of
code it's going to store 100 in x so now
if i come up here i wish this wouldn't
change but i've defined it again so now
y is still undefined because it hasn't
executed it's only gone through creation
but x is set to 100 okay now if i click
this arrow again
now y should be set to 50.
so let's go up here and
find y
yep so now x has 100 and y has 50.
now if i go ahead and click this arrow
again it's going to
run this line right here which is the
get sum function so now if we look at
the call stack you should see get sum is
now on the fault in the fall stack the
call stack
and we're now in that execution context
okay so if i come up here in addition to
our global scope we also have our local
scope
and you can see we have n1 and n2 are
set to 150 but some is still undefined
because it hasn't been executed if i
click this again
and we go back up
to our local scope now you can see that
sum is
assigned 150.
so now what i want to do since we we now
know about the execution context you
understand that there's a creation phase
and then an execution phase variables
function gets stored now i want to talk
about hoisting so hoisting is often
referred to as the process where the
interpreter appears to move the
declaration of your functions and
variables to the top of their scope or
to the top of the page prior to the
execution of the code so this is a
pretty elementary explanation of
hoisting now that you understand the
global execution context and the
creation phase you can understand how
hoisting works so let me show you
exactly what i mean
so in javascript we can take let's see
let's just let's get rid of this
and then
actually get rid of that too so i can go
above my function call right here and
even though i created the get some
function below it i can still call it
here in fact i'm going to wrap it in a
console log because it doesn't actually
have any output
so let's say console.log getsome and
then i'm going to just remove this
breakpoint for now and go to the console
and let's reload
whoops we need to pass in
let's pass in x and y
okay so now we get 150. now the reason
that this works should be pretty clear
so
if if you don't understand it just stop
and and think for a second
what what execution context does it has
two phases has a creation phase it where
it adds all of your functions in your
script to
uh an area in memory in the memory heap
and it also adds variables but it sets
them to undefined so the entire function
is in memory before the script is
actually executed before the execution
phase that's why we can use it now a lot
of definitions of hoisting it makes it
sound like the interpreter physically
moves the function to the top of the
page or to the top of the script and
then you can access it so i i don't
really like to explain hoisting without
explaining uh execution context and the
creation phase because i think that
really puts it in perspective into
perspective and and lets you know how it
works so with that said what do you
think happens if i come up here and then
i console log x before i actually define
it
i get undefined the reason for that is
because it's already stored in memory as
undefined
because of the creation phase
now as a lot of you probably know when
you use var var is treated different
than let and const because let and const
are block scoped so i'm going to go
ahead and change this to let and let's
see what happens
so i'm trying to log x which i defined
here with let before i actually defined
it and i get an error that says cannot
access x before initialization
all right so to kind of show you
why this happens i'm going to come back
to the sources tab and let's just get
rid of the console log
and then i'm just going to change this
to let as well
and let's go ahead and
again i'm going to put a breakpoint
up at the top here
and then i'm going to reload
and let's see what happens so we know
when we used var
our our
variables were stored as a set in the
memory as undefined but they were put on
the global scope right so now you can
see that there's another scope here
called script and x and y are set to
undefined if i come down here
there's no x and y on the global scope
that's why it can't find it so it's
actually put in a separate area now
there are some articles and even some
videos when talking about hoisting it
says only functions and and variables
that use var are hoisted that's not true
as you can see right here they are
hoisted they are set to undefined
they're just not accessible and rightly
so you don't want them in the global
scope that's why they're block scoped
and lat and const were introduced into
es2015 for a reason we wanted block
block scoped variables like just about
every other programming language all
right so
as far as how they're stored they're
stored in something called the temporal
dead zone which i know it sounds kind of
like a science fiction movie but i have
a
diagram here it's not that great but it
just shows you how var and let are
different i should say let or const now
var you know creation phase we have it's
put into memory is undefined and it's
directly accessible with let our cons
it's not so we have our creation phase
and then it's in the temporal dead zone
where it's not accessible and then once
it's assigned we can go ahead and use it
all right now even though i mean this is
just kind of my my personal advice but
even though you can do stuff like this
you can define your functions down here
and you can call them above it i
wouldn't recommend it um there's really
i can't think of any good reason to do
it so i i would suggest doing it like
you would with any other language where
you have your declarations for your
functions and your variables above where
you're going to use them
all right guys so hopefully this gave
you some insight into the execution
context and the two phases
hoisting so in the next video we're
going to look at how a synchronous
javascript works under the hood"
7aRjGIhwyQM,"[Music]
hey what's going on guys in this video
we're going to set up a linux server an
ubuntu server from scratch and we're
going to be deploying a mirnstack app to
production now there's a lot of
different ways and there's a lot of
different services that you can use when
it comes to hosting and there's certain
platforms that can take some of the work
out of it for you however the downside
with that is you don't have complete
control over the server so i really want
to just dive in here and not just show
you how to quickly deploy a mirn app
this isn't like uh you know deploy your
app in two minutes type video we're
gonna create a server we're gonna set up
some ssh keys
create a user we're going to get our
files onto the server with git we're
going to set up nginx we're going to set
up a process manager to run our node app
so
it's going to be maybe 30 40 minutes and
as far as a server we're going to be
using lenode which is a cloud hosting
provider and we're going to set up a
linux ubuntu container although if you
want to use a different distro that's
fine i'll be using ubuntu and lenode is
actually sponsoring this video however
the process is the same for any ubuntu
server whether it's from some kind of
cloud service or your local machine
whatever it is and we got lenode to give
us a 60-day 100 credit so that you can
follow along with me absolutely free
you'll get to use lenode for a couple
months you can experiment install
whatever you want on your servers so uh
you can again use that use your own
machine use a different service whatever
you'd like so i just want to just
quickly go over the plan for this video
i do have a gist in the description that
has absolutely everything it's basically
a text version of the video it has all
the commands we're going to run so you
can use that as kind of a supplement but
just to quickly go over the plan here
first thing we'll do is set up a server
and again i'll be using lenode with the
ubuntu distro but if you want to use
something else that's fine
then we're going to set up some ssh keys
so we have to generate some keys on our
client machine and we have to add the
public key to the server and we're going
to log in using ssh keys as opposed to
using just the password
all right then we're going to create a
new user because i don't want to use the
root user so i'll show you how to create
a new user for the server then we're
going to get our app files onto the
server using git and the application
that i'm going to deploy is the goal
setter app that we built in the mern
series that i did about two months ago
if you want to deploy something else
that's fine but i'll show you how to how
to deploy this application and we'll
install any dependencies we'll set up a
mongodb database real quick in atlas and
then once we do that we need to set up
the pm2 process manager to manage um the
running of the application okay so
we'll get it running on whatever port
5000 then we want to set up a firewall
to
block any ports except the ones that we
need which are going to be the http port
https and ssh okay and then finally
we'll set up and uh configure an nginx
server and we'll set up a proxy so that
we can access our app through port 80
which is the http port all right and
then also show you how you can add a
domain through lenode obviously this
this process is going to be different
depending on what you're using what
services but i will talk a little bit
about that afterwards as well all right
so that's it let's go ahead and get into
it
all right guys so this is the gist that
i was talking about and i'll have the
link to this in the description and it
basically has everything all the
different commands that we'll be running
throughout this video so you can use
this as
a supplement to the video
and then this tab is the mirn tutorial
repository it's the goal setter app that
that i did in the the mern series
so that's what we'll be deploying and
then we're going to need a mongodb
database so we'll just quickly set up an
atlas database later on but first things
first we need to set up our server like
i said i'm using lenode but you could
use anything you want
and this link right here is actually
lenode.com
traversie which as i mentioned will give
you a hundred dollars credit so you can
you know follow along with this tutorial
absolutely free if you want so i'm just
going to log in here with one of my
accounts and then in the dashboard we're
going to see this is where you see your
list of what are called the nodes which
are basically just linux servers and i
want to create a new one so i'm going to
click this button here and you can
choose from all different
all different distros here i'm most
comfortable with ubuntu so that's what
i'm going to use i'm going to use the
22.04 long term support and then the
region closest to me i'd say is new
jersey and then as far as packages i'm
going to use the dedicated 4 gig okay so
this is
uh it has an hourly cost but it it caps
off at 30 a month and remember if you
use that link you have a hundred dollar
credit so you have a couple months
and then for the label let's just change
that we'll call this youtube
dash
just call it youtube dash linux
and then the root password so this is
going to be the password for your root
user so let's go ahead and add that
and then for ssh keys
i'm going to show you how to set this up
you don't have to do this you can just
go with the password but it is a bit
more secure if you set up ssh keys and i
just want to show you how to do it so i
do have one stored called windows pc but
i want to create a new one for the
machine that i'm on right now
so if i click add an ssh key i get this
text box here and it's asking me to put
in a public key so you have to generate
your keys on your your machine so i'm
going to open up a terminal here
and
before we generate a key i just want to
show you where they're stored so they're
typically stored in your home directory
whether you're on mac or windows and
then in your
it's a hidden folder called dot ssh so
if i list out here let's say from my
home folder slash dot ssh you'll see i
have a couple here for github okay and
it's going to be a private key and a
public key that's what we're going to
generate
if i wanted to i could use this public
key but i like to keep things separate
so what we'll do is let's go ahead and
run ssh dash keygen
and then what that's going to do is ask
us where we want to save it and what we
want to call it so by default it's going
to be like i said in your users folder
and then dot ssh and by default it'll
call it id rsa now i want to change that
so if if you want to call it something
different you have to put the whole path
here so we're going to do
let's say slash users slash and then
obviously your path will be different
and then dot ssh and i'm going to call
it id underscore rsa underscore lenode
all right and then you can put a
passphrase if you want i'm just going to
hit enter and not use one all right so
now if i do an ls in the ssh folder
you'll see now i have a
private key and then the public key has
the dot pub
all right now the public is what we want
to put in here so there's a couple ways
we can grab it i'm going to use the cat
command which will just kind of print it
out in the terminal so i'll do cat and
then let's do from the home till day is
just a shortcut for your home directory
and then dot ssh slash
id underscore rsa lenode and then dot
pub okay make sure you get the public
key
so it's going to start with this ssh rsa
we want to grab from there all the way
to the very end
and we can just copy that right from the
terminal and paste that in
and i'll just call this mac pro because
that's the machine i'm on
so go ahead and add that now you can see
that it's in there
and that's it we just click on create
lenode
and what it's going to do now is just go
through and provision everything
it usually takes 30 to 60 seconds so i'm
just going to pause the video and wait
until this says running before we move
ahead
okay so now you can see the status says
running and what we have here is our ip
address we have our ip version 4 and 6
and then to log in via ssh we can do
this okay that will log in as the root
user and then down here it's not
available yet but once your server is
running for a little bit you'll see some
analytics here you'll see some network
stats your storage
backups so if you want to take backups
you can get an exact image of a certain
point and then you can revert back to
that exact point if you need to and then
there's all types of stuff over here
volumes node balancers firewalls but
we're not going to really get into
lenode specific stuff because you could
you could do what we're doing here on
any any server
so let's go ahead and try to log in so
i'm going to open up go back to my
terminal here
and
you can see here the ssh root so that's
what we want to do is log in as the root
user so we'll do root at and then
obviously your ip address will be
different than mine so make sure you put
yours
so minus 79158.102
and you'll get this message the first
time you try to log in just say yes or
type in yes and it's going to ask for
your root password that we just we just
set a few minutes ago
so i'm going to
add that
i think that was it
yeah so now we're logged in and if you
want to just use passwords like we just
did that's absolutely fine but what i
want to show you is how we can use our
ssh key and not have to type in a
password in fact i want to disable
password authentication altogether to
make it more secure that way you can
only you can only access the server from
your client
so i'll go ahead and just clear this
stuff up and
one of the first things i like to do
when i set up a new server is just
upgrade my packages
so
if you're logged in as a another user
that's not root usually you would do
sudo
since we're logged in as root we don't
have to
and we're going to use the we're using
the aptitude package manager which is uh
the debian uh you know debian ubuntu
package manager so we just do apt and we
can install packages like this like if i
wanted to install curl or something
so what we're going to do is just run at
apt update
and that's going to update our package
lists
to the most recent and tell us basically
we know how many packages can be
upgraded and you'll see right here 48
packages can be upgraded so now i'm
going to go ahead and run apt upgrade
and i'll say yes
and then this can take
like one or two minutes to do this
so i'm just gonna pause the video and
i'll be back when it's done
all right so now that that's all set i
want to create a new user and you can
see we're logged in as root it says root
at localhost but you can also use the
command who am i and that will always
show you who you're logged in as so to
create a user we can just use the add
user command and then whatever we want
to call it i'm going to call the user
brad
and that will create a user we want to
add the password that we want to use
okay and it's going to ask for some some
information but you can just enter
through all these
yes all right so now we have that user
and if i do id and then the user name
it'll show me the user id along with any
groups that that user belongs to
now
i want this user to to be able to run
commands as
with root privileges so we want to put
it in the sudo group so we can do that
by saying user mod we want to modify
this user and then dash lowercase a
uppercase g
and then we want to put the
pseudo group and then the name of the
user which for me is brad all right so
now if we do id brad again it should say
sudo
all right now
as far as the ssh keys go i want to be
able to log in as this brad user with
ssh keys and the one we added was for
the root so we actually have to add our
public key for for this user for every
new user you create now every user has a
a directory in the home directory so we
want to cd into slash home slash brad or
whatever whatever you called the user
and then from here we want to have a dot
ssh folder just like we have on our
client so i'm going to make a directory
and i'm going to call it dot ssh
and then we're going to cd into dot ssh
and then from here where we want to put
our public key as a file called
authorized keys so we can create a file
in linux with the touch command so we're
going to say touch authorized
underscore keys
okay so now if i do an ls we should see
that file and now we want to edit that
file and i'm going to do that with a
text editor called nano so i'm going to
say nano and then authorized keys
oops
authorized keys
and now i'm in that file so and it's
obviously empty because i just created
it now to get the public key i'm just
going to open up a new terminal just say
new window here
and from here i'm going to do the same
thing where we use the cat command to
get the key so i'll say cat and then
from the home directory and remember
this is my local machine this is not the
server so my home directory i'm going to
go into dot ssh
and i want the id underscore rsa
underscore
lenode and i want the public key so we
want to put dot pub
okay then we can go ahead and just grab
this
just make sure you copy it correctly
from front to
front to back or front to end so we'll
copy that and then i should be able to
just paste that in here
yeah and then we'll just go ahead and
command or control x and then hit y to
save and then enter
all right then we can close this one up
so now we have the keys in in that file
so before we move on i want to disable
password login and this is optional you
don't have to do this but it is a good
security measure to take
so we're going to edit a certain config
file actually i don't need sudo because
we're in root but let's say nano and
then the file is going to be in slash
etc
ssh slash sshd underscore config which
is like the ssh config file
and i'm going to page down here
and i'm looking for that right there
password authentication which is set to
yes right now
so i want to set that to no
all right so we can set that to no and
then there's also this right here permit
root login so sometimes people will set
this to no so that it's it's not even
possible to log in as root but i'm just
going to keep it at yes and let's do a
controller command x hit y and then
enter
and now we have to do is just restart
the sshd service so we can do that with
system
ctl
and we want to restart
sshd
okay
so now
we should be all set to log in as as
brad
with our ssh key so i'm going to go
ahead and log out of the server with
logo
and now you can see i'm back on my local
machine brad traversing at mac pro and
now i'm going to try to ssh in
but i'm not going to use the root
account i'm going to use my new user my
brad user
so you're probably going to see this
permission denied and when you get this
i put this in the
the gist here so basically we have to
run two commands one is to start up the
ssh agent and one is to add the the node
key to that ssh agent all right so let's
go back here and let's say we do this
with eval
and then
some backticks ssh dash agent
and then dash s and we should get back a
process id
okay that's not really important to us
but that's what we get back and then we
can do ssh dash add
and we want to add let's see from
the home directory remember i'm on my
local machine here so home directory dot
ssh and we want id underscore rsa
underscore lenode and that's our private
key
so it says identity added now let's try
again
to log in with the brad user and there
we go so now we're logged in we didn't
have to enter any password and you can
see it says brad at localhost localhost
is is the name
that's configured with my server i can
change that if i wanted to
all right so let's clear that up and now
we're in the server logged in as brad or
whatever whatever you used
so before we get our files onto the
server to deploy we do need node.js if i
do a node
version we're going to see command not
found because node is not is not
pre-installed there are images that you
can use with lenode to get stuff
pre-installed but i usually prefer to
just start from scratch
so to install node is obviously a little
different than we would do on windows or
mac because we don't have a gui right so
we have to do it all from the terminal
but it's it's not difficult at all it's
basically two commands so the first one
is a curl command
and you can see this this deb node
source this is for version 18.x so the
latest version and just to show you
where i got this from if we just search
for node.js
install debian
and click on this link you'll see all
the different linux or all the different
operating systems here and if you see
you can see this debian and ubuntu
and then if you click on node.js binary
distributions takes you to this this
readme file here and then installation
instructions and it just shows you the
commands for each version of node so
obviously we want the latest version
that's where i got this all right so i'm
just going to grab that curl command and
let's just copy that
and we can close this up
and then i'm just going to paste that in
here
put our password this is your new user
password not the root
all right so now since we did that we
should be able to now just do um
use apt so no
not node sudo
apt
install and let's just add dash y here
and then nodejs
so this will install both node.js and
npm if you see this screen just hit
enter twice
okay so now if i do a node dash version
it'll show that if i do npm dash dash
version
you should see that as well
all right cool so now that we've done
that we want to deploy this this goal
setter app this mirn tutorial repository
so
what we're going to do is clone it with
git
and git should already be it's already
on the system so if we do
get version you should see that it is
installed and then
right here under code i'm going to go to
clone and
you could set up your ssh key on the
server for github but i'm just going to
use https so i'm going to copy that that
url
and then we're just going to
figure out where we want to put this app
on on the server so right now we're in
the our home directory which is empty
uh so what i'll usually do is create a
new directory called like sites so we'll
do that and we'll cd into sites and then
from here we'll run git clone and then
i'll paste in the link i just copied or
the url i just copied
and let's run that and now if i do an ls
in my sites folder i now have the mern
tutorial so i can cd into mern tutorial
and if i do an ls we should see the
files and folders
now you have to go to the project and
kind of follow the steps to to get going
now this is a mirnstack app so we do
need a uh mongodb database and you
can see it says rename the env example
to dot env and add your uri
so the easiest way to create a mongodb
database is using atlas
which allows you to create a mongodb
database in the cloud so i'm going to go
ahead and log in with an account that i
just cleared up for this
i think it's this this account here
and i just cleared everything out so if
you don't have an account just create
one
mongodb.com and now
it probably asks you to create an
organization which i already have and a
project which i already have called
traversing media and then we can create
a database so i'm going to say build
database
and this is absolutely free if we use
the shared account so let's choose that
we're going to just leave aws as the
provider
cluster 0 as the name and then create
cluster
okay once we do that we can just add a
user i'm going to say brad1234
password i'll do the same thing
and click create user
already exists
oh oh wait a minute
oh i forgot i already had that user okay
we'll just just create a new user looks
like i already have one and then here
this is really important because we need
to specify where we want to access the
database from
so we're using a server that's in a
cloud environment so i'm going to choose
that
and then right here under ip access list
we'll click configure and then we just
want to grab the ip address of the
server
okay we want to let we want to let atlas
know that this it's okay to use this
database from this ip address and you
could add a comment in here if you want
add entry
and we should be all set if you're
working from your local environment as
well you might want to add your current
ip address but i'm not i don't need that
so i'm just going to click finish and
close
and we'll click go to databases
and then this animated border this is
just telling us that it's setting
setting everything up this can take like
one or two minutes or one to three
minutes as it says all right so i will
be back when this is done
okay so now we're going to do is click
on browse collections and you would see
any data in your database here obviously
we don't have any but i'm going to click
add my own data because i want to create
a database with a specific name and i'm
going to call it goal setter all right
and then the collection name if you want
you can add a collection we'll create
the goals collection and this isn't
mandatory but i just want to specify a
database name otherwise it'll just
create uh it'll create one called test
and it'll use that
so let's click create
and then we're going to go back to
overview and then click connect and then
from here we'll say connect to our
application and we want to copy this
string right here now there's a couple
things that we need to change here so
what i'll do is just open up
let me see i'll just open up a new
sublime text file doesn't really matter
and i'm going to paste this in
and there's just a couple things that we
want to change here one is going to be
the password so this brackets password
you want to change that to the actual
password and then after the slash we
want to put the the name or like i said
it's going to use tests so the name is
goal setter
and that should be good so now that is
what we want to use so we want to whoops
oh
we want to copy that
and we can close this up and then if we
look at the github
uh readme here it says that we need to
add it to the the dot env
okay we have to rename env example now
we don't see in the example here because
it's hidden it starts with a dot so it's
a hidden file but if we do ls dash a we
can see hidden files and you can see
env or dot env example so we can rename
that with the move command mv so we'll
say mv and then dot env
example and we want to rename that to
just dot env so now if we do an ls-a
again we have that dot env file and
that's what we want to edit so let's say
now we have to do sudo so sudo nano dot
env
and now a couple things we want to
change first is going to be the
the environment here i want to change
that to production
so development we're going to change
that to production
and then we want to put our uri here
so let's get rid of that and then we
should be able to just
paste right in
okay there we go i know it looks a
little weird but it is there if i come
over
you'll see that the whole thing is there
so now we want to command or control x
hit y to save and enter and now that
should be all set
so we also need to install our back end
dependencies and our front-end
dependencies
so that's pretty easy let's go ahead and
right now we're in the root so that's
where we want to run npm install or npmi
and that installs all the back end
dependencies like express and mongoose
and anything else that we used in the
api or in the back
end and then after that we can cd into
the front end and install the front end
dependencies so let's do that cd
into front end
and run npm install
now the way that this works let's just
take a quick look at the code in this
the back end server js that's the entry
point on our server
so if we're in production
right here it's going to check and see
if we're in production then it's going
to look for the the react build folder
which is going to be in front end build
because you know when you build a react
app you run npm run build and it creates
all your static assets in that build
folder so what we're saying here is if
if we're in production and we hit any
route we're going to
uh we're going to display the index html
that's in that build folder so we're not
running like the react dev server or
anything in production that's that's for
development
um if we're in production we're just
we're using the built assets so we do
have to run npm run build from the front
end so the dependencies are installed
now we'll just go npm run build make
sure you're in the front end on your
server
and that will create this
this front-end build folder and then the
server will look for that
okay so creating optimize and there's so
many different ways to do this
you can set it up so that this runs
automatically i mean
what i'm showing you is just kind of the
bare bones
um just so you can learn that and then
you can look for you know
more complicated stuff later
or more complicated setups i should say
once you get everything set up it's easy
i mean once we we do all this
all we really have to do is is push to
our repo and push to production
so let's clear this up now
if we cd dot dot back into the root of
our app and we run let's say npm start
we can see that it's running on 5000 and
if we were to go to i'm just going to
copy the ip address
obviously yours is different
and then if we go to
that if we if we don't put in the port
it doesn't work right because that's
port 80. but if we do colon 5000
there it is is our app
now there's a couple problems here one
we don't want users to go to port 5000
and and just pretend this is a domain
you can add a domain easily but we don't
want users to go to 5000 we also don't
want to have this running like on our
client if i stop this
you know if i stop this here and i
reload it doesn't work so that's where
pm2 comes in which is a pro
process manager for our application
all right so to set that up we want to
install it globally so let's say sudo
and then npm install dash g for global
and then pm2
okay so basically this is going to
handle starting stopping restarting
showing us the logs all that stuff
so to start up our application we simply
do pm2
start and then our entry point which is
backend slash server
dot js
all right so now you can see
it has an id of zero the name of this is
server right so if we want to like
uh
stop it we would do pm2 actually i'll
just show you we can do pm2
and stop and server
and now you can see the status is
stopped so i'll start it back up pm2
start
server
now it's online and if i go to
local not localhost this
ip5000 then it works
but we still have the issue of this
being port 5000 so that's where engine x
comes in
um but before we install and set up
nginx i'm going to enable the firewall
because we don't even want people to be
able to go to port 5000 or any port
aside from 80 443 and 22 because that's
http
https and ssh
so we already have a firewall
with linux ubuntu and it's called ufw so
we can say sudo ufw enable
and we'll say yes to that so now the
firewall is active if i come back over
here and reload
even though my app is running it's not
going to work because we're not we can't
access any ports right now okay so
everything is closed
so to open the ones we want
we can just we can put in either the
port or we can put in the name of the
service that runs on that port
so for instance we can do ufw allow
and then ssh
so that will add that rule or open that
port we also want http
and we also want https
okay so now what we need to do
is install nginx because that's what we
want to use for our web server we want
to have a proxy that allows us to access
our application
that is initially running on 5000 to
access it through port 80 which is the
http port which is the the default port
when you don't add you know colon
whatever
so let's install nginx we'll say sudo
apt install
nginx
yes
okay so that is we just want to hit
enter here twice
so now it's installed but we have to
configure it so there's a file we need
to edit so we'll say sudo nano and this
is going to be
etc
nginx slash and then sites
dash
available and then slash default
okay we're just going to page down here
until we see this server block so server
and then some
open parent curly braces
and down here
you'll see this location block and also
server name
now later on when you add a domain
whatever domain you choose you want to
put here so
i have a domain for instance called
app002
so i'll put that here we want to do that
we also want to do the www version so
app
002.dev
okay now as far as the location
this block right here
let's just get rid of all this stuff
and then in that gist i have
i have what you need to put in here
so let's go over to the gist
and
we already did all this
this right here so we want this proxy
pass
and that's where we put the local hose
5000 that's where our port is our app is
running and we want to add this the rest
of this stuff for our proxy so what we
can do is just copy this everything
that's inside of that
that location and then let's
come back over here and we should be
able to just paste that in between the
curly braces
and we'll just bring whoops we'll just
bring that back
alright so that should do it as far as
this file goes so let's go ahead and
commander control x hit y and enter
and now we just want to restart nginx
and if you want to check the
configuration you can do that with
nginx
t and it says that the syntax is okay
the test is successful and now we just
want to restart nginx we can do that
with sudo service
nginx
and then we just want to restart
all right so we should be good if we go
back over here and we go to just
just the domain not
port 5000
there it is
okay so our application is now deployed
and you can add a domain name through
lenode or through whatever you're using
but let's go ahead and just register a
user here we'll say john doe
john at gmail
oops
and let's submit
there we go welcome john doe just ignore
that thing
goal we'll just say goal
1
there we go we can add a goal we can
remove it we can log out
so now it's deployed now as far as
domain names if you are using lenode you
can go to
domains
and actually already have
two here but actually i won't delete it
but if you click create create domain
you just put in your domain
and then you can choose insert default
records from one of my nodes and then
you can choose the node you want to use
that domain with all right then it will
show up here and if you click on it
it'll show you all kinds of stuff like
the name servers the uh a records
all that stuff
um
actually this isn't for that you know
what i'm just going to delete this
i'm going to delete that and
say create domain i'm going to use that
you just need to enter an email address
too and then i'm going to choose the
youtube linux
now these name servers ns1 through
ns5.lenode you would put in your domain
registrar so for instance i use
namecheap
[Music]
so you would just log in and find your
domain which is this one right here
click manage
and then right here it says name servers
i could say custom dns
and i could add in ns1
so we actually need five
so we would do that and then
let's see that would be two
oops
three
four and five
and click the check
and then that's going to take a little
bit to propagate as you can see here up
to 48 hours so you might have to wait a
little bit but it should uh it should
connect and then as far as ssls you
could
like from name cheap you can see i have
a ton of them here um
you could purchase one and you could
install it or an even easier way and a
free way is to use let's encrypt and i
actually included the commands down here
for that as well
okay so you should be able to run these
and and create an ssl absolutely free
but yeah i mean that's it
there's a lot more to you know
deployment and devops but
i'm not gonna obviously get into it in
this video i think that this is a good
it gives you a good understanding of the
basics of you know how to set up a
server and so on um you can get into
like docker and using containers and in
kubernetes you can see there's actually
a
you can use kubernetes with lenovo as
well
um you can set up databases as well we
use something different like we used a
third-party database with with
atlas but you can set it up through your
terminal or you can even do it through
the interface here
alright guys so hopefully you enjoyed
this and learned something from it and
i'll see you next time"
vxqBm6_0vyk,"[Music]
what's going on guys so in this video
we're going to be looking at pi script
which is a new framework that allows us
to
write python and use python packages
within the browser within our html which
is really cool now i have seen some some
memes on twitter and some youtube videos
saying you know is this going to replace
javascript or is javascript doomed and i
really hope nobody believes that because
we're not going to be using this for the
same stuff we use javascript for like
basic front end dom manipulation
fetching data from a server and
displaying it etc
where i see this being really valuable
is with like data science and bringing
those powerful python packages like
pandas and and numpy being able to use
those within a browser environment i
think uh is going to be really useful
and really powerful all right so it is
an alpha it's it's very very new um
there's not a lot of content on it so
this isn't going to be like a full crash
course where we build a larger project
we're just going to mess around with it
so if we go to pi script.net you'll see
that we have some html tags and then
there's a pi script tag and inside that
you can write any python you want just
like you can write javascript within a
regular script tag and to get set up
there's there's an install button but if
you click on it it says just kidding you
don't need to install anything and you
do need to include this this pi script
js
all right and then there's also a pi
script css which i believe is just
tailwind it has all the tailwind classes
and then of course you could download
those files if you want
and if we come down here it tells us a
little more about how this works and it
works using webassembly or wasm along
with this piodide so piodide is a python
distribution for the browser and i
believe node.js as well and it's based
on web assembly so it makes it possible
to
to run python and install python
packages in the browser and it uses
something called micropip
so
some bullet points here just to quickly
go over
so external hosting application hosting
there's no reliance on server side
configuration okay so python in the
browser we can use the python ecosystem
we can install different pat or use
different packages
python with javascript i thought this
was pretty cool it has bi-directional
communication between python and
javascript objects and namespaces so you
can actually write python code and
javascript code right right with each
other
which felt a little weird but i can see
that being really useful and and you can
even access uh you know browser web apis
with python
so environment management you can define
what packages you want to use and what
files you can have multiple files um
visual application development there's
ui components like buttons and lists and
containers
so yeah i mean like i said there's not a
lot of content on this but if you go to
this link here project home on github
and then you go to pi script js and then
examples there's quite a few examples
here to get you familiar with like how
this works and that's what i did i just
cloned this onto my machine and i just
went through some of these and a lot of
these use other packages like bokeh and
d3
what else numpy
and then there's also this to do html
and this is kind of how i saw
how we can actually
use the dom for with python so if you
can see here there's an input and then a
button and this button has a has this
this pys on click which points to an add
task function which is a python function
and if we go into to do dot pi you can
see
the add task function
and this shows you how to
basically select from the dom and
how to how to take in inputs and create
tasks so this is a nice little project
to see how things work especially if
you're not familiar with
you know these other python packages
so let's go ahead and just jump right in
i'm going to grab those two files so
right here we want the
script tag and the css link we're going
to copy those
and let's make that smaller and then i
just have just a
empty folder here in vs code and i'm
going to create an
index.html
and let's just create a boilerplate and
we'll say pi script
demo and then i'm just gonna paste in
those
two links there and then we should be
all set so i'm gonna open up live server
and we're going to see this loading run
time and we just have a blank page
obviously because we haven't done
anything so in the body we can go ahead
and create a pi dash script tag
and in here we can write python so for
instance we'll create a variable called
name just set it to a string of brad and
then i'll print
that name now i'm going to have an issue
when i save and a lot of you guys might
as well
so i have format on save enabled with
prettier and you can see this is not
going to work python is very strict with
indentation and formatting so we have to
shut that off and you can do it globally
or you can just create a new folder
called dot vs code and then inside here
we can create a file called
settings.json
and we'll create an object and we want
to use editor
editor dot and then format on save we
want to set that to false
so now if we come over here and fix this
fix this formatting
and then save now it's not going to
format automatically and we should just
see brad on the screen
now we can put any python we want in
here if we want to define a function
like let's say get some
something very simple and x y
and then we'll return from this x plus y
okay and then we'll create a variable
called sum and set that to get some
we'll pass in 5 and 5 and then let's
just print
so we'll say print
sum save
and we should get 10.
all right
now like i said you can
you have access to
some javascript objects and namespaces
so for example if i want to console.log
some i could do that as well right from
within my my python code
so if i were to open up my console we
should see
somewhere we should see 10 right here so
you can see that's getting logged in the
console
now at the moment we're just printing
this out on the screen we're not
targeting it so usually if you have some
output you're going to want to
specify where that goes so let's go
above the pi script tag and let's have a
div with the
id of output and what we can do let's
say we want to put this this sum value
in that div we could go ahead and say pi
script
and then do a
dot write and that's going to take in
two things the first is going to be an
element with the id where we want to put
it the value in the second will be the
value so if i save that we're still just
going to see 10
on the screen however if we go to our
chrome tools and i go to elements you're
going to see that that 10 is actually
inside of a div with the id of output
all right and i'll actually add
let's add a class
class to this of we'll say text dash
3xl because we have all the tailwind
classes available to us because of this
pi script css
all right now before we move on here i
just want to show you another tag that
we can use called pi repl
and if we just do that and save you're
going to see that now on our right on
our web page we have a way to just
access our python interpreter so for
instance i could set a variable here and
then just say x
and then run that and i'll just get a
hundred i can even access my code here
so if i want to use that getsum let's
say
we'll say getsum and then i'll use that
x value and then let's add another 100
to it and we should
get 200
all right so you can do that as well but
i'm just going to comment out that rebel
now if you wanted to use
let's say a module from the python
standard library let's actually just get
rid of this
so let's say we want to use math we
could import math
and let's say in our output we want to
do
math dot
square root
of 10
save that
and that should output the square root
now let's say we wanted to import numpy
which is a
very popular package for data science
and mathematical operations arrays and
so on so if i try to let's say import
numpy
as np
and then we'll come down here actually
let's create
an array
so we'll say array equals np dot array
and then we'll pass in here an array of
just we'll just do some random numbers
all right so we have some random numbers
and then
here in our output let's
let's just output the array like that
and we should get
an error message
so we get this message here no no module
named numpy so if we want to use a
package like this we have to define it
in our environment and the way we do
that is in the head
so we'll go right in the head here and
we're going to use the pi dash env
tag
and then any any other files or packages
that we want to use we need to define
here so we just simply say say hyphen
and then numpy
and we'll save that
and now we get our array so now we're
able to use that package we don't have
to do any kind of like installation or
anything like that so very very powerful
so if i wanted to let's say just want to
put the array i don't want this the the
array type around it we could use an f
string in python so we could go like
this
and then wrap that
like that we could even say like my
array
is and then
save that
and it should just print it out my array
is and then the array
now you're probably not going to write
much python from within your html file
within a pi script just like you
wouldn't really do this with javascript
you'd have a separate file so let's
create another file here i'm going to
call it main dot pi
alright so a python file and then i'm
just going to grab what we have here and
cut that
paste that in here
let's fix this up a little bit
all right and and you'll probably get
some swiggly lines like this
i don't have any kind of i couldn't find
any extension to fix that so we'll just
deal with it for now but i want to
include that file right so if we come
over here
we can add
let's say source just like a javascript
file and then dot slash main dot pi
all right so if we save that we should
see the same result we're just targeting
that output div and we're putting in
this my array is now ultimately what i
want to build here is something very
simple and kind of silly but just to get
you understanding how this stuff works
we'll have the array
the numpy array and i want to have a
button that we click
to shuffle it around
so let's go ahead and actually add add
some styling onto this i want to put
this array in the middle of the page i
also want to remove the my array is i'm
going to keep the f string though
because i don't want to have that array
parentheses around it
so we should just see
the array now we'll go ahead and just
add let's do a main tag and we're going
to do container
and
i want it to be the entire height so
we'll do h dash screen these are just
tailwind classes
and then let's do flex make it a flex
column and we'll center everything let's
say items dash center
and justify dash center
and then we're just going to move that
id of output into that and then that
should be right in the middle
all right cool so now let's create a
button underneath it so under that div
i'm going to create a button and give it
an id of shuffle
and then let's just add some classes so
mt4 p
2 will do
text dash white and background will be
blue 600 and rounded
and then we'll say shuffle
save that we should now see our blue
shuffle button
now i want to add an event listener
we're going to do this with pi script so
let's add on to this
an attribute of pys so pi script dash on
click and we're going to set that to a
function called shuffle underscore array
and then we want to create that in our
main dot pi
so we'll go ahead and define
shuffle underscore array and this is can
take in args so we're going to do star
args
and we want to
go ahead and actually you know what
before we do
before we actually do the shuffle let's
just do pi script dot
write
and we'll replace let's say output for
now we'll just replace it with hello
just to make sure the button actually
works
all right so now if i come over here and
i click this
okay so now that turns to hello so to
actually do the shuffling
i don't i don't really work with numpy i
don't know it very well so i found a
solution to use the random module so
let's say import random
and then we're going to come down here
let's
go right here and we'll say shuffle and
we're going to
set a variable called shuffled and set
that to a function called our sorted and
then that's going to take in our array
and then a key
key equals lambda
and
then k colon
random and then we're just going to call
the random method here
and that should shuffle it so if we
replace this now with
shuffled
let's save that
okay so now if we come down here and i
click this
there we go so now it shuffles it and it
prints it back out
now
obviously this is very simple and kind
of silly but i just want you to pretend
that we're doing some really advanced
data science stuff with numpy all right
and we're able to do that and have it in
the browser have events change things so
that's where i think that this is going
to be you know really helpful
all right so let's um there's a couple
other things i want to show you
to target an element we can use this pi
script dot write but there's we can do
it in more of a javascripty kind of way
so i'm going to go up to the top here
and create a variable called output l
and we can set it to capital e element
and then whatever id we want like output
all right and then we can do uh
console.log
of let's say output underscore el
and then we'll save this let's open up
our console
and what that gives us is this this
object right here this proxy
so it doesn't give us the direct element
if we want the direct element we have to
actually add on to it dot element like
that all right so let's go ahead and
save that now and see what it gives us
all right so now you can see the actual
div
with the the data inside so it gives me
the actual element and instead of doing
this this pi script
dot write what i could do is
i could say output
element and then we could say dot inner
html equals and then we could set that
to an f string with
the array
in it
so let's get rid of that console log so
this is more of like a javascript
friendly way of doing it and then down
here we could do the same thing
um
so we would just take this
we'll comment that out
paste that in and we'll set that to
shuffled so now that should give us the
same same exact functionality
so now if we click that now it shuffles
so you might want to have
you know more python files that you want
to import that you want to bring in so
let's create a new file called utils.pi
and i just want to give you an example
of bringing in something from a separate
file so i'm going to have a utility
function to add a css class so let's say
define
add underscore
class and we want this to take in two
things the element itself and then the
class name that we want to add
okay and then here we're going to say
the element
and then we want the classlist object
and we're going to call add
and then we want to add the class name
oops we're using the syntax class name
all right so we'll save that and i want
to be able to bring this add class
function into my main dot pi but to be
able to do that we need to add it to our
environment so here where we have the
the pi inv we have our numpy package if
we want to bring in any external files
that we want to define here paths
and then we just want to define each
file so we want utils.pi
like that
okay so any packaging packages you use
any files you use you're going to put
here it's almost like a package.json
so
in our main.pi now let's bring that in
so we'll say from
utils
we want to import add underscore class
okay so now we should be able to use
that function and all i want to do is
make it so that when we click shuffle we
add a color class and change the color
of the array so we'll do that right here
let's say change
color
and we can call add underscore class and
the element that we're changing is
output l
and the class that i want to add let's
say
text dash blue dash 500.
all right so now i'll come over here and
click that shuffle
and there we go so now you can see it
turned blue because it added that class
all right so the real power here is the
the ability to use a package like numpy
within the browser within the front end
without having to set up
you know python on a server and
installing packages i mean we can just
set up our environment like this and i
think that that is is huge it's not
about just being able to simply traverse
the dom with python
versus javascript that's stupid why why
even bother making something like that
um the the real advantage here is is
being able to use the power of python in
in the packages that it comes with in
the browser so hopefully that's clear
it's it's not about building this silly
little application just pretend that the
the shuffle was like some crazy data
science functionality i don't know i'm
not really into data science uh it's
something that i do want to look more
into though
uh but that's it guys hopefully this you
learned something from this video i
would suggest going and playing with all
the examples that are offered to kind of
you know wrap your head more around this
but that's it thanks for watching and
i'll see you next time"
QsH8FL0952k,"[Music]
hey what's going on everyone so it's
dennis ivey here and i'm filling in for
yet another video on brad's channel and
in this one i'm going to be teaching you
about webrtc while we build out two
awesome video calling applications so
what i'm going to do here is first give
you a high level overview of what webrtc
is and how it works and then we're going
to move on to our first project to
implement everything that we learned so
the first project is going to be a
simple peer-to-peer video call an
application and in this project we're
just going to have a lobby where we can
go ahead and join a room and invite
another user with some kind of room id
into our room so in this room you're
going to be able to have video calling
functionality like muting your mic
toggling the camera and that's about it
for that application and all in all that
project is going to take up about an
hour and 10 minutes of this video now in
the second part we're going to move on
to a group video calling application now
this second project is going to take up
a little bit more time in the video and
that is because of all of the
functionality that i added into it i
really wanted to make this special so in
this project we have a group video
called application with the ability to
actually have full controls along with
the ability to share your screen with
that we're also going to be able to see
all the room participants and have
real-time chat inside of that room so
users can actually communicate in real
time and one of the cool things i wanted
to add in here is that feeling for like
a discord clone maybe a twitter spaces
application where users can join the
application and all their video frames
will be in those little circles and if
you actually click on one of those
circles you can actually put a user into
focus and then switch between any user
that you want to put into that frame and
then you can also go back into group
video calling mode where everybody is
inside of that frame one thing i wanted
to mention is that there should be a
link to the live demo down in the video
description for project number two so if
you want to go ahead and test that out
i'd highly recommend checking it out
before getting started and just check
out all the features and see how things
work before we continue so with that
being said while project number one does
use webrtc project number two will use a
third-party service called agora so
agora will give us an sdk for the group
video calling functionality along with
real-time messaging and agora is a paid
service but they do have a great free
tier that gives us 10 000 free use
minutes each month and that should be
more than enough to complete this video
and have your own demo so test that out
and agora actually does not require a
credit card on file to get started so
anybody should be able to go ahead and
get started now if you're only
interested in one of the projects in
this video i'm gonna make sure there's
timestamps down in the video description
so you can actually find out where we
work on each project and just skip
through because project number one and
project number two don't have anything
to do with each other so you can
actually start straight with project
number two
and continue there so if you're here
just for webrtc you can only complete
the first part you don't have to worry
about the second part or you can just go
ahead and start at part two so now that
we have that taken care of let's go
ahead and run through a couple of slides
and we're just gonna go ahead and do an
introduction to webrtc and i'll give you
that high level overview before we get
started with project number one okay so
before we get started i just wanted to
let you know that these slides right
here will be linked to the video
description if you want to access them
along with a detailed article to go with
this so that'll be all linked up you can
go ahead and check that out once the
video is posted and let's go ahead and
get started so first of all what is
webrtc so as i have it in the definition
here webrtc is a set of javascript apis
that allows us to establish a
peer-to-peer connection between two
browsers to exchange data such as audio
and video all in real time so this is
real-time communication so the thing
that makes webrtc so special is the fact
that the connection is between two
browsers and the data that transmits
between the browsers never actually
reaches a server so it doesn't mean that
we don't need a server involved at all
but as this picture shows right here
let's say we have two clients that data
is transmitted directly once the
connection is made and never has to
reach that server so this makes webrtc
ideal for exchanging audio and video
because any latency that would be added
by having to hit the server first would
actually cause a slight delay
so i know some of you are thinking if
it's real-time communication this sounds
a lot like web sockets so websockets and
webrtc are similar in a lot of aspects
so i want to break down what websockets
are and how that functions and then
we'll make some comparisons on when you
might want to use one over the other so
websockets the connection is peer to
server right here so we have a browser
to server connection versus webrtc where
the connection is browser to browser so
one is peer-to-peer one is peer to
server so they both allow us to
communicate in real time but with
websockets let's say peer one right here
wanted to send a chat message to pr2
they would send the message that message
would go to the server and then out to
peer two now if peer two wants to
respond they would send that message to
to the server and then out to peer one
so there's a little bit of latency with
websockets and having to first go to the
server but it happened so fast that half
a second or maybe a second wouldn't
really make much of a difference for
something like a chat message or a
notification but
if we wanted to send audio and video
data through websockets that latency
would be very noticeable i'm sure we've
all been on a call or seen a video where
the two people are talking there's a
little bit of latency and they're
talking over each other so that creates
a pretty big issue right there so this
is where webrtc thrives so by not having
to reach the server first the connection
is directly between the two browsers and
that video data can be exchanged or
audio data can be exchanged much faster
now with that webrtc uses udp as its
protocol to transport the data and udp
is very fast and more on that in a
second
so if webrtc is so fast why would we
need websockets if they both give us
real-time communication and one can
transfer data faster for us it seems
like webrtc is the optimal path here any
more speed in our application always
seems like a better thing here so
there's some limitations to webrtc so
let's talk about this and then when you
might want to use one over the other so
first of all
webrtc uses udp and udp is not a
reliable protocol for transferring
important data so the way udp works is
that it sends data really fast but it
never validates if the data was received
so because of that if we're sending
something like an audio or video data
if we lose a couple of frames from our
video it's no big deal it'll catch up
your video might look a little bit funny
for a second but everything will turn
out and it's not a big issue if we're
sending something like a file to someone
if we lose a couple of bytes of data
from that file that entire file can be
corrupted so because of that udp is not
reliable you would not want to use it
for sending important data now also with
webrtc there is no built-in signaling so
this means that you can't just use
webrtc and make a connection webrtc
actually leaves it up to us to make that
initial connection and then once a
connection is made then webrtc takes
over so this is where websockets and
webrtc actually go good together we
would use a process called signaling
with websockets we would send the
information between the two peers the
connections made and then webrtc takes
over so webrtc has its limitations in
that way
so how does all of this work so i'm
going to give you a quick example first
and then we'll actually start breaking
down the details of this but at a high
level overview we have two peers and if
they want to communicate we would have
one peer initiate a connection and they
would say hey you want to chat and they
would have to send this message out to
peer 2. so they would send out a message
it doesn't matter how it's done this can
be done through signaling they can send
that message through an email a tweet
it's irrelevant but that message would
contain some information about this peer
right here so they would have to send
their network information to peer two
now if peer two accepts this offer they
would go ahead and send some information
back to peer one the means of
communication right now is not relevant
but the second that information is
exchanged data can begin to flow and now
the two peers do not need a server
involved they can start transmitting
data so this can be audio and video data
and that connection is made so what
exactly are we sending between the two
peers and how are we sending this data
so as i mentioned earlier that means of
communication in the beginning is
actually irrelevant that could be a
tweet or an email but usually this is
through a process called signaling
that's a more practical way of putting
this into an application
and that can be through websockets or
some kind of third-party signaling
service it doesn't really matter so
you'd get the two peers in some kind of
room so they can at least know about
each other then they would transmit the
initial data now
in that data there are two main
components there's a session description
protocol an sdp and some ice candidates
so first of all both peers will need to
exchange a session description protocol
one in the form of an offer one in the
form of an answer and a session
description protocol is simply an object
containing some kind of information
about both peers usually like the codec
address media type audio and video so
just a bunch of information about your
network and how to connect to you so
both peers will need to know about each
other's network now along with
exchanging session description protocols
between the two peers both peers will
also exchange a series of ice candidates
and an ice candidate is simply a public
ip address and port that could be
potentially used as an address to
receive data so each peer will typically
have multiple ice candidates that are
gathered by making a series of requests
to a stun server and they are exchanged
between the two peers so we'll actually
get into this exchange process and we'll
go more into detail about what's
happening so
exchanging session description protocols
and ice candidates so right here we have
two peers right here and we have a
server and then we also have stunt
servers that we're going to connect to
so we'll go through that process again
the one that we went through in that
high level overview and the first peer
will say hey let's connect here's my
session description protocol so it'll be
sent to the server through a signaling
process and sent to peer two now peer
two will receive that sdp
and they can accept it and they'll say
hey sure here's my stp let's connect the
second that's exchanged the two peers
are connected but data can't start
flowing yet they've simply made that
connection
so before data can start flowing between
the two peers we still need to
coordinate the discovery of our public
ip addresses so that's because most
devices nowadays sit behind firewalls
and nat devices so to do this we're
going to use a method called ice so this
means we're going to make a series of
requests to a stun server get our ice
candidates and then transfer them
between the two peers and a stun server
is not something that you're going to
have to worry about setting up it's
really cheap and easy to maintain so
there's a lot of publix done servers and
in our example we'll use a google stunt
server so let's go ahead and continue
with this process
so what's going to happen here is once
the sdp offer and answer are exchanged
this peer right here will go ahead and
ask the stunt server hey what's my
public ip address now the stunt server
will reply and they'll send over a
series of ice candidates to this pier
and this pier will send over the ice
candidates to pier 2. now pier 2 will do
the same they're going to go ahead and
request make a request to the stun
server and say hey what's my ip address
or public ip stun server will respond
and the ice candidates are exchanged now
once we find where the network finds an
optimal path to communicate through with
these ice candidates
data can start flowing between the two
peers and that entire connection is
complete
now i wanted to talk about one more
thing and that is trickling ice
candidates so how you send over ice
candidates is up to you but there's a
few ways you can go about doing this and
let's go ahead and take a look at this
process all over again and i'll try to
break this down so
when we first create our stp offer we
also make a series of requests to a stun
server to generate our ice candidates
now what we could do is create our stp
offer wait till all our ice candidates
are generated and then send over the stp
offer and the ice candidates all
together now more traditionally what you
want to do is not have to wait for this
process to complete you want to send
over your stp offer and then trickle in
your ice candidates as they're created
so you'll notice that we sent over the
stp offer and then
we don't get back our ice candidates in
a batch they're sent over individually
so we would signal over each ice
candidate over to our peer as they are
generated so we would send over the
offer send over an ice candidate and
another and another and then that
process would continue so that is called
trickling ice and we're actually going
to run through this so it's going to
help us fix a little bit of a delay here
so let's go ahead and jump to the next
slide and i want to show you this in
action before we start coding so i have
a live demo here so this is actually a
gif in that live demo
and let's go ahead and click on this and
go over how this exchange works between
the sdp offer and answer
so let's go ahead and open this up make
sure my camera is on so the gif is
actually at the top of the link right
here
so here i am this is all live right now
source code is all here
and what i'm going to do here is open up
two tabs side by side
so i want to make a connection between
two peers
okay so
we have pier one and pier two so if we
go through these instructions what we're
gonna do is first create an offer so
this is what an offer looks like so i'm
going to create an offer and you see
this object right here is just a bunch
of gibberish about our network we're
just going to go ahead and copy the
entire offer
and i'm going to paste this over to pier
2. so we're creating an offer from pier
one peer one will initiate that offer
pass it over to peer two and this is the
more manual way of doing this you
wouldn't actually do this in a real
application i'm just trying to or i
built the demo so you can see that
exchange process
so peer two will get this offer and then
we're going to create an answer so
whenever we added an offer here from
pier one
let's go ahead and create an answer from
pier 2. so now we have an answer and you
can see the object one's an offer one's
an answer
let's go ahead and copy this entire
answer
and send it to peer two
okay so we've exchanged those
and once we've exchanged the offer and
answer i'm gonna go ahead and add the
answer to peer two and now we see a
connection both peers are connected so
we have
peer one and peer two and then pier two
and pier one right here okay so one
thing you'll notice that there was no
ice candidates exchange at this point
and that's because we're not using
signaling so by the time the ice
candidates were generated they were
actually added to the offer so i didn't
need to actually generate those on my
own those were created so i didn't have
to actually send those over because
we're not using signaling so that's the
demo uh check this out before you get
started and let's go ahead and get right
into coding this
okay so let's start with a quick
walkthrough of project number one before
we start building this out so this is my
room right here it's full screen and
here are my controls and here is the
room name so it's simply a parameter
added in the url so at this point i have
full control here with my camera and i
can toggle this on and off with a mic
and i'm just going to go ahead and leave
the room and to create a room we can
just go ahead and add in any value here
let's go ahead and give it a name and
we're just going to call this test so
this is peer-to-peer i can only have one
other person in this room and let's say
i want to share this url with someone
and i want to tell them to join the room
i'll just go ahead and give them the url
to the website let's say they try to
join the room without an extra parameter
here so no room name it's going to
redirect them back to the lobby so the
room name is test here so they're gonna
have to add that in here so we'll just
go ahead and do test
and here we go they are now in the room
so we have two peers in the room and
here are my full controls sorry about
the quality is going to take a minute to
adjust we do actually cover this in the
video where we exchange or change up the
video size here but we don't go into
much detail about it so here we have two
peers both peers can see each other so
if i go ahead and mute the camera here
for pier one the entire camera feed will
be hidden here so my current user where
i'm at is always going to be in the top
left and peer number two so the person
i'm talking to will always be in the big
frame so that's why right here if this
pier has their camera muted we're not
going to see anything here so if i
unmute this we're actually going to see
that video frame so that goes both ways
and both piers can actually have full
controls here so if i'm inside of this
room right here or let's say pier 1 is
inside of their application and pier 2
leaves what's going to happen here is my
video frames automatically going to go
into full screen and pier one leaves so
we can join a room and leave it and
that's pretty much the application so
let's go ahead and close this out and
start building this okay so we're going
to be building this project out from
scratch so the first thing i want to do
is go ahead and create an empty folder
on my desktop and give it a name and
i'll just call my project peer chat so
once i have this folder i'll open this
up inside of my text editor i'm using vs
code here and i'm just going to go ahead
and find the project folder right here
and open things up so here's my project
i'll close this out and the first thing
i want to do is go ahead and add in an
index.html file that's going to be our
room page eventually and then i'll add
in a main.css file
and a main.js file
okay so inside of the index.html file
i'm going to set up that boilerplate
html code so in vs code if i start
typing in html i should get this drop
down select menu i'll click this one
right here and that should build all of
this out for me so if you don't get this
just go ahead and type it out from
scratch follow along with this video
pause it whatever you need to do here so
for the css file and the javascript file
those are already linked up because i'm
using the same name here so the file
path is all set so we have our main.js
and main.css
but what i like to do is i like to get
this script tag right here and bring
this down below my closing body tag okay
so we have this and next i want to go
ahead and build out our video frames and
the container for those so we'll create
a div here and this div is going to have
the id of videos so this will hold the
two video frames we're doing only peer
to peer so it's not going to be group
video calling we're only doing a
peer-to-peer connection so inside of
this we're we're going to use a video
tag and inside of this video tag i'm
going to go ahead and give it the class
of video dash player
and then for the id we'll just give it
an id of user dash 1. so we're only
going to have a user 1 and user 2. now
for the other properties here we're just
going to go ahead and do auto play
so auto play and then we'll do plays
in line
okay so once we have this tag right here
we'll go ahead and copy this bring it
down here and we're just going to change
this to user two so we have our two
users and that looks good so that's all
we need inside of our html template
right here for now so let's go into our
main.css and i just want to make sure
that we can see this that we're actually
outputting this and then we'll actually
start adding in our our camera stream or
video feed into these tags here so
inside of main.css let's go ahead and
grab our videos tag or the
video frame the container and then we're
just going to go ahead and display it as
a grid and for this for the actual
columns we'll do grid template columns
of one fraction and one fraction so i
just want to make sure that both videos
take up exactly half of that container
so we'll just go one fraction one
fraction that's going to make that 50
each for each container now we'll also
want to make sure that there's some
space between them so we'll do gap of
2em and that's it for the videos so for
the actual video containers so for these
elements right here for the video player
let's go ahead and grab this and we'll
style this so we can actually see this
so we'll do video
dash player
and for this we're just going to go
ahead and set a background color so we
can actually see it so we'll make this
black and then for the width we're just
going to set this to 100 so i just want
to make sure that the width is full
width of that container right here so
i'll let the actual column specify the
width of that video player so we'll set
that to 100 and for the height let's
just do 300 pixels for now and we'll
leave it at that
so we'll save this and let's go ahead
and take a look at this so i'm going to
use live server we'll open up our
index.html file give it a second
and this is what you should have right
here so we should just have those two
players and that's it and the next thing
i want to do is output my camera's video
stream inside of our page here so i want
to get access to my camera's audio and
video and output it here so for this
let's jump back into our code here and
let's move on to our main.js file so
in here i want to create a variable for
my local stream and i'll leave it
undefined and then one for my remote
stream so local stream will be my local
camera's video feed and my microphone's
audio and then the remote stream once
we're connected to another user that
will be that remote users camera and
audio data so once we have that let's go
ahead and create a function called init
and let's make sure it's an async
function
so with this function we're just going
to go ahead and call this right away so
this will be the function that starts
everything up and when we load our page
what's the first thing that we want to
happen so typically when you go to a
website that takes your camera's audio
and video usually it has to request
permission and actually get access to
that so we're going to call a function
that's actually going to ask for
permission for access to our cameras
video and audio and then we're going to
go ahead and actually add this to the
dom
so for this we're going to call local
stream and then we're going to set this
value to await
navigator.mediadevices.getusermedia
so the getusermedia function what this
is going to do is this will actually
request permission to our camera feed
and our audio and we can actually pass
in the parameters and what we want
access to so for now we'll just do video
this will be true so we do want access
to the video and for audio we can also
set this to true but for now i'm going
to set this to false because when we're
testing this i don't want to hear an
echo back inside of the mic so i just
want to make sure that it doesn't mess
with us but we'll change this later so
we want access to the camera but not the
audio so that's what this will do and it
will actually set this value inside of
local stream so once we have this and
i'll actually go over where you can find
these functions in a second so let's
just finish this up
so once we have access to that let's go
ahead and call document.getelementbyid
and we're just going gonna get user one
so this is gonna be our camera's audio
and video feed and the video tag has a
property called source object and we're
just gonna set this to local stream
so i'm gonna save this and this
specifically is to this video tag so
once we have that let's just go ahead
and test this out so
let's open this up here
and i'm going to refresh the page and it
looks like i've already accessed or
denied the camera's audio and video
because i think it refreshed it by
default so this is actually a good
teaching moment we're going to go ahead
and go into settings and we'll go into
privacy and security we'll go into site
settings and we're just going to go into
camera so we're just going to go ahead
and remove this so by default it already
blocked access we're just going to
remove that and then now on that first
load this is what you're going to see so
that's what that function calls it
actually requests access to our camera
so once we allow this we should see our
camera feed in a second and there we go
so now you can see me we've successfully
displayed our camera's video feed here
so we don't have the audio right now so
let's open this up in another tab here
so now we have two users but the two
users can't see each other so we haven't
created that peer-to-peer connection all
we did was got access to our camera and
displayed it so let's move on to that in
the next section here so before we do
that though i want to go ahead and show
you where you can find these functions
because
in your projects you're probably not
going to be doing the same exact thing
that i'm doing eventually so you want to
be able to actually find this so i'll
show you a great resource for this so
let's go to webrtc or let's do a search
and in this site right here i'm going to
go ahead and link this up in the video
description this is where you're going
to find access to everything so if we
look down here here are all the
functions we're going to use this rtc
pureconnection function
read about it see how to use it and this
will tell you a lot more so i'm not
going to go into the details about all
of these i'm going to expect you to do
that research but i just want to make
sure you know where to find it okay so
let's go ahead and close this out and
let's move on to the next section okay
so now it's time to start the process of
connecting two peers together and
creating an offer and then sending that
offer over to the other peer along with
the ice candidates so let's go ahead and
create another function right here just
below the init function and let's call
this create offer so when we first load
up our page and another peer joins we
want to create an offer and send it over
to them so we'll create the function
let's make sure it's a async function
here and the first thing we want to do
inside of our create offer function is
create the initial peer connection here
so we're going to create a variable
called peer connection
and we're going to set this right here
inside of create offers so we're going
to create a new peer connection and
essentially this is that interface that
stores all the information between us
and that remote peer and it provides us
with a bunch of methods to actually
connect to that peer so this will be
that core interface to actually connect
to another user so we're going to go
ahead and set this up and we're going to
call this new rtc
peer connection
we'll call the function and there we go
so in create offer we're going to
establish that peer connection object
and then what we're going to do is we're
going to get our remote stream and we
just want to set up a media stream
inside of this video player 2 right here
so inside of this other video tag we
want to set up the media data or the
actual media stream and then we'll add
data to it later so we're just going to
go ahead and do new media stream
we're going to call this and then we're
going to do the same thing that we did
right here so we're going to take this
right here
paste this below and set this to user 2
and then take our remote stream and set
it up so again there's no actual video
feed in there just yet because we
haven't gotten that from our user but
we're setting it up and just creating it
and making sure it's ready for that so
once we create our peer connection and
set up our media stream let's go ahead
and actually create an offer so we're
going to go ahead and create a variable
called offer and this is going to be a
weight
peer connection so this is what's given
us access to all this all these methods
right here we're going to call peer
connection dot
create offer so each peer connection
will have an offer and an answer we're
creating that offer and then we're just
going to go ahead and go to our peer
connection and we're going to set the
local description so we are the local
description so we're going to
peerconnection.set
local description and we're throwing in
our offer so every peer connection is
going to have an offer and answer
okay so once we have that let's just go
ahead and console this out so we'll do
console.log
and let's just see our offer i just want
to show you what it looks like right now
so we'll just do
offer
and let's just go ahead and call this so
at this point i'm just going to call
this on init so we're going to call it
immediately
once we load up our page so if i go in
here let's open this up refresh it make
sure it's all working let's go into
inspect maybe we have something wrong
here
okay it's all working we see our video
feed and here we go we see our offer so
we see an object we see the offer here's
our string we see the type of offer and
there we go so we just successfully
created it now i also want to set up my
stunt server and as i mentioned earlier
we're going to use a free stunt server
from google so we'll set that up and
then pass that into our peer connection
so locally you actually don't need to
set this up if we're just doing this in
testing but eventually once you're
actually using this project in a
production environment you'll need to
actually set this up here so let's just
go ahead and do servers
we'll set up the servers and i don't
need equals right there
so we'll set up the servers and this is
simply going to be an object and we're
going to start with ice servers
let's just do this slowly so do i
servers and then this will be an array
right here and inside of this array
we're just going to go ahead and create
an object here and we're going to
specify the urls
and for this i'm just going to go ahead
and copy the actual google stunt servers
so you can find a lot of different stunt
servers we're just going to go ahead and
use these
so i'm going to copy this from some
notes that i have here and paste this in
so the urls here we set up two of them
right here and there we go so just copy
that information and paste it exactly as
is
so there's our servers and we just need
to go ahead and pass this into our rtc
peer connection
okay so once we set up our stun servers
we still have some more work to do so
i'm going to create some space between
our offer and this section right here
and i just want to get my local tracks
and actually add them to the peer
connection so i have my local stream
right here and i just want to loop
through all the audio and video tracks
and actually add them to the connection
so my remote peer can actually get them
so we'll just do local stream and we're
just going to go ahead and call get
tracks here so get tracks and we're
going to loop through every single track
so we're going to call four for each
here
let's see i need to throw each not fro
four each
and let's just go ahead and loop through
every single track so we're getting all
the tracks we're gonna use an arrow
function here
and we're just gonna go into pier
connection
dot add track so that's a method that
that object gives us and we're just
going to add the track and then local
stream okay so on create offer we're
going to add our tracks to that peer
connection and the next thing i want to
do is listen for when our peer actually
as their tracks too so anyt"
XW1aGkzyjQg,"hey what's going on guys so this is a
different kind of video kind of personal
so if you don't like that stuff then you
might want to just move on to the next
tutorial
[Music]
so back i think it was my 300 000
subscriber video i basically came clean
to my audience and told everyone that i
was a drug addict or am a drug addict in
recovery and was into hard drugs into
opiates for for years um from when i was
about 17 to 25 years old i'm 40 now
um and
the reason that i wanted to tell people
that in the first place well there's a
few reasons one is because i like to
be kind of an open book i like people to
know me and
where i come from and what i've
experienced
and then i also
tell it to give inspiration and show
people that
you can be in
one really really shitty point in your
life and that doesn't mean that you're
going to stay there you can get out of
that and you can do things that you
never thought you would you could do
so that's the main reason and i was
going through some stuff some keepsakes
and i found this i'm gonna try to cover
the number up but this was my my
massachusetts ebt card so this was this
is my food stamp card and i was probably
about 22
in that picture and this is this is
where i come from um you guys see all
the nice stuff behind me i've done
office tours and all that and it's
pretty obvious that i do pretty well
financially but it definitely wasn't
always like that in fact when i met my
wife we had lived we lived in a rooming
house
so eventually we got a one bedroom
apartment but before that we lived in a
place where we had one room and there
was a bathroom one bathroom on the floor
and we shared that bathroom with like
four or five other dudes that lived on
the floor at that time
so um you know when she was pregnant
with my daughter at that time so that's
where we were at at one point
and now we have a a beautiful
five-bedroom house that we own uh and i
don't say that in like a bragging way
but just to show you the you know the
stock difference in between then and now
and and it's not
because i'm special or have any special
qualities or anything like that i'm not
smarter than anyone else's i'm not a
better programmer than anyone else you
know
i think that that really what
what i can attribute the most to my
success
is is just consistency it's just brutal
consistency keeping my eye on the ball
for what i wanted and just just never
taking it off you know and doing what i
needed to to get there and i think that
um
just about anybody can do that you know
and your goal might be different mine
was to have my own business that made a
lot of money i could keep my my family
safe and secure
um so that was my goal but you might
want to work at a fang company or
create a startup or create some kind of
sas whatever it is that you want to do
and i was looking through some other
stuff as well i found this which i
thought you guys could kind of get a
kick out of which was my booking photo
when i went to jail for a year and uh in
20 what was it 2002
and i also have my record here
so this is a five page criminal record
you can see some of the charges
um possession of class a substance which
is like heroin opiates
class d class a
breaking and entering in the daytime so
it's all either drug charges or stealing
to get drugs which you know obviously
wasn't a good thing
and i can remember the first time i went
to jail i was in the courtroom
and
i was trying to do whatever i could to
for the judge to give me a lesser
sentence or get out of it or whatever
and i had my lawyer which was just a
public defender at the time he had told
the judge or i had told him to tell the
judge that i planned on going to the
local community college here
for computer science because i was
always interested in tech even when i
was younger getting into trouble i i
still
enjoyed technology you know um so that's
something i did want to do but he told
the judge that and the judge just looked
at me right in the eye and just laughed
and he said in a very sarcastic
sarcastic voice he said that the
computer industry is going to have to
wait for mr travesty and basically said
you know
[Music]
a year in jail or whatever it was that
that he said
um so
i think that i think that that was the
right decision at that time and and the
other times as well
you know i was just
i i probably would have died and
i was just a person you know
stealing from people and all that and of
course i regret that stuff but i don't
regret the overall experience because i
think that it helped bring me to where i
am today so and the reason i say that is
for you guys look at your struggles
whether that's money so whether you're
you know in poverty
or whether it's mental health if you
have bad anxiety adhd depression
whatever any of that stuff relationship
issues social anxiety something else
that i've dealt with my whole life
try to look at those things as
as things that help you rather than hold
you back i think that we live in a world
where
everyone wants to be some kind of victim
and i just i don't think that that's a
healthy way to be i think that you
should take those things and you try to
turn them around and use them as your
strength you know if that makes sense
and i know some people might even get
offended by that but that's just the way
that that i think and that's my advice
to people
and and try to use my situation where i
was at point a and where i am now at
point b
and apply it to yourself because again
there's no there's nothing special about
me uh i i can just attribute it mostly
to just brutal
consistency you know whether it was when
i started freelancing uh and trying to
get clients or when i even when i
started my youtube channel i was just
consistent you know
you don't want to just stop you want to
keep your eye on the ball and just keep
going
and and you can imagine with the record
that i just showed you
trying to get a job with that especially
like in the tech industry i couldn't
even get hired at wendy's never mind at
a at a tech job so i had to just
do something else i had to go around the
system and create my own business and
start freelancing and that didn't that
didn't start off very well either in
fact they have a video talking about my
first
gig which was a disaster but again i
stayed consistent and and just kept
going after that and jobs were getting
better and easier i was learning things
along the way so you're going to go
through rough times you're going to have
a tough time getting started but don't
let that just make you quit you know you
just want to keep your eye on where you
want to be and just work towards that
goal and i know there's a lot of like
cringy
um
self self help positive thinking kind of
thing like this the book the secret or
the movie the secret where you know you
think if you think positive and things
will just happen and that's not how it
works but
if you do think in a positive way that
causes you to do positive actions that
can then lead to where you where you
want to be you know so you want to try
to have some kind of knowing that you
will get to where you want to be someday
um and try not to fall victim to
whatever your circumstance is
and i and i know people have a tough my
story isn't the toughest i know that i
know there's people especially that
don't live in the u.s that are in other
countries going through situations
believe me i know that it's bad i talk
to people from all over the world and
you just don't want it don't let it tear
you down inside you know you still want
to keep pushing and keep trying as much
as you possibly can
um so that's it guys i just i wanted to
share more of my story because there's a
lot of new people i haven't really
talked about this in years
and uh and i just want to let the new
people know you know let you know where
i'm coming from and to try to use
my story as as some kind of inspiration
and and relate it to your own in
whatever issues you're going through i
also want to give a shout out to
underdog devs on twitter and i talked to
rick who is the he created this group
which basically they help um people that
are incarcerated or have been through
the system
and help them get into coding which i
think is a friggin great idea and i just
wanted to give them a shout out that's
underdog devs on twitter and they're not
sponsoring me or anything like that it's
just i thought it was a this is an
appropriate place to mention them and uh
you know anytime i can help anybody else
that's in that kind of situation i want
to so thanks for watching guys and i
will see you next time"
0xMQfnTU6oo,"hey what's going on guys so in my
opinion every web developer should learn
css grid at least if you're working in
the front end and in this css grid crash
course we're going to break it into a
couple different parts so first we're
going to look at some slides just talk
about what css grid is we'll compare it
a little bit to flexbox then we're going
to jump into a sandbox where we look at
all the different css properties that we
can use on grid containers and grid
items learn how to span rows and columns
and things like that and then finally
we're going to build a small project
which is going to be a testimonial
landing page all right so i think that
this will give you a lot of foundational
knowledge in creating layouts with the
grid so hopefully you enjoy it and let's
get into it
[Music]
this grid crash course is sponsored by
inmotion hosting and i've used inmotion
personally for years in fact my
traversalmedia.com website is hosted on
one of their vpss so they offer
everything from shared hosting and
wordpress hosting for small businesses
to vps's and dedicated servers and i can
speak from experience that their
services fast secure and reliable and
great for just about any project so you
have accounts starting from just 2.99
per month and that includes not only web
hosting but email accounts marketing
tools free ssls and more so to learn
more visit
inmotionhosting.com or click the link in
the description below all right guys so
i just want to jump into some slides
real quick to talk a little bit about
what css grid is
so the grid is a powerful tool that css
gives us to easily align elements or
items on the page create two-dimensional
layouts with rows and columns and i do
want to mention flexbox here because
they can be similar they are used a lot
in in similar ways and a lot of people
ask me which one they should learn or if
sh they should learn both and my answer
is always to learn both now flexbox was
created first it has a bit more browser
compatibility but
if you're using modern browsers you're
not going to have any issues with either
of these
now it's going to come down to
preference on where and when you use
grid or flexbox so i can just tell you
what i do so what i do is i use css grid
for the overall layout of a website or
user interface so laying out headers and
cards and all that stuff and then if
there's inner elements that need to be
aligned that's where i'll use flexbox so
i may have a layout of cards that i use
with you know use css grid and then if
there is maybe a header in the card with
the title of a blog post or a
testimonial or something and then maybe
a picture of the person the date that's
where i'll use flexbox is to align those
inner elements all right so that's just
what i do but again it's going to be
preference i do know some developers
that only use flexbox and don't even use
css grid unless you know they have to
for
an existing project but again it's gonna
it's gonna come down to
breakfast it's gonna come down to
preference
so with the grid we have just like with
flex we have containers and items so we
have uh you know an an element that's
going to be your container and then any
direct children of that element will be
your items and we create a grid just
like we create a flexbox and that's
using the display property
and then we have specific properties
that are available on the grid container
and then specific properties on the uh
on the grid items and we're going to get
into all of these within our in our
sandbox part of the of this crash course
all right so with flexbox you have the
ability to create one-dimensional
layouts with either a row or a column so
you know use flex direction set it to
row or column but with css grid it's
it's a little more powerful where we can
create two-dimensional layouts and we
can use rows and columns in the same
grid and then we also have the the
ability to span
certain rows or certain number of rows
and columns and it's just i to me it's a
better option
too especially for
more sophisticated website layouts and
user interfaces but we'll get into all
that later on
all right so enough with the slides
let's go ahead and jump into vs code and
let's start to learn css grid okay so i
have vs code open of course you can use
whatever text editor you want and i have
a grid.html and a grid.css file that's
it and they're both completely blank
so we're gonna
basically go through and learn all the
different properties that the grid gives
us and how to size things how to
create columns and rows and span items
across multiple columns and rows and so
on so we'll start off with the html
which is going to be really simple so
just exclamation enter will give us a
template in with using vs code and emmet
and title i'll just say css grid crash
course
and then we want to bring in the css
file so that's called
grid.css
and then the body is actually going to
be really really simple so we're going
to have a container that's going to be
our grid container and if you're
familiar with flexbox it's kind of the
same thing you have your container that
you have specific properties that you
can use with the grid and then you have
your grid items inside and you have
specific properties on those as well all
right so in this container i want to
have nine divs they can be anything it
can be divs images headings anything at
all could be a grid item but we're going
to do nine divs with the class of items
so i'm going to say dot item and then
i'll add some text i'll say item and
then whatever the current number is and
let's times that by nine and we get nine
divs the class of items so i'm going to
save that and then open that up with
live server of course you don't have to
use live server but i i am
all right so now we just see item one
through nine so we can go over to our
css
and
i just have some
some base css that i want to add
okay so basically here we just have a
reset we have some body styling font and
so on
um the container
i put a max width of 960 of course you
could make that whatever you want margin
100 pixels on the top and bottom and
auto on the left and right so you can
see there's a 960 pixel container here
and that's going to be our grid
container and then just some padding so
these items i don't want to just use
text
so i'm going to basically turn them into
just blue boxes so we can clearly see
our items so let's say dot item
and let's set the background
of course you can use whatever color you
want i'm going to use steel blue
and then let's do color of white for the
text and let's do a font size of 20
pixels
and let's say padding will do
20 pixels okay let's actually add a
border as well so we'll say border let's
do sky blue
and one pixel solid just so we can see
where these end and begin so we just
have three and three we have nine blocks
or nine items now to make this container
a grid container just like with flexbox
we use the display property right so if
we said display flex it would put it
into a flex row we can see that
immediately now if we say display grid
it doesn't do anything we can't see
anything
happen just yet because we need to
specify how many columns we want and how
how big we want those columns to be
so the first grid property we're going
to look at is grid template columns
so the way this works is we set some
sizes so i can say for instance the
first column 100 pixels second 200
pixels if i save that i'm going to get
two columns first 100 second 200. if i
wanted a third column of 300 pixels i
could go ahead and do that as well
now and it doesn't have to be just
pixels i could use percentages so if i
do 30
40
30 percent
and save that you can see now we have
percentages but most commonly you're
going to be using fractions
so if i do 1fr and 1fr these are
fractional units
and
this is just going to give me two
columns that are the exact same width if
i
make this browser wider you'll see it's
going to it's just going to take up the
entire width of whatever the container
is which in this case is 960 but of
course i could change that to 1160 and
make it bigger i can change it to 660
and make it smaller so whatever the
whatever the width of that container is
all right now i could of course add more
here and i can make
i can make certain columns bigger so if
i want to do 2fr here now you'll see
that the third column is bigger than the
first two if i want to make the middle
one 3fr then that one's going to be
bigger all right now i actually want to
have three of the same so i could do 1fr
three times or i could use the repeat
function and just say repeat three times
one fr and if i save that you'll see
it'll give me the same result as if i
did one fr three times
now when it comes to spacing between
these items between the columns and rows
we could add
margin and then say like 10 pixels onto
the item itself which is probably what
you would do with flexbox but with grid
we have some extra properties we can use
on the container such as column gap so
i'll say column gap 10 pixels and you'll
see that will add space going vertically
between the columns and then we also
have row gap which you can probably
guess what that does it adds a space
between rows now if you want to use both
of these
instead of
using two properties we could just go
ahead and do gap
and we'll set that we'll do 10 pixels
and you'll see that it gives us the the
same exact result all right so we know
how to divide
the items up into columns and we know
how to make columns certain widths so
now let's talk about height so the
height right now
is going by the content that's in each
each grid item and it's all basically
the same content so they're all the same
size
so i'm just going to go ahead and
replace this with let's say alarm 30
and save that and now notice that the
height expands to fit the content by
default and then all of the columns that
are in that row also expand on height by
default
so there's a couple properties that i
want to show you that have to do with
with rows and height so the first one is
grid dash
auto dash rows so with this we could set
all of them to 200 pixels regardless of
the content you can see it actually gets
cut off here
now there's also a function called min
max that we can use on both columns and
rows so let's say min max and as you can
see it defines a size range greater than
or equal to min and less than or equal
to max so basically it takes in a
minimum we'll do 100 pixels and then max
we'll just do auto so now we can see all
of the content that's set to auto and
then these other ones are going to be
set to 100. if we want those set to 200
then we could do that
all right now
just like we have this grid template
columns we also have grid template rows
so that's what i want to look at next so
let's say grid template rows and we
could use pixels or percentages or
fractions for now let's just say like
200 pixels 100 pixel
200 pixels
and it's just like grid template columns
except instead of going this way it goes
this way so we have 200 pixels 100 and
200
all right and you can also use like we
could say repeat we could say repeat
three times one fr
save and now by default the height is
going to be of whichever the the most
content so if i were to come over here
and slash this in half
and save then that's going to resize the
height of all of these
so i i don't find myself using grid
template rows that much because most of
the layouts that i build just the the
content determines the height and then
i'll align things with the alignment
properties that i'll show you in a
minute
but it's good to know
how these work
so i'm just going to comment all that
out
and let's um
let's move this up here i just i just
want to have this i'll probably create a
repository so you guys can have this as
kind of a reference
so let's see what do we want to look at
next let's look at
let's look at some of the alignment
properties which if you know flexbox you
probably already know so line items
justify content and so on now before we
do that i do want to show you that in
the
google chrome dev tools and firefox dev
tools i'm not sure about the other
browsers i don't use anything else
if you have a grid container as we have
here you have this little grid button
and if i click that you'll see we get
this highlighting and you can also get
these numbers now if you don't see the
numbers you can just go down to layout
and under grid just choose show line
numbers you can also show the track
sizes so here you'll see like 1fr
and the number of pixels and here as
well but i don't want to keep those
displayed so i'm going to uncheck that
but i do want to keep the numbers
because when i show you how to span
across rows and columns these numbers
really come in handy
so let's see i want to start off with
align items so let's go
we'll just go here and let's say align
items now the default for this is
stretch okay if i save that we're not
going to see any difference
and what that does is is this right here
it stretches
uh go
according to whichever one has the most
content now you might not want that so
we could set this to
let's say start
all right so what that's going to do is
align it to the top here okay if i want
to
align it to the center i could do that
if i want to align it to the end
i could do that as well
all right and and this will take effect
if any of these are have have height to
them like if i
if i go ahead and uncomment this grid
auto rows you'll see now they're all
aligned to the bottom
but i'm going to just make sure i
comment that back
so as far as justify content in order
for us to really see how that works we
can't have the the content taking up
this whole space so just temporarily i'm
gonna set let's say repeat three 100
pixels all right so now we have three
100 pixel rows or sorry columns and if i
wanted to align all of these let's say
to the end i could use justify content
and set that to end and it would move
them over to the end i could do center
move them to the center and so on we
could do also like space around
you know so all those different
values uh and if you're familiar with
flexbox then
you already know those
so let's set this back to 1 fr
and now you can also align self
meaning
on the item itself
so i don't have specific classes like
item one item two item three to to grab
these but of course we could use pseudo
selectors so i want to grab the second
item so what i would do is item
colon and then we could use nth of type
and then i'm going to pass in two so
that will select the second one
and i'm just going to change the height
just temporarily just to show you how
this works
the height and
weight
the height and width to 100 pixels
okay and now if i want to align this
let's say a line item i'm sorry not
align items align items is for the
container align self is for the actual
item so i want to align that to let's
say end
and you'll see that it gets moved to the
bottom so i want to move it to center i
could do that and then if i want to move
it along along the x-axis i could do
justify self
and let's say we want that to be center
all right so i'm not going to keep this
i just wanted to
show you that that is
those those
properties are available
so the next thing i want to move to is
spanning items across a number of rows
or columns so i'm going to start with
this the first one here so i'm going to
change this 2 to a 1 that's going to
select this first one
and we'll just go ahead and change the
the color we'll change it to black
and let's say that i want this to span
from
line 1 so these are grid line numbers
from one to three
instead of just one to two which is the
default so i could do grid dash column
dash start and set that to one which is
where it is currently but then i want
grid column end
i want that to be 3 instead of 2. if i
put it to 2 and save it's the same thing
but if i put it to 3 it's now going to
stretch over to column 3. all right so i
should say line three now there's a
quicker way to do this instead of doing
start and end you can simply say grid
column and then we can just do one and
then slash three like that and then we
can actually get rid of this
and that will do the same thing another
way we could do it is we could say grid
dash column
column and we could say
1
and then do slash span
two so instead of just specifically
saying we wanted to go from one to three
we could say start at one and then span
two so if i comment that out and save we
should see the same same result but i
prefer to do it this way and explicitly
say where it starts and ends
now we can also span rows or span down
so let's say item three here which right
now is goes from two to three let's say
we want it to go from two to four
so i'll just go ahead and grab this
and let's select item three
and we'll change the color
lighten it up a little bit and then
instead of a grid column we're going to
do grid row
and it starts at 2 so we're going to say
2
and we want that to go now to 4. so it's
going to go from here 2 to 4.
all right so we'll save that and now you
can see that that spans from two to four
now let's do the same thing with item
four
so i'm just going to grab that and then
we'll say this is going to be four
and we'll just keep the same color and
then grid row is going to do the same
thing we want it to go from 2 to 4 so
save that
so you can see that css grid it is more
more powerful than flexbox it's
two-dimensional like there's no way to
do something like this in flexbox have
these two here and this unless you use
multiple flexboxes this is all one grid
um so now what i'm gonna do is
turn off the grid lines here
shut those off
and then let's
comment out
this stuff here where we did all the
spans so we just have three
three columns across and i'm actually
going to just change this back to item
one
all right because now i want to talk
about responsiveness so right now no
matter how how the browser is sized we
have three columns right and that's
probably not what you what you want
so what i usually do is just create
media queries and just have them stack
on
on smaller screens so for example i come
down here and say at media
and we can do max
we'll say max with 500 pixels
and then we can set the
let's take the container
and let's set the grid template columns
to just simply one fr
so now if we take the browser and we s
we resize it down to 500 pixels then you
can see they all stack
all right so we can do that now if you
want these two and of course you can set
other media queries and you might set it
to to 1fr 1fr or use repeat 2 1fr for
maybe 768 or something like that but you
can also make these uh make these wrap
like with flex blocks you have flex wrap
so to give you an example of that we'll
go up here and
let's copy this grid template columns
down and then comment it out
so
what we could do is pass in here let's
say auto dash fill
and then instead of just one fr because
if we do it like that we're just going
to get that result so instead of that we
can do we can use min max here
and we want to pass in here whatever the
minimum
width you want so let's say 200 pixels
for example and then we could do one fr
here so now what happens is we get three
across because
we're saying
if it's 200 pixels then put it in but if
we go below that
so let's see we're gonna go keep going
and as soon as one of these
goes below 200 pixels then it wraps and
now we have two columns
okay and then we still have our media
query so if i keep going and i hit 500
then they're going to stack if i stretch
it out long enough we should see four
columns as well
all right so that's how you can
make your grids responsive now obviously
if you're going to keep like the grid
the spans like this then you have to
account for those in your in your media
queries as well
all right so though that's pretty much
it for for the basics and and how to use
the grid now there's one more thing i
want to show you before we move on to
the little project they have and that is
grid template areas which is kind of a
different way of of doing things so i
think what i'll do is just create two
more files say grid
2.html
and then we'll say we'll do grid
let's say grid two dot css
all right and i'm gonna just close up
grid html and grid css so we have the
two new files and then let's go to
grid2.html which is completely blank
right now
so i just want to show you a picture of
what i'm whoops i don't want to open it
in photoshop let's open it with preview
so this is the layout that i want to
create which is a pretty common
type of layout so we have the header at
the top that goes all the way across
have some navigation on the side that
goes all the way down under the header
the content and then the sidebar and
then the footer that goes under the
sidebar and the content
so i'm going to show you how to do this
with grid templates or grid template
areas
so first thing let's add our html which
is going to be really simple we'll just
throw in a template here and
let's say css
css grid
template areas
and let's add in a link here and this is
going to go to grid 2
dot css
now
um in this case i'm going to use the
body as our as our grid as our grid
container and then any
direct elements are going to be grid
items so first we'll have a header and
i'm just going to put some text in here
so we have header we'll have a main tag
and here we'll say content then we'll
have our nav
say navigation and
let's do an aside
so that'll be our sidebar and then
what else our footer
which will be for all right so that's
all i want to have and i want to turn
this into this using grid template areas
so let's go into
our i'll get this out of the way now
let's go into our css
and there's some just
basic css i'm going to pass in here so
just to reset
some body sizing
and then
let's make the
wait a minute there we go so let's make
the body the grid
actually before we do that let's take
all the elements and let's make turn
them into blue boxes so we'll say header
footer
main
aside
and nav
and let's do background color
and we'll do steel blue
let's do color we'll set that to white
and then
padding
20 pixels and let's do border
we'll do sky blue
one pixel solid
alright
so we have no
positioning or anything like that we
just have a bunch of blue blocks just
like we did
in the last you know in the last file
so like i said the body is going to be
the grid so we'll say display grid
which does
right now
it
the reason that it did this is because i
set the
height of the body to 100 vh
if i didn't do that it wouldn't stretch
it wouldn't stretch like that but i do
want it to take up the entire viewport
height
now
for the grid areas let's go ahead and
say
grid
dash template areas
the way we do this is a little weird but
i think it's it's cool because it's like
a
it's like a physical representation of
what we're trying to do so the first row
let me bring back over our image so you
can see exactly what we're doing
so the first row is going to be the
header now in total this there's three
columns right one two three the header
we want to span all three
so the first row let's say header
header
header three times
now the second one let's put in some
quotes here we want our nav
we want our content now these words that
i'm putting in here these are going to
be the grid areas it doesn't have to be
called header we could call this
anything but i'm just being specific so
nav then we'll do our
content
and then let's say sidebar
okay so that's the second and then the
third row is going to be the nav again
because here the nav is going all the
way down right and then the footer i
want under those two so i would say
footer
and footer
so this is is like a text representation
of
how we want our layout
okay and hopefully that makes sense
header we want to go all the way across
the three columns so we have it three
times we have the nav content sidebar
and then we have the nav
footer footer
all right so let's get that out of there
now just saving this
it's not going to do anything except
put them in side by side what we need to
do now
is create our grid areas
so we want to
use our selectors so we want the header
tag and then we're going to set that
grid area
using the grid area property and we're
going to set it to header now what i put
here this header pertains to this
okay so this could be anything i could
have brad three times here and then just
have brad here all right as long as i'm
using the correct selector so let's save
that and now you see the header goes all
the way across
all right so the next thing is let's do
the nav
so we'll say nav
and set that to the grid
area of
nav because that's what i called it
so now the navigation is going all the
way down
so next we have
what i we have the main tag and i
believe the grid area i called content
so let's say grid area content
not much difference there and then the
sidebar so we'll grab that with a side
and we'll say the grid dash area
is going to be sidebar
and then finally the footer
and we want to set the grid area to
footer
all right so we'll save that and now you
can see it's very similar to what i have
here right it's just the sizing the
positioning is all correct
now if i wanted the footer to go all the
way across here and have the navigation
end here along with these content
sidebar i could just change this
template area up here and instead of nav
i could say
footer
and save and now you can see the footer
goes all the way across
all right but i'm going to put that back
to nav now as far as the the sizing the
width and the height we can still use
our grid template columns and grid
template rows so let's say grid dash
template columns and i'm going to set it
to 1 fr and then the middle the main
content that should probably be the
widest right so we'll do 4 fr and then
the sidebar will do 1fr
okay we'll save that now you can see the
content is the biggest part now we also
don't want the header and footer to be
this tall
so let's use grid
dash
template dash rows here
and let's set the
header we'll do 80 pixels
and then let's just do one fr which is
just basically the remaining area
from the header and then the footer
which i'll do 70 pixels
okay so now if i bring my
image over there we go same exact thing
okay so i think it's really cool that we
can lay things out like this
now you won't always use this i i don't
use this a lot um
but if i'm if i were to create something
like this i definitely would and i've
been you know i've been doing web
development for quite a while and those
of you that that have been too
you might remember when we did not
layouts like this with tables like we
would actually use html tables and style
them to look like this
and then doing it with floats and having
the sidebar go all the way like a color
background color go all the way down
it was just a pain in the ass so the
fact that we have this kind of thing now
it's just i mean newer people just you
don't know how good you have it really
when it comes to this this kind of thing
but i think that's pretty much it as far
as
as the properties that i wanted to show
you so now let's get into uh to creating
our little project
okay so we're going to get into our
project now the layout that we're going
to build is it comes from the frontend
mentor.io website which is a really cool
challenge website where you can build
html css and javascript projects and
there's some premium options but there's
also a ton of free
layouts here so the one that we want to
create is let's see it's the
testimonials right here so testimonials
grid section and you can actually
start the challenge and you can download
all the images and design files and
stuff but i will have a repository in
the description that will have the
images and stuff that we need all right
so it's going to look like this
have i think this is a great example to
use css grid with because we can use the
we can span columns and rows and all
that
all right so what i've done here is i've
put all the the other files that we've
already created the grid.html and all
that into a folder called sandbox and
then i have a new folder called project
with an empty index html and style.css
and then i just have the images of like
the people and i have an svg for
this this quote right here and you can
get this again from the front end mentor
website or from my repository
so let's go ahead and jump into our html
first and i'm just going to
make this a little wider since html
takes up more room
and let's go ahead and add our
boilerplate
and we'll just say testimonials for the
title and let's link in
our style sheet style.css
and the way i'm going to do this is have
a testimonials
class and that's going to be our grid
container and then inside that we're
going to have a bunch of cards so first
one will be a div let's give it a class
of card and i'm also going to give it a
class of card dash dash bg oops card
dash dash bg dash purple
because if you look at the
project here this one has the purple
background so we need to add a little
bit of styling and i'm using the bem css
syntax or the bem syntax which i've been
really liking lately
so inside the card we're going to have a
header and let's give that a class of
card double underscore header
and inside that will have the image and
we want images
slash and this one is daniel
i'm probably just going to type this
card out and then i'll paste the rest of
the rest of them in and you can just
grab it from the
repo if you want
so let's add a class here of let's say
card double underscore image
and then underneath that we're going to
have a div
and that's going to have the h3 with the
name so daniel
clifford and then a paragraph with
say verified graduate
and we'll use flexbox to align like this
here this are the stuff here all right
so underneath the header let's see we
have some more text
so basically we have the large text or
the lead text and then the quote which
is the smaller text
so under header we'll have let's do a
paragraph
class of card underscore double
underscore lead
and
i'll get the i'll get the actual text in
a second but then we're going to have a
class of card
quote
okay and then i'm just going to grab
those
pieces of text
and if you just want to put dummy text
you can of course do that as well
and we'll save that
okay so we have our first card which
looks absolutely horrendous but we'll
fix that in a little bit
so for the rest of this let me just grab
i'm going to grab the rest of the cards
and just paste them in because there's
no sense in typing them out they're all
the exact same except for the content
all the classes and all that are all the
same so we want to go still within
testimonials but
after this first div with the card
we'll paste those in and now you can see
we have all of the um
all the cards and then i'm just going to
add a footer just to give credit to
front-end mentor for this for this
project they're not sponsoring this
video or anything
but uh yeah let's say footer and
say h3 we'll just say project
you don't have to do this but i'm going
to say project from and then we'll put a
link in here
let me just grab the
link
so this is the link to the actual
challenge
and in here we'll just say front-end
front-end mentor
all right cool
so now we go into our styling and we can
make this a little smaller now since css
doesn't
usually take as much room
and i'm going to just paste in just a
little bit of of styling here we're
importing the
bar low semi condensed font and a reset
and then just setting some background
color and so on and the text is pretty
small for this project there is a style
guide when you download the resources
from front-end mentor if you want to
check that out
so i think first we should style
everything but the grid just to get
these these cards looking good and then
we can go ahead and add all the grid
properties so we'll start with with the
testimonials container
so let's at least add like our max width
which is going to be 1440 pixels going
by the style guide
and then let's do margin let's say 100
pixels top and bottom and
auto okay and then
this is where obviously we're going to
have display grid and all that but we
won't do that just yet
and i know what we're doing for the next
10 minutes or so
isn't has nothing to do with the grid
but it's part of the project so i like
to do things from start to finish and
not just you know paste things in so
you might learn some other stuff along
the way
so let's grab the class of card because
we know that that that's on all of these
and
we're going to add background so the
initial background color is going to be
white so
we'll say white
and then let's give that a border radius
we'll do 10 pixels
oops 10 pixels
and then
i'm going to add some padding
30 pixels of padding
and we're going to have a box shadow so
i'm going to just paste that in so i
have t"
-0exw-9YJBo,"foreign
hey what's going on guys so I want this
channel to be a resource for anybody
that wants to learn web development that
can start anywhere including just HTML
CSS and then kind of go through and
learn different Technologies and
Frameworks and I basically want to have
all up-to-date content because right now
some of my crash courses are out of date
I'm working on you know updating those
but I wanted to do something with the
merge stack because that's really
popular with with my audience and
instead of just doing everything in one
video I figured we could do a single
project and spread it across three or
four videos and work on something
different in each video so for instance
in this video we're going to build a
rest API with Express which is a
back-end node.js framework and mongodb
for our database as well as Mongoose
which we'll use to connect and interact
with mongodb so that's what we're going
to do in this video and then in the next
one I want to add authentication which
is some something that's very important
in in building apis so we'll be able to
create a login endpoint a register
endpoint and we'll be able to get a Json
web token once we authenticate and then
we can use that token to access
protected routes all right so after that
on the in the third video we'll start on
the front end we'll start on the user
interface and we'll have a register form
login form and basically we'll have a
dashboard where we have goals so the the
main resource in this project is going
to be goals and that's what our rest API
is going to be we can create read update
and delete goals all right and in the
front end I also want to use Redux
that's something that I haven't really
done in a while on my channel we're also
going to use Redux toolkit now this this
is basically just a smaller version of
my support ticket application from the
react front to back 2022 course so if
you did take that course and you did
that project this is very similar it's
just a little smaller uh same
authentication and everything it's just
we don't have the support ticket side of
it we're doing goals instead all right
so I think that this will give you a
really good foundation in the Marin
stack and and how everything works and I
would definitely recommend that you you
follow along code along with me and
really just immerse yourself into the
learning and if if you don't understand
something pause it look at some
documentation some other resources and
uh and just really get into it I think
that's the best way to do anything all
right so that's it let's get into it and
start on our rest API
okay so before we get into the code I
just want to go over what a rest API is
and how it works so this is an image
that I found from Network
op.co.uk and I like this because it has
a lot of information in one small image
so basically we have our client which is
going to be ultimately our react
application and that's where all the UI
stuff goes all of our components our
state with Redux everything is on the
client and then the back end or the
server we're going to build with Express
which is a node.js backend framework and
this will be our API so we need these
two to communicate and we do that with a
rest API and that includes basically a
bunch of HTTP requests and the
operations that we want to do here are
are called crud create read update and
delete now in this case if you look at
these endpoints API slash devices this
example they're using devices as a
resource but ours will be goals so the
endpoints will be API slash goals Now to
create a goal or a device in this case
you would make an HTTP post request post
is the method okay so you can see these
have different methods so to create
something or to post to the server you
use a post request and then the the
endpoint is going to be slash API slash
devices or goals in our case and you
also send a payload of data because if
you're creating something obviously
you're going to send some data with it
and that goes in the HTTP body which
we'll talk about in a little bit so this
gets back a 201 status code from the
server which means everything went okay
and something was created now to read
devices in this case we would make a get
request so get is for reading data and
it would be just the endpoint API slash
devices and you'll see that these are
these two endpoints are the same but
they do have different methods okay and
then you just get back of 200 which is
everything's okay and then to update
you'd make a put request and this time
you'd include the ID in the actual
endpoint in the URL because you need to
know which which device or which goal in
our case is being updated all right you
get a 200 response back and then same
thing with delete so you make a delete
request to API slash devices slash and
then whatever the ID is and you get a
200 response back so basically in this
video our goal is to create an API just
like this for goals and we're going to
be using Express mongodb for our
database and Mongoose to to connect and
interact with our database now obviously
we don't have a front end to work with
so while we build our API we're going to
be using a tool called Postman which is
an excellent tool excellent HTTP client
if you want to use something different
if you know something that is similar to
postman and you want to use that that's
absolutely fine but I'll be using using
Postman and then mongodb is what we're
using for our database we're going to
use mongodb Atlas which is a cloud
database so we don't actually have to
install it on our system or anything
like that all right so many times I'll
start with creating the database but I
think what I want to do first is just
get our API up and running create our
routes and then we'll start to set up
our our Cloud database and then connect
to it at our models and all that so the
first thing we're going to do is create
our project folder so I'm going to just
open up my terminal and we're going to
go into wherever you want to create this
I have a folder called Dev and then I'm
going to make a directory so mkdir and
I'm going to call this mer Dash tutorial
and of course you can call it whatever
you'd like and you can create this
through your your graphical user
interface if you want and then I'm going
to CD into the uh not make there I'm
going to CD into the mern tutorial
folder and then from there I'm just
going to run vs code with code Dot
all right so we should just have an
empty folder now this is going to be the
route to our full stack application so
I'm first going to create a folder in
here called back end and this is where
all of our routes our models controllers
everything is going to go in this folder
so I'm going to create in that folder a
file called
server.js which is the entry point to
our server and just for now I'm just
going to console log and I don't know
we'll just do hello world
and we'll save that for now so in the
root here not in the back end folder but
in the root is where all of our our back
end dependencies are going to go so
Express and all that will be in a folder
called node modules in the root so I'm
actually going to open up my terminal my
integrated terminal here you don't have
to use this you can use your regular
terminal if you want but I'm going to go
ahead and run npm and knit
and we'll just go through this so
version that's fine description I'll say
goal
goal Setter app for YouTube
say for YouTube tutorial I guess
and then I'm going to use server.js as
the entry point and let's see keywords
we don't need that
you can put your own name in here if you
want and I'm going to use an MIT license
so that will create a package.json in
the root and then before we install any
dependencies I'm going to create another
file in the root called dot git ignore
because I do want to initialize a git
repository but I don't want the node
modules folder to go in or the dot EnV
file so I'm going to add both of those
to this git ignore all right and then we
can install our dependencies so from the
root we want to do npm install and we're
going to install Express we're going to
install something called dot EnV so that
we can have environment variables and
then Mongoose and then there's a utility
called colors that I like to use so we
can use colors in the console and I
think that's all we need for now there's
other stuff that we need later but I
think
yeah I'm pretty sure that's that's all
we need for this video
now as a Dev dependency I'm going to npm
install Dash uppercase D and then node
mon which is a tool that will constantly
watch our server.js file so we don't
have to keep restarting it
so now what we can do is go into our
package.json and you should see your
dependencies and node one as a Dev
dependency and we're going to add a
script here called start and then let's
get rid of this
and we want this to run with node.js we
want to run our backend slash
server.js file and then what I'll do is
copy this down and we also want to run
node mon
and the script for this will be called
server all right so we should be able to
run npm run server for node mod to run
our server.js file so let's try that out
we'll come down here we'll say npm run
server
and there we go so it spits out hello
world and it's just constantly watching
for changes I'm going to go ahead and
just stop that with command or control C
and now we have that set up now I would
recommend that you create a git
repository so I'm going to go ahead and
get a knit
and then we'll do get add all and then
git commit
M and I'll just say initial commit and
we're probably going to deploy this to
Heroku so we do use git to do that so I
would recommend doing that and just
making commits As you move along
so as far as the front end we're going
to do that later on I just want to
create our backend API first so we're
not even going to create a front-end
folder just yet
now we have our server.js like I said
this is the entry point so let's get rid
of this and we're going to go ahead and
bring in Express which is our back end
web framework so it's
bring that in and then I'm also going to
bring in dot EnV so that we can have
environment variables
don't Dot
and V and set that to require
dot EnV and then we just want to call a
function called config so we just do dot
config like that and that will allow us
to have a DOT EnV file with our
variables in it and then for the for the
port I'm just going to create a variable
I'll just put 5000 in it for now it's
the port we want our server to run on
now we need to initialize Express so
we're going to create a variable called
app set that to express and then with
that app object we can call listen which
takes in a port number so our Port
variable and then you can also have a
second argument with a function and I
just want to do a console log with some
backticks and we'll say server
started on Port and then
the port number all right so just having
this we should be able to run npm run
server
and we should see Server started on Port
5000 but I'm going to cut this off
because I want this port number to
actually be in an environment variable
so in the root here not in the back end
folder but in the root we're going to
create a DOT EnV folder
file sorry and I'm going to put in here
a couple things we'll have our node
environment and we're going to set that
to development
and then we're also going to set our
port and for now I'm going to set it to
8 000.
so now here where we set our Port I'm
going to go in front of the 5000 here
and say process Dot
env.port and what that does is it allows
me to access
that Port variable in my DOT envn and we
can use this anywhere in our server but
I'm going to also just add or 5000 if
this isn't found for some reason so now
if we go ahead and run npm run server
again we should see it on 8000 because
it's reading it from the port here
however I'm going to change it back to
5000 here because that's what I
ultimately what I wanted to run on now
whenever you change or add something to
the dot EnV you do have to restart your
server other than that we can run it now
and we should be all set even if you
want to install other packages and so on
so to create a route I'm actually going
to open up
where is it where the hell's Postman I'm
going to open up Postman and let's close
this up
so just download it from postman.com or
you can use a different HTTP client you
could even use your browser right now
because it's only a get request but
basically we open a tab and we can make
any type of request any method we want
I'm going to choose get and then to
access our server we can do localhost
it's on Port 5000 so colon 5000 and then
let's say we want to do slash API slash
goals so ultimately that's going to get
our goals right now we just get a 404
not found response and it just sends an
HTML page but this is the route that I
want to create to get all of our goals
ultimately from our database so we could
go in here and say app.get because get
is the request we want to listen for and
then the end point would be slash API
slash goals and then we just have a
second argument of a function that takes
in a request response variable
and then to respond we could do just res
dot send
and we could pass a string in here and
just say we'll say get
get goals because ultimately that's what
this is going to do so now if I send
this we now get a 200 status which is
okay and then we have a string of get
goals
now usually you're going to return Json
so for the most part we would do dot
Json and
pass in here a Json object or Json or an
array and we can say like message and
we'll set that to a string of get goals
all right so we'll send that and now you
can see we get a 200 response we get
this and then if we look in our headers
the content type should be application
slash Json
all right and even though we didn't add
like you know double quotes on the key
it just gets uh parsed into Json with
the double quotes
so you can set the status yourself now
this does give us a 200 as you saw but I
still usually like to do status
and set it to 200 and then just add dot
Json and that will give us the same
result
all right now
you're probably not going to want to
have all your routes in this one
server.js file you really want to clean
your your folder structure up or else
it's going to get really messy so in the
back end I'm going to create a folder
called routes
and then in that I'm going to have a
file called goal routes
go routes.js so basically each resource
in your API will have its own route
folder route file sorry now to use the
express router we're going to first
bring an Express into this file so let's
require
Express
and then we can create a variable called
router and we can set that to
express.router uppercase r
and then you just need to export this so
we're going to say module exports and
set that to router
okay and if this syntax if you've never
seen this before this is common JS
module syntax which is different from
you know when you would import Express
or whatever that's es2015 syntax and
that's what we use in the front end with
react and View and so on you can use
that syntax in node.js but there's some
additional steps you need to take at
least at this time so I usually stick to
the common Js
so to create a row what we can do is
copy that or cut this
and then put that in here right above
where we export and just change the app
to router now this API goals I want to
have this if if we hit this from the
front end I want it to direct to this
file so I'm actually going to just
make this a slash and then what we can
do is under where we initialized express
we can do app.use
and we can say slash API slash goals and
as a second argument we can require the
file that we want that to pertain to
which is going to be routes and then
goal routes so now if I hit API slash
goals it's going to look into this file
here and all I need is a slash because
the API slash goals was already
specified so if I make a get request to
API slash goals we now get the same
response and we were able to move that
to this file all right now I'm going to
have a couple other
routes here so let's copy that and we're
going to have four because we want to be
able to get we want to be able to create
a goal so that'll be a post request and
we'll just leave this AS Slash
which ultimately is going to be
slash API slash goals and a post request
will create a goal so I'm just going to
change this to or let's say set goal
okay and then down here so to update
it's going to be a put request
all right so we're going to say put and
then we do need to include the ID
remember that image that I showed you
this right here to make a you make a put
request and then it's going to have
slash ID same with a delete request so
what we do is put colon slash ID here
and that's going to be our param now you
can access this within your route so I'm
going to actually use backticks here
instead of quotes so I can include a
variable and we'll say update
let's say update go and then
we can use this syntax to add a variable
and I can take that request object so
request.params and then dot ID because
that's the param that I want to get
okay and then we'll do the same for the
delete so I'm going to just copy this
and then this is going to be a delete
request
and we'll test these routes in a minute
and then let's see we'll paste that in
and we'll just change that to delete
and we want to make sure that we add a
colon ID here as well because remember
it has to include the ID so now let's
come over and test these routes out so
get request that works post request is
going to be the API slash goals so you
can see we get a 200 and it says set
goal if we make a put request to goals
slash and then whatever some number
which would be the goal ID we get update
goal and then that number if I do a
delete request to that same endpoint we
get delete goal and then that number
all right so now we have all of our
routes set up they're not doing anything
except just spitting out you know a
message but they are set up now we could
proceed to add our functionality in the
body of these callback functions but
it's much better practice to actually
create a controller and have your
functions there so in the backend folder
let's create a controller our
controllers folder and then we're going
to go ahead and add here goal
controller.js and then here we can just
create some functions so for instance we
want to get goals function and it's
going to take in request response
all right and then we'll have the same
you know same thing just respond with uh
status and message now to use this I'm
going to export it down here so I'm
going to say module.exports
and set that to an object and then we're
going to pass in the get goals function
now in our routes we can bring that in
from the controller so let's say const
and that's going to be from require and
then we want to go let's see out of the
routes into controllers and then goal
controller and what we want to get is
the get goals
function now this right here the get
request to slash which is slash API
slash goals I'm going to replace this
whole function here with get goals
all right now that should still work if
I make a get request
to
API slash goals you'll see that it does
the same thing and now I have that
functionality moved to my controller
file now I want to do this with the rest
of these as well so let's uh actually
before I copy this one thing I want to
do and if you guys have ever taken a
node.js course for me you know that when
I create my my controller functions I
like to add a couple things in the
comments I like to add a description of
what this does so we'll say get goals
and ultimately this is going to get all
goals but after we add authentication
it'll only get a specific user goal all
right now I'm going to add the route
so let's say route and I also add the
method here so it'll be a get request to
API slash goals and then I also like to
put the access
so it can be public or private all of
these are going to be private after we
add Authentication
so now let's copy this whole thing
paste it in four times because we're
going to have four different functions
the second one is going to be we'll call
this set goal
make it singular
and then let's see we'll change this
stuff up here so this will set
a goal and it's going to be a post
request since we're setting it or
creating it to the same route and then
let's see for the response here we'll
just copy this
and paste that in all right and then
let's see down here this one is going to
update
goal and it's going to be API goals
slash and then ID
and it's going to be a put request since
we're updating
and we'll change the name of the
function here to update goal oops
and then let's grab this
okay we'll paste that in here
and then to delete we'll say delete goal
and API goals
slash colon ID and that'll be a delete
request
and we'll change the name of the
function here to delete goal
and then we'll just grab this
this here oops I'll just
copy that and paste that in and then we
just need to export all these so we want
set goal
update goal and delete goal all right
now we can bring those in so up here we
say set goal
update goal and
delete goal and we just want to replace
these functions so this is the post
request so that's going to set goal this
one here is the put
that's going to update goal and then we
have our delete
so delete whoops delete goal so we you
can see we really cleaned up the the
routes file here now we can clean it up
a little more and because we have these
two are the same route and then these
two are the same route we can do router
and instead of dot get and Dot post we
can actually do router dot route
and then pass in the route we're looking
for and then we can add on to that or
chain onto that dot get and we want that
to call get goals and then we can chain
onto that dot post
and we can do set goal and then we don't
need these two lines right here so it
saves us a line of code and then we can
do the same thing let's copy this down
and we'll say for the route of ID
we want the put let's do delete
is going to call delete goal
and then put
is going to call
update goal and then we can get rid of
these two lines so now you can see we've
really cleaned this up and now we don't
have to touch this anymore
so let's test out all the routes we have
our get request that's still working uh
let's do Post
that's working let's do put and it's
going to be goals slash something
that's working and delete
that's working
okay so now we have our controller
functions here that we can use before we
get into uh you know connecting to the
database and or creating it then
connecting to it and all that I want to
set up our error Handler so first of all
if we um
if we want to make a post request right
to API goals we need to send some data
to create a goal so we would do that by
adding data in the body so right here
you'll see we can do raw which is just
raw Json or form URL encoded and that's
what I'm going to do I'm going to send a
value of text and for the actual value
I'll just say my first
goal and obviously if I send this
nothing different is going to happen
because we haven't handled this yet now
to get body data
let's go to the pertaining function
which is set goal
and I'm going to do a
console log of request so the request
object has a body property on it and if
I send this with the text in the body
you'll see that it actually console logs
undefined and the reason for that is in
order to use body data you just have to
add a couple lines of middleware so in
our server.js I'm going to go
right here and to add middleware we just
use app.use and then on Express we have
the body parser for raw Json which would
just be dot Json and then for URL
encoded we can do app.use
Express dot and then URL encoded and we
just pass in an object with an extended
extended value of false so now since I
added that middleware if I come back and
I send this
with the text in the body now you'll see
that it's actually logging an object
with text and then my first goal
so what I want to do here is check for
that so we'll say if
request.body dot text because that's
what I sent and obviously you know you
can send other other fields here as well
and we'll we'll be doing that when we
get into users but uh if this we
actually want to check if not so if
that's not there then I'm going to set
the status to something different we
don't want 200 because that means
everything's okay this is going to be a
client error or a bad request which is a
400 status all right and then we could
do this like we could just add on dot
Json and we could add in a message
and say please add
a text field
okay so now if I come over here if I
send it with the text nothing hap you
know same thing but if I uncheck it and
don't send it I get a 400 bad request
and please add a text field
now I would prefer to use the express
error Handler because it does have a
built-in error Handler so I'm going to
get rid of the dot Json still set the
status but then here I'm going to say
Throw new error
and I'm going to say please add a
a text field
okay now let's see what happens if we do
that we leave the text unchecked send it
and we do get the 400 response but
you'll see that by default the error
Handler gives us an HTML page it does
have what I you know the error the text
I passed in but if we look at the hair
and the errors the headers the content
type is text HTML so what I want to do
is change the default Express
error Handler so to do that we need to
add a middleware function so in back end
I'm going to create a folder called
middleware
and inside there let's create a file
called error
middleware and all middleware is oops
that has to have a an extension
dot Js
so all middleware is they're just
functions that execute during the the
request response cycle so when you make
a request
um so as far as what I want to add here
is a function
called error Handler
and to overwrite the default Express
error Handler you just want to pass in
err here this object and then the
request response and then next to call
on the further middleware
all right and then I want to get the
status code so if it's set like I set
right here before I throw the error I
want that if not I want it to be 500
which is a server error so I'm going to
create a variable here called status
code and I'm going to set it to a
ternary which is a conditional so we'll
say if res dot status code meaning you
know what I set in the controller if
that's there then I want to use that
or put that in the the value of this
variable else then I want it to be a
500. then we just call res dot status
and pass in that status code
whether it's what I set or 500 and then
respond with Json so dot Json will pass
in a message and then on that error
object we have a message text so I'm
going to use that and then we can also
get the stack Trace which gives us some
some additional information but I only
want that if we're in development mode
so we can say process dot EnV Dot and
then node underscore EnV and we'll say
if that is equal to
production so for in production then we
only want we want that to be no else
then we'll show on the error object
we'll show the stack which will give us
like line numbers and stuff like that
all right so then we just need to module
Dot
boards I'm going to export an object
with error Handler
because you can have other types of
error handlers as well if you want and
then we're going to go into server.js we
can close that file up go into server.js
and bring in the error Handler
and we're going to say error
Handler and we want to bring that in
from our file which is going to be in
the middleware folder and then error
middleware then we just want to go
underneath our routes and say app.use
our error Handler okay and that will
that'll overwrite the default Express
error Handler so now
if we come back over here
so before I didn't I didn't have the
text field and I got a 400 response and
I got this HTML so now if I send without
the text field I get 400 and I get an
adjacent object with the message and
then also the stack which gives us some
more information okay and we only need
this in development mode now if I were
to change my DOT EnV to you know you
guys don't have to do this but if I
change it to production
and you do have to restart the server
when you change that so now if I send
that I don't get that that information I
just get null for the stack which is
what I want so let's change that back to
development
and let's restart that
okay good so there's one more thing that
I want to do before we get into the
database and that is in the controller
when we use Mongoose in each of these
functions to interact with the database
we get back a promise so we're going to
be using a sync await so we do want to
add a sink
to to these functions so here
sync and on the delete a sync now if by
default well if you use the the dot then
dot catch syntax you'll have to do your
dot catch if we use a sync await like we
are we would do our try catch now if I
we don't want to use try catches and
just use the error Handler we can use a
package called Express async Handler so
we're actually going to install that I'm
going to open up a new tab in my
terminal and say npm install
and it's called Express Dash async Dash
Handler
and then
once that installs we'll go ahead and
add that up here in the controller so
we'll say const
and we're going to call this async
Handler
and set that to require
s a sync Handler and then all we have to
do is wrap each one of these so right
before where we put a sink I'm going to
put async Handler and just wrap the
entire function so that will end here
and then I'll just
I'll just copy this
we're going to do that to all these so
for the set goal we'll paste that and
then we'll end it
paste that here and that here and then
for delete
same thing good so now we can save that
and now we're ready to start to work
with the database so obviously we have
to create a database actually let me
make a get commit here and you guys can
if you want
we'll say get add all and then get
commits and we'll just say um
goal goals controller
and routes set up
all right so let's go back to
mongodb and we're like I said we're
using mongodb Atlas which is a cloud
database we're going to set that up
there's also another
tool called Compass which is uh
basically a desktop app a desktop GUI so
that you can manage your database from
there if you want so I would suggest
downloading and installing but you don't
have to I'm just going to open up mine
let me see I'm actually logged in here
let me
quit that and just open that up again so
when you open you're going to have this
input for a connection string so let's
create our database and then I'll show
you how we can connect with that so if
we go to mongodb sign in
excuse me you can use your your Google
account or your email I'm going to use
let's see I have a bunch of accounts
this one I just cleared out so it's
basically like a new account
so we'll log in and you should see
something like this we need to create an
organization
we want mongodb Atlas click next
oh we have to name it so I'm going to
use travesty media and next
and you don't have to actually add
anything here just click create
okay once we do that we need to create a
project so for the project name I'm just
going to say
I don't know mern app
create project
and once we do that we can create a
database cluster so right here you'll
see this build the database button now
there's there's paid Services here if
you're going to create a you know a real
production app but there's a shared plan
that is absolutely free no credit card
or anything it's great for testing it's
great for really small projects so we're
going to choose that
AWS is our provider and then everything
else you can leave is default I'm just
going to change my cluster name
to Traverse cluster
all right and then we'll click create
cluster
so here how would you like to
authenticate your connection username
password so you do have to add a
username I'm going to say Brad t1234 and
I'm going to use the same for the
password and make sure that you actually
I don't know if I entered that right
um front t one two three four all right
so make sure you click create user
sometimes people miss that and then down
here where it says uh where would you
like to connect from we're going to go
ahead and keep local environment and
then if you click this button add my
current IP address it'll add your IP
address or in my case my VPN address and
then we'll click finish and close and go
to database
okay so now this is going to take a
couple minutes to create actually I
already had a cluster so mine I think is
all set but it might say wait one to
three minutes or something like"
d_BhzHVV4aQ,"[Music]
hey what's going on guys welcome to my
remix crash course so in this video
we're going to learn all about remix
while building a blog application also
using prisma and sqlite for a database
so before we jump into the code i just
want to talk about what remix is and why
it's beneficial so remix is a new
framework it has a lot of hype it was
created by the same creators of react
router in fact it's basically built on
top of react router and the good news is
it's not just a new framework with no
purpose other than to just create
another framework it's for react
developers and it's a full stack
framework that solves a lot of problems
that single page applications or purely
client-side apps have now we do have
next js which also offers
rendering react on the server next.js is
a fantastic framework i use it a lot i
have a course on it and i don't think
it's going anywhere i do think remix
feels a bit different in the way that it
does things particularly using what are
called loaders and actions which we'll
get into in a little bit but i'm not
going to compare the two i'm not going
to say one is better than the other but
i do think that we're moving away from
the single page application and moving
more towards building with next js remix
next for vue and you know full stack
frameworks like this or you should say
server rendered applications so as far
as some of the benefits of course server
side rendering is huge it has some great
benefits especially with seo file system
routing is also great you don't have to
explicitly define all your routes you
just create a file and put it in a
certain folder and it just works as a
route similar to how old school i
shouldn't say old school but how php
sites work
you also have nested routes with remix
which is pretty cool we can use the
outlet element from the react router and
build a hierarchy of routes these nested
routes are server rendered and it's
almost like a hybrid of a single page
application and a server side rendered
application now loaders and actions i
think really make learning remix worth
it you get a lot of control when it
comes to dealing with the request and
response loaders are basically functions
that you can put directly into your
route modules and they run on the server
side and if you need to fetch some data
and load it into your page you can do it
from there in our case we'll be using
prisma which is an orm to get data from
an sqli database and we'll be able to
put it right into our route loader or
right into our page
actions are also something that caught
my eye and if you guys have worked with
php before
you know that when you submit an html
form you can you can make a post request
with a form without javascript without
having to add an onsubmit handler and
remix allows us to do that by using
something called action functions so we
can actually make requests directly from
html without javascript using these
action functions and we'll get into that
you know in a little while
so you can also have easy access to head
tags from any route module if you want
to add a meta tag like let's say
keywords or description on any of your
pages or any of your routes you can do
that really easily same thing with links
if you want a specific css file in our
css link in the head you can do that
really easily with remix error handling
is also included and really easy to use
you can export an error boundary
component inside your route module which
will basically handle any error for that
specific route and you can also create a
root error boundary you also get
typescript right out of the box you can
generate your your boilerplate app with
typescript and tsx files or you can do
it with javascript and you can pick and
choose which files you just want to
change to typescript all you have to do
is change the extension we also have
built-in support for cookies and
sessions which is really cool there's a
function that remix provides called
create cookie remix has built-in support
to work with sessions using cookies the
file system
server memory or custom storage so these
are all really cool features that remix
offers so my plan is to get a remix app
up and running and talk about what it
offers and show you how loaders and
actions and nested routes work but also
build a blog application at the same
time where we can use prisma which is an
orm and also use sqlite as our database
which you could easily switch out for
postgres or something else so we'll get
some basic functionality done today and
then
probably in my next video i want to add
user authentication so people can come
and they can register sign in create
posts and delete their own posts we can
get into cookies and sessions and all
that all right so let's go ahead and get
started all right guys so we're going to
get started and i would suggest that you
follow along and code along with me i
think that's the best way to learn and
to retain information but of course it's
up to you
so this is the documentation and you can
see we can get started with npx create
remix and they're telling us to use at
latest and you can do that or you can
use the the version that i'm using which
is the latest at this point is 1.0.6
so you can either use latest or you can
use the the version that i'm using
so i'm going to go ahead and run npx
create dash remix at latest
and it's going to ask us some questions
the first being where we want to put
this i'm going to have a folder called
remix blog
and then where do you want to deploy so
you have some options here like fly dot
io versel netlify i'm just going to
choose the remix app server and then you
have the option to use typescript if you
want which i probably would if i was in
production but
since it's a tutorial and some people
might not know anything about typescript
i'm going to go ahead and choose
javascript and yes i want to run npm
install
okay so that's all set let's cd into
remix blog and i'm going to open up
visual studio code from here and of
course you can use whatever whatever
text editor you want
so we have the files and folders i'm
going to go over in a second but let's
run the dev server first so if we open
up uh integrated terminal i'm going to
run npm run dev that's the command to
run this on localhost 3000 and then you
should get something like this it's just
a simple demo so if we go to like
actions it has a form where you can
submit to an action function and we're
going to get into all that but i want to
basically just blow everything away all
the demo stuff and start from scratch
because i think that that's the best way
to really learn what's going on here so
let's go into the package.json and
you'll see under dependencies
we have react we have react dom
and then we have remix and we also have
this remix run react remix run serve
and then the dev script that we just ran
so npm run dev npm run build will build
for production and it actually creates
two build folders one in the root which
is the server files and then one in
public as well
which is the client
so the public folder you can use for
static assets like images fonts etc but
most of the stuff that we'll be doing is
going to be in this app folder okay so
this is our basically our application so
let's go through some of this the
the entry
files here entry client entry server
are really just that they're the entry
points
this one here entry dot client this is
going to be the javascript the first
javascript that's run
when our app is ran in the browser and
you can see we're using react-dom here
and it basically hydrates our react
components and then entry dot server
uh this is going to be ran
basically when we make our request to uh
to the server remix handles the loading
of the data and we're responsible for
sending back a response and that's one
of the reasons i really like remix is
the amount of control that we get when
it comes to the the whole request
response cycle
now the the routes folder this is going
to be where our route modules go which
are basically just react components
functions
and i'll get into how the the nested
routing works and all that in a little
bit
styles so you we have a global css and
you can also create style sheets for
specific routes and then we have the
root jsx which is basically our root app
component and there's kind of a lot
going on here so what i want to do and
what i want you to do if you're
following along is just to get rid of
everything here in the root and save
so this is going to give us an error it
says route root has no component please
add a default export in the route module
file so we're going to go ahead and add
an export
we want to export as default a function
called app
and then in here i'm just going to
return and this returns jsx it's just a
react component if i put an h1 in here
and just say my app
and we save that we come over here and
reload we should see
my app
all right i'm just going to resize these
so if i view the source of this all we
see is a doctype and an h1 that's it
there's no html head body tags nothing
and we have complete access to to that
root document so in this app function
that's where we want to put that stuff
so we want an html tag let's put a lang
set that to en
and i don't know why this didn't change
too so html and then inside that we're
going to want our head tags
and then i'll just put a title tag in
here we'll say my remix blog and then
let's uh that's all i want in the head
for now then we'll have our body
now in the body we're going to have an
outlet so the outlet is
basically whatever route we're on
whatever route module that's going to be
output here now we do have to bring that
in
so let's go up here and let's say import
outlet
which is part of react router dom but
remixes is actually built on top of
react router dom so we're bringing this
in from remix okay so if i go and save
go ahead and save that
we're now seeing the index page again
which is in the the routes index file
now before we get get into routes
there's a couple other things i want to
show you so one if we want to have live
reload
so if i go ahead and just type in hello
here
and then if i do hello one and save
you'll see it's not it's not reloading
automatically so we want to bring in
live reload from remix and what we'll do
is right under the outlet we'll have an
expression and we'll say
where the process dot env dot
node env where the node environment is
equal to
development when that's true then we
want to have our live reload
else then we're just going to say no
all right so now you'll see if i change
that one to a two and save
now it auto reloads if i get rid of it
and save it goes away
now instead of putting all the the
document stuff here like the head body
html and it's right inside the app
component what we're going to do is have
a function called document
and that document is going to take in an
object with children because we want to
be able to wrap this document around
something so it's going to take in
children and we'll also pass in title
and then what i'm going to do is take
everything from within here and cut it
and we want to then return
we're going to return
and then i'm going to paste that in here
now instead of the outlet in the
document we're going to put the the
children okay because whatever we wrap
this around
we want that to output here
all right and then up here we can simply
put the
document
and then we want to have the outlet
all right so if i save that we should
get the same result and we could do for
the title
we could do something like
if title then
title else then
my remix blog
i don't know why i put my
i'm going to change that
okay so we'll save that good
now the next thing i want to do is
create a layout because we might want to
have a we we will want to have
a little bit of navigation
on the page and i could put it up here
like whatever i put in here
is going to be on every route if i go to
this route we're still going to see that
hello so i could do it here but
a nicer way to do this and what they had
before i deleted it was a just a layout
component that we could wrap around the
outlet so let's do that let's create
another function called layout
which is going to take in children
because we want to be able to wrap it
around something
and from here let's return
i'm just going to return
an empty fragment and then we'll have a
nav with the class of
navbar and you're going to want to copy
these classes because
i have a global style sheet that i'm
going to be bringing in as well
so in the nav bar i want to have the the
the logo it's well it's just going to be
text but i want to wrap it in a link
and instead of using an a tag it's going
to be an inner link so we actually want
to use link from remix not from react
router dom but from remix so i'm going
to auto import that
so now links being brought in
so and it's used the same way we just
add a two attribute this is just gonna
go to slash and i'm also gonna give it a
class name of logo
and then here we'll say
remix
okay now we're not gonna see anything
just yet because all we've done is is
created the function but i just want to
finish this up
so in addition to the logo we're going
to have
ewell i'm going to give this a class of
nav
with a list item that's going to have a
link
to
and that's going to be to slash posts
and we'll say posts
and then under the nav we'll just have a
container class
and that's where we want to put the
children
okay so whatever we wrap it around
now we can come up here into our app and
we can just
wrap the outlet
in the layout
okay so we'll save that now we can see
the
the logo and the link which you know
doesn't look too good because we have no
css now i'm going to show you how we can
add some styles but i just want to clear
some things up first so in routes
there's a folder called demos i'm going
to completely delete that
and then
in styles i'm going to delete that demos
the demos folder and then i'm also going
to delete the dark css
and in global css
i have some styles i'm going to paste in
and you can grab this from the the
repository in the description so i'm
just going to paste those in
and we'll save
and then let's go into the routes index
j jsx here and i'm just going to clear
all that up and we just want to create
just a a basic function a react
component that returns jsx and i'm using
this
extension here a lot of you guys
probably use it
this es7 react redux
react native snippets and it just allows
me to generate
react components i like to use just a
regular function with the export at the
bottom which is rfce
okay now i don't want to include i don't
want to import react at the top because
that's not it's no longer needed so with
this component you can just add an
underscore rfc enter and then it gives
you the function without the import and
i'm just going to call this home
okay and then we'll just have an h1 in
here
and we'll just say welcome for now
okay so now we just have the showing now
the styles even though i put the global
styles in they're not showing up because
we haven't put them anywhere right so i
want to show you if we go to the root
jsx
i want to bring in the global style
sheets we'll say import let's say global
styles
url and we're going to import that from
now we can actually use the tilde here
that's just like the the root so we'll
say all right not the root but the app
folder so from there we want to go to uh
where we go styles
styles and then
global.css so we're bringing the file in
now what i could do since i'm in the the
root here and i have access to the head
tags i could just go ahead and put link
in here and set the href
to that global styles url if i save that
you'll see that now the styles take
effect however if i'm in another route
module and i want to load another style
sheet i won't be able to do it this way
so what we can do let's get rid of that
and what we can do is bring in from
remix we can bring in links
and we can put that links element in the
head so i'm going to put it right above
the title
links and then all we have to do from
any route module we can just
export a new function called links i'm
going to use an arrow function
and all this has to return is an array
with an object that has a rel
in this case we want this to be
stylesheet
and then just an href
and we can set that to our global styles
url if i save that now you can see that
styles the styles take effect so i could
put this in any component loading any
style sheet
and then
similar to that we can do the same with
meta tags so in some cases you'll have
meta tags where you're going to want the
same ones on every page so for example
i'll paste in the character set and the
viewport but like keywords and
description you're going to want that to
be different
on you know in every route so we can
bring in meta
which works in a similar way i'm going
to put this
right here we'll just say meta
and then in any route module we can
create
or export a function called meta
and what we want that to do is return an
object with whatever meta tag we want we
could say description
and then we can set it here or i'm just
gonna
create a variable up here
so description and we'll set it to
we'll say a cool
blog
built
with remix
and then we could do keywords so cons
keywords
oops
and set that to we'll just say remix
react
javascript doesn't matter
and then we'll add keywords to the
return here
okay and then that should do it so i'll
save
uh keywords is not defined i don't know
what is up with my typing
okay now if i look in the
um the source code for this if we check
this out we have the viewport and and
and uh was the other one the character
set and then we also have the
description right here you can see the
description and
the keywords so any any meta tags you
want to set on other pages you can do
here which obviously is good for just
seo so now we're going to start to look
at routing so i'm going to close up the
root file for now and right now we just
have the routes folder with this one
index.js and this file isn't going to do
much it's just the home page so i'm just
gonna have an h1 in paragraph in here
you guys can put whatever you want on
this but let's go ahead and create in
routes
a file called posts
dot jsx
okay now the routes these route modules
are just basically component functions
so we're going to just generate a
function here
and i'm going to call this posts
and for now let's just put an h1 we'll
say this is the
post
route
and then
i'm just going to go to slash post we
already have a link here
and it just works so similar to like how
next js works it's just it's it's file
system
based routing so you don't have to go
and manually create your routes with
react router dom although you can do
that because that's included with remix
you can
explicitly set your routes or you can
just put put pages right in and they
just work
now you do also have nested routing
which is pretty cool so in the routes
folder i'm going to create another
folder called posts so i'm matching the
name of this this post file here and
then i can nest routes within this file
so i do that with the outlet from
well from remix but also from react
router dom so let's import the
outlet
from remix
and then down here under the h1 i'm
gonna put the outlet
okay so now if i create in my post
folder let's create a file called
new.jsx
and let's just create a function here
we'll call it
new post and then we'll have an h1 in
here and we'll say new post
and i'll save that and then let's go
over to the browser
and let's go to post slash new
and it shows the content that's in new
post but it's still it still also shows
the content that's in the main post file
because i'm nesting this new route into
this post route okay so anything i
create in this post folder it'll show
but it'll also show what's in the parent
route which is pretty cool you could
have like a post
only navigation that you you only want
to show on the post routes
now
in in our situation for this particular
app we don't need to put anything else
in the main on the parent posts so i'm
just going to leave it as an outlet and
we'll just use a fragment here
but we'll keep it this way just so if
you want to add something here you can
and it will show on all posts
now since i do want to have a just slash
posts
what we can do is in the post folder
just create an index.js
sorry index.jsx or tsx if you're using
typescript and then we'll go ahead and
create a function
that didn't work for some reason and
we'll create a function called
let's call this we'll call it post items
because that's what we're going to do
here is list post items
and then we'll have an h1 and we'll just
say
posts
so now if we come over here and reload
we're at slash posts we should just see
posts
and we also have the new
post slash new and then there's one
other route that i'm going to going to
want to add and that's to show the
single post now with that the url that i
want is post slash and then whatever
some kind of id like this
and i'll we'll go over error handling in
a bit too but it's going to be just some
id so this is going to be dynamic so the
way that we can handle that is by
creating a new file in the post folder
and we're going to use a money sign
because this is basically like a dynamic
like a variable route and then we want
to call it whatever we want to name that
param in this case it's going to be post
id
dot jsx so money sign post id jsx
and then we're going to create
a function and we'll just call this post
and then down here we'll just say post
actually make this an h1 and say post
so now if i go to post slash and then
whatever a bunch of numbers it shows me
this this content
now if i want to grab this which i'm
going to want to later so we can get a
single post from the database we can
just use the use params hook okay which
is the same as in with react router dom
so use params i'm going to bring that in
from remix
and then we just
above the return create params and set
that to use params
and then down here if i wanted to output
that i could just do params dot and then
post id and the reason it's post id is
because that's what i call the name of
the file that's what i call the param so
now we'll get post slash
whatever i put here if i put one we get
post one alright so at least now we have
our routes created they don't do much
but we haven't created and now we're
going to look at one of the coolest
features about remix which are loaders
so i'm going to go ahead and just keep
open the the posts index
so it's the po in the post folder the
index.js
and we want to use what's called a
loader and and it's used to do that it's
used to load data and that could be from
a database like ultimately we're gonna
do but it could also be from an api it
could be anything really any anything
that you want to load when the page
loads so up here we want to import a
hook called use
loader data
and that's going to be from remix
all right so we have the hook and then
to create a loader we just export a
function
called loader
and then this has to return something so
for now i'm just going to return an
empty object and i just want to do a
console log here i'll just console.log
one two three and you'll notice that it
logs down here and the reason for that
it doesn't log in the browser console it
logs here because loader runs on the
server okay so you can do your
server-side stuff right in this function
and the idea is you you do your server
stuff you get your data and then you can
use this hook down here in your function
to access it on the client so ultimately
like i said we're going to use a
database we're going to use prisma with
sqlite but just for now
i'm going to create uh just some
hard-coded data so this will be an
object and let's do posts
with an array of objects that'll have an
id
we'll do an id a title
say post one
and we'll do a body
for body we'll say
this is a
test post and then i'm just going to
copy this down we'll do three of them
and then we'll just change the titles
here so this will be two
three and then we'll change the id so 2
3 and then i'm just going to go ahead
and return
this data
now like i said we access this data now
with this use loader data hook so we
come down here above the return and we
can say const data
set that to
use loader data and now we'll come down
actually we can destructure this we can
just take the posts
out of the data
and then we should be able to take our
posts
map through them just like any react
component so we'll say for each post
we want to then let's render a list yeah
let's wrap this actually
in a ul we'll say ul will give us a
class of post dash list because we do
have some classes we can use to make
this look decent
and we'll take this
and we'll put this in here
okay and then we want to map through
each one and render a list item and this
has to have a unique key so the key will
set to the post dot id
and then in here we'll do uh let's have
a link
we need to bring that in from remix so
the link will say two and for now we'll
do post dot id
and i'll put an h3 in here this will be
the
post dot
title
and then under that we'll have uh we're
gonna have the date the created at but
we don't have that yet because it's just
dummy data so let's just save that as is
and you can see we get our post one two
three and the styling is just from the
the global style sheet
all right so i mean and right now
obviously it's just hard coded data but
it can be from a database later on we're
gonna pull it from
uh
from a mysql not mysql and sqlite
database using prisma
so i just want to kind of format this a
little better this h1 we're going to
have a div up here with the class of
page dash header
and the div with this wrapping div we
can just
use a
fragment and then i'm going to move this
h1 in here and then underneath that
we'll have a link
and this is going to go to the new page
so we'll say two
slash post slash new
and i'm also going to just give this a
class name of btn
and then here we'll say new post so
we'll save that and then we have a nice
little post page so loaders are pretty
powerful because they they're they run
server side so we can do a lot more
right from you know the same file that
we have our output in which is i think
really valuable
now there's also something called
actions where usually you have a form
say we have a react app or angular
whatever you have a form you have an on
submit function that actually stops the
form from
you know naturally submitting to a file
in the browser to catch it and then do
something in javascript well with remix
we have something called actions where
we can we can really submit the form so
we're going to have a form we can
actually submit it to
the server without having to add an on
click and we can just we can catch it in
something called an action function so
we're going to go to new
jsx to this uh to this new post and
let's first just build out the form it's
not going to be too bad it's just two
fields a title and a body so we'll go
ahead and let's add a page
header here
so page header we're going to move this
up here and then we're just going to
have a back button or back link so i'm
going to import this from remix
and this is going to go to just slash
posts
and we'll give it a class name of btn
and btn reverse
and it's just going to say back
so if we look at that now we just have
this back
button here
and then down here under the page header
let's create we'll say page dash content
and this is where we're going to have
our form now this action we could use
this but since we're submitting to the
same page we don't need the action but
we also don't need an on submit in fact
we need to make sure that we set the
method here to post because we want to
make a post request
and this might if you know if you if you
used to be a php developer like me this
looks very you know it's very familiar
so or if you are a php developer so
let's create a form control
class here and then we're going to have
a label this is going to be for the
title
title and then underneath that we'll
have an input
and
it's going to be type text and then
we're going to use a name when's the
last time you actually needed a name
so name is going to be title
because that's how we can access it in
the action
and then it's going to have let's do an
id
of title as well
and then we're just going to have the
body so i'll just uh we'll just copy
this down and we'll change
this
to body and
we'll say post body
we'll change this
and the title i mean the id
to body actually you know what this i
want this to be a text area
so we'll say text area
okay
so if i save that we should see the two
fields now we just need a button so
let's do button we'll give it a class of
btn and btn-block
and
yeah and here we'll just say add
post
and we'll just make sure we add a type
here of submit
because we want to make sure this
submits the form
okay
now to you to create an action very
simple just like a loader we just create
a function an exported function so we
want to do explore const and call it
action
all right and this has to return
something so we're going to actually
bring in
redirect
from remix
so lots of little tools to help you here
so we want to return redirect and we're
going to redirect to let's just say
slash posts
okay now i just want to show you
if i console.log here we'll do one two
three again
and then i come over here and i submit
this form
we should see down here in the server
console you should see one two three
all right so we're able to submit to the
server and we can do whatever we want in
here now action it should take in or an
object with a request
so that's the server request
or the http request and the way that we
get these fields so obviously we're
going to need to get this data right
from the form we simply create a form
variable and we can set that to a weight
because this is going to return a
promise so we want to await request
actually this should be asynchronous
so async and then request dot form data
and if you if we just want to see what
that looks like we could console log it
so if we submit that and then we look
down here you'll see it's a remix form
data object and it has these url search
params with title and body now obviously
we want each value so what we'll do is
go up here we'll say const title
uh we'll say title and the way that we
can get that is with the get method so
form dot get and we want to get the
title and we'll do the same
with the body
all right and then um what we'll do is
oops we'll create
an object called fields and we'll have
we'll say title
body
and then we'll just console.log here
uh we'll console log those fields
okay so now if we come over here and we
submit and we add post if we look down
here we should see right here an object
with the title and the body
all right so i mean all we have to do
now we'll just put a
i'll just put a to-do here and say
submit to
database and we'll do that in a little
bit before we do i want to show you how
we can handle errors because remix is
actually really good with
errors
using the this error boundary so if we
look right here in the docs it says
remix sets a new precedent in error
handling
and it automatically catches most errors
in your code so this is really helpful
and it actually does a lot for us in
terms of of throwing errors
and
and catching them and all we can all we
have to do is add an error boundary we
can do that within the route module we
can also add a root error boundary so
first i'll show you how we can do it
here
and let's let's throw an error on
purpose so on the new on the form page
here on the new dot jsx it has to return
something so i'm just going to comment
out the return
and then submit and we get this weird
cannot read property route of undefined
in server.js like who knows what the
hell that means
so let's create down here at the bottom
we'll create
an error boundary so we can do that
by actually want to go above the export
and let's say export
function
error boundary
okay and then this is going to take in
an object with an error
and from this we could console.log the
error so we have it in the console but
then we want to return what we want on
the page
so that's going to be in this case we'll
just do a
div
and it's not working for that
so a div and then we'll do
an h1 and we'll say error
and then underneath that we'll do uh
we'll do a pre tag and then we'll have
that error object has a message on it so
we'll do error.message
so that should work if we come back here
and we try to submit again with that
with nothing being returned
now you see we get error you define an
action for route
but didn't
return anything from your action
actually let's put that in a
paragraph yeah it's better
okay so now we have a nice clear error
message
now
like the documents documentation said
you can h"
PtQiiknWUcI,"[Music]
hey what's going on everybody and
welcome to this course where we are
going to be learning how to build out
awesome websites with D jeno from the
ground up so we're going to start as
absolute beginners where I'll first
introduce you to what D Jango is and how
it works and then we'll move on to
building out a basic website where we'll
spin up a server we'll render some
templates and add a database to that and
we'll even learn how to work with that
database so we'll add in things like
authentication and search and we'll
really focus on the core features of
jeno and how things work now in the
second half of this course what I'm
going to do is take the same project and
we're going to start adding features
into it and turning this into a really
cool application so I'm about to demo
this for you in a second but this
project is kind of like a Discord clone
and a search engine for people that want
to study and find other people to study
with now it's not specific for
developers but uh imagine that you want
to uh let's say study D Jango so you can
go ahead and create like a chat room
people can find this chat room and then
join in and communicate with you so with
that being said let me just go ahead and
demo the project and then we'll talk
about the core structure and how things
will continue from here okay so this is
the project that our website will
eventually turn into as we progress
through the course here so if you
actually want to see a live version of
this website go to studyb dodev and you
can check it out and actually see the
site for yourself here so in this
website we have a basic feed here of
different study rooms so we can see this
list right here it kind of looks like a
social networking feed where you just
see post anybody here can create a room
here they can set up a topic here and
they can see their room posted out here
so let's say I go to this website and I
see this room right here and I want to
learn about view here so view is an
awesome front-end framework so I want to
check it out I can see how many people
have joined I can see five people there
and when it was posted so the host here
is prene so I can see his profile so the
host does get credit for sharing the
room I can click on this room and I can
see the conversation so on the right
side I see all the participants here and
I can see the chat room right here so
this is supposed to kind of look like
Discord here so uh it's like a Discord
server where anybody can hop in and they
can just message something and I'll just
say anyone here so I'll ask a question
see if anyone's on and my message
appears right here so it tells me when
it was posted anybody can click on my
account and they can view my profile so
we'll go back to the homepage here and
on the side here we have multiple ways
of searching so we have a search bar
here where I can just say uh C for
example I want to see if any topic or
any room has this topic or uh maybe has
C in the title so if I type that in I
can see C developers right here so I can
clear my search here I can use this
search bar or I can go in here and just
search for all the topics with python
here I can see all the designers and so
on so this is going to filter my rooms
down by the topic and it's also going to
filter down the activity feed so just to
create more engagement on the website I
thought it would be cool to add in this
activity feed here so you see how I just
commented something well I added this in
where we can always see activity based
on certain rooms here so I can see that
Dennis replied to vue.js developers and
here is my message so it creates a
little bit more engagement here so
that's pretty much the application here
so anybody can go and view my my profile
here I can see all of my post here so if
I go to someone else's account I can see
their post we can modify our application
we can go here upload pictures here and
it's I'm a little bit too zoomed in so
that's why it looks like that so we can
edit our account there is authentication
so we can log out here log back in or
register and we are good to go so that's
essentially the site here so we're going
to start from the beginning and this is
what the project will morph into so
we're going to learn a lot throughout
this process let's take a quick look at
some of the things you should understand
before taking this course so the first
thing is is you should have a basic
understanding of the Python syntax so
things like variables if and else
statements functions Loops classes if
you know these things then that's enough
to move on with Jango as far as the
front end you should have a basic
understanding of HTML and CSS we are
going to be working with templates here
so if you don't know HTML at all well
it's going to be pretty difficult here
we won't write too much we are just
going to install a theme but you will
need to understand what's going on in
order to install that theme so those
three things python HTML CSS and you
should be good to go so before we get
started since this video does not have
an official sponsor I guess I'll be the
sponsor here and tell you about my new D
Jango course that recently went public
where I cover jeno from a toz in 19
hours so in this course I go into detail
on a lot more topics I cover certain
topics that we don't address here so if
you want to become a better Jango
developer and enhance your skills go
ahead and check that out there is a
promo code in the video description for
50% off so it's going to be $9.99 and
use a promo code Brad now this course
from the first month that it was
launched on udemy also so I have it on
my own platform and on udem me this was
a top seller immediately so there's a
lot of good reviews on it people really
like this course and are learning a lot
from it so definitely check that out
okay so before we get started I just
want to run through a couple of slides
here get you introduced to what jeno is
and then we'll move on to setting up our
environment so what is D jeno so D jeno
is a python based web framework and it
is a backend framework so it's on the
server side and this just means that we
can use Python to build websites so
python is one of the top programming
languages jeno is one of the top
Frameworks for python is actually the
number one used framework so it's an
absolutely great choice great for
beginners and it makes for building
building websites super fast I
absolutely love it so it is more of a
heavyweight framework so it uses a
batteries included approach and that
means that it really is more opinionated
in how you build out your application
and that's not a bad thing uh we'll get
into that later but with this you get
more packages libraries and modules and
you follow a good design structure where
uh in Python a lightweight framework
might be something like flask and some
people may like it cuz it's not
opinionated but because of that you're
typically installing a lot of packages
yourself if you're newer you may not
follow the best design structure so you
may not have a good I guess framework or
structure in how you're building your
application so the fact that D Jango
really forces you to do things a certain
way I think is a great thing and it does
not mean that you cannot customize it
companies customize this all the time a
lot of big organizations that have great
Engineers completely Bend Jango to their
will and how uh they actually want
things structured so uh if I were to
compare Jango to another framework for
another language I'd probably say it's
more like rails Ruby and rails um with
PHP and larvo it's more like larvel
whereas flask is more like uh Express
for node.js and I'm trying to think of
another one I'll just use that one as a
last reference but it's more lightweight
one you can do whatever you want D Jango
kind of forces you to do things a
certain way but I think that's a great
thing especially if you're newer to web
development so it uses the mvt design
pattern a lot of people may have heard
of MVC model view controller for Jango
it's model view template and we'll get
into that in a
minute so what is a web framework so for
those of you that don't even know what
this is a web framework is simply a
collection of modules packages and
libraries designed to speed up web
development so it's just kind of like a
package if you can think of it in one
way where you're not having to use
Python code to do absolutely everything
it really
preconfigured for one specific purpose
purpose in this case for building
websites so uh I would strongly advise
against you hand coding absolutely
everything by yourself so it's going to
make things a lot easier so backend
Frameworks versus frontend Frameworks uh
I already mentioned lville but on the
left side there we have our backend
Frameworks we have PHP which is the
language larel or larel however you say
that that's the framework for python we
have D Jango there's also other ones for
python obviously I mentioned flask for
node we have Express so you have the
language and the framework now there are
front frontend Frameworks so client side
uh these actually work well with our
backend languages so uh we have react
angler view uh I actually used angler
and view with d Jango so they're not in
competition to each other they handle
different parts front-end Frameworks
handle all the front-end logic typically
uh we would probably build out some kind
of API to connect to one of these and
that's how we would communicate it
doesn't mean that we need a front-end
framework Jango has its own uh
templating engine but if you wanted to
use a frontend framework that would
absolutely work so what can you build
with d jeno so this is one of my
favorite topics here because I like to
just show the companies that use jeno
and let them validate the power of what
jeno can do so if I were to mention a
few things myself I would say an
e-commerce website a social network uh
you can build out an API for a mobile
app now jeno can't actually build a
mobile app for you you can use part of
Jango to build one though so if you want
to provide some API dat
uh you can do it that's a topic for
another day so uh in these companies we
have Pinterest we have Spotify udemy
Dropbox all of these companies should
validate whether Jango is the right
choice for you or if it can do what you
desire it to do so this is pretty much
showing that it can do pretty much
anything doesn't mean that it's always
going to be the best option but it can
do a lot I know Instagram relied heavily
on Jango in the beginning um I'm not
sure what version of it they use or how
much they've customized it but I know a
lot of these comp companies used it at
some point and probably modified it to
whatever they needed now YouTube I can't
really confirm whether YouTube used it
or not and the reason why I put it here
is because I read a lot of articles on
uh YouTube using it a lot of people
saying that they did but I couldn't find
anything that validated it so I put it
here just to say that there's a chance
that they used it but this is something
that you can build with Jango there's no
reason why you couldn't build something
like a YouTube website or a YouTube like
website so building a apis a lot of you
might be wanting to learn D Jango just
to learn how to build out apis and
that's totally fine if you want to build
out a mobile app or use some kind of
front-end framework you need some API
data D Jango makes this absolutely easy
they have something called the D Jango
res framework which is built on top of
jeno and the rest framework helps you
build rest apis or just apis so this
makes this really fast absolutely love
it we'll get into this towards the end
of the series I'm super excited for this
part
so I did want to mention some other
Frameworks before we get started uh just
to kind of let you do your own research
I mentioned flask earlier it's a python
based web web framework it's more
lightweight I would recommend you check
it out I personally think D Jango is
much better I don't see why You' want to
use flask but uh in some cases it could
be useful cherry pie web2 pie and
pyramid I've never used those but I
would say check it out do your research
but I really think the competition here
if there is any is between D Jango and
flask here I wouldn't probably even
mention the other three but still don't
take my word for it do your own research
so the mvt model structure or design
pattern so Jango follows the mvt
structure there's the model view
controller structure which a lot of you
from other Frameworks may be familiar
with uh Jango follows the mvt and the
only difference here is that D Jango
takes care of the controller aspect of
things so for those of you that are
completely new mvt we have model the
data access layer that's your database
that's how we model data this is going
to be your database tables built out in
classes your templates that's your
presentation layer this is what the user
sees that's going to be their page their
web page and then the view is the
business logic so if you were to look at
an example here we have facebook.com and
when someone goes to facebook.com
they're going to be going through some
URLs here we're going to find a URL that
matches some kind of function in the
back end and that's going to be our
views those views right there in the
view layer that's going to go ahead and
get some data from the models and it's
going to render some kind of template to
us and we send that back to the user so
that's the flow here we're requesting
data the views of business logic and we
just get this and send it back to the
user so that's the mvt design pattern
very similar to
MVC okay so let's go ahead and get
started we'll start setting up our
environment and in the video after that
we will start setting up our project
okay so let's first start off with some
helpful resources for this course as you
go along with the tutorial here so the
first thing is is the source code so
that is up on GitHub it's in this link
right here and it will be linked down in
the video description so I would highly
recommend you clone this project check
out the source code and review the code
as you're coding along and look through
areas where you have any questions all
the code here will be what I coded up
throughout the tutorial now uh if you
want to clone it and set it up locally
there will be instructions in the readme
file on how to do that so that way you
can get a feel for the project and use
it maybe Tinker with with the actual
source code and just see how it all
works so after the source code I would
highly recommend you use the D jeno
documentation I will reference this
throughout the tutorial but jeno has
some of the best documentation I've ever
seen and I would highly recommend you
use it now I understand that it could be
intimidating for people uh just to start
with a documentation so that's why
you're watching a tutorial like this so
I can guide you but once you have a
question on maybe how something works or
specifics reference the documentation
please it will help you a lot so let's
go ahead and close that out and let's
talk about my environment setup so I'm
going to be using vs code you can use
whatever text editor you want if you
have atom uh Sublime Text even notepad++
any one of those will work but I like vs
code so if you're using VSS code I want
to show you my setup the theme and some
extensions that I will be using so uh if
you're not using VSS code I still want
you to watch this because I am using
some extensions that are going to change
up how things function so I want to make
sure you see that and understand why
it's happening so uh adom one dark Pro
is the theme I'm using so if you want to
use a theme everybody asked me about it
uh go ahead and use atam 1 dark Pro it's
a really cool theme and for some reason
it's not say here right now but that is
what I'm using so that's the theme and
I'm also using an extension called
prettier so prettier is really cool
because it auto formats my code here so
if I use the prettier code formatter
this right here will basically basically
format my code anytime I save it so if I
write out some HTML code and it's not
perfectly formatted if I hit contrl s or
save you'll see my code just kind of
jump into place so when you see my code
jump like that it's because of prettier
it really helps me it's absolutely
amazing I love it I'm also using
something called Auto rename tag so Auto
rename tag this basically allows me to
rename a opening tag and the closing tag
will also rename so it's Auto renaming
it so if you look at this example right
here uh when this tag gets renamed you
see the closing tag get renamed and it
goes vice versa if you rename the
closing tag so you're not going to see
me edit both HTML tags as I go through
that so that's it I would recommend you
check out the documentation the source
code these are the extensions that I
have if I forget at any point I'll try
to mention those throughout the uh
course and let's go ahead and get on
with installing our project and setting
up our uh python download and Jango in
installation okay so before we get
started here I first want to make sure
that you have python installed on your
computer and if you already have it
installed I also want to make sure that
you have the most upto-date or
compatible version of python in order to
work with jeno here so if you already
have python installed what you could do
is simply go ahead and update it to the
latest version that way once you're
installing D Jango it's going to make
sure that you have the latest versions
of both and those two should be
compatible now if you don't want to
update it maybe you need python in a
specific version or you think it's up to
dat uh just go ahead and go to this link
right here in the D jeno documentation
uh just look up python Jango
compatibility if you can't find this
link and it should show you this section
right here and this simply tells us the
version of jeno that's compatible two
specific versions of python so at this
point in time the latest version of D
Jango is
3.2 and this is compatible with python
3.6 all the way to 3.9 so the these are
the latest versions if you're watching
this video maybe a year or two out you
might want to check this uh maybe just
make sure that you're either in the
latest versions or that whatever you're
using is compatible so I already have
python 3.95 downloaded so I'm good to go
uh but if you're wanting to update or
download for the first time go to
python.org and then go ahead and click
on the downloads link and in here go
ahead and download the installer make
sure you get whatever you need for your
operating system and then go ahead and
click on that installer I'm not going to
do this cuz I already have it but this
should take a minute or two maybe just
to go through and install python or
simply update it so once you have that
complete let's go ahead and move on to
the next step here so my entire project
is going to be on my desktop and I am
using a Windows machine so let's go
ahead and open up our Command Prompt
here so later on I will switch to vs
code but just to get things started I'm
going to use a command prompt and you
can host your project wherever you want
but I'm going to host mine on my desk
desktop I cleared it for everything and
I just want to make sure everything's
here so it's easier so we're on our
desktop and if you just downloaded
python or you want to check the version
go ahead and do that that's going to
tell you the version of python in my
case I have python 3.95 I'm good to go
and let's go ahead and hit exit so at
this point we'll clear that terminal uh
what we could do is go ahead and just
install Jango globally so if I do pip
install Jango this is going to install D
Jango on my computer now I like to use a
virtual environment in theory you don't
actually need one but it's really good
practice to use them it's going to
separate all your installs from your
Global machine or uh any other
environments that you have and that way
there's not going to be any conflict so
uh you can skip this step and go ahead
and install Jango directly but ID
recommend you follow this and we're
going to use uh virtual EnV so we'll do
pip
install
virtual EnV so I always have a hard time
spelling that one for some reason okay
so I already have it installed that
tells me I'm good to go there's also pip
EnV that you can use so this is just a
package that allows us to set up virtual
environments so virtual EnV is installed
and now I can just run the command
virtual EnV and I can call my
environment whatever I want in my case
I'm just going to call it EnV you can
call this my EnV or whatever name you
want and because I'm running this from
my desktop so make sure that wherever
you're running this from you know that
file path go ahead and hit enter and
that's going to create your environment
so this should take a second
so on my desktop I can now see this file
right here or this folder so I'm pretty
zoomed in you should be able to see that
so we have a folder called EnV and
that's our virtual environment we're not
going to open it up we're not going to
deal with it the only thing we're going
to do here is go ahead and activate it
so make sure the file path is there and
on Windows I can just do EnV scripts so
whatever I call the environment scripts
and then we'll just do activate so on a
Mac it might be a little bit different
just look up the difference here it's
not too much um I don't remember exactly
what that was but we just activated our
virtual environment so now we're inside
of here instead of our Global machine
now we know it's activated because we
can see the environment name right there
and we can always deactivate our
environment so we can just do deactivate
like that that's going to turn it off so
now you don't see that right there in
the file path and we can reactivate now
the reason why I show you that is
because I've had people set this process
up and then turn off their computer log
back in and they don't know why J go
where all the commands aren't working
that's because they forgot to turn on
their environment so every time you open
this up you're going to have to turn on
the environment because all the installs
and other packages that we set up will
be in here if you set this up here like
this so now let's go ahead and clear
that so we created the environment it's
active right here make sure you run that
script and let's just do pip install
jeno so that's all we need to do and
this is going to take a second or two
it's going to install Jango for us we
can do this now because we have python
in
installed let's see maybe I need to hit
enter again so that's going to take a
second here so give us some
time okay so we have D Jango installed
and at this point it looks like
everything's successful so if you're
seeing this we're good to go we have D
Jango and at this point I'm just going
to clear this again so we'll do CLS and
I'm going to do django-admin so now that
I installed Jango I have access to this
command if I hit execute or enter I'm
going to see all these commands that I
can now run from
django-admin and in here we're going to
focus on a few here so the main ones
that we're going to see are going to be
make migrations migrate these are
commands that we're going to work with
or used to work with our database we're
going to use run server that's going to
start up our development server and
we're also going to use start project or
start app and start project so we now
have access to this we know D Jango is
installed so let's go ahead and clear
this again and now let's go ahead and
just do
django-admin and we'll do start project
so once we do start project we need to
give our project a name so let's go
ahead and call it study bud you can call
it whatever you want so this is going to
be the project name and what this
command is going to do is it's going to
create my boiler plate files to set up
my Django application so it's going to
give me my core configuration and
basically my project here so once I run
this on my desktop we're going to see
study Bud right here and we can see our
virtual environment so these are the two
things that we created and we're going
to go through the D Jango files in a
second here but at this point if you're
running this from your command prompt
just go ahead and CD into study bud so
CD into your Jango project we'll look at
the files in a second and now let's just
go ahead and run python manage.py
run server so we're going to start up
the D Jango development server and we're
going to take a look at what we
currently have so at this point it looks
like we're good we see this this note
right here that tells us we have
unapplied migrations we'll get to that
once we start working with the database
and we also see that we are currently
running on Port 8000 right here so we
can go ahead and just copy this so on
the command prompt it's a little bit
harder I can highlight that and I
typically have to go to this bar right
here and hit edit and then copy so you
could just write that out manually but
once you have that copied uh you can
just go ahead and open up your browser
and paste that into the browser one
thing I like to do is paste it in and I
also save that as a tab so I can always
hit this shortcut here so I could do
this manually like that or if I open up
a new tab I hit that shortcut and there
we go so I like to save it there so
every time I'm working with it I'm not
having to copy and paste so we just
started up our D Jango server and this
is the project that we currently have so
we actually have something running right
now we have a server on and the boiler
plate configuration that Jango gives us
so if you see this we're good to go so
far and we can move on to the next step
here so at at this point what I'm going
to do is go ahead and actually close
that out so I turned off my server we'll
have to refresh that and everyone can
store their environment in a different
way what I like to do here is take the
virtual environment and drag that into
my D Jango project so I'm going to open
up my text editor so in this case I'm
using VSS code if you're using something
else you will still just use the command
prompt unless it's already built into
the text editor in VSS code it's already
built in so at this point we'll go ahead
and open up the folder we'll go to the
desktop and let's just go ahead and go
to the project files so we see study bud
and we see all our boilerplate files
along with a virtual environment I just
dragged in so I like to have it in here
and if I open up the terminal we could
open it up by just going to terminal
right here and do a new terminal or we
could do a shortcut by just hitting
control and then til it so it's that
weird back tick looking thing on the top
left of your keyboard typically so go
ahead and uh open up your terminal that
way so at this point my virtual
environment is already activated by
default you might have to run EnV
scripts activate in this case the file
path is inside of the project folder so
here we see it and it's activated so
make sure that you do that and that's
all set up so I'll turn on my server
right now again so we'll do Python
manage.py and then run server and if my
face is blocking it we'll uh go ahead
and move that so we just ran run server
and yeah that was all the command so it
just blocked that last part there so we
see these unapplied migrations we're not
worried about those right now it's not
going to give us an error we'll go back
to that server refresh it and we're
still good so let's do a quick breakdown
I'm not going to go into too much detail
in my full Jango course I really try to
break down as much as I can here but
we'll just go over the core Jango files
here so python manage.py or the
manage.py file this is where we execute
our commands from we're not going to
touch this uh that's something that
allows us to execute those commands we
do get a default database with d Jango
so so SQL light is a default database in
production you typically use something
like MySQL postgress you can even use
nosql databases uh with Jango but we're
going to stick with uh the SQL light
database here so we're not going into
the virtual environment here that's our
different file inside of our project
we're going to see some more here so we
have a wsgi file this stands for web
server Gateway interface right here this
is the actual server and then we have a
urls.py file so this is going to be all
the routing the URL routing to our
project so when you go to a specific uh
specific page so if you're going to the
home page or the about page of a website
this is where we configure all the URLs
here so this is going to be just a list
of different URL paths like this so one
would be something like home and then
You' have about and so on so it's just a
python list of URL routes so that's how
that's going to be configured later on
here so I'm just going to go ahead and
get rid of that comment right there so
we'll save that then we also have a asgi
file this is going to be for
asynchronous um I guess asynchronous
calls here we can actually change that
up D Jango does have async support we
won't deal with that and at this point
the main file that we're going to work
with is going to be settings.py and
urls.py so settings.py is like our core
project configuration this is like the
command center to our entire project if
we go through it I'm not going to go to
every single item but here we have
things like all the URLs that are
allowed to go to this website or to
point to it we see all installed apps
which we're going to get to we see all
middleware configuration templates
database configuration for example we
see the database and this is pointing to
the base directory which is the root
directory right here and it's pointing
to the SQL light database so this is how
we can actually see how it's connecting
to everything so we have templates
databases URLs and everything like that
inside of our application along with
step file
configuration so think of settings. Pui
as the core project
configuration okay so now we actually
want to work on rendering some things
out and changing that default template
that you saw where we're just getting
that boilerplate file in Jango once we
see our server so in D Jango we are
going to work with something called apps
here so we already see default apps
configured there are apps that handle
different parts of our application
things that handle uh sessions in our
inside of our application user manag
agement and so on and basically apps are
little components of our website they
handle different parts of a website now
imagine it this way so if you had
something like facebook.com imagine that
was built by or built with using D Jango
uh you would have an app for handing
handling all your users then you can
have an app for handling uh all the
groups inside of Facebook you can have
an app for handling all user post so
these are just broken down into
different parts now the application that
we're going to have here is is not going
to be that big so we're just going to
stick to one app and this app is where
we're going to configure all of our
models which is our database all the URL
routing and all the views that are going
to handle uh basically the business
logic of our application so I'm done
talking just wanted to give you that
overview let's go ahead and move on so
in order to create our first app here
we're going to go ahead and uh you could
open up another command prompt or
another terminal if you're using the
command prompt or you could just go
ahead and hit plus here that way we're
not turning off our server
and we're just going to open up a new
terminal and then run a command here so
we're just going to do
python manage.py start app so just like
the start project command we can now Run
start app and this is going to be able
to create an app for us and I'm going to
call this base it's going to be like our
base application so we're just going to
hit enter and we're going to see a
folder get generated in here so at this
point the Jango project doesn't actually
know about this app yet so we're going
to have to connect it all it is is a
folder inside of our Jango project so
inside of Bas we see our views and this
is basically what happens when someone
goes to a specific URL these are going
to be functions or classes and these are
going to fire off things like uh any
kind of queries to the database any
templates that we need to render this is
what's going to be called when someone
goes to a specific URL so those are
going to be our views we have our
models.py file this is where we're going
to configure the database and then
different parts like"
here pour 8,000 and let's go ahead and
wv7pvH1O5Ho,"[Music]
hey what's going on guys so i'm still
working on some stuff trying to finish
up the freelance course and at the same
time not overdo it so i'll be back on
youtube within two or three weeks or so
with new content and like i said until
then i'll be releasing both guest videos
and some projects from past courses so
in this video we're going to build a
vanilla javascript sortable list with
drag and drop and this is from my 20
vanilla javascript project course on
udemy and i'll have a link to that in
the description if you're interested so
in this project we'll be using methods
like for each map sort we'll be using
the spread operator we'll work with the
document object model and we'll do a
little bit of css as well alright so
let's get into it okay so this is a
sortable list project and my main focus
on with this project is the drag and
drop api which you can find here in the
mozilla
documentation
and there's a whole bunch of drag events
that we can use such as drag start which
we'll be using
drop drag enter drag leave so we'll be
using a bunch of these in this project
and the idea is to just have a sortable
list that we can put into order and i
chose to use just the 10 richest people
i mean you could have a list of anything
top 10 of anything and the idea is to
just put it into the correct order and
we're gonna make it so that on each page
load you can see that it's in uh just a
scrambled order okay so we're gonna
scramble the list and then we can go
ahead and take one
and we can move it to another spot
you'll see we have a little highlight
when we're when we're hovered over a
certain item and i can drop it there and
it's going to switch spots with wherever
i drop it
so this button down here is to check the
order
now i know jeff bezos is number one so
i'm going to go ahead and put him there
and i know bill gates is number two so
i'm going to put him there and then we
can go ahead and check the order and
whatever is correct is going to be
highlighted in green whatever is wrong
will be in red okay i know warren
buffett is number three so we'll go
ahead and move him there and check the
order again and you can see that that's
correct
all right so like i said the main focus
here is drag and drop but we're going to
look at some other other uh helpful
methods as well and a lot of dom
manipulation and stuff like that okay so
hopefully you enjoy this project and
let's get started all right so we're
gonna get started on our sortable list
now this is gonna be
a little bit different than than some of
the other projects where we do
where all the html is actually in the
html file because here we're going to
generate
all of the list items through javascript
so we're going to do the html first
which is going to be really quick and
then create a function to generate
or output our list items into the dom
that's the top 10 richest people or
whatever you want to use if you want to
use something else that's fine so let's
start with the html which will be very
simple so let's just put a title here of
top
10
richest people and we want to include
our style sheets which we're going to do
i believe in the next video or the one
after that
and then we're also using font awesome
here for some icons so
i'm gonna head over to font
awesome
dot com
and in order to use font awesome you
need to just log in you can see i i have
an account and i'm logged in and then if
i go to start for free you can create a
kit which i already have one so i'm
going to say right here my traversing
media kit and just copy this script tag
and put that right in here
okay and then down in the body we're
going to have an h1 and we'll say 10
richest people
we'll put a paragraph a little a little
description so we'll say drag and drop
drag and drop the items into the into
their
corresponding spots
all right and then we're going to have a
ul and we're going to give this a class
of draggable list
and an id
of draggable list and the reason for
that is the class is going to be used
for styling the id is going to be used
to grab onto in javascript for to
manipulate the dom now we're not going
to put anything in here that's going to
be put in through the javascript
okay so under the ul let's have a button
and we're going to give this
a class of check dash btn and an id
of
check
okay and then in here let's say check
order
and i'm going to put an icon in here
we're just going to use the paper plane
icon so f a
dash
paper plane
and then finally we need to add our
script to the bottom so source is going
to be
script.js
all right and that's it for the html
so if we go ahead and look at this we
can open this with live server
we're not going to see any list items
obviously but we we have the ul here we
just need to insert it
using javascript
so let's jump into our script js
and first thing we're going to do is
just grab the dom elements that we need
so let's say draggable
list and we're going to set this to
document.getelementbyid
and we have an id of draggable list
draggable dash list
and then we also have the check
which is the button so we want the id of
check and we'll just call this
check
okay so that's all we need for now and
then we're going to have an array of the
richest people
i mean you could use something else if
you want
something that's
you know sortable and then i'm just
gonna paste these names in here and
these are in correct order so it's one
through ten
and then we need to create
an array called list items that'll
represent you know the list as we sort
it as it's scrambled and so on this is
going to be initialized as an empty
array okay so this is where we're going
to store the list items
and then underneath that we need a way
to keep track of the index of each list
item so we're going to initialize here
a variable called drag start index
okay we're just going to initialize it
with let because we're going to it'll
change later on
and then i'm going to call a function
called create list which is going to be
responsible for actually generating the
list items okay we're going to create
that function now so this is going to
create
list items
or let's say
insert
list items into dom
all right so let's say function
create list
and
what i'm going to do here is we need to
take this
these values in this richest people
array
but
we basically want to copy it or recreate
it so that we don't scramble the
original array because we need this
order so what we can do is just use the
spread operator which makes a copy of it
and say richest people
and then we want to loop through it so
i'm going to add on to here a 4 each
which is a high order array method that
just loops through
the array and inside here
we're going to have some parentheses and
we'll say for each person and we also
want the
index okay so we put in a function here
with person which represents each item
in the array which is a
string of a person and then the index
which is you know 0 1 2 and so on
so within here let's create a value
called list item
and we're gonna what we're gonna do is
create a new
list item element to insert into the dom
so we can do that by taking document dot
and then there's a method called create
item i'm sorry not create item create
element
because that's what we're doing we're
creating an html element and it's going
to be a list item
okay now we want to add an attribute to
this so i'm going to say list item
meaning that li
and then set attribute
and we need to have some sort of index
to keep track of each list item so i'm
going to add a data dash index attribute
when you create a custom attribute in
html5 you want to use a data attribute
so data dash and then this could be
whatever i'm calling it index and we're
going to set that to the actual index
okay which will be 0 through 9 in this
case
so that'll set the index attribute and
then we need the actual html so let's
say list item
dot inner html we're going to set that
to a template string with backticks
and we're going to have a span
with a class
of number
okay because we want to display the
actual number and we can do that by
taking the index
so this we're just using template string
here with a variable syntax or
expression syntax so we'll take the
index which starts at zero we don't want
to display zero we want one through 10
so we're just going to add 1 to that
all right and then we'll have a div
and let's give this a class of
draggable and in order to make this
actually draggable with html5 we need to
add
draggable equals true
so that we can actually click on it and
drag it
okay and then inside that div we're
going to have a paragraph
and i'm just going to give this a class
of person
name because that's what's going to be
displayed in here
and then we want to display
the
value of the array which is person okay
so we loop through richest people for
each one each item we're calling it
person and we're going to output it here
and then under that let's have
an icon
so this will be fas and let's do f a
dash
grip dash lines so basically something
to grab onto to drag
okay
and that should be it now
we want to take the
list items
array which we initialized above and we
want to push onto it
the
list item
okay which is that li with all this
stuff inside of it
and then we need to add it to the dom so
let's take our draggable list
which is the ul and we're going to use
the append child method which does just
that it'll append the li into the ul
okay so list item which is the li
and that's it let's save that and let's
take a look
so now you can see that each
list item is now being output we have
the index plus one so
we have one through ten we have the name
which is the actual value and then we
have this grip lines icon
all right now before we get to styling
this and making this look better in the
next video i want to have it scrambled
because right now it's just always the
same order and the point of this is to
have it scrambled so that you can take
each one and drag it to the correct
position all right so we'll do that in
the next video okay so now we have
an array of the richest people the top
10 richest people we're inserting it
into the dom as list items now i want to
scramble these so that when we come to
the page they're not in the correct
order and there's a few ways we can do
this what we're going to do is add on to
right here where we called for each
we're going to add some other high order
array methods
first thing i'm going to do
is
map so i'm going to go right here above
for each and do a map and what map does
is it will take the array and allow us
to return a new array of whatever we
want
and we need we need a way to
we need something to sort by and we want
it to be a random number that we sort by
so that it can get scrambled so what i'm
going to do here is say for each one i'm
going to just call a
we want to return
an array of objects and these objects
are going to have the value which of
course is a
and then also a sort value which is
going to be we're going to say
math.random
which will just create a random decimal
all right now to show you what this
gives us in the for each i'm just going
to do a console log of person because
that's ultimately what is getting
manipulated here okay and you can you
can chain these high order array methods
as many as you want and manipulate the
array so let's save that let's go back
and open up our console
and over here you're just going to see
object because we've what we've done is
is
transformed into an array of objects
that has a value
a value value and a sort value okay and
the value is the obviously the name and
then sort is going to be just a random
decimal that comes from that math.random
and if i reload each one of these sorts
it's going to be a different value
different number okay now what we want
to do is take this and actually sort the
array by this value right here this sort
so we can do that using the sort high
order array method which i just want to
show you real quick quick
javascript sort
if we look at the docs
so basically it sorts and out sorts the
elements of an array in place and
returns a sorted array the default sort
order is going to be ascending and it's
built upon converting the elements into
strings
okay and then it compares their
sequences now if we do this
without adding a special function i just
want to show you real quick where should
i do this
i guess i'll just do it right here
so let's say we have an array of numbers
and i'm going to delete this after i
just want to give you an example if i do
like 1
let's say 1 3
1 10.
40
um 302
and then i go down here and i do a
console log of numbers
dot sort okay just numbers.sort and we
take a look at that in our console let's
go let's see it's going to be down here
and if you look at it it's not sorted
numerically right we get 1 110 3 302 40.
and the reason for that is because like
it said in the docs it can it's these
are strings it converts it to a string
and then sorts it so
110 would be after one if these are
strings
now what we can do
is change how it's sorted by using a
compare function so right here compare
function specifies a function that
defines the sort order
and we can have two parameters a first
element for comparison and a second
element for comparison
so what we want to do and what we could
do here in this example is have a
function
and pass in the two
options for comparison
and then we could return from that a
let's say a minus b so the first one
minus the second one
and then if we look
in our console
now we have like a numeric sort 1 3 40
110 1302
so that's essentially what we want to do
with these with these random decimals
so let's get rid of this this is just
for example
and then just like i showed you up above
we're going to add
sort and we're going to use that compare
function we'll use an arrow though so
we'll say a and b
and we just want to return from this a
dot sort
and we want to do minus b dot
sort
okay which is this which is this value
here so now let's save that and let's go
back
now we're still just going to see object
over here because we're still returning
an array of objects however you can see
the order that work that we're logging
the order is different now we have
carlos bill gates so if we reload
now it's in a different order now it's
in a different order so the array is now
being sorted by this random value so the
last part of this is to
map it back into just an array of
strings of this right here these values
and that's very simple all we have to do
is add another map after the sort
and say for each one we just want to
return the value
okay because remember we have an object
that has a property of value
okay with whatever that string is
whatever the name is and now now we're
just mapping it back to that so let's
save that and go back
and now you can see we're logging each
string it's also back in the dom and
it's random okay so we'll
reload and there we go so each time we
reload it scrambles the array
so hopefully that makes sense and we'll
go ahead and just get rid of that
console log we don't need that anymore
all right so we've transformed
this
uh ordered array
so basically we copied it and then we
went ahead and changed it into an object
with a value and a sort
we did the sort by the random value and
then we turned it back into
an array of strings
but this time it's going to be scrambled
and then we loop through and do the same
thing we were doing before
okay so hopefully that makes sense in
the next video we're going to take this
and style it and make it look a little
better
all right so now we're going to do the
css because this doesn't look very good
i want to move everything to the middle
and style these list items and so on
so first thing we're going to do is grab
a font from
google
fonts.google.com we're going to grab the
lato font
so down here we'll go ahead and choose
the import
okay we'll grab that and just at least
while we do the css let's just
make this smaller so that we can see
both at the same time
so let's paste that in we'll import that
font
and
just like i do with just about
everything we're going to add a box
sizing property
of border box on everything and then the
body itself
is going to be pretty this is going to
be pretty repetitive throughout our
projects just because we're just
centering everything
so let's set
a background
i'll do a background color explicitly to
white
and i'm going to display
flex because i want to center everything
but i want it to be a column so flex
direction
column
and we're going to align items to the
center go ahead and save that you'll see
that everything gets pushed to the
center i want to make sure it's
justified to the top so we're going to
use flex start for justify content and
then just set the height of the body to
100 viewport heights
remove the margin
and we're going to
add the font family which is the later
font
okay
so that should do it for the the body
now we're going to move on to the
draggable list which is the ul that
surrounds all of this
so a class of draggable dash list
and we're going to set a border around
everything so let's say 1 pixel
solid and we're actually going to use
this color
quite a bit so let's let's actually
create a variable for it so we'll just
say on the root scope here
let's set a variable so we want to do
dash dash we'll call this border
color
and that's going to be e
3 e5 e4
okay
and while we're at it let's just add
we're going to have a
background color and these are just all
um
gray
colors you can you can make it more
stylish if you want but i'm just going
to stick to plain gray so let's do c
3 c
7 c a
okay so now we can use these variables
where needed so right here we're going
to use our border color so we'll say var
and we want our border color
and then let's see the color of the text
let's do three
what is it three four four four four f
okay actually we can probably put that
in a variable as well you don't have to
it's completely up to you
and i guess we'll call this uh text
color
and then let's change that
to our variable
text color
okay so we have our color let's add our
padding or i should say take away any
padding so set that to zero and then for
the um
for the list
style type we're going to set that to
none because we want to take the bullets
away so let's save that there we go so
that still doesn't look very good but
now we're going to style the
list items and the content within the
list items here
so let's see we'll do uh draggable list
li
and
let's set background color to white
and let's set a display flex
and set a flex value of one
all right and then
what i want to do next is add a border
after each of these list items
so except for the last one there's no
sense in having a border on the last one
so what we'll do is we'll set the
draggable list list item and we'll use
the not pseudo selector
and then in here we're going to use the
pseudo selector of last
last of type
so basically what this is saying is all
the list items except the last one and
we're going to set a border bottom
one pixel
solid and let's use our variable
of border color
and save and there we go so now we have
a border on a bottom border on all of
them except for the last one
so let's style the number basically i
want the number to be like in a big
square on the left
so that has a class of number
so let's take our draggable list and
then the span with the class of number
and let's add a background
color which is going to be i believe
yeah it's going to be our variable
of background color
which is the darker gray and then we're
going to set this to display flex
because we want the number to be in the
middle of the box
so we'll align items to the center and
we will justify content
to the center as well
i'm going to increase the font size of
the number to 28 pixels
and then make the whole area have a
height of 60 pixels and a width
of 60 pixels so just a square box
okay and then to take care of this
spacing right here i'm going to just
change the margin of the the name
remember each of these paragraph with
the name has a class of person name
so let's
say draggable
list
and then
uh person
name
and we're gonna set margin to zero top
20
and then zero zero
all
right now in here we have a class of
draggable
if we look at our javascript where these
are getting generated div with the class
of draggable surrounds the person name
and the icon
so i want to start to work with that
so let's say draggable
okay and we want the cursor to be a
pointer so that the user knows that they
can actually click and drag we're going
to set display
flex and let's go ahead and align items
center and then we're going to justify
the content to space between so that any
remaining space between flex items goes
in between the elements
and then just set the padding to 15 so
we bring it away from the sides and set
flex to one
and there we go so that looks pretty
good you can see you have a cursor so
that hints that the user can actually
click and drag it
so let's see what's next when
when we click the check order button
which we will style this in a minute
what it's going to do is is see if the
or see which
you know which item is in the correct
order if it's in the correct order it's
going to be highlighted green
if not it's going to be highlighted red
so we're actually going to have
on the list item i'm just going to grab
this
so draggable list
li
and then on the li we'll have a class of
either right or wrong
and then we want to change the color of
the person name depending on that so
let's change this to color
and if it's right then it's going to be
green so we're going to have a color
of hexadecimal 3
ae
374 which is like a very bright green
and then let's actually just we'll just
copy this
and then we'll change
this right class to wrong
and let's change the color to a red
which we're going to do ff
3838
all right now to test this out remember
these the li is being created within
javascript right here
let's create element so just to test out
the class
we could just
take our list item and we could say
class list
and we could do add
and we could add a class of write and
this will add it to all of them you can
see now they're green if we add a class
of wrong then they're all red now we're
not going to keep this here because i
mean it doesn't make sense but we will
be we be adding this later when we
actually have the event to check the
order okay so i just wanted to just
quickly show you how uh
how that looks
all right so we'll just take that line
out
and then the last thing i want to do in
terms of this is when i'm dragging over
like if i'm going over jeff bezos i want
jeff bezos's the inner
list item to be a little darker
okay change color a little bit so
that'll have a class of over
so let's add that
we'll go right here and say
draggable
list and on the li will be a class of
over
and then
on draggable is where we want to add
that is where we want to basically add
the color so let's say background
color
and we're going to set that to
ea
three times
all right and just to show you i mean we
could
add the class of over just to show you
that
it changes that color
okay
so i think yeah that's it as far as the
list items now we just want to do the
button real quick so let's go down to
the bottom here and it has a class of
check btn
and we're going to set the background
color
to the variable
of background color i should say the
custom property that's what it's
technically called
and then let's see uh why is that oh i
get a quote in there
okay so background and then let's set
the border to none
let's set the color of the text
to our variable of text color
and then let's set the font size
to 16 pixels
and then just add some padding
so 10 pixels top and bottom 20 left and
right and let's also add a cursor
pointer here as well
all right and then i'm just going to
give it a little effect
when it's active so let's say check
button
and then colon active
so when we click it i want it to just
scale down a little bit so we're going
to use the transform property and then
scale
and
1 is the default so we're going to just
do 0.98
so that way when i click it it just you
can see it scales down a little now
notice that border right there i want to
get rid of that
so we're going to add check button
focus
and set the outline
to
none
okay so now
that border's gone
so that's the css so in the next video
we're going to start to work on the drag
events because when i click and i hold
this and i start to drag we can fire off
an event when i drop it somewhere we can
fire off an event we basically want to
be able to just bring it to where we
want
okay and then we want to proceed to be
able to check the order and match it
against the original array so we'll get
into that next all right so now we're
going to get into drag and drop okay we
want to be able to grab one of these
bring it down to where we want let go
and then it'll get put in that spot and
then ultimately we want to be able to
check the order but let's handle the
drag drop events there's actually quite
a few and if we look at the
documentation here the mdn web docs
um you'll see that there's a ton of
different drag events
so we're going to be using
let's see drag start so the user starts
dragging an item so we want to put that
on the draggable class which is you know
what we're grabbing right here so we
want drag start we want
drag enter and drag leave
so basically when we enter and leave an
element also
uh what else we want drag over because
we want to have whatever whichever one
we're dragging over we want to add a
background color we want it to be a
darker gray and then of course drop
which this this has always confused me i
always put drag drop as the event but
it's just drop
and that is an item is dropped onto a
valid drop target
okay
so those are the events we need to use
now
this create list that we have here
runs automatically and you know it sorts
everything and it puts them into the
list items so right at the end while
within the create list function i'm
going to call
an add event listeners
function
and we're going to create that down here
add event listeners and that's where
we're going to do just that at our event
listeners and there's two dom elements
we need one is the draggable class so
let's say const and we'll call this
draggables and it's going to be document
dot
query selector all because there's more
than one
class of
draggable
and then we also want the draggable list
list items
so this is going to be let's call this
drag
list
item
or items
and then we want to add our event
listeners so i'm just going to loop
through
draggables so for each
draggable
and we just want one event listener on
each one so let's say draggable
dot add
event listener and this is where we want
to listen for
drag start and when that happens we're
going to call a function called drag
start
okay and make sure you have an uppercase
s here camel case
and then let's see on the
i'm just going to copy that
on the drag list items so this will be
drag
list items we're going to loop through
let's call this item
and then on item
we're going to have we're going to have
actually a couple different events here
so the first one is going to be drag
over which is going to call a function
called drag over
and then we're going to have a few more
let's do 2 3 4.
so this one here is going to be drag
drop
and that's going to be called on the
drag
i'm sorry i already almost did it again
so this is going to be just drop
that's the event
and then this event is going to be
drag enter
and that will call drag
enter
and then drag leave
drag leave
okay
so what should happen now is these
list these events should get fired off
when we
these functions should get fired off
when we hit these events so when i start
to grab this and drag it should fire off
this function now we haven't created
these functions yet so let's do that now
so let's say function
drag start
and i think for now what i'm just i'm
just going to do a console log just so
you can see what which event
is actually firing off so this is the
drag start
and let's see we'll just grab this we
have what five of these
so we have drag start
and then we have drag
enter
so that will call drag enter
and then we have
drag leave
okay and we have drag over
and we have drag drop
but the the event itself is just called
drop
all right so let's save that and now
these should fire off so let's open up
our console and i mean i know there's
not a lot of room here but i'm just
going to click on this and move it
slightly and you'll see we get drag
start and drag enter because i've
entered into this one
when we leave it we get drag leave and
you'll see the drag over just keeps
going because i'm still just hovering
over it
okay if i let go then the drag over
stops and the drag leave runs so the
reason i did the console log is just so
you can see when these fire off
okay so we basically have drag start and
then enter
leave
enter leave
and drag over just is continuously
running as i'm over the element
okay now this might get confusing if i
leave these console logs in so what i'm
going to do is just
i'll leave them but i'm gonna comment
these out
and you can pre you know check it out
yourself do it yourself so you can see
exactly when they're fired off
okay so now let's figure out what we
need to do here we have our events
getting called
our functions getting called that are
linked to our events but we want to be
able to grab one and let go and and
replace it we want some other things to
go on as well like when i hover over you
know michael bloomberg or whatever we
want that that color to change um that's
probably the easiest so let's do that
first so basically on
let's see that's not actually that's not
going to be on drag over that's going to
be on
enter yeah so when we enter
we want to add the class of over
remember we have that css class of over
and when we leave we want to remove the
class of over so on drag enter let's
just simply say
we can actually use this keyword which
pertains to the element
class
list
add
and we're going to add the class of over
which will give it a slightly darker
background all right and then i'll just
copy that and go into drag leave
and we're instead of whoops instead of
add we're going to use classlist.remove
all right so that should be pretty
simple let's grab this and there we go
so when we when we're entering it adds
the class
of over to the current element we use
the word the keyword this
which pertains to the actual element the
list item and then when we leave it
removes it and then it adds it to the
next one so we get that effect
all right so that's pretty easy
now to be able to actually move one of
these to another position
we're going to deal with this right here
this
drag start index that we initialized up
here at the top so we're going to go
into drag start
and we're going to take the drag start
index
and we're going to set it to this dot
and there's a method called closest so
we want the closest
and it does just that it will look at
the dom and we want the closest li
and then we're going to get the
attribute of the data index because
that's how we tell which item is in
which position
so data index
okay and let's make this a number
with the plus symbol here so we have the
drag start index and we can actually
take a look at that if you want
drag start
index and
open up our console let's grab this one
right here and as i
do the drag star you'll see that this
has a drag start index of two i grab
this one has an index of zero
now
since we have that set
let's go down to let's see drag drop
and from here now we want to create a
drag end index
okay so we're going to say const
drag
yeah drag end index
and we're going to set that
to this dot get attribute and we want
the data index
data index so basically we're getting
the start index and the end index and
let's put a plus sign
here as well so that that's a number
okay
uh whoops
and then what we want to do with that
is we want to swap them right we want to
swap the
the one we click and drag with the one
we drop it into
so let's have we'll have a function
called swap items
and that's going to take in the
drag
start index and the drag end index
right
and of course we want to remove the over
class so we'll just say this dot class
list
dot uh remove
over just so the the dark background
doesn't stay
and then let's create our swap items
okay so function
swap items
and basically that's going to take in a
two
it's going to take in actually the first
one is the from index which is the one
we click and drag and then the two index
which is where we drop it
all right and let's just do a
cons oops
console.log here and i just want to show
you something real quick so i'm just
going to do one two three
and if i go and i drag this
and i drop nothing happens and the
reason for th"
DeO7xLXORpY,"[Music]
this video is sponsored by hostinger if
you're looking for a reliable and
affordable web host hostinger has
everything from shared hosting to vps's
to cloud hosting and more their most
popular shared plan includes 100
gigabytes of ssd storage
free email hosting an ssl certificate
git and ssh access and much more
perfect for our portfolio or small
business website you can choose to pay
monthly or you can pay up to four years
in advance
click the link in the description below
and enter the code traversie media to
get 10
off today hey what's going on guys today
we're going to look at github copilot
and i'm sure that you've seen a bunch of
videos on this
probably some click baity videos talking
about it stealing your jobs and all that
this is more of just an objective look
at it i signed up for the wait list a
little while ago
and got approved and i've been messing
with it over the past
week or so and it's something that i
think is going to be really helpful and
something that i like
i mean we talk a lot about we joke a lot
about having to go to stack overflow and
copy and paste
this is essentially like having that
right in your editor only better
um so i like it i don't think it's gonna
steal anybody's job i think it's gonna
help us do our job
um so we're gonna take a look at it but
first let's talk about
how it actually works so copilot is
built on the codex
ai system from open openai i'm sure a
lot of you have heard of
openai's gpt-3 codex is basically a
special version of gpt-3
built for programming tasks and since
we're using ai
it needs training data so it's actually
been trained on
source code from publicly available
sources including public github repos
and this may cause you to ask if the
code is just copied
i guess only 0.1 percent of the time
the suggestions that it makes contains
some snippets
that are verbatim from the actual
training set
only 0.1 percent and you can read more
how it works
on the website so it tells you gives you
some examples
and then down at the bottom here you get
some frequently asked questions
but i really want to focus on actually
using it and kind of giving you
a demonstration if you want to use it
you have to sign up for the wait list so
you can just come here and click sign up
and you know you can just add yourself
to the wait list
so let's jump into vs code and i already
have it installed
as you can see over here my extensions
right here so we have github copilot
all right and i just have an index.js
file and i want to just start off with
some
simple examples some simple functions
that do specific things
so let's start off with something really
simple let's say we want a function to
generate a random number so i might call
it ran
randomnum and you'll see that we get
this gray code that just pops in here
and this is
this is a solution that copilot is
suggesting
just based on the function name so it's
a function that takes in a minimum
maximum and returns a random number in
between that
now if i want to accept this i can
either click here on accept or i can hit
tab
which is probably what you're going to
do most of the time and it'll put that
code
in the editor okay another thing i want
to show you is if we do that again and i
hover over this
and i click on open copilot or control
enter
it'll open in the side some of these so
different solutions that you can look
over
all right so let's say we want this one
we can go ahead and click accept
now what's even cooler than that is we
can go ahead
and just put a comment in here so if we
want to do the same thing create a
function to
create a random number let's say create
function
that generates a random
and it'll even try to continue your
comment for you so
we'll just say random number we'll hit
enter
and then it'll give me the first line of
the function so if i want to accept that
i'll hit tab
i'll hit enter again it puts in the
function body
i'll accept that and we can just create
the function purely by
just a comment telling it what we want
and this is this is obviously something
pretty simple
but some people may have to go to stack
overflow to create a function like this
and that's one of the great things about
this is you can just do it right from
your editor
and you can get multiple solutions let's
say we want a function to
get yesterday's date we'll say create
function to get yesterday's date
and i'll accept that with tab and there
we go
let's say we want to create a function
to convert
fahrenheit to celsius tab there we go
so just functions like this just to do a
specific task
this is really good for and we can also
use it to generate data so let's say we
want
we'll say create array of numbers
and we'll click tab we'll accept that
i'd probably change this to const
but yes we get a an array of numbers one
through ten
let's say we want to create
uh an array of names
or we'll say an array of five names
and there we go so we get and now it
uses cons because it saw that i already
used const
now let's say we want to do some objects
we'll say
create an array of
we'll say an array of five objects
with id
name and age okay so kant's people
there's one two
3 4 5 and then it ends
okay so you can actually just specify
you know
what what these you want these objects
to look like what fields they should
have
now let's say we want to do something
with this data so i'll put a comment and
let's say
order people
by age and it gives us this function
here so just
people.sort and if we want to check that
out let's say ordered people
and
now you can see we have them ordered by
age
we could go you know further into this
and let's say
get only people
whose name starts
with jay so we have john and james
in order by age
ascending oops ascending
okay so hit tab save
and let's console.log filtered people
and clear this up and run it and now you
can see that we get
just james and john and they're ordered
by age ascending
so copilot's great for for doing this
sorted sorting filtering
all that stuff but i just want to
mention it's really important that you
understand things like filter and sort
and map and for each
these are really important high order
array methods
that you need to know when you're a
javascript developer so
one of the fallbacks i can kind of see
with this with copilot is people not
learning as much because they can just
type in
what to do and it's important that you
understand your code
all right so i'm going to clear all this
up
and we'll go ahead and clear this up and
what i want to do now is start to work
with a third-party api
so i'm going to use
jsonplaceholder.typeycode.com which is a
fake rest api
for testing and prototyping and you can
use different resources like
posts comments i'm going to use to do's
so you see if we hit this url we get a
list of 100 to do's with
user id id title and completed
all right now as far as the url i was
going to just paste it in but i decided
to just try a comment
and just say get the url
for jason placeholder
to do's and it did it so i'll hit tab
it does put slash one in here so we'll
just get rid of that
and we'll just get rid of var and use
const
okay and we don't need the comment i
just wanted to generate the
the url now another thing we're going to
have to
install node fetch since i'm not in the
browser environment i don't have access
to the fetch api so let's just
npm init dash y and then
npm install node
fetch all right so then we'll just go
ahead
and bring that in let's say const fetch
and that'll auto-complete for me and
we're going to go ahead and just have a
comment that says
create function
to get to do's okay that's it
and we'll hit tab so get to dues and
then it looks like
it's going to make a request with fetch
turn to jason and then get the data and
use slice to get the first 10. so we
could do that let's click on previous
and see what else we got so this one
will get the data
and return an object with all the fields
and the values and it knows that
this api uses an id title completed
and user id fields so i'm going to click
accept
okay so now we have a function to get to
dues and i didn't have to write any code
all i did was put this comment in
and then we could use this just to make
sure it works
by calling actually let's
console.log get to do's
and oops get to do's now this returns a
promise so we're going to do dot then
and let's say for our to do's
and i'm not going to use the
autocomplete here because all i want to
do
no pun intended is console log the to
do's
yeah console log to do's all right so
let's try it we'll run the file
and there we go so let's just map it
getting the data mapping through
and then we're console logging it and i
haven't used
the dot then syntax in a long time and
i'll show you
how we can do this with a sync await as
well but let's say we want to post a
to-do
let's get rid of this and let's put a
comment and we'll say create
a function to post
a to-do all right so we'll go through
this let's see what it gives us
okay so gives us all everything we need
as far as the
the headers the content type and then
the body
is going to be whatever is passed in
here all right good so that looks good
to me let's try it out so we want to run
post to do and it takes in
a to do object which will give a
title and it even will give me some
sample values we'll just do that
title test completed false and then
that's going to return a promise so we
want to do dot
then response
and res.json
and then dot then
oops dot then and then we get
the the data and we'll just console log
it
all right so let's try it out we'll run
the file and there we go so we get our
response back
with our our data are title and
completed and it also gives you the id
which is 201 in this case all right so
very very cool
as far as a sync of weight goes let's
get rid of this
and all i'm going to do is start to
create a function i'll call it get to
dues and you'll see it'll automatically
put async in here i'll click tab and
then
that looks good it's just going to
return the data and then if we want to
use that
remember this returns a promise so we
have in if we're using a sync away
we have to use this inside of an
asynchronous
function so what we'll do is create an
iffy a function that runs
automatically and then here we'll call
this a sync
and we'll create a function in here and
yeah we'll just use that so tab that's
just going to get the to-do's put it in
this variable and then
console log it so i'm going to save that
and let's run this and now we're able to
get all the to do's
using a sync away so this is just an
example of
using copilot with uh you know when
you're dealing with a third party api
so let's clear everything up here and
let's say that we're working with
express to create an api so we could
just take the basic parts of creating
express server and do them separately
for instance we could say you know
require
express or you could say require
anything
and that'll bring it in and then we
could say init
express okay so that will set app to
express we could say
start server and that would listen on a
port
but you can also go a little more higher
level
and just say create a basic
express server we could even add a port
we'll say on
port 5000 okay and then we're just going
to go through this so i'll tab that
and hit enter
okay so we're initializing express
setting the port
to what either the environment variable
or 5000
and since this is such a long big block
of code there's spaces as well so we'll
just
hit enter until we see a new suggestion
so that's to
include the static folder
now we have listen on the port console
log listening on
the port and that's it
so just this one comment gave me a basic
server that i can run so if i install
express
and i run node index
listening on 5000
so very very powerful stuff and then of
course if we wanted to let's say we
wanted to add
um middleware we'll say add
express body parser middleware
and there we go if we want to
create a row let's go down under here
and let's say
create index row
okay next line it's going to just send
the
index html from public but obviously you
know you would go in and change this
stuff
i think it's going to just save us a ton
of time honestly i i'm really excited
about this
and i'm sure that there's so much more
that i could do that i don't know about
i'm i'm brand new to this just like most
people
are now as far as um
as far as react goes i didn't get too
much of a chance to play with it with
react
but if we create a react component
and let's just call it to do right and
then i go up here and i want it let's
say i want to import
use state because i want to add some
state so import use state
from react and then what i thought was
really cool is if i go
where i would normally put my state so
right here
it'll automatically create a piece of
state called text now text relates to
to-do's right so if i click tab and
accept that
go on to the next line we have editing
completed so notice that they all relate
to
what it to what it to do would have now
of course it might not be exactly what
you want
you're probably going to go in and
change these but i thought it was pretty
interesting
that it chooses fields or you know state
based on
the component so for example if i were
to
create one called login all right and
then i go down here where i would put my
state
and look at that username next one
password next one error loading
logged in and it's just going to keep
guessing
um state that would relate to a login
component
all right so i don't know about you guys
but i think this is great i find it
really helpful and i think it's going to
speed up productivity
and and and it's just what it says it's
a it's a pair programmer it's a co-pilot
it's not going to take your job
so ignore the the click baity videos and
in tweets that are talking about that if
that ever happens it's not going to be
for a very very long time
there's plenty of jobs that are going to
get automated out before
programmers so um so just pay no
attention to that but
i would suggest getting on the wait list
if you're not already on it
and just start to mess with it and you
know
like i said i just started using it so
i'm sure there's there's a lot that uh
that you can do that i don't know about
but that's it guys i hope you enjoyed
this video i'm losing my voice now
but i will see you next time"
