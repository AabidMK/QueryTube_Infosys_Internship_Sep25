import pandas as pd
import re
import isodate

# Load the dataset
df1 = pd.read_csv('master_task1_datset.csv')

# 1. Remove Emojis
def remove_emojis(text):
    if isinstance(text, str):
        emoji_pattern = re.compile(
            "["
            "\U0001F600-\U0001F64F"  # emoticons
            "\U0001F300-\U0001F5FF"  # symbols & pictographs
            "\U0001F680-\U0001F6FF"  # transport & map symbols
            "\U0001F1E0-\U0001F1FF"  # flags (iOS)
            "\U00002702-\U000027B0"
            "\U000024C2-\U0001F251"
            "]+",
            flags=re.UNICODE,
        )
        return emoji_pattern.sub(r"", text)
    return text

for col in ['title', 'description', 'tags', 'channel_title', 'channel_description']:
    df1[col] = df1[col].apply(remove_emojis)

# 2. Remove Special characters
def remove_special_characters(text):
    if isinstance(text, str):
        return re.sub(r'[^\w\s]', '', text)
    return text

for col in ['title', 'description', 'tags', 'channel_title', 'channel_description']:
    df1[col] = df1[col].apply(remove_special_characters)

# 3. Remove HTML tags
def remove_html_tags(text):
    if isinstance(text, str):
        return re.sub(r'<.*?>', '', text)
    return text

for col in ['title', 'description', 'tags', 'channel_title', 'channel_description']:
    df1[col] = df1[col].apply(remove_html_tags)

# 4. Convert to lowercase except Videoid and channel id
for col in df1.columns:
    if col not in ['id', 'channel_id','duration']:
        df1[col] = df1[col].astype(str).str.lower()

# 5. Strip extra whitespace
def strip_extra_whitespace(text):
    if isinstance(text, str):
        return " ".join(text.split())
    return text

for col in ['title', 'description', 'tags', 'channel_title', 'channel_description']:
    df1[col] = df1[col].apply(strip_extra_whitespace)

# 6. Ensure title uniqueness: check for duplicates across video_id
df1.drop_duplicates(subset='id', keep='first', inplace=True)

# 7. Parses an ISO 8601 duration string and returns the total seconds
def parse_duration(duration_string):
    try:
        # Use isodate.parse_duration which handles the 'PT' prefix
        duration = isodate.parse_duration(duration_string)
        return int(duration.total_seconds())
    except Exception:
        return None 

df1['duration'] = df1['duration'].apply(parse_duration)

# Save the cleaned data
df1.to_csv('cleaned_video_details.csv', index=False)
print("Cleaned video details data saved to cleaned_video_details.csv")